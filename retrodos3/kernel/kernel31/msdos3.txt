     1                                  ; ****************************************************************************
     2                                  ; MSDOS3.BIN (MSDOS 3.3 Kernel) - RETRO DOS v3.1 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 16/01/2024 (BugFix) - (Previous: 16/12/2022)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2019 (Retro DOS 3.0), 29/06/2019 (Retro DOS 3.1)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.14  
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	    ((nasm msdos3.asm -l msdos3.txt -o MSDOS3.BIN)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    15                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    16                                  ; ****************************************************************************
    17                                  ; main file: 'retrodos3.s'
    18                                  ; incbin 'MSDOS3.BIN' ; (DOSGROUP CODE SEGMENT)
    19                                  ; ----------------------------------------------------------------------------
    20                                  ; 07/07/2018 - Erdogan Tan
    21                                  ; (Note: I have not got MSDOS 3.3 kernel source files; so, I need to continue
    22                                  ; by using disassembled MSDOS.SYS -v3.3- and MSDOS 6.0 kernel source files.)
    23                                  ; ----------------------------------------------------------------------------
    24                                  ; MSDOS 6.0 Kernel source files:
    25                                  ;	MSDATA.ASM, 
    26                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    27                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC)
    28                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    29                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    30                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    31                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    32                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    33                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    34                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    35                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    36                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    37                                  ;
    38                                  ; MSDOS 2.0 Kernel source files:
    39                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    40                                  ;	MSCODE.ASM
    41                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    42                                  
    43                                  ; ----------------------------------------
    44                                  ; 20/05/2019 - MSDOS3.S - Retro DOS v3.0
    45                                  ; 29/06/2019 - MSDOS3.ASM - Retro DOS v3.1
    46                                  ; ----------------------------------------
    47                                  
    48                                  ;============================================================================
    49                                  ; DOSLINK
    50                                  ;============================================================================
    51                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    52                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    53                                  ;stdio time xenix xenix2
    54                                  
    55                                  ;============================================================================
    56                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    57                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    58                                  ;============================================================================
    59                                  ;
    60                                  ; ###########################################################################
    61                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    62                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    63                                  ; #			 Licensed to: Freeware version			    #
    64                                  ; ###########################################################################
    65                                  ;
    66                                  ; Input	MD5   :	EF2ADCA1CB3882118FD247DD4C672C81
    67                                  
    68                                  ; ---------------------------------------------------------------------------
    69                                  ; File Name   :	D:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS33.BIN
    70                                  ; Format      :	Binary file
    71                                  ; Base Address:	0000h Range: 0000h - 75CFh Loaded length: 75CFh
    72                                  ;============================================================================
    73                                  ; MSDOS33.BIN = IBMDOS.COM, 17/03/1987, 30159 bytes (IBM PC DOS 3.30 kernel)
    74                                  
    75                                  ;============================================================================
    76                                  ; MSDOS.ASM
    77                                  ;============================================================================
    78                                  
    79                                  ;TITLE   Standard MSDOS
    80                                  ;NAME    MSDOS_2
    81                                  
    82                                  ; Number of disk I/O buffers
    83                                  
    84                                  ;	INCLUDE STDSW.ASM
    85                                  ;       INCLUDE MSHEAD.ASM
    86                                  ;       INCLUDE MSDATA.ASM
    87                                  
    88                                  ;	END
    89                                  
    90                                  ;============================================================================
    91                                  ; STDSW.ASM
    92                                  ;============================================================================
    93                                  
    94                                  TRUE    EQU     0FFFFH
    95                                  FALSE   EQU     ~TRUE ; NOT TRUE
    96                                  
    97                                  ; Use the switches below to produce the standard Microsoft version or the IBM
    98                                  ; version of the operating system
    99                                  ;MSVER   EQU     false
   100                                  ;IBM     EQU     true
   101                                  ;WANG    EQU     FALSE
   102                                  ;ALTVECT EQU     FALSE
   103                                  
   104                                  ; Set this switch to cause DOS to move itself to the end of memory
   105                                  ;HIGHMEM EQU     FALSE
   106                                  
   107                                  ;	IF      IBM
   108                                  ESCCH   EQU     0			; character to begin escape seq.
   109                                  CANCEL  EQU     27			;Cancel with escape
   110                                  TOGLINS EQU     TRUE			;One key toggles insert mode
   111                                  TOGLPRN EQU     TRUE			;One key toggles printer echo
   112                                  ZEROEXT EQU     TRUE
   113                                  ;       ELSE
   114                                  ;       IF      WANG			;Are we assembling for WANG?
   115                                  ;ESCCH   EQU     1FH			;Yes. Use 1FH for escape character
   116                                  ;       ELSE
   117                                  ;ESCCH   EQU     1BH
   118                                  ;       ENDIF
   119                                  ;CANCEL  EQU     "X"-"@"		;Cancel with Ctrl-X
   120                                  ;TOGLINS EQU     WANG			;Separate keys for insert mode on
   121                                  					;and off if not WANG
   122                                  ;TOGLPRN EQU     FALSE			;Separate keys for printer echo on
   123                                  					;and off
   124                                  ;ZEROEXT EQU     TRUE
   125                                  ;        ENDIF
   126                                  
   127                                  ;============================================================================
   128                                  ; MSHEAD.ASM
   129                                  ;============================================================================
   130                                  
   131                                  ;--------------------------------------------------------------
   132                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   133                                  ;--------------------------------------------------------------
   134                                  
   135                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   136                                  ;        by Microsoft MSDOS development group:
   137                                  ;           Tim Paterson (Ret.)
   138                                  ;           Aaron Reynolds
   139                                  ;           Nancy Panners (Parenting)
   140                                  ;           Mark Zbikowski
   141                                  ;           Chris Peters (BIOS) (ret.)
   142                                  
   143                                  ; ****************** Revision History *************************
   144                                  ;          >> EVERY change must noted below!! <<
   145                                  ;
   146                                  ; 0.34 12/29/80 General release, updating all past customers
   147                                  ; 0.42 02/25/81 32-byte directory entries added
   148                                  ; 0.56 03/23/81 Variable record and sector sizes
   149                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   150                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   151                                  ; 0.75 04/17/81 Improve and correct buffer handling
   152                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   153                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   154                                  ; 1.00 04/28/81 Renumber for general release
   155                                  ; 1.01 05/12/81 Fix bug in `STORE'
   156                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   157                                  ;               RENAME fix, general cleanup
   158                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   159                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   160                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   161                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   162                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   163                                  ;               of smaller improvements
   164                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   165                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   166                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   167                                  ;               zero extent field in IBM version (back to 1.01!)
   168                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   169                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   170                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   171                                  ;               is searched first when possible to minimize I/O
   172                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   173                                  ;               full sector write when file is growing
   174                                  ;      03/09/82 Multiple I/O buffers
   175                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   176                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   177                                  ;               must invalidate all buffers (disk and directory).
   178                                  ; 1.27 03/31/82 Installable device drivers
   179                                  ;                 Function call 47 - Get pointer to device table list
   180                                  ;                 Function call 48 - Assign CON AUX LIST
   181                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   182                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   183                                  ;               call entries.  Most CS relative references changed to SS
   184                                  ;               relative with an eye toward putting a portion of the DOS in
   185                                  ;               ROM.  DOS source also broken into header, data and code pieces
   186                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   187                                  ;               return the current values.
   188                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   189                                  ;               call to return flag location (call 29)
   190                                  ;      04/15/82 Volume ID attribute added
   191                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   192                                  ;               avoid a CS relative reference.
   193                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   194                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   195                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   196                                  ;               call 49.
   197                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   198                                  ;               address of DPB
   199                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   200                                  ;               writting to console device via file I/O.  Added a console
   201                                  ;               output attribute to devices.
   202                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   203                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   204                                  ;               as devices....  pipes, redirection now possible
   205                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   206                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   207                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   208                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   209                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   210                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   211                                  ;               out back about 1.27 or so (oops).  ARR
   212                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   213                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   214                                  ;               RMDIR Xenix calls
   215                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   216                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   217                                  ;               Frees up lots of memory.
   218                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   219                                  ;               system buffers
   220                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   221                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   222                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   223                                  ;               changed to set file handle environment.
   224                                  ; 2.00 08/01/82 Number for IBM release
   225                                  ;      01/19/83 No environ bug in EXEC
   226                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   227                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   228                                  ;      01/27/83 Growcnt fixed for 32-bits
   229                                  ;      01/27/83 Find-first problem after create
   230                                  ; 2.01 02/17/83 International DOS
   231                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   232                                  ;               an IBM PC
   233                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   234                                  ; (MSHEAD.ASM, MSDOS6.0, 1991) - mshead.asm 1.1 85/04/10 -
   235                                  ; 2.10 03/09/83 Start of NETWORK support
   236                                  ;		New Buffer structure
   237                                  ;		New Sytem file table structure
   238                                  ;		FCB moved to internal representation
   239                                  ;		DOS re-organized
   240                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   241                                  ;		device interface.
   242                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   243                                  ;               an IBM PC
   244                                  ; 2.50 09/12/83 More network stuff
   245                                  ;
   246                                  ; *************************************************************
   247                                  
   248                                  ; ----------------------------------------------------------------------------
   249                                  ; EQUATES
   250                                  
   251                                  ; Interrupt Entry Points:
   252                                  
   253                                  ; INTBASE:      ABORT
   254                                  ; INTBASE+4:    COMMAND
   255                                  ; INTBASE+8:    BASE EXIT ADDRESS
   256                                  ; INTBASE+C:    CONTROL-C ABORT
   257                                  ; INTBASE+10H:  FATAL ERROR ABORT
   258                                  ; INTBASE+14H:  BIOS DISK READ
   259                                  ; INTBASE+18H:  BIOS DISK WRITE
   260                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   261                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   262                                  ; INTBASE+40H:  Long jump to CALL entry point
   263                                  
   264                                  ENTRYPOINTSEG   EQU     0CH
   265                                  MAXDIF          EQU     0FFFH
   266                                  SAVEXIT         EQU     10
   267                                  ;08/07/2018 - Retro DOS v3.0
   268                                  ;WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   269                                  
   270                                         ; INCLUDE DOSSYM.ASM
   271                                         ; INCLUDE DEVSYM.ASM
   272                                  
   273                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   274                                  ; PAGE
   275                                  ; There are three kinds of context resets that can occur during normal DOS
   276                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   277                                  ; be handles in a clean fashion that allows nested executions along with the
   278                                  ; ability to trap one's own errors.
   279                                  ;
   280                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   281                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   282                                  ;           follows:
   283                                  ;
   284                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   285                                  ;           Save it in static memory.
   286                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   287                                  ;
   288                                  ;           The interrupt service routine must preserve all registers and
   289                                  ;           return carry set iff the operation is to be aborted (via abort
   290                                  ;           system call), otherwise, carry is reset and the operation is
   291                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   292                                  ;           RESULTS.
   293                                  ;
   294                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   295                                  ;           restore INT int_ctrl_c from the saved vector.
   296                                  ;
   297                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   298                                  ;           also preserve registers and return one of three values in AL: 0 and
   299                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   300                                  ;           himself is not to issue the abort, rather, the dos will do it for
   301                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   302                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   303                                  ;
   304                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   305                                  ;           abort call.  This is reserved for knowledgeable system programs.
   306                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   307                                  
   308                                  ;SUBTTL SEGMENT DECLARATIONS
   309                                  
   310                                  ; The following are all of the segments used.  They are declared in the order
   311                                  ; that they should be placed in the executable
   312                                  
   313                                  ;
   314                                  ; segment ordering for MSDOS
   315                                  ;
   316                                  
   317                                  ;START           SEGMENT BYTE PUBLIC 'START'
   318                                  ;START           ENDS
   319                                  
   320                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   321                                  ;CONSTANTS       ENDS
   322                                  
   323                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   324                                  ;DATA            ENDS
   325                                  
   326                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   327                                  ;CODE            ENDS
   328                                  
   329                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   330                                  ;LAST            ENDS
   331                                  
   332                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   333                                  
   334                                  ; The following segment is defined such that the data/const classes appear
   335                                  ; before the code class for ROMification
   336                                  
   337                                  ;START		SEGMENT BYTE PUBLIC 'START'
   338                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   339                                  ;		JMP     DOSINIT
   340                                  ;START		ENDS
   341                                  
   342                                  ;============================================================================
   343                                  ; DOSSYM.ASM
   344                                  ;============================================================================
   345                                  
   346                                  ;<Control character definitions>
   347                                  
   348                                  c_DEL       EQU     7Fh         ;    ASCII rubout or delete previous char
   349                                  c_BS        EQU     08h         ; ^H ASCII backspace
   350                                  c_CR        EQU     0Dh         ; ^M ASCII carriage return
   351                                  c_LF        EQU     0Ah         ; ^J ASCII linefeed
   352                                  c_ETB       EQU     17h         ; ^W ASCII end of transmission
   353                                  c_NAK       EQU     15h         ; ^U ASCII negative acknowledge
   354                                  c_ETX       EQU     03h         ; ^C ASCII end of text
   355                                  c_HT        EQU     09h         ; ^I ASCII tab
   356                                  
   357                                  ;============================================================================
   358                                  ; BPB.INC, MSDOS 3.3, 1987
   359                                  ;============================================================================
   360                                  ; 09/07/2018 - Retro DOS v3.0
   361                                  
   362                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   363                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   364                                  ;									   ;
   365                                  
   366                                  ; BIOS PARAMETER BLOCK DEFINITION
   367                                  ; THIS STRUCTURE IS USED TO BUILD A FULL DPB
   368                                  
   369                                  struc BPBLOCK
   370 00000000 ????                    .SECSZ: resw 1		; Size in bytes of physical sector
   371 00000002 ??                      .CLUS:  resb 1		; Sectors/Alloc unit
   372 00000003 ????                    .RES:   resw 1		; Number of reserved sectors
   373 00000005 ??                      .FTCNT: resb 1		; Number of FATs
   374 00000006 ????                    .DRCNT: resw 1		; Number of directory entries
   375 00000008 ????                    .SCCNT: resw 1		; Total number of sectors
   376 0000000A ??                      .MEDIA: resb 1		; Media descriptor byte
   377 0000000B ????                    .FTSEC:	resw 1		; Number of sectors taken up by one FAT
   378                                  .size:
   379                                  endstruc
   380                                  
   381                                  ; 09/07/2018 - Retro DOS v3.0
   382                                  ; (BPB.INC, MSDOS 6.0, 1991)
   383                                  
   384                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   385                                  ;
   386                                  ;	The BPB contains information about the disk structure.  It dates
   387                                  ;	back to the earliest FAT systems and so FAT information is
   388                                  ;	intermingled with physical driver information.
   389                                  ;
   390                                  ;	A boot sector contains a BPB for its device; for other disks
   391                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
   392                                  ;	information in the DPB.
   393                                  ;
   394                                  ;	The BDS structure contains a BPB within it. 
   395                                  
   396                                  struc A_BPB
   397 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   398 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   399 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   400 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   401 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   402 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   403 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   404 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   405 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   406 0000000F ????                    .BPB_HEADS:		resw	1
   407 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   408 00000013 ????                    			resw	1
   409 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   410 00000017 ????                    			resw	1
   411 00000019 ????????????            			resb	6	; NOTE:  many times these
   412                                  ;					; 	 6 bytes are omitted
   413                                  ;					;	 when BPB manipulations
   414                                  ;					;	 are performed!
   415                                  .size:
   416                                  endstruc
   417                                  
   418                                  ;                                                                          ;
   419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   420                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   421                                  
   422                                  ;============================================================================
   423                                  ; BUFFER.INC, MSDOS 3.3, 1987
   424                                  ;============================================================================
   425                                  ; 09/07/2018 - Retro DOS v3.0
   426                                  
   427                                  ; <Disk I/O Buffer Header>
   428                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   429                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   430                                  ;                                                                          ;
   431                                  
   432                                  ; Field definition for I/O buffer information
   433                                  
   434                                  struc BUFFINFO
   435 00000000 ????????                .buf_link:	resd 1		; Pointer to next buffer in list
   436 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   437                                  				; SFT table index (bit 7 = 1)
   438                                  				; = FFH if buffer free
   439 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   440                                  				;	= 0 if Local device buffer
   441                                  				; Bit 6 = 1 if buffer dirty
   442                                  				; Bit 5 = Reserved
   443                                  				; Bit 4 = Search bit (bit 7 = 1)
   444                                  				; Bit 3 = 1 if buffer is DATA
   445                                  				; Bit 2 = 1 if buffer is DIR
   446                                  				; Bit 1 = 1 if buffer is FAT
   447                                  				; Bit 0 = Reserved
   448 00000006 ????                    .buf_sector:	resw 1		; Sector number of buffer (bit 7 = 0)
   449                                  ; The next two items are often refed as a word (bit 7 = 0)
   450 00000008 ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   451 00000009 ??                      .buf_wrtcntinc:	resb 1		; "   "     "   , # sectors between each write
   452 0000000A ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   453 0000000E ????                    .buf_fill:	resw 1		; How full buffer is (bit 7 = 1)
   454                                  .size:
   455                                  endstruc
   456                                  
   457                                  %define buf_offset dword [buf_sector]
   458                                  				;For bit 7 = 1, this is the byte
   459                                  				;offset of the start of the buffer in
   460                                  				;the file pointed to by buf_ID.  Thus
   461                                  				;the buffer starts at location
   462                                  				;buf_offset in the file and contains
   463                                  				;buf_fill bytes.
   464                                  
   465                                  BUFINSIZ        EQU     BUFFINFO.size
   466                                  
   467                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   468                                  
   469                                  ;Flag byte masks
   470                                  buf_isnet	EQU	10000000B
   471                                  buf_dirty	EQU	01000000B
   472                                  ;***
   473                                  buf_visit	EQU	00100000B
   474                                  ;***
   475                                  buf_snbuf	EQU	00010000B
   476                                  
   477                                  buf_isDATA	EQU	00001000B
   478                                  buf_isDIR	EQU	00000100B
   479                                  buf_isFAT	EQU	00000010B
   480                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   481                                  
   482                                  buf_NetID	EQU	BUFINSIZ
   483                                  
   484                                  ;                                                                          ;
   485                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   486                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   487                                  
   488                                  ; <User stack inside of system call>
   489                                  ; Location of user registers relative user stack pointer
   490                                  
   491                                  struc	user_env   ; user_environ
   492 00000000 ????                    .user_AX: resw 1
   493 00000002 ????                    .user_BX: resw 1
   494 00000004 ????                    .user_CX: resw 1
   495 00000006 ????                    .user_DX: resw 1
   496 00000008 ????                    .user_SI: resw 1
   497 0000000A ????                    .user_DI: resw 1
   498 0000000C ????                    .user_BP: resw 1
   499 0000000E ????                    .user_DS: resw 1
   500 00000010 ????                    .user_ES: resw 1
   501 00000012 ????                    .user_IP: resw 1
   502 00000014 ????                    .user_CS: resw 1
   503 00000016 ????                    .user_F:  resw 1
   504                                  .size:
   505                                  endstruc
   506                                  
   507                                  ; 09/07/2018 - Retro DOS v3.0
   508                                  ; (VECTOR.INC, MSDOS 3.3, 1987)
   509                                  ; ----------------------------------------------------------------------------
   510                                  
   511                                  ; <interrupt definitions>
   512                                  
   513                                  INTTAB          EQU     20H
   514                                  INTBASE         EQU     4 * INTTAB
   515                                  ENTRYPOINT      EQU     INTBASE+40H
   516                                  
   517                                  ;	IF      ALTVECT
   518                                  ;ALTTAB  EQU     0F0H
   519                                  ;ALTBASE EQU     4 * ALTTAB
   520                                  ;	ENDIF
   521                                  
   522                                  ;
   523                                  ; interrupt assignments
   524                                  ;
   525                                  ;	IF	NOT ALTVECT
   526                                  int_abort	    EQU     INTTAB	; abort process
   527                                  int_command	    EQU     int_abort+1 ; call MSDOS
   528                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   529                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   530                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   531                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   532                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   533                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   534                                  					; resident
   535                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   536                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   537                                  ;									   ;
   538                                  int_spooler	    EQU     int_abort+8 ; spooler call
   539                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   540                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   541                                  ;									   ;
   542                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   543                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   544                                  ;	ELSE
   545                                  ;int_abort	    EQU     INTTAB	; abort process
   546                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   547                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   548                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   549                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   550                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   551                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   552                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   553                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   554                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   555                                  ;									   ;
   556                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   557                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   558                                  ;									   ;
   559                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   560                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   561                                  ;	ENDIF
   562                                  
   563                                  addr_int_abort		EQU    4 * int_abort
   564                                  addr_int_command	EQU    4 * int_command
   565                                  addr_int_terminate	EQU    4 * int_terminate
   566                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   567                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   568                                  addr_int_disk_read	EQU    4 * int_disk_read
   569                                  addr_int_disk_write	EQU    4 * int_disk_write
   570                                  addr_int_keep_process	EQU    4 * int_keep_process
   571                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   572                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   573                                  ;									   ;
   574                                  addr_int_spooler	EQU    4 * int_spooler
   575                                  addr_int_fastcon	EQU    4 * int_fastcon
   576                                  addr_int_IBM		EQU    4 * int_IBM
   577                                  ;									   ;
   578                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   579                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   580                                  
   581                                  
   582                                  ; <Disk map>
   583                                  ;  MSDOS partitions the disk into 4 sections:
   584                                  ;
   585                                  ;  phys sector 0:   +-------------------+
   586                                  ;       |           | boot/reserved     |
   587                                  ;       |           +-------------------+
   588                                  ;       |           |  File allocation  |
   589                                  ;       v           |      table(s)     |
   590                                  ;                   |  (multiple copies |
   591                                  ;                   |     are kept)     |
   592                                  ;                   +-------------------+
   593                                  ;                   |     Directory     |
   594                                  ;                   +-------------------+
   595                                  ;                   |     File space    |
   596                                  ;                   +-------------------+
   597                                  ;                   |   Unaddressable   |
   598                                  ;                   |  (to end of disk) |
   599                                  ;                   +-------------------+
   600                                  ;
   601                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   602                                  ; adjusted to maximize the file space addressable.
   603                                  
   604                                  ; BREAK <Directory entry>
   605                                  
   606                                  ;
   607                                  ;       +---------------------------+
   608                                  ;       |  (12 BYTE) filename/ext   |       0       0
   609                                  ;       +---------------------------+
   610                                  ;       |     (BYTE) attributes     |       11      B
   611                                  ;       +---------------------------+
   612                                  ;       |    (10 BYTE) reserved     |       12      C
   613                                  ;       +---------------------------+
   614                                  ;       | (WORD) time of last write |       22      16
   615                                  ;       +---------------------------+
   616                                  ;       | (WORD) date of last write |       24      18
   617                                  ;       +---------------------------+
   618                                  ;       |   (WORD) First cluster    |       26      1A
   619                                  ;       +---------------------------+
   620                                  ;       |     (DWORD) file size     |       28      1C
   621                                  ;       +---------------------------+
   622                                  ;
   623                                  ;   First byte of filename  = E5 -> free directory entry
   624                                  ;                           = 00 -> end of allocated directory
   625                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   626                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   627                                  ;
   628                                  struc dir_entry
   629 00000000 <res Bh>                .dir_name:	resb 11			; file name
   630 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   631 0000000C <res Ah>                .dir_pad:	resb 10			; reserved for expansion
   632 00000016 ????                    .dir_time:	resw 1			; time of last write
   633 00000018 ????                    .dir_date:	resw 1			; date of last write
   634 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   635 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   636 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   637                                  .size:
   638                                  endstruc
   639                                  
   640                                  attr_read_only      EQU      1h
   641                                  attr_hidden         EQU      2h
   642                                  attr_system         EQU      4h
   643                                  attr_volume_id      EQU      8h
   644                                  attr_directory      EQU     10h
   645                                  attr_archive        EQU     20h
   646                                  ;09/07/2018 - Retro DOS v3.0
   647                                  ;(DIRENT.INC, MSDOS 3.3, 1987)
   648                                  attr_device	    EQU     40h	; This is a VERY special bit.
   649                                  				;   NO directory entry on a disk EVER
   650                                  				;   has this bit set. It is set non-zero
   651                                  				;   when a device is found by GETPATH
   652                                  
   653                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   654                                                                          ; OR of hard attributes for FINDENTRY
   655                                  
   656                                  attr_ignore         EQU     attr_read_only+attr_archive
   657                                                                          ; ignore this(ese) attribute(s)
   658                                                                          ; during search first/next
   659                                  
   660                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   661                                                                          ; changeable via CHMOD
   662                                  
   663                                  ; 09/08/2018 - Retro DOS v3.0
   664                                  ; (DIRENT.INC, MSDOS 6,0, 1991)
   665                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   666                                  
   667                                  ; <File allocation Table information>
   668                                  ;
   669                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on the
   670                                  ; disk.  These entries are packed, two for every three bytes.  The contents of
   671                                  ; entry number N is found by 1) multiplying N by 1.5; 2) adding the result to
   672                                  ; the base address of the Allocation Table; 3) fetching the 16-bit word at this
   673                                  ; address; 4) If N was odd (so that N*1.5 was not an integer), shift the word
   674                                  ; right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry number zero
   675                                  ; is used as an end-of-file trap in the OS and is passed to the BIOS to help
   676                                  ; determine disk format.  Entry 1 is reserved for future use.  The first
   677                                  ; available allocation unit is assigned entry number two, and even though it is
   678                                  ; the first, is called cluster 2.  Entries greater than 0FF8H are end of file
   679                                  ; marks; entries of zero are unallocated.  Otherwise, the contents of a FAT
   680                                  ; entry is the number of the next cluster in the file.
   681                                  ;
   682                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would do
   683                                  ; because these clusters show as allocated, but are not part of any allocation
   684                                  ; chain and thus will never be allocated to a file.  A particular number is
   685                                  ; selected so that disk checking programs know what to do (ie.  a cluster with
   686                                  ; entry FF7H which is not in a chain is not an error).
   687                                  
   688                                  ;DIRSTRLEN       EQU     64	; Max length in bytes of directory strings
   689                                  
   690                                  ; 19/07/2018
   691                                  ; (DPB.INC, MSDOS 3.3, 1987)
   692                                  ; 07/07/2018 - Retro DOS v3.0
   693                                  ; (DPB.INC, MSDOS 6.0, 1991)
   694                                  ; ----------------------------------------------------------------------------
   695                                  ;**	DPB - Drive Parameter Block
   696                                  ;
   697                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   698                                  ;	possibly inaccurate deductions from code study... - jgl
   699                                  ;
   700                                  ;	The DPB is DOS's main structure for describing block devices.
   701                                  ;	It contains info about the "Drive" intermingled with info about
   702                                  ;	the FAT file system which is presumably on the drive.  I don't know
   703                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   704                                  ;
   705                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   706                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   707                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   708                                  
   709                                  struc	DPB
   710 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   711 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   712 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   713 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   714 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   715 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   716 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   717 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   718 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   719 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   720                                  ; MSDOS 3.3
   721 0000000F ??                      .FAT_SIZE:	resb 1		; Number of records occupied by FAT
   722                                  ; MSDOS 6.0
   723                                  ;.FAT_SIZE:	resw 1		; Number of records occupied by FAT
   724 00000010 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   725 00000012 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   726 00000016 ??                      .MEDIA:		resb 1		; Media byte
   727 00000017 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   728                                  				; check the first time this DPB is used
   729 00000018 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   730 0000001C ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   731 0000001E ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   732                                  .size:
   733                                  endstruc
   734                                  
   735                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   736                                  
   737                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   738                                  
   739                                  ;                                                                          ;
   740                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   741                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   742                                  
   743                                  ; 12/07/2018 - Retro DOS v3.0 
   744                                  ; (DOSSYM.INC, MSDOS 6.0, 1991)
   745                                  
   746                                  ;**	Character Type Flags
   747                                  ;
   748                                  ;	These flags are used in a lookup table indexed by the character code.
   749                                  ;	They're used to quickly classify characters when parsing paths.
   750                                  ;	I think that these are only used to parse FCBs - jgl
   751                                  
   752                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   753                                  FDELIM	equ 2		; is a delimiter
   754                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   755                                  FFCB	equ 8		; is valid in an FCB
   756                                  
   757                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   758                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   759                                  ;                                                                          ;
   760                                  devid_file_clean        EQU     40h     ; true if file and not written
   761                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   762                                  
   763                                  devid_device            EQU     80h     ; true if a device
   764                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   765                                  devid_device_raw        EQU     20h     ; true if in raw mode
   766                                  devid_device_special    EQU     10h     ; true if special device
   767                                  devid_device_clock      EQU     08h     ; true if clock device
   768                                  devid_device_null       EQU     04h     ; true if null device
   769                                  devid_device_con_out    EQU     02h     ; true if console output
   770                                  devid_device_con_in     EQU     01h     ; true if consle input
   771                                  
   772                                  ;
   773                                  ; structure of devid field as returned by IOCTL is:
   774                                  ;
   775                                  ;       BIT     7   6   5   4   3   2   1   0
   776                                  ;             |---|---|---|---|---|---|---|---|
   777                                  ;             | I | E | R | S | I | I | I | I |
   778                                  ;             | S | O | A | P | S | S | S | S |
   779                                  ;             | D | F | W | E | C | N | C | C |
   780                                  ;             | E |   |   | C | L | U | O | I |
   781                                  ;             | V |   |   | L | K | L | T | N |
   782                                  ;             |---|---|---|---|---|---|---|---|
   783                                  ;       ISDEV = 1 if this channel is a device
   784                                  ;             = 0 if this channel is a disk file
   785                                  ;
   786                                  ;       If ISDEV = 1
   787                                  ;
   788                                  ;             EOF = 0 if End Of File on input
   789                                  ;             RAW = 1 if this device is in Raw mode
   790                                  ;                 = 0 if this device is cooked
   791                                  ;             ISCLK = 1 if this device is the clock device
   792                                  ;             ISNUL = 1 if this device is the null device
   793                                  ;             ISCOT = 1 if this device is the console output
   794                                  ;             ISCIN = 1 if this device is the console input
   795                                  ;
   796                                  ;       If ISDEV = 0
   797                                  ;             EOF = 0 if channel has been written
   798                                  ;             Bits 0-5  are  the  block  device  number  for
   799                                  ;                 the channel (0 = A, 1 = B, ...)
   800                                  ;
   801                                  devid_ISDEV     EQU     80h
   802                                  devid_EOF       EQU     40h
   803                                  devid_RAW       EQU     20h
   804                                  devid_SPECIAL   EQU     10H
   805                                  devid_ISCLK     EQU     08h
   806                                  devid_ISNUL     EQU     04h
   807                                  devid_ISCOT     EQU     02h
   808                                  devid_ISCIN     EQU     01h
   809                                  
   810                                  devid_block_dev EQU     1Fh             ; mask for block device number
   811                                  
   812                                  ; 08/07/2018 - Retro DOS v3.0
   813                                  ; (PDB.INC, MSDOS 6.0, 1991)
   814                                  ; ----------------------------------------------------------------------------
   815                                  ; BREAK <Process data block>
   816                                  ;
   817                                  ;**	Process data block (otherwise known as program header)
   818                                  ;
   819                                  
   820                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   821                                  ;	can be rearranged here, ever.  Reserved areas are probably safe
   822                                  ;	for use.
   823                                  
   824                                  FILPERPROC	EQU     20
   825                                  
   826                                  struc PDB	; Process_data_block
   827 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   828 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   829 00000004 ??                                      resb 1
   830 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   831 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   832 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   833 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   834 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   835 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   836 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   837 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   838 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   839 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   840 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   841 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   842 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   843 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   844 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   845 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   846 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   847 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   848                                  				;  an extended FCB
   849                                  ;endstruc 	; MSDOS 3.3
   850                                  	  	; MSDOS 6.0
   851 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   852 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   853 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   854 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   855                                  endstruc
   856                                  
   857                                  ; BREAK <EXEC and EXE file structures>
   858                                  ;
   859                                  ; EXEC arg block - load/go program
   860                                  ;
   861                                  
   862                                  ;
   863                                  ; The following get used as arguments to the EXEC system call.  They indicate
   864                                  ; whether or not the program is executed or whether or not a program header
   865                                  ; gets created.
   866                                  ;
   867                                  exec_func_no_execute    EQU 1           ; no execute bit
   868                                  exec_func_overlay       EQU 2           ; overlay bit
   869                                  
   870                                  struc EXEC0
   871 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   872 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   873 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   874 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   875                                  .size:
   876                                  endstruc
   877                                  
   878                                  struc EXEC1
   879 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   880 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   881 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   882 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   883 0000000E ????                    .SP:		resw 1		; stack pointer of program
   884 00000010 ????                    .SS:		resw 1		; stack seg register of program
   885 00000012 ????                    .IP:		resw 1		; entry point IP
   886 00000014 ????                    .CS:		resw 1		; entry point CS
   887                                  .size:
   888                                  endstruc
   889                                  
   890                                  struc EXEC3
   891 00000000 ????                    .load_addr:	resw 1		; seg address of load point
   892 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
   893                                  endstruc
   894                                  
   895                                  ; 02/08/2018 (MSDOS 6.0, EXEC.INC, 1991)
   896                                  ;**	Exit codes (in upper byte) for terminating programs
   897                                  
   898                                  EXIT_TERMINATE		EQU	0
   899                                  EXIT_ABORT		EQU	0
   900                                  EXIT_CTRL_C		EQU	1
   901                                  EXIT_HARD_ERROR 	EQU	2
   902                                  EXIT_KEEP_PROCESS	EQU	3
   903                                  
   904                                  ;
   905                                  ; EXE file header
   906                                  ;
   907                                  
   908                                  struc EXE
   909 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
   910 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
   911 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
   912 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
   913 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
   914 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
   915 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
   916 0000000E ????                    .SS:          resw 1		; stack of image
   917 00000010 ????                    .SP:          resw 1		; SP of image
   918 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
   919 00000014 ????                    .IP:          resw 1		; IP of entry
   920 00000016 ????                    .CS:          resw 1		; CS of entry
   921 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
   922 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
   923 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
   924                                  .size:
   925                                  endstruc
   926                                  
   927                                  exe_valid_signature     EQU 5A4Dh
   928                                  exe_valid_old_signature EQU 4D5Ah
   929                                  
   930                                  struc symbol_entry
   931 00000000 ????????                .value:	resd 1
   932 00000004 ????                    .type:	resw 1
   933 00000006 ??                      .len:	resb 1
   934 00000007 <res FFh>               .name:	resb 255
   935                                  endstruc
   936                                  
   937                                  ; 07/07/2018 - Retro DOS v3.0
   938                                  ; MSDOS 6.0 (SF.INC, 1991)
   939                                  ; ----------------------------------------------------------------------------
   940                                  ;**	SF.INC - System File Table
   941                                  ;
   942                                  ;   AN000   version 4.00   Jan. 1988
   943                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   944                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   945                                  
   946                                  ;**	System File Table SuperStructure
   947                                  ;
   948                                  ;	The system file table entries are allocated in contiguous groups.
   949                                  ;	There may be more than one such groups; the SF "superstructure"
   950                                  ;	tracks the groups.
   951                                  
   952                                  struc	SFT
   953 00000000 ????????                .SFLink:	resd 1
   954 00000004 ????                    .SFCount:	resw 1		; number of entries
   955 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   956                                  .size:
   957                                  endstruc
   958                                  
   959                                  ; 07/07/2018 - Retro DOS v3.0
   960                                  ; MSDOS 6.0 (SF.INC, 1991)
   961                                  ; ----------------------------------------------------------------------------
   962                                  ;**	System file table entry
   963                                  ;
   964                                  ;	These are the structures which are at SFTABLE in the SF structure.
   965                                  
   966                                  struc SF_ENTRY
   967 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   968                                  				;   if FCB then ref count
   969 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   970 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   971 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   972                                  				; Bit 15 = 1 if remote file
   973                                  				;	 = 0 if local file or device
   974                                  				; Bit 14 = 1 if date/time is not to be
   975                                  				;   set from clock at CLOSE.  Set by
   976                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   977                                  				;   other reseters of the dirty bit
   978                                  				;   (WRITE)
   979                                  				; Bit 13 = Pipe bit (reserved)
   980                                  				;
   981                                  				; Bits 0-7 (old FCB_devid bits)
   982                                  				; If remote file or local file, bit
   983                                  				; 6=0 if dirty Device ID number, bits
   984                                  				; 0-5 if local file.
   985                                  				; bit 7=0 for local file, bit 7
   986                                  				;      =1 for local I/O device
   987                                  				; If local I/O device, bit 6=0 if EOF (input)
   988                                  				;		Bit 5=1 if Raw mode
   989                                  				;		Bit 0=1 if console input device
   990                                  				;		Bit 1=1 if console output device
   991                                  				;		Bit 2=1 if null device
   992                                  				;		Bit 3=1 if clock device
   993 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   994                                  				; to device header if local device,
   995                                  				; points to net device header if
   996                                  				; remote
   997 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   998 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   999 0000000F ????                    .sf_date:	resw	1	; Date associated with file
  1000 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
  1001 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
  1002                                  
  1003                                  ; Starting here, the next 7 bytes may be used by the file system to store an
  1004                                  ; ID
  1005                                  
  1006                                  ; 09/07/2018 - Retro DOS v3.0
  1007                                  
  1008                                  ; MSDOS 3.3 SF.INC, 1987
  1009 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
  1010 0000001B ????                    .sf_lstclus	resw	1	; Last cluster accessed
  1011 0000001D ????                    .sf_dirsec:	resw	1	; Sector number of directory sector
  1012                                  				; for this file
  1013 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
  1014                                  
  1015                                  ; MSDOS 6.0, SF.INC, 1991
  1016                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
  1017                                  ;.sf_dirsec:	resd	1	; Sector number of directory sector
  1018                                  ;				; for this file
  1019                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
  1020                                  
  1021                                  ; End of 7 bytes of file-system specific info.
  1022                                  
  1023 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
  1024                                  				; directory entry.  This is used by
  1025                                  				; close to detect file deleted and
  1026                                  				; disk changed errors.
  1027                                  ; SHARING INFO
  1028 0000002B ????????                .sf_chain:	resd	1	; link to next SF
  1029 0000002F ????                    .sf_UID:	resw	1
  1030 00000031 ????                    .sf_PID:	resw	1
  1031 00000033 ????                    .sf_MFT:	resw	1
  1032                                  
  1033                                  ; MSDOS 6.0, SF.INC, 1991
  1034                                  ;.sf_lstclus:	resw	1	;AN009; Last cluster accessed
  1035                                  ;.sf_IFS_HDR:	resd	1
  1036                                  
  1037                                  .size:
  1038                                  endstruc
  1039                                  
  1040                                  ; 20/07/2018
  1041                                  ; MSDOS 3.3, SF.INC, 1987
  1042                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
  1043                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
  1044                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
  1045                                  ; MSDOS 6.0, SDF.INC, 1991
  1046                                  %define sf_fsda	     SF_ENTRRY.sf_cluspos ; byte ;DOS 4.00
  1047                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
  1048                                  
  1049                                  ; 19/07/2018
  1050                                  
  1051                                  ; MSDOS 3.3, SF.INC, 1987
  1052                                  
  1053                                  sf_default_number  EQU	5
  1054                                  
  1055                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
  1056                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
  1057                                  ; by placing a -1 in the ref_count field.
  1058                                  
  1059                                  sf_busy EQU -1
  1060                                  
  1061                                  ; mode mask for FCB detection
  1062                                  sf_isFCB		EQU	1000000000000000B
  1063                                  
  1064                                  ; Flag word masks
  1065                                  sf_isnet		EQU	1000000000000000B
  1066                                  sf_close_nodate 	EQU	0100000000000000B
  1067                                  sf_pipe 		EQU	0010000000000000B
  1068                                  sf_no_inherit		EQU	0001000000000000B
  1069                                  sf_net_spool		EQU	0000100000000000B
  1070                                  
  1071                                  ; 19/04/2018
  1072                                  sf_entry_size equ SF_ENTRY.size ; 53
  1073                                  
  1074                                  ;                                                                          ;
  1075                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1076                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1077                                  
  1078                                  ; 09/07/2018 - Retro DOS v3.0
  1079                                  ; (ARENA.INC, MSDOS 3.3, 1987)
  1080                                  ; ----------------------------------------------------------------------------
  1081                                  ;BREAK <Memory arena structure>
  1082                                  
  1083                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1084                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1085                                  ;                                                                          ;
  1086                                  ;
  1087                                  ; arena item
  1088                                  ;
  1089                                  
  1090                                  struc ARENA
  1091 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1092 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1093 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1094                                  endstruc
  1095                                  
  1096                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1097                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1098                                  ; Change them and change ALLOC.ASM.
  1099                                  
  1100                                  arena_owner_system  EQU 0               ; free block indication
  1101                                  
  1102                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1103                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1104                                  
  1105                                  ; 04/08/2018 - Retro DOS v3.0
  1106                                  ; (ARENA.INC, MSDOS 6.0, 1991)
  1107                                  
  1108                                  FIRST_FIT	EQU	00000000B
  1109                                  BEST_FIT	EQU	00000001B
  1110                                  LAST_FIT	EQU	00000010B
  1111                                  
  1112                                  ; MSDOS 6.0
  1113                                  ;LOW_FIRST	EQU	00000000B	; M001
  1114                                  ;HIGH_FIRST	EQU	10000000B	; M001
  1115                                  ;HIGH_ONLY	EQU	01000000B	; M001
  1116                                  
  1117                                  ;LINKSTATE	EQU	00000001B	; M002
  1118                                  
  1119                                  ;HF_MASK		EQU	~HIGH_FIRST	; M001
  1120                                  ;HO_MASK		EQU	~HIGH_ONLY	; M001
  1121                                  
  1122                                  ;STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1123                                  						; M026: used to mask of bits
  1124                                  						; M026: 6 & 7 of AllocMethod
  1125                                  
  1126                                  ; 07/07/2018 - Retro DOS v3.0
  1127                                  ; (MI.INC, MSDOS 6.0, 1991)
  1128                                  ; ----------------------------------------------------------------------------
  1129                                  ;BREAK <Machine instruction, flag definitions and character types>
  1130                                  
  1131                                  mi_INT		EQU	0CDh
  1132                                  mi_Long_JMP	EQU	0EAh
  1133                                  mi_Long_CALL	EQU	09Ah
  1134                                  mi_Long_RET	EQU	0CBh
  1135                                  mi_Near_RET	EQU	0C3h
  1136                                  
  1137                                  ;			xxxxoditszxaxpxc
  1138                                  f_Overflow	EQU	0000100000000000B
  1139                                  f_Direction	EQU	0000010000000000B
  1140                                  f_Interrupt	EQU	0000001000000000B
  1141                                  f_Trace 	EQU	0000000100000000B
  1142                                  f_Sign		EQU	0000000010000000B
  1143                                  f_Zero		EQU	0000000001000000B
  1144                                  f_Aux		EQU	0000000000010000B
  1145                                  f_Parity	EQU	0000000000000100B
  1146                                  f_Carry 	EQU	0000000000000001B
  1147                                  
  1148                                  ; <Standard I/O assignments>
  1149                                  
  1150                                  stdin       EQU     0
  1151                                  stdout      EQU     1
  1152                                  stderr      EQU     2
  1153                                  stdaux      EQU     3
  1154                                  stdprn      EQU     4
  1155                                  
  1156                                  ; <Xenix subfunction assignments>
  1157                                  
  1158                                  open_for_read   EQU 0
  1159                                  open_for_write  EQU 1
  1160                                  open_for_both   EQU 2
  1161                                  
  1162                                  ; 13/07/2018 - Retro DOS v3.0
  1163                                  ; (FILEMODE.INC, MSDOS 6.0, 1991)
  1164                                  
  1165                                  access_mask	EQU 0Fh ; 09/08/2018
  1166                                  
  1167                                  EXEC_OPEN	EQU 3		; access code of 3 indicates that open was 
  1168                                  				; made from exec
  1169                                  SHARING_MASK	    equ 0F0h
  1170                                  SHARING_COMPAT	    equ 000h
  1171                                  SHARING_DENY_BOTH   equ 010h
  1172                                  SHARING_DENY_WRITE  equ 020h
  1173                                  SHARING_DENY_READ   equ 030h
  1174                                  SHARING_DENY_NONE   equ 040h
  1175                                  SHARING_NET_FCB     equ 070h
  1176                                  SHARING_NO_INHERIT  equ 080h
  1177                                  
  1178                                  ; 09/07/2018 - Retro DOS v3.0
  1179                                  ; (SYSCALL.INC, MSDOS 3.3, 1987)
  1180                                  ; ----------------------------------------------------------------------------
  1181                                  
  1182                                  ; <system call definitions>
  1183                                  
  1184                                  ABORT                           EQU 0   ;  0      0
  1185                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1186                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1187                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1188                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1189                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1190                                  RAW_CON_IO                      EQU 6   ;  6      6
  1191                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1192                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1193                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1194                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1195                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1196                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1197                                  DISK_RESET                      EQU 13  ; 13      D
  1198                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1199                                  FCB_OPEN                        EQU 15  ; 15      F
  1200                                  FCB_CLOSE                       EQU 16  ; 16     10
  1201                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1202                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1203                                  FCB_DELETE                      EQU 19  ; 19     13
  1204                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1205                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1206                                  FCB_CREATE                      EQU 22  ; 22     16
  1207                                  FCB_RENAME                      EQU 23  ; 23     17
  1208                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1209                                  SET_DMA                         EQU 26  ; 26     1A
  1210                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1211                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1212                                  ;                                                                          ;
  1213                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1214                                  ;                                                                          ;
  1215                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1216                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1217                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1218                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1219                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1220                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1221                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1222                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1223                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1224                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1225                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1226                                  GET_DATE                        EQU 42  ; 42     2A
  1227                                  SET_DATE                        EQU 43  ; 43     2B
  1228                                  GET_TIME                        EQU 44  ; 44     2C
  1229                                  SET_TIME                        EQU 45  ; 45     2D
  1230                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1231                                  ; Extended functionality group
  1232                                  GET_DMA                         EQU 47  ; 47     2F
  1233                                  GET_VERSION                     EQU 48  ; 48     30
  1234                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1235                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1236                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1237                                  ;                                                                          ;
  1238                                  GET_DPB                         EQU 50  ; 50     32
  1239                                  ;                                                                          ;
  1240                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1241                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1242                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1243                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1244                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1245                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1246                                  CHAR_OPER                       EQU 55  ; 55     37
  1247                                  INTERNATIONAL                   EQU 56  ; 56     38
  1248                                  ; XENIX CALLS
  1249                                  ;   Directory Group
  1250                                  MKDIR                           EQU 57  ; 57     39
  1251                                  RMDIR                           EQU 58  ; 58     3A
  1252                                  CHDIR                           EQU 59  ; 59     3B
  1253                                  ;   File Group
  1254                                  CREAT                           EQU 60  ; 60     3C
  1255                                  OPEN                            EQU 61  ; 61     3D
  1256                                  CLOSE                           EQU 62  ; 62     3E
  1257                                  READ                            EQU 63  ; 63     3F
  1258                                  WRITE                           EQU 64  ; 64     40
  1259                                  UNLINK                          EQU 65  ; 65     41
  1260                                  LSEEK                           EQU 66  ; 66     42
  1261                                  CHMOD                           EQU 67  ; 67     43
  1262                                  IOCTL                           EQU 68  ; 68     44
  1263                                  XDUP                            EQU 69  ; 69     45
  1264                                  XDUP2                           EQU 70  ; 70     46
  1265                                  CURRENT_DIR                     EQU 71  ; 71     47
  1266                                  ;    Memory Group
  1267                                  ALLOC                           EQU 72  ; 72     48
  1268                                  DEALLOC                         EQU 73  ; 73     49
  1269                                  SETBLOCK                        EQU 74  ; 74     4A
  1270                                  ;    Process Group
  1271                                  EXEC                            EQU 75  ; 75     4B
  1272                                  EXIT                            EQU 76  ; 76     4C
  1273                                  _WAIT				EQU 77  ; 77     4D
  1274                                  FIND_FIRST                      EQU 78  ; 78     4E
  1275                                  ;   Special Group
  1276                                  FIND_NEXT                       EQU 79  ; 79     4F
  1277                                  ; SPECIAL SYSTEM GROUP
  1278                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1279                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1280                                  ;                                                                          ;
  1281                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1282                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1283                                  GET_IN_VARS                     EQU 82  ; 82     52
  1284                                  SETDPB                          EQU 83  ; 83     53
  1285                                  ;                                                                          ;
  1286                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1287                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1288                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1289                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1290                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1291                                  ;                                                                          ;
  1292                                  DUP_PDB                         EQU 85  ; 85     55
  1293                                  ;                                                                          ;
  1294                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1295                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1296                                  RENAME                          EQU 86  ; 86     56
  1297                                  FILE_TIMES                      EQU 87  ; 87     57
  1298                                  ALLOCOPER			EQU 88	; 88	 58
  1299                                  ; Network extention system calls
  1300                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1301                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1302                                  CREATENEWFILE			EQU 91	; 91	 5B
  1303                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1304                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1305                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1306                                  ;									   ;
  1307                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1308                                  					;	    CloseByName, CloseUser,
  1309                                  					;	    CloseUserProcess,
  1310                                  					;	    GetOpenFileList
  1311                                  ;									   ;
  1312                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1313                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1314                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1315                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1316                                  XNAMETRANS			EQU 96	; 96	 60
  1317                                  PATHPARSE			EQU 97	; 97	 61
  1318                                  GETCURRENTPSP			EQU 98	; 98	 62
  1319                                  HONGEUL 			EQU 99	; 99	 63
  1320                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1321                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1322                                  ;									   ;
  1323                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1324                                  ;									   ;
  1325                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1326                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1327                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1328                                  GETSETCDPG			EQU 102 ; 102	 66
  1329                                  EXTHANDLE			EQU 103 ; 103	 67
  1330                                  COMMIT				EQU 104 ; 104	 68
  1331                                  
  1332                                  ; 09/07/2018 - Retro DOS v3.0
  1333                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1334                                  
  1335                                  ;GetSetMediaID			EQU 105 ; 105	 69
  1336                                  ;IFS_IOCTL			EQU 107 ; 107	 6B
  1337                                  ;ExtOpen 			EQU 108 ; 108	 6C
  1338                                  
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  ;ifdef ROMEXEC
  1343                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1344                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1345                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1346                                  ;endif
  1347                                  ;                                                                          ;
  1348                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1349                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1350                                  
  1351                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1352                                  ;OEM_C1				EQU 249 ; 249    F9
  1353                                  ;OEM_C2				EQU 250 ; 250    FA
  1354                                  ;OEM_C3				EQU 251 ; 251    FB
  1355                                  ;OEM_C4				EQU 252 ; 252    FC
  1356                                  ;OEM_C5				EQU 253 ; 253    FD
  1357                                  ;OEM_C6				EQU 254 ; 254    FE
  1358                                  ;OEM_C7				EQU 255 ; 255    FF
  1359                                  
  1360                                  ;============================================================================
  1361                                  ; VERSIONA.INC (MSDOS 3.3, 24/07/1987)
  1362                                  ;============================================================================
  1363                                  ; 08/07/2018 - Retro DOS 3.0
  1364                                  
  1365                                  MAJOR_VERSION   EQU     3
  1366                                  MINOR_VERSION   EQU     30
  1367                                  
  1368                                  ;============================================================================
  1369                                  ; DOSSYM_V211.ASM (-*-)
  1370                                  ;============================================================================
  1371                                  
  1372                                  ;DOS_MAJOR_VERSION   EQU      2
  1373                                  ;DOS_MINOR_VERSION   EQU     11
  1374                                  
  1375                                  ;============================================================================
  1376                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1377                                  ;============================================================================
  1378                                  ; 09/07/2018 - Retro DOS 3.0
  1379                                  
  1380                                  ;
  1381                                  ; Current structure of the data returned by the international call
  1382                                  ;
  1383                                  
  1384                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1385                                  .Date_tim_format:
  1386 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1387                                  .Currency_sym:
  1388 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1389                                  .Thous_sep:
  1390 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1391                                  .Decimal_sep:
  1392 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1393                                  .Date_sep:
  1394 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1395                                  .Time_sep:
  1396 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1397                                  .Bit_field:	
  1398 0000000F ??                      		RESB 1		; Bit values
  1399                                                                     ;   Bit 0 = 0 if currency symbol first
  1400                                                                     ;         = 1 if currency symbol last
  1401                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1402                                                                     ;         = 1 if space after currency symbol
  1403                                  .Currency_cents:
  1404 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1405                                  .Time_24:
  1406 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1407                                  .Map_call:
  1408 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1409 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1410                                  				;  in pieces.
  1411                                  .Data_sep:
  1412 00000016 ????                    		RESB	2	; Data list separator character
  1413                                  .size:		
  1414                                  endstruc
  1415                                  
  1416                                  ;
  1417                                  ; Max size of the block returned by the INTERNATIONAL call
  1418                                  ;
  1419                                  internat_block_max	EQU	32
  1420                                  
  1421                                  ;============================================================================
  1422                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1423                                  ;============================================================================
  1424                                  ; 08/07/2018 - Retro DOS v3.0
  1425                                  
  1426                                  ;SysInitVars STRUC
  1427                                  struc SYSI
  1428 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1429 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1430 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1431 0000000C ????????                .CON:	    resd 1		; CON device
  1432 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1433 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1434 00000016 ????????                .CDS:	    resd 1		; CDS list
  1435 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1436 0000001E ????                    .Keep:	    resw 1		; keep count
  1437 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1438 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1439 00000022 ????????                .DEV:	    resd 1		; device list
  1440                                  ; 09/07/2018
  1441                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1442                                  ; Following parameters are used with MDSOS 6.0 (Retro DOS v4.0)
  1443 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1444 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1445 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1446 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1447 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1448 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1449 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1450 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1451 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1452 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1453 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1454 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1455                                  endstruc
  1456                                  ;SysInitVars ENDS
  1457                                  
  1458                                  ;This is added for more information exchange between DOS, BIOS.
  1459                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1460                                  
  1461                                  ;SysInitVars_Ext struc
  1462                                  struc SYSI_EXT
  1463 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1464 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1465                                  endstruc
  1466                                  ;SysInitVars_Ext ends
  1467                                  
  1468                                  ;============================================================================
  1469                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1470                                  ;============================================================================
  1471                                  ; 09/07/2018 - Retro DOS v3.0
  1472                                  
  1473                                  ;*** J.K.
  1474                                  ;General Guide -
  1475                                  ;Category Code:
  1476                                  ; 0... .... DOS Defined
  1477                                  ; 1... .... User defined
  1478                                  ; .xxx xxxx Code
  1479                                  
  1480                                  ;Function Code:
  1481                                  ; 0... .... Return error if unsupported
  1482                                  ; 1... .... Ignore if unsupported
  1483                                  ; .0.. .... Intercepted by DOS
  1484                                  ; .1.. .... Passed to driver
  1485                                  ; ..0. .... Sends data/commands to device
  1486                                  ; ..1. .... Quries data/info from device
  1487                                  ; ...x .... Subfunction
  1488                                  ;
  1489                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1490                                  ; function set.  It plays no critical role; some functions may contain both
  1491                                  ; command and query elements. The convention is that such commands are
  1492                                  ; defined as "sends data".
  1493                                  
  1494                                  ;*****************************;*
  1495                                  ; BLOCK DRIVERS 	      ;*
  1496                                  ;*****************************;*
  1497                                  
  1498                                  ; IOCTL SUB-FUNCTIONS
  1499                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1500                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1501                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1502                                  IOCTL_READ_HANDLE	EQU	2
  1503                                  IOCTL_WRITE_HANDLE	EQU	3
  1504                                  IOCTL_READ_DRIVE	EQU	4
  1505                                  IOCTL_WRITE_DRIVE	EQU	5
  1506                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1507                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1508                                  IOCTL_CHANGEABLE?	EQU	8
  1509                                  IOCTL_DeviceLocOrRem?	EQU	9
  1510                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1511                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1512                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1513                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1514                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1515                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1516                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1517                                  ; (MSDOS 6.0)
  1518                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1519                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1520                                  
  1521                                  ; GENERIC IOCTL CATEGORY CODES
  1522                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1523                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1524                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1525                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1526                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1527                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1528                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1529                                  
  1530                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1531                                  RAWIO			EQU	8
  1532                                  
  1533                                  ; RAWIO SUB-FUNCTIONS
  1534                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1535                                  GET_DEVICE_PARAMETERS	EQU	60H
  1536                                  SET_DEVICE_PARAMETERS	EQU	40H
  1537                                  READ_TRACK		EQU	61H
  1538                                  WRITE_TRACK		EQU	41H
  1539                                  VERIFY_TRACK		EQU	62H
  1540                                  FORMAT_TRACK		EQU	42H
  1541                                  ; (MSDOS 6.0)
  1542                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1543                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1544                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1545                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1546                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1547                                  
  1548                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1549                                  BUILD_DEVICE_BPB	EQU	000000001B
  1550                                  
  1551                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1552                                  INSTALL_FAKE_BPB	EQU	000000001B
  1553                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1554                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1555                                  
  1556                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1557                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1558                                  STATUS_FOR_FORMAT	EQU	000000001B
  1559                                  ; (MSDOS 6.0)
  1560                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1561                                  
  1562                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1563                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1564                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1565                                  
  1566                                  ; DEVICETYPE VALUES
  1567                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1568                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1569                                  DEV_5INCH		EQU	0
  1570                                  DEV_5INCH96TPI		EQU	1
  1571                                  DEV_3INCH720KB		EQU	2
  1572                                  DEV_8INCHSS		EQU	3
  1573                                  DEV_8INCHDS		EQU	4
  1574                                  DEV_HARDDISK		EQU	5
  1575                                  DEV_OTHER		EQU	7
  1576                                  ; (MSDOS 6.0)
  1577                                  ;DEV_3INCH1440KB	EQU	7
  1578                                  DEV_3INCH2880KB		EQU	9
  1579                                  ; Retro DOS v2.0 - 26/03/2018
  1580                                  ;;DEV_TAPE		EQU	6
  1581                                  ;;DEV_ERIMO		EQU	8
  1582                                  ;DEV_3INCH2880KB	EQU	9
  1583                                  DEV_3INCH1440KB		EQU	10
  1584                                  
  1585                                  ; (MSDOS 3.3)
  1586                                  ;MAX_DEV_TYPE		EQU	7
  1587                                  
  1588                                  ; (MSDOS 6.0)
  1589                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1590                                  					; CURRENTLY SUPPORT.
  1591                                  
  1592                                  struc A_SECTORTABLE
  1593 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1594 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1595                                  .size:
  1596                                  endstruc
  1597                                  
  1598                                  ;============================================================================
  1599                                  ; DEVSYM.ASM
  1600                                  ;============================================================================
  1601                                  
  1602                                  ;SUBTTL DEVICE TABLE AND SRH DEFINITION
  1603                                  ;PAGE
  1604                                  
  1605                                  ; 07/07/2018 - Retro DOS v3.0
  1606                                  ; (DEVSYM.INC, MSDOS 6.0, 1991)
  1607                                  
  1608                                  ;**	DevSym.inc - Device Symbols
  1609                                  
  1610                                  ; The device table list has the form:
  1611                                  struc	SYSDEV
  1612 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1613 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1614 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1615 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1616 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1617                                  .size:
  1618                                  endstruc
  1619                                  
  1620                                  ;
  1621                                  ; ATTRIBUTE BIT MASKS
  1622                                  ;
  1623                                  ; CHARACTER DEVICES:
  1624                                  ;
  1625                                  ; BIT 15 -> MUST BE 1
  1626                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1627                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1628                                  ;     12 -> UNUSED
  1629                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1630                                  ;     10 -> MUST BE 0
  1631                                  ;      9 -> MUST BE 0
  1632                                  ;      8 -> UNUSED
  1633                                  ;      7 -> UNUSED
  1634                                  ;      6 -> UNUSED
  1635                                  ;      5 -> UNUSED
  1636                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1637                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1638                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1639                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1640                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1641                                  ;
  1642                                  ; BLOCK DEVICES:
  1643                                  ;
  1644                                  ; BIT 15 -> MUST BE 0
  1645                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1646                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1647                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1648                                  ;	    THE SAME PLACE.
  1649                                  ;     12 -> UNUSED
  1650                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1651                                  ;     10 -> MUST BE 0
  1652                                  ;      9 -> MUST BE 0
  1653                                  ;      8 -> UNUSED
  1654                                  ;      7 -> UNUSED
  1655                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1656                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1657                                  ;      5 -> UNUSED
  1658                                  ;      4 -> UNUSED
  1659                                  ;      3 -> UNUSED
  1660                                  ;      2 -> UNUSED
  1661                                  ;      1 -> UNUSED
  1662                                  ;      0 -> UNUSED
  1663                                  ;
  1664                                  
  1665                                  ;Attribute bit masks
  1666                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
  1667                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1668                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1669                                  
  1670                                  ; 09/07/2018 - Retro DOS
  1671                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1672                                  
  1673                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1674                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1675                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1676                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1677                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1678                                  				;  ENTRY POINTS, 0 IF NOT
  1679                                  
  1680                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1681                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1682                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1683                                  				;  ITS CURRENT FORM.
  1684                                  
  1685                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1686                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1687                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1688                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1689                                  
  1690                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1691                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1692                                  				;LOGICAL DRIVES, AND SUPPORTS
  1693                                  				;GENERIC IOCTL CALLS.
  1694                                  				;FOR CHARACTER DEVICES, THIS
  1695                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1696                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1697                                  
  1698                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1699                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1700                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1701                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1702                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1703                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1704                                  
  1705                                  ;Static Reguest Header
  1706                                  struc	SRHEAD
  1707 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1708 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1709 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1710 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1711 00000005 ????????????????                	resb 8		;Reserved for queue links
  1712                                  .size:
  1713                                  endstruc
  1714                                  
  1715                                  ;Status word masks
  1716                                  STERR   EQU     8000H           ;Bit 15 - Error
  1717                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1718                                  STDON   EQU     0100H           ;Bit 8 - Done
  1719                                  STECODE EQU     00FFH           ;Error code
  1720                                  WRECODE EQU     0
  1721                                  
  1722                                  ;Function codes
  1723                                  DEVINIT EQU     0               ;Initialization
  1724                                  DINITHL EQU     26              ;Size of init header
  1725                                  DEVMDCH EQU     1               ;Media check
  1726                                  DMEDHL  EQU     15              ;Size of media check header
  1727                                  DEVBPB  EQU     2               ;Get BPB
  1728                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1729                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1730                                  DEVRD   EQU     4               ;Read
  1731                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1732                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1733                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1734                                  DEVIST  EQU     6               ;Input status
  1735                                  DSTATHL EQU     13              ;Size of status header
  1736                                  DEVIFL  EQU     7               ;Input flush
  1737                                  DFLSHL  EQU     15              ;Size of flush header
  1738                                  DEVWRT  EQU     8               ;Write
  1739                                  DEVWRTV EQU     9               ;Write with verify
  1740                                  DEVOST  EQU     10              ;Output status
  1741                                  DEVOFL  EQU     11              ;Output flush
  1742                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1743                                  
  1744                                  ; 09/07/2018 - Retro DOS v3.0
  1745                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1746                                  
  1747                                  DEVOPN	EQU	13		;DEVICE OPEN
  1748                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1749                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1750                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1751                                  ; 07/08/2018 - Retro DOS v3.0
  1752                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1753                                  GENIOCTL EQU	19
  1754                                  
  1755                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1756                                  ;		     20
  1757                                  ;		     21
  1758                                  ;		     22
  1759                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1760                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1761                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1762                                  
  1763                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1764                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1765                                  
  1766                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1767                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1768                                  ;
  1769                                  
  1770                                  struc IOCTL_REQ
  1771 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1772                                  				; GENERIC IOCTL ADDITION.
  1773 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1774 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1775 0000000F ????                    .REG_SI:	resw 1
  1776 00000011 ????                    .REG_DI:	resw 1
  1777 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1778                                  .size: ; 07/08/2018
  1779                                  endstruc
  1780                                  
  1781                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1782                                  GEN_IOCTL_WRT_TRK EQU	40H
  1783                                  GEN_IOCTL_RD_TRK  EQU	60H
  1784                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1785                                  
  1786                                  ;============================================================================
  1787                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1788                                  ;============================================================================
  1789                                  ; 16/07/2018 - Retro DOS v3.0 
  1790                                  
  1791                                  ;**	ERROR.INC - DOS Error Codes
  1792                                  ;
  1793                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1794                                  ;    return error codes through AX. If an error occurred then
  1795                                  ;    the carry bit will be set and the error code is in AX. If no error
  1796                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1797                                  ;
  1798                                  ;    Since the set of error codes is being extended as we extend the operating
  1799                                  ;    system, we have provided a means for applications to ask the system for a
  1800                                  ;    recommended course of action when they receive an error.
  1801                                  ;
  1802                                  ;    The GetExtendedError system call returns a universal error, an error
  1803                                  ;    location and a recommended course of action. The universal error code is
  1804                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1805                                  ;    is issued.
  1806                                  
  1807                                  
  1808                                  ;	2.0 error codes
  1809                                  
  1810                                  error_invalid_function		EQU	1
  1811                                  error_file_not_found		EQU	2
  1812                                  error_path_not_found		EQU	3
  1813                                  error_too_many_open_files	EQU	4
  1814                                  error_access_denied		EQU	5
  1815                                  error_invalid_handle		EQU	6
  1816                                  error_arena_trashed		EQU	7
  1817                                  error_not_enough_memory 	EQU	8
  1818                                  error_invalid_block		EQU	9
  1819                                  error_bad_environment		EQU	10
  1820                                  error_bad_format		EQU	11
  1821                                  error_invalid_access		EQU	12
  1822                                  error_invalid_data		EQU	13
  1823                                  ;**** reserved			EQU	14	; *****
  1824                                  error_invalid_drive		EQU	15
  1825                                  error_current_directory 	EQU	16
  1826                                  error_not_same_device		EQU	17
  1827                                  error_no_more_files		EQU	18
  1828                                  
  1829                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1830                                  
  1831                                  error_write_protect		EQU	19
  1832                                  error_bad_unit			EQU	20
  1833                                  error_not_ready 		EQU	21
  1834                                  error_bad_command		EQU	22
  1835                                  error_CRC			EQU	23
  1836                                  error_bad_length		EQU	24
  1837                                  error_seek			EQU	25
  1838                                  error_not_DOS_disk		EQU	26
  1839                                  error_sector_not_found		EQU	27
  1840                                  error_out_of_paper		EQU	28
  1841                                  error_write_fault		EQU	29
  1842                                  error_read_fault		EQU	30
  1843                                  error_gen_failure		EQU	31
  1844                                  
  1845                                  ;	the new 3.0 error codes reported through INT 24
  1846                                  
  1847                                  error_sharing_violation 	EQU	32
  1848                                  error_lock_violation		EQU	33
  1849                                  error_wrong_disk		EQU	34
  1850                                  error_FCB_unavailable		EQU	35
  1851                                  error_sharing_buffer_exceeded	EQU	36
  1852                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  1853                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  1854                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  1855                                  
  1856                                  ;	New OEM network-related errors are 50-79
  1857                                  
  1858                                  error_not_supported		EQU	50
  1859                                  
  1860                                  error_net_access_denied		EQU	65	;M028
  1861                                  
  1862                                  ;	End of INT 24 reportable errors
  1863                                  
  1864                                  error_file_exists		EQU	80
  1865                                  error_DUP_FCB			EQU	81	; *****
  1866                                  error_cannot_make		EQU	82
  1867                                  error_FAIL_I24			EQU	83
  1868                                  
  1869                                  ;	New 3.0 network related error codes
  1870                                  
  1871                                  error_out_of_structures 	EQU	84
  1872                                  error_already_assigned		EQU	85
  1873                                  error_invalid_password		EQU	86
  1874                                  error_invalid_parameter 	EQU	87
  1875                                  error_NET_write_fault		EQU	88
  1876                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  1877                                  
  1878                                  ;	BREAK <Interrupt 24 error codes>
  1879                                  
  1880                                  ;**	Int24 Error Codes
  1881                                  
  1882                                  error_I24_write_protect 	EQU	0
  1883                                  error_I24_bad_unit		EQU	1
  1884                                  error_I24_not_ready		EQU	2
  1885                                  error_I24_bad_command		EQU	3
  1886                                  error_I24_CRC			EQU	4
  1887                                  error_I24_bad_length		EQU	5
  1888                                  error_I24_Seek			EQU	6
  1889                                  error_I24_not_DOS_disk		EQU	7
  1890                                  error_I24_sector_not_found	EQU	8
  1891                                  error_I24_out_of_paper		EQU	9
  1892                                  error_I24_write_fault		EQU	0Ah
  1893                                  error_I24_read_fault		EQU	0Bh
  1894                                  error_I24_gen_failure		EQU	0Ch
  1895                                  ; NOTE: Code 0DH is used by MT-DOS.
  1896                                  error_I24_wrong_disk		EQU	0Fh
  1897                                  
  1898                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  1899                                  ;
  1900                                  ;	NOTE: ABORT is ALWAYS allowed
  1901                                  
  1902                                  Allowed_FAIL			EQU	00001000B
  1903                                  Allowed_RETRY			EQU	00010000B
  1904                                  Allowed_IGNORE			EQU	00100000B
  1905                                  
  1906                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  1907                                  I24_area			EQU	00000110B  ; 00 if DOS
  1908                                  						   ; 01 if FAT
  1909                                  						   ; 10 if root DIR
  1910                                  						   ; 11 if DATA
  1911                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  1912                                  
  1913                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  1914                                  
  1915                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  1916                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  1917                                  ;	to take for error codes that they don't explicitly understand.
  1918                                  
  1919                                  ;	Values for error CLASS
  1920                                  
  1921                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  1922                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  1923                                  errCLASS_Auth		EQU	3	; Permission problem
  1924                                  errCLASS_Intrn		EQU	4	; Internal System Error
  1925                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  1926                                  errCLASS_SysFail	EQU	6	; System Failure
  1927                                  errCLASS_Apperr 	EQU	7	; Application Error
  1928                                  errCLASS_NotFnd 	EQU	8	; Not Found
  1929                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  1930                                  errCLASS_Locked 	EQU	10	; Locked
  1931                                  errCLASS_Media		EQU	11	; Media Failure
  1932                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  1933                                  errCLASS_Unk		EQU	13	; Unknown/other
  1934                                  
  1935                                  ;	Values for error ACTION
  1936                                  
  1937                                  errACT_Retry		EQU	1	; Retry
  1938                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  1939                                  errACT_User		EQU	3	; Ask user to regive info
  1940                                  errACT_Abort		EQU	4	; abort with clean up
  1941                                  errACT_Panic		EQU	5	; abort immediately
  1942                                  errACT_Ignore		EQU	6	; ignore
  1943                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  1944                                  
  1945                                  ;	Values for error LOCUS
  1946                                  
  1947                                  errLOC_Unk		EQU	1	; No appropriate value
  1948                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  1949                                  errLOC_Net		EQU	3	; Network
  1950                                  errLOC_SerDev		EQU	4	; Serial Device
  1951                                  errLOC_Mem		EQU	5	; Memory
  1952                                  
  1953                                  ;============================================================================
  1954                                  ; MULT.INC (MSDOS 3.3, 1987)
  1955                                  ;============================================================================
  1956                                  
  1957                                  ;Break <Critical section and Multiplex channels>
  1958                                  
  1959                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1960                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1961                                  ;									   ;
  1962                                  ; Critical section definitions
  1963                                  ;
  1964                                  ; These below are subject to leave-all sections
  1965                                  critDisk    EQU     1			; Disk I/O critical section
  1966                                  critDevice  EQU     2			; Device I/O critical section
  1967                                  critShare   EQU     1			; Sharer I/O critical section
  1968                                  critMem     EQU     1			; memory maintenance critical section
  1969                                  critNet     EQU     5			; network critical section
  1970                                  critSFT     EQU     1			; sft table allocation
  1971                                  ; These below are not subject to leave-all sections
  1972                                  critASSIGN  EQU     8			; Assign has munged a system call
  1973                                  ;									   ;
  1974                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1975                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1976                                  
  1977                                  ;
  1978                                  ; The current set of defined multiplex channels is (* means documented):
  1979                                  ;
  1980                                  ;   Channel(h)	Issuer		Receiver    Function
  1981                                  ;      00	server		PSPRINT     print job control
  1982                                  ;     *01	print/apps	PRINT	    Queueing of files
  1983                                  ;      02	BIOS		REDIR	    signal open/close of printers
  1984                                  ;
  1985                                  ;      05	command 	REDIR	    obtain text of net int 24 message
  1986                                  ;     *06	server/assign	ASSIGN	    Install check
  1987                                  ;
  1988                                  ;      08	external driver IBMBIO	    interface to internal routines
  1989                                  ;
  1990                                  ;      10	sharer/server	Sharer	    install check
  1991                                  ;      11	DOS/server	Redir	    install check/redirection funcs
  1992                                  ;      12	sharer/redir	DOS	    dos functions and structure maint
  1993                                  ;      13	MSNET		MSNET	    movement of NCBs
  1994                                  ;      14	DOS		NLSFUNC     down load NLS country info,DOS 3.3
  1995                                  ;      14	Apps		Popup	    DOS 4.XX popup screen functions
  1996                                  ;	  ***> NOTE <***  Yes there are 2 users of 14h but since DOS 4.XX
  1997                                  ;			  doesn't use NLSFUNC, there is no conflict
  1998                                  ;      15	Apps		MSCDEX	    CD-ROM redirector interface
  1999                                  ;      16	Winoldap (?)	WIN386	    Private Windows communication
  2000                                  ;      17	Winoldap (?)	WIN386	    Win386 clipboard interface
  2001                                  ;      18	Apps		MS-Manager  Toggle interface to manager
  2002                                  ;      19,(13h) external driver IBMBIO	    Reset_Int_13, allows installation
  2003                                  ;					    of alternative INT_13 drivers after
  2004                                  ;					    boot_up
  2005                                  ;      B0	GRAFTABL	GRAFTABL
  2006                                  ;
  2007                                  
  2008                                  MultSHARE   EQU     10h 		; sharer
  2009                                      ;	1   MFT_enter
  2010                                      ;	2   MFTClose
  2011                                      ;	3   MFTclU
  2012                                      ;	4   MFTCloseP
  2013                                      ;	5   MFTCloN
  2014                                      ;	6   set_block
  2015                                      ;	7   clr_block
  2016                                      ;	8   chk_block
  2017                                      ;	9   MFT_get
  2018                                      ;	10  ShSave
  2019                                      ;	11  ShChk
  2020                                      ;	12  ShCol
  2021                                      ;	13  ShCloseFile
  2022                                  
  2023                                  MultNET     EQU     11h 		; Network support
  2024                                      ;	1   NET_RMDIR
  2025                                      ;	2   NET_SEQ_RMDIR
  2026                                      ;	3   NET_MKDIR
  2027                                      ;	4   NET_SEQ_MKDIR
  2028                                      ;	5   NET_CHDIR
  2029                                      ;	6   NET_CLOSE
  2030                                      ;	7   NET_COMMIT
  2031                                      ;	8   NET_READ
  2032                                      ;	9   NET_WRITE
  2033                                      ;	10  NET_LOCK
  2034                                      ;	11  NET_UNLOCK
  2035                                      ;	12  NET_DISK_INFO
  2036                                      ;	13  NET_SET_FILE_ATTRIBUTE
  2037                                      ;	14  NET_SEQ_SET_FILE_ATTRIBUTE
  2038                                      ;	15  NET_GET_FILE_INFO
  2039                                      ;	16  NET_SEQ_GET_FILE_INFO
  2040                                      ;	17  NET_RENAME
  2041                                      ;	18  NET_SEQ_RENAME
  2042                                      ;	19  NET_DELETE
  2043                                      ;	20  NET_SEQ_DELETE
  2044                                      ;	21  NET_OPEN
  2045                                      ;	22  NET_SEQ_OPEN
  2046                                      ;	23  NET_CREATE
  2047                                      ;	24  NET_SEQ_CREATE
  2048                                      ;	25  NET_SEQ_SEARCH_FIRST
  2049                                      ;	26  NET_SEQ_SEARCH_NEXT
  2050                                      ;	27  NET_SEARCH_FIRST
  2051                                      ;	28  NET_SEARCH_NEXT
  2052                                      ;	29  NET_ABORT
  2053                                      ;	30  NET_ASSOPER
  2054                                      ;	31  Printer_SET_STRING
  2055                                      ;	32  NetFlushBuf
  2056                                      ;	33  NetBufWrite
  2057                                      ;	34  NetResetEnvironment
  2058                                      ;	35  NetSpoolCheck
  2059                                      ;	36  NetSpoolClose
  2060                                  
  2061                                  MultDOS     EQU     12h 		; DOS call back
  2062                                      ;	1   DOS_CLOSE
  2063                                      ;	2   RECSET
  2064                                      ;	3   Get DOSGROUP
  2065                                      ;	4   PATHCHRCMP
  2066                                      ;	5   OUT
  2067                                      ;	6   NET_I24_ENTRY
  2068                                      ;	7   PLACEBUF
  2069                                      ;	8   FREE_SFT
  2070                                      ;	9   BUFWRITE
  2071                                      ;	10  SHARE_VIOLATION
  2072                                      ;	11  SHARE_ERROR
  2073                                      ;	12  SET_SFT_MODE
  2074                                      ;	13  DATE16
  2075                                      ;	14  SETVISIT
  2076                                      ;	15  SCANPLACE
  2077                                      ;	16  SKIPVISIT
  2078                                      ;	17  StrCpy
  2079                                      ;	18  StrLen
  2080                                      ;	19  UCase
  2081                                      ;	20  POINTCOMP
  2082                                      ;	21  CHECKFLUSH
  2083                                      ;	22  SFFromSFN
  2084                                      ;	23  GetCDSFromDrv
  2085                                      ;	24  Get_User_Stack
  2086                                      ;	25  GetThisDrv
  2087                                      ;	26  DriveFromText
  2088                                      ;	27  SETYEAR
  2089                                      ;	28  DSUM
  2090                                      ;	29  DSLIDE
  2091                                      ;	30  StrCmp
  2092                                      ;	31  initcds
  2093                                      ;	32  pjfnfromhandle
  2094                                      ;	33  $NameTrans
  2095                                      ;	34  CAL_LK
  2096                                      ;	35  DEVNAME
  2097                                      ;	36  Idle
  2098                                      ;
  2099                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2100                                      ;	0   NLSInstall
  2101                                      ;	1   ChgCodePage
  2102                                      ;	2   GetExtInfo
  2103                                      ;	3   SetCodePage
  2104                                      ;	4   GetCntry
  2105                                      ;
  2106                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2107                                  ;	  it calls Multdos 42 to set up an entry routine address
  2108                                      ;	0   Install status  (reserved)
  2109                                      ;	1   Lookup
  2110                                      ;	2   Insert
  2111                                      ;	3   Delete
  2112                                      ;	4   Purge	    (reserved)
  2113                                  
  2114                                  ;============================================================================
  2115                                  ; FIND.INC (MSDOS 3.3, 1987)
  2116                                  ;============================================================================
  2117                                  ; 09/07/2018 - Retro DOS v3.0
  2118                                  
  2119                                  ;Break	<find first/next buffer>
  2120                                  
  2121                                  struc find_buf
  2122 00000000 ??                      .drive:	    resb 1		; drive of search
  2123 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2124 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2125 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2126 0000000F ????                    .DirStart:  resw 1		; DirStart
  2127 00000011 ??                      .attr:	    resb 1		; attribute found
  2128 00000012 ????                    .time:	    resw 1		; time
  2129 00000014 ????                    .date:	    resw 1		; date
  2130 00000016 ????                    .size_l:    resw 1		; low(size)
  2131 00000018 ????                    .size_h:    resw 1		; high(size)
  2132 0000001A <res Dh>                .pname:	    resb 13		; packed name
  2133                                  .size:
  2134                                  endstruc
  2135                                  
  2136                                  ;============================================================================
  2137                                  ; DOSCNTRY.INC (MSDOS 3.3, 1987)
  2138                                  ;============================================================================
  2139                                  ; 09/07/2018 - Retro DOS v3.0
  2140                                  
  2141                                  ;Equates for COUNTRY INFORMATION.
  2142                                  SetCountryInfo	EQU	1	;country info
  2143                                  SetUcase	EQU	2	;uppercase table
  2144                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2145                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2146                                  SetFileList	EQU	5	;valid file character list
  2147                                  SetCollate	EQU	6	;collating sequence
  2148                                  SetDBCS 	EQU	7	;double byte character set
  2149                                  SetALL		EQU	-1	;all the entries
  2150                                  
  2151                                  
  2152                                  ;DOS country and code page information table structure.
  2153                                  ;Internally, IBMDOS gives a pointer to this table.
  2154                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2155                                  ;this structure.
  2156                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2157 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2158 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2159 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2160 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 5)
  2161 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2162 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2163                                  
  2164 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2165 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2166                                  
  2167 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2168 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2169                                  
  2170 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2171 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2172                                  
  2173 00000060 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2174 00000061 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2175 00000063 ????                    .ccDosCountry:		resw 1	;system country code id
  2176 00000065 ????                    .ccDosCodePage:		resw 1	;system code page id
  2177 00000067 ????                    .ccDFormat:		resw 1	;date format
  2178 00000069 ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2179 0000006E ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2180 00000070 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2181 00000072 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2182 00000074 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2183 00000076 ??                      .ccCFormat:		resb 1	;currency format flags
  2184 00000077 ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2185 00000078 ??                      .ccTFormat:		resb 1	;time format
  2186 00000079 ????????                .ccMono_Ptr:		resd 1	;monocase routine entry point
  2187 0000007D ????                    .ccListSep:		resb 2	;data list separator
  2188 0000007F <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2189                                  .size:
  2190                                  endstruc
  2191                                  
  2192                                  ;Ucase table
  2193                                  struc CC_UCASE_TAB
  2194 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2195 00000002 <res 80h>               .ccUcase_data:		resb 128
  2196                                  endstruc
  2197                                  
  2198                                  ;File Ucase table
  2199                                  struc CC_FILE_UCASE_TAB
  2200 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2201 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2202                                  endstruc
  2203                                  
  2204                                  ;File char list
  2205                                  struc CC_FILE_CHAR_TAB
  2206 00000000 ????                    .ccFilechar_leng:	resw 1
  2207 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2208                                  endstruc
  2209                                  
  2210                                  ;collate table
  2211                                  struc CC_COLLATE_TAB
  2212 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2213 00000002 <res 100h>              .ccCollate_data:	resb 256
  2214                                  endstruc
  2215                                  
  2216                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2217                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) 
  2218                                  
  2219                                  ; 06/08/2018
  2220                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2221                                  
  2222                                  ;CAPITALIZATION equates
  2223                                  CAP_ONE_CHAR	equ	20H
  2224                                  CAP_STRING	equ	21H
  2225                                  CAP_ASCIIZ	equ	22H
  2226                                  CHECK_YES_NO	equ	23H
  2227                                  UPPER_TABLE	equ	80H
  2228                                  
  2229                                  ;NLS_YES	equ	59H  ; 'Y'
  2230                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2231                                  ;NLS_NO		equ	4EH  ; 'N'	
  2232                                  ;NLS_no2	equ	6EH  ; 'n'	
  2233                                  
  2234                                  ;============================================================================
  2235                                  ; CURDIR.INC (MSDOS 3.3, 1987)
  2236                                  ;============================================================================
  2237                                  ; 09/07/2018 - Retro DOS v3.0
  2238                                  
  2239                                  ;BREAK <Current directory list structure>
  2240                                  
  2241                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2242                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2243                                  ;									   ;
  2244                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2245                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2246                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2247                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2248                                  ; of the disk being changed or if the path must be recracked.  The END	   ;
  2249                                  ; field is the location of the end of the definition.  No .. is allowed    ;
  2250                                  ; past this point							   ;
  2251                                  
  2252                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2253                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2254                                  
  2255                                  struc curdir	; curdir_list
  2256 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2257 00000043 ????                    .flags:		resw 1			; various flags
  2258 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2259 00000049 ????                    .ID:		resw 1			; cluster of current dir (net ID)
  2260 0000004B ????                    		resw 1
  2261 0000004D ????                    .user_word:	resw 1
  2262 0000004F ????                    .end:		resw 1			; end of assignment
  2263                                  .size:
  2264                                  endstruc
  2265                                  
  2266                                  curdirLen	EQU curdir.size		; Needed for screwed up
  2267                                  
  2268                                  %define curdir_netID curdir_ID  ; dword
  2269                                  
  2270                                  ;Flag word masks
  2271                                  curdir_isnet	EQU	1000000000000000B
  2272                                  curdir_inuse	EQU	0100000000000000B
  2273                                  curdir_splice	EQU	0010000000000000B
  2274                                  curdir_local	EQU	0001000000000000B
  2275                                  ;									   ;
  2276                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2277                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2278                                  
  2279                                  ;============================================================================
  2280                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2281                                  ;============================================================================
  2282                                  ; 09/07/2018 - Retro DOS v3.0
  2283                                  
  2284                                  ;BREAK <File Control Block definition>
  2285                                  
  2286                                  ;
  2287                                  ; Field definition for FCBs
  2288                                  ; The FCB has the following structure:
  2289                                  ;
  2290                                  ;	+---------------------------+
  2291                                  ;	|   Drive indicator(byte)   |
  2292                                  ;	+---------------------------+
  2293                                  ;	|    Filename (8 chars)     |
  2294                                  ;	+---------------------------+
  2295                                  ;	|    Extension (3 chars)    |
  2296                                  ;	+---------------------------+
  2297                                  ;	|   Current Extent(word)    |
  2298                                  ;	+---------------------------+
  2299                                  ;	|    Record size (word)     |
  2300                                  ;	+---------------------------+
  2301                                  ;	|    File Size (2 words)    |
  2302                                  ;	+---------------------------+
  2303                                  ;	|	Date of write	    |
  2304                                  ;	+---------------------------+
  2305                                  ;	|	Time of write	    |
  2306                                  ;	+---------------------------+
  2307                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2308                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2309                                  ;									   ;
  2310                                  ;	+---------------------------+
  2311                                  ;	|   8 bytes reserved	    |
  2312                                  ;	+---------------------------+
  2313                                  ;									   ;
  2314                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2315                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2316                                  ;	|    next record number     |
  2317                                  ;	+---------------------------+
  2318                                  ;	|   random record number    |
  2319                                  ;	+---------------------------+
  2320                                  ;
  2321                                  
  2322                                  struc	SYS_FCB
  2323 00000000 ??                      .drive:	resb 1
  2324 00000001 ????????????????        .name:	resb 8
  2325 00000009 ??????                  .ext:	resb 3
  2326 0000000C ????                    .EXTENT: resw 1
  2327 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2328 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2329                                  				; following word
  2330 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2331 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2332 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2333                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2334                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2335                                  ;									   ;
  2336 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2337                                  ;									   ;
  2338                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2340 00000020 ??                      .NR:	resb 1			; Next record
  2341 00000021 ????????                .RR:	resb 4			; Random record
  2342                                  endstruc
  2343                                  
  2344                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2345                                  				; NEXT
  2346                                  ; 20/07/2018
  2347                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2348                                  
  2349                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2350                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2351                                  ; NOTE about this byte (fcb_nsl_drive)
  2352                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2353                                  ;	00 means a local file or device with sharing loaded
  2354                                  ;	10 means a remote (network) file
  2355                                  ;	01 means a local file with no sharing loaded
  2356                                  ;	11 means a local device with no sharing loaded
  2357                                  
  2358                                  ; 20/07/2018
  2359                                  
  2360                                  ;
  2361                                  ; Network FCB
  2362                                  ;
  2363                                  
  2364                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2365                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2366                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2367                                  
  2368                                  ;
  2369                                  ; No sharing local file FCB
  2370                                  ;
  2371                                  
  2372                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2373                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2374                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2375                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2376                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2377                                  
  2378                                  ;
  2379                                  ; No sharing local device FCB
  2380                                  ;
  2381                                  
  2382                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2383                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2384                                  
  2385                                  ;
  2386                                  ; Sharing local FCB
  2387                                  ;
  2388                                  
  2389                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2390                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2391                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2392                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2393                                  
  2394                                  ;
  2395                                  ; Bogusness:  the four cases are:
  2396                                  ;
  2397                                  ;   local file	    00
  2398                                  ;   local device    40
  2399                                  ;   local sharing   C0
  2400                                  ;   network	    80
  2401                                  ;
  2402                                  ; Since sharing and network collide, we cannot use a test instruction for
  2403                                  ; deciding whether a network or a share check in involved
  2404                                  ;
  2405                                  FCBDEVICE   EQU 040h
  2406                                  FCBNETWORK  EQU 080h
  2407                                  FCBSHARE    EQU 0C0h
  2408                                  
  2409                                  ; FCBSPECIAL must be able to mask off both net and share
  2410                                  FCBSPECIAL  EQU 080h
  2411                                  FCBMASK     EQU 0C0h
  2412                                  
  2413                                  ;============================================================================
  2414                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2415                                  ;============================================================================
  2416                                  ; 11/07/2018 - Retro DOS v3.0
  2417                                  
  2418                                  struc	FEI	; FASTOPEN_EXTENDED_INFO
  2419 00000000 ??                      .dirpos:	resb 1
  2420                                  ;.dirsec:	resd 1 ; MSDOS 6.0
  2421 00000001 ????                    .dirsec:	resw 1 ; MSDOS 3.3
  2422 00000003 ????                    .clusnum:	resw 1
  2423                                  ;.lastent:	resw 1	; for search first ; MSDOS 6.0
  2424                                  ;.dirstart:	resw 1	; for search first ; MSDOS 6.0
  2425                                  .size:
  2426                                  endstruc
  2427                                  
  2428                                  ; 23/07/2018
  2429                                  ;FASTOPEN NAME CACHING Subfunctions
  2430                                  FONC_Look_up	equ	1
  2431                                  FONC_insert	equ	2
  2432                                  FONC_delete	equ	3
  2433                                  FONC_update	equ	4
  2434                                  FONC_purge	equ	5	;reserved for the future use.
  2435                                  FONC_Rename	equ	6	;AN001
  2436                                  
  2437                                  ; 27/07/2018
  2438                                  ;FastOpen Data Structure
  2439                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2440 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2441 00000002 ????????                .name_caching:	resd 1
  2442                                  ; MSDOS 6.0
  2443                                  ;.fatchain_caching: resd 1	;reserved for future use
  2444                                  .size:
  2445                                  endstruc
  2446                                  
  2447                                  ; 27/07/2018
  2448                                  ;Equates used in DOS.
  2449                                  FastOpen_Set	       equ     00000001b
  2450                                  FastOpen_Reset	       equ     11111110b
  2451                                  Lookup_Success	       equ     00000010b
  2452                                  Lookup_Reset	       equ     11111101b
  2453                                  Special_Fill_Set       equ     00000100b
  2454                                  Special_Fill_Reset     equ     11111011b
  2455                                  No_Lookup	       equ     00001000b
  2456                                  Set_For_Search	       equ     00010000b	;DCR 167
  2457                                  
  2458                                  ; 09/08/2018 
  2459                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2460                                  ; Fastxxx equates
  2461                                  FastOpen_ID	   equ	   1
  2462                                  FastSeek_ID	   equ	   2
  2463                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2464                                  
  2465                                  ;Structure definitions
  2466                                  ;
  2467                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2468 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2469 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2470                                  endstruc
  2471                                  
  2472                                  ;============================================================================
  2473                                  ; LOCK.INC, MSDOS 6.0, 1991
  2474                                  ;============================================================================
  2475                                  ; 14/07/2018 - Retro DOS v3.0
  2476                                  
  2477                                  ;**	LOCK.INC - Definitions for Record Locking
  2478                                  
  2479                                  ;**	LOCK functions
  2480                                  
  2481                                  LOCK_ALL	    equ    0
  2482                                  UNLOCK_ALL	    equ    1
  2483                                  LOCK_MUL_RANGE	    equ    2
  2484                                  UNLOCK_MUL_RANGE    equ    3
  2485                                  LOCK_READ	    equ    4
  2486                                  WRITE_UNLOCK	    equ    5
  2487                                  LOCK_ADD	    equ    6
  2488                                  
  2489                                  ;**	Structure for Lock buffer
  2490                                  
  2491                                  struc LockBuf
  2492 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2493 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2494                                  endstruc
  2495                                  
  2496                                  ;============================================================================
  2497                                  ; DPL.ASM, MSDOS 6.0, 1991
  2498                                  ;============================================================================
  2499                                  ; 04/08/2018 - Retro DOS v3.0
  2500                                  
  2501                                  ; (SRVCALL.ASM)
  2502                                  
  2503                                  struc DPL
  2504 00000000 ????                    .AX:	resw	1	; AX register
  2505 00000002 ????                    .BX:	resw	1	; BX register
  2506 00000004 ????                    .CX:	resw	1	; CX register
  2507 00000006 ????                    .DX:	resw	1	; DX register
  2508 00000008 ????                    .SI:	resw	1	; SI register
  2509 0000000A ????                    .DI:	resw	1	; DI register
  2510 0000000C ????                    .DS:	resw	1	; DS register
  2511 0000000E ????                    .ES:	resw	1	; ES register
  2512 00000010 ????                    .rsrvd: resw	1	; Reserved
  2513 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2514 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2515                                  .size:
  2516                                  endstruc
  2517                                   
  2518                                  ;============================================================================
  2519                                  ; MSDATA.ASM
  2520                                  ;============================================================================
  2521                                  ;============================================================================
  2522                                  ; MS_DATA.ASM (MSDOS 6.0, 1991) (1)
  2523                                  ;============================================================================
  2524                                  ; 16/07/2018 - Retro DOS 3.0	
  2525                                  
  2526                                  ;Break <Uninitialized data overlayed by initialization code>
  2527                                  
  2528                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
  2529                                  ; Init code overlaps with data area below
  2530                                  
  2531                                  		; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  2532                                  
  2533                                  ;	I_am    TIMEBUF,6               ; Time read from clock device
  2534                                  ;	I_am    DEVIOBUF,2              ; Buffer for I/O under file assignment
  2535                                  
  2536                                  TIMEBUF		EQU 	DATASEGMENT	; Offset 0358h (in IBMDOS.COM 3.3)
  2537                                  DEVIOBUF	EQU	TIMEBUF+6
  2538                                  ;
  2539                                  ; The following areas are used as temp buffer in EXEC system call
  2540                                  ;
  2541                                  ;       I_am    OPENBUF,128             ; buffer for name operations
  2542                                  ;       I_am    RenBuf,128              ; buffer for rename destination
  2543                                  
  2544                                  OPENBUF		EQU	DEVIOBUF+2	; DATASEGMENT+8 
  2545                                  RENBUF		EQU	OPENBUF+128	; DATASEGMENT+136
  2546                                  
  2547                                  ; Buffer for search calls
  2548                                  ;        I_am    SEARCHBUF,53		; internal search buffer
  2549                                  ;        I_am    DummyCDS,curdirLen
  2550                                  
  2551                                  SEARCHBUF	EQU	RENBUF+128	; DATASEGMENT+264
  2552                                  DUMMYCDS	EQU	SEARCHBUF+53	; DATASEGMENT+317 
  2553                                  						; Offset 495h in MSDOS 3.3
  2554                                  ;
  2555                                  ; End of contiguous buffer
  2556                                  ;
  2557                                  
  2558                                  ; Temporary directory entry for use by many routines.  Device directory
  2559                                  ; entries (bogus) are built here.
  2560                                  ;
  2561                                  ;        PUBLIC  DevFCB
  2562                                  ;DEVFCB  LABEL   BYTE                    ; Uses NAME1, NAME2, combined
  2563                                  ; WARNING.. do not alter position of NAME1 relative to DEVFCB
  2564                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
  2565                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
  2566                                  
  2567                                  DEVFCB		EQU	DUMMYCDS+curdirLen ; DATASEGMENT+398
  2568                                  
  2569                                  ;	I_am    NAME1,12                ; File name buffer
  2570                                  ;       I_am    NAME2,13                ;
  2571                                  ;	I_am    DESTSTART,WORD          ;
  2572                                  ;	DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
  2573                                  
  2574                                  NAME1		EQU	DEVFCB		; Offset 04E6h in IBMDOS.COM 3.3
  2575                                  NAME2		EQU	NAME1+12	; DATASEGMENT+410
  2576                                  DESTSTART	EQU	NAME2+13	; DATASEGMENT+423
  2577                                  
  2578                                  ;
  2579                                  ; End Temporary directory entry.
  2580                                  ;
  2581                                  
  2582                                  ;       I_am    ATTRIB,BYTE             ; storage for file attributes
  2583                                  ;	I_am    EXTFCB,BYTE             ; TRUE => extended FCB in use
  2584                                  
  2585                                  ATTRIB		EQU	DEVFCB + dir_entry.size ; Offset 0506h
  2586                                  	; Offset 0507h in IBMDOS.COM (MSDOS 3.3) 
  2587                                  EXTFCB		EQU	ATTRIB+1	; DATASEGMENT+431
  2588                                  
  2589                                  ;       I_am    SATTRIB,BYTE            ; Storage for search attributes
  2590                                  ;       I_AM    open_access,BYTE        ; access of open system call
  2591                                  ;       I_am    FoundDel,BYTE           ; true => file was deleted
  2592                                  ;       I_am    Found_dev,BYTE          ; true => search found a device
  2593                                  ;       I_am    fSplice,BYTE            ; true => do a splice in transpath
  2594                                  ;       I_am    fSharing,BYTE           ; TRUE => no redirection
  2595                                  ;       I_am    SECCLUSPOS,BYTE         ; Position of first sector within cluster
  2596                                  ;       I_am    TRANS,BYTE              ;
  2597                                  ;       I_am    READOP,BYTE             ;
  2598                                  ;       I_am    THISDRV,BYTE            ;
  2599                                  ;       I_am    CLUSFAC,BYTE            ;
  2600                                  ;       I_am    CLUSSPLIT,BYTE          ;
  2601                                  ;       I_am    INSMODE,BYTE            ; true => insert mode in buffered read
  2602                                  ;       I_am    cMeta,BYTE              ; count of meta'ed components found
  2603                                  ;       I_am    VOLID,BYTE              ;
  2604                                  ;       I_am    exit_type,BYTE          ; type of exit...
  2605                                  
  2606                                  SATTRIB		EQU	EXTFCB+1	; DATASEGMENT+432
  2607                                  OPEN_ACCESS	EQU	SATTRIB+1	; DATASEGMENT+433
  2608                                  FOUNDDEL	EQU	OPEN_ACCESS+1	; DATASEGMENT+434
  2609                                  FOUND_DEV	EQU	FOUNDDEL+1	; DATASEGMENT+435
  2610                                  FSPLICE		EQU	FOUND_DEV+1	; DATASEGMENT+436
  2611                                  FSHARING	EQU	FSPLICE+1	; DATASEGMENT+437
  2612                                  SECCLUSPOS	EQU	FSHARING+1	; DATASEGMENT+438
  2613                                  TRANS		EQU	SECCLUSPOS+1	; DATASEGMENT+439
  2614                                  READOP		EQU	TRANS+1		; DATASEGMENT+440	
  2615                                  THISDRV		EQU	READOP+1	; DATASEGMENT+441
  2616                                  CLUSFAC		EQU	THISDRV+1	; DATASEGMENT+442
  2617                                  CLUSSPLIT	EQU	CLUSFAC+1	; DATASEGMENT+443
  2618                                  INSMODE		EQU	CLUSSPLIT+1	; DATASEGMENT+444
  2619                                  CMETA		EQU	INSMODE+1	; DATASEGMENT+445
  2620                                  VOLID		EQU	CMETA+1		; DATASEGMENT+446
  2621                                  EXIT_TYPE	EQU	VOLID+1		; DATASEGMENT+447
  2622                                          
  2623                                  ;	EVEN
  2624                                  
  2625                                  ; WARNING - the following two items are accessed as a word
  2626                                  
  2627                                  ;	I_am    CREATING,BYTE           ; true => creating a file
  2628                                  ;	I_am	DELALL,BYTE		; = 0 iff BUGBUG
  2629                                  ;					; = DIRFREE iff BUGBUG
  2630                                  ;	I_am    EXITHOLD,DWORD          ; Temp location for proc terminate
  2631                                  ;	I_am    user_SP,WORD            ; User SP for system call
  2632                                  ;	I_am    user_SS,WORD            ; User SS for system call
  2633                                  ;	I_am    CONTSTK,WORD            ;
  2634                                  ;	I_am    THISDPB,DWORD           ;
  2635                                  ;	I_am    CLUSSAVE,WORD           ;
  2636                                  ; MSDOS 3.3
  2637                                  ;	I_am    CLUSSEC,WORD		;	
  2638                                  ;; MSDOS 6.0
  2639                                  ;;	I_am    CLUSSEC,DWORD           ;>32mb         ; AC0000
  2640                                  
  2641                                  	; Offset 0518h in IBMDOS.COM (MSDOS 3.3) 
  2642                                  
  2643                                  CREATING	EQU	EXIT_TYPE+1 	; DATASEGMENT+448
  2644                                  	; (End of 'MOVDPB' (in MSINIT) - Offset 0519h (just after 'retf'))
  2645                                  DELALL		EQU	CREATING+1	; DATASEGMENT+449
  2646                                  EXITHOLD	EQU	DELALL+1	; DATASEGMENT+450
  2647                                  USER_SP		EQU	EXITHOLD+4	; DATASEGMENT+454
  2648                                  USER_SS		EQU	USER_SP+2	; DATASEGMENT+456
  2649                                  CONTSTK		EQU	USER_SS+2	; DATASEGMENT+458	
  2650                                  THISDPB		EQU	CONTSTK+2	; DATASEGMENT+460
  2651                                  CLUSSAVE	EQU	THISDPB+4	; DATASEGMENT+464
  2652                                  CLUSSEC		EQU	CLUSSAVE+2	; Offset 052Ah ; DATASEGENT+466
  2653                                  
  2654                                  ;       I_am    PREREAD,WORD            ; 0 means preread; 1 means optional
  2655                                  ;       I_am    FATBYT,WORD             ; Used by ALLOCATE
  2656                                  ;       I_am    FATBYTE,WORD            ; Used by $SLEAZEFUNC
  2657                                  ;       I_am    DEVPT,DWORD             ;
  2658                                  ;       I_am    THISSFT,DWORD           ; Address of user SFT
  2659                                  ;       I_am    THISCDS,DWORD           ; Address of current CDS
  2660                                  ;       I_am    THISFCB,DWORD           ; Address of user FCB
  2661                                  
  2662                                  ; MSDOS 3.3
  2663                                  PREREAD		EQU	CLUSSEC+2	; OffseT 052Ch ; DATASEGMENT+468
  2664                                  
  2665                                  ; MSDOS 6.0
  2666                                  ; PREREAD	EQU	CLUSSEC+4
  2667                                  
  2668                                  FATBYT		EQU	PREREAD+2	; DATASEGMENT+470
  2669                                  FATBYTE		EQU	FATBYT+2	; Offset 0530h ; DATASEGMENT+472
  2670                                  DEVPT		EQU	FATBYTE+2	; DATASEGMENT+474	
  2671                                  THISSFT		EQU	DEVPT+4		; Offset 0536h ; DATASEGMENT+478
  2672                                  THISCDS		EQU	THISSFT+4	; DATASEGMENT+482	
  2673                                  THISFCB		EQU	THISCDS+4	; DATASEGMENT+486
  2674                                  
  2675                                  ; DATASEGMENT+490 :  ; *!!!*
  2676                                  	; Here is offset 0542h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  2677                                  ;SFN		EQU	THISFCB+4	; DATASEGMENT + 0542h - 0358h
  2678                                  
  2679                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  2680                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  2681                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  2682                                  ;       I_am    WFP_START,WORD          ;
  2683                                  ;       I_am    REN_WFP,WORD            ;
  2684                                  ;       I_am    CURR_DIR_END,WORD       ;
  2685                                  ;       I_am    NEXTADD,WORD            ;
  2686                                  ;       I_am    LASTPOS,WORD            ;
  2687                                  ;       I_am    CLUSNUM,WORD            ;
  2688                                  ;       I_am    DIRSEC,DWORD            ;>32mb 		; AC0000
  2689                                  ;       I_am    DIRSTART,WORD           ;
  2690                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  2691                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  2692                                  ;                                       ; sectors
  2693                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  2694                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  2695                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  2696                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  2697                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  2698                                  ;       I_am    ENTFREE,WORD            ;
  2699                                  ;       I_am    ENTLAST,WORD            ;
  2700                                  ;       I_am    NXTCLUSNUM,WORD         ;
  2701                                  ;       I_am    GROWCNT,DWORD           ;
  2702                                  ;       I_am    CURBUF,DWORD            ;
  2703                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  2704                                  ;       I_am    SAVEBX,WORD             ;
  2705                                  ;       I_am    SAVEDS,WORD             ;
  2706                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  2707                                  ;       I_am    NSS,WORD
  2708                                  ;       I_am    NSP,WORD	
  2709                                  
  2710                                  ;	....  [ MS_DATA.ASM (MSDOS 6.0, 1991) (2) ] ; $$$
  2711                                  
  2712                                  ;DOSDATA ENDS
  2713                                  
  2714                                  ;============================================================================
  2715                                  ; MSHEAD.ASM
  2716                                  ;============================================================================
  2717                                  
  2718                                  [BITS 16]
  2719                                  [ORG 0]
  2720                                  
  2721                                  START:
  2722 00000000 E97E73                          JMP     DOSINIT
  2723                                  
  2724                                  ;============================================================================
  2725                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2726                                  ;============================================================================
  2727                                  ; 16/07/2018 - Retro DOS 3.0
  2728                                  
  2729                                  	; MSDOS 6.0
  2730                                  ;	dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  2731                                  ;BioDataSeg:
  2732                                  ;	dw	0070h		; Bios data segment fixed at 70h
  2733                                  
  2734                                  	; MSDOS 3.3
  2735 00000003 0000                    	dw	0
  2736 00000005 00                      	db	0 ; 12/08/2018
  2737 00000006 42554720                	db	"BUG "
  2738 0000000A 0000                    	dw	0
  2739 0000000C 0000                    	dw	0
  2740                                  
  2741                                  ;============================================================================
  2742                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
  2743                                  ;============================================================================
  2744                                  ; 16/07/2018 - Retro DOS 3.0	
  2745                                  
  2746                                  	; MSDOS 3.3
  2747                                  MYNUM:			; Offset 000Eh
  2748 0000000E 0000                    	dw	0	
  2749                                  FCBLRU: 
  2750 00000010 0000                    	dw	0
  2751                                  OpenLRU:
  2752 00000012 0000                    	dw	0
  2753                                  OEM_HANDLER: 		; Pointer to OEM handler code	
  2754 00000014 FFFFFFFF                	dd	-1
  2755                                  LeaveAddr:
  2756                                  	;dd	LeaveDOS
  2757 00000018 [BC15]                  	dw	LeaveDOS ; 12/08/2018
  2758                                  RetryCount:		; Share retries
  2759 0000001A 0300                    	dw	3
  2760                                  RetryLoop:
  2761 0000001C 0100                    	dw	1
  2762                                  LastBuffer:
  2763 0000001E FFFFFFFF                	dd	-1	; Buffer queue recency pointer
  2764                                  CONTPOS:
  2765 00000022 0000                    	dw	0	; location in buffer of next read
  2766                                  arena_head:
  2767 00000024 0000                    	dw	0	; Segment # of first arena in memory
  2768                                  
  2769                                  ;; 16/07/2018
  2770                                  ;;****************************************************************************
  2771                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
  2772                                  ;;****************************************************************************
  2773                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
  2774                                  ;;
  2775                                  ;;	AH = 52h
  2776                                  ;;
  2777                                  ;;	on return:
  2778                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
  2779                                  ;;		Known "invars" fields follow (varies with DOS version):
  2780                                  ;;
  2781                                  ;;	Offset Size		 Description
  2782                                  ;;
  2783                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
  2784                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
  2785                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
  2786                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
  2787                                  ;;		      0 indicates no unread input (DOS 3.x)
  2788                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
  2789                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
  2790                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
  2791                                  ;;	  08   dword  pointer to $CLOCK device driver
  2792                                  ;;	  0C   dword  pointer to CON device driver
  2793                                  ;;	  10   byte   number of logical drives in system
  2794                                  ;;	  11   word   maximum bytes/block of any block device
  2795                                  ;;	  13   dword  pointer to DOS cache buffer header
  2796                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
  2797                                  ;;		      point to the next device in device chain
  2798                                  ;;
  2799                                  ;;****************************************************************************
  2800                                  
  2801                                  ; The following block of data is used by SYSINIT.  Do not change the order or
  2802                                  ; size of this block
  2803                                  
  2804                                  
  2805                                  ; The following block of data is used by SYSINIT. 
  2806                                  ; Do not change the order or size of this block
  2807                                  
  2808                                  ;SYSINITVAR:
  2809                                  SYSINITVARS:
  2810                                  DPBHEAD:
  2811 00000026 00000000                	dd	0	; Pointer to head of DPB-FAT list
  2812                                  SFT_ADDR:
  2813 0000002A [98000000]              	dd	SFTABL	; Pointer to first SFT table
  2814                                  BCLOCK:
  2815 0000002E 00000000                	dd	0	; The CLOCK device
  2816                                  BCON:
  2817 00000032 00000000                	dd	0	; Console device entry points
  2818                                  MAXSEC:
  2819 00000036 8000                    	dw	128	; Maximum allowed sector size
  2820                                  BUFFHEAD:
  2821 00000038 00000000                	dd	0	; Pointer to head of buffer queue
  2822                                  CDSADDR:
  2823 0000003C 00000000                	dd	0	; Pointer to curdir structure table
  2824                                  SFTFCB:
  2825 00000040 00000000                	dd	0	; pointer to FCB cache table
  2826                                  KEEPCOUNT:
  2827 00000044 0000                    	dw	0	; count of FCB opens to keep
  2828                                  NUMIO:
  2829 00000046 00                      	db	0	; Number of disk tables
  2830                                  CDSCOUNT:
  2831 00000047 00                      	db	0	; Number of CDS structures in above
  2832                                  ; A fake header for the NUL device
  2833                                  NULDEV:
  2834 00000048 00000000                	dd	0	; Link to rest of device list
  2835                                  	;dw	8004h
  2836 0000004C 0480                    	dw	DEVTYP | ISNULL	; Null device attributes
  2837 0000004E [2C16]                  	dw	SNULDEV	; Strategy entry point
  2838 00000050 [3216]                  	dw	INULDEV	; Interrupt entry point
  2839 00000052 4E554C2020202020        	db	"NUL     " ; Name of null device
  2840                                  SPLICES:
  2841 0000005A 00                      	db	0	; TRUE => splices being done
  2842                                  
  2843                                  	; MSDOS 6.0 
  2844                                  ;Special_Entries:
  2845                                  ;	dw	0	; address of special entries	;AN000;
  2846                                  ;UU_IFS_DOS_CALL:
  2847                                  ;	dd	0	; entry for IFS DOS service	;AN000;
  2848                                  ;; 
  2849                                  ;; UU_IFS_HEADER:
  2850                                  ;; 	dd	0	; IFS header chain		;AN000;
  2851                                  ;;
  2852                                  ;ChkCopyProt:
  2853                                  ;	dw	0	; M068
  2854                                  ;A20OFF_PSP:
  2855                                  ;	dw	0	; M068
  2856                                  ;BUFFERS_PARM1:
  2857                                  ;	dw	0	; value of BUFFERS= ,m 	;AN000;
  2858                                  ;BUFFERS_PARM2:
  2859                                  ;	dw	0	; value of BUFFERS= ,n 	;AN000
  2860                                  ;BOOTDRIVE:
  2861                                  ;	db	0	; the boot drive	;AN000;
  2862                                  ;DDMOVE:
  2863                                  ;	db	0 	; 1 if we need DWORD move ;AN000;
  2864                                  ;EXT_MEM_SIZE:
  2865                                  ;	dw	0	; extended memory size 	;AN000;
  2866                                  
  2867                                  ;HASHINITVAR: ; LABEL   WORD	; AN000;
  2868                                  ;;
  2869                                  ;; Replaced by next two declarations
  2870                                  ;;
  2871                                  ;;UU_BUF_HASH_PTR:
  2872                                  ;;	dd	0	; buffer Hash table addr
  2873                                  ;;UU_BUF_HASH_COUNT:
  2874                                  ;;	dw	1	; number of Hash entries
  2875                                  ;
  2876                                  ;BufferQueue:
  2877                                  ;	dd	0	; Head of the buffer Queue
  2878                                  ;DirtyBufferCount:
  2879                                  ;	dw	0	; Count of Dirty buffers in the Que
  2880                                  ;			; BUGBUG ---- change to byte
  2881                                  ;SC_CACHE_PTR:
  2882                                  ;	dd	0	; secondary cache pointer
  2883                                  ;SC_CACHE_COUNT:
  2884                                  ;	dw	0 	; secondary cache count
  2885                                  ;BuffInHMA:
  2886                                  ;	db	0	; Flag to indicate that buffs are in HMA
  2887                                  ;LoMemBuff:
  2888                                  ;	dd	0	; Ptr to intermediate buffer
  2889                                  ;			;  in Low mem when buffs are in HMA
  2890                                  ;;
  2891                                  ;; All variables which have UU_ as prefix can be reused for other
  2892                                  ;; purposes and can be renamed. All these variables were used for
  2893                                  ;; EMS support of Buffer Manager. Now they are useless for Buffer
  2894                                  ;; manager ---- MOHANS
  2895                                  ;;
  2896                                  ;
  2897                                  ;	I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
  2898                                  ;UU_BUF_EMS_FIRST_PAGE:	
  2899                                  ;	db	0,0,0	; holds the first page above 640K
  2900                                  ;
  2901                                  ;;	I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
  2902                                  ;;					   ; above 640K
  2903                                  ;;UU_BUF_EMS_NPA640:
  2904                                  ;;	dw	0			
  2905                                  ;
  2906                                  ;CL0FATENTRY:
  2907                                  ;	dw	-1	; M014:	Holds the data that
  2908                                  ;			; is used in pack/unpack rts.
  2909                                  ;			; in fat.asm if cluster 0 is specified.
  2910                                  ;			; SR;
  2911                                  ;IoStatFail:
  2912                                  ;	db	0	; IoStatFail has been added to 
  2913                                  ;			; record a fail on an I24 
  2914                                  ;			; issued from IOFUNC on a status call. 
  2915                                  ;
  2916                                  ;;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
  2917                                  ;;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
  2918                                  ;;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
  2919                                  ;;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
  2920                                  ;;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
  2921                                  ;;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
  2922                                  ;
  2923                                  ;;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
  2924                                  ;						; state of the 	buffers page.
  2925                                  ;						; This one byte is retained to 
  2926                                  ;						; keep the size of this data 
  2927                                  ;						; block the same.;
  2928                                  ;ALLOCMSAVE:
  2929                                  ;	db	0	; M063: temp var. used to 
  2930                                  ;			; M063: save alloc method in
  2931                                  ;			; M063: msproc.asm
  2932                                  ;A20OFF_COUNT:
  2933                                  ;	db	0	; M068: indiactes the # of 
  2934                                  ;			; M068: int 21 calls for 
  2935                                  ;			; M068: which A20 is off
  2936                                  ;DOS_FLAG:
  2937                                  ;	db	0	; see DOSSYM.INC for Bit 
  2938                                  ;			; definitions
  2939                                  ;UNPACK_OFFSET:
  2940                                  ;	dw	0	; saves pointer to the start
  2941                                  ;			; of unpack code in exepatch.
  2942                                  ;			; asm.
  2943                                  ;UMBFLAG:
  2944                                  ;	db	0 	; M003: bit 0 indicates the 
  2945                                  ;			; M003: link state of the UMBs
  2946                                  ;			; M003: whether linked or not 
  2947                                  ;			; M003: to the DOS arena chain
  2948                                  ;SAVE_AX:
  2949                                  ;	dw	0	; M000: temp varibale to store ax
  2950                                  ;			; M000: in msproc.asm
  2951                                  ;UMB_HEAD:
  2952                                  ;	dw	-1	; M000: this is initialized to  
  2953                                  ;			; M000: the first umb arena by 
  2954                                  ;			; M000: BIOS sysinit.
  2955                                  ;START_ARENA:
  2956                                  ;	dw	1	; M000: this is the first arena 
  2957                                  ;			; M000: from which DOS will 
  2958                                  ;			; M000: start its scan for alloc.
  2959                                  
  2960                                  ; End of SYSINITVar block
  2961                                  
  2962                                  ; 16/07/2018
  2963                                  ; MSDOS 3.3 (& MDOS 6.0)
  2964                                  
  2965                                  ;
  2966                                  ; Sharer jump table
  2967                                  ;
  2968                                  
  2969                                  ;PUBLIC	JShare
  2970                                  	;EVEN
  2971 0000005B 90                      align 2
  2972                                  
  2973                                  JShare: ; LABEL	DWORD
  2974 0000005C [B817]0000              		DW	BadCall,0
  2975 00000060 [BC17]0000              MFT_enter	DW	OKCall, 0  ; 1   MFT_enter
  2976 00000064 [BC17]0000              MFTClose	DW	OKCall, 0  ; 2   MFTClose
  2977 00000068 [B817]0000              MFTclU		DW	BadCall,0  ; 3   MFTclU
  2978 0000006C [B817]0000              MFTCloseP	DW	BadCall,0  ; 4   MFTCloseP
  2979 00000070 [B817]0000              MFTCloN		DW	BadCall,0  ; 5   MFTCloN
  2980 00000074 [B817]0000              set_block	DW	BadCall,0  ; 6   set_block
  2981 00000078 [B817]0000              clr_block	DW	BadCall,0  ; 7   clr_block
  2982 0000007C [BC17]0000              chk_block	DW	OKCall, 0  ; 8   chk_block
  2983 00000080 [B817]0000              MFT_get		DW	BadCall,0  ; 9   MFT_get
  2984 00000084 [B817]0000              ShSave		DW	BadCall,0  ; 10  ShSave
  2985 00000088 [B817]0000              ShChk		DW	BadCall,0  ; 11  ShChk
  2986 0000008C [BC17]0000              ShCol		DW	OKCall, 0  ; 12  ShCol
  2987 00000090 [B817]0000              ShCloseFile	DW	BadCall,0  ; 13  ShCloseFile
  2988 00000094 [B817]0000              ShSU		DW	BadCall,0  ; 14  ShSU
  2989                                  
  2990                                  ;============================================================================
  2991                                  ; CONST2.ASM (MSDOS 6.0, 1991)
  2992                                  ;============================================================================
  2993                                  ; 16/07/2018 - Retro DOS 3.0	
  2994                                  
  2995                                  ;Break <Initialized data and data used at DOS initialization>
  2996                                  
  2997                                  ;
  2998                                  ; We need to identify the parts of the data area that are relevant to tasks
  2999                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
  3000                                  ; data will be gathered with the system code.  The process data under 2.x will
  3001                                  ; be available for swapping and under 3.0 it will be allocated per-process.
  3002                                  ;
  3003                                  ; The data that is system data will be identified by [SYSTEM] in the comments
  3004                                  ; describing that data item.
  3005                                  
  3006                                  ;	AsmVars <Debug, Redirector, ShareF>
  3007                                  
  3008                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
  3009                                  
  3010                                  ;
  3011                                  ; Table of routines for assignable devices
  3012                                  ;
  3013                                  ; MSDOS allows assignment if the following standard devices:
  3014                                  ;   stdin  (usually CON input)
  3015                                  ;   stdout (usually CON output)
  3016                                  ;   auxin  (usually AUX input)
  3017                                  ;   auxout (usually AUX output)
  3018                                  ;   stdlpt (usually PRN output)
  3019                                  ;
  3020                                  ; SPECIAL NOTE:
  3021                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
  3022                                  ;   If we're not at end-of-file, then we always say that we have a character.
  3023                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
  3024                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
  3025                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
  3026                                  ;   as EOF).
  3027                                  
  3028                                  ; Default SFTs for boot up
  3029                                  
  3030                                  		;PUBLIC	SFTABL
  3031                                  
  3032                                  SFTABL:	   ; LABEL   DWORD		; file table
  3033 00000098 FFFF                    		DW -1			; link to next table
  3034 0000009A FFFF                    		DW -1			; link seg to next table
  3035 0000009C 0500                    		DW sf_default_number	; Number of entries in table
  3036 0000009E 00<rep 109h>            		times (sf_default_number*sf_entry_size) db 0
  3037                                  
  3038                                  ; the next two variables relate to the position of the logical stdout/stdin
  3039                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
  3040                                  ; console.
  3041                                  
  3042                                  		; Offset 01A7h in IBMDOS.COM (MSDOS 3.3)
  3043 000001A7 00                      CARPOS:		db 0			; cursor position in stdin
  3044 000001A8 00                      STARTPOS:	db 0			; position of cursor at beginning
  3045 000001A9 00<rep 80h>             INBUF:		times 128 db 0		; general device input buffer
  3046 00000229 00<rep 83h>             CONBUF:		times 131 db 0		; The rest of INBUF and console buffer
  3047                                  		; Offset 02ACh in IBMDOS.COM (MSDOS 3.3)
  3048 000002AC 00                      PFLAG:		db 0			; printer echoing flag
  3049 000002AD 00                      VERFLG:		db 0			; Initialize with verify off
  3050 000002AE 03                      CHARCO:		db 00000011b		; Allows statchks every 4 chars...
  3051                                  switch_character:
  3052 000002AF 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
  3053 000002B0 00                      AllocMethod:	db 0			; how to alloc first(best)last
  3054 000002B1 00                      fShare:		db 0			; TRUE => sharing installed
  3055 000002B2 01                      DIFFNAM:	db 1			; Indicates when MYNAME has changed                                        ; of buffered input call
  3056 000002B3 20<rep 10h>             MYNAME:		times 16 db 20h		; My network name
  3057                                  
  3058                                  ;
  3059                                  ; The following table is a list of addresses that the sharer patches to be
  3060                                  ; PUSH AX to enable the critical sections
  3061                                  ;
  3062                                  		; Offset 02C3h in IBMDOS.COM (MSDOS 3.3)
  3063                                  
  3064                                  ;PUBLIC	CritPatch
  3065                                  
  3066                                  CritPatch:	; LABEL WORD
  3067                                  
  3068                                  ;IRP sect,<critDisk,critDevice>
  3069                                  
  3070                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
  3071                                  ;
  3072                                  ;SR; Change code patch address to a variable in data segment
  3073                                  ;
  3074                                  ;       dw OFFSET DOSDATA: redir_patch
  3075                                  ;       dw OFFSET DOSDATA: redir_patch
  3076                                  ;
  3077                                  ;;hkn	Short_Addr  E&sect
  3078                                  ;;hkn	Short_Addr  L&sect
  3079                                  ;
  3080                                  ;ELSE
  3081                                  ;	DW	0
  3082                                  ;	DW	0
  3083                                  ;ENDIF
  3084                                  ;ENDM
  3085                                  ;	DW	0
  3086                                  
  3087                                  	; 16/07/2018 - Retro DOS v3.0
  3088                                  	; IBMDOS.COM (MSDOS 3.3), offset 02C3h
  3089                                   
  3090 000002C3 [6520]                  	dw 	EcritDisk
  3091 000002C5 [6D20]                  	dw 	LcritDisk			
  3092 000002C7 [7520]                  	dw	EcritDevice
  3093 000002C9 [7D20]                  	dw 	LcritDevice
  3094                                  
  3095 000002CB 0000                    	dw	0
  3096                                  
  3097                                  ;
  3098                                  ; WARNING!!!  PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
  3099                                  ; Also, IBM server 1.0 requires this also.
  3100                                  ;
  3101                                  	;EVEN			; Force swap area to start on word boundry
  3102 000002CD 90                      align 2
  3103                                  	;PUBLIC	SWAP_START
  3104                                  SWAP_START:	; LABEL BYTE
  3105 000002CE 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
  3106 000002CF 00                      INDOS:		db 0		; DOS status for interrupt processing
  3107 000002D0 FF                      WPERR:		db -1		; Write protect error flag
  3108 000002D1 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
  3109 000002D2 0000                    EXTERR:		dw 0		; Extended Error code
  3110                                  
  3111                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
  3112 000002D4 00                      EXTERR_ACTION:	db 0		; Extended Error Action
  3113 000002D5 00                      EXTERR_CLASS:	db 0		; Extended Error Class
  3114                                  ; end warning
  3115                                   
  3116 000002D6 00000000                EXTERRPT:	dd 0		; Extended Error pointer
  3117                                  
  3118 000002DA 8000                    DMAADD:		dw 80H		; User's disk transfer address (disp/seg)
  3119 000002DC 0000                                    dw 0	
  3120 000002DE 0000                    CurrentPDB:	dw 0		; Current process identifier
  3121 000002E0 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
  3122 000002E2 0000                    exit_code:	dw 0		; exit code of last proc.
  3123 000002E4 00                      CURDRV:		db 0		; Default drive (init A)
  3124 000002E5 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
  3125                                  ;				; F.C. 2/17/86
  3126                                  ;CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
  3127                                  ;CPSWSAVE:	db 0		; copy of above in case of ABORT
  3128                                  SWAP_ALWAYS:	; 05/08/2018
  3129 000002E6 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
  3130                                  				;   extended error type stuff.
  3131                                  				;   NOTE: does not have Correct value on
  3132                                  				;   1-12, OEM, Get/Set CurrentPDB,
  3133                                  				;   GetExtendedError system calls)
  3134 000002E8 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
  3135 000002EA 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
  3136 000002EC 0000                    FirstArena:	dw 0		; first free block found
  3137 000002EE 0000                    BestArena:	dw 0		; best free block found
  3138 000002F0 0000                    LastArena:	dw 0		; last free block found
  3139 000002F2 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
  3140 000002F4 0000                    LASTENT:	dw 0		; Last entry for directory search
  3141 000002F6 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
  3142 000002F7 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
  3143 000002F8 00                      NoSetDir:	db 0		; true -> do not set directory
  3144 000002F9 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
  3145 000002FA 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
  3146                                  
  3147                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
  3148                                  	;EVEN
  3149 000002FB 90                      align 2
  3150                                  	; Offset 02FCh in IBMDOS.COM (MSDOS 3.3); 
  3151 000002FC 00                      DAY:		db 0		; Day of month
  3152 000002FD 00                      MONTH:		db 0		; Month of year
  3153 000002FE 0000                    YEAR:		dw 0		; Year (with century)
  3154 00000300 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
  3155 00000302 00                      WEEKDAY:	db 0		; Day of week
  3156                                  ; end warning
  3157                                  
  3158 00000303 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
  3159 00000304 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
  3160 00000305 00                      fAborting:	db 0		; TRUE => abort in progress
  3161                                  
  3162                                  ; Combination of all device call parameters
  3163                                  	;PUBLIC	DEVCALL 	;
  3164                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
  3165                                  DEVCALL: ; 08/08/2018
  3166 00000306 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
  3167 00000307 00                      DEVCALL_REQUNIT: db 0		;Device unit number
  3168 00000308 00                      DEVCALL_REQFUNC: db 0		;Type of request
  3169 00000309 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
  3170 0000030B 00<rep 8h>                       times 8 db 0		;Reserved for queue links
  3171                                  
  3172                                  	;PUBLIC	CALLUNIT
  3173                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
  3174                                  CALLFLSH: ; LABEL   WORD	;
  3175 00000313 00                      CALLMED:	db 0		; media byte
  3176                                  CALLBR:	  ; LABEL   DWORD	;
  3177                                  	;PUBLIC	CALLXAD 	;
  3178                                  CALLXAD:  ; LABEL   DWORD	;
  3179 00000314 00                      CALLRBYT:	db 0		;
  3180                                  	;PUBLIC	CALLVIDM	;
  3181                                  CALLVIDM: ; LABEL   DWORD	;
  3182 00000315 00<rep 3h>              	times 3 db 0	;
  3183                                  	;PUBLIC CallBPB		;
  3184                                  CALLBPB:  ; LABEL   DWORD	;
  3185                                  CALLSCNT:			;
  3186 00000318 0000                    		dw 0		;
  3187                                  	;PUBLIC	CALLSSEC	;
  3188                                  CALLSSEC: ; LABEL   WORD	;
  3189 0000031A 0000                    		dw 0		;
  3190 0000031C 00000000                CALLVIDRW:	dd 0		;
  3191                                  ;*MSDOS 6.0
  3192                                  ;*CALLNEWSC:	dd 0		; starting sector for >32mb
  3193 00000320 00000000                CALLDEVAD:	dd 0		; stash for device entry point
  3194                                  
  3195                                  ; Same as above for I/O calls	;
  3196                                  				;
  3197                                  	;PUBLIC	IOCall		;
  3198                                  ;IOCALL	SRHEAD	<>		;
  3199                                  IOCALL:	; 07/08/2018
  3200 00000324 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
  3201 00000325 00                      IOCALL_REQUNIT:	db 0		;Device unit number
  3202 00000326 00                      IOCALL_REQFUNC: db 0		;Type of request
  3203 00000327 0000                    IOCALL_REQSTAT: dw 0		;Status Word
  3204 00000329 00<rep 8h>              	times 8	db 0		;Reserved for queue links
  3205                                  IOFLSH:	  ; LABEL   WORD	;
  3206                                          ;PUBLIC  IORCHR		;
  3207                                  IORCHR:	  ; LABEL   BYTE	;
  3208 00000331 00                      IOMED:		db 0		;
  3209 00000332 00000000                IOXAD:		dd 0		;
  3210 00000336 0000                    IOSCNT:		dw 0		;	
  3211 00000338 0000                    IOSSEC:		dw 0		;
  3212                                  
  3213                                  ; Call struct for DSKSTATCHK	;
  3214 0000033A 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
  3215 0000033B 00                      		db 0
  3216 0000033C 05                      DSKSTCOM:	db DEVRDND	; = 5
  3217 0000033D 0000                    DSKSTST:	dw 0		;
  3218 0000033F 00<rep 8h>              	times 8	db 0		;
  3219 00000347 00                      DSKCHRET:	db 0		;
  3220                                  
  3221                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
  3222                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
  3223                                  ;hkn   short_addr  DEVIOBUF	;
  3224                                  	
  3225 00000348 [5E03]                  DEVIOBUF_PTR	dw DEVIOBUF
  3226 0000034A 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
  3227 0000034C 0100                    DSKSTCNT:	dw 1		;
  3228 0000034E 0000                    		dw 0		;
  3229                                  
  3230 00000350 00                      CreatePDB:	db 0		; flag for creating a process
  3231                                  
  3232                                  ;* MSDOS 6.0
  3233                                  ;*	;PUBLIC	Lock_Buffer	;
  3234                                  ;*Lock_Buffer: ; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
  3235                                  ;*	    	dd 0		;MS. position
  3236                                  ;*	 	dd 0		;MS. length
  3237                                  
  3238                                  ;hkn; the foll. was moved from dosmes.asm.
  3239                                  
  3240                                  	;EVEN
  3241 00000351 90                      align 2				; needed to maintain offsets
  3242                                  
  3243                                  	; Offset 0352h in IBMDOS.COM (MSDOS 3.3)
  3244                                  	;PUBLIC  UserNum, OEMNum
  3245                                  USERNUM:
  3246 00000352 0000                     		dw 0		; 24 bit user number
  3247 00000354 00                      		db 0
  3248                                  ;IF IBM
  3249                                  ;IF IBMCOPYRIGHT
  3250 00000355 00                      OEMNUM:		DB 0		; 8 bit OEM number
  3251                                  ;ELSE
  3252                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
  3253                                  ;ENDIF
  3254                                  ;ELSE
  3255                                  ;OEMNUM:	DB 0FFh
  3256                                  ;ENDIF
  3257                                  
  3258                                  ; 17/07/2018
  3259                                  ;----------------------------------------------------------------------------
  3260                                  ; (MSDOS 3.3, DOSMES.INC, 1987)
  3261                                  
  3262                                  ; The next variable points to the country table for the current country
  3263                                  ;	(the table returned by the AL=0 INTERNATIONAL call).
  3264                                  
  3265 00000356 [E40F]                  CurrentCounry:	dw USTABLE			
  3266                                  
  3267                                  
  3268                                  ;DOSDATA ENDS
  3269                                  
  3270                                  ;----------------------------------------------------------------------------
  3271                                  
  3272                                  ; 16/07/2018 - Retro DOS v3.0
  3273                                  
  3274                                  align 2
  3275                                  
  3276                                  DATASEGMENT EQU $ ; 17/04/2018
  3277                                  
  3278                                  ;============================================================================
  3279                                  ; MSINIT.ASM
  3280                                  ;============================================================================
  3281                                  ; 16/07/2018 - Retro DOS v3.0
  3282                                  ;	      (MSINIT code order/reference: MSDOS 3.3, IBMDOS.COM, 1987)
  3283                                  	
  3284                                  ; 15/04/2018 - Retro DOS v2.0 (DATA adaption for NASM)
  3285                                  
  3286                                  ; TITLE MSINIT.ASM -- MS-DOS INITIALIZATION CODE
  3287                                  
  3288                                  ;       ORG     0                       ; reset to beginning of data segment
  3289                                  ; Init code below overlaps with data area
  3290                                  
  3291                                  	
  3292                                  	; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  3293                                  
  3294                                  ;INITBLOCK DB    110H DUP(0)     ; Allow for segment round up
  3295 00000358 00<rep 110h>            INITBLOCK:	TIMES 272 DB 0
  3296                                  
  3297                                  	; Offset 0468h in IBMDOS.COM (MSDOS 3.3)
  3298                                  
  3299 00000468 0000                    INITSP:		DW 0
  3300 0000046A 0000                    INITSS:		DW 0
  3301                                  ;BUFFSTRT:	DW 0
  3302                                  
  3303                                  	; Offset 046Ch in IBMDOS.COM (MSDOS 3.3)	
  3304                                  
  3305                                  ;ASSUME  CS:DOSGROUP,DS:DOSGROUP,ES:DOSGROUP,SS:NOTHING
  3306                                  ;
  3307                                  ;        EXTRN   QUIT:NEAR,IRET:NEAR,ABSDRD:FAR,ABSDWRT:FAR
  3308                                  ;        EXTRN   COMMAND:NEAR,CALL_ENTRY:NEAR
  3309                                  ;        IF      NOT IBM
  3310                                  ;        EXTRN   HEADER:BYTE
  3311                                  ;        ENDIF
  3312                                  
  3313                                  MOVDPB:
  3314                                  	; 08/07/2018 - Retro DOS v3.0
  3315                                  ; This section of code is safe from being overwritten by block move
  3316                                          ;MOV     SP,[CS:INITSP]
  3317                                          ;MOV     SS,[CS:INITSS]
  3318                                          ; 30/03/2018
  3319 0000046C 8B26[6804]              	MOV     SP,[INITSP]
  3320 00000470 8E16[6A04]                      MOV     SS,[INITSS]
  3321 00000474 F3A4                    	REP     MOVSB
  3322 00000476 FC                              CLD
  3323                                          ; 15/07/2018
  3324                                  	;MOV	[ES:DMAADD+2],DX
  3325 00000477 8916[DC02]              	MOV	[DMAADD+2],DX
  3326 0000047B 8B36[2600]                      MOV     SI,[DPBHEAD]	; Address of first DPB
  3327                                  	;MOV	[ES:DPBHEAD+2],ES
  3328 0000047F 8C06[2800]                      MOV	[DPBHEAD+2],ES
  3329                                  	;MOV	[ES:SFT_ADDR+2],ES
  3330 00000483 8C06[2C00]              	MOV     [SFT_ADDR+2],ES
  3331 00000487 8A0E[4600]                      MOV     CL,[NUMIO]	; Number of DPBs
  3332 0000048B 30ED                            XOR     CH,CH
  3333                                  SETFINDPB:
  3334 0000048D 268C441A                        MOV     [ES:SI+1AH],ES
  3335 00000491 26C64417FF                      MOV     BYTE [ES:SI+17H],-1  ; Never accessed before
  3336 00000496 83C620                          ADD     SI,DPBSIZ ; 32	; Point to next DPB
  3337 00000499 E2F2                            LOOP    SETFINDPB
  3338 0000049B 83EE20                          SUB     SI,DPBSIZ ; sub si,32
  3339 0000049E 26C7441AFFFF                    MOV     WORD [ES:SI+1AH],-1
  3340                                          ; 15/07/2018 - Retro DOS v3.0
  3341                                  	;; MSDOS 2.11
  3342                                          ;MOV	DI,[BUFFSTRT]		; Set up one default buffer
  3343                                  	;MOV	[ES:BUFFHEAD+2],ES
  3344                                          ;MOV	[ES:BUFFHEAD],DI
  3345                                  	; MSDOS 3.3
  3346 000004A4 06                      	push	es ; *
  3347 000004A5 BF[8F73]                	mov	di,SYSBUF+15 
  3348 000004A8 D1DF                    	rcr	di,1
  3349 000004AA D1EF                    	shr	di,1
  3350 000004AC D1EF                    	shr	di,1
  3351 000004AE D1EF                    	shr	di,1
  3352 000004B0 8CC0                    	mov	ax,es
  3353 000004B2 01F8                    	add	ax,di
  3354 000004B4 8EC0                    	mov	es,ax
  3355 000004B6 31FF                    	xor	di,di
  3356 000004B8 8C06[3A00]              	mov     [BUFFHEAD+2],es
  3357 000004BC 893E[3800]              	mov     [BUFFHEAD],di
  3358                                  	;	
  3359 000004C0 26C74504FF00                    MOV     WORD [ES:DI+4],00FFH
  3360 000004C6 26C705FFFF                      MOV     WORD [ES:DI],-1
  3361 000004CB 26C74502FFFF                    MOV     WORD [ES:DI+2],-1
  3362 000004D1 07                      	pop	es; * ; 15/07/2018
  3363 000004D2 06                              PUSH    ES
  3364 000004D3 42                              INC     DX			; Leave enough room for the ARENA
  3365 000004D4 8B36[F202]              	mov	si,[ENDMEM] ; 15/07/2018
  3366                                  
  3367                                  	; 11/08/2018 - Retro DOS v3.0
  3368                                          ;invoke _$DUP_PDB		; create jfns and set CurrentPDB
  3369 000004D8 E85119                  	CALL	_$DUP_PDB
  3370 000004DB 07                              POP	ES
  3371                                  ;
  3372                                  ; set up memory arena
  3373                                  ;SPECIAL NOTE FOR HIGHMEM VERSION
  3374                                  ; At this point a process header has been built where the start of the 
  3375                                  ; CONSTANTS segment as refed by CS is. From this point until the return 
  3376                                  ; below be careful about references off of CS.
  3377                                  ;
  3378                                  	; 13/04/2018 ; *
  3379                                          ;PUSH	AX ; *
  3380                                          ;MOV	AX,[CurrentPDB]
  3381 000004DC 2EA1[DE02]                      MOV	AX,[CS:CurrentPDB] ; 15/03/2018
  3382 000004E0 26A3[DE02]              	MOV     [ES:CurrentPDB],AX	; Put it in the REAL location
  3383 000004E4 26C606[5003]00                  MOV     BYTE [ES:CreatePDB],0	; reset flag in REAL location
  3384 000004EA 48                              DEC     AX
  3385 000004EB 26A3[2400]                      MOV     [ES:arena_head],AX
  3386 000004EF 1E                              PUSH    DS
  3387 000004F0 8ED8                            MOV     DS,AX
  3388 000004F2 C60600005A                      MOV     BYTE [ARENA.SIGNATURE],arena_signature_end
  3389 000004F7 C70601000000                    MOV     WORD [ARENA.OWNER],arena_owner_system
  3390 000004FD 262B06[F202]                    SUB     AX,[ES:ENDMEM]
  3391 00000502 F7D8                            NEG     AX
  3392 00000504 48                              DEC     AX
  3393 00000505 A30300                          MOV     [ARENA.SIZE],AX
  3394 00000508 1F                              POP     DS
  3395                                          ;POP	AX ; *
  3396                                  
  3397 00000509 BF[9E00]                        MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
  3398                                  	; 15/07/2018
  3399 0000050C B80300                          MOV     AX,3
  3400 0000050F AB                              STOSW		; Adjust Refcount
  3401                                  	;MOV	DI,SYSINITVAR	; 16/03/2018 (Retro DOS v2.0)
  3402 00000510 BF[3B0F]                	MOV     DI,SysInitTable ; 15/07/2018 (Retro DOS v3.0)
  3403 00000513 CB                              RETF
  3404                                  	
  3405                                  	; 18/04/2018
  3406                                  FILL1	equ	$ - DATASEGMENT
  3407                                  ; ---------------------------------------------------------------------------
  3408                                  ; 16/07/2018 - Retro DOS v3.0
  3409 00000514 00<rep 2Eh>             	times (490-FILL1) db 0	; *!!!*
  3410                                  
  3411                                  ;============================================================================
  3412                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)  (2)
  3413                                  ;============================================================================
  3414                                  ; 16/07/2018 - Retro DOS 3.0	
  3415                                  
  3416                                  ;  MS_DATA.ASM (MSDOS 6.0, 1991) (1) ... $$$
  3417                                   
  3418                                  ; (continues from 'SFN' ..) - from offset 0542h in IBMDOS.COM, 1987 -
  3419                                  
  3420                                  ; DATASEGMENT + 490
  3421                                  
  3422                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  3423                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  3424                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  3425                                  ;       I_am    WFP_START,WORD          ;
  3426                                  ;       I_am    REN_WFP,WORD            ;
  3427                                  ;       I_am    CURR_DIR_END,WORD       ;
  3428                                  ;       I_am    NEXTADD,WORD            ;
  3429                                  ;       I_am    LASTPOS,WORD            ;
  3430                                  ;       I_am    CLUSNUM,WORD            ;
  3431                                  ; MSDOS 3.3
  3432                                  ;	I_am	DIRSEC,WORD
  3433                                  ;; MSDOS 6.0
  3434                                  ;;      I_am    DIRSEC,DWORD            ;>32mb		; AC0000
  3435                                  ;       I_am    DIRSTART,WORD           ;
  3436                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  3437                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  3438                                  ;                                       ; sectors
  3439                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  3440                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  3441                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  3442                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  3443                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  3444                                  
  3445 00000542 FFFF                    SFN:		dw -1
  3446 00000544 0000                    JFN:		dw 0
  3447 00000546 00000000                PJFN:		dd 0
  3448 0000054A 0000                    WFP_START: 	dw 0
  3449 0000054C 0000                    REN_WFP: 	dw 0
  3450 0000054E 0000                    CURR_DIR_END: 	dw 0
  3451 00000550 0000                    NEXTADD: 	dw 0
  3452 00000552 0000                    LASTPOS: 	dw 0
  3453 00000554 0000                    CLUSNUM: 	dw 0
  3454                                  ; MSDOS 3.3
  3455 00000556 0000                    DIRSEC: 	dw 0
  3456                                  ; MSDOS 6.0
  3457                                  ;DIRSEC:	dd 0
  3458 00000558 0000                    DIRSTART: 	dw 0
  3459                                  ; MSDOS 3.3
  3460 0000055A 0000                    SECPOS: 	dw 0
  3461                                  ; MSDOS 6.0
  3462                                  ;SECPOS: 	dd 0
  3463                                  ; MSDOS 3.3
  3464 0000055C 0000                    VALSEC: 	dw 0
  3465                                  ; MSDOS 6.0
  3466                                  ;VALSEC: 	dd 0
  3467 0000055E 0000                    BYTSECPOS: 	dw 0
  3468 00000560 00000000                BYTPOS:		dd 0
  3469 00000564 0000                    BYTCNT1: 	dw 0
  3470 00000566 0000                    BYTCNT2: 	dw 0
  3471 00000568 0000                    SECCNT: 	dw 0
  3472                                  
  3473                                  	; Offset 056Ah in IBMDOS.COM (MSDOS 3.3)
  3474                                  ; DATASEGMENT + 530 (in Retro DOS v3.0)
  3475                                  
  3476                                  ;       I_am    ENTFREE,WORD            ;
  3477                                  ;       I_am    ENTLAST,WORD            ;
  3478                                  ;       I_am    NXTCLUSNUM,WORD         ;
  3479                                  ;       I_am    GROWCNT,DWORD           ;
  3480                                  ;       I_am    CURBUF,DWORD            ;
  3481                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  3482                                  ;       I_am    SAVEBX,WORD             ;
  3483                                  ;       I_am    SAVEDS,WORD             ;
  3484                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  3485                                  ;       I_am    NSS,WORD
  3486                                  ;       I_am    NSP,WORD
  3487                                  
  3488 0000056A 0000                    ENTFREE:	dw 0
  3489 0000056C 0000                    ENTLAST:	dw 0
  3490 0000056E 0000                    NXTCLUSNUM:	dw 0
  3491 00000570 00000000                GROWCNT:	dd 0
  3492 00000574 00000000                CURBUF:		dd 0
  3493 00000578 00000000                CONSFT:		dd 0
  3494 0000057C 0000                    SAVEBX:		dw 0
  3495 0000057E 0000                    SAVEDS:		dw 0
  3496 00000580 0000                    RESTORE_TMP:	dw 0
  3497 00000582 0000                    NSS:		dw 0
  3498 00000584 0000                    NSP:		dw 0	 ; Offset 0584h in IBMDOS.COM (MSDOS 3.3)
  3499                                  
  3500                                  ; DATASEGMENT+558 :  ; *!!!*
  3501                                  	; Here is offset 0586h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  3502                                  
  3503                                  ; MSDOS 6.0
  3504                                  ;       I_am    EXTOPEN_FLAG,WORD,<0>   ;FT. extended open input flag       ;AN000;
  3505                                  ;       I_am    EXTOPEN_ON,BYTE,<0>     ;FT. extended open conditional flag ;AN000;
  3506                                  ;       I_am    EXTOPEN_IO_MODE,WORD,<0>;FT. extended open io mode          ;AN000;
  3507                                  ;       I_am    SAVE_DI,WORD            ;FT. extended open saved DI         ;AN000;
  3508                                  ;       I_am    SAVE_ES,WORD            ;FT. extended open saved ES         ;AN000;
  3509                                  ;       I_am    SAVE_DX,WORD            ;FT. extended open saved DX         ;AN000;
  3510                                  ;       I_am    SAVE_CX,WORD            ;FT. extended open saved CX         ;AN000;
  3511                                  ;       I_am    SAVE_BX,WORD            ;FT. extended open saved BX         ;AN000;
  3512                                  ;       I_am    SAVE_SI,WORD            ;FT. extended open saved SI         ;AN000;
  3513                                  ;       I_am    SAVE_DS,WORD            ;FT. extended open saved DS         ;AN000;
  3514                                  
  3515                                  ;	HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
  3516                                  ;	we used to just pass 16 bits in a register.  Now High_SECTOR holds
  3517                                  ;	the high 16, the low 16 are still in the register.
  3518                                  ;
  3519                                  ;       I_am    HIGH_SECTOR,WORD,<0>    ;>32mb higher sector #		    ;AN000;
  3520                                  ;
  3521                                  ;       ;I_am    UU_HIGH_SECTOR_TEMP,WORD,<0> ;M019: Unused
  3522                                  ;       I_am    OffsetMagicPatch,WORD,<offset MagicPatch> ;scottq 8/6/92
  3523                                  ;                                                         ;see dos\mpatch.asm
  3524                                  ;
  3525                                  ;       I_am    DISK_FULL,BYTE          ;>32mb indicating disk full when 1  ;AN000;
  3526                                  ;       I_am    TEMP_VAR,WORD           ; temporary variable for everyone   ;AN000;
  3527                                  ;       I_am    TEMP_VAR2,WORD          ; temporary variable 2 for everyone ;AN000;
  3528                                  ;       I_am    DrvErr,BYTE             ; used to save drive error          ;AN000;
  3529                                  ;       I_am    DOS34_FLAG,WORD,<0>     ; common flag for DOS 3.4           ;AN000;
  3530                                  ;       I_am    NO_FILTER_PATH,DWORD    ; pointer to orignal path           ;AN000;
  3531                                  ;       I_am    NO_FILTER_DPATH,DWORD   ; pointer to orignal path of destination;AN000;
  3532                                  ;; M008
  3533                                  ;       I_am   AbsRdWr_SS,WORD         ; INT 25/26 user stack segment
  3534                                  ;       I_am   AbsRdWr_SP,WORD         ; INT 25/26 user stack offset
  3535                                  ;       I_am   UU_Callback_flag,BYTE,<0>  ; Unused
  3536                                  ;; M008
  3537                                   
  3538                                  ; make those pushes fast!!!
  3539                                  	;.EVEN
  3540                                  align 2
  3541                                  
  3542                                  ; MSDOS 3.3 ($ MSDOS 6.0)
  3543                                  StackSize equ 180h			; gross but effective
  3544                                  
  3545                                  ;;;StackSize = 300h			; This is a "trial" change IBM hasn't
  3546                                  ;;;					; made up their minds about
  3547                                   
  3548                                  ;
  3549                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
  3550                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
  3551                                  ;
  3552                                   
  3553                                          ;PUBLIC  RENAMEDMA,AuxStack,DskStack,IOStack
  3554                                  RENAMEDMA:  ; LABEL   BYTE		; See DOS_RENAME
  3555                                  	;DB	StackSize DUP (?)       ;
  3556 00000586 00<rep 180h>            	times	StackSize db 0
  3557                                  
  3558                                  AUXSTACK:   ; LABEL   BYTE		;  Offset 0706h in IBMDOS.COM, 1987
  3559                                   	;DB	StackSize DUP (?)       ;
  3560 00000706 00<rep 180h>            	times	StackSize db 0
  3561                                  DSKSTACK:   ; LABEL   BYTE		;  Offset 0886h in IBMDOS.COM, 1987
  3562                                   	;DB	StackSize DUP (?)       ;
  3563 00000886 00<rep 180h>            	times	StackSize db 0
  3564                                  IOSTACK:    ; LABEL   BYTE		;  Offset 0A06h in IBMDOS.COM, 1987
  3565                                   
  3566                                  ; patch space for Boca folks.
  3567                                  ; Say What????!!! This does NOT go into the swappable area!
  3568                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
  3569                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
  3570                                   
  3571                                  ;PUBLIC  IBMPATCH
  3572                                  ;IBMPATCH label byte
  3573                                  ;	I_am    PRINTER_FLAG,BYTE,<0>   ; status of PRINT utility
  3574                                  ;	I_am    VOLCHNG_FLAG,BYTE,<0>   ; true if volume label created
  3575                                  ;	I_am    VIRTUAL_OPEN,BYTE,<0>   ; non-zero if we opened a virtual file
  3576                                  
  3577                                  IBMPATCH:
  3578 00000A06 00                      PRINTER_FLAG:	db 0
  3579 00000A07 00                      VOLCHNG_FLAG:	db 0
  3580 00000A08 00                      VIRTUAL_OPEN:	db 0
  3581                                  
  3582                                  ; MSDOS 6.0
  3583                                  ;; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
  3584                                  ;      I_am     FSeek_drive,BYTE        ;AN000; fastseek drive #
  3585                                  ;      I_am     FSeek_firclus,WORD      ;AN000; fastseek first cluster #
  3586                                  ;      I_am     FSeek_logclus,WORD      ;AN000; fastseek logical cluster #
  3587                                  ;      I_am     FSeek_logsave,WORD      ;AN000; fastseek returned log clus #
  3588                                  ;      I_am     UU_ACT_PAGE,WORD,<-1>   ;;;;;;; ;BL ; active EMS page ;AN000;
  3589                                  ;      I_am     TEMP_DOSLOC,WORD,<-1>   ;stores the temporary location of dos
  3590                                  					;at SYSINIT time.
  3591                                  ;SWAP_END LABEL   BYTE
  3592                                  ;PUBLIC  SWAP_END
  3593                                  
  3594                                  SWAP_END:
  3595                                   
  3596                                  ;; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
  3597                                  ;;   BE USED. If the size of the swap data area is ODD, it will be rounded up
  3598                                  ;;   to include this byte.
  3599                                  ;       DB      ?
  3600                                  
  3601 00000A09 00                      	db	0
  3602                                   
  3603                                  ;;hkn;	DB      (512+80+32-(SWAP_END-ibmpatch)) DUP (?)
  3604                                  
  3605                                  ;DOSDATA    ENDS
  3606                                  
  3607                                  ; 08/09/2018
  3608 00000A0A 00<rep 243h>            	times 579 db 0
  3609                                  
  3610                                  ;12/08/2018 - Retro DOS v3.0
  3611                                  ;15/07/2018
  3612                                  ;============================================================================
  3613                                  ; 	Retro DOS v3.0
  3614                                  ;============================================================================
  3615 00000C4D 00                      	db 	0
  3616                                  RETRODOSMSG:
  3617 00000C4E 0D0A                    	db	13,10
  3618                                  	;;;db	"Retro DOS v3.0 by Erdogan Tan [2018]"
  3619                                  	;;db	"Retro DOS v3.1 by Erdogan Tan [2019]" ; 29/06/2019
  3620                                  	;db	"Retro DOS v3.1 by Erdogan Tan [2019-2022]" ; 22/11/2022
  3621 00000C50 526574726F20444F53-     	db	"Retro DOS v3.1 by Erdogan Tan [2019-2024]" ; 16/01/2024
  3621 00000C59 2076332E3120627920-
  3621 00000C62 4572646F67616E2054-
  3621 00000C6B 616E205B323031392D-
  3621 00000C74 323032345D         
  3622 00000C79 0D0A2400                	db	13,10,"$", 0 
  3623                                  
  3624                                  ;============================================================================
  3625                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3626                                  ;============================================================================
  3627                                  ; 16/07/2018 - Retro DOS 3.0
  3628                                  
  3629                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3630                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3631 00000C7D 03                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3632 00000C7E 1E                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3633                                  
  3634                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3635                                  ;        I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3636                                  ;        I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3637                                  
  3638                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3639                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3640                                  ;
  3641                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3642                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3643                                  
  3644                                  ; Days in year
  3645                                  
  3646                                  YRTAB:   
  3647 00000C7F C8A6                    	DB	200,166			; Leap year
  3648 00000C81 C8A5                    	DB	200,165
  3649 00000C83 C8A5                    	DB	200,165
  3650 00000C85 C8A5                    	DB	200,165
  3651                                  
  3652                                  ; Days of each month
  3653                                  
  3654                                  MONTAB:        
  3655 00000C87 1F                      	DB      31                      ; January
  3656                                  february:
  3657 00000C88 1C                      	DB	28 			; February--reset each 
  3658                                  					; time year changes
  3659 00000C89 1F                              DB      31                      ; March
  3660 00000C8A 1E                              DB      30                      ; April
  3661 00000C8B 1F                              DB      31                      ; May
  3662 00000C8C 1E                              DB      30                      ; June
  3663 00000C8D 1F                              DB      31                      ; July
  3664 00000C8E 1F                              DB      31                      ; August
  3665 00000C8F 1E                              DB      30                      ; September
  3666 00000C90 1F                              DB      31                      ; October
  3667 00000C91 1E                              DB      30                      ; November
  3668 00000C92 1F                              DB      31                      ; December
  3669                                  
  3670                                  ;
  3671                                  ; This is the error code mapping table for INT 21 errors.  This table defines
  3672                                  ; those error codes which are "allowed" for each system call.  If the error
  3673                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3674                                  ; is to return the "real" error via Extended error, and one of the allowed
  3675                                  ; errors on the actual call.
  3676                                  ;
  3677                                  ; The table is organized as follows:
  3678                                  ;
  3679                                  ;    Each entry in the table is of variable size, but the first
  3680                                  ;       two bytes are always:
  3681                                  ;
  3682                                  ;       Call#,Cnt of bytes following this byte
  3683                                  ;
  3684                                  ; EXAMPLE:
  3685                                  ;       Call 61 (OPEN)
  3686                                  ;
  3687                                  ;       DB      61,5,12,3,2,4,5
  3688                                  ;
  3689                                  ;       61 is the AH INT 21 call value for OPEN.
  3690                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3691                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3692                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3693                                  ;       this case 5).  The last value will be the one returned on the call if
  3694                                  ;       the "real" error is not one of the allowed ones.
  3695                                  ;
  3696                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3697                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3698                                  ;   call, so set up an Extended error and leave the current error code alone.
  3699                                  ;
  3700                                  ; The table is terminated by a call value of 0FFh
  3701                                  
  3702                                  ;PUBLIC I21_MAP_E_TAB
  3703                                  	; 10/08/2018
  3704                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3705 00000C93 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3706 00000C97 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3707 00000C9C 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3708 00000CA0 0205                        DB          error_file_not_found,error_access_denied
  3709 00000CA2 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3710 00000CA6 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3711 00000CAA 04                          DB          error_too_many_open_files
  3712 00000CAB 05                          DB          error_access_denied
  3713                                      ; MSDOS 6.0
  3714                                      ;DB  OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3715                                      ;DB          error_too_many_open_files
  3716                                      ;DB          error_not_dos_disk,error_access_denied
  3717                                      ; MSDOS 3.3
  3718 00000CAC 3D0503020C                  DB  OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3719 00000CB1 0405                        DB          error_too_many_open_files,error_access_denied
  3720 00000CB3 3E0106                      DB  CLOSE,1,error_invalid_handle
  3721 00000CB6 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3722 00000CBA 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3723 00000CBE 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3724 00000CC3 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3725 00000CC7 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3726 00000CCC 05                          DB          error_access_denied
  3727 00000CCD 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3728 00000CD2 0605                        DB          error_invalid_handle,error_access_denied
  3729 00000CD4 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3730 00000CD8 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3731                                      ; MSDOS 6.0	
  3732                                      ;DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3733                                      ; MSDOS 3.3	
  3734 00000CDC 47010F                      DB  CURRENT_DIR,1,error_invalid_drive
  3735 00000CDF 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3736 00000CE3 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3737 00000CE7 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3738 00000CEC 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3739 00000CF1 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3740 00000CF4 0805                        DB          error_not_enough_memory,error_access_denied
  3741 00000CF6 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3742 00000CFB 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3743                                      ; MSDOS 6.0
  3744                                      ;DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3745                                      ;DB          error_current_directory,error_access_denied
  3746                                      ; MSDOS 3.3
  3747 00000CFE 5604110302                  DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3748 00000D03 05                          DB          error_access_denied
  3749                                      ; MSDOS 6.0	
  3750                                      ;DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3751                                      ;DB             error_invalid_data,error_invalid_function
  3752                                      ; MSDOS 3.03	
  3753 00000D04 57020601                    DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3754 00000D08 580101                      DB  ALLOCOPER,1,error_invalid_function
  3755 00000D0B 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3756 00000D0F 0405                        DB          error_too_many_open_files,error_access_denied
  3757 00000D11 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3758 00000D15 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3759 00000D18 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3760 00000D1C 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3761 00000D1E 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3762 00000D22 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3763 00000D26 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3764 00000D29 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3765 00000D2D 01                          DB              error_invalid_function
  3766                                      ; MSDOS 6.0		
  3767                                      ;DB	ExtOpen,10
  3768                                      ;DB   error_path_not_found,error_file_not_found,error_invalid_access
  3769                                      ;DB         error_too_many_open_files,error_file_exists,error_not_enough_memory
  3770                                      ;DB         error_not_dos_disk,error_invalid_data
  3771                                      ;DB             error_invalid_function,error_access_denied
  3772                                      ;DB GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3773                                      ;DB         error_invalid_function,error_access_denied
  3774 00000D2E FF                          DB  0FFh
  3775                                  
  3776                                  ;============================================================================
  3777                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3778                                  ;============================================================================
  3779                                  ; 16/07/2018 - Retro DOS 3.0
  3780                                  
  3781                                  ;**
  3782                                  ;
  3783                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
  3784                                  ; errors.  Each entry is 4 bytes long:
  3785                                  ;
  3786                                  ;       Err#,Class,Action,Locus
  3787                                  ;
  3788                                  ; A value of 0FFh indicates a call specific value (ie.  should already
  3789                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3790                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
  3791                                  ;
  3792                                  
  3793                                  ;PUBLIC  ERR_TABLE_21
  3794                                  ERR_TABLE_21: ; LABEL   BYTE
  3795 00000D2F 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,     0FFh
  3796 00000D33 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3797 00000D37 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3798 00000D3B 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,     errLOC_Unk
  3799 00000D3F 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,      0FFh
  3800 00000D43 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3801 00000D47 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,     errLOC_Mem
  3802 00000D4B 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3803 00000D4F 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3804 00000D53 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3805 00000D57 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3806 00000D5B 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3807 00000D5F 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,     errLOC_Unk
  3808 00000D63 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3809 00000D67 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,      errLOC_Disk
  3810 00000D6B 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,      errLOC_Disk
  3811 00000D6F 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3812 00000D73 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,      errLOC_Disk
  3813 00000D77 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3814 00000D7B 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3815 00000D7F 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,     0FFh
  3816 00000D83 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,      errLOC_Unk
  3817 00000D87 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,     errLOC_Disk
  3818 00000D8B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3819 00000D8F 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,      errLOC_Net
  3820 00000D93 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3821 00000D97 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,     errLOC_Unk
  3822 00000D9B 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3823                                      ; MSDOS 6.0
  3824                                      ;DB  error_handle_EOF,            errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3825                                      ;DB  error_handle_Disk_Full,      errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3826                                      ;DB  error_sys_comp_not_loaded,   errCLASS_Unk,       errACT_Abort,     errLOC_Disk ;AN001;
  3827 00000D9F FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	    0FFh
  3828                                  
  3829                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
  3830                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
  3831                                  ;		db 2,8,3,2
  3832                                  ;		db 3,8,3,2
  3833                                  ;		db 4,1,4,1
  3834                                  ;		db 5,3,3,0FFh
  3835                                  ;		db 6,7,4,1
  3836                                  ;		db 7,7,5,5
  3837                                  ;		db 8,1,4,5
  3838                                  ;		db 9,7,4,5
  3839                                  ;		db 0Ah,7,4,5
  3840                                  ;		db 0Bh,9,3,1
  3841                                  ;		db 0Ch,7,4,1
  3842                                  ;		db 0Dh,9,4,1
  3843                                  ;		db 0Fh,8,3,2
  3844                                  ;		db 10h,3,3,2
  3845                                  ;		db 11h,0Dh,3,2
  3846                                  ;		db 12h,8,3,2
  3847                                  ;		db 50h,0Ch,3,2
  3848                                  ;		db 20h,0Ah,2,2
  3849                                  ;		db 21h,0Ah,2,2
  3850                                  ;		db 54h,1,4,0FFh
  3851                                  ;		db 56h,3,3,1
  3852                                  ;		db 52h,1,4,2
  3853                                  ;		db 32h,9,3,3
  3854                                  ;		db 55h,0Ch,3,3
  3855                                  ;		db 57h,9,3,1
  3856                                  ;		db 53h,0Dh,4,1
  3857                                  ;		db 24h,1,4,5
  3858                                  ;		db 0FFh,0FFh,0FFh,0FFh
  3859                                  
  3860                                  ;
  3861                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
  3862                                  ; errors.  Each entry is 4 bytes long:
  3863                                  ;
  3864                                  ;       Err#,Class,Action,Locus
  3865                                  ;
  3866                                  ; A Locus value of 0FFh indicates a call specific value (ie.  should already
  3867                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3868                                  ; THE END.
  3869                                  
  3870                                  ;PUBLIC  ERR_TABLE_24
  3871                                  ERR_TABLE_24: ; LABEL   BYTE
  3872 00000DA3 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3873 00000DA7 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3874 00000DAB 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,    0FFh
  3875 00000DAF 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3876 00000DB3 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3877 00000DB7 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3878 00000DBB 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,     errLOC_Disk
  3879 00000DBF 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3880 00000DC3 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3881 00000DC7 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,    errLOC_SerDev
  3882 00000DCB 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,     0FFh
  3883 00000DCF 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,     0FFh
  3884 00000DD3 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,     0FFh
  3885 00000DD7 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3886 00000DDB 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3887 00000DDF 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3888 00000DE3 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3889 00000DE7 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3890 00000DEB 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3891 00000DEF FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,     0FFh
  3892                                  
  3893                                  
  3894                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
  3895                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
  3896                                  ;		db 14h,4,5,1
  3897                                  ;		db 15h,5,7,0FFh
  3898                                  ;		db 16h,4,5,1
  3899                                  ;		db 17h,0Bh,4,2
  3900                                  ;		db 18h,4,5,1
  3901                                  ;		db 19h,5,1,2
  3902                                  ;		db 1Ah,0Bh,7,2
  3903                                  ;		db 1Bh,0Bh,4,2
  3904                                  ;		db 1Ch,2,7,4
  3905                                  ;		db 1Dh,5,4,0FFh
  3906                                  ;		db 1Eh,5,4,0FFh
  3907                                  ;		db 1Fh,0Dh,4,0FFh
  3908                                  ;		db 20h,0Ah,2,2
  3909                                  ;		db 21h,0Ah,2,2
  3910                                  ;		db 22h,0Bh,7,2
  3911                                  ;		db 32h,9,3,3
  3912                                  ;		db 23h,7,4,1
  3913                                  ;		db 24h,1,4,5
  3914                                  ;		db 0FFh,0Dh,5,0FFh
  3915                                  
  3916                                  ;
  3917                                  ; We need to map old int 24 errors and device driver errors into the new set
  3918                                  ; of errors.  The following table is indexed by the new errors
  3919                                  ;
  3920                                  
  3921                                  ;Public  ErrMap24
  3922                                  ErrMap24: ; Label   BYTE
  3923 00000DF3 13                          DB  error_write_protect	; 0
  3924 00000DF4 14                          DB  error_bad_unit		; 1
  3925 00000DF5 15                          DB  error_not_ready		; 2
  3926 00000DF6 16                          DB  error_bad_command	; 3
  3927 00000DF7 17                          DB  error_CRC		; 4
  3928 00000DF8 18                          DB  error_bad_length	; 5
  3929 00000DF9 19                          DB  error_seek		; 6
  3930 00000DFA 1A                          DB  error_not_DOS_disk	; 7
  3931 00000DFB 1B                          DB  error_sector_not_found	; 8
  3932 00000DFC 1C                          DB  error_out_of_paper	; 9
  3933 00000DFD 1D                          DB  error_write_fault	; A
  3934 00000DFE 1E                          DB  error_read_fault	; B
  3935 00000DFF 1F                          DB  error_gen_failure	; C
  3936 00000E00 1F                          DB  error_gen_failure	; D  RESERVED
  3937 00000E01 1F                          DB  error_gen_failure	; E  RESERVED
  3938 00000E02 22                          DB  error_wrong_disk	; F
  3939                                  
  3940                                  ;Public  ErrMap24End
  3941                                  ErrMap24End: ; LABEL   BYTE
  3942                                  
  3943                                  ; 16/07/2018 - Retro DOS v3.0
  3944                                  ;_MAXCALL:	db 	36
  3945                                  ;_MAXCOM:	db	104
  3946                                  
  3947                                  ; 08/09/2018
  3948 00000E03 24                          db  36
  3949 00000E04 68                          db  104
  3950                                  
  3951                                  ;============================================================================
  3952                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3953                                  ;============================================================================
  3954                                  ; 11/07/2018 - Retro DOS v3.0
  3955                                  
  3956                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3957                                  
  3958 00000E05 90                      align 2
  3959                                  
  3960                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3961                                  
  3962                                  ; Standard Functions
  3963                                  ;DISPATCH    LABEL WORD
  3964                                  DISPATCH:
  3965                                  	; 16/07/2018 - Retro DOS v3.0
  3966                                  	; (MSDOS 3.3)
  3967                                  
  3968 00000E06 [CE64]                          short_addr  _$ABORT			    ;  0      0
  3969 00000E08 [7223]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3970 00000E0A [7B23]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3971 00000E0C [3424]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3972 00000E0E [5124]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3973 00000E10 [5724]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3974 00000E12 [C422]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3975 00000E14 [F022]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3976 00000E16 [8520]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3977 00000E18 [F120]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3978 00000E1A [FD20]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3979 00000E1C [6B24]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3980 00000E1E [7524]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3981 00000E20 [521D]                          short_addr  _$DISK_RESET		    ; 13      D
  3982 00000E22 [4E1C]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3983 00000E24 [802B]                          short_addr  _$FCB_OPEN			    ; 15      F
  3984 00000E26 [1E25]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3985 00000E28 [802C]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3986 00000E2A [152D]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3987 00000E2C [BA24]                          short_addr  _$FCB_DELETE		    ; 19     13
  3988 00000E2E [6C2C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3989 00000E30 [712C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3990 00000E32 [522C]                          short_addr  _$FCB_CREATE		    ; 22     16
  3991 00000E34 [8F25]                          short_addr  _$FCB_RENAME		    ; 23     17
  3992                                  	; 16/07/2018
  3993                                          ;short_addr _CPMFUNC			    ; 24     18	
  3994 00000E36 [1917]                          short_addr  NO_OP			    ; 24     18
  3995 00000E38 [491C]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3996 00000E3A [3E1C]                          short_addr  _$SET_DMA			    ; 26     1A
  3997                                  
  3998                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3999                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4000                                  ;                                                                          ;
  4001 00000E3C [DB1C]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  4002 00000E3E [DD1C]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  4003                                  ;                                                                          ;
  4004                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4005                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4006                                  
  4007                                          ;short_addr  _CPMFUNC			    ; 29     1D
  4008                                          ;short_addr  _CPMFUNC			    ; 30     1E
  4009                                  
  4010                                  ; 08/07/2018 - Retro DOS v3.0
  4011                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4012                                  
  4013 00000E40 [1917]                  	short_addr  NO_OP			    ; 29     1D
  4014 00000E42 [1917]                  	short_addr  NO_OP			    ; 30     1E
  4015                                  
  4016                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4017                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4018                                  ;                                                                          ;
  4019 00000E44 [211D]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  4020                                  ;                                                                          ;
  4021                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4022                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4023                                          ;short_addr _CPMFUNC			    ; 32     20
  4024                                  
  4025                                  ; 08/07/2018 - Retro DOS v3.0
  4026                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4027                                  
  4028 00000E46 [1917]                  	short_addr  NO_OP			    ; 32     20
  4029                                  
  4030 00000E48 [762C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  4031 00000E4A [7B2C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  4032 00000E4C [CF24]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  4033 00000E4E [A224]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  4034                                  
  4035                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  4036                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  4037                                  
  4038                                  ; Extended Functions
  4039 00000E50 [701C]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  4040                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4041                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4042                                  ;                                                                          ;
  4043 00000E52 [3A1E]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  4044                                  ;                                                                          ;
  4045                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4046                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4047 00000E54 [672C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  4048 00000E56 [622C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  4049 00000E58 [D01C]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  4050 00000E5A [2118]                          short_addr  _$GET_DATE                      ; 42     2A
  4051 00000E5C [3E18]                          short_addr  _$SET_DATE                      ; 43     2B
  4052 00000E5E [5E18]                          short_addr  _$GET_TIME                      ; 44     2C
  4053 00000E60 [6F18]                          short_addr  _$SET_TIME                      ; 45     2D
  4054 00000E62 [1C1A]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  4055                                  
  4056                                  ; Extended functionality group
  4057 00000E64 [2A1C]                          short_addr  _$GET_DMA                       ; 47     2F
  4058 00000E66 [FE19]                          short_addr  _$GET_VERSION                   ; 48     30
  4059 00000E68 [7264]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  4060                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4061                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4062                                  ;                                                                          ;
  4063 00000E6A [231D]                          short_addr  _$GET_DPB			    ; 50     32
  4064                                  ;                                                                          ;
  4065                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4066                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4067 00000E6C [5F14]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  4068 00000E6E [091D]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  4069 00000E70 [601C]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  4070 00000E72 [FF1B]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  4071 00000E74 [881C]                          short_addr  _$CHAR_OPER                     ; 55     37
  4072 00000E76 [231A]                          short_addr  _$INTERNATIONAL                 ; 56     38
  4073                                  ; XENIX CALLS
  4074                                  ;   Directory Group
  4075 00000E78 [542F]                          short_addr  _$MKDIR			    ; 57     39
  4076 00000E7A [A62E]                          short_addr  _$RMDIR			    ; 58     3A
  4077 00000E7C [E22E]                          short_addr  _$CHDIR			    ; 59     3B
  4078                                  ;   File Group
  4079 00000E7E [F370]                          short_addr  _$CREAT			    ; 60     3C
  4080 00000E80 [3970]                          short_addr  _$OPEN			    ; 61     3D
  4081 00000E82 [C86D]                          short_addr  _$CLOSE		 	    ; 62     3E
  4082 00000E84 [E06E]                          short_addr  _$READ			    ; 63     3F
  4083 00000E86 [356F]                          short_addr  _$WRITE			    ; 64     40
  4084 00000E88 [4871]                          short_addr  _$UNLINK			    ; 65     41
  4085 00000E8A [3A6F]                          short_addr  _$LSEEK			    ; 66     42
  4086 00000E8C [0071]                          short_addr  _$CHMOD			    ; 67     43
  4087 00000E8E [B12F]                          short_addr  _$IOCTL			    ; 68     44
  4088 00000E90 [F46F]                          short_addr  _$DUP			    ; 69     45
  4089 00000E92 [1670]                          short_addr  _$DUP2			    ; 70     46
  4090 00000E94 [492E]                          short_addr  _$CURRENT_DIR		    ; 71     47
  4091                                  ;   Memory Group
  4092 00000E96 [5365]                          short_addr  _$ALLOC			    ; 72     48
  4093 00000E98 [7066]                          short_addr  _$DEALLOC                       ; 73     49
  4094 00000E9A [4C66]                          short_addr  _$SETBLOCK                      ; 74     4A
  4095                                  ;   Process Group
  4096 00000E9C [E75F]                          short_addr  _$EXEC			    ; 75     4B
  4097 00000E9E [AA64]                          short_addr  _$EXIT			    ; 76     4C
  4098 00000EA0 [DD5F]                          short_addr  _$WAIT			    ; 77     4D
  4099 00000EA2 [882D]                          short_addr  _$FIND_FIRST		    ; 78     4E
  4100                                  ;   Special Group
  4101 00000EA4 [E12D]                          short_addr  _$FIND_NEXT			    ; 79     4F
  4102                                  ; SPECIAL SYSTEM GROUP
  4103                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4104                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4105                                  ;                                                                          ;
  4106 00000EA6 [5314]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  4107 00000EA8 [5914]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  4108 00000EAA [151D]                          short_addr  _$GET_IN_VARS                   ; 82     52
  4109 00000EAC [821D]                          short_addr  _$SETDPB			    ; 83     53
  4110                                  ;                                                                          ;
  4111                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4112                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4113 00000EAE [171A]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  4114                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4115                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4116                                  ;                                                                          ;
  4117 00000EB0 [2C1E]                          short_addr  _$DUP_PDB                       ; 85     55
  4118                                  ;                                                                          ;
  4119                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4120                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4121 00000EB2 [7071]                          short_addr  _$RENAME			    ; 86     56
  4122 00000EB4 [A46F]                          short_addr  _$FILE_TIMES                    ; 87     57
  4123 00000EB6 [9166]                          short_addr  _$ALLOCOPER                     ; 88     58
  4124                                  
  4125                                  ; 08/07/2018 - Retro DOS v3.0
  4126                                  ; -------------------------------------------------------------------------;
  4127                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4128                                  
  4129                                  ; Network extention system calls
  4130 00000EB8 [AD1C]                          short_addr  _$GetExtendedError              ; 89     59
  4131 00000EBA [FD71]                          short_addr  _$CreateTempFile                ; 90     5A
  4132 00000EBC [E571]                          short_addr  _$CreateNewFile                 ; 91     5B
  4133 00000EBE [9572]                          short_addr  _$LockOper                      ; 92     5C
  4134 00000EC0 [B366]                          short_addr  _$ServerCall                    ; 93     5D
  4135 00000EC2 [0969]                          short_addr  _$UserOper                      ; 94     5E
  4136 00000EC4 [9868]                          short_addr  _$AssignOper                    ; 95     5F
  4137 00000EC6 [616D]                          short_addr  _$NameTrans                     ; 96     60
  4138 00000EC8 [1917]                  	short_addr  NO_OP			    ; 97     61
  4139 00000ECA [5914]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  4140                                  ; the next call is reserved for hangool sys call
  4141                                  	; 16/07/2018
  4142                                  	;short_addr  _$ECS_Call			    ; 99     63
  4143 00000ECC [1917]                  	short_addr  NO_OP			    ; 99     63
  4144                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4145                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4146                                  ;                                                                          ;
  4147 00000ECE [8614]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  4148                                  ;                                                                          ;
  4149                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4150                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4151 00000ED0 [A91A]                          short_addr  _$GetExtCntry                   ; 101    65
  4152 00000ED2 [A81B]                          short_addr  _$GetSetCdPg                    ; 102    66
  4153 00000ED4 [176E]                          short_addr  _$ExtHandle                     ; 103    67
  4154 00000ED6 [FB6D]                          short_addr  _$COMMIT                        ; 104    68
  4155                                  
  4156                                  ; 08/07/2018
  4157                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  4158                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  4159                                  
  4160                                  ;	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  4161                                  ;	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  4162                                  ;	short_addr  NO_OP                           ; 107    6B   
  4163                                  ;						    ; IFS_IOCTL no longer 
  4164                                  ;						    ; supported
  4165                                  ;	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  4166                                  
  4167                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4168                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4169                                  ;                                                                          ;
  4170                                  ;ifdef ROMEXEC
  4171                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  4172                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  4173                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  4174                                  ;endif
  4175                                  ;                                                                          ;
  4176                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4177                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4178                                  
  4179                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  4180                                  
  4181                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  4182                                  
  4183                                  ; 08/07/2018 - Retro DOS v3.0
  4184                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4185                                  
  4186                                  ;	If	Installed
  4187                                  
  4188                                  align 2
  4189                                  
  4190                                  ;PUBLIC FOO
  4191                                  
  4192                                  FOO:	; LABEL WORD
  4193 00000ED8 [CB17]                          short_addr  Leave2F
  4194                                  
  4195 00000EDA [DC0E]                  DTab:	DW  DOSTable
  4196                                  
  4197                                  	;PUBLIC FOO,DTAB
  4198                                  
  4199                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  4200                                         
  4201                                  DOSTable:  ; LABEL  WORD
  4202 00000EDC 2F                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  46
  4203 00000EDD [F817]                          short_addr  DOSInstall          ;   0 install check
  4204 00000EDF [BC3A]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  4205 00000EE1 [7D1C]                          short_addr  RECSET              ;   2   RECSET
  4206 00000EE3 [F517]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  4207 00000EE5 [4D56]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  4208 00000EE7 [7D23]                          short_addr  OUTT                ;   5   OUT
  4209 00000EE9 [BA58]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  4210 00000EEB [DF5D]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  4211 00000EED [763B]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  4212 00000EEF [815F]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  4213 00000EF1 [2F73]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  4214 00000EF3 [6638]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  4215 00000EF5 [4F38]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  4216 00000EF7 [B618]                          short_addr  DATE16              ;   13  DATE16
  4217 00000EF9 [821F]                          short_addr  Idle		;   14      empty slot
  4218 00000EFB [D35D]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  4219 00000EFD [821F]                          short_addr  Idle		;   16      empty slot
  4220 00000EFF [4B1F]                          short_addr  StrCpy              ;   17  StrCpy
  4221 00000F01 [631F]                          short_addr  StrLen              ;   18  StrLen
  4222 00000F03 [1156]                          short_addr  UCase		;   19  UCase
  4223 00000F05 [7B5E]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  4224 00000F07 [585F]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  4225 00000F09 [1768]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  4226 00000F0B [C969]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  4227 00000F0D [0B16]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  4228 00000F0F [7669]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  4229 00000F11 [866D]                          short_addr  DriveFromText       ;   26  DriveFromText
  4230 00000F13 [5D19]                          short_addr  SETYEAR             ;   27  SETYEAR
  4231 00000F15 [F419]                          short_addr  DSUM                ;   28  DSUM
  4232 00000F17 [5119]                          short_addr  DSLIDE              ;   29  DSLIDE
  4233 00000F19 [2D1F]                          short_addr  StrCmp              ;   30  StrCmp
  4234 00000F1B [BC68]                          short_addr  InitCDS             ;   31  initcds
  4235 00000F1D [E967]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  4236 00000F1F [616D]                          short_addr  _$NameTrans		;   33  $NameTrans
  4237 00000F21 [4017]                          short_addr  CAL_LK              ;   34  CAL_LK
  4238 00000F23 [E14A]                          short_addr  DEVNAME             ;   35  DEVNAME
  4239 00000F25 [821F]                          short_addr  Idle                ;   36  Idle
  4240 00000F27 [711F]                          short_addr  DStrLen             ;   37  DStrLen
  4241 00000F29 [0420]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  4242 00000F2B [C86D]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  4243 00000F2D [0A20]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  4244 00000F2F [E06E]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  4245 00000F31 [E31F]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  4246 00000F33 [4320]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  4247 00000F35 [3620]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  4248 00000F37 [6020]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  4249                                          
  4250                                  	; 10/08/2018
  4251                                  	;short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  4252                                  
  4253 00000F39 [1917]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  4254                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  4255                                  
  4256                                  DOSTableEnd:  ; LABEL BYTE
  4257                                  
  4258                                  	;ENDIF
  4259                                  
  4260                                  ;============================================================================
  4261                                  ; DOSTAB.ASM, MSDOS 6.0, 1991
  4262                                  ;============================================================================
  4263                                  ; 16/07/2018 - Retro DOS v3.0
  4264                                  
  4265                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
  4266                                  
  4267                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
  4268                                  ;
  4269                                  	;PUBLIC	SysInitTable
  4270                                  
  4271                                  SysInitTable:	; label  byte
  4272 00000F3B [2600]                  	dw      SYSINITVARS			; pointer to sysinit var
  4273 00000F3D 0000                            dw      0                             	; segment
  4274 00000F3F [FD0F]                          dw      COUNTRY_CDPG		   	; pointer to country tabl
  4275 00000F41 0000                            dw      0                            	; segment of pointer
  4276                                  
  4277                                  ; DOS 3.3 F.C. 6/12/86
  4278                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
  4279                                  ;
  4280                                  	;PUBLIC	FastOpenTable
  4281                                  	;PUBLIC	FastTable		; a better name
  4282                                  	;EXTRN	FastRet:FAR		; defined in misc2.asm
  4283                                  
  4284                                  ; MSDOS 6.0
  4285                                  ;FastTable:     ;label  byte		; a better name
  4286                                  ;FastOpenTable: ;label  byte
  4287                                  ;	dw      2                       ; number of entries
  4288                                  ;	dw      FastRet			; pointer to ret instr.
  4289                                  ;	dw      0                       ; and will be modified by
  4290                                  ;	dw      FastRet			; FASTxxx when loaded in
  4291                                  ;	dw      0                       
  4292                                  
  4293                                  ;
  4294                                  ; DOS 3.3 F.C. 6/12/86
  4295                                  ;
  4296                                  
  4297                                  ;	PUBLIC	FastFlg                 ; flags
  4298                                  ;FastFlg:	;label  byte		; don't change the foll: order
  4299                                  ;FastOpenFlg:
  4300                                  ;	db	0  ; I_am    FastOpenFlg,BYTE,<0>
  4301                                  
  4302                                  ; MSDOS 3.3
  4303                                  FastTable:
  4304                                  FastOpenTable:
  4305 00000F43 0400                    	dw      4 
  4306 00000F45 [0020]                  	dw      FastRet
  4307 00000F47 0000                    	dw      0  ; (('FastRet' segment will be set to CS by DOSINIT))
  4308                                  
  4309                                  	;PUBLIC	FastOpen_Ext_Info
  4310                                  
  4311                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
  4312                                  ; and clusnum  which are filled by DOS 3.ncwhen calling FastOpen Insert
  4313                                  ; or filled by FastOPen when calling FastOpen Lookup
  4314                                  
  4315                                  FastOpen_Ext_Info: ;label  byte		;dirpos
  4316 00000F49 00<rep 5h>              	times	FEI.size db 0	; 5 (for MSDOS 3.3), 11 (for MSDOS 6.0)
  4317                                  
  4318                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
  4319                                  ; when calling FastOpen Lookup
  4320                                  
  4321                                  	;PUBLIC	Dir_Info_Buff
  4322                                  
  4323                                  Dir_Info_Buff:	; label  byte
  4324 00000F4E 00<rep 20h>             	times	dir_entry.size db 0 ; 32 ; segment of pointer
  4325                                  
  4326                                  ; MSDOS 3.3 (IBMDOS.COM, 1987)
  4327                                  FastFlg:
  4328                                  FastOpenFlg:
  4329 00000F6E 00                      	db	0
  4330                                  
  4331                                  	;I_am	Next_Element_Start,WORD	; save next element start offset
  4332                                  Next_Element_Start:
  4333 00000F6F 0000                    	dw	0
  4334                                  
  4335                                  	; MSDOS 6.0
  4336                                  	;I_am    Del_ExtCluster,WORD     ; for dos_delete                       
  4337                                  
  4338                                  ; 17/07/2018
  4339                                  
  4340                                  ; The following is a stack and its pointer for interrupt 2F which is uesd
  4341                                  ; by NLSFUNC.  There is no significant use of this stack, we are just trying
  4342                                  ; not to destroy the INT 21 stack saved for the user.
  4343                                  
  4344                                  	;PUBLIC	USER_SP_2F
  4345                                  
  4346                                  USER_SP_2F:	; LABEL  WORD
  4347 00000F71 [730F]                  	dw	FAKE_STACK_2F
  4348                                  
  4349                                  	;PUBLIC	Packet_Temp
  4350                                  ;Packet_Temp	label  word		; temporary packet used by readtime
  4351                                  	;PUBLIC  DOS_TEMP		; temporary word
  4352                                  ;DOS_TEMP	label  word
  4353                                  FAKE_STACK_2F:
  4354                                  	;dw	14 dup (0)
  4355 00000F73 0000<rep Ch>            	times	12 dw 0			; 12 register temporary storage
  4356                                  
  4357                                  	;PUBLIC	Hash_Temp		; temporary word
  4358                                  ;Hash_Temp	label  word              
  4359                                  	;dw	4 dup (0)		; temporary hash table during config.sys
  4360                                  
  4361                                  	;PUBLIC  SCAN_FLAG             	; flag to indicate key ALT_Q
  4362                                  SCAN_FLAG:	; label  byte
  4363 00000F8B 00                      	db	0
  4364                                  
  4365                                  ; MSDOS 3.3
  4366                                  DISK_FULL:
  4367 00000F8C 00                      	db	0
  4368                                  
  4369                                  	;PUBLIC  DATE_FLAG
  4370                                  DATE_FLAG:   	;label  word 		; flag to
  4371 00000F8D 0000                    	dw     0                	; to update the date
  4372                                  
  4373                                  FETCHI_TAG:	;label  word		; OBSOLETE - no longer used
  4374 00000F8F 0000                    	dw     0			; formerly part of IBM's piracy protection
  4375                                  
  4376                                  ; MSDOS 6.0
  4377                                  ;      PUBLIC	MSG_EXTERROR 		; for system message addr              
  4378                                  ;MSG_EXTERROR	label  DWORD                                                     
  4379                                  ;               dd     0                ; for extended error                   
  4380                                  ;               dd     0                ; for parser                           
  4381                                  ;              	dd     0                ; for critical errror                  
  4382                                  ;              	dd     0                ; for IFS                              
  4383                                  ;              	dd     0                ; for code reduction                   
  4384                                  ;
  4385                                  ;      PUBLIC  	SEQ_SECTOR              ; last sector read                     
  4386                                  ;SEQ_SECTOR    	label  DWORD                                                     
  4387                                  ;              	dd     -1                                                        
  4388                                  ;
  4389                                  ;;      I_am    ACT_PAGE,WORD,<-1>      ; active EMS page                       
  4390                                  ;	I_am    SC_SECTOR_SIZE,WORD     ; sector size for SC                 
  4391                                  ;       I_am    SC_DRIVE,BYTE           ; drive # for secondary cache        
  4392                                  ;       I_am    CurSC_DRIVE,BYTE,<-1>   ; current SC drive                   
  4393                                  ;       I_am    CurSC_SECTOR,DWORD      ; current SC starting sector         
  4394                                  ;       I_am    SC_STATUS,WORD,<0>      ; SC status word                     
  4395                                  ;       I_am    SC_FLAG,BYTE,<0>        ; SC flag                            
  4396                                  ;       I_am    AbsDskErr,WORD,<0>	; Storage for Abs dsk read/write err
  4397                                  ;
  4398                                  ;	PUBLIC 	NO_NAME_ID                                                           
  4399                                  ;NO_NAME_ID	label byte                                                           
  4400                                  ;		db   'NO NAME    '	; null media id                      
  4401                                  ;
  4402                                  ;;hkn; moved from TABLE segment in kstrin.asm
  4403                                  ;
  4404                                  ;Public	KISTR001S,KISTR001E,LOOKSIZ	; 2/17/KK
  4405                                  ;KISTR001S	label	byte		; 2/17/KK
  4406                                  ;LOOKSIZ DB	0			; 0 if byte, NZ if word	2/17/KK
  4407                                  ;KISTR001E	label	byte		; 2/17/KK
  4408                                  ;
  4409                                  ;; the nul device driver used to be part of the code.  However, since the 
  4410                                  ;; header is in the data, and the entry points are only given as an offset,
  4411                                  ;; the strategy and interrupt entry points must also be in the data now.
  4412                                  ;;
  4413                                  ;
  4414                                  ;procedure   snuldev,far
  4415                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  4416                                  ; 	or	es:[bx.reqstat],stdon	; set done bit
  4417                                  ;entry inuldev
  4418                                  ;	ret				; must not be a return!
  4419                                  ;endproc snuldev
  4420                                  ;
  4421                                  
  4422                                  ;============================================================================
  4423                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  4424                                  ;============================================================================
  4425                                  ; 17/07/2018 - Retro DOS v3.0
  4426                                  
  4427                                  ; ----------------------------------------------------------------------------
  4428                                  ; BREAK   <Copyright notice and version>
  4429                                  ; ----------------------------------------------------------------------------
  4430                                  
  4431                                  ;CODSTRT EQU     $
  4432                                  
  4433                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  4434                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  4435                                  
  4436                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  4437                                  ;       module. The reason is so that the data alignments are the same in
  4438                                  ;       IBM-DOS and MS-DOS up through header.
  4439                                  
  4440                                  	;PUBLIC	HEADER
  4441                                  
  4442                                  HEADER:	; LABEL	BYTE
  4443                                          ;IF	DEBUG
  4444                                          ;DB	13,10,"Debugging DOS version "
  4445                                          ;DB	MAJOR_VERSION + "0"
  4446                                          ;DB	"."
  4447                                          ;DB	(MINOR_VERSION / 10) + "0"
  4448                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4449                                          ;ENDIF
  4450                                  
  4451                                          ;IF	NOT IBM
  4452 00000F91 0D0A4D532D444F5320-             DB	13,10,"MS-DOS version "
  4452 00000F9A 76657273696F6E20   
  4453 00000FA2 33                              DB	MAJOR_VERSION + "0"
  4454 00000FA3 2E                              DB	"."
  4455 00000FA4 33                              DB	(MINOR_VERSION / 10) + "0"
  4456                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4457 00000FA5 30                              DB	(MINOR_VERSION % 10) + "0"
  4458                                  
  4459                                          ;IF	HIGHMEM
  4460                                          ;DB	"H"
  4461                                          ;ENDIF
  4462                                  
  4463 00000FA6 0D0A436F7079726967-     	DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  4463 00000FAF 687420313938312C38-
  4463 00000FB8 322C38332C38342C38-
  4463 00000FC1 38204D6963726F736F-
  4463 00000FCA 667420436F72702E0D-
  4463 00000FD3 0A24               
  4464                                  	;ENDIF
  4465                                  
  4466                                  ;IF DEBUG
  4467                                  ;	DB	13,10,"$"
  4468                                  ;ENDIF
  4469                                  
  4470                                  ;include copyrigh.inc
  4471                                  
  4472                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  4473                                  	;DB	"Licensed Material - Property of Microsoft "
  4474                                  	;DB	"All rights reserved "
  4475                                  
  4476                                  ;============================================================================
  4477                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4478                                  ;============================================================================
  4479                                  ; 17/07/2018 - Retro DOS v3.0
  4480                                  
  4481                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4482                                  ;	NAME	IBMCODE
  4483                                  
  4484                                  ;BREAK <NullDev -- Driver for null device>
  4485                                  
  4486                                  ; ROMDOS note:
  4487                                  ;	NUL device driver used to be here, but it was removed and placed in
  4488                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4489                                  ;	header, which is also in DOSDATA.
  4490                                  
  4491                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4492                                  
  4493                                  ;Public MSC001S,MSC001E
  4494                                  ;MSC001S label byte
  4495                                  	;IF	IBM
  4496                                  ; Codes returned by BIOS
  4497                                  ERRIN:
  4498 00000FD5 02                      	DB	2			; NO RESPONSE
  4499 00000FD6 06                      	DB	6			; SEEK FAILURE
  4500 00000FD7 0C                      	DB	12			; GENERAL ERROR
  4501 00000FD8 04                      	DB	4			; BAD CRC
  4502 00000FD9 08                      	DB	8			; SECTOR NOT FOUND
  4503 00000FDA 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4504                                  ERROUT:
  4505                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4506 00000FDB 80                      	DB	80H			; NO RESPONSE
  4507 00000FDC 40                      	DB	40H			; Seek failure
  4508 00000FDD 02                      	DB	2			; Address Mark not found
  4509 00000FDE 10                      	DB	10H			; BAD CRC
  4510 00000FDF 04                      	DB	4			; SECTOR NOT FOUND
  4511 00000FE0 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4512                                  
  4513                                  NUMERR	EQU	$-ERROUT
  4514                                  	;ENDIF
  4515                                  ;MSC001E label byte
  4516                                  
  4517                                  ;============================================================================
  4518                                  ; DOSMES.INC (MSDOS 3.3, 1987)
  4519                                  ;============================================================================
  4520                                  ; 17/07/2018 - Retro DOS v3.0
  4521                                  
  4522                                  ;TABLE	SEGMENT BYTE PUBLIC 'TABLE'
  4523                                  
  4524                                  ; The international table(s). Used for DOS 3.x  (x < 3)
  4525                                  ; This is simply a sequence of tables of the following form:
  4526                                  ;
  4527                                  ; Offset
  4528                                  ;		BYTE  Size of this table excluding this byte and the next
  4529                                  ;		WORD  Country code represented by this table
  4530                                  ;			A sequence of n bytes, where n is the number specified
  4531                                  ;			by the first byte above and is not > internat_block_max,
  4532                                  ;			in the correct order for being returned by the
  4533                                  ;			INTERNATIONAL call as follows:
  4534                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  4535                                  ;		5 BYTE	Currency symbol null terminated
  4536                                  ;		2 BYTE	thousands separator null terminated
  4537                                  ;		2 BYTE	Decimal point null terminated
  4538                                  ;		2 BYTE	Date separator null terminated
  4539                                  ;		2 BYTE	Time separator null terminated
  4540                                  ;		1 BYTE	Bit field.  Currency format.
  4541                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  4542                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  4543                                  ;			Bit 2.	=1 imbedded at decimal point, & no spaces;
  4544                                  ;		1 BYTE	No. of significant decimal digits in currency
  4545                                  ;		1 BYTE	Bit field.  Time format.
  4546                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  4547                                  ;		WORD	Segment offset for address of case conversion routine
  4548                                  ;		WORD	RESERVED. Filled in by DOS. Segment value for above routine
  4549                                  ;		2 BYTE	Data list separator null terminated.
  4550                                  ;		   NOTE: The segment part of the DWORD Map_call is set
  4551                                  ;			by the INTERNATIONAL call. Do not try to initialize
  4552                                  ;			it to anything meaningful.
  4553                                  ;
  4554                                  ; The list of tables is terminated by putting a byte of -1 after the last
  4555                                  ;	table (a table with length -1).
  4556                                  
  4557                                  	; PUBLIC  international_table
  4558                                  
  4559                                  ; Offset 0F95h in IBMDOS.COM (MSDOS 3.3), 1987
  4560                                  
  4561                                  international_table:	; LABEL BYTE
  4562                                  
  4563 00000FE1 18                      	DB 	INTERNAT_BLOCK.size  ; = 24 ; Size in bytes of this table
  4564 00000FE2 0100                    	DW 	1		; Country code
  4565                                  USTABLE:
  4566 00000FE4 0000                    	dw	0		; 0-USA, 1-EUR, 2-JAP
  4567 00000FE6 2400000000              	db	'$',0,0,0,0	; Currency Symbol 5 bytes
  4568 00000FEB 2C00                    	db	',',0		; Thousands separator 2 bytes
  4569 00000FED 2E00                    	db	'.',0		; Decimal separator 2 bytes
  4570 00000FEF 2D00                    	db	'-',0		; Date separator 2 bytes
  4571 00000FF1 3A00                    	db	':',0		; Time separator 2 bytes
  4572 00000FF3 00                      	db	0		; Bit values
  4573                                                                 	;   Bit 0 = 0 if currency symbol first
  4574                                                                 	;         = 1 if currency symbol last
  4575                                                                 	;   Bit 1 = 0 if No space after currency symbol
  4576                                                                 	;         = 1 if space after currency symbol
  4577 00000FF4 02                      	db	2		; Number of places after currency dec point
  4578 00000FF5 00                      	db	0		; if 24 hour time, 0 if 12 hour time
  4579 00000FF6 [FB17]                  	dw	MAP_CASE	; Address of case mapping call (DWORD)
  4580 00000FF8 0000                            dw	0		; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  4581                                  				;  in pieces.
  4582 00000FFA 2C00                    	db	',',0		; Data list separator character
  4583                                  
  4584                                  ;	Tables for the IBM PC character set follow. The values
  4585                                  ;	associated with some of the currency symbols may change with
  4586                                  ;	other character sets. You may wish to add or delete country
  4587                                  ;	entries. NOTE: It is not a mistake that the JAPANESE entry
  4588                                  ;	has different currency symbols for the KANJI and
  4589                                  ;	non-KANJI versions.
  4590                                  	
  4591 00000FFC FF                      	DB	-1		; end of table
  4592                                  
  4593                                  ; The following table is used for DOS 3.3
  4594                                  ;DOS country and code page information is defined here for DOS 3.3.
  4595                                  ;The initial value for ccDosCountry is 1 (USA).
  4596                                  ;The initial value for ccDosCodepage is 850.
  4597                                  ;
  4598                                  ;
  4599                                  	;PUBLIC  COUNTRY_CDPG,UCASE_TAB,FILE_UCASE_TAB
  4600                                  	;PUBLIC  FILE_CHAR_TAB
  4601                                  
  4602                                  ; country and code page infomation
  4603                                  
  4604                                  COUNTRY_CDPG:	; label  byte
  4605 00000FFD 0000000000000000        	db	0,0,0,0,0,0,0,0		; reserved words
  4606 00001005 5C434F554E5452592E-     	db	'\COUNTRY.SYS',0	; path name of country.sys
  4606 0000100E 53595300           
  4607 00001012 00<rep 33h>             	times	51 db 0
  4608 00001045 B501                    	dw	437			; system code page id
  4609 00001047 0500                    	dw	5			; number of entries
  4610 00001049 02                      	db	SetUcase		; Ucase type
  4611 0000104A [8610]                  	dw	UCASE_TAB		; pointer to upper case table
  4612 0000104C 0000                    	dw	0			; segment of poiter
  4613 0000104E 04                      	db	SetUcaseFile		; Ucase file char type
  4614 0000104F [0811]                  	dw	FILE_UCASE_TAB		; pointer to file upper case table
  4615 00001051 0000                    	dw	0			; segment of poiter
  4616 00001053 05                      	db	SetFileList		; valid file chars type
  4617 00001054 [8A11]                  	dw	FILE_CHAR_TAB		; pointer to valid file char tab
  4618 00001056 0000                    	dw	0			; segment of poiter
  4619 00001058 06                      	db	SetCollate		; collate type
  4620 00001059 [BA11]                  	dw	COLLATE_TAB		; pointer to collate table
  4621 0000105B 0000                    	dw	0			; segment of pointer
  4622 0000105D 01                      	db	SetCountryInfo		; country info type
  4623 0000105E 2600                    	dw	NEW_COUNTRY_SIZE	; extended country info size
  4624 00001060 0100                    	dw	1			; USA country id
  4625 00001062 B501                    	dw	437			; USA system code page id
  4626 00001064 0000                    	dw	0			; date format
  4627 00001066 2400000000              	db	'$',0,0,0,0		; currency symbol
  4628 0000106B 2C00                    	db	',',0			; thousand separator
  4629 0000106D 2E00                    	db	'.',0			; decimal separator
  4630 0000106F 2D00                    	db	'-',0			; date separator
  4631 00001071 3A00                    	db	':',0			; time separator
  4632 00001073 00                      	db	0			; currency format flag
  4633 00001074 02                      	db	2			; # of disgit in currency
  4634 00001075 00                      	db	0			; time format
  4635 00001076 [FB17]                  	dw	MAP_CASE		;mono case routine entry point
  4636 00001078 0000                    	dw	0			; segment of entry point
  4637 0000107A 2C00                    	db	',',0			; data list separator
  4638 0000107C 000000000000000000-     	dw	0,0,0,0,0		; reserved
  4638 00001085 00                 
  4639                                  
  4640                                  ; upper case table
  4641                                  
  4642                                  UCASE_TAB: 	; label   byte
  4643 00001086 8000                    	dw	128
  4644 00001088 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4645 00001090 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4646 00001098 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4647 000010A0 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4648 000010A8 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4649 000010B0 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4650 000010B8 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4651 000010C0 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4652 000010C8 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4653 000010D0 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4654 000010D8 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4655 000010E0 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4656 000010E8 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4657 000010F0 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4658 000010F8 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4659 00001100 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4660                                  
  4661                                  ; file upper case table
  4662                                  
  4663                                  FILE_UCASE_TAB: ; label  byte
  4664 00001108 8000                    	dw	128
  4665 0000110A 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4666 00001112 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4667 0000111A 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4668 00001122 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4669 0000112A 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4670 00001132 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4671 0000113A B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4672 00001142 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4673 0000114A C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4674 00001152 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4675 0000115A D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4676 00001162 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4677 0000116A E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4678 00001172 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4679 0000117A F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4680 00001182 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4681                                  
  4682                                  ; file char list
  4683                                  
  4684                                  FILE_CHAR_TAB:	; label  byte
  4685 0000118A 1600                    	dw	22				; length
  4686 0000118C 0100FF                  	db	1,0,255 			; include all
  4687 0000118F 000020                  	db	0,0,20h 			; exclude 0 - 20h
  4688 00001192 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
  4688 0000119B 7C3C3E2B3D3B2C     
  4689                                  	;db	24 dup (?)			; reserved
  4690 000011A2 00<rep 18h>             	times	24 db 0
  4691                                  
  4692                                  ; collate table
  4693                                  
  4694                                  COLLATE_TAB:	; label   byte
  4695 000011BA 0001                    	dw	256
  4696 000011BC 0001020304050607        	db	0,1,2,3,4,5,6,7
  4697 000011C4 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
  4698 000011CC 1011121314151617        	db	16,17,18,19,20,21,22,23
  4699 000011D4 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
  4700 000011DC 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
  4701 000011E4 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
  4702 000011EC 3031323334353637        	db	"0","1","2","3","4","5","6","7"
  4703 000011F4 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
  4704 000011FC 4041424344454647        	db	"@","A","B","C","D","E","F","G"
  4705 00001204 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4706 0000120C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4707 00001214 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
  4708 0000121C 6041424344454647        	db	"`","A","B","C","D","E","F","G"
  4709 00001224 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4710 0000122C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4711 00001234 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
  4712 0000123C 4355454141414143        	db	"C","U","E","A","A","A","A","C"
  4713 00001244 4545454949494141        	db	"E","E","E","I","I","I","A","A"
  4714 0000124C 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
  4715 00001254 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
  4716 0000125C 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
  4717 00001264 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
  4718 0000126C B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4719 00001274 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4720 0000127C C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4721 00001284 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4722 0000128C D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4723 00001294 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4724 0000129C E053                    	db	224,"S"
  4725 0000129E E2E3E4E5E6E7            	db	226,227,228,229,230,231
  4726 000012A4 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4727 000012AC F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4728 000012B4 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4729                                  
  4730                                  ;include divmes.inc
  4731                                  
  4732                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  4733                                  	;PUBLIC	DIVMES
  4734                                  
  4735 000012BC 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  4735 000012C5 6F766572666C6F770D-
  4735 000012CE 0A                 
  4736                                  
  4737                                  	;PUBLIC	DivMesLen
  4738                                  DivMesLen:
  4739 000012CF 1300                    	DW	$-DIVMES	; Length of the above message in bytes
  4740                                  
  4741                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  4742                                  
  4743                                  ; The following two tables implement the current buffered input editing
  4744                                  ; routines. The tables are pairwise associated in reverse order for ease
  4745                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  4746                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  4747                                  
  4748                                  	;PUBLIC	CANCHAR
  4749                                  CANCHAR:
  4750 000012D1 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  4751                                  	
  4752                                  	;PUBLIC	ESCCHAR
  4753                                  ESCCHAR:
  4754 000012D2 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  4755                                  	
  4756                                  	;IF	NOT Rainbow
  4757                                  
  4758                                  ESCTAB:	; LABEL BYTE
  4759                                  
  4760                                  	;IF	IBM
  4761 000012D3 40                      	DB	64		; Ctrl-Z - F6
  4762 000012D4 4D                      	DB	77		; Copy one char - -->
  4763 000012D5 3B                      	DB	59		; Copy one char - F1
  4764 000012D6 53                      	DB	83		; Skip one char - DEL
  4765 000012D7 3C                      	DB	60		; Copy to char - F2
  4766 000012D8 3E                      	DB	62		; Skip to char - F4
  4767 000012D9 3D                      	DB	61		; Copy line - F3
  4768 000012DA 3D                      	DB	61		; Kill line (no change to template ) - Not used
  4769 000012DB 3F                      	DB	63		; Reedit line (new template) - F5
  4770 000012DC 4B                      	DB	75		; Backspace - <--
  4771 000012DD 52                      	DB	82		; Enter insert mode - INS (toggle)
  4772 000012DE 52                      	DB	82		; Exit insert mode - INS (toggle)
  4773 000012DF 41                      	DB	65		; Escape character - F7
  4774 000012E0 41                      	DB	65		; End of table
  4775                                  	;ENDIF
  4776                                  
  4777                                  ESCEND: ; LABEL BYTE
  4778                                  
  4779                                  ESCTABLEN EQU ESCEND-ESCTAB
  4780                                  
  4781                                  ESCFUNC: ; LABEL WORD
  4782                                  	
  4783 000012E1 [3821]                  	short_addr  GETCH	; Ignore the escape sequence
  4784 000012E3 [2522]                  	short_addr  TWOESC
  4785 000012E5 [AD22]                  	short_addr  EXITINS
  4786 000012E7 [AD22]                  	short_addr  ENTERINS
  4787 000012E9 [AF21]                  	short_addr  BACKSP
  4788 000012EB [9922]                  	short_addr  REEDIT
  4789 000012ED [9C21]                  	short_addr  KILNEW
  4790 000012EF [2C22]                  	short_addr  COPYLIN
  4791 000012F1 [5F22]                  	short_addr  SKIPSTR
  4792 000012F3 [3222]                  	short_addr  COPYSTR
  4793 000012F5 [5522]                  	short_addr  SKIPONE
  4794 000012F7 [3722]                  	short_addr  COPYONE
  4795 000012F9 [3722]                  	short_addr  COPYONE
  4796 000012FB [B522]                  	short_addr  CTRLZ
  4797                                  
  4798                                  	;ENDIF
  4799                                  
  4800                                  ;TABLE	ENDS
  4801                                  
  4802                                  ; 17/07/2018
  4803                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
  4804                                  
  4805                                  ;CRTERRTAB: ; 19/07/2018	
  4806                                  ;	db	0,5,52h,50h,3,5,20h
  4807                                  
  4808                                  ; 08/08/2018
  4809                                  
  4810                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
  4811 000012FD 00                      	DB	0			; none
  4812 000012FE 05                      	DB	error_access_denied	; MakeNode error 1
  4813 000012FF 52                      	DB	error_cannot_make	; MakeNode error 2
  4814 00001300 50                      	DB	error_file_exists	; MakeNode error 3
  4815 00001301 03                      	DB	error_path_not_found	; MakeNode error 4
  4816 00001302 05                      	DB	error_access_denied	; MakeNode error 5
  4817 00001303 20                      	DB	error_sharing_violation ; MakeNode error 6
  4818                                  	; MSDOS 6.0
  4819                                  	;DB	error_file_not_found	; MakeNode error 7
  4820                                  
  4821                                  ;============================================================================
  4822                                  ; DEV.ASM (MSDOS 6.0, 1987)
  4823                                  ;============================================================================
  4824                                  ; 17/07/2018 - Retro DOS v3.0
  4825                                  
  4826                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
  4827                                  
  4828                                  ;Public DEV001S, DEV001E 		; Pathgen labels
  4829                                  ;DEV001s:
  4830                                  ;		length of packets
  4831 00001304 160E160D0F0E            LenTab:		DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
  4832                                  ;LenTab:	db	22,14,22,13,15,14
  4833                                  
  4834                                  ;	       Error Function
  4835                                  
  4836                                  CmdTab:
  4837 0000130A 8604                    	DB	86h, DEVRD	; 0 input
  4838 0000130C 8605                    	DB	86h, DEVRDND	; 1 input status
  4839 0000130E 8708                    	DB	87h, DEVWRT	; 2 output
  4840 00001310 870A                    	DB	87h, DEVOST	; 3 output status
  4841 00001312 8607                    	DB	86h, DEVIFL	; 4 input flush
  4842 00001314 8605                    	DB	86H, DEVRDND	; 5 input status with system WAIT
  4843                                  
  4844                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
  4845                                  
  4846                                  ;CmdTab:
  4847                                  ;	db	86h, 4
  4848                                  ;	db	86h, 5
  4849                                  ;	db	87h, 8
  4850                                  ;	db	87h, 10
  4851                                  ;	db	86h, 7
  4852                                  ;	db	86h, 5
  4853                                  
  4854                                  ;DEV001E:
  4855                                  
  4856                                  ;============================================================================
  4857                                  ; FCB.ASM (MSDOS 6.0, 1987)
  4858                                  ;============================================================================
  4859                                  ; 17/07/2018 - Retro DOS v3.0
  4860                                  
  4861                                  ; Character type table for file name scanning
  4862                                  ; Table provides a mapping of characters to validity bits.
  4863                                  ; Four bits are provided for each character.  Values 7Dh and above
  4864                                  ; have all bits set, so that part of the table is chopped off, and
  4865                                  ; the translation routine is responsible for screening these values.
  4866                                  ; The bit values are defined in DOSSYM.INC
  4867                                  
  4868                                  ;	      ; ^A and NUL
  4869                                  ;CharType:
  4870                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4871                                  ;
  4872                                  ;	      ; ^C and ^B
  4873                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4874                                  ;
  4875                                  ;	      ; ^E and ^D
  4876                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4877                                  ;
  4878                                  ;	      ; ^G and ^F
  4879                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4880                                  ;
  4881                                  ;	      ; TAB and BS
  4882                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4883                                  ;
  4884                                  ;	      ; ^K and ^J
  4885                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4886                                  ;
  4887                                  ;	      ; ^M and ^L
  4888                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4889                                  ;
  4890                                  ;	      ; ^O and ^N
  4891                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4892                                  ;
  4893                                  ;	      ; ^Q and ^P
  4894                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4895                                  ;
  4896                                  ;	      ; ^S and ^R
  4897                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4898                                  ;
  4899                                  ;	      ; ^U and ^T
  4900                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4901                                  ;
  4902                                  ;	      ; ^W and ^V
  4903                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4904                                  ;
  4905                                  ;	      ; ^Y and ^X
  4906                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4907                                  ;
  4908                                  ;	      ; ESC and ^Z
  4909                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4910                                  ;
  4911                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4913                                  ;
  4914                                  ;	      ; ^_ and ^^
  4915                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4916                                  ;
  4917                                  ;	      ; ! and SPACE
  4918                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
  4919                                  ;
  4920                                  ;	      ; # and "
  4921                                  ;	 db   LOW (NOT FFCB+FCHK)
  4922                                  ;
  4923                                  ;	      ; $ - )
  4924                                  ;	 db   3 dup (0FFh)
  4925                                  ;
  4926                                  ;	      ; + and *
  4927                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
  4928                                  ;
  4929                                  ;	      ; - and '
  4930                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
  4931                                  ;
  4932                                  ;	      ; / and .
  4933                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
  4934                                  ;
  4935                                  ;	      ; 0 - 9
  4936                                  ;	 db   5 dup (0FFh)
  4937                                  ;
  4938                                  ;	      ; ; and :
  4939                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4940                                  ;
  4941                                  ;	      ; = and <
  4942                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4943                                  ;
  4944                                  ;	      ; ? and >
  4945                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4946                                  ;
  4947                                  ;	      ; A - Z
  4948                                  ;	 db   13 dup (0FFh)
  4949                                  ;
  4950                                  ;	      ; \ and [
  4951                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
  4952                                  ;
  4953                                  ;	      ; ^ and ]
  4954                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4955                                  ;
  4956                                  ;	      ; _ - {
  4957                                  ;	 db   15 dup (0FFh)
  4958                                  ;
  4959                                  ;	      ; } and |
  4960                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4961                                  
  4962                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
  4963                                  ;					; character in the table
  4964                                  
  4965                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
  4966                                  
  4967                                  CharType:
  4968 00001316 F6F6F6F6F6F6F6F6                db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4969 0000131E F6F0F6F6F6F6F6F6        	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4970 00001326 F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4971 0000132E F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4972 00001336 F8FFF6FFFFFFFFFF        	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
  4973 0000133E FFFFFFF4F4FFFEF6        	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
  4974 00001346 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4975 0000134E FFFFF4F4F4F4F4FF        	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
  4976 00001356 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4977 0000135E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4978 00001366 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4979 0000136E FFFFFFF6F6F6FFFF        	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
  4980 00001376 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4981 0000137E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4982 00001386 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4983 0000138E FFFFFFFFF4FFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
  4984 00001396 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4985 0000139E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4986 000013A6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4987 000013AE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4988 000013B6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4989 000013BE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4990 000013C6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4991 000013CE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4992 000013D6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4993 000013DE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4994 000013E6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4995 000013EE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4996 000013F6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4997 000013FE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4998 00001406 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4999 0000140E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5000                                  
  5001                                  ; 02/08/2018 - Retro DOS v3.0
  5002                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5003                                  
  5004                                  ; Offset 13CAh of IBMDOS.COM (MSDOS 3.3), 1987
  5005                                  
  5006 00001416 0000                    exec_init_SP:	dw 0
  5007 00001418 0000                    exec_init_SS:	dw 0
  5008 0000141A 0000                    exec_init_IP:	dw 0
  5009 0000141C 0000                    exec_init_CS:	dw 0
  5010                                  
  5011 0000141E 0000                    exec_signature:	dw 0	; must contain 4D5A  (yay zibo!)
  5012 00001420 0000                    exec_len_mod_512: dw 0	; low 9 bits of length
  5013 00001422 0000                    exec_pages:	dw 0	; number of 512b pages in file
  5014 00001424 0000                    exec_rle_count:	dw 0	; count of reloc entries
  5015 00001426 0000                    exec_par_dir:	dw 0	; number of paragraphs before image
  5016 00001428 0000                    exec_min_BSS:	dw 0	; minimum number of para of BSS
  5017 0000142A 0000                    exec_max_BSS:	dw 0	; max number of para of BSS
  5018 0000142C 0000                    exec_SS:	dw 0	; stack of image
  5019 0000142E 0000                    exec_SP:	dw 0	; SP of image
  5020 00001430 0000                    exec_chksum:	dw 0	; checksum  of file (ignored)
  5021 00001432 0000                    exec_IP:	dw 0	; IP of entry
  5022 00001434 0000                    exec_CS:	dw 0	; CS of entry
  5023 00001436 0000                    exec_rle_table:	dw 0	; byte offset of reloc table
  5024                                  
  5025                                  Exec_Header_Len	EQU $-exec_signature
  5026                                  
  5027                                  ; 02/08/2018 - Retro DOS v3.0
  5028                                  ; SRVCALL.ASM - MSDOS 6.0 - 1991
  5029                                  ;** Server DOS call functions
  5030                                  
  5031 00001438 [3C14]                  SERVERTAB:      dw SERVER_DISP
  5032 0000143A [E666]                  SERVERLEAVE:	dw SERVERRETURN
  5033 0000143C 0B                      SERVER_DISP:	db (SERVER_DISP_END-SERVER_DISP-1)/2
  5034 0000143D [5167]                  		dw SRV_CALL	; 0
  5035 0000143F [E766]                  		dw COMMIT_ALL	; 1
  5036 00001441 [1E67]                  		dw CLOSE_NAME	; 2
  5037 00001443 [2A67]                  		dw CLOSE_UID	; 3
  5038 00001445 [3167]                  		dw CLOSE_UID_PID ; 4
  5039 00001447 [3867]                  		dw GET_LIST	; 5
  5040 00001449 [9267]                  		dw GET_DOS_DATA	; 6
  5041 0000144B [B667]                  		dw SPOOL_OPER	; 7
  5042 0000144D [B667]                  		dw SPOOL_OPER	; 8
  5043 0000144F [B667]                  		dw SPOOL_OPER	; 9
  5044 00001451 [C567]                  		dw _$SetExtendedError ; 10
  5045                                  SERVER_DISP_END:
  5046                                  
  5047                                  ;============================================================================
  5048                                  ; MSCODE.ASM
  5049                                  ;============================================================================
  5050                                  
  5051                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  5052                                  ; 03/03/2018
  5053                                  
  5054                                  ;
  5055                                  ; MSCODE.ASM -- MSDOS code
  5056                                  ;
  5057                                  
  5058                                  ;INCLUDE DOSSEG.ASM
  5059                                  ;INCLUDE STDSW.ASM
  5060                                  
  5061                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  5062                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5063                                  
  5064                                  ;.xcref
  5065                                  ;INCLUDE DOSSYM.ASM
  5066                                  ;INCLUDE DEVSYM.ASM
  5067                                  ;.cref
  5068                                  ;.list
  5069                                  
  5070                                  ;IFNDEF  KANJI
  5071                                  ;KANJI   EQU     0       ; FALSE
  5072                                  ;ENDIF
  5073                                  
  5074                                  ;IFNDEF  IBM
  5075                                  ;IBM     EQU     0
  5076                                  ;ENDIF
  5077                                  
  5078                                  ;IFNDEF  HIGHMEM
  5079                                  ;HIGHMEM  EQU     0
  5080                                  ;ENDIF
  5081                                  
  5082                                          ;i_need  USER_SP,WORD
  5083                                          ;i_need  USER_SS,WORD
  5084                                          ;i_need  SAVEDS,WORD
  5085                                          ;i_need  SAVEBX,WORD
  5086                                          ;i_need  INDOS,BYTE
  5087                                          ;i_need  NSP,WORD
  5088                                          ;i_need  NSS,WORD
  5089                                          ;i_need  CURRENTPDB,WORD
  5090                                          ;i_need  AUXSTACK,BYTE
  5091                                          ;i_need  CONSWAP,BYTE
  5092                                          ;i_need  IDLEINT,BYTE
  5093                                          ;i_need  NOSETDIR,BYTE
  5094                                          ;i_need  ERRORMODE,BYTE
  5095                                          ;i_need  IOSTACK,BYTE
  5096                                          ;i_need  WPERR,BYTE
  5097                                          ;i_need  DSKSTACK,BYTE
  5098                                          ;i_need  CNTCFLAG,BYTE
  5099                                          ;i_need  LEAVEADDR,WORD
  5100                                          ;i_need  NULLDEVPT,DWORD
  5101                                  
  5102                                          ;IF NOT IBM
  5103                                          ;i_need  OEM_HANDLER,DWORD
  5104                                          ;ENDIF
  5105                                  
  5106                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  5107                                  
  5108                                  ;============================================================================
  5109                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  5110                                  ;============================================================================
  5111                                  ; 11/07/2018 - Retro DOS v3.0
  5112                                  
  5113                                  ; 18/07/2018
  5114                                  
  5115                                  ; The following two routines are dispatched to directly with ints disabled
  5116                                  ; immediately after the int 21h entry.	no DIS state is set.
  5117                                  
  5118                                  ; ---------------------------------------------------------------------------
  5119                                  ; $Set_current_PDB takes BX and sets it to be the current process
  5120                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5121                                  ;
  5122                                         ;procedure   $SET_CURRENT_PDB,NEAR
  5123                                  _$SET_CURRENT_PDB:
  5124                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5125 00001453 2E891E[DE02]                    MOV     [CS:CurrentPDB],BX ; 12/03/2018
  5126 00001458 CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5127                                  ;$SET_CURRENT_PDB    ENDP
  5128                                  
  5129                                  ; ---------------------------------------------------------------------------
  5130                                  ; $get_current_PDB returns in BX the current process
  5131                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5132                                  ;
  5133                                          ;procedure $GET_CURRENT_PDB,NEAR
  5134                                  _$GET_CURRENT_PDB:
  5135                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5136 00001459 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB] ; 11/07/2018
  5137 0000145E CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5138                                  ;$GET_CURRENT_PDB    ENDP
  5139                                  ; ---------------------------------------------------------------------------
  5140                                  
  5141                                  ; 11/07/2018 - Retro DOS v3.0
  5142                                  
  5143                                  ;BREAK <$Set_CTRL_C_Trapping -- En/Disable ^C check in dispatcher>
  5144                                  
  5145                                  _$SET_CTRL_C_TRAPPING:
  5146                                  
  5147                                  ; Inputs:
  5148                                  ;       AL = 0 read ^C status
  5149                                  ;       AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  5150                                  ;	AL = 2 Set ^C status to contents of DL.	Output is old state.
  5151                                  ;	     (MSDISP.ASM,MSDOS 6.0, 1991)
  5152                                  ; Function:
  5153                                  ;       Enable disable ^C checking in dispatcher
  5154                                  ; Outputs:
  5155                                  ;       If AL = 0 then DL = 0/1 for ^C off/on
  5156                                  
  5157                                  	; 08/07/2018 - Retro DOS v3.0
  5158                                  
  5159 0000145F 08C0                            OR      AL,AL
  5160 00001461 7506                            JNZ     SHORT CTRL_C_set
  5161                                  
  5162                                  	; 11/07/2018
  5163 00001463 2E8A16[E502]            	mov	dl,[CS:CNTCFLAG]
  5164 00001468 CF                      	iret
  5165                                  
  5166                                  CTRL_C_set:
  5167                                  	; 08/07/2018
  5168 00001469 3C02                    	cmp	al,2
  5169 0000146B 7716                    	ja	short bad_val
  5170 0000146D 740B                    	je	short scct_3
  5171                                  
  5172 0000146F 52                      	push    dx
  5173 00001470 80E201                  	and     dl,1
  5174 00001473 2E8816[E502]            	mov     [cs:CNTCFLAG],dl
  5175 00001478 5A                      	pop     dx
  5176 00001479 CF                      	iret
  5177                                  
  5178                                  scct_3:
  5179 0000147A 80E201                  	and	dl,1
  5180 0000147D 2E8616[E502]                    xchg	dl,[CS:CNTCFLAG]
  5181 00001482 CF                              iret
  5182                                  
  5183                                  bad_val:
  5184 00001483 B0FF                    	MOV	AL,0FFH
  5185 00001485 CF                      	iret
  5186                                  
  5187                                  ; 11/07/2018
  5188                                  
  5189                                  _$SET_PRINTER_FLAG:
  5190                                  	; 08/07/2018 - Retro DOS v3.0
  5191                                  	;mov 	[cs:IOSTACK],al
  5192 00001486 2EA2[060A]              	mov	[cs:PRINTER_FLAG],al
  5193 0000148A CF                      	iret
  5194                                  
  5195                                  ; 08/07/2018 - Retro DOS v3.0
  5196                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  5197                                  
  5198                                  ; ----------------------------------------------------------------------------
  5199                                  ; BREAK   <System call entry points and dispatcher>
  5200                                  ; ----------------------------------------------------------------------------
  5201                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5202                                  
  5203                                          ;procedure   SYSTEM_CALL,NEAR
  5204                                  SYSTEM_CALL:
  5205                                  ;entry	QUIT				; INT 20H entry point
  5206                                  QUIT:
  5207                                  	;MOV	AH,0
  5208 0000148B 30E4                    	xor	ah,ah ; 08/07/2018
  5209 0000148D EB47                    	JMP     SHORT SAVREGS
  5210                                  
  5211                                  ; ---------------------------------------------------------------------------
  5212                                  
  5213                                  ;COMMAND:
  5214                                  ;	;IF	NOT IBM
  5215                                  ;       CMP	AH,SET_OEM_HANDLER
  5216                                  ;       JB      SHORT NOTOEM
  5217                                  ;	; 18/07/2018
  5218                                  ;	je	_$SET_OEM_HANDLER	
  5219                                  ;
  5220                                  ;	; 20/04/2018
  5221                                  ;       ;JMP	_$SET_OEM_HANDLER
  5222                                  ;
  5223                                  ;	; Retro DOS v2.0 - 20/04/2018
  5224                                  ;	CMP	AX, 0FFFFh
  5225                                  ;	;JNE	_$SET_OEM_HANDLER
  5226                                  ;	; 18/07/2018
  5227                                  ;	jne	DO_OEM_FUNC
  5228                                  ;
  5229                                  ;	PUSHA
  5230                                  ;	MOV     SI,RETRODOSMSG
  5231                                  ;       ;CALL	OUTMES
  5232                                  ;wrdosmsg:
  5233                                  ;	mov	ah, 0Eh
  5234                                  ;	mov	bx, 7
  5235                                  ;wrdosmsg_nxt:
  5236                                  ;	cs	lodsb
  5237                                  ;	cmp	al, '$'
  5238                                  ;	je	short wrdosmsg_ok		
  5239                                  ;	int	10h
  5240                                  ;	jmp	short wrdosmsg_nxt
  5241                                  ;wrdosmsg_ok:
  5242                                  ;	POPA
  5243                                  ;	JMP	SHORT BADCALL 
  5244                                  ;	;
  5245                                  ;NOTOEM:
  5246                                  ;	;ENDIF
  5247                                  ;
  5248                                  ;       CMP     AH,MAXCOM
  5249                                  ;       JBE     SHORT SAVREGS
  5250                                  
  5251                                  	; The system call in AH is out of the range that we know how
  5252                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  5253                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  5254                                  	; error as this may break some programs compatability.
  5255                                  
  5256                                  BADCALL:
  5257                                          ;MOV	AL,0
  5258 0000148F 30C0                    	xor	al,al ; 08/07/2018
  5259                                  ;entry	IRET
  5260                                  _IRET:
  5261 00001491 CF                              IRET
  5262                                  
  5263                                  ; ---------------------------------------------------------------------------
  5264                                  
  5265                                  ;entry	CALL_ENTRY                      ; System call entry point and dispatcher
  5266                                  CALL_ENTRY:
  5267 00001492 58                              POP     AX                      ; IP from the long call at 5
  5268 00001493 58                              POP     AX                      ; Segment from the long call at 5
  5269                                          ;POP	WORD [USER_SP]		; IP from the CALL 5
  5270 00001494 2E8F06[1E05]                    POP	WORD [CS:USER_SP] ; 12/03/2018
  5271 00001499 9C                      	PUSHF                           ; Start re-ordering the stack
  5272 0000149A FA                              CLI
  5273 0000149B 50                              PUSH    AX                      ; Save segment
  5274                                          ;PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  5275 0000149C 2EFF36[1E05]                    PUSH	WORD [CS:USER_SP] ; 12/03/2018
  5276 000014A1 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  5277 000014A4 77E9                            JA      SHORT BADCALL
  5278 000014A6 88CC                            MOV     AH,CL
  5279                                  	; 08/07/2018
  5280 000014A8 EB2C                    	jmp	short SAVREGS 
  5281                                  
  5282                                  COMMAND:
  5283                                  	; 08/07/2018 - Retro DOS v3.0
  5284                                  
  5285                                  	;IF	NOT IBM
  5286 000014AA 80FCF8                          CMP	AH,SET_OEM_HANDLER
  5287 000014AD 7221                            JB      SHORT NOTOEM
  5288                                  	; 18/07/2018
  5289 000014AF 0F845E01                	je	_$SET_OEM_HANDLER	
  5290                                  
  5291                                  	; 20/04/2018
  5292                                          ;JMP	_$SET_OEM_HANDLER
  5293                                  
  5294                                  	; Retro DOS v2.0 - 20/04/2018
  5295 000014B3 83F8FF                  	CMP	AX,0FFFFh
  5296                                  	;JNE	_$SET_OEM_HANDLER
  5297                                  	; 18/07/2018
  5298 000014B6 0F856201                	jne	DO_OEM_FUNC
  5299                                  
  5300 000014BA 60                      	PUSHA
  5301 000014BB BE[4E0C]                	MOV     SI,RETRODOSMSG
  5302                                          ;CALL	OUTMES
  5303                                  wrdosmsg:
  5304 000014BE B40E                    	mov	ah, 0Eh
  5305 000014C0 BB0700                  	mov	bx, 7
  5306                                  wrdosmsg_nxt:
  5307 000014C3 2EAC                    	cs	lodsb
  5308 000014C5 3C24                    	cmp	al, '$'
  5309 000014C7 7404                    	je	short wrdosmsg_ok		
  5310 000014C9 CD10                    	int	10h
  5311 000014CB EBF6                    	jmp	short wrdosmsg_nxt
  5312                                  wrdosmsg_ok:
  5313 000014CD 61                      	POPA
  5314 000014CE EBBF                    	JMP	SHORT BADCALL 
  5315                                  	;
  5316                                  
  5317                                  NOTOEM:
  5318                                  	;ENDIF
  5319                                  
  5320 000014D0 FA                      	cli	; 08/07/2018
  5321                                  
  5322                                  _COMMAND: ; MSDOS 3.3 (IBM)
  5323                                  
  5324 000014D1 80FC68                          CMP     AH,MAXCOM
  5325                                  	;JBE	SHORT SAVREGS
  5326 000014D4 77B9                            JA	SHORT BADCALL ; 08/07/2018
  5327                                  
  5328                                  SAVREGS:
  5329                                  	; 10/08/2018
  5330                                  	; 08/07/2018 - Retro DOS v3.0
  5331 000014D6 80FC33                  	cmp	ah,33h
  5332 000014D9 7484                    	jz	short _$SET_CTRL_C_TRAPPING
  5333 000014DB 721C                    	jb	short SaveAllRegs
  5334 000014DD 80FC64                  	cmp	ah,64h
  5335 000014E0 7717                    	ja	short SaveAllRegs
  5336 000014E2 74A2                    	jz	short _$SET_PRINTER_FLAG
  5337 000014E4 80FC51                  	cmp	ah,51h
  5338 000014E7 0F846EFF                	jz	_$GET_CURRENT_PDB
  5339 000014EB 80FC62                  	cmp	ah,62h
  5340 000014EE 0F8467FF                	jz	_$GET_CURRENT_PDB
  5341 000014F2 80FC50                  	cmp     ah,50h
  5342 000014F5 0F845AFF                	jz	_$SET_CURRENT_PDB
  5343                                  SaveAllRegs:
  5344 000014F9 E8FC00                          CALL    save_world
  5345 000014FC 2E8C1E[7E05]                    MOV	[CS:SAVEDS],DS	; 12/03/2018
  5346 00001501 2E891E[7C05]                    MOV	[CS:SAVEBX],BX	; 12/03/2018
  5347 00001506 8CCB                            MOV     BX,CS
  5348 00001508 8EDB                            MOV     DS,BX
  5349                                  ;ASSUME  DS:DOSGROUP
  5350 0000150A FE06[CF02]                      INC     BYTE [INDOS]		; Flag that we're in the DOS
  5351                                  	
  5352                                  	; 08/07/2018 - Retro DOS v3.0        
  5353 0000150E 31C0                    	xor     ax, ax
  5354 00001510 A3[EA02]                	mov     [USER_ID],ax
  5355 00001513 A1[DE02]                	mov     ax,[CurrentPDB]
  5356 00001516 A3[E802]                	mov     [PROC_ID],ax
  5357                                  
  5358 00001519 A1[1E05]                	MOV     AX,[USER_SP]
  5359 0000151C A3[8405]                        MOV     [NSP],AX
  5360 0000151F A1[2005]                        MOV     AX,[USER_SS]
  5361 00001522 A3[8205]                        MOV     [NSS],AX
  5362 00001525 58                              POP     AX
  5363 00001526 50                              PUSH    AX
  5364 00001527 8926[1E05]                      MOV     [USER_SP],SP
  5365 0000152B 8C16[2005]                      MOV     [USER_SS],SS
  5366                                  ;
  5367                                  ; save user stack in his area for later returns (possibly from EXEC)
  5368                                  ; Here comes multitasking!!!
  5369                                  ;
  5370 0000152F 8E1E[DE02]                      MOV     DS,[CurrentPDB]
  5371 00001533 89262E00                        MOV     [PDB.USER_STACK],SP
  5372 00001537 8C163000                        MOV     [PDB.USER_STACK+2],SS
  5373                                  	; 18/07/2018
  5374 0000153B 2EC606[0D05]00          	mov	byte [CS:FSHARING], 0
  5375                                  
  5376 00001541 8CCB                            MOV     BX,CS                   ; no holes here.
  5377 00001543 8ED3                            MOV     SS,BX
  5378                                  ;ASSUME  SS:DOSGROUP
  5379                                  
  5380                                  ;entry	REDISP
  5381                                  REDISP:
  5382 00001545 BC[0607]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  5383 00001548 FB                              STI                             ; Stack OK now
  5384                                  	; 08/07/2018
  5385                                          ;PUSH	CS
  5386                                          ;POP	DS
  5387 00001549 8CCB                    	mov	bx,cs
  5388 0000154B 8EDB                    	mov	ds,bx
  5389 0000154D 30FF                            XOR     BH,BH
  5390 0000154F 883E[0303]                      MOV     [CONSWAP],BH
  5391 00001553 C606[0403]01                    MOV     BYTE [IDLEINT],1
  5392 00001558 883E[F802]                      MOV     BYTE [NoSetDir],bh ; 0	; set directories on search
  5393 0000155C 883E[F602]                      mov	byte [FAILERR],bh ; 0	
  5394 00001560 88E3                    	MOV     BL,AH
  5395 00001562 D1E3                            SHL     BX,1
  5396 00001564 FC                              CLD
  5397 00001565 08E4                            OR      AH,AH
  5398 00001567 7416                            JZ      SHORT DSKROUT		; ABORT
  5399                                  
  5400                                          ;CMP	AH,12
  5401                                          ;JBE	SHORT IOROUT		; Character I/O
  5402                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  5403                                          ;JZ	SHORT IOROUT
  5404                                          ;CMP	AH,SET_CURRENT_PDB
  5405                                          ;JNZ	SHORT DSKROUT
  5406                                  
  5407                                  	; 10/08/2018
  5408 00001569 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  5409 0000156C 743D                    	jz      short DISPCALL
  5410 0000156E 80FC0C                  	cmp     ah,STD_CON_INPUT_FLUSH ; 0Ch
  5411 00001571 770C                    	ja      short DSKROUT
  5412                                  
  5413                                  IOROUT:
  5414 00001573 803E[CE02]00                    CMP     BYTE [ERRORMODE],0
  5415 00001578 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  5416 0000157A BC[060A]                        MOV     SP,IOSTACK
  5417 0000157D EB2C                            JMP     SHORT DISPCALL
  5418                                  
  5419                                  DSKROUT:
  5420                                  	; 08/07/2018 - Retro DOS v3.0
  5421 0000157F A3[E602]                        mov     [USER_IN_AX],ax
  5422 00001582 C606[D102]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk  (Default)
  5423                                  
  5424 00001587 C606[CE02]00                    MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  5425 0000158C C606[D002]FF                    MOV     BYTE [WPERR],-1		; error mode, so good place to
  5426                                                                          ; make sure flags are reset
  5427 00001591 50                      	push    ax
  5428 00001592 B482                    	mov     ah, 82h
  5429 00001594 CD2A                    	int     2Ah 		; Microsoft Networks 
  5430                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  5431 00001596 58                      	pop     ax
  5432 00001597 C606[0403]00            	mov     byte [IDLEINT],0
  5433                                  
  5434 0000159C BC[8608]                        MOV     SP,DSKSTACK
  5435 0000159F F606[E502]FF                    TEST    BYTE [CNTCFLAG],-1
  5436 000015A4 7405                            JZ      SHORT DISPCALL
  5437 000015A6 50                              PUSH    AX
  5438                                          ;invoke	DSKSTATCHK
  5439 000015A7 E8B040                          CALL	DSKSTATCHK
  5440 000015AA 58                      	POP     AX
  5441                                  DISPCALL:
  5442                                  	; 08/07/2018 -Retro DOS v3.0
  5443                                  	;;;PUSH	WORD [LEAVEADDR] ; (***)
  5444                                          ;;;PUSH	WORD [CS:BX+DISPATCH]
  5445                                          ;;;;PUSH WORD [BX+DISPATCH]
  5446                                  
  5447                                  	; 11/07/2018	
  5448                                  	;mov	bx,[CS:BX+DISPATCH]
  5449 000015AB 8B9F[060E]               	mov	bx,[bx+DISPATCH] 
  5450                                  
  5451                                  	;;;MOV	BX,[SAVEBX]
  5452 000015AF 871E[7C05]              	xchg    bx,[SAVEBX]        
  5453                                  
  5454 000015B3 8E1E[7E05]              	MOV     DS,[SAVEDS]
  5455                                  ;ASSUME	DS:NOTHING
  5456                                          ;return
  5457                                  ;;;	RETN	
  5458                                  
  5459 000015B7 36FF16[7C05]            	call	word [SS:SAVEBX]
  5460                                  
  5461                                  ;entry LEAVE
  5462                                  ;;;_LEAVE:				; Exit from a system call
  5463                                  LeaveDOS: ; 18/07/2018 
  5464                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  5465 000015BC FA                      	CLI
  5466                                          ; 12/03/2018
  5467 000015BD 2EFE0E[CF02]            	DEC     BYTE [CS:INDOS]
  5468 000015C2 2E8B26[1E05]                    MOV     SP,[CS:USER_SP]
  5469 000015C7 2E8E16[2005]                    MOV     SS,[CS:USER_SS]
  5470 000015CC 89E5                    	MOV     BP,SP
  5471                                  	;MOV	[BP.user_AX],AL	
  5472                                          ;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  5473 000015CE 884600                          MOV     [BP],AL
  5474 000015D1 2EA1[8405]              	MOV     AX,[CS:NSP]
  5475 000015D5 2EA3[1E05]                      MOV     [CS:USER_SP],AX
  5476 000015D9 2EA1[8205]                      MOV     AX,[CS:NSS]
  5477 000015DD 2EA3[2005]                      MOV     [CS:USER_SS],AX
  5478 000015E1 E80100                  	CALL    restore_world
  5479                                  
  5480 000015E4 CF                              IRET
  5481                                  
  5482                                  ;SYSTEM_CALL ENDP
  5483                                  
  5484                                  ;
  5485                                  ; restore_world restores all registers ('cept SS:SP, CS:IP, flags) from
  5486                                  ; the stack prior to giving the user control
  5487                                  ;
  5488                                  
  5489                                  ; 11/07/2018 - Retro DOS v3.0
  5490                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  5491                                  ;;restore_tmp DW  ?
  5492                                  ;restore_tmp: 
  5493                                  ;	dw	0
  5494                                          ;procedure restore_world,NEAR
  5495                                  restore_world:
  5496 000015E5 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5497 000015EA 58                              POP     AX              ; PUSH    ES
  5498 000015EB 5B                              POP     BX              ; PUSH    DS
  5499 000015EC 59                              POP     CX              ; PUSH    BP
  5500 000015ED 5A                              POP     DX              ; PUSH    DI
  5501 000015EE 5E                              POP     SI              ; PUSH    SI
  5502 000015EF 5F                              POP     DI              ; PUSH    DX
  5503 000015F0 5D                              POP     BP              ; PUSH    CX
  5504 000015F1 1F                              POP     DS              ; PUSH    BX
  5505 000015F2 07                              POP     ES              ; PUSH    AX
  5506                                  	; 07/07/2018 - Retro DOS v3.0
  5507 000015F3 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5508                                  
  5509                                  ;restore_world	ENDP
  5510                                  
  5511                                  ;
  5512                                  ; save_world saves complete registers on the stack
  5513                                  ;
  5514                                          ;procedure save_world,NEAR
  5515                                  save_world:
  5516 000015F8 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5517 000015FD 06                              PUSH    ES
  5518 000015FE 1E                              PUSH    DS
  5519 000015FF 55                              PUSH    BP
  5520 00001600 57                              PUSH    DI
  5521 00001601 56                              PUSH    SI
  5522 00001602 52                              PUSH    DX
  5523 00001603 51                              PUSH    CX
  5524 00001604 53                              PUSH    BX
  5525 00001605 50                              PUSH    AX
  5526                                  	; 07/07/2018 - Retro DOS v3.0
  5527 00001606 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5528                                  
  5529                                  ;save_world	ENDP
  5530                                  
  5531                                  ;
  5532                                  ; get_user_stack returns the user's stack (and hence registers) in DS:SI
  5533                                  ;
  5534                                          ;procedure get_user_stack,NEAR
  5535                                  Get_User_Stack:
  5536                                          ;LDS	SI,DWORD PTR [USER_SP]
  5537                                          ;LDS	SI,[USER_SP]
  5538 0000160B 2EC536[1E05]                    LDS	SI,[CS:USER_SP] ; 12/03/2018
  5539                                  	;return
  5540 00001610 C3                      	RETN
  5541                                  
  5542                                  ;get_user_stack  ENDP
  5543                                  
  5544                                  ; ---------------------------------------------------------------------------
  5545                                  ;
  5546                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  5547                                  ; Inputs:
  5548                                  ;	User registers, User Stack, INTS disabled
  5549                                  ;	If CALL F8, DS:DX is new handler address
  5550                                  ; Function:
  5551                                  ;	Process OEM INT 21 extensions
  5552                                  ; Outputs:
  5553                                  ;	Jumps to OEM_HANDLER if appropriate
  5554                                  ;
  5555                                  ; ---------------------------------------------------------------------------
  5556                                  
  5557                                  ;IF	NOT IBM
  5558                                  
  5559                                  _$SET_OEM_HANDLER:
  5560                                  	; 18/07/2018
  5561                                  
  5562                                  	;JNE	short DO_OEM_FUNC	; If above F8 try to jump to handler
  5563 00001611 2E8916[1400]            	MOV     [CS:OEM_HANDLER],DX	; Set Handler
  5564 00001616 2E8C1E[1600]            	MOV     [CS:OEM_HANDLER+2],DS
  5565 0000161B CF                      	IRET                            ; Quick return, Have altered no registers
  5566                                  
  5567                                  DO_OEM_FUNC:
  5568 0000161C 2E833E[1400]FF          	CMP     WORD [CS:OEM_HANDLER],-1
  5569 00001622 7503                    	JNZ     short OEM_JMP
  5570 00001624 E968FE                  	JMP     BADCALL                 ; Handler not initialized
  5571                                  
  5572                                  OEM_JMP:
  5573 00001627 2EFF2E[1400]            	JMP     FAR [CS:OEM_HANDLER]
  5574                                  
  5575                                  ;       ENDIF
  5576                                  
  5577                                  ;============================================================================
  5578                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5579                                  ;============================================================================
  5580                                  ; 11/07/2018 - Retro DOS v3.0
  5581                                  
  5582                                  ; the nul device driver used to be part of the code.  However, since the 
  5583                                  ; header is in the data, and the entry points are only given as an offset,
  5584                                  ; the strategy and interrupt entry points must also be in the data now.
  5585                                  ;
  5586                                  
  5587                                  ;procedure	snuldev,far
  5588                                  SNULDEV:
  5589                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  5590                                  ; Offset 1599h in IBMDOS.COM (MSDOS 3.3), 1987
  5591                                  	;or	word [ES:BX+3],0100h
  5592 0000162C 26814F030001             	OR	word [ES:BX+SRHEAD.REQSTAT],STDON ; set done bit
  5593                                  ;entry inuldev
  5594                                  INULDEV:
  5595 00001632 CB                      	retf				; must not be a return!
  5596                                  ;endproc snuldev
  5597                                  
  5598                                  ;============================================================================
  5599                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  5600                                  ;============================================================================
  5601                                  ; 18/07/2018 - Retro DOS v3.0
  5602                                  
  5603                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  5604                                  
  5605                                  
  5606                                  ;   AbsSetup - setup for abs disk functions
  5607                                  ;----------------------------------------------------------------------------
  5608                                  
  5609                                  AbsSetup:
  5610 00001633 36FE06[CF02]            	INC	byte [SS:INDOS]		; SS override
  5611 00001638 FB                      	STI
  5612 00001639 FC                      	CLD
  5613 0000163A 1E                      	PUSH	DS
  5614 0000163B 16                      	push	ss
  5615 0000163C 1F                      	pop	ds
  5616 0000163D E89100                  	CALL	GETBP
  5617 00001640 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  5618 00001642 26C7461EFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  5619                                  errdriv:
  5620 00001648 1F                      	POP	DS
  5621 00001649 7301                    	jnc	short AbsSetup2
  5622                                  AbsSetup_retn:
  5623 0000164B C3                      	retn
  5624                                  
  5625                                  AbsSetup2:
  5626                                  	; MSDOS 6.0
  5627                                  	;				; SS override
  5628                                  	;MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  5629                                  	;CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  5630 0000164C 72FD                    	jc	short AbsSetup_retn
  5631                                  	;call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  5632                                  
  5633                                  	; MSDOS 3.3 (& MSDOS 6.0)
  5634 0000164E 1E                      	PUSH	DS
  5635 0000164F 56                      	PUSH	SI
  5636 00001650 50                      	PUSH	AX
  5637                                  
  5638 00001651 16                      	push	ss
  5639 00001652 1F                      	pop	ds
  5640                                  	
  5641 00001653 BE[6003]                	MOV	SI,OPENBUF
  5642 00001656 8804                    	MOV	[SI],AL
  5643 00001658 800441                  	ADD	BYTE [SI],"A"
  5644 0000165B C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  5645 00001660 B80003                  	MOV	AX,0300H
  5646 00001663 F8                      	CLC
  5647 00001664 CD2A                    	INT	int_IBM 		; Will set carry if shared
  5648 00001666 58                      	POP	AX
  5649 00001667 5E                      	POP	SI
  5650 00001668 1F                      	POP	DS
  5651 00001669 73E0                    	jnc	short AbsSetup_retn
  5652                                  
  5653                                  	;mov	word [ss:EXTERR],32h
  5654 0000166B 36C706[D202]3200        	MOV	word [ss:EXTERR],error_not_supported
  5655 00001672 C3                      	retn
  5656                                  
  5657                                  ;---------------------------------------------------------------------------
  5658                                  ;
  5659                                  ; Procedure Name : ABSDRD
  5660                                  ;
  5661                                  ; Interrupt 25 handler.  Performs absolute disk read.
  5662                                  ; Inputs:	AL - 0-based drive number
  5663                                  ;		DS:BX point to destination buffer
  5664                                  ;		CX number of logical sectors to read
  5665                                  ;		DX starting  logical sector number (0-based)
  5666                                  ; Outputs:	Original flags still on stack
  5667                                  ;		Carry set
  5668                                  ;		    AH error from BIOS
  5669                                  ;		    AL same as low byte of DI from INT 24
  5670                                  ;
  5671                                  ;---------------------------------------------------------------------------
  5672                                          ;procedure   ABSDRD,FAR
  5673                                  ABSDRD:
  5674                                  	; 15/07/2018
  5675                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  5676 00001673 FA                              CLI
  5677                                          ;MOV	[USER_SS],SS
  5678                                          ;MOV	[USER_SP],SP
  5679                                  	; 15/03/2018
  5680 00001674 2E8C16[2005]                    MOV	[CS:USER_SS],SS
  5681 00001679 2E8926[1E05]                    MOV	[CS:USER_SP],SP        
  5682 0000167E 0E                      	PUSH    CS
  5683 0000167F 17                              POP     SS
  5684                                  ;ASSUME  SS:DOSGROUP
  5685 00001680 BC[8608]                        MOV	SP,DSKSTACK
  5686                                  
  5687                                  	;; MSDOS 2.11
  5688                                  
  5689                                          ;;;INC	BYTE [INDOS]
  5690                                          ;;INC	BYTE [SS:INDOS]
  5691                                  	;;STI
  5692                                          ;;CLD
  5693                                          ;;PUSH	ES
  5694                                          ;;PUSH	DS
  5695                                          ;;PUSH	SS
  5696                                          ;;POP	DS
  5697                                  ;;;ASSUME DS:DOSGROUP
  5698                                          ;;;invoke GETBP
  5699                                  	;;CALL	GETBP
  5700                                          ;;POP	DS
  5701                                  ;;;ASSUME DS:NOTHING
  5702                                  
  5703                                  	; 15/07/2018 - Retro DOS v3.0
  5704                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5705 00001683 06                              PUSH    ES
  5706 00001684 E8ACFF                  	call    AbsSetup
  5707                                  	;	
  5708 00001687 721A                            JC      SHORT ILEAVE
  5709                                          ;invoke	DSKREAD
  5710 00001689 E82D2B                  	CALL	DSKREAD
  5711                                  TLEAVE:
  5712 0000168C 7415                            JZ      SHORT ILEAVE
  5713                                  
  5714                                  	; 15/07/2018 - Retro DOS v3.0
  5715                                          ;IF	IBM
  5716                                  ; Translate the error code to ancient 1.1 codes
  5717 0000168E 06                              PUSH    ES
  5718 0000168F 0E                              PUSH    CS
  5719 00001690 07                              POP     ES
  5720 00001691 30E4                            XOR     AH,AH			; Nul error code
  5721                                  	;mov	cx,6
  5722 00001693 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  5723 00001696 BF[D50F]                        MOV     DI,ERRIN		; Point to error conditions
  5724 00001699 F2AE                            REPNE   SCASB
  5725 0000169B 7504                            JNZ     SHORT LEAVECODE		; Not found
  5726                                  	;mov	ah,[ES:DI+5]
  5727 0000169D 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  5728                                  LEAVECODE:
  5729 000016A1 07                              POP     ES
  5730                                          ;ENDIF
  5731                                  
  5732 000016A2 F9                              STC
  5733                                  ILEAVE:
  5734 000016A3 07                              POP     ES
  5735 000016A4 FA                              CLI
  5736                                          ;DEC	BYTE [INDOS]
  5737                                          ;15/03/2018
  5738 000016A5 36FE0E[CF02]            	DEC	BYTE [SS:INDOS]
  5739                                  	; 15/08/2018
  5740                                          ;MOV	SS,[CS:USER_SS]
  5741                                  	;MOV	SP,[CS:USER_SP]
  5742 000016AA 368B26[1E05]            	MOV     SP,[SS:USER_SP]
  5743 000016AF 368E16[2005]                    MOV     SS,[SS:USER_SS]
  5744                                  ;ASSUME  SS:NOTHING
  5745 000016B4 FB                              STI
  5746                                          ;return
  5747 000016B5 CB                      	RETF   ; ! FAR return !
  5748                                  
  5749                                  ;ABSDRD	ENDP
  5750                                  
  5751                                  ;---------------------------------------------------------------------------
  5752                                  ;
  5753                                  ; Procedure Name : ABSDWRT
  5754                                  ;
  5755                                  ; Interrupt 26 handler.  Performs absolute disk write.
  5756                                  ; Inputs:	AL - 0-based drive number
  5757                                  ;		DS:BX point to source buffer
  5758                                  ;		CX number of logical sectors to write
  5759                                  ;		DX starting  logical sector number (0-based)
  5760                                  ; Outputs:	Original flags still on stack
  5761                                  ;		Carry set
  5762                                  ;		    AH error from BIOS
  5763                                  ;		    AL same as low byte of DI from INT 24
  5764                                  ;
  5765                                  ;---------------------------------------------------------------------------
  5766                                          ;procedure   ABSDWRT,FAR
  5767                                  ABSDWRT:
  5768                                  	; 15/07/2018
  5769                                  ;ASSUME	DS:NOTHING,ES:NOTHING,SS:NOTHING
  5770                                  
  5771 000016B6 FA                              CLI
  5772                                  	; 15/08/2018
  5773                                  	; 15/03/2018
  5774 000016B7 2E8C16[2005]            	MOV	[CS:USER_SS],SS
  5775 000016BC 2E8926[1E05]                    MOV	[CS:USER_SP],SP
  5776 000016C1 0E                              PUSH    CS
  5777 000016C2 17                              POP     SS
  5778                                  ;ASSUME	SS:DOSGROUP
  5779                                          ;MOV	SP,OFFSET DOSGROUP:DSKSTACK
  5780 000016C3 BC[8608]                        MOV	SP,DSKSTACK
  5781                                  
  5782                                  	;; MSDOS 2.11
  5783                                  
  5784                                          ;;;INC	BYTE [INDOS]
  5785                                          ;;INC	BYTE [SS:INDOS]
  5786                                  	;;STI
  5787                                          ;;CLD
  5788                                          ;;PUSH	ES
  5789                                          ;;PUSH	DS
  5790                                          ;;PUSH	SS
  5791                                          ;;POP	DS
  5792                                  ;;;ASSUME DS:DOSGROUP
  5793                                          ;;;invoke GETBP
  5794                                  	;;CALL	GETBP
  5795                                          ;;POP	DS
  5796                                  ;;;ASSUME DS:NOTHING
  5797                                  
  5798                                  	; 15/07/2018 - Retro DOS v3.0
  5799                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5800 000016C6 06                              PUSH    ES
  5801 000016C7 E869FF                  	call    AbsSetup
  5802                                  	;
  5803 000016CA 72D7                            JC      SHORT ILEAVE
  5804                                          ;invoke DSKWRITE
  5805 000016CC E8132B                          CALL	DSKWRITE
  5806 000016CF EBBB                    	JMP     SHORT TLEAVE
  5807                                  
  5808                                  ;ABSDWRT ENDP
  5809                                  
  5810                                  ;----------------------------------------------------------------------------
  5811                                  ;
  5812                                  ; Procedure Name : GETBP
  5813                                  ;
  5814                                  ; Inputs:
  5815                                  ;	AL = Logical unit number (A = 0)
  5816                                  ; Function:
  5817                                  ;	Find Drive Parameter Block
  5818                                  ; Outputs:
  5819                                  ;	ES:BP points to DPB
  5820                                  ;	[THISDPB] = ES:BP
  5821                                  ;	Carry set if unit number bad or unit is a NET device.
  5822                                  ;		Later case sets extended error error_I24_not_supported
  5823                                  ; No other registers altered
  5824                                  ;
  5825                                  ;----------------------------------------------------------------------------
  5826                                  
  5827                                  GETBP:
  5828                                  	; 11/07/2018 - Retro DOS v3.0
  5829 000016D1 50                      	PUSH	AX
  5830 000016D2 0401                    	ADD	AL, 1		; No increment; need carry flag
  5831 000016D4 7203                    	JC	SHORT SKIPGET
  5832 000016D6 E89D52                  	CALL	GETTHISDRV
  5833                                  	; MSDOS 6.0
  5834                                  	;JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5835                                  	;XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5836                                  	;CMP	AX,error_not_dos_disk	;DCR. is unknown media ? ;AN000;
  5837                                  	;JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5838                                  	;STC				;DCR.			;AN000;
  5839                                  	;MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5840                                  	;MOV	WORD [AbsDskErr],201h
  5841                                  SKIPGET:
  5842 000016D9 58                      	POP	AX
  5843 000016DA 7213                    	JC	SHORT GETBP_RETN
  5844 000016DC C42E[3A05]              	LES	BP,[THISCDS]
  5845                                  	;TEST	WORD [ES:BP+43H],8000H
  5846 000016E0 26F746430080            	TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5847 000016E6 7408                    	JZ	SHORT GETBP_CDS
  5848 000016E8 C706[D202]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32
  5849 000016EE F9                      	STC
  5850                                  GETBP_RETN:
  5851 000016EF C3                      	RETN
  5852                                  
  5853                                  GETBP_CDS:
  5854                                  	;LES	BP,[ES:BP+45H]
  5855 000016F0 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5856                                  
  5857                                  GOTDPB:
  5858                                  	; Load THISDPB from ES:BP
  5859 000016F4 892E[2405]              	MOV	[THISDPB],BP
  5860 000016F8 8C06[2605]              	MOV	[THISDPB+2],ES
  5861 000016FC C3                      	RETN
  5862                                  
  5863                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5864                                  
  5865                                  ;----------------------------------------------------------------------------
  5866                                  ;
  5867                                  ; Procedure Name : SYS_RETURN
  5868                                  ;
  5869                                  ; These are the general system call exit mechanisms. All internal system
  5870                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5871                                  ; is to set the user's flags and set his AX register for return.
  5872                                  ;
  5873                                  ;----------------------------------------------------------------------------
  5874                                  
  5875                                          ;procedure   SYS_RETURN,NEAR
  5876                                  SYS_RETURN:        
  5877                                          ;entry	SYS_RET_OK
  5878                                  SYS_RET_OK:   
  5879                                  	; 18/07/2018
  5880                                  	; Offset 1666h in IBMDOS.COM (MSDOS 3.3), 1987
  5881                                  	; 23/07/2019 - Retro DOS v3.2
  5882                                  	;call	FETCHI_CHECK ; MSDOS 3.3 ! IBMDOS feature !  	
  5883                                       
  5884 000016FD E80BFF                  	call    Get_User_Stack
  5885                                  		; turn off user's carry flag
  5886                                  SYS_RET_OK_clc: ; 24/07/2019  
  5887                                          ;and	word [SI+16h],0FFFEh 
  5888                                         ;and	word [SI+user_env.user_F],~f_Carry
  5889                                  	; 24/07/2019
  5890 00001700 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh 
  5891 00001704 EB10                            JMP     SHORT DO_RET
  5892                                  
  5893                                          ;entry   SYS_RET_ERR
  5894                                  SYS_RET_ERR:        
  5895 00001706 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5896 00001708 E86900                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5897 0000170B E81A00                  	CALL	ErrorMap
  5898                                  
  5899                                  	;entry	From_GetSet
  5900                                  From_GetSet:
  5901 0000170E E8FAFE                          call    Get_User_Stack
  5902                                  		 ; signal carry to user
  5903                                  	;or	word [SI+16h],1
  5904                                  	;OR	word [SI+user_env.user_F],f_Carry
  5905                                  	; 24/07/2019
  5906 00001711 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5907 00001715 F9                      	STC			; also, signal internal error
  5908                                  DO_RET:
  5909                                          ;MOV	[SI+user_env.user_AX], AX ; Really only sets AH
  5910 00001716 8904                    	MOV	[SI],AX
  5911 00001718 C3                      	RETN
  5912                                  
  5913                                  	;entry	FCB_RET_OK
  5914                                  FCB_RET_OK:
  5915                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5916                                  NO_OP:
  5917 00001719 30C0                    	XOR	AL,AL
  5918 0000171B C3                      	retn
  5919                                  
  5920                                  	;entry	FCB_RET_ERR
  5921                                  FCB_RET_ERR:
  5922 0000171C 30E4                    	XOR	AH,AH
  5923 0000171E 36A3[D202]              	mov	[ss:EXTERR],AX
  5924 00001722 E80300                  	CALL	ErrorMap
  5925 00001725 B0FF                    	MOV	AL,-1
  5926 00001727 C3                      	retn
  5927                                  
  5928                                  	;entry	ErrorMap
  5929                                  ErrorMap:
  5930 00001728 56                      	PUSH	SI
  5931                                  				; ERR_TABLE_21 is now in DOSDATA
  5932 00001729 BE[2F0D]                	MOV	SI,ERR_TABLE_21
  5933                                  				; SS override for FAILERR and EXTERR
  5934 0000172C 36803E[F602]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5935 00001732 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5936                                  		 ; Ooops, this is the REAL reason
  5937                                  	;mov	word [SS:EXTERR],53h
  5938 00001734 36C706[D202]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5939                                  EXTENDED_NORMAL:
  5940 0000173B E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5941 0000173E 5E                      	POP	SI
  5942 0000173F C3                      	retn
  5943                                  
  5944                                  	;EndProc SYS_RETURN
  5945                                  
  5946                                  ;---------------------------------------------------------------------------
  5947                                  ;
  5948                                  ; Procedure Name : CAL_LK
  5949                                  ;
  5950                                  ; Inputs:
  5951                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5952                                  ;		(DS NEED not be DOSDATA)
  5953                                  ;	[EXTERR] is set with error
  5954                                  ; Function:
  5955                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5956                                  ; Outputs:
  5957                                  ;	[EXTERR_CLASS] set
  5958                                  ;	[EXTERR_ACTION] set
  5959                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5960                                  ; Destroys SI, FLAGS
  5961                                  ;
  5962                                  ;---------------------------------------------------------------------------
  5963                                  
  5964                                  	;procedure CAL_LK,NEAR
  5965                                  CAL_LK:
  5966 00001740 1E                      	PUSH	DS
  5967 00001741 50                      	PUSH	AX
  5968 00001742 53                      	PUSH	BX
  5969                                  
  5970                                  ;M048	Context DS		; DS:SI -> Table
  5971                                  ;
  5972                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5973                                  ; is DOSDATA
  5974                                  
  5975                                  	;getdseg	<ds>	; M048: DS:SI -> Table
  5976                                  
  5977                                  	; 18/07/2018
  5978 00001743 16                      	push	ss
  5979 00001744 1F                      	pop	ds
  5980                                  
  5981 00001745 8B1E[D202]              	MOV	BX,[EXTERR]	; Get error in BL
  5982                                  TABLK1:
  5983 00001749 AC                      	LODSB
  5984                                  
  5985 0000174A 3CFF                    	CMP	AL,0FFH
  5986 0000174C 7409                    	JZ	short GOT_VALS	; End of table
  5987 0000174E 38D8                    	CMP	AL,BL
  5988 00001750 7405                    	JZ	short GOT_VALS	; Got entry
  5989 00001752 83C603                  	ADD	SI,3		; Next table entry
  5990                                  	; 15/08/2018
  5991 00001755 EBF2                    	JMP	short TABLK1
  5992                                  
  5993                                  GOT_VALS:
  5994 00001757 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5995                                  
  5996 00001758 80FCFF                  	CMP	AH,0FFH
  5997 0000175B 7404                    	JZ	short NO_SET_ACT
  5998 0000175D 8826[D402]              	MOV	[EXTERR_ACTION],AH	; Set ACTION
  5999                                  NO_SET_ACT:
  6000 00001761 3CFF                    	CMP	AL,0FFH
  6001 00001763 7403                    	JZ	short NO_SET_CLS
  6002 00001765 A2[D502]                	MOV	[EXTERR_CLASS],AL	; Set CLASS
  6003                                  NO_SET_CLS:
  6004 00001768 AC                      	LODSB			; Get LOCUS
  6005                                  
  6006 00001769 3CFF                    	CMP	AL,0FFH
  6007 0000176B 7403                    	JZ	short NO_SET_LOC
  6008 0000176D A2[D102]                	MOV	[EXTERR_LOCUS],AL
  6009                                  NO_SET_LOC:
  6010 00001770 5B                      	POP	BX
  6011 00001771 58                      	POP	AX
  6012 00001772 1F                      	POP	DS
  6013 00001773 C3                      	retn
  6014                                  
  6015                                  	;EndProc CAL_LK
  6016                                  
  6017                                  ;---------------------------------------------------------------------------
  6018                                  ;
  6019                                  ; Procedure Name : ETAB_LK
  6020                                  ;
  6021                                  ; Inputs:
  6022                                  ;	AX is error code
  6023                                  ;	[USER_IN_AX] has AH value of system call involved
  6024                                  ; Function:
  6025                                  ;	Make sure error code is appropriate to this call.
  6026                                  ; Outputs:
  6027                                  ;	AX MAY be mapped error code
  6028                                  ;	[EXTERR] = Input AX
  6029                                  ; Destroys ONLY AX and FLAGS
  6030                                  ;
  6031                                  ;---------------------------------------------------------------------------
  6032                                  
  6033                                  	;procedure ETAB_LK,NEAR
  6034                                  
  6035                                  ETAB_LK: ; 10/08/2018
  6036 00001774 1E                      	PUSH	DS
  6037 00001775 56                      	PUSH	SI
  6038 00001776 51                      	PUSH	CX
  6039 00001777 53                      	PUSH	BX
  6040                                  
  6041                                  	;Context DS			; SS is DOSDATA
  6042                                  
  6043 00001778 16                      	push	ss
  6044 00001779 1F                      	pop	ds
  6045                                  
  6046 0000177A A3[D202]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  6047                                  
  6048                                  					; I21_MAP_E_TAB is now in DOSCODE
  6049 0000177D BE[930C]                	MOV	SI,I21_MAP_E_TAB
  6050 00001780 88C7                    	MOV	BH,AL			; Real code to BH
  6051 00001782 8A1E[E702]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  6052                                  TABLK2:
  6053                                  ;;hkn;	LODSW
  6054                                  ;	LODS	word ptr cs:[si] ; MSDOS 6.0
  6055                                  	
  6056                                  	; 18/07/2018
  6057 00001786 AD                      	lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  6058                                  
  6059 00001787 3CFF                    	CMP	AL,0FFH 		; End of table?
  6060 00001789 740C                    	JZ	short NOT_IN_TABLE	; Yes
  6061 0000178B 38D8                    	CMP	AL,BL			; Found call?
  6062 0000178D 740C                    	JZ	short GOT_CALL		; Yes
  6063 0000178F 86E0                    	XCHG	AH,AL			; Count to AL
  6064 00001791 30E4                    	XOR	AH,AH			; Make word for add
  6065 00001793 01C6                    	ADD	SI,AX			; Next table entry
  6066 00001795 EBEF                    	JMP	short TABLK2
  6067                                  
  6068                                  NOT_IN_TABLE:
  6069 00001797 88F8                    	MOV	AL,BH			; Restore original code
  6070 00001799 EB0B                    	JMP	SHORT NO_MAP
  6071                                  
  6072                                  GOT_CALL:
  6073 0000179B 88E1                    	MOV	CL,AH
  6074 0000179D 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  6075                                  CHECK_CODE:
  6076                                  ;;hkn;	LODSB
  6077                                  ;	LODS	byte ptr cs:[si]
  6078                                  
  6079                                  	; 18/07/2018
  6080 0000179F AC                      	lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  6081                                  
  6082 000017A0 38F8                    	CMP	AL,BH			; Code OK?
  6083 000017A2 7402                    	JZ	short NO_MAP		; Yes
  6084 000017A4 E2F9                    	LOOP	CHECK_CODE
  6085                                  NO_MAP:
  6086 000017A6 30E4                    	XOR	AH,AH			; AX is now valid code
  6087 000017A8 5B                      	POP	BX
  6088 000017A9 59                      	POP	CX
  6089 000017AA 5E                      	POP	SI
  6090 000017AB 1F                      	POP	DS
  6091 000017AC C3                      	retn
  6092                                  
  6093                                  	;EndProc ETAB_LK
  6094                                  
  6095                                  ; 18/07/2018 - Retro DOS v3.0
  6096                                  ;---------------------------------------------------------------------------
  6097                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  6098                                  
  6099                                  ;IF installed
  6100                                  ;---------------------------------------------------------------------------
  6101                                  ;
  6102                                  ; Procedure Name : SetBad
  6103                                  ;
  6104                                  ; SetBad sets up info for bad functions
  6105                                  ;
  6106                                  ;---------------------------------------------------------------------------
  6107                                  
  6108                                  SetBad:
  6109                                  	;mov	ax,1
  6110 000017AD B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  6111                                  
  6112                                  ;	set up ds to point to DOSDATA
  6113                                  
  6114                                  	; MSDOS 6.0
  6115                                  	;push	ds
  6116                                  
  6117                                  	;getdseg <ds>
  6118                                  	;MOV	[EXTERR_LOCUS],errLOC_Unk	
  6119                                  
  6120                                  	; MSDOS 3.3
  6121                                  	;mov	byte [cs:EXTERR_LOCUS],1
  6122 000017B0 2EC606[D102]01          	MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  6123                                  
  6124                                  	;pop	ds	  		;hkn; restore ds
  6125                                  
  6126 000017B6 F9                      	STC
  6127 000017B7 C3                      	retn
  6128                                  
  6129                                  ;--------------------------------------------------------------------------
  6130                                  ;
  6131                                  ; Procedure Name : BadCall
  6132                                  ;
  6133                                  ; BadCall is the initial routine for bad function calls
  6134                                  ;
  6135                                  ;--------------------------------------------------------------------------
  6136                                  
  6137                                  BadCall:
  6138 000017B8 E8F2FF                  	call	SetBad
  6139 000017BB CB                      	retf
  6140                                  
  6141                                  ;--------------------------------------------------------------------------
  6142                                  ;
  6143                                  ; OKCall always sets carry to off.
  6144                                  ;
  6145                                  ;-----------------------------------------------------------------------
  6146                                  
  6147                                  OKCall:
  6148 000017BC F8                      	CLC
  6149 000017BD CB                      	retf
  6150                                  
  6151                                  ;---------------------------------------------------------------------------
  6152                                  ;
  6153                                  ; Procedure Name : INT2F
  6154                                  ;
  6155                                  ; INT 2F handler works as follows:
  6156                                  ;   PUSH    AX
  6157                                  ;   MOV     AX,multiplex:function
  6158                                  ;   INT     2F
  6159                                  ;   POP     ...
  6160                                  ; The handler itself needs to make the AX available for the various routines.
  6161                                  ;
  6162                                  ;----------------------------------------------------------------------------
  6163                                  
  6164                                  ;PUBLIC	Int2F
  6165                                  ;INT2F	PROC	FAR
  6166                                  
  6167                                  	; 18/07/2018 - Retro DOS v3.0
  6168                                  
  6169                                  INT2F:
  6170                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  6171                                  INT2FNT:
  6172                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6173 000017BE FB                      	STI
  6174                                  	;cmp	ah,11h
  6175 000017BF 80FC11                  	CMP	AH,MultNET
  6176 000017C2 750A                    	JNZ	short INT2FSHR
  6177                                  TestInstall:
  6178 000017C4 08C0                    	OR	AL,AL
  6179 000017C6 7403                    	JZ	short Leave2F
  6180                                  BadFunc:
  6181 000017C8 E8E2FF                  	CALL	SetBad
  6182                                  
  6183                                  	;entry	Leave2F
  6184                                  Leave2F:
  6185 000017CB CA0200                  	RETF	2			; long return + clear flags off stack
  6186                                  
  6187                                  INT2FSHR:
  6188                                  	;cmp	ah,10h
  6189 000017CE 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  6190 000017D1 74F1                    	JZ	short TestInstall	; yes, check for installation
  6191                                  INT2FNLS:
  6192                                  	;cmp	ah,14h
  6193 000017D3 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  6194 000017D6 74EC                    	JZ	short TestInstall	; yes check for installation
  6195                                  INT2FDOS:
  6196                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6197                                  
  6198                                  	; 18/07/2018
  6199                                  	; MSDOS 6.0
  6200                                  	;CMP	AH,MultDOS
  6201                                  	;JNZ	check_win		;check if win386 broadcast
  6202                                  	;jmp	DispatchDOS
  6203                                  
  6204                                  	; .... win386 .... 
  6205                                  	
  6206                                  	; 18/07/2018
  6207                                  	; MSDOS 3.3
  6208                                  	;cmp	ah,12h	
  6209 000017D8 80FC12                  	CMP	AH,MultDOS
  6210 000017DB 7401                    	jz	short DispatchDOS
  6211 000017DD CF                      	iret
  6212                                  
  6213                                  ;INT2F	ENDP
  6214                                  	
  6215                                  DispatchDOS:
  6216 000017DE 2EFF36[D80E]            	PUSH	word [CS:FOO]		; push return address
  6217 000017E3 2EFF36[DA0E]            	PUSH	word [CS:DTab]		; push table address
  6218 000017E8 50                      	PUSH	AX			; push index
  6219 000017E9 55                      	PUSH	BP
  6220 000017EA 89E5                    	MOV	BP,SP
  6221                                  		; stack looks like:
  6222                                  		;   0	BP
  6223                                  		;   2	DISPATCH
  6224                                  		;   4	TABLE
  6225                                  		;   6	RETURN
  6226                                  		;   8	LONG-RETURN
  6227                                  		;   c	FLAGS
  6228                                  		;   e	AX
  6229                                  	
  6230 000017EC 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6231 000017EF 5D                      	POP	BP
  6232 000017F0 E8A907                  	call	TableDispatch
  6233 000017F3 EBD3                    	JMP	short BadFunc 		; return indicates invalid function
  6234                                  
  6235                                  INT2F_etcetera:
  6236                                  	;entry	DosGetGroup
  6237                                  DosGetGroup:
  6238                                  	; MSDOS 6.0
  6239                                  ;SR; Cannot use CS now
  6240                                  ;
  6241                                  ;	PUSH	CS
  6242                                  ;	POP	DS
  6243                                  
  6244                                  	;getdseg <ds>
  6245                                  	;retn
  6246                                  
  6247                                  	; MSDOS 3.3
  6248 000017F5 0E                      	push	cs
  6249 000017F6 1F                      	pop	ds
  6250 000017F7 C3                      	retn
  6251                                  
  6252                                  	;entry	DOSInstall
  6253                                  DOSInstall:
  6254 000017F8 B0FF                    	MOV	AL,0FFh
  6255 000017FA C3                      	retn
  6256                                  
  6257                                  ;ENDIF
  6258                                  
  6259                                  ;============================================================================
  6260                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  6261                                  ;============================================================================
  6262                                  ; 18/07/2018 - Retro DOS 3.0
  6263                                  
  6264                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
  6265                                  ;     ENTRY: AL = Character to map
  6266                                  ;     EXIT:  AL = The converted character
  6267                                  ; Alters no registers except AL and flags.
  6268                                  ; The routine should do nothing to chars below 80H.
  6269                                  ;
  6270                                  ; Example:
  6271                                  
  6272                                  ;Procedure   MAP_CASE,FAR
  6273                                  
  6274                                  MAP_CASE:
  6275                                  	; Offset 176Ch in IBMDOS.COM (MSDOS 3.3), 1987
  6276                                  	
  6277 000017FB 3C80                    	CMP	AL,80H
  6278 000017FD 7301                    	JAE	short Map1	;Map no chars below 80H ever
  6279 000017FF CB                      	RETF
  6280                                  Map1:
  6281 00001800 2C80                    	SUB	AL,80H		;Turn into index value
  6282 00001802 1E                      	PUSH	DS
  6283 00001803 53                      	PUSH	BX
  6284 00001804 BB[8810]                	MOV	BX,UCASE_TAB+2
  6285                                  FINISH:
  6286 00001807 0E                      	PUSH	CS		;Move to DS
  6287 00001808 1F                      	POP	DS
  6288 00001809 D7                      	XLAT			; Get upper case character
  6289 0000180A 5B                      	POP	BX
  6290 0000180B 1F                      	POP	DS
  6291                                  L_RET:	
  6292 0000180C CB                      	RETF
  6293                                  
  6294                                  ;EndProc MAP_CASE
  6295                                  
  6296                                  ;============================================================================
  6297                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6298                                  ;============================================================================
  6299                                  ; 18/07/2018 - Retro DOS v3.0
  6300                                  
  6301                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6302                                  
  6303                                  ; OEMFunction key is expected to process a single function
  6304                                  ;   key input from a device and dispatch to the proper
  6305                                  ;   routines leaving all registers UNTOUCHED.
  6306                                  ;
  6307                                  ; Inputs:   CS, SS are DOSGROUP
  6308                                  ; Outputs:  None. This function is expected to JMP to onw of
  6309                                  ;           the following labels:
  6310                                  ;
  6311                                  ;           GetCh       - ignore the sequence
  6312                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6313                                  ;           ExitIns     - toggle insert mode
  6314                                  ;           EnterIns    - toggle insert mode
  6315                                  ;           BackSp      - move backwards one space
  6316                                  ;           ReEdit      - reedit the line with a new template
  6317                                  ;           KilNew      - discard the current line and start from scratch
  6318                                  ;           CopyLin     - copy the rest of the template into the line
  6319                                  ;           SkipStr     - read the next character and skip to it in the template
  6320                                  ;           CopyStr     - read next char and copy from template to line until char
  6321                                  ;           SkipOne     - advance position in template one character
  6322                                  ;           CopyOne     - copy next character in template into line
  6323                                  ;           CtrlZ       - place a ^Z into the template
  6324                                  ; Registers that are allowed to be modified by this function are:
  6325                                  ;           AX, CX, BP
  6326                                  
  6327                                  OEMFunctionKey:
  6328 0000180D E87508                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6329 00001810 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6330 00001812 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6331 00001813 BF[D312]                	MOV     DI,ESCTAB		; offset of second byte table
  6332 00001816 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6333 00001818 5F                      	POP     DI                      ; restore DI
  6334 00001819 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6335 0000181B 89CD                    	MOV     BP,CX                   ; move to indexable register
  6336                                  	;JMP	word [SS:BP+ESCFUNC]	; Go to the right routine
  6337 0000181D FFA6[E112]              	JMP	word [BP+ESCFUNC]
  6338                                  	
  6339                                  ;============================================================================
  6340                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6341                                  ;============================================================================
  6342                                  ; Retro DOS v3.0 - 18/07/2018
  6343                                  
  6344                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6345                                  ;----------------------------------------------------------------------------
  6346                                  ; Retro DOS v2.0 - 13/03/2018
  6347                                  
  6348                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6349                                  
  6350                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6351                                  
  6352                                  ;**	$GET_DATE - Get Current Date
  6353                                  ;
  6354                                  ;	ENTRY	none
  6355                                  ;	EXIT	(cx:dx) = current date
  6356                                  ;	USES	all
  6357                                  
  6358                                  _$GET_DATE:	;System call 42
  6359                                  
  6360 00001821 16                              PUSH    SS
  6361 00001822 1F                              POP     DS
  6362 00001823 E8B700                          CALL	READTIME        ;Check for rollover to next day
  6363 00001826 A1[FE02]                        MOV     AX,[YEAR]
  6364                                  
  6365                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6366                                  
  6367 00001829 8B1E[FC02]                      MOV     BX,[DAY]	; fetch both day and month
  6368 0000182D E8DBFD                  	CALL	Get_User_Stack	;Get pointer to user registers
  6369                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6370 00001830 895C06                  	MOV	[SI+user_env.user_DX],BX
  6371 00001833 05BC07                          ADD     AX,1980         ;Put bias back
  6372                                          ;MOV    [SI+4],AX  	;CX=year
  6373 00001836 894404                  	MOV	[SI+user_env.user_CX],AX
  6374                                          ;MOV	AL,[WEEKDAY]
  6375 00001839 36A0[0203]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6376 0000183D C3                      	RETN
  6377                                  
  6378                                  ;**	$SET_DATE - Set Current Date
  6379                                  ;
  6380                                  ;	ENTRY	(cx:dx) = current date
  6381                                  ;	EXIT	(al) = -1 iff bad date
  6382                                  ;		(al) = 0 if ok
  6383                                  ;	USES	all
  6384                                  
  6385                                  _$SET_DATE:			;System call 43
  6386                                  
  6387 0000183E B0FF                            MOV     AL,-1           ;Be ready to flag error
  6388 00001840 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6389 00001844 7217                            JC      SHORT RET24	;Error if not big enough
  6390 00001846 83F977                          CMP     CX,119          ;Year must be less than 2100
  6391 00001849 7712                            JA      SHORT RET24
  6392 0000184B 08F6                            OR      DH,DH
  6393 0000184D 740E                            JZ      SHORT RET24
  6394 0000184F 08D2                            OR      DL,DL
  6395 00001851 740A                            JZ      SHORT RET24	;Error if either month or day is 0
  6396 00001853 80FE0C                          CMP     DH,12           ;Check against max. month
  6397 00001856 7705                            JA      SHORT RET24
  6398 00001858 16                              PUSH    SS
  6399 00001859 1F                              POP     DS
  6400 0000185A E81301                  	CALL	DODATE
  6401                                  RET24:  
  6402 0000185D C3                      	RETN
  6403                                  
  6404                                  
  6405                                  ;**	$GET_TIME - Get Current Time
  6406                                  ;
  6407                                  ;	ENTRY	none
  6408                                  ;	EXIT	(cx:dx) = current time
  6409                                  ;	USES	all
  6410                                  
  6411                                  _$GET_TIME:			;System call 44
  6412                                  
  6413 0000185E 16                              PUSH    SS
  6414 0000185F 1F                              POP     DS
  6415 00001860 E87A00                  	CALL	READTIME
  6416 00001863 E8A5FD                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6417                                         ;MOV     [SI+6],DX
  6418 00001866 895406                  	MOV	[SI+user_env.user_DX],DX
  6419                                         ;MOV     [SI+4],CX
  6420 00001869 894C04                  	MOV	[SI+user_env.user_CX],CX
  6421 0000186C 30C0                            XOR     AL,AL
  6422                                  RET26:  
  6423 0000186E C3                      	RETN
  6424                                  
  6425                                  ;**	$SET_TIME - Set Current Time
  6426                                  ;
  6427                                  ;	ENTRY	(cx:dx) = time
  6428                                  ;	EXIT	(al) = 0 if 0k
  6429                                  ;		(al) = -1 if invalid
  6430                                  ;	USES	ALL
  6431                                  
  6432                                  _$SET_TIME:			;System call 45
  6433                                  
  6434 0000186F B0FF                            MOV     AL,-1           ;Flag in case of error
  6435 00001871 80FD18                          CMP     CH,24           ;Check hours
  6436 00001874 73F8                            JAE     SHORT RET26
  6437 00001876 80F93C                          CMP     CL,60           ;Check minutes
  6438 00001879 73F3                            JAE     SHORT RET26
  6439 0000187B 80FE3C                          CMP     DH,60           ;Check seconds
  6440 0000187E 73EE                            JAE     SHORT RET26
  6441 00001880 80FA64                          CMP     DL,100          ;Check 1/100's
  6442 00001883 73E9                            JAE     SHORT RET26
  6443 00001885 51                              PUSH    CX
  6444 00001886 52                              PUSH    DX
  6445 00001887 16                              PUSH    SS
  6446 00001888 1F                              POP     DS
  6447 00001889 BB[5803]                        MOV     BX,TIMEBUF
  6448 0000188C B90600                          MOV     CX,6
  6449 0000188F 31D2                            XOR     DX,DX
  6450 00001891 89D0                            MOV     AX,DX
  6451 00001893 53                              PUSH    BX
  6452 00001894 E88C36                  	CALL	SETREAD
  6453 00001897 1E                              PUSH    DS
  6454 00001898 C536[2E00]                      LDS     SI,[BCLOCK]
  6455 0000189C E86036                  	CALL	DEVIOCALL2      ;Get correct day count
  6456 0000189F 1F                              POP     DS
  6457 000018A0 5B                              POP     BX
  6458 000018A1 E8B236                  	CALL	SETWRITE
  6459 000018A4 8F06[5C03]                      POP     WORD [TIMEBUF+4]
  6460 000018A8 8F06[5A03]                      POP     WORD [TIMEBUF+2]
  6461 000018AC C536[2E00]                      LDS     SI,[BCLOCK]
  6462 000018B0 E84C36                  	CALL	DEVIOCALL2      ;Set the time
  6463 000018B3 30C0                            XOR     AL,AL
  6464 000018B5 C3                              RETN
  6465                                  
  6466                                  ; 11/07/2018 - Retro DOS v3.0
  6467                                  ; Retro DOS v2.0 - 14/03/2018
  6468                                  
  6469                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6470                                  
  6471                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6472                                  
  6473                                  ;
  6474                                  ; Date16 returns the current date in AX, current time in DX
  6475                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6476                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6477                                  ;
  6478                                  
  6479                                  DATE16:
  6480                                  	
  6481                                  ;M048	Context DS
  6482                                  ;
  6483                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6484                                  ; is DOSDATA
  6485                                  
  6486                                  	;getdseg	<ds>			; M048
  6487                                  
  6488                                  	;PUSH	SS
  6489 000018B6 0E                      	PUSH	CS
  6490 000018B7 1F                      	POP	DS
  6491                                  
  6492 000018B8 51                              PUSH    CX
  6493 000018B9 06                              PUSH    ES
  6494 000018BA E82000                          CALL    READTIME
  6495 000018BD 07                              POP     ES
  6496 000018BE D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6497 000018C0 D0E1                            SHL     CL,1
  6498 000018C2 D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6499 000018C4 D1E1                            SHL     CX,1
  6500 000018C6 D1E1                            SHL     CX,1
  6501 000018C8 D0EE                            SHR     DH,1            ;Count every two seconds
  6502 000018CA 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6503 000018CC 89CA                            MOV     DX,CX
  6504                                  
  6505                                  ;	WARNING!  MONTH and YEAR must be adjacently allocated
  6506                                  
  6507 000018CE A1[FD02]                        MOV     AX,[MONTH]	;Fetch month and year
  6508 000018D1 B104                            MOV     CL,4
  6509 000018D3 D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6510 000018D5 D1E0                            SHL     AX,1
  6511 000018D7 59                              POP     CX
  6512 000018D8 0A06[FC02]                      OR      AL,[DAY]
  6513                                  RET21:
  6514 000018DC C3                              RETN
  6515                                  
  6516                                  READTIME:
  6517                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6518                                  ;Uses AX, CX, DX.
  6519                                  
  6520 000018DD C706[8D0F]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6521 000018E3 56                              PUSH    SI
  6522 000018E4 53                              PUSH    BX
  6523                                  
  6524 000018E5 BB[5803]                        MOV     BX,TIMEBUF
  6525                                  
  6526 000018E8 B90600                          MOV     CX,6
  6527 000018EB 31D2                            XOR     DX,DX
  6528 000018ED 89D0                            MOV     AX,DX
  6529 000018EF E83136                  	CALL	SETREAD
  6530 000018F2 1E                              PUSH    DS
  6531 000018F3 C536[2E00]                      LDS     SI,[BCLOCK]
  6532 000018F7 E80536                  	CALL	DEVIOCALL2      ;Get correct date and time
  6533 000018FA 1F                              POP     DS
  6534 000018FB 5B                              POP     BX
  6535 000018FC 5E                              POP     SI
  6536 000018FD A1[5803]                        MOV     AX,[TIMEBUF]
  6537 00001900 8B0E[5A03]                      MOV     CX,[TIMEBUF+2]
  6538 00001904 8B16[5C03]                      MOV     DX,[TIMEBUF+4]
  6539 00001908 3B06[0003]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6540                                          ;JZ	SHORT RET22
  6541 0000190C 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6542                                  	;cmp	ax,43830
  6543 0000190E 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6544 00001911 733D                            JAE     SHORT RET22	;Ignore if too large
  6545 00001913 A3[0003]                        MOV     [DAYCNT],AX
  6546 00001916 56                              PUSH    SI
  6547 00001917 51                              PUSH    CX
  6548 00001918 52                              PUSH    DX              ;Save time
  6549 00001919 31D2                            XOR     DX,DX
  6550                                  	;mov	cx,1461
  6551 0000191B B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6552 0000191E F7F1                            DIV     CX              ;Compute number of 4-year units
  6553 00001920 D1E0                            SHL     AX,1
  6554 00001922 D1E0                            SHL     AX,1
  6555 00001924 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6556 00001926 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6557                                  
  6558 00001928 BE[7F0C]                        MOV     SI,YRTAB        ;Table of days in each year
  6559                                  
  6560 0000192B E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6561 0000192E D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6562 00001930 7304                            JNC     SHORT SK	;Extra half-year?
  6563 00001932 81C2C800                        ADD     DX,200
  6564                                  SK:
  6565 00001936 E82400                          CALL    SETYEAR
  6566 00001939 B101                            MOV     CL,1            ;At least at first month in year
  6567                                  
  6568 0000193B BE[870C]                        MOV     SI,MONTAB       ;Table of days in each month
  6569                                          
  6570 0000193E E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6571 00001941 880E[FD02]                      MOV     [MONTH],CL
  6572 00001945 42                              INC     DX              ;Remainder is day of month (start with one)
  6573 00001946 8816[FC02]                      MOV     [DAY],DL
  6574 0000194A E89400                          CALL    WKDAY           ;Set day of week
  6575 0000194D 5A                              POP     DX
  6576 0000194E 59                              POP     CX
  6577 0000194F 5E                              POP     SI
  6578                                  RET22:  
  6579 00001950 C3                      	RETN
  6580                                  
  6581                                  DSLIDE:
  6582 00001951 B400                            MOV     AH,0
  6583                                  DSLIDE1:
  6584 00001953 AC                              LODSB			;Get count of days
  6585 00001954 39C2                            CMP     DX,AX           ;See if it will fit
  6586 00001956 7217                            JB      SHORT RET23	;If not, done
  6587 00001958 29C2                            SUB     DX,AX
  6588 0000195A 41                              INC     CX              ;Count one more month/year
  6589 0000195B EBF6                            JMP     SHORT DSLIDE1
  6590                                  
  6591                                  SETYEAR:
  6592                                  ;Set year with value in CX. Adjust length of February for this year.
  6593                                  
  6594                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6595                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6596                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6597                                  ;	preserve DS as CHKYR is also called as a routine.
  6598                                  
  6599                                  
  6600                                  	; MSDOS 6.0 (18/07/2018) ; *
  6601                                  
  6602                                  	;GETDSEG DS
  6603                                  
  6604 0000195D 0E                      	PUSH	CS  ; *
  6605 0000195E 1F                      	POP	DS  ; *
  6606                                  
  6607                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987 
  6608                                  
  6609 0000195F 880E[FE02]                      MOV     [YEAR],CL
  6610                                  CHKYR:
  6611 00001963 F6C103                          TEST    CL,3            ;Check for leap year
  6612 00001966 B01C                            MOV     AL,28
  6613 00001968 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6614 0000196A FEC0                            INC     AL              ;Add leap day
  6615                                  SAVFEB:
  6616                                  	;mov	[february],al
  6617 0000196C A2[880C]                        MOV     [MONTAB+1],AL   ;Store for February
  6618                                  RET23:  
  6619 0000196F C3                      	RETN
  6620                                  
  6621                                  DODATE:
  6622 00001970 E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6623 00001973 88F0                            MOV     AL,DH
  6624                                  
  6625 00001975 BB[860C]                        MOV     BX,MONTAB-1
  6626                                  
  6627 00001978 D7                              XLAT                    ;Look up days in month
  6628 00001979 38D0                            CMP     AL,DL
  6629 0000197B B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6630                                          ;JB	SHORT RET25	;Error if too many days
  6631 0000197D 72F0                            jb	short RET23 ; 18/07/2018
  6632 0000197F E8DBFF                  	CALL    SETYEAR
  6633                                  ;
  6634                                  ; WARNING!  DAY and MONTH must be adjacently allocated
  6635                                  ;
  6636 00001982 8916[FC02]                      MOV     [DAY],DX	;Set both day and month
  6637 00001986 D1E9                            SHR     CX,1
  6638 00001988 D1E9                            SHR     CX,1
  6639                                  	;mov	ax,1461
  6640 0000198A B8B505                          MOV     AX,FOURYEARS
  6641 0000198D 89D3                            MOV     BX,DX
  6642 0000198F F7E1                            MUL     CX
  6643 00001991 8A0E[FE02]                      MOV     CL,[YEAR]
  6644 00001995 80E103                          AND     CL,3
  6645                                  
  6646 00001998 BE[7F0C]                        MOV     SI,YRTAB
  6647                                  
  6648 0000199B 89C2                            MOV     DX,AX
  6649 0000199D D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6650 0000199F E85200                          CALL    DSUM            ;Add up the days in each year
  6651 000019A2 88F9                            MOV     CL,BH           ;Month of year
  6652                                  
  6653 000019A4 BE[870C]                        MOV     SI,MONTAB
  6654                                  
  6655 000019A7 49                              DEC     CX              ;Account for months starting with one
  6656 000019A8 E84900                          CALL    DSUM            ;Add up days in each month
  6657 000019AB 88D9                            MOV     CL,BL           ;Day of month
  6658 000019AD 49                              DEC     CX              ;Account for days starting with one
  6659 000019AE 01CA                            ADD     DX,CX           ;Add in to day total
  6660 000019B0 92                              XCHG    AX,DX           ;Get day count in AX
  6661 000019B1 A3[0003]                        MOV     [DAYCNT],AX
  6662 000019B4 56                              PUSH    SI
  6663 000019B5 53                              PUSH    BX
  6664 000019B6 50                              PUSH    AX
  6665                                  
  6666 000019B7 BB[5803]                        MOV     BX,TIMEBUF
  6667                                  
  6668 000019BA B90600                          MOV     CX,6
  6669 000019BD 31D2                            XOR     DX,DX
  6670 000019BF 89D0                            MOV     AX,DX
  6671 000019C1 53                              PUSH    BX
  6672 000019C2 E85E35                  	CALL	SETREAD
  6673                                  
  6674 000019C5 1E                              PUSH    DS
  6675 000019C6 C536[2E00]                      LDS     SI,[BCLOCK]
  6676 000019CA E83235                  	CALL	DEVIOCALL2	;Get correct date and time
  6677 000019CD 1F                              POP     DS
  6678 000019CE 5B                              POP     BX
  6679 000019CF E88435                  	CALL	SETWRITE
  6680 000019D2 8F06[5803]                      POP     WORD [TIMEBUF]
  6681 000019D6 1E                              PUSH    DS
  6682 000019D7 C536[2E00]                      LDS     SI,[BCLOCK]
  6683 000019DB E82135                  	CALL	DEVIOCALL2      ;Set the date
  6684 000019DE 1F                              POP     DS
  6685 000019DF 5B                              POP     BX
  6686 000019E0 5E                              POP     SI
  6687                                  WKDAY:
  6688 000019E1 A1[0003]                        MOV     AX,[DAYCNT]
  6689 000019E4 31D2                            XOR     DX,DX
  6690 000019E6 B90700                          MOV     CX,7
  6691 000019E9 40                              INC     AX
  6692 000019EA 40                              INC     AX              ;First day was Tuesday
  6693 000019EB F7F1                            DIV     CX              ;Compute day of week
  6694 000019ED 8816[0203]                      MOV     [WEEKDAY],DL
  6695 000019F1 30C0                            XOR     AL,AL           ;Flag OK
  6696                                  RET25:
  6697 000019F3 C3                      	RETN
  6698                                  
  6699                                  ;**	DSUM - Compute the sum of a string of bytes
  6700                                  ;
  6701                                  ;	ENTRY	(cx) = byte count
  6702                                  ;		(ds:si) = byte address
  6703                                  ;		(dx) = sum register, initialized by caller
  6704                                  ;	EXIT	(dx) updated
  6705                                  ;	USES	ax, cx, dx, si, flags
  6706                                  
  6707                                  DSUM:
  6708 000019F4 B400                            MOV     AH,0
  6709                                  	;JCXZ	DSUM9
  6710 000019F6 E3FB                            JCXZ	RET25 ; 18/07/2018
  6711                                  DSUM1:
  6712 000019F8 AC                              LODSB
  6713 000019F9 01C2                            ADD     DX,AX
  6714 000019FB E2FB                            LOOP    DSUM1
  6715                                  DSUM9:
  6716 000019FD C3                              RETN
  6717                                  
  6718                                  
  6719                                  ;============================================================================
  6720                                  ; GETSET.ASM
  6721                                  ;============================================================================
  6722                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6723                                  ; Retro DOS v2.0 - 12/03/2018
  6724                                  
  6725                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6726                                  ;NAME	GETSET
  6727                                  
  6728                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6729                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6730                                  
  6731                                  ;USERNUM:
  6732                                  ;	DW	0			; 24 bit user number
  6733                                  ;       DB      0
  6734                                  ;;	IF      IBM
  6735                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6736                                  ;;	ELSE
  6737                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6738                                  ;;	ENDIF
  6739                                  
  6740                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6741                                  ;; 08/07/2018 - Retro DOS v3.0
  6742                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6743                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6744                                  
  6745                                  
  6746                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6747                                  
  6748                                  _$GET_VERSION:
  6749                                  
  6750                                  ; Inputs:
  6751                                  ;       None
  6752                                  ; Function:
  6753                                  ;       Return MS-DOS version number
  6754                                  ; Outputs:
  6755                                  ;       OEM number in BH
  6756                                  ;       User number in BL:CX (24 bits)
  6757                                  ;       Version number as AL.AH in binary
  6758                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6759                                  
  6760                                  ; MSDOS 6.0
  6761                                  ;		if input al = 00
  6762                                  ;		  (bh) = OEM number			
  6763                                  ;		else if input al = 01
  6764                                  ;		  (bh) = version flags
  6765                                  ;		 
  6766                                  ;		       	 bits 0-2 = DOS internal revision
  6767                                  ;		       	 bits 3-7 = DOS type flags
  6768                                  ;		              bit 3    = DOS is in ROM
  6769                                  ;		              bit 4    = DOS in in HMA
  6770                                  ;		              bits 5-7 = reserved
  6771                                  ;               M007 change - only bit 3 is now valid.  Other bits
  6772                                  ;               are 0 when AL = 1
  6773                                  
  6774                                  	
  6775                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6776                                  
  6777 000019FE 16                              PUSH    SS
  6778 000019FF 1F                              POP     DS
  6779 00001A00 8B1E[5403]                      MOV     BX,[USERNUM+2]
  6780 00001A04 8B0E[5203]                      MOV     CX,[USERNUM]
  6781 00001A08 A1[7D0C]                        MOV     AX,[MSVERS]
  6782 00001A0B E8FDFB                          call	Get_User_Stack
  6783                                          ;MOV	[SI+2],BX
  6784 00001A0E 895C02                  	mov	[SI+user_env.user_BX],BX
  6785                                          ;MOV	[SI+4],CX
  6786 00001A11 894C04                  	mov	[SI+user_env.user_CX],CX
  6787                                          ;MOV	[SI+user_env.user_AX],AX  ; Really only sets AH
  6788 00001A14 8904                            MOV	[SI],AX ; 31/03/2018
  6789 00001A16 C3                      	RETN
  6790                                  
  6791                                  ; 18/07/2018 - Retro DOS v3.0
  6792                                  
  6793                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6794                                  
  6795                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6796                                  ;
  6797                                  ;	ENTRY	none
  6798                                  ;	EXIT	(al) = value of VERIFY flag
  6799                                  ;	USES	all
  6800                                  
  6801                                  
  6802                                  _$GET_VERIFY_ON_WRITE:
  6803                                  
  6804                                  ;hkn; SS override
  6805 00001A17 36A0[AD02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6806 00001A1B C3                      	retn
  6807                                  
  6808                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6809                                  ;
  6810                                  ;	ENTRY	(al) = value of VERIFY flag
  6811                                  ;	EXIT	none
  6812                                  ;	USES	all
  6813                                  
  6814                                  _$SET_VERIFY_ON_WRITE:
  6815                                  
  6816 00001A1C 2401                    	AND	AL,1
  6817                                  ;hkn; SS override
  6818 00001A1E 36A2[AD02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6819                                  RET27:	; 18/07/2018
  6820 00001A22 C3                      	retn
  6821                                  
  6822                                  ; 19/07/2018 - Retro DOS v3.0
  6823                                  
  6824                                  ;BREAK <$International - return country-dependent information>
  6825                                  
  6826                                  ;----------------------------------------------------------------------------
  6827                                  ;
  6828                                  ; Procedure Name : $INTERNATIONAL
  6829                                  ;
  6830                                  ; Inputs:
  6831                                  ;	MOV	AH,International
  6832                                  ;	MOV	AL,country	(al = 0 => current country)
  6833                                  ;      [MOV	BX,country]
  6834                                  ;	LDS	DX,block
  6835                                  ;	INT	21
  6836                                  ; Function:
  6837                                  ;	give users an idea of what country the application is running
  6838                                  ; Outputs:
  6839                                  ;	IF DX != -1 on input (get country)
  6840                                  ;	  AL = 0 means return current country table.
  6841                                  ;	  0<AL<0FFH means return country table for country AL
  6842                                  ;	  AL = 0FF means return country table for country BX
  6843                                  ;	  No Carry:
  6844                                  ;	     Register BX will contain the 16-bit country code.
  6845                                  ;	     Register AL will contain the low 8 bits of the country code.
  6846                                  ;	     The block pointed to by DS:DX is filled in with the information
  6847                                  ;	     for the particular country.
  6848                                  ;		BYTE  Size of this table excluding this byte and the next
  6849                                  ;		BYTE  Country code represented by this table
  6850                                  ;			A sequence of n bytes, where n is the number specified
  6851                                  ;			by the first byte above and is not > internat_block_max,
  6852                                  ;			in the correct order for being returned by the
  6853                                  ;			INTERNATIONAL call as follows:
  6854                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6855                                  ;		5 BYTE	Currency symbol null terminated
  6856                                  ;		2 BYTE	thousands separator null terminated
  6857                                  ;		2 BYTE	Decimal point null terminated
  6858                                  ;		2 BYTE	Date separator null terminated
  6859                                  ;		2 BYTE	Time separator null terminated
  6860                                  ;		1 BYTE	Bit field.  Currency format.
  6861                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6862                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6863                                  ;		1 BYTE	No. of significant decimal digits in currency
  6864                                  ;		1 BYTE	Bit field.  Time format.
  6865                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6866                                  ;		DWORD	Call address of case conversion routine
  6867                                  ;		2 BYTE	Data list separator null terminated.
  6868                                  ;	  Carry:
  6869                                  ;	     Register AX has the error code.
  6870                                  ;	IF DX = -1 on input (set current country)
  6871                                  ;	  AL = 0 is an error
  6872                                  ;	  0<AL<0FFH means set current country to country AL
  6873                                  ;	  AL = 0FF means set current country to country BX
  6874                                  ;	  No Carry:
  6875                                  ;	    Current country SET
  6876                                  ;	    Register AL will contain the low 8 bits of the country code.
  6877                                  ;	  Carry:
  6878                                  ;	     Register AX has the error code.
  6879                                  ;-----------------------------------------------------------------------------
  6880                                  
  6881                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6882                                  
  6883                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6884                                  	 
  6885 00001A23 3CFF                    	CMP	AL,0FFH
  6886 00001A25 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6887 00001A27 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6888 00001A29 30FF                    	XOR	BH,BH
  6889                                  BX_HAS_CODE:
  6890 00001A2B 1E                      	PUSH	DS
  6891 00001A2C 07                      	POP	ES
  6892 00001A2D 52                      	PUSH	DX
  6893 00001A2E 5F                      	POP	DI			; User buffer to ES:DI
  6894                                  
  6895                                  ;hkn; SS is DOSDATA
  6896                                  ;	context DS
  6897                                  
  6898 00001A2F 16                      	push	ss
  6899 00001A30 1F                      	pop	ds
  6900                                  
  6901 00001A31 83FFFF                  	CMP	DI,-1
  6902 00001A34 745F                    	JZ	short international_set
  6903 00001A36 09DB                    	OR	BX,BX
  6904 00001A38 7505                    	JNZ	short international_find
  6905                                  
  6906                                  ;hkn; country_cdpg is in DOSDATA segment.
  6907 00001A3A BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6908                                  
  6909 00001A3D EB40                    	JMP	SHORT international_copy
  6910                                  
  6911                                  international_find:
  6912 00001A3F BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6913 00001A42 E80B00                  	CALL	international_get
  6914 00001A45 7256                    	JC	short errtn
  6915 00001A47 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6916 00001A4A 7533                    	JNZ	SHORT international_copy ; no, copy by myself
  6917 00001A4C 89D3                    	MOV	BX,DX			 ; put country back
  6918 00001A4E EB3A                    	JMP	SHORT international_ok3
  6919                                  
  6920                                  international_get:
  6921                                  
  6922                                  ;hkn; country_cdpg is in DOSDATA segment.
  6923                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6924 00001A50 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6925                                  
  6926                                  	; MSDOS 6.0
  6927                                  	;CMP	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6928                                  	;retz				 ; return if equal
  6929                                  
  6930                                  	; MSDOS 3.3
  6931                                  	;cmp	bx,[SI+63h]
  6932 00001A53 3B5C63                  	CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6933 00001A56 74CA                    	jz	short RET27
  6934                                  
  6935 00001A58 89DA                    	MOV	DX,BX
  6936 00001A5A 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6937                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6938                                  
  6939 00001A5C B80014                  	mov	ax,1400h
  6940 00001A5F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6941                                  			; Return: AL = 00h not installed, OK to install
  6942                                  			; 01h not installed, not OK
  6943                                  			; FFh installed
  6944                                  	
  6945 00001A61 3CFF                    	CMP	AL,0FFH
  6946 00001A63 7516                    	JNZ	short interr		; not in memory
  6947                                  	;cmp	bp,0
  6948 00001A65 09ED                    	or	bp,bp			; GetCntry ?
  6949 00001A67 7507                    	JNZ	short stcdpg
  6950                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6951                                  
  6952 00001A69 B80414                  	mov     ax,1404h
  6953 00001A6C CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6954                                  			; BX = code page, DX = country code,
  6955                                  			; DS:SI -> internal code page structure
  6956                                  			; ES:DI -> user buffer
  6957                                  			; Return: AL = status
  6958                                  
  6959 00001A6E EB05                    	JMP	short chkok
  6960                                  	
  6961                                  	;nop
  6962                                  
  6963                                  stcdpg:
  6964                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6965                                  
  6966 00001A70 B80314                  	mov     ax,1403h
  6967 00001A73 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6968                                  			; DS:SI -> internal code page structure
  6969                                  			; BX = code page, DX = country code
  6970                                  			; Return: AL = status
  6971                                  chkok:
  6972 00001A75 08C0                    	or	al,al			; success ?
  6973                                  	;retz				; yes
  6974 00001A77 74A9                    	jz	short RET27
  6975                                  
  6976                                  setcarry:
  6977 00001A79 F9                      	STC				; set carry
  6978 00001A7A C3                      	retn
  6979                                  interr:
  6980 00001A7B B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6981 00001A7D EBFA                    	JMP	short setcarry
  6982                                  
  6983                                  international_copy:
  6984                                  
  6985                                  ;hkn; country_cdpg is in DOSDATA segment.
  6986                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6987                                  	; MSDOS 6.0
  6988                                  	;MOV	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6989                                  	;MOV	SI,OFFSET DOSDATA:COUNTRY_CDPG.ccDFormat
  6990                                  
  6991                                  	; MSDOS 3.3
  6992                                  	;mov	bx,[SI+63h]
  6993 00001A7F 8B5C63                  	mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  6994 00001A82 BE[6410]                	mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  6995                                  
  6996                                  	;mov	cx,24
  6997 00001A85 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  6998                                  
  6999                                  	; MSDOS 6.0
  7000                                  ;hkn;	must set up DS to SS so that international info can be copied
  7001                                  	;push	ds
  7002                                  	;push	ss					; cs -> ss
  7003                                  	;pop	ds
  7004                                  
  7005 00001A88 F3A4                    	REP	MOVSB			;copy country info
  7006                                  
  7007                                  	; MSDOS 6.0
  7008                                  ;hkn;	restore ds
  7009                                  	;pop	ds
  7010                                  
  7011                                  international_ok3:
  7012 00001A8A E87EFB                  	call	Get_User_Stack
  7013                                  ;ASSUME	DS:NOTHING
  7014                                  	;MOV	[SI+2],BX
  7015 00001A8D 895C02                  	MOV	[SI+user_env.user_BX],BX
  7016                                  international_ok:
  7017 00001A90 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7018 00001A92 E968FC                  	jmp	SYS_RET_OK
  7019                                  
  7020                                  international_set:
  7021                                  
  7022                                  ;hkn; ASSUME	DS:DOSGROUP
  7023                                  ;ASSUME	DS:DOSDATA
  7024                                  
  7025 00001A95 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7026 00001A98 E8B5FF                  	CALL	international_get
  7027 00001A9B 73F3                    	JNC	short international_ok
  7028                                  errtn:
  7029 00001A9D 3CFF                    	CMP	AL,0FFH
  7030 00001A9F 7403                    	JZ	short errtn2
  7031                                  errtn1:
  7032 00001AA1 E962FC                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7033                                  errtn2:
  7034                                  	;error	error_invalid_function	; NLSFUNC not existent
  7035                                  
  7036                                  	;mov	al,1
  7037 00001AA4 B001                    	mov	al,error_invalid_function 
  7038                                  	;jmp	short errtn1
  7039                                  errtn3:
  7040 00001AA6 E95DFC                  	jmp	SYS_RET_ERR
  7041                                  
  7042                                  ;EndProc $INTERNATIONAL
  7043                                  
  7044                                  ; 19/07/2018
  7045                                  
  7046                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7047                                  
  7048                                  ;---------------------------------------------------------------------------
  7049                                  ;
  7050                                  ; Procedure Name : $GetExtCntry
  7051                                  ;
  7052                                  ; Inputs:
  7053                                  ;	if AL >= 20H
  7054                                  ;	  AL= 20H    capitalize single char, DL= char
  7055                                  ;	      21H    capitalize string, CX= string length
  7056                                  ;	      22H    capitalize ASCIIZ string
  7057                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7058                                  ;	      80H bit 0 = use normal upper case table
  7059                                  ;		      1 = use file upper case table
  7060                                  ;	   DS:DX points to string
  7061                                  ;
  7062                                  ;	else
  7063                                  ;
  7064                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7065                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7066                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7067                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7068                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7069                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7070                                  ;	INT	21
  7071                                  ; Function:
  7072                                  ;	give users extended country dependent information
  7073                                  ;	or capitalize chars
  7074                                  ; Outputs:
  7075                                  ;	  No Carry:
  7076                                  ;	     extended country info is succesfully returned
  7077                                  ;	  Carry:
  7078                                  ;	     Register AX has the error code.
  7079                                  ;	     AX=0, NO	 for YES/NO CHECK
  7080                                  ;		1, YES
  7081                                  ;-------------------------------------------------------------------------------
  7082                                  
  7083                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7084                                  
  7085                                  	; MSDOS 6.0
  7086                                  _$GetExtCntry:
  7087 00001AA9 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7088 00001AAB 7264                    	JB	short notcap
  7089                                  capcap: 				;
  7090 00001AAD A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7091 00001AAF 7505                    	JNZ	short fileupper		; file upper case
  7092                                  
  7093                                  ;hkn; UCASE_TAB in DOSDATA
  7094 00001AB1 BB[8810]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7095                                  
  7096 00001AB4 EB05                    	JMP	SHORT capit
  7097                                  
  7098                                  fileupper:
  7099                                  	; 16/01/2024 (MSDOS 3.3-6.22 MSDOS.SYS has a bug here)
  7100                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7101                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7102                                  	; AL >= 80h
  7103 00001AB6 247F                    	and	al,7Fh
  7104                                  
  7105                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7106 00001AB8 BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7107                                  capit:					;
  7108 00001ABB 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7109 00001ABD 750D                    	JNZ	short chkyes		; no
  7110 00001ABF 88D0                    	MOV	AL,DL			; set up AL
  7111 00001AC1 E86E3B                  	call	GETLET3 		; upper case it
  7112 00001AC4 E844FB                  	call	Get_User_Stack		; get user stack
  7113 00001AC7 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7114 00001ACA EB1C                    	JMP	SHORT nono		; done
  7115                                  chkyes: 				;
  7116 00001ACC 3C23                    	CMP	AL,CHECK_YES_NO		; check YES or NO ?
  7117 00001ACE 751B                    	JNZ	short capstring		; no
  7118 00001AD0 31C0                    	XOR	AX,AX			; presume NO
  7119                                  		      
  7120                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7121                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7122                                  
  7123                                  	; 06/08/2018 - Retro DOS v3.0
  7124                                  	;CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7125 00001AD2 80FA59                  	cmp	DL,'Y'
  7126 00001AD5 7410                    	JZ	short yesyes		; yes
  7127                                  	;CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7128 00001AD7 80FA79                  	cmp	dl,'y'
  7129 00001ADA 740B                    	JZ	short yesyes		; yes
  7130 00001ADC 80FA4E                  	cmp	dl,'N'
  7131                                  	;CMP	DL,[cs:NLS_NO]		; is  'N'?
  7132 00001ADF 7407                    	JZ	short nono		; no
  7133 00001AE1 80FA6E                  	CMP	DL,'n'
  7134                                  	;CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7135 00001AE4 7402                    	JZ	short nono		; no
  7136                                  ;dbcs_char:				;
  7137 00001AE6 40                      	INC	AX			; not YES or NO
  7138                                  yesyes: 				;
  7139 00001AE7 40                      	INC	AX			; return 1
  7140                                  nono:					;
  7141 00001AE8 E912FC                  	jmp	SYS_RET_OK		; done
  7142                                  capstring:				;
  7143 00001AEB 89D6                    	MOV	SI,DX			; si=dx
  7144 00001AED 3C21                    	CMP	AL,CAP_STRING		; cap string ?
  7145 00001AEF 750F                    	JNZ	short capascii		; no
  7146 00001AF1 09C9                    	OR	CX,CX			; check count 0
  7147 00001AF3 74F3                    	JZ	short nono		; yes finished
  7148                                  concap: 				;
  7149 00001AF5 AC                      	LODSB				; get char
  7150 00001AF6 E8393B                  	call	GETLET3 		; upper case it
  7151 00001AF9 8844FF                  	MOV	byte [SI-1],AL		; store back
  7152                                  next99: 				;
  7153 00001AFC E2F7                    	LOOP	concap			; continue
  7154 00001AFE EBE8                    	JMP	short nono		; done
  7155                                  capascii:				;
  7156 00001B00 3C22                    	CMP	AL,CAP_ASCIIZ		; cap ASCIIZ string ?
  7157 00001B02 7545                    	JNZ	short capinval		; no
  7158                                  concap2:				;
  7159 00001B04 AC                      	LODSB				; get char
  7160 00001B05 08C0                    	or	al,al			; end of string ?
  7161 00001B07 74DF                    	JZ	short nono		; yes
  7162 00001B09 E8263B                  	call	GETLET3 		; upper case it
  7163 00001B0C 8844FF                  	MOV	[SI-1],AL		; store back
  7164 00001B0F EBF3                    	JMP	short concap2 		; continue
  7165                                  
  7166                                  	; MSDOS 3.3 ($ MSDOS 6.0)
  7167                                  
  7168                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7169                                  ; _$GetExtCntry:
  7170                                  
  7171                                  notcap:
  7172 00001B11 83F905                  	CMP	CX,5			; minimum size is 5
  7173 00001B14 7279                    	jb	short sizeerror
  7174                                  
  7175                                  GEC_CONT:
  7176                                  ;hkn; SS is DOSDATA
  7177                                  	;context DS
  7178                                  
  7179 00001B16 16                      	push	ss
  7180                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7181 00001B17 1F                      	pop	ds  ; 17/05/2019 - BugFix
  7182                                  	
  7183                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7184 00001B18 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7185                                  
  7186 00001B1B 83FAFF                  	CMP	DX,-1			; active country ?
  7187 00001B1E 7503                    	JNZ	short GETCDPG 		; no
  7188                                  
  7189                                  ;hkn; use DS override to accesss country_cdpg fields
  7190                                  	;mov	dx,[si+63h]
  7191 00001B20 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7192                                  					; get active country id;smr;use DS
  7193                                  GETCDPG:
  7194 00001B23 83FBFF                  	CMP	BX,-1			; active code page?
  7195 00001B26 7503                    	JNZ	short CHKAGAIN		; no, check again
  7196                                  
  7197                                  ;hkn; use DS override to accesss country_cdpg fields
  7198                                  	;mov	bx,[si+65h]
  7199 00001B28 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7200                                  					; get active code page id;smr;Use DS
  7201                                  CHKAGAIN:
  7202                                  	;cmp	dx,[si+63h]
  7203 00001B2B 3B5463                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7204                                  					; same as active country id?;smr;use DS
  7205 00001B2E 7552                    	JNZ	short CHKNLS		; no
  7206                                  	;cmp	bx,[si+65h]
  7207 00001B30 3B5C65                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7208                                  					; same as active code pg id?;smr;use DS
  7209 00001B33 754D                    	JNZ	short CHKNLS		; no
  7210                                  CHKTYPE:
  7211                                  	;mov	bx,[si+48h]
  7212 00001B35 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7213                                  					; bx = sys code page id;smr;use DS
  7214                                  ;	CMP	AL,SetALL		; select all?
  7215                                  ;	JNZ	short SELONE
  7216                                  ;	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccNumber_of_entries
  7217                                  ;SELONE:
  7218 00001B38 51                      	PUSH	CX			; save cx
  7219                                  	;mov	cx,[si+4Ah]
  7220 00001B39 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]	;smr;use DS
  7221 00001B3C BE[4910]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7222                                  NXTENTRY:
  7223 00001B3F 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7224 00001B41 740B                    	JZ	short FOUNDIT
  7225 00001B43 83C605                  	ADD	SI,5			; next entry
  7226 00001B46 E2F7                    	LOOP	NXTENTRY
  7227 00001B48 59                      	POP	CX
  7228                                  capinval:
  7229                                  	;error	error_invalid_function	; info type not found
  7230                                  	;mov	al,1
  7231 00001B49 B001                    	mov	al,error_invalid_function
  7232 00001B4B E9B8FB                  	jmp	SYS_RET_ERR
  7233                                  
  7234                                  FOUNDIT:
  7235 00001B4E A4                      	MOVSB				; move info id byte
  7236 00001B4F 59                      	POP	CX			; retsore char count
  7237                                  	;cmp	al,1
  7238 00001B50 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7239 00001B52 7415                    	JZ	short setsize
  7240 00001B54 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7241 00001B57 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7242                                  OK_RETN:
  7243 00001B5A F3A4                    	REP	MOVSB			; copy info
  7244 00001B5C 89C1                    	MOV	CX,AX			; CX = actual length returned
  7245 00001B5E 89D8                    	MOV	AX,BX			; return sys code page in ax
  7246                                  GETDONE:
  7247 00001B60 E8A8FA                  	call	Get_User_Stack		; return actual length to user's CX
  7248                                  	;mov	[si+4],cx 
  7249 00001B63 894C04                  	MOV	[SI+user_env.user_CX],CX
  7250                                  	; 26/07/2019
  7251                                  	;jmp	SYS_RET_OK
  7252 00001B66 E997FB                  	jmp	SYS_RET_OK_clc
  7253                                  setsize:
  7254 00001B69 83E903                  	SUB	CX,3			; size after length field
  7255 00001B6C 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7256 00001B6E 7302                    	JAE	short setsize2		; no
  7257 00001B70 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7258                                  setsize2:
  7259 00001B72 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7260 00001B75 83C702                  	ADD	DI,2			; update index
  7261 00001B78 83C602                  	ADD	SI,2
  7262 00001B7B 89C8                    	MOV	AX,CX
  7263 00001B7D 83C003                  	ADD	AX,3			; AX has the actual length
  7264 00001B80 EBD8                    	JMP	short OK_RETN 		; go move it
  7265                                  CHKNLS:
  7266 00001B82 30E4                    	XOR	AH,AH
  7267 00001B84 50                      	PUSH	AX			; save info type
  7268 00001B85 5D                      	POP	BP			; bp = info type
  7269                                  	
  7270                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7271                                  
  7272 00001B86 B80014                  	mov     ax, 1400h
  7273 00001B89 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7274                                  			; Return: AL = 00h not installed, OK to install
  7275                                  			; 01h not installed, not OK
  7276                                  			; FFh installed
  7277                                  	
  7278 00001B8B 3CFF                    	CMP	AL,0FFH
  7279 00001B8D 7405                    	JZ	short NLSNXT		; in memory
  7280                                  
  7281                                  sizeerror:
  7282                                  	;error	error_invalid_function
  7283                                  	;mov	al,1
  7284 00001B8F B001                    	mov	al,error_invalid_function
  7285 00001B91 E972FB                  	jmp	SYS_RET_ERR
  7286                                  
  7287                                  NLSNXT: 
  7288                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7289                                  
  7290 00001B94 B80214                  	mov     ax, 1402h
  7291 00001B97 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7292                                  			; BP = subfunction, BX = code page
  7293                                  			; DX = country code, DS:SI -> internal code page structure
  7294                                  			; ES:DI -> user buffer, CX = size of user buffer
  7295                                  			; Return: AL = status
  7296                                  			; 00h successful
  7297                                  			; else DOS error code
  7298                                  
  7299 00001B99 3C00                    	CMP	AL,0			; success ?
  7300 00001B9B 7508                    	JNZ	short NLSERROR
  7301 00001B9D 8B4448                  	mov     ax,[si+48h]
  7302 00001BA0 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7303                                  			; ax = sys code page id;smr;use ds;
  7304                                  			;BUGBUG;check whether DS is OK after the above calls
  7305 00001BA3 EBBB                    	JMP	short GETDONE
  7306                                  NLSERROR:
  7307 00001BA5 E95EFB                  	jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7308                                  
  7309                                  ;EndProc $GetExtCntry
  7310                                  
  7311                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7312                                  
  7313                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7314                                  ;
  7315                                  ;   System call format:
  7316                                  ;
  7317                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7318                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7319                                  ;	MOV	BX,CODE_PAGE	( set code page only)
  7320                                  ;	INT	21
  7321                                  ;
  7322                                  ;	ENTRY	(al) = n
  7323                                  ;		(bx) = code page
  7324                                  ;	EXIT	'C' clear
  7325                                  ;		  global code page is set	(set global code page)
  7326                                  ;		  (BX) = active code page id	(get global code page)
  7327                                  ;		  (DX) = system code page id	(get global code page)
  7328                                  ;		'C' set
  7329                                  ;		  (AX) = error code
  7330                                  
  7331                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7332                                  
  7333                                  _$GetSetCdPg:
  7334                                  
  7335                                  ;hkn; SS is DOSDATA
  7336                                  	;context DS
  7337                                  
  7338 00001BA8 16                      	push	ss
  7339 00001BA9 1F                      	pop	ds
  7340                                  
  7341                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7342 00001BAA BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7343                                  
  7344 00001BAD 3C01                    	CMP	AL,1		       ; get global code page
  7345 00001BAF 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7346                                  	;mov	bx,[si+65h]
  7347 00001BB1 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7348                                  					; get active code page id;smr;use ds
  7349                                  	;mov	dx,[si+48h]
  7350 00001BB4 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7351                                  				  	; get sys code page id;smr;use ds
  7352 00001BB7 E851FA                  	call	Get_User_Stack
  7353                                  ;ASSUME DS:NOTHING
  7354                                  	;mov	[si+2],bx
  7355 00001BBA 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7356                                  	;mov	[si+6],dx
  7357 00001BBD 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7358                                  OK_RETURN:
  7359                                  	;transfer SYS_RET_OK
  7360 00001BC0 E93AFB                  	jmp	SYS_RET_OK
  7361                                  
  7362                                  ;hkn; ASSUME DS:DOSGROUP
  7363                                  ;ASSUME	DS:DOSDATA
  7364                                  
  7365                                  setglpg:
  7366 00001BC3 3C02                    	CMP	AL,2
  7367 00001BC5 7534                    	JNZ	short nomem
  7368                                  ;;;;;;; CMP	BX,[SI+DOS_CCDPG.ccDosCodePage] ; same as active code page
  7369                                  ;;;;;;; JZ	short OK_RETURN		; yes
  7370                                  	;mov	dx,[si+63h]
  7371 00001BC7 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7372                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7373 00001BCA B80014                  	mov     ax, 1400h
  7374 00001BCD CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7375                                  			; Return: AL = 00h not installed, OK to install
  7376                                  			; 01h not installed, not OK
  7377                                  			; FFh installed
  7378 00001BCF 3CFF                    	CMP	AL,0FFH
  7379 00001BD1 7528                    	JNZ	short nomem		; not in memory
  7380                                  	;CallInstall SetCodePage,NLSFUNC,1  ;set the code page
  7381 00001BD3 B80114                  	mov     ax, 1401h
  7382 00001BD6 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7383                                  			; DS:SI -> internal code page structure
  7384                                  			; BX = new code page, DX = country code???
  7385                                  			; Return: AL = status
  7386                                  			; 00h successful
  7387                                  			; else DOS error code
  7388                                  	;cmp	al,0
  7389 00001BD8 08C0                    	or	al,al			   ; success ?
  7390 00001BDA 74E4                    	JZ	short OK_RETURN		   ; yes
  7391 00001BDC 3C41                    	CMP	AL,65			   ; set device code page failed
  7392 00001BDE 7518                    	JNZ	short seterr
  7393 00001BE0 B84100                  	MOV	AX,65
  7394 00001BE3 A3[D202]                	MOV	[EXTERR],AX
  7395                                  	;mov	byte [EXTERR_ACTION],6
  7396                                  	;mov	byte [EXTERR_CLASS],5
  7397                                  	;mov	byte [EXTERR_LOCUS],4
  7398 00001BE6 C606[D402]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7399 00001BEB C606[D502]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7400 00001BF0 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7401                                  	;transfer From_GetSet
  7402 00001BF5 E916FB                  	jmp	From_GetSet
  7403                                  
  7404                                  seterr:
  7405                                  	;transfer SYS_RET_ERR
  7406 00001BF8 E90BFB                  	jmp	SYS_RET_ERR
  7407                                  
  7408                                  nomem:
  7409                                  	;error	error_invalid_function ; function not defined
  7410                                  	;mov	al,1
  7411 00001BFB B001                    	mov	al,error_invalid_function
  7412 00001BFD EBF9                    	jmp	short seterr
  7413                                  
  7414                                  ;EndProc $GetSetCdPg
  7415                                  
  7416                                  
  7417                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7418                                  
  7419                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7420                                  ;
  7421                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7422                                  ;		drive.
  7423                                  ;
  7424                                  ;	This call returns the same info in the same registers (except for the
  7425                                  ;	FAT pointer) as the old FAT pointer calls
  7426                                  ;
  7427                                  ;	ENTRY	DL = Drive number
  7428                                  ;	EXIT	AX = Sectors per allocation unit
  7429                                  ;		   = -1 if bad drive specified
  7430                                  ;		On User Stack
  7431                                  ;		    BX = Number of free allocation units
  7432                                  ;		    DX = Total Number of allocation units on disk
  7433                                  ;		    CX = Sector size
  7434                                  
  7435                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7436                                  
  7437                                  _$GET_DRIVE_FREESPACE:
  7438                                  
  7439                                  ;hkn; SS is DOSDATA
  7440                                  	;context DS
  7441 00001BFF 16                      	push	ss
  7442 00001C00 1F                      	pop	ds
  7443                                  
  7444 00001C01 88D0                    	MOV	AL,DL
  7445                                  	;invoke	GetThisDrv		; Get drive
  7446 00001C03 E8704D                  	call	GETTHISDRV
  7447                                  SET_AX_RET:
  7448 00001C06 7218                    	JC	short BADFDRV
  7449                                  	;invoke	DISK_INFO
  7450 00001C08 E8A61C                  	call	DISK_INFO
  7451 00001C0B 87D3                    	XCHG	DX,BX
  7452 00001C0D 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7453 00001C0F 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7454                                  DoSt:
  7455 00001C11 E8F7F9                  	call	Get_User_Stack
  7456                                  ;ASSUME	DS:NOTHING
  7457                                  	;mov	[si+6],dx
  7458                                  	;mov	[si+4],cx
  7459                                  	;mov	[si+2],bx
  7460 00001C14 895406                  	MOV	[SI+user_env.user_DX],DX
  7461 00001C17 894C04                  	MOV	[SI+user_env.user_CX],CX
  7462 00001C1A 895C02                  	MOV	[SI+user_env.user_BX],BX
  7463                                  	;MOV	[SI+user_env.user_AX],AX
  7464 00001C1D 8904                    	mov     [si],ax
  7465                                  	;return
  7466 00001C1F C3                      	retn
  7467                                  
  7468                                  BADFDRV:
  7469                                  	; MSDOS 3.3
  7470                                  	;mov	al,0Fh
  7471 00001C20 B00F                    	mov	al,error_invalid_drive	; Assume error
  7472                                  
  7473                                  	;invoke	FCB_RET_ERR
  7474 00001C22 E8F7FA                  	call	FCB_RET_ERR
  7475 00001C25 B8FFFF                  	MOV	AX,-1
  7476 00001C28 EBE7                    	JMP	short DoSt
  7477                                  
  7478                                  ;EndProc $GET_DRIVE_FREESPACE
  7479                                  
  7480                                  
  7481                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7482                                  
  7483                                  ;**	$Get_DMA - Get Disk Transfer Address
  7484                                  ;
  7485                                  ;	ENTRY	none
  7486                                  ;	EXIT	ES:BX is current transfer address
  7487                                  ;	USES	all
  7488                                  
  7489                                  _$GET_DMA:
  7490 00001C2A 368B1E[DA02]            	MOV	BX,[SS:DMAADD]
  7491 00001C2F 368B0E[DC02]            	MOV	CX,[SS:DMAADD+2]
  7492 00001C34 E8D4F9                  	call	Get_User_Stack
  7493                                  	;mov	[si+2],bx
  7494                                  	;mov	[si+10h],cx
  7495 00001C37 895C02                  	MOV	[SI+user_env.user_BX],BX
  7496 00001C3A 894C10                  	MOV	[SI+user_env.user_ES],CX
  7497 00001C3D C3                      	retn
  7498                                  
  7499                                  ;**	$Set_DMA - Set Disk Transfer Address
  7500                                  ;
  7501                                  ;	ENTRY	DS:DX is current transfer address
  7502                                  ;	EXIT	none
  7503                                  ;	USES	all
  7504                                  
  7505                                  _$SET_DMA:
  7506 00001C3E 368916[DA02]            	MOV	[SS:DMAADD],DX
  7507 00001C43 368C1E[DC02]            	MOV	[SS:DMAADD+2],DS
  7508 00001C48 C3                      	retn
  7509                                  
  7510                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7511                                  
  7512                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7513                                  ;
  7514                                  ;	ENTRY	none
  7515                                  ;	EXIT	(AL) = drive number
  7516                                  ;	USES	all
  7517                                  
  7518                                  _$GET_DEFAULT_DRIVE:
  7519 00001C49 36A0[E402]              	MOV	AL,[SS:CURDRV]
  7520 00001C4D C3                      	retn
  7521                                  
  7522                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7523                                  ;
  7524                                  ;	ENTRY	(DL) = Drive number for new default drive
  7525                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7526                                  
  7527                                  _$SET_DEFAULT_DRIVE:
  7528 00001C4E 88D0                    	MOV	AL,DL
  7529 00001C50 FEC0                    	INC	AL			; A=1, B=2...
  7530 00001C52 E80A4D                  	call	GetVisDrv		; see if visible drive
  7531 00001C55 7204                    	JC	short SETRET		; errors do not set
  7532 00001C57 36A2[E402]              	MOV	[SS:CURDRV],AL		; no, set
  7533                                  
  7534                                  SETRET:
  7535 00001C5B 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7536 00001C5F C3                      	retn
  7537                                  
  7538                                  
  7539                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7540                                  
  7541                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7542                                  ;
  7543                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7544                                  ;	contents of an interrupt vector.
  7545                                  ;
  7546                                  ;	ENTRY	(AL) = interrupt number
  7547                                  ;	EXIT	(ES:BX) = current interrupt vector
  7548                                  
  7549                                  _$GET_INTERRUPT_VECTOR:
  7550 00001C60 E81A00                  	CALL	RECSET
  7551 00001C63 26C41F                  	LES	BX,[ES:BX]
  7552 00001C66 E8A2F9                  	call	Get_User_Stack
  7553                                  	;mov	[si+2],bx
  7554                                  	;mov	[si+10h],es
  7555 00001C69 895C02                  	MOV	[SI+user_env.user_BX],BX
  7556 00001C6C 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7557 00001C6F C3                      	retn
  7558                                  
  7559                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7560                                  ;
  7561                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7562                                  ;	contents of an interrupt vector.
  7563                                  ;
  7564                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7565                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7566                                  ;	for explanation.
  7567                                  ;
  7568                                  ;	ENTRY	(AL) = interrupt number
  7569                                  ;		(ds:dx) = desired new vector value
  7570                                  ;	EXIT	none
  7571                                  ;	USES	all
  7572                                  
  7573                                  _$SET_INTERRUPT_VECTOR:
  7574 00001C70 E80A00                  	CALL	RECSET
  7575 00001C73 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7576 00001C74 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7577 00001C77 268C5F02                	MOV	[ES:BX+2],DS
  7578 00001C7B FB                      	STI
  7579                                  					; M004, M068 - Start
  7580                                  	; MSDOS 6.0
  7581                                  	;test	byte [DOS_FLAG],EXECA20OFF
  7582                                  					; Q: was the previous call an int 21
  7583                                  					;    exec call
  7584                                  	;jnz	short siv_1		; Y: go set count
  7585 00001C7C C3                      	retn				; N: return
  7586                                  
  7587                                  ;siv_1:	
  7588                                  	;cmp	byte [A20OFF_COUNT],0	; Q: is count 0
  7589                                  	;jne	short siv_2		; N: done 
  7590                                  	;mov	byte [A20OFF_COUNT],1	; Y: set it to 1 to indicate to dos 
  7591                                  					; dispatcher to turn A20 Off before 
  7592                                  					; returning to user.
  7593                                  ;siv_2:
  7594                                  	;retn				; M004, M068 - End
  7595                                  	
  7596                                  RECSET:
  7597 00001C7D 31DB                    	XOR	BX,BX
  7598 00001C7F 8EC3                    	MOV	ES,BX
  7599 00001C81 88C3                    	MOV	BL,AL
  7600 00001C83 D1E3                    	SHL	BX,1
  7601 00001C85 D1E3                    	SHL	BX,1
  7602 00001C87 C3                      	retn
  7603                                  
  7604                                  
  7605                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7606                                  
  7607                                  ;**	$Char_Oper - Manipulate Switch Character
  7608                                  ;
  7609                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7610                                  ;
  7611                                  ;	ENTRY	AL = function:
  7612                                  ;		    0 - read switch char
  7613                                  ;		    1 - set switch char (char in DL)
  7614                                  ;		    2 - read device availability
  7615                                  ;			Always returns available
  7616                                  ;		    3 - set device availability
  7617                                  ;			No longer supported (NOP)
  7618                                  ;	EXIT	(al) = 0xff iff error
  7619                                  ;		(al) != 0xff if ok
  7620                                  ;		  (dl) = character/flag, iff "read switch char" subfunction
  7621                                  ;	USES	AL, DL
  7622                                  ;
  7623                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7624                                  ;		The character / is always returned for subfunction 0,
  7625                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7626                                  
  7627                                  _$CHAR_OPER:
  7628                                  	; MSDOS 6.0
  7629                                  	;or	al,al				; get switch?
  7630                                  	;mov	dl,'/'				; assume yes
  7631                                  	;jz	short chop_1			; jump if yes
  7632                                  	;cmp	al,2				; check device availability?
  7633                                  	;mov	dl,-1				; assume yes
  7634                                  	;jz	short chop_1				; jump if yes
  7635                                  	;retn					; otherwise just quit
  7636                                  
  7637                                  ; subfunctions requiring return of value to user come here.  DL holds
  7638                                  ; value to return
  7639                                  
  7640                                  ;chop_1:
  7641                                  	;call	Get_User_Stack
  7642                                  	;mov	[SI+user_env.user_DX],dx	; store value for user
  7643                                  	;retn
  7644                                  
  7645                                  	; MSDOS 3.3
  7646                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7647 00001C88 16                      	push    ss
  7648 00001C89 1F                      	pop     ds
  7649 00001C8A 3C01                    	cmp     al, 1
  7650 00001C8C 720B                    	jb      short chop_1
  7651 00001C8E 740F                    	jz      short chop_2
  7652 00001C90 3C03                    	cmp     al, 3
  7653 00001C92 7210                    	jb      short chop_3
  7654 00001C94 7416                    	jz      short chop_5
  7655 00001C96 B0FF                    	mov     al, 0FFh
  7656 00001C98 C3                      	retn
  7657                                  chop_1:
  7658 00001C99 8A16[AF02]              	mov     dl,[chSwitch]
  7659 00001C9D EB07                    	jmp     short chop_4
  7660                                  chop_2:
  7661 00001C9F 8816[AF02]              	mov     [chSwitch], dl
  7662 00001CA3 C3                      	retn
  7663                                  chop_3:
  7664 00001CA4 B2FF                    	mov     dl, 0FFh
  7665                                  chop_4:
  7666 00001CA6 E862F9                  	call    Get_User_Stack
  7667 00001CA9 895406                  	mov     [si+6],dx
  7668                                  chop_5:
  7669 00001CAC C3                      	retn
  7670                                  
  7671                                  
  7672                                  ;**	$GetExtendedError - Return Extended error code
  7673                                  ;
  7674                                  ;	This function reads up the extended error info from the static
  7675                                  ;	variables where it was stored.
  7676                                  ;
  7677                                  ;	ENTRY	none
  7678                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7679                                  ;		BL = recommended action
  7680                                  ;		BH = class of error
  7681                                  ;		CH = locus of error
  7682                                  ;		ES:DI = may be pointer
  7683                                  ;	USES	ALL
  7684                                  
  7685                                  _$GetExtendedError:
  7686 00001CAD 16                      	push	ss
  7687 00001CAE 1F                      	pop	ds
  7688 00001CAF A1[D202]                	MOV	AX,[EXTERR]
  7689 00001CB2 C43E[D602]              	LES	DI,[EXTERRPT]
  7690 00001CB6 8B1E[D402]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7691 00001CBA 8A2E[D102]              	MOV	CH,[EXTERR_LOCUS]
  7692 00001CBE E84AF9                  	call	Get_User_Stack
  7693                                  	;mov	[si+0Ah],di
  7694 00001CC1 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7695                                  	;mov	[si+10h],es
  7696 00001CC4 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7697                                  	;mov	[si+2],bx
  7698 00001CC7 895C02                  	MOV	[SI+user_env.user_BX],BX
  7699                                  	;mov	[si+4],cx
  7700 00001CCA 894C04                  	MOV	[SI+user_env.user_CX],CX
  7701                                  	;jmp	SYS_RET_OK
  7702                                  	; 26/07/2019
  7703 00001CCD E930FA                  	jmp	SYS_RET_OK_clc
  7704                                  
  7705                                  ;============================================================================
  7706                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7707                                  ;============================================================================
  7708                                  ; 19/07/2018 - Retro DOS v3.0
  7709                                  
  7710                                  ; System calls for parsing command lines
  7711                                  ;
  7712                                  ;   $PARSE_FILE_DESCRIPTOR
  7713                                  ;
  7714                                  ;   Modification history:
  7715                                  ;
  7716                                  ;       Created: ARR 30 March 1983
  7717                                  ;               EE PathParse 10 Sept 1983
  7718                                  ;
  7719                                  
  7720                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7721                                  ;---------------------------------------------------------------------------
  7722                                  ; Inputs:
  7723                                  ;       DS:SI Points to a command line
  7724                                  ;       ES:DI Points to an empty FCB
  7725                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7726                                  ;                   = 0 Parse stops if separator encountered
  7727                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7728                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7729                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7730                                  ;                   = 0  "       "      "       - put blanks in FCB
  7731                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7732                                  ;                   = 0  "       "      "        - put blanks in FCB
  7733                                  ; Function:
  7734                                  ;       Parse command line into FCB
  7735                                  ; Returns:
  7736                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7737                                  ;       DS:SI points to first character after filename
  7738                                  ;---------------------------------------------------------------------------
  7739                                  
  7740                                  _$PARSE_FILE_DESCRIPTOR:
  7741 00001CD0 E85938                  	call	MAKEFCB
  7742 00001CD3 56                      	PUSH    SI
  7743 00001CD4 E834F9                  	call	Get_User_Stack
  7744                                  	;pop	word [si+8]
  7745 00001CD7 8F4408                  	POP     word [SI+user_env.user_SI]
  7746 00001CDA C3                      	retn
  7747                                  
  7748                                  ;============================================================================
  7749                                  ; MISC.ASM, MSDOS 6.0, 1991
  7750                                  ;============================================================================
  7751                                  ; 19/07/2018 - Retro DOS v3.0
  7752                                  
  7753                                  ;ENTRYPOINTSEG	EQU	0CH
  7754                                  ;MAXDIF		EQU	0FFFH
  7755                                  ;SAVEXIT 	EQU	10
  7756                                  ;WRAPOFFSET	EQU	0FEF0h
  7757                                  
  7758                                  ;
  7759                                  ;----------------------------------------------------------------------------
  7760                                  ;
  7761                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7762                                  ;
  7763                                  ;	Return Stuff sort of like old get fat call
  7764                                  ;
  7765                                  ;	ENTRY	none
  7766                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7767                                  ;			GOD help anyone who tries to do ANYTHING except
  7768                                  ;			READ this ONE byte.
  7769                                  ;		DX = Total Number of allocation units on disk
  7770                                  ;		CX = Sector size
  7771                                  ;		AL = Sectors per allocation unit
  7772                                  ;		   = -1 if bad drive specified
  7773                                  ;	USES	all
  7774                                  ;
  7775                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7776                                  ;
  7777                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7778                                  ;
  7779                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7780                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7781                                  ;			GOD help anyone who tries to do ANYTHING except
  7782                                  ;			READ this ONE byte.
  7783                                  ;		DX = Total Number of allocation units on disk
  7784                                  ;		CX = Sector size
  7785                                  ;		AL = Sectors per allocation unit
  7786                                  ;		   = -1 if bad drive specified
  7787                                  ;	USES	all
  7788                                  ;
  7789                                  ;----------------------------------------------------------------------------
  7790                                  ;
  7791                                  
  7792                                  _$SLEAZEFUNC:
  7793 00001CDB B200                    	MOV	DL,0
  7794                                  
  7795                                  _$SLEAZEFUNCDL:
  7796 00001CDD 16                      	push	ss
  7797 00001CDE 1F                      	pop	ds
  7798                                  	
  7799 00001CDF 88D0                    	MOV	AL,DL
  7800 00001CE1 E8924C                  	call	GETTHISDRV		; Get CDS structure
  7801                                  SET_AL_RET:
  7802                                  	; MSDOS 3.3
  7803                                  	;mov	al, 0Fh
  7804 00001CE4 B00F                    	MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7805                                  
  7806 00001CE6 721E                    	JC	short BADSLDRIVE
  7807                                  
  7808 00001CE8 E8C61B                  	call	DISK_INFO
  7809 00001CEB 72F7                    	JC	short SET_AL_RET	; User FAILed to I 24
  7810 00001CED 8826[3005]              	MOV	[FATBYTE],AH
  7811                                  
  7812                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7813                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7814                                  ; CALL AGAIN
  7815                                  
  7816 00001CF1 BF[3005]                	MOV	DI,FATBYTE
  7817 00001CF4 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7818 00001CF6 E812F9                  	call	Get_User_Stack
  7819                                  	;mov	[si+4],cx
  7820                                  	;mov	[si+6],bx
  7821                                  	;mov	[si+2],di
  7822 00001CF9 894C04                  	MOV	[SI+user_env.user_CX],CX
  7823 00001CFC 895C06                  	MOV	[SI+user_env.user_DX],BX
  7824 00001CFF 897C02                  	MOV	[SI+user_env.user_BX],DI
  7825                                  	
  7826                                  	;mov	[si+0Eh],cs
  7827                                  	;mov	[SI+user_env.user_DS],SS
  7828 00001D02 8C4C0E                  	MOV     [SI+user_env.user_DS],CS ; stash correct pointer
  7829                                  
  7830 00001D05 C3                      	retn
  7831                                  
  7832                                  BADSLDRIVE:
  7833 00001D06 E913FA                  	jmp	FCB_RET_ERR
  7834                                  
  7835                                  ;
  7836                                  ;----------------------------------------------------------------------------
  7837                                  ;
  7838                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  7839                                  ;
  7840                                  ;	Returns location of DOS status for interrupt routines
  7841                                  ;									   ;
  7842                                  ;	ENTRY	none
  7843                                  ;	EXIT	(es:bx) = flag location
  7844                                  ;	USES	all
  7845                                  ;
  7846                                  ;----------------------------------------------------------------------------
  7847                                  ;
  7848                                  
  7849                                  _$GET_INDOS_FLAG:
  7850 00001D09 E8FFF8                          CALL	Get_User_Stack
  7851                                          ;MOV	WORD [SI+2],INDOS
  7852 00001D0C C74402[CF02]            	MOV     word [SI+user_env.user_BX],INDOS
  7853                                          ;MOV	[SI+10H],SS
  7854 00001D11 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7855 00001D14 C3                      	RETN 
  7856                                  
  7857                                  ;
  7858                                  ;----------------------------------------------------------------------------
  7859                                  ;
  7860                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  7861                                  ;
  7862                                  ;	Return a pointer to interesting DOS variables This call is version
  7863                                  ;	dependent and is subject to change without notice in future versions.
  7864                                  ;	Use at risk.
  7865                                  ;
  7866                                  ;	ENTRY	none
  7867                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  7868                                  ;	uses	ALL
  7869                                  ;
  7870                                  ;----------------------------------------------------------------------------
  7871                                  ;
  7872                                  
  7873                                  _$GET_IN_VARS:
  7874 00001D15 E8F3F8                          CALL	Get_User_Stack
  7875                                          ;MOV	WORD [SI+2],SYSINITVAR
  7876                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  7877 00001D18 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  7878                                          ;MOV	[SI+10H],SS
  7879 00001D1D 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7880 00001D20 C3                      	RETN
  7881                                  
  7882                                  ;
  7883                                  ;----------------------------------------------------------------------------
  7884                                  ;
  7885                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  7886                                  ;
  7887                                  ;	Return pointer to drive parameter table for default drive
  7888                                  ;
  7889                                  ;	ENTRY	none
  7890                                  ;	EXIT	(ds:bx) = DPB address
  7891                                  ;	USES	all
  7892                                  ;
  7893                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  7894                                  ;
  7895                                  ;	Return pointer to a specified drive parameter table
  7896                                  ;
  7897                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  7898                                  ;	EXIT	(al) = 0 iff ok
  7899                                  ;		  (ds:bx) = DPB address
  7900                                  ;		(al) = -1 if bad drive
  7901                                  ;	USES	all
  7902                                  ;
  7903                                  ;----------------------------------------------------------------------------
  7904                                  ;
  7905                                  
  7906                                  _$GET_DEFAULT_DPB:
  7907 00001D21 B200                    	MOV	DL,0
  7908                                  _$GET_DPB:
  7909 00001D23 16                      	push	ss
  7910 00001D24 1F                      	pop	ds
  7911                                  
  7912 00001D25 88D0                    	MOV	AL,DL
  7913 00001D27 E84C4C                  	call	GETTHISDRV		; Get CDS structure
  7914 00001D2A 7223                    	JC	short ISNODRV 		; no valid drive
  7915 00001D2C C43E[3A05]              	LES	DI,[THISCDS]		; check for net CDS
  7916                                  	;test	word [es:di+43h],8000h
  7917 00001D30 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  7918 00001D36 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  7919 00001D38 E82A03                  	call	EcritDisk
  7920 00001D3B E8823E                  	call	FATREAD_CDS		; Force Media Check and return DPB
  7921 00001D3E E82C03                  	call	LcritDisk
  7922 00001D41 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  7923                                  					;   have.
  7924 00001D43 E8C5F8                  	call	Get_User_Stack
  7925                                  	;mov	[si+2],bp
  7926                                  	;mov	[si+0Eh],es
  7927 00001D46 896C02                  	MOV	[SI+user_env.user_BX],BP
  7928 00001D49 8C440E                  	MOV	[SI+user_env.user_DS],ES
  7929 00001D4C 30C0                    	XOR	AL,AL
  7930 00001D4E C3                      	retn
  7931                                  ISNODRV:
  7932 00001D4F B0FF                    	MOV	AL,-1
  7933 00001D51 C3                      	retn
  7934                                  
  7935                                  ;
  7936                                  ;----------------------------------------------------------------------------
  7937                                  ;
  7938                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  7939                                  ;
  7940                                  ;	$DiskReset flushes and invalidates all buffers. BUGBUG - do
  7941                                  ;		we really invalidate? SHould we? THis screws non-removable
  7942                                  ;		caching. Maybe CHKDSK relies upon it, though....
  7943                                  ;
  7944                                  ;	ENTRY	none
  7945                                  ;	EXIT	none
  7946                                  ;	USES	all
  7947                                  ;
  7948                                  ;----------------------------------------------------------------------------
  7949                                  ;
  7950                                  
  7951                                  _$DISK_RESET:
  7952 00001D52 16                      	push	ss
  7953 00001D53 1F                      	pop	ds
  7954 00001D54 B0FF                    	MOV	AL,-1
  7955 00001D56 E80C03                  	call	EcritDisk
  7956                                  	; MSDOS 6.0
  7957                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  7958 00001D59 E8D641                  	call	FLUSHBUF
  7959                                  	; MSDOS 6.0
  7960                                  	;AND	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  7961                                  	;mov	word [SC_STATUS],0	; Throw out secondary cache M041
  7962                                  ;
  7963                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  7964                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  7965                                  ; let's do it.
  7966                                  ;
  7967                                  ; Invalidate 'last-buffer' used
  7968                                  ;
  7969 00001D5C BBFFFF                  	MOV	BX,-1
  7970 00001D5F 891E[2000]              	MOV	[LastBuffer+2],BX
  7971 00001D63 891E[1E00]              	MOV	[LastBuffer],BX
  7972                                  
  7973                                  	; MSDOS 3.3 
  7974                                  	; IBMDOS.COM, Offset 1C66h
  7975                                  	;;;;
  7976 00001D67 C536[3800]              	lds     si,[BUFFHEAD]
  7977 00001D6B B8FF20                  	mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  7978                                  				; .buf_flags, AH = 0, reset/clear
  7979                                  DRST_1:
  7980                                  	; 25/07/2019 - Retro DOS v3.2
  7981                                  	;;mov	[si+4],ax
  7982                                  	;mov	[si+BUFFINFO.buf_ID],ax
  7983                                  	;lds	si,[SI]
  7984                                  	;cmp	si,bx ; -1
  7985                                  	;je	short DRST_2
  7986                                  
  7987                                  	;mov	[si+4],ax
  7988 00001D6E 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  7989 00001D71 C534                    	lds	si,[SI]
  7990 00001D73 39DE                    	cmp	si,bx
  7991 00001D75 75F7                    	jne	short DRST_1
  7992                                  	;;;;
  7993                                  DRST_2:
  7994 00001D77 E8F302                  	call	LcritDisk
  7995                                  
  7996                                  	; 20/05/2019
  7997                                  	;MOV	AX,-1
  7998                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  7999                                  	;mov	ax,0FFFFh
  8000                                  
  8001 00001D7A B82011                  	mov     ax,1120h
  8002 00001D7D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8003                                  			; DS = DOS CS
  8004                                  			; Return: CF clear (successful)
  8005 00001D7F C3                      	retn
  8006                                  
  8007                                  	; 19/07/2018 - Retro DOS v3.0
  8008                                  
  8009                                  ;
  8010                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8011                                  ;
  8012                                  ;----------------------------------------------------------------------------
  8013                                  ;
  8014                                  ;**	$SetDPB - Create a DPB
  8015                                  ;
  8016                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8017                                  ;
  8018                                  ;	ENTRY	ES:BP Points to DPB
  8019                                  ;		DS:SI Points to BPB
  8020                                  ;	EXIT	DPB setup
  8021                                  ;	USES	ALL but BP, DS, ES
  8022                                  ;
  8023                                  ;----------------------------------------------------------------------------
  8024                                  ;
  8025                                  
  8026                                  ; MSDOS 6.0
  8027 00001D80 0300                    word3:	dw	3			; M008 -- word value for divides
  8028                                  
  8029                                  ;procedure   $SETDPB,NEAR
  8030                                  
  8031                                  _$SETDPB:
  8032 00001D82 89EF                    	MOV	DI,BP
  8033 00001D84 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8034 00001D87 AD                      	LODSW
  8035 00001D88 AB                      	STOSW				; dpb_sector_size
  8036                                  	; MSDOS 6.0
  8037 00001D89 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8038 00001D8D 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8039 00001D8F 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8040 00001D94 EB50                    	JMP	short setend			     ; NO		;AN000;
  8041                                  yesfat: ; 10/08/2018
  8042 00001D96 89C2                    	MOV	DX,AX
  8043 00001D98 AC                      	LODSB
  8044 00001D99 FEC8                    	DEC	AL
  8045 00001D9B AA                      	STOSB				; dpb_cluster_mask
  8046 00001D9C FEC0                    	INC	AL
  8047 00001D9E 30E4                    	XOR	AH,AH
  8048                                  LOG2LOOP:
  8049 00001DA0 A801                    	test	AL,1
  8050 00001DA2 7506                    	JNZ	short SAVLOG
  8051 00001DA4 FEC4                    	INC	AH
  8052 00001DA6 D0E8                    	SHR	AL,1
  8053 00001DA8 EBF6                    	JMP	SHORT LOG2LOOP
  8054                                  SAVLOG:
  8055 00001DAA 88E0                    	MOV	AL,AH
  8056 00001DAC AA                      	STOSB				; dpb_cluster_shift
  8057 00001DAD 88C3                    	MOV	BL,AL
  8058 00001DAF A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8059 00001DB0 AC                      	LODSB
  8060 00001DB1 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8061                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8062                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8063 00001DB2 88C7                    	MOV	BH,AL
  8064 00001DB4 AD                      	LODSW
  8065 00001DB5 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8066 00001DB6 B105                    	MOV	CL,5
  8067 00001DB8 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8068 00001DBA 48                      	DEC	AX
  8069 00001DBB 01D0                    	ADD	AX,DX			; Cause Round Up
  8070 00001DBD 89D1                    	MOV	CX,DX
  8071 00001DBF 31D2                    	XOR	DX,DX
  8072 00001DC1 F7F1                    	DIV	CX
  8073 00001DC3 89C1                    	MOV	CX,AX			; Number of directory sectors
  8074 00001DC5 47                      	INC	DI
  8075 00001DC6 47                      	INC	DI			; Skip dpb_first_sector
  8076 00001DC7 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8077 00001DC8 AC                      	LODSB
  8078                                  	;mov	[es:bp+16h],al
  8079 00001DC9 26884616                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8080 00001DCD AD                      	LODSW				; Number of sectors in a FAT
  8081                                  	;;;
  8082                                  	;MSDOS 6.0
  8083                                  	;
  8084                                  	;STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8085                                  	;MOV	DL,BH			;AN000;;>32mb
  8086                                  	;XOR	DH,DH			;AN000;;>32mb
  8087                                  	;MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8088                                  	
  8089                                  	;MSDOS 3.3
  8090                                  	;
  8091 00001DCE AA                      	STOSB		; DPB.FAT_SIZE
  8092 00001DCF F6E7                    	MUL	BH
  8093                                  	;;;
  8094                                  	;add	ax,[es:bp+6]
  8095 00001DD1 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8096 00001DD5 AB                      	STOSW				; dpb_dir_sector
  8097 00001DD6 01C8                    	ADD	AX,CX			; Add number of directory sectors
  8098                                  	;mov	[es:bp+0Bh],ax
  8099 00001DD8 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8100                                  	
  8101                                  	; MSDOS 6.0
  8102 00001DDC 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8103                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8104                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8105                                  	;XOR	CH,CH			;F.C. >32mb				;AN000;
  8106                                  	;MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8107                                  	;MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8108                                  	;SUB	BX,AX			;AN000;;F.C. >32mb
  8109                                  	;SBB	DX,0			;AN000;;F.C. >32mb
  8110                                  	;OR	CX,CX			;AN000;;F.C. >32mb
  8111                                  	;JZ	short norot		;AN000;;F.C. >32mb
  8112                                  ;rott:					;AN000;;F.C. >32mb
  8113                                  	;CLC				;AN000;;F.C. >32mb
  8114                                  	;RCR	DX,1			;AN000;;F.C. >32mb
  8115                                  	;RCR	BX,1			;AN000;;F.C. >32mb
  8116                                  	;LOOP	rott			;AN000;;F.C. >32mb
  8117                                  ;norot:					;AN000;
  8118                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8119                                  	;JMP	short setend		;AN000;;F.C. >32mb
  8120                                  normal_dpb:
  8121                                  	;sub	ax,[es:bp+0Dh]
  8122 00001DDE 262B460D                	SUB	AX,[ES:BP+DSKSIZ]
  8123 00001DE2 F7D8                    	NEG	AX			; Sectors in data area
  8124                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8125 00001DE4 D3E8                    	SHR	AX,CL			; Div by sectors/cluster
  8126                                  setend:
  8127                                  
  8128                                  ;	M008 - CAS
  8129                                  ;
  8130 00001DE6 40                      	INC	AX			; +2 (reserved), -1 (count -> max)
  8131                                  ;
  8132                                  ;	There has been a bug in our fatsize calculation for so long
  8133                                  ;	  that we can't correct it now without causing some user to
  8134                                  ;	  experience data loss. There are even cases where allowing
  8135                                  ;	  the number of clusters to exceed the fats is the optimal
  8136                                  ;	  case -- where adding 2 more fat sectors would make the
  8137                                  ;	  data field smaller so that there's nothing to use the extra
  8138                                  ;	  fat sectors for.
  8139                                  ;
  8140                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8141                                  ;	  still report that there was a cluster left when the disk was
  8142                                  ;	  actually full. Very graceful failure for a corrupt system
  8143                                  ;	  configuration. There may be worse cases that were never
  8144                                  ;	  properly traced back to this bug. The problem cases only
  8145                                  ;	  occurred when partition sizes were very near FAT sector
  8146                                  ;	  rounding boundaries, which were rare cases.
  8147                                  ;
  8148                                  ;	Also, it's possible that some third-party partition program might
  8149                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8150                                  ;	  scheme. In this hypothetical case, the number of allocation
  8151                                  ;	  clusters which don't actually have FAT entries to represent
  8152                                  ;	  them might be larger and might create a more catastrophic
  8153                                  ;	  failure. So we'll provide the safeguard of limiting the
  8154                                  ;	  max_cluster to the amount that will fit in the FATs.
  8155                                  ;
  8156                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8157                                  
  8158                                  ;	make sure the number of fat sectors is actually enough to
  8159                                  ;	  hold that many clusters. otherwise, back the number of
  8160                                  ;	  clusters down
  8161                                  
  8162                                  	; 19/07/2018 - Retro DOS v3.0
  8163                                  	; MSDOS 6.0
  8164 00001DE7 89C3                    	mov	bx,ax			; remember calculated # clusters
  8165                                  	;;mov	ax,[ES:BP+0Fh]
  8166                                  	;mov	ax,[ES:BP+DPB.FAT_SIZE]
  8167                                  	; 01/08/2018 (MSDOS 3.3)
  8168 00001DE9 268A460F                	mov	al,[ES:BP+DPB.FAT_SIZE]
  8169 00001DED 30E4                    	xor	ah,ah 	
  8170 00001DEF 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8171 00001DF3 81FBF60F                	cmp	bx,4096-10		; test for 12 vs. 16 bit fat
  8172 00001DF7 720D                    	jb	short setend_fat12
  8173 00001DF9 D1EA                    	shr	dx,1
  8174                                  ;cs3 7/2/92
  8175 00001DFB 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8176                                  ;					; than enough for the maximum FAT,
  8177                                  ;					; so go ahead and use the calculated
  8178                                  ;					; number of clusters.
  8179                                  ;cs3 7/2/92
  8180                                  
  8181 00001DFD D1D8                    	rcr	ax,1			; find number of entries
  8182 00001DFF 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8183                                  ;					;  into 12-bit fatland?
  8184 00001E02 7215                    	jb	short setend_faterr	; then go ahead and let the
  8185                                  ;					;  inconsistency pass through
  8186                                  ;					;  rather than lose data by
  8187                                  ;					;  correcting the fat type
  8188 00001E04 EB0E                    	jmp	short setend_fat16
  8189                                  
  8190                                  setend_fat12:
  8191 00001E06 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8192 00001E08 11D2                    	adc	dx,dx
  8193                                  ;cs3 7/2/92
  8194 00001E0A 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8195 00001E0D 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8196                                  ;					; here.  Check for it and use
  8197                                  ;					; the calcuated size in this case.
  8198                                  ;cs3 7/2/92
  8199 00001E0F 2EF736[801D]            	div	word [cs:word3]
  8200                                  
  8201                                  setend_fat16:
  8202 00001E14 48                      	dec	ax			; limit at 1
  8203 00001E15 39D8                    	cmp	ax,bx			; is fat big enough?
  8204 00001E17 7602                    	jbe	short setend_fat	; use max value that'll fit
  8205                                  
  8206                                  setend_faterr:
  8207 00001E19 89D8                    	mov	ax,bx			; use calculated value
  8208                                  
  8209                                  setend_fat:
  8210                                  
  8211                                  ;	now ax = maximum legal cluster
  8212                                  
  8213                                  ;	end M008
  8214                                  
  8215                                  	;mov	[es:bp+0Dh], ax
  8216 00001E1B 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8217                                  	;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8218 00001E1F 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8219                                  					; Init so first ALLOC starts at
  8220                                  					; begining of FAT
  8221                                  	;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8222 00001E25 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8223                                  
  8224 00001E2B C3                      	retn
  8225                                  
  8226                                  ;EndProc $SETDPB
  8227                                  
  8228                                  
  8229                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8230                                  
  8231                                  ;
  8232                                  ;----------------------------------------------------------------------------
  8233                                  ;
  8234                                  ;**	$Dup_PDB
  8235                                  ;
  8236                                  ; Inputs:   DX is new segment address of process
  8237                                  ;	    SI is end of new allocation block
  8238                                  ;
  8239                                  ;----------------------------------------------------------------------------
  8240                                  ;
  8241                                  
  8242                                  _$DUP_PDB:
  8243                                  
  8244                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8245                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8246                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8247                                  
  8248 00001E2C 2EC606[5003]FF          	MOV	byte [CS:CreatePDB],0FFH  ; indicate a new process
  8249 00001E32 2E8E1E[DE02]            	MOV	DS, [CS:CurrentPDB]
  8250 00001E37 56                      	PUSH	SI
  8251 00001E38 EB0A                    	JMP	SHORT CreateCopy
  8252                                  
  8253                                  ;
  8254                                  ;----------------------------------------------------------------------------
  8255                                  ;
  8256                                  ; Inputs:
  8257                                  ;	DX = Segment number of new base
  8258                                  ; Function:
  8259                                  ;	Set up program base and copy term and ^C from int area
  8260                                  ; Returns:
  8261                                  ;	None
  8262                                  ; Called at DOS init
  8263                                  ;
  8264                                  ;----------------------------------------------------------------------------
  8265                                  ;
  8266                                  
  8267                                  _$CREATE_PROCESS_DATA_BLOCK:
  8268                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8269 00001E3A E8CEF7                  	CALL	Get_User_Stack
  8270                                  	;mov	ds,[si+14h]
  8271 00001E3D 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8272                                  	;push	word [2]
  8273 00001E40 FF360200                	PUSH	word [PDB.BLOCK_LEN]
  8274                                  CreateCopy:
  8275 00001E44 8EC2                    	MOV	ES,DX
  8276                                  
  8277 00001E46 31F6                    	XOR	SI,SI			; copy entire PDB
  8278 00001E48 89F7                    	MOV	DI,SI
  8279 00001E4A B98000                  	MOV	CX,80H
  8280 00001E4D F3A5                    	REP	MOVSW
  8281                                  
  8282                                  ; DOS 3.3 7/9/86
  8283                                  
  8284                                  	;mov	cx,20
  8285 00001E4F B91400                  	MOV	CX,FILPERPROC		; copy handles in case of
  8286                                  	;mov	di,18h
  8287 00001E52 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8288 00001E55 1E                      	PUSH	DS
  8289                                  	;lds	si,[34h]
  8290 00001E56 C5363400                	LDS	SI,[PDB.JFN_Pointer]
  8291 00001E5A F3A4                    	REP	MOVSB
  8292 00001E5C 1F                      	POP	DS
  8293                                  
  8294                                  ; DOS 3.3 7/9/86
  8295                                  
  8296                                  	;test	byte [cs:CreatePDB],0FFh
  8297 00001E5D 2E803E[5003]00          	cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8298 00001E63 744B                    	JZ	short Create_PDB_cont 	; nope, old style call
  8299                                  ;
  8300                                  ; Here we set up for a new process...
  8301                                  ;
  8302                                  
  8303 00001E65 0E                      	PUSH    CS                      ; Called at DOSINIT time, NO SS
  8304 00001E66 1F                      	POP     DS
  8305                                  
  8306 00001E67 31DB                    	XOR	BX,BX			; dup all jfns
  8307                                  	;mov	cx,20
  8308 00001E69 B91400                  	MOV	CX,FILPERPROC		; only 20 of them
  8309                                  
  8310                                  Create_dup_jfn:
  8311 00001E6C 06                      	PUSH	ES			; save new PDB
  8312 00001E6D E89149                  	call	SFFromHandle		; get sf pointer
  8313 00001E70 B0FF                    	MOV	AL,-1			; unassigned JFN
  8314 00001E72 7225                    	JC	short CreateStash	; file was not really open
  8315                                  	;test	word [es:di+5],1000h
  8316 00001E74 26F745050010            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8317 00001E7A 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8318                                  ;
  8319                                  ; We do not inherit network file handles.
  8320                                  ;
  8321                                  	;mov	ah,[es:di+2]
  8322 00001E7C 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8323                                  	;and	ah,0F0h
  8324 00001E80 80E4F0                  	AND	AH,SHARING_MASK
  8325                                  	;cmp	ah,70h
  8326 00001E83 80FC70                  	CMP	AH,SHARING_NET_FCB
  8327 00001E86 7411                    	jz	short CreateStash
  8328                                  ;
  8329                                  ; The handle we have found is duplicatable (and inheritable).  Perform
  8330                                  ; duplication operation.
  8331                                  ;
  8332 00001E88 893E[3605]              	MOV	[THISSFT],DI
  8333 00001E8C 8C06[3805]              	MOV	[THISSFT+2],ES
  8334 00001E90 E84218                  	call	DOS_DUP 		; signal duplication
  8335                                  ;
  8336                                  ; get the old sfn for copy
  8337                                  ;
  8338 00001E93 E85349                  	call	pJFNFromHandle		; ES:DI is jfn
  8339 00001E96 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8340                                  ;
  8341                                  ; Take AL (old sfn or -1) and stash it into the new position
  8342                                  ;
  8343                                  CreateStash:
  8344 00001E99 07                      	POP	ES
  8345                                  	;mov	[es:bx+18h],al
  8346 00001E9A 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8347 00001E9E 43                      	INC	BX			; next jfn...
  8348 00001E9F E2CB                    	LOOP	Create_dup_jfn
  8349                                  
  8350 00001EA1 8B1E[DE02]              	MOV	BX,[CurrentPDB]		; get current process
  8351                                  	;mov	[es:bx+16h]
  8352 00001EA5 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8353 00001EAA 8C06[DE02]              	MOV	[CurrentPDB],ES
  8354 00001EAE 8EDB                    	MOV	DS,BX
  8355                                  ;
  8356                                  ; end of new process create
  8357                                  ;
  8358                                  Create_PDB_cont:
  8359 00001EB0 2EC606[5003]00          	MOV     BYTE [CS:CreatePDB],0	; reset flag
  8360 00001EB6 58                      	POP	AX
  8361                                  
  8362                                  	;entry	SETMEM
  8363                                  
  8364                                  ;---------------------------------------------------------------------------
  8365                                  ; Inputs:
  8366                                  ;	AX = Size of memory in paragraphs
  8367                                  ;	DX = Segment
  8368                                  ; Function:
  8369                                  ;	Completely prepares a program base at the
  8370                                  ;	specified segment.
  8371                                  ; Called at DOS init
  8372                                  ; Outputs:
  8373                                  ;	DS = DX
  8374                                  ;	ES = DX
  8375                                  ;	[0] has INT int_abort
  8376                                  ;	[2] = First unavailable segment
  8377                                  ;	[5] to [9] form a long call to the entry point
  8378                                  ;	[10] to [13] have exit address (from int_terminate)
  8379                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8380                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8381                                  ; DX,BP unchanged. All other registers destroyed.
  8382                                  ;---------------------------------------------------------------------------
  8383                                  
  8384                                  SETMEM:
  8385 00001EB7 31C9                    	XOR	CX,CX
  8386 00001EB9 8ED9                    	MOV	DS,CX
  8387 00001EBB 8EC2                    	MOV	ES,DX
  8388                                  	;mov	si,88h
  8389 00001EBD BE8800                  	MOV	SI,addr_int_terminate
  8390                                  	;mov	di,10
  8391 00001EC0 BF0A00                  	MOV	DI,SAVEXIT
  8392 00001EC3 B90600                  	MOV	CX,6
  8393 00001EC6 F3A5                    	REP	MOVSW
  8394 00001EC8 26A30200                	MOV	[ES:2],AX
  8395 00001ECC 29D0                    	SUB	AX,DX
  8396 00001ECE 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8397 00001ED1 7603                    	JBE	short HAVDIF
  8398 00001ED3 B8FF0F                  	MOV	AX,MAXDIF
  8399                                  HAVDIF:
  8400 00001ED6 83E810                  	SUB	AX,10H			; Allow for 100h byte "stack"
  8401 00001ED9 BB0C00                  	MOV	BX,ENTRYPOINTSEG	;	in .COM files
  8402 00001EDC 29C3                    	SUB	BX,AX
  8403 00001EDE B104                    	MOV	CL,4
  8404 00001EE0 D3E0                    	SHL	AX,CL
  8405 00001EE2 8EDA                    	MOV	DS,DX
  8406                                  
  8407                                  	; (MSDOS 6.0 note)
  8408                                  	;
  8409                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8410                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8411                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8412                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8413                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8414                                  	; making this equvalnce valid for this particular case. If however
  8415                                  	; there is less than 64K remaining the address in BX:AX will not 
  8416                                  	; be the same as above. We will then stuff 0:c0 , the call 5 address
  8417                                  	; into the PSP.
  8418                                  	;
  8419                                  	; Therefore for the case where there is less than 64K remaining in 
  8420                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8421                                  	; requirements will not work. Call 5, however will continue to work
  8422                                  	; for all cases.
  8423                                  	;
  8424                                  
  8425                                  	;mov	[6],ax
  8426                                  	;mov	[8],bx
  8427                                  
  8428 00001EE4 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8429 00001EE7 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8430                                  
  8431                                  	;cmp	ax,WRAPOFFSET		; Q: does the system have >= 64k of
  8432                                  	;				;    memory left
  8433                                  	;je	short addr_ok		; Y: the above calculated address is
  8434                                  	;				;    OK
  8435                                  	;				; N: 
  8436                                  
  8437                                  	;MOV	WORD [PDB.CPM_CALL+1],0c0h
  8438                                  	;MOV	WORD [PDB.CPM_CALL+3],0
  8439                                  
  8440                                  ;addr_ok:
  8441                                  
  8442                                  	;mov	word [0],20CDh
  8443 00001EEB C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8444                                  	;mov	byte [5],9Ah
  8445 00001EF1 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8446                                  	;mov	word [50h],21CDh
  8447 00001EF6 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8448                                  	;mov	byte [52h],0CBh
  8449 00001EFC C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8450                                  	;mov	word [34h],18h
  8451 00001F01 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8452                                  	;mov	word [36h],ds
  8453 00001F07 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8454                                  	;mov	word [32h],20
  8455 00001F0B C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8456                                  ;
  8457                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8458                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8459                                  ; particular SFT.  We perform this by requiring that the server link together
  8460                                  ; for us all sub-PDB's that he creates.  The requirement for us, now, is to
  8461                                  ; initialize this pointer.
  8462                                  ;
  8463                                   	;mov	word [38h],-1
  8464 00001F11 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8465                                  	;mov	word [3Ah],-1
  8466 00001F17 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8467                                  
  8468                                  			; Set the real version number in the PSP - 5.00
  8469                                  	;mov	[ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8470                                  
  8471 00001F1D C3                      	retn
  8472                                  
  8473                                  ;============================================================================
  8474                                  ; IBMDOS.COM (MSDOS 3.3 KERNEL), 1987 - Offset 1DE6h
  8475                                  ;============================================================================
  8476                                  ; 19/07/2018 - Retro DOS v3.0
  8477                                  
  8478                                  FETCHI_CHECK:
  8479 00001F1E 9C                      	pushf
  8480 00001F1F 2E813E[8F0F]7258        	cmp	word [cs:FETCHI_TAG], 5872h
  8481 00001F26 7403                    	jz      short FETCHI_CHK_RETN
  8482 00001F28 E85654                  	call    DOSINIT
  8483                                  FETCHI_CHK_RETN:
  8484 00001F2B 9D                      	popf
  8485 00001F2C C3                      	retn
  8486                                  
  8487                                  ;============================================================================
  8488                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8489                                  ;============================================================================
  8490                                  ; 20/07/2018 - Retro DOS v3.0
  8491                                  
  8492                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8493                                  ;----------------------------------------------------------------------------
  8494                                  ;
  8495                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8496                                  ;		Strings of different lengths don't match.
  8497                                  ;   Inputs:	DS:SI - pointer to source string  ES:DI - pointer to dest string
  8498                                  ;   Outputs:	Z if strings same, NZ if different
  8499                                  ;   Registers modified: NONE
  8500                                  ;----------------------------------------------------------------------------
  8501                                  
  8502                                  StrCmp:
  8503 00001F2D 56                      	push	si
  8504 00001F2E 57                      	push	di
  8505 00001F2F 50                      	push	ax
  8506                                  
  8507                                  Cmplp:
  8508 00001F30 AC                      	LODSB
  8509 00001F31 E8DD36                  	call	UCase			; convert to upper case
  8510 00001F34 E81637                  	call	PATHCHRCMP		; convert / to 	MOV	AH,AL
  8512 00001F37 268A05                  	MOV	AL,[ES:DI]
  8513 00001F3A 47                      	INC	DI
  8514 00001F3B E8D336                  	call	UCase			; convert to upper case
  8515 00001F3E E80C37                  	call	PATHCHRCMP		; convert / to 	CMP	AH,AL
  8517 00001F41 7504                    	JNZ	short PopRet		; Strings dif
  8518                                  Tend:
  8519 00001F43 08C0                    	OR	AL,AL
  8520 00001F45 75E9                    	JNZ	short Cmplp		; More string
  8521                                  PopRet:
  8522 00001F47 58                      	pop	ax
  8523 00001F48 5F                      	pop	di
  8524 00001F49 5E                      	pop	si
  8525 00001F4A C3                      	retn
  8526                                  
  8527                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8528                                  ;----------------------------------------------------------------------------
  8529                                  ;
  8530                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8531                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI.  no modification of
  8532                                  ;	characters.
  8533                                  ;
  8534                                  ;   Inputs:	DS:SI - pointer to source string
  8535                                  ;		ES:DI - pointer to destination string
  8536                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8537                                  ;		DS:SI point byte after nul byte at end of source string
  8538                                  ;   Registers modified: SI,DI
  8539                                  ;----------------------------------------------------------------------------
  8540                                  
  8541                                  StrCpy:
  8542 00001F4B 50                      	push	ax
  8543                                  CPYLoop:
  8544 00001F4C AC                      	LODSB
  8545 00001F4D E8C136                  	call	UCase			; convert to upper case
  8546 00001F50 E8FA36                  	call	PATHCHRCMP		; convert / to \ ;
  8547 00001F53 AA                      	STOSB
  8548                                  Tend2:
  8549 00001F54 08C0                    	OR	AL,AL
  8550 00001F56 75F4                    	JNZ	short CPYLoop
  8551 00001F58 58                      	pop	ax
  8552 00001F59 C3                      	retn
  8553                                  
  8554                                  ;----------------------------------------------------------------------------
  8555                                  ; Procedure Name : FStrCpy
  8556                                  ;----------------------------------------------------------------------------
  8557                                  
  8558                                  FStrCpy:
  8559 00001F5A 50                      	push	ax
  8560                                  FCPYLoop:
  8561 00001F5B AC                      	LODSB
  8562 00001F5C AA                      	STOSB
  8563 00001F5D 08C0                    	OR	AL,AL
  8564 00001F5F 75FA                    	JNZ	short FCPYLoop
  8565 00001F61 58                      	pop	ax
  8566 00001F62 C3                      	retn
  8567                                  
  8568                                  ; 20/07/2018 - Retro DOS v3.0
  8569                                  ;----------------------------------------------------------------------------
  8570                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8571                                  ;----------------------------------------------------------------------------
  8572                                  ;
  8573                                  ;UCase:	
  8574                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8575                                  ;	retn
  8576                                  
  8577                                  ;Break <StrLen - compute length of string ES:DI>
  8578                                  ;----------------------------------------------------------------------------
  8579                                  ;**	StrLen - Compute Length of String
  8580                                  ;
  8581                                  ;	StrLen computes the length of a string, including the trailing 00
  8582                                  ;
  8583                                  ;	ENTRY	(es:di) = address of string
  8584                                  ;	EXIT	(cx) = size of string
  8585                                  ;	USES	cx, flags
  8586                                  ;----------------------------------------------------------------------------
  8587                                  
  8588                                  StrLen:
  8589 00001F63 57                      	push	di
  8590 00001F64 50                      	push	ax
  8591                                  	;MOV	CX,-1
  8592 00001F65 B9FFFF                  	mov	cx,65535
  8593 00001F68 30C0                    	XOR	AL,AL
  8594 00001F6A F2AE                    	REPNE	SCASB
  8595 00001F6C F7D1                    	NOT	CX
  8596 00001F6E 58                      	pop	ax
  8597 00001F6F 5F                      	pop	di
  8598 00001F70 C3                      	retn
  8599                                  
  8600                                  ;----------------------------------------------------------------------------
  8601                                  ;**	DStrLen - Compute Length of String
  8602                                  ;
  8603                                  ;	ENTRY	(ds:si) = address of string
  8604                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8605                                  ;	USES	cx, flags
  8606                                  ;----------------------------------------------------------------------------
  8607                                  
  8608                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8609 00001F71 E80700                  	CALL	XCHGP
  8610 00001F74 E8ECFF                  	CALL	StrLen
  8611 00001F77 E80100                  	CALL	XCHGP
  8612 00001F7A C3                      	retn
  8613                                  
  8614                                  ;----------------------------------------------------------------------------
  8615                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8616                                  ;
  8617                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8618                                  ;
  8619                                  ;	ENTRY	none
  8620                                  ;	EXIT	pairs exchanged
  8621                                  ;	USES	SI, DI, DS, ES
  8622                                  ;----------------------------------------------------------------------------
  8623                                  
  8624                                  XCHGP:
  8625 00001F7B 1E                      	push	ds
  8626 00001F7C 06                      	push	es
  8627 00001F7D 1F                      	pop	ds
  8628 00001F7E 07                      	pop	es
  8629 00001F7F 87F7                    	XCHG	SI,DI
  8630                                  xchgp_retn:
  8631 00001F81 C3                      	retn
  8632                                  
  8633                                  ;Break	<Idle - wait for a specified amount of time>
  8634                                  ;----------------------------------------------------------------------------
  8635                                  ;
  8636                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8637                                  ;   	   we spin until RetryLoop is exhausted.
  8638                                  ;
  8639                                  ;   Inputs:	RetryLoop is the number of times we spin
  8640                                  ;   Outputs:	Wait
  8641                                  ;   Registers modified: none
  8642                                  ;----------------------------------------------------------------------------
  8643                                  
  8644                                  Idle:
  8645                                  	;test	byte [SS:FSHARING],0FFh
  8646 00001F82 36803E[0D05]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  8647                                  	;retnz
  8648 00001F88 75F7                    	jnz	short xchgp_retn
  8649                                  	;SAVE	<CX>
  8650 00001F8A 51                      	push	cx
  8651 00001F8B 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  8652 00001F90 E308                    	JCXZ	Idle3
  8653                                  Idle1:	
  8654 00001F92 51                      	PUSH	CX
  8655 00001F93 31C9                    	XOR	CX,CX
  8656                                  Idle2:	
  8657 00001F95 E2FE                    	LOOP	Idle2
  8658 00001F97 59                      	POP	CX
  8659 00001F98 E2F8                    	LOOP	Idle1
  8660                                  Idle3:	
  8661                                  	;RESTORE <CX>
  8662 00001F9A 59                      	pop	cx
  8663 00001F9B C3                      	retn
  8664                                  
  8665                                  ;Break	<TableDispatch - dispatch to a table>
  8666                                  ;----------------------------------------------------------------------------
  8667                                  ;
  8668                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  8669                                  ;   routine.  Preserve all input registers to the routine.
  8670                                  ;
  8671                                  ;   Inputs:	Push	return address
  8672                                  ;		Push	Table address
  8673                                  ;		Push	index (byte)
  8674                                  ;   Outputs:	appropriate routine gets jumped to.
  8675                                  ;		return indicates invalid index
  8676                                  ;   Registers modified: none.
  8677                                  ;----------------------------------------------------------------------------
  8678                                  
  8679                                  struc TFrame	 ; TableFrame
  8680 00000000 ????                    .OldBP:	 resw 1  ; 0
  8681 00000002 ????                    .OldRet: resw 1  ; 2
  8682 00000004 ??                      .Index:	 resb 1  ; 4
  8683 00000005 ??                      .Pad:	 resb 1  ; 5  
  8684 00000006 ????                    .Tab:	 resw 1  ; 6
  8685 00000008 ????                    .NewRet: resw 1  ; 8
  8686                                  endstruc
  8687                                  
  8688                                  TableDispatch:
  8689 00001F9C 55                      	PUSH	BP
  8690 00001F9D 89E5                    	MOV	BP,SP
  8691 00001F9F 53                      	PUSH	BX			; save BX
  8692                                  	;mov	bx,[bp+6]
  8693 00001FA0 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  8694 00001FA3 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  8695                                  	;cmp	[bp+4],bl
  8696 00001FA6 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  8697 00001FA9 7317                    	JAE	short TableError	; yes
  8698                                  	;mov	bl,[bp+4]
  8699 00001FAB 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  8700 00001FAE 30FF                    	XOR	BH,BH			; convert to word
  8701 00001FB0 D1E3                    	SHL	BX,1			; convert to word pointer
  8702 00001FB2 43                      	INC	BX			; point past first length byte
  8703                                  	; 17/08/2018
  8704                                  	;add	bx,[bp+6]
  8705 00001FB3 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  8706 00001FB6 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  8707                                  	;mov	[bp+6],bx
  8708 00001FB9 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  8709 00001FBC 5B                      	POP	BX			; restore BX
  8710 00001FBD 5D                      	POP	BP			; restore BP
  8711 00001FBE 83C404                  	ADD	SP,4			; clean off Index and our return addr
  8712 00001FC1 C3                      	retn				; do operation
  8713                                  TableError:
  8714 00001FC2 5B                      	POP	BX			; restore BX
  8715 00001FC3 5D                      	POP	BP			; restore BP
  8716 00001FC4 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  8717                                  
  8718                                  
  8719                                  ;Break	<TestNet - determine if a CDS is for the network>
  8720                                  ;----------------------------------------------------------------------------
  8721                                  ;
  8722                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  8723                                  ;	network CDS.  This will handle NULL cds also.
  8724                                  ;
  8725                                  ;   Inputs:	ThisCDS points to CDS or NULL
  8726                                  ;   Outputs:	ES:DI = ThisCDS
  8727                                  ;		carry Set => network
  8728                                  ;		carry Clear => local
  8729                                  ;   Registers modified: none.
  8730                                  ;----------------------------------------------------------------------------
  8731                                  
  8732                                  TestNet:
  8733 00001FC7 2EC43E[3A05]            	LES	DI,[CS:THISCDS]
  8734 00001FCC 83FFFF                  	CMP	DI,-1
  8735 00001FCF 7409                    	JZ	short CMCRet		; UNC? carry is clear
  8736                                  	;test	word [es:di+43h],8000h
  8737 00001FD1 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  8738 00001FD7 7501                    	JNZ	short CMCRet		; jump has carry clear
  8739 00001FD9 C3                      	retn				; carry is clear
  8740                                  CMCRet: 
  8741 00001FDA F5                      	CMC
  8742 00001FDB C3                      	retn
  8743                                  
  8744                                  ;Break	<IsSFTNet - see if an sft is for the network>
  8745                                  ;----------------------------------------------------------------------------
  8746                                  ;
  8747                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  8748                                  ;	network file.
  8749                                  ;
  8750                                  ;   Inputs:	ES:DI point to SFT
  8751                                  ;   Outputs:	Zero set if not network sft
  8752                                  ;		zero reset otherwise
  8753                                  ;		Carry CLEAR!!!
  8754                                  ;   Registers modified: none.
  8755                                  ;----------------------------------------------------------------------------
  8756                                  
  8757                                  IsSFTNet:
  8758                                  	;test	word [es:di+5],8000h
  8759 00001FDC 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  8760 00001FE2 C3                      	retn
  8761                                  
  8762                                  ;Break	<FastInit - Initialize FastTable entries >
  8763                                  ;----------------------------------------------------------------------------
  8764                                  ;   DOS 4.00   2/9/87
  8765                                  ;   FastInit  - initialize the FASTXXX routine entry
  8766                                  ;		  in the FastTable
  8767                                  ;
  8768                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  8769                                  ;		DS:SI = address of FASTXXX routine entry
  8770                                  ;		   SI = -1 for query only
  8771                                  ;   Outputs:	Carry flag clear, if success
  8772                                  ;		Carry flag set,   if failure
  8773                                  ;
  8774                                  ;
  8775                                  ;----------------------------------------------------------------------------
  8776                                  
  8777                                  ;Procedure FastInit,NEAR
  8778                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  8779                                  ;FastInit:
  8780                                  	; MSDOS 6.0
  8781                                  	;hkn; set up es to dosdataseg.
  8782                                  	;push	es
  8783                                  	;getdseg <es>			; es -> dosdata
  8784                                  
  8785                                  	;hkn; FastTable is in DOSDATA
  8786                                  	;MOV	DI,OFFSET DOSDATA:FastTable + 2 ;AN000;FO. points to fastxxx entry
  8787                                  	;DEC	BX				;AN000;FO.;; decrement index
  8788                                  	;MOV	DX,BX				;AN000;FO.;; save bx
  8789                                  	;SHL	BX,1				;AN000;FO.;; times 4 , each entry is DWORD
  8790                                  	;SHL	BX,1				;AN000;FO.
  8791                                  	;ADD	DI,BX				;AN000;FO. index to the entry
  8792                                  	;MOV	AX,WORD PTR ES:[DI+2]		;AN000;FO. get entry segment
  8793                                  ;fcheck: 					;AN000;
  8794                                  	;MOV	CX,CS				;AN000;FO.;; get DOS segment
  8795                                  	;CMP	AX,CX				;AN000;FO.;; first time installed ?
  8796                                  	;JZ	short ok_install			;AN000;FO.;; yes
  8797                                  	;OR	AX,AX				;AN000;FO.;
  8798                                  	;JZ	short ok_install		;AN000;FO.;
  8799                                  	;STC					;AN000;FO.;; already installed !
  8800                                  	;JMP	SHORT FSret			;AN000;FO. set carry
  8801                                  ;ok_install:					;AN000;
  8802                                  	;CMP	SI,-1				;AN000;FO.; Query only ?
  8803                                  	;JZ	short FSret			;AN000;FO.; yes
  8804                                  	;MOV	CX,DS				;AN000;FO.; get FASTXXX entry segment
  8805                                  	;MOV	WORD PTR ES:[DI+2],CX		;AN000;FO.; initialize routine entry
  8806                                  	;MOV	WORD PTR ES:[DI],SI		;AN000;FO.; initialize routine offset
  8807                                  
  8808                                  ;hkn; FastFlg moved to DOSDATA
  8809                                  	;MOV	DI,OFFSET DOSDATA:FastFlg	;AN000;FO.; get addr of FASTXXX flags
  8810                                  	;ADD	DI,DX				;AN000;FO.; index to a FASTXXX flag
  8811                                  	;OR	byte ptr ES:[DI],Fast_yes	;AN000;FO.; indicate installed
  8812                                  FSret:						;AN000;
  8813                                  	;pop	es
  8814                                  	;return					;AN000;FO.
  8815                                  ;EndProc FastInit				;AN000;FO.
  8816                                  
  8817                                  	; MSDOS 3.3
  8818                                  	; IBMDOS.COM (1987) - Offset 1EB3h
  8819                                  FastInit:
  8820 00001FE3 BF[430F]                	mov	di,FastTable ; FastOpenTable
  8821 00001FE6 2E8B4504                	mov	ax,[cs:di+4]		; Entry segment
  8822 00001FEA 8CCB                    	mov	bx,cs			; get DOS segment
  8823 00001FEC 39D8                    	cmp	ax,bx			; first time installed ?	
  8824 00001FEE 7402                    	je	short ok_install	; yes
  8825 00001FF0 F9                      	stc				; set carry
  8826 00001FF1 C3                      	retn				; (cf=1 means) already installed !
  8827                                  
  8828                                  ok_install:
  8829 00001FF2 BB[430F]                	mov	bx,FastTable ; FastOpenTable
  8830 00001FF5 8CD9                    	mov	cx,ds
  8831                                  	; set address of FASTXXX (FASTOPEN) routine entry
  8832 00001FF7 2E894F04                	mov	[cs:bx+4],cx
  8833 00001FFB 2E897702                	mov	[cs:bx+2],si
  8834 00001FFF C3                      	retn
  8835                                  
  8836                                  ;Break	<FastRet - initial routine in FastOpenTable >
  8837                                  ;----------------------------------------------------------------------------
  8838                                  ;   DOS 3.3   6/10/86
  8839                                  ;   FastRet	- indicate FASTXXXX  not in memory
  8840                                  ;
  8841                                  ;   Inputs:	None
  8842                                  ;   Outputs:	AX = -1 and carry flag set
  8843                                  ;
  8844                                  ;   Registers modified: none.
  8845                                  ;----------------------------------------------------------------------------
  8846                                  
  8847                                  FastRet:
  8848                                  	;mov	ax,-1
  8849                                  	;stc
  8850                                  	;retf
  8851 00002000 F9                      	STC
  8852 00002001 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  8853 00002003 CB                      	RETF
  8854                                  
  8855                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  8856                                  ;----------------------------------------------------------------------------
  8857                                  ;   DOS 3.3   6/10/86
  8858                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  8859                                  ;
  8860                                  ;   Inputs:	Same input as $OPEN except CL = mode
  8861                                  ;   Outputs:	same output as $OPEN
  8862                                  ;
  8863                                  ;----------------------------------------------------------------------------
  8864                                  
  8865                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  8866                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  8867                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  8868                                  
  8869                                  NLS_OPEN:
  8870                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  8871                                  ;	MOV	BYTE [CPSWFLAG],0
  8872                                  ;	PUSH	BX		 ; save current state
  8873                                  
  8874 00002004 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  8875 00002006 E83050                  	call	_$OPEN
  8876                                  
  8877                                   ;	POP	BX		 ; restore current state
  8878                                   ;	MOV	[CPSWFLAG],BL
  8879 00002009 C3                      	RETN
  8880                                  
  8881                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  8882                                  ;----------------------------------------------------------------------------
  8883                                  ;   DOS 3.3   6/10/86
  8884                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  8885                                  ;
  8886                                  ;   Inputs:	BP = open mode
  8887                                  ;   Outputs:	same output as $LSEEK
  8888                                  ;
  8889                                  ;----------------------------------------------------------------------------
  8890                                  
  8891                                  NLS_LSEEK:
  8892                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8893                                  	;PUSH	word [SS:USER_SS]
  8894 0000200A 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8895 0000200F 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8896 00002014 E81000                  	CALL	Fake_User_Stack
  8897 00002017 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  8898 00002019 E81E4F                  	call	_$LSEEK
  8899                                  	;POP	word [SS:USER_SS] ; restore user stack
  8900                                  	;POP	word [SS:USER_SP]
  8901 0000201C 2E8F06[2005]            	POP	word [cs:USER_SS] ; restore user stack
  8902 00002021 2E8F06[1E05]            	POP	word [cs:USER_SP]
  8903 00002026 C3                      	RETN
  8904                                  
  8905                                  ;Break	<Fake_User_Stack - save user stack>
  8906                                  ;----------------------------------------------------------------------------
  8907                                  ;   DOS 3.3   6/10/86
  8908                                  ;   Fake_User_Stack - save user stack pointer
  8909                                  ;
  8910                                  ;----------------------------------------------------------------------------
  8911                                  
  8912                                  Fake_User_Stack:
  8913                                  	;MOV	AX,[ss:USER_SP_2F] ; replace with INT 2F stack
  8914 00002027 2EA1[710F]              	MOV	AX,[cs:USER_SP_2F]
  8915                                  	;MOV	[SS:USER_SP],AX
  8916 0000202B 2EA3[1E05]              	MOV	[CS:USER_SP],AX
  8917 0000202F 8CC8                    	MOV	AX,CS
  8918                                  	;mov	ax,ss
  8919                                  	;MOV	[SS:USER_SS],AX
  8920 00002031 2EA3[2005]              	MOV	[CS:USER_SS],AX
  8921 00002035 C3                      	RETN
  8922                                  
  8923                                  ;Break	<GetDevList - get device header list pointer>
  8924                                  ;----------------------------------------------------------------------------
  8925                                  ;   DOS 3.3   7/25/86
  8926                                  ;   GetDevList - get device header list pointer
  8927                                  ;
  8928                                  ;   Output: AX:BX points to the device header list
  8929                                  ;----------------------------------------------------------------------------
  8930                                  
  8931                                  GetDevList:
  8932 00002036 BE[3B0F]                	MOV	SI,SysInitTable
  8933                                  	;LDS	SI,[CS:SI+SYSINITVARS]
  8934 00002039 2EC534                  	LDS	SI,[CS:SI]
  8935                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  8936                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  8937 0000203C 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  8938 0000203F 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  8939 00002042 C3                      	RETN
  8940                                  
  8941                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  8942                                  ;----------------------------------------------------------------------------
  8943                                  ;   DOS 3.3   7/25/86
  8944                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  8945                                  ;
  8946                                  ;   Inputs:	BP = function code 0CH
  8947                                  ;   Outputs:	same output as generic $IOCTL
  8948                                  ;
  8949                                  ;----------------------------------------------------------------------------
  8950                                  
  8951                                  NLS_IOCTL:
  8952                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8953                                  	;PUSH	word [SS:USER_SS]
  8954 00002043 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8955 00002048 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8956 0000204D E8D7FF                  	CALL	Fake_User_Stack
  8957 00002050 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  8958 00002052 E85C0F                  	call	_$IOCTL
  8959                                  	;POP	word [SS:USER_SS] ; restore user stack
  8960                                  	;POP	word [SS:USER_SP]
  8961 00002055 2E8F06[2005]            	POP	word [CS:USER_SS] ; restore user stack
  8962 0000205A 2E8F06[1E05]            	POP	word [CS:USER_SP]
  8963 0000205F C3                      	RETN
  8964                                  
  8965                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  8966                                  ;----------------------------------------------------------------------------
  8967                                  ;   DOS 3.3   7/25/86
  8968                                  ;   NLS_GETEXT	-
  8969                                  ;
  8970                                  ;   Inputs:	none
  8971                                  ;   Outputs:	AX = extended error
  8972                                  ;
  8973                                  ;----------------------------------------------------------------------------
  8974                                  
  8975                                  NLS_GETEXT:
  8976                                  	;MOV	AX,[SS:EXTERR]	 ; return extended error
  8977 00002060 2EA1[D202]              	mov	AX,[CS:EXTERR]
  8978 00002064 C3                      	RETN
  8979                                  
  8980                                  ;============================================================================
  8981                                  ; EcritDisk, LcritDisk, EcritDevice, LCritDevice
  8982                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  8983                                  ;============================================================================
  8984                                  ; 20/07/2018 - Retro DOS v3.0
  8985                                  
  8986                                  	; MSDOS 3.3
  8987                                  	; 08/08/2018 - Retro DSOS v3.0
  8988                                  EcritMem:
  8989                                  EcritSFT:
  8990                                  	;
  8991                                  EcritDisk:
  8992                                  	;push	ax
  8993 00002065 C3                      	retn
  8994                                  	
  8995 00002066 B80180                  	mov	ax,8001h
  8996 00002069 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  8997                                  			; AL = critical section number (00h-0Fh)
  8998 0000206B 58                      	pop	ax
  8999 0000206C C3                      	retn
  9000                                  
  9001                                  	; MSDOS 3.3
  9002                                  	; 08/08/2018 - Retro DSOS v3.0
  9003                                  LcritMem:
  9004                                  LcritSFT:
  9005                                  	;
  9006                                  LcritDisk:
  9007                                  	;push	ax
  9008 0000206D C3                      	retn
  9009                                  	
  9010 0000206E B80181                  	mov	ax,8101h
  9011 00002071 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9012                                  			; AL = critical section number (00h-0Fh)
  9013 00002073 58                      	pop	ax
  9014 00002074 C3                      	retn
  9015                                  
  9016                                  EcritDevice:
  9017                                  	;push	ax
  9018 00002075 C3                      	retn
  9019                                  	
  9020 00002076 B80280                  	mov	ax,8002h
  9021 00002079 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9022                                  			; AL = critical section number (00h-0Fh)
  9023 0000207B 58                      	pop	ax
  9024 0000207C C3                      	retn
  9025                                  
  9026                                  LcritDevice:
  9027                                  	;push	ax
  9028 0000207D C3                      	retn
  9029                                  	
  9030 0000207E B80281                  	mov	ax,8102h
  9031 00002081 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9032                                  			; AL = critical section number (00h-0Fh)
  9033 00002083 58                      	pop	ax
  9034 00002084 C3                      	retn
  9035                                  
  9036                                  ;============================================================================
  9037                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9038                                  ;============================================================================
  9039                                  ; 20/07/2018 - Retro DOS v3.0
  9040                                  
  9041                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9042                                  
  9043                                  ; Some old versions of the 80286 have a bug in the chip.  The popf
  9044                                  ; instruction will enable interrupts.  Therefore in a section of code with
  9045                                  ; interrupts disabled and you need a popf instruction use the 'popff'
  9046                                  ; macro instead.
  9047                                  ;
  9048                                  
  9049                                  ;%macro POPFF 0
  9050                                  ;	jmp	$+3
  9051                                  ;	iret
  9052                                  ;	push	cs
  9053                                  ;	call	$-2
  9054                                  ;%endmacro
  9055                                  
  9056                                  ;**	CRIT.ASM - Critical Section Routines
  9057                                  ;
  9058                                  ;	Critical section handlers
  9059                                  ;
  9060                                  ;	Modification history:
  9061                                  ;
  9062                                  ;	    Created: ARR 30 March 1983
  9063                                  
  9064                                  ;
  9065                                  ;SR; This variable is set when the redir installs itself
  9066                                  ;
  9067                                  	;I_need redir_patch,BYTE
  9068                                  
  9069                                  ; Break	<Critical section handlers>
  9070                                  
  9071                                  ;   Each handler must leave everything untouched; including flags!
  9072                                  ;
  9073                                  ;   Sleaze for time savings:  first instruction is a return.  This is patched
  9074                                  ;   by the sharer to be a PUSH AX to complete the correct routines.
  9075                                  
  9076                                  ;Procedure  EcritDisk,NEAR
  9077                                  	;public  EcritMem
  9078                                  	;public  EcritSFT
  9079                                  ;ECritMEM    LABEL   NEAR
  9080                                  ;ECritSFT    LABEL   NEAR
  9081                                  
  9082                                  ;
  9083                                  ;SR; Check if critical section is to be entered
  9084                                  ;
  9085                                  
  9086                                  ;	pushf
  9087                                  ;	cmp	ss:[redir_patch],0
  9088                                  ;	jz	@f
  9089                                  ;	popff
  9090                                  ;
  9091                                  ;       PUSH    AX
  9092                                  ;	MOV     AX,8000h+critDisk
  9093                                  ;	INT     int_ibm
  9094                                  ;	POP     AX
  9095                                  ;	return
  9096                                  ;@@:
  9097                                  ;	popff
  9098                                  ;	ret
  9099                                  ;EndProc EcritDisk
  9100                                  
  9101                                  ;Procedure   LcritDisk,NEAR
  9102                                  ;	public  LcritMem
  9103                                  ;	public  LcritSFT
  9104                                  ;LCritMEM    LABEL   NEAR
  9105                                  ;LCritSFT    LABEL   NEAR
  9106                                  
  9107                                  ;
  9108                                  ;SR; Check if critical section is to be entered
  9109                                  ;
  9110                                  
  9111                                  ;	pushf
  9112                                  ;	cmp	ss:[redir_patch],0
  9113                                  ;	jz	@f
  9114                                  ;	popff
  9115                                  
  9116                                  ;       PUSH    AX
  9117                                  ;	MOV     AX,8100h+critDisk
  9118                                  ;	INT     int_ibm
  9119                                  ;	POP     AX
  9120                                  ;	return
  9121                                  ;@@:
  9122                                  ;	popff
  9123                                  ;	ret
  9124                                  
  9125                                  ;EndProc LcritDisk
  9126                                  
  9127                                  ;Procedure   EcritDevice,NEAR
  9128                                  ;
  9129                                  ;SR; Check if critical section is to be entered
  9130                                  ;
  9131                                  
  9132                                  ;	pushf
  9133                                  ;	cmp	ss:[redir_patch],0
  9134                                  ;	jz	@f
  9135                                  ;	popff
  9136                                  
  9137                                  ;       PUSH    AX
  9138                                  ;	MOV     AX,8000h+critDevice
  9139                                  ;	INT     int_ibm
  9140                                  ;	POP     AX
  9141                                  ;	return
  9142                                  ;@@:
  9143                                  ;	popff
  9144                                  ;	ret
  9145                                  
  9146                                  ;EndProc EcritDevice
  9147                                  
  9148                                  ;Procedure   LcritDevice,NEAR
  9149                                  ;
  9150                                  ;SR; Check if critical section is to be entered
  9151                                  ;
  9152                                  
  9153                                  ;	pushf
  9154                                  ;	cmp	ss:[redir_patch],0
  9155                                  ;	jz	@f
  9156                                  ;	popff
  9157                                  
  9158                                  ;       PUSH    AX
  9159                                  ;	MOV     AX,8100h+critDevice
  9160                                  ;	INT     int_ibm
  9161                                  ;	POP     AX
  9162                                  ;	return
  9163                                  ;@@:
  9164                                  ;	popff
  9165                                  ;	ret
  9166                                  
  9167                                  ;EndProc LcritDevice
  9168                                  
  9169                                  
  9170                                  ;============================================================================
  9171                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9172                                  ;============================================================================
  9173                                  ; 20/07/2018 - Retro DOS v3.0
  9174                                  
  9175                                  ;============================================================================
  9176                                  ; STDIO.ASM - (MSDOS 2.0)
  9177                                  ;============================================================================
  9178                                  
  9179                                  ;
  9180                                  ; Standard device IO for MSDOS (first 12 function calls)
  9181                                  ;
  9182                                  
  9183                                  ;.xlist
  9184                                  ;.xcref
  9185                                  ;INCLUDE STDSW.ASM
  9186                                  ;INCLUDE DOSSEG.ASM
  9187                                  ;.cref
  9188                                  ;.list
  9189                                  
  9190                                  ;TITLE   STDIO - device IO for MSDOS
  9191                                  ;NAME    STDIO
  9192                                  
  9193                                  ;INCLUDE IO.ASM
  9194                                  
  9195                                  ; ---------------------------------------------------------------------------
  9196                                  ;
  9197                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9198                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9199                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9200                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9201                                  ;			    to restore MSDOS 2.0 device IO source code 
  9202                                  ;
  9203                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9204                                  	
  9205                                  ;============================================================================
  9206                                  ; STDIO.ASM - (MSDOS 2.0)
  9207                                  ;============================================================================
  9208                                  
  9209                                  ;
  9210                                  ; Standard device IO for MSDOS (first 12 function calls)
  9211                                  ;
  9212                                  
  9213                                  ;.xlist
  9214                                  ;.xcref
  9215                                  ;INCLUDE STDSW.ASM
  9216                                  ;INCLUDE DOSSEG.ASM
  9217                                  ;.cref
  9218                                  ;.list
  9219                                  
  9220                                  ;TITLE   STDIO - device IO for MSDOS
  9221                                  ;NAME    STDIO
  9222                                  
  9223                                  ;INCLUDE IO.ASM
  9224                                  
  9225                                  ; ---------------------------------------------------------------------------
  9226                                  ;
  9227                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9228                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9229                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9230                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9231                                  ;			    to restore MSDOS 2.0 device IO source code 
  9232                                  ;
  9233                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9234                                  ;
  9235                                  ;============================================================================
  9236                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9237                                  ;============================================================================
  9238                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9239                                  
  9240                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9241                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9242                                  
  9243                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9244                                  ;
  9245                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9246                                  ;	NAME	IBMCPMIO
  9247                                  
  9248                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9249                                  ;
  9250                                  ;	$Std_Con_Input_No_Echo
  9251                                  ;	$Std_Con_String_Output
  9252                                  ;	$Std_Con_String_Input
  9253                                  ;	$RawConIO
  9254                                  ;	$RawConInput
  9255                                  ;	RAWOUT
  9256                                  ;	RAWOUT2
  9257                                  ;
  9258                                  
  9259                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9260                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9261                                  ; references to be SS or CS relative which is desired.
  9262                                  
  9263                                  ; ---------------------------------------------------------------------------
  9264                                  
  9265                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9266                                  ;	NAME	CPMIO2
  9267                                  
  9268                                  ;
  9269                                  ;	Microsoft Confidential
  9270                                  ;	Copyright (C) Microsoft Corporation 1991
  9271                                  ;	All Rights Reserved.
  9272                                  ;
  9273                                  
  9274                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9275                                  ;
  9276                                  ;	$Std_Con_Input
  9277                                  ;	$Std_Con_Output
  9278                                  ;	OUTT
  9279                                  ;	TAB
  9280                                  ;	BUFOUT
  9281                                  ;	$Std_Aux_Input
  9282                                  ;	$Std_Aux_Output
  9283                                  ;	$Std_Printer_Output
  9284                                  ;	$Std_Con_Input_Status
  9285                                  ;	$Std_Con_Input_Flush
  9286                                  ;
  9287                                  ;	Revision History:
  9288                                  ;
  9289                                  ;	  AN000	 version 4.00 - Jan. 1988
  9290                                  
  9291                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9292                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9293                                  ; references to be SS or CS relative which is desired.
  9294                                  
  9295                                  ;DOSCODE SEGMENT
  9296                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9297                                  
  9298                                  
  9299                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9300                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9301                                  ;hkn;	not valid. 
  9302                                  
  9303                                  ;
  9304                                  ;----------------------------------------------------------------------------
  9305                                  ;
  9306                                  ; Procedure : $Std_Con_Input_No_Echo
  9307                                  ;
  9308                                  ;----------------------------------------------------------------------------
  9309                                  ;
  9310                                  
  9311                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9312                                  
  9313                                  ; Inputs:
  9314                                  ;	None
  9315                                  ; Function:
  9316                                  ;	Input character from console, no echo
  9317                                  ; Returns:
  9318                                  ;	AL = character
  9319                                  
  9320 00002085 1E                      	push	ds
  9321 00002086 56                      	push	si
  9322                                  INTEST:
  9323 00002087 E86B36                  	call	STATCHK
  9324 0000208A 754D                    	jnz	short GET ; 08/09/2018
  9325                                  ;*************************************************************************
  9326                                  ;hkn; SS override
  9327 0000208C 36803E[060A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9328 00002092 7505                    	jnz	short no_sys_wait
  9329 00002094 B405                    	mov	ah,5			; get input status with system wait
  9330 00002096 E8B92C                  	call	IOFUNC
  9331                                  no_sys_wait:
  9332                                  ;**************************************************************************
  9333 00002099 B484                    	MOV	AH,84h
  9334 0000209B CD2A                    	INT	int_IBM	 ; int 2Ah
  9335                                  
  9336                                  ;;; 7/15/86  update the date in the idle loop
  9337                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9338                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9339                                  
  9340                                  ;hkn; SS override
  9341 0000209D 36803E[8D0F]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9342 000020A3 752D                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9343 000020A5 50                      	PUSH	AX
  9344 000020A6 53                      	PUSH	BX			; following is tricky,
  9345 000020A7 51                      	PUSH	CX			; it may be called by critical handler
  9346 000020A8 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9347                                  					; other's READ or WRITE
  9348 000020A9 1E                      	PUSH	DS			; save DS = SFT's sgement
  9349                                  
  9350                                  ;hkn; READTIME must use ds = DOSDATA
  9351                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9352                                  
  9353                                  	;push	ss
  9354 000020AA 0E                      	PUSH	CS
  9355 000020AB 1F                      	POP	DS
  9356                                  
  9357 000020AC B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9358 000020AF E89F02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9359                                  	;invoke	READTIME		; readtime
  9360 000020B2 E828F8                  	call	READTIME
  9361 000020B5 B80100                  	MOV	AX,1
  9362 000020B8 E89602                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9363                                  	;
  9364                                  	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9365                                  	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9366 000020BB 53                      	push	bx
  9367 000020BC BB[8D0F]                	mov	bx,DATE_FLAG
  9368 000020BF 83C302                  	add	bx,2  ; mov bx,FETCHI_FLAG
  9369 000020C2 2E813F7258              	cmp	word [cs:bx],5872h
  9370 000020C7 7403                    	jz	short FETCHI_TAG_chk_ok
  9371 000020C9 E8B552                  	call	DOSINIT
  9372                                  FETCHI_TAG_chk_ok:
  9373 000020CC 5B                      	pop	bx
  9374                                  	;
  9375 000020CD 1F                      	POP	DS			; restore DS
  9376 000020CE 5A                      	POP	DX
  9377 000020CF 59                      	POP	CX
  9378 000020D0 5B                      	POP	BX
  9379 000020D1 58                      	POP	AX
  9380                                  NoUpdate:
  9381                                  
  9382                                  ;hkn; SS override
  9383 000020D2 36FF06[8D0F]            	INC	word [SS:DATE_FLAG]
  9384                                  
  9385                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9386 000020D7 EBAE                    	JMP	short INTEST
  9387                                  GET:
  9388 000020D9 30E4                    	XOR	AH,AH
  9389 000020DB E8742C                  	call	IOFUNC
  9390 000020DE 5E                      	POP	SI
  9391 000020DF 1F                      	POP	DS
  9392                                  ;;; 7/15/86
  9393                                  
  9394                                  ;hkn; SS override
  9395                                  	; MSDOS 6.0
  9396 000020E0 36C606[8B0F]00          	MOV	BYTE [SS:SCAN_FLAG],0
  9397                                  	;
  9398 000020E6 3C00                    	CMP	AL,0	    ; extended code ( AL )
  9399 000020E8 7506                    	JNZ	short noscan
  9400                                  
  9401                                  ;hkn; SS override
  9402 000020EA 36C606[8B0F]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
  9403                                  
  9404                                  noscan:
  9405 000020F0 C3                      	retn
  9406                                  ;
  9407                                  ;----------------------------------------------------------------------------
  9408                                  ;
  9409                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
  9410                                  ;
  9411                                  ;
  9412                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
  9413                                  ;	EXIT	none
  9414                                  ;	USES	ALL
  9415                                  ;
  9416                                  ;----------------------------------------------------------------------------
  9417                                  ;
  9418                                  
  9419                                  _$STD_CON_STRING_OUTPUT:	;System call 9
  9420                                  
  9421 000020F1 89D6                    	mov	si,dx
  9422                                  STRING_OUT1:	
  9423 000020F3 AC                      	lodsb
  9424 000020F4 3C24                    	cmp	al,'$'
  9425 000020F6 74F8                    	jz	short noscan
  9426                                  NEXT_STR1:
  9427 000020F8 E88202                  	call	OUTT
  9428 000020FB EBF6                    	jmp	short STRING_OUT1
  9429                                  
  9430                                  ;----------------------------------------------------------------------------
  9431                                  ;
  9432                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
  9433                                  ;
  9434                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
  9435                                  ;
  9436                                  ;	ENTRY	(ds:dx) = input buffer
  9437                                  ;	EXIT	none
  9438                                  ;	USES	ALL
  9439                                  ;
  9440                                  ;----------------------------------------------------------------------------
  9441                                  
  9442                                  _$STD_CON_STRING_INPUT:		;System call 10
  9443                                  
  9444 000020FD 8CD0                    	mov	ax,ss
  9445 000020FF 8EC0                    	mov	es,ax
  9446 00002101 89D6                    	mov	si,dx
  9447 00002103 30ED                    	xor	ch,ch
  9448 00002105 AD                      	lodsw
  9449                                  
  9450                                  ;	(AL) = the buffer length
  9451                                  ;	(AH) = the template length
  9452                                  
  9453 00002106 08C0                            or	al,al
  9454 00002108 74E6                            jz	short noscan	;Buffer is 0 length!!?
  9455 0000210A 88E3                    	mov	bl,ah		;Init template counter
  9456 0000210C 88EF                            mov	bh,ch		;Init template counter
  9457                                  
  9458                                  ;	(BL) = the number of bytes in the template
  9459                                  
  9460 0000210E 38D8                            cmp	al,bl
  9461 00002110 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
  9462 00002112 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
  9463 00002115 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
  9464                                  
  9465                                  ; The number of chars in the template is >= the number of chars in buffer or
  9466                                  ; there is no CR at the end of the template.  This is an inconsistant state
  9467                                  ; of affairs.  Pretend that the template was empty:
  9468                                  ;
  9469                                  
  9470                                  NOEDIT:	
  9471 00002117 88EB                    	mov	bl,ch		;Reset buffer
  9472                                  EDITON: 
  9473 00002119 88C2                    	mov	dl,al
  9474 0000211B 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
  9475                                  
  9476                                  ;	Top level.  We begin to read a line in.
  9477                                  
  9478                                  NEWLIN: 
  9479 0000211C 36A0[A701]              	mov	al,[SS:CARPOS]
  9480 00002120 36A2[A801]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
  9481                                  
  9482 00002124 56                      	push	si
  9483 00002125 BF[A901]                	mov	di,INBUF ;Build the new line here
  9484 00002128 36882E[1405]            	mov	byte [SS:INSMODE],ch ;Insert mode off
  9485 0000212D 88EF                    	mov	bh,ch		;No chars from template yet
  9486 0000212F 88EE                    	mov	dh,ch		;No chars to new line yet
  9487 00002131 E851FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
  9488 00002134 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
  9489 00002136 7503                    	jnz	short GOTCH
  9490                                  
  9491                                  ;	This is the main loop of reading in a character and processing it.
  9492                                  ;
  9493                                  ;	(BH) = the index of the next byte in the template
  9494                                  ;	(BL) = the length of the template
  9495                                  ;	(DH) = the number of bytes in the buffer
  9496                                  ;	(DL) = the length of the buffer
  9497                                  
  9498                                  GETCH:
  9499 00002138 E84AFF                  	call	_$STD_CON_INPUT_NO_ECHO
  9500                                  GOTCH:
  9501                                  ;
  9502                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
  9503                                  ; input queue.
  9504                                  ;
  9505 0000213B 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
  9506 0000213D 74F9                    	jz	short GETCH
  9507                                  
  9508                                  ;	If the leading char is the function-key lead byte
  9509                                  
  9510 0000213F 363A06[D212]                    cmp	al,[SS:ESCCHAR]
  9511 00002144 7438                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
  9512                                  
  9513                                  ;	Rubout and ^H are both destructive backspaces.
  9514                                  
  9515 00002146 3C7F                            cmp	al,c_DEL ; 7FH
  9516 00002148 742B                            jz	short BACKSPJ
  9517 0000214A 3C08                            cmp	al,c_BS  ; 8
  9518 0000214C 7427                            jz	short BACKSPJ
  9519                                  
  9520                                  	; MSDOS 6.0
  9521                                  ;;	^W deletes backward once and then backs up until a letter is before the
  9522                                  ;;	cursor
  9523                                  ;
  9524                                  ;	CMP     AL,"W"-"@" ; 17h
  9525                                  ;
  9526                                  ;;	The removal of the comment characters before the jump statement will
  9527                                  ;;	cause ^W to backup a word.
  9528                                  ;
  9529                                  ;;***	JZ	short WordDel
  9530                                  ;	NOP
  9531                                  ;	NOP
  9532                                  ;	CMP     AL,"U"-"@" ; 15h
  9533                                  ;
  9534                                  ;;	The removal of the comment characters before the jump statement will
  9535                                  ;;	cause ^U to clear a line.
  9536                                  ;
  9537                                  ;;***	JZ	short LineDel
  9538                                  ;	NOP
  9539                                  ;	NOP
  9540                                  
  9541                                  ;	CR terminates the line.
  9542                                  
  9543 0000214E 3C0D                            cmp	al,c_CR ; 0Dh
  9544 00002150 742F                            jz	short ENDLIN
  9545                                  
  9546                                  ;	LF goes to a new line and keeps on reading.
  9547                                  
  9548 00002152 3C0A                            cmp	al,c_LF ; 0Ah
  9549 00002154 7441                    	jz	short PHYCRLF
  9550                                  
  9551                                  ;	^X (or ESC) deletes the line and starts over
  9552                                  
  9553                                  	; MSDOS 3.3
  9554                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
  9555                                  	;jz	short KILNEW
  9556                                  	;MSDOS 6.0
  9557 00002156 3C1B                    	cmp	al,CANCEL ; 1Bh
  9558 00002158 7442                    	jz	short KILNEW
  9559                                  
  9560                                  ; Otherwise, we save the input character.
  9561                                  
  9562                                  SAVCH:	
  9563 0000215A 38D6                    	cmp	dh,dl
  9564 0000215C 7319                    	jnb	short BUFFUL		; buffer is full.
  9565 0000215E AA                              stosb
  9566 0000215F FEC6                    	inc	dh                      ; increment count in buffer.
  9567 00002161 E8B302                  	call	BUFOUT			;Print control chars nicely
  9568                                  
  9569 00002164 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9570 0000216A 75CC                    	jnz	short GETCH		; insertmode => don't advance template
  9571 0000216C 38DF                            cmp	bh,bl
  9572 0000216E 73C8                            jnb	short GETCH		; no more characters in template
  9573 00002170 46                              inc	si                      ; Skip to next char in template
  9574 00002171 FEC7                            inc	bh                      ; remember position in template
  9575 00002173 EBC3                            jmp	short GETCH
  9576                                  
  9577                                  BACKSPJ: 
  9578 00002175 EB38                    	jmp	short BACKSP
  9579                                  
  9580                                  BUFFUL: 
  9581 00002177 B007                    	mov	al, 7			; Bell to signal full buffer
  9582 00002179 E80102                  	call	OUTT
  9583 0000217C EBBA                    	jmp	short GETCH
  9584                                  
  9585                                  ESCAPE: 
  9586                                  	;transfer OEMFunctionKey
  9587 0000217E E98CF6                  	JMP	OEMFunctionKey
  9588                                  
  9589                                  ENDLIN:
  9590 00002181 AA                              stosb				; Put the CR in the buffer
  9591 00002182 E8F801                  	call	OUTT                    ; Echo it
  9592 00002185 5F                              pop	di                      ; Get start of user buffer
  9593 00002186 8875FF                          mov	[di-1], dh		; Tell user how many bytes
  9594 00002189 FEC6                            inc	dh			; DH is length including CR
  9595                                  
  9596                                  COPYNEW:
  9597                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
  9598                                  	;mov	bp, es
  9599                                  	;mov	bx, ds
  9600                                  	;mov	es, bx
  9601                                  	;mov	ds, bp
  9602                                  	;mov	si, INBUF
  9603                                  	;mov	cl, dh
  9604                                  	;rep	movsb
  9605                                  	;retn
  9606                                  
  9607                                  	; CPMIO.ASM (MSDOS 6.0)
  9608                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
  9609                                  	;SAVE	<DS,ES>
  9610 0000218B 1E                      	PUSH	DS
  9611 0000218C 06                      	PUSH	ES
  9612                                  	;RESTORE <DS,ES>		; XCHG ES,DS
  9613 0000218D 1F                      	POP	DS
  9614 0000218E 07                      	POP	ES
  9615                                  
  9616                                  ;;hkn; INBUF is in DOSDATA
  9617 0000218F BE[A901]                        MOV     SI,INBUF
  9618 00002192 88F1                            MOV     CL,DH                   ; set up count
  9619 00002194 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
  9620                                  OLDBAK_RETN:
  9621 00002196 C3                              RETN
  9622                                  
  9623                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
  9624                                  
  9625                                  PHYCRLF:
  9626 00002197 E82001                  	CALL	CRLF
  9627 0000219A EB9C                            JMP	short GETCH
  9628                                  
  9629                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
  9630                                  
  9631                                  	; Note: Following routines were not used in IBMDOS.COM
  9632                                  	;	-CRTL+W, CRTL+U is not activated-
  9633                                  	;	but they were in the kernel code!?)
  9634                                  ;
  9635                                  ; Delete the previous line
  9636                                  ;
  9637                                  ;LineDel:
  9638                                  ;	OR      DH,DH
  9639                                  ;	JZ	short GetCh
  9640                                  ;	Call    BackSpace
  9641                                  ;	JMP	short LineDel
  9642                                  
  9643                                  ;
  9644                                  ; delete the previous word.
  9645                                  ;
  9646                                  ;WordDel:
  9647                                  ;WordLoop:
  9648                                  ;	Call    BackSpace               ; backspace the one spot
  9649                                  ;	OR      DH,DH
  9650                                  ;	JZ	short GetChJ
  9651                                  ;	MOV     AL,[ES:DI-1]
  9652                                  ;	cmp     al,'0'
  9653                                  ;	jb	short GetChj
  9654                                  ;	cmp     al,'9'
  9655                                  ;	jbe	short WordLoop
  9656                                  ;	OR      AL,20h
  9657                                  ;	CMP     AL,'a'
  9658                                  ;	JB	short GetChJ
  9659                                  ;	CMP     AL,'z'
  9660                                  ;	JBE	short WordLoop
  9661                                  ;getchj: 
  9662                                  ;	JMP	GetCh
  9663                                  
  9664                                  ; The user wants to throw away what he's typed in and wants to start over.
  9665                                  ; We print the backslash and then go to the next line and tab to the correct
  9666                                  ; spot to begin the buffered input.
  9667                                  
  9668                                  KILNEW:
  9669 0000219C B05C                            mov	al,'\'
  9670 0000219E E8DC01                          call	OUTT            ;Print the CANCEL indicator
  9671 000021A1 5E                              pop	si		;Remember start of edit buffer
  9672                                  PUTNEW:
  9673 000021A2 E81501                  	call	CRLF            ;Go to next line on screen
  9674 000021A5 36A0[A801]              	mov	al,[SS:STARTPOS]
  9675 000021A9 E84702                  	call	TAB             ;Tab over
  9676 000021AC E96DFF                          JMP     NEWLIN		;Start over again
  9677                                  
  9678                                  ;	Destructively back up one character position
  9679                                  
  9680                                  BACKSP:
  9681                                  	; 09/09/2018
  9682 000021AF E80200                  	Call    BackSpace
  9683 000021B2 EB84                    	JMP     GETCH
  9684                                  
  9685                                  BackSpace:
  9686 000021B4 08F6                    	or	dh,dh
  9687 000021B6 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
  9688 000021B8 E85800                  	call	BACKUP          ;Do the backup
  9689 000021BB 268A05                  	mov	al,[es:di]	;Get the deleted char
  9690 000021BE 3C20                            cmp	al,20h	; ' '
  9691 000021C0 730F                    	jnb	short OLDBAK	;Was a normal char
  9692 000021C2 3C09                            cmp	al,c_HT ; 9
  9693 000021C4 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
  9694                                  ;; 9/27/86 fix for ctrl-U backspace
  9695 000021C6 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
  9696 000021C8 7407                    	JZ	short OLDBAK
  9697 000021CA 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
  9698 000021CC 7403                    	JZ	short OLDBAK
  9699                                  ;; 9/27/86 fix for ctrl-U backspace
  9700 000021CE E84500                          call	BACKMES         ;Was a control char, zap the '^'
  9701                                  OLDBAK:
  9702 000021D1 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9703 000021D7 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
  9704 000021D9 08FF                    	or	bh,bh
  9705 000021DB 74B9                            jz	short OLDBAK_RETN 
  9706                                  				;Not advanced in template, stay where we are
  9707 000021DD FECF                    	dec	bh		;Go back in template
  9708 000021DF 4E                              dec	si
  9709 000021E0 C3                      	retn
  9710                                  
  9711                                  BAKTAB:
  9712 000021E1 57                              push	di
  9713 000021E2 4F                              dec	di		;Back up one char
  9714 000021E3 FD                              std			;Go backward
  9715 000021E4 88F1                            mov	cl,dh		;Number of chars currently in line
  9716 000021E6 B020                            mov	al,20h	; ' '
  9717 000021E8 53                              push	bx
  9718 000021E9 B307                            mov	bl,7		;Max
  9719 000021EB E30E                            jcxz	FIGTAB		;At start, do nothing
  9720                                  FNDPOS:
  9721 000021ED AE                              scasb			;Look back
  9722 000021EE 7609                    	jbe	short CHKCNT
  9723 000021F0 26807D0109              	cmp	byte [es:di+1],9
  9724 000021F5 7409                    	jz	short HAVTAB	;Found a tab
  9725 000021F7 FECB                    	dec	bl		;Back one char if non tab control char
  9726                                  CHKCNT:
  9727 000021F9 E2F2                            loop	FNDPOS
  9728                                  FIGTAB:		
  9729 000021FB 362A1E[A801]            	sub	bl,[SS:STARTPOS]
  9730                                  HAVTAB:
  9731 00002200 28F3                    	sub	bl,dh
  9732 00002202 00D9                    	add	cl,bl
  9733 00002204 80E107                  	and	cl,7		;CX has correct number to erase
  9734 00002207 FC                      	cld			;Back to normal
  9735 00002208 5B                      	pop	bx
  9736 00002209 5F                      	pop	di
  9737 0000220A 74C5                    	jz	short OLDBAK	;Nothing to erase
  9738                                  TABBAK:
  9739 0000220C E80700                  	call	BACKMES
  9740 0000220F E2FB                    	loop	TABBAK		;Erase correct number of chars
  9741 00002211 EBBE                    	jmp	short OLDBAK
  9742                                  
  9743                                  BACKUP:
  9744 00002213 FECE                            dec	dh             ;Back up in line
  9745 00002215 4F                              dec	di
  9746                                  BACKMES:
  9747 00002216 B008                            mov	al,c_BS ; 8	;Backspace
  9748 00002218 E86201                          call	OUTT
  9749 0000221B B020                            mov	al,20h ; ' '	;Erase
  9750 0000221D E85D01                          call	OUTT
  9751 00002220 B008                            mov	al,c_BS ; 8	;Backspace
  9752 00002222 E95801                  	jmp	OUTT		;Done
  9753                                  
  9754                                  ;User really wants an ESC character in his line
  9755                                  TWOESC:	
  9756 00002225 36A0[D212]              	mov	al,[SS:ESCCHAR]
  9757 00002229 E92EFF                  	jmp	SAVCH
  9758                                  
  9759                                  ;Copy the rest of the template
  9760                                  COPYLIN:
  9761 0000222C 88D9                            mov	cl,bl		;Total size of template
  9762 0000222E 28F9                    	sub	cl,bh		;Minus position in template, is number to move
  9763 00002230 EB07                            jmp	short COPYEACH
  9764                                  
  9765                                  COPYSTR:
  9766 00002232 E83400                  	call	FINDOLD         ;Find the char
  9767 00002235 EB02                    	jmp	short COPYEACH  ;Copy up to it
  9768                                  
  9769                                  ;Copy one char from template to line
  9770                                  COPYONE:
  9771 00002237 B101                            mov	cl,1
  9772                                  ;Copy CX chars from template to line
  9773                                  COPYEACH:
  9774 00002239 36C606[1405]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
  9775 0000223F 38D6                    	cmp	dh,dl
  9776 00002241 740F                            jz	short GETCH2		;At end of line, can't do anything
  9777 00002243 38DF                            cmp	bh,bl
  9778 00002245 740B                            jz	short GETCH2		;At end of template, can't do anything
  9779 00002247 AC                              lodsb
  9780 00002248 AA                              stosb
  9781 00002249 E8CB01                  	call	BUFOUT
  9782 0000224C FEC7                            inc	bh			;Ahead in template
  9783 0000224E FEC6                            inc	dh			;Ahead in line
  9784 00002250 E2E7                            loop	COPYEACH
  9785                                  GETCH2:
  9786 00002252 E9E3FE                          jmp	GETCH
  9787                                  
  9788                                  ;Skip one char in template
  9789                                  SKIPONE:
  9790 00002255 38DF                    	cmp	bh,bl
  9791 00002257 74F9                    	jz	short GETCH2		;At end of template
  9792 00002259 FEC7                    	inc	bh			;Ahead in templat
  9793 0000225B 46                      	inc	si
  9794 0000225C E9D9FE                  	jmp	GETCH
  9795                                  
  9796                                  SKIPSTR:
  9797 0000225F E80700                  	call	FINDOLD                 ;Find out how far to go
  9798 00002262 01CE                            add	si,cx			;Go there
  9799 00002264 00CF                            add	bh,cl
  9800 00002266 E9CFFE                          jmp	GETCH
  9801                                  
  9802                                  ;Get the next user char, and look ahead in template for a match
  9803                                  ;CX indicates how many chars to skip to get there on output
  9804                                  ;NOTE: WARNING: If the operation cannot be done, the return
  9805                                  ;       address is popped off and a jump to GETCH is taken.
  9806                                  ;       Make sure nothing extra on stack when this routine
  9807                                  ;       is called!!! (no PUSHes before calling it).
  9808                                  FINDOLD:
  9809 00002269 E819FE                          call	_$STD_CON_INPUT_NO_ECHO
  9810                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
  9811 0000226C 363A06[D212]            	CMP     AL,[SS:ESCCHAR]	; did he type a function key?
  9812                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
  9813                                  	;CMP	AL,[CS:ESCCHAR]
  9814 00002271 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
  9815 00002273 E80FFE                          CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
  9816 00002276 EB1D                            JMP     SHORT NOTFND		; go try again
  9817                                  FINDSETUP:
  9818 00002278 88D9                    	mov	cl,bl
  9819 0000227A 28F9                            sub	cl,bh		;CX is number of chars to end of template
  9820 0000227C 7417                    	jz	short NOTFND	;At end of template
  9821 0000227E 49                              dec	cx		;Cannot point past end, limit search
  9822 0000227F 7414                            jz	short NOTFND	 ;If only one char in template, forget it
  9823 00002281 06                      	push	es
  9824 00002282 1E                      	push	ds
  9825 00002283 07                      	pop	es
  9826 00002284 57                      	push	di
  9827 00002285 89F7                    	mov	di,si		;Template to ES:DI
  9828 00002287 47                      	inc	di
  9829 00002288 F2AE                    	repne	scasb		;Look
  9830 0000228A 5F                      	pop	di
  9831 0000228B 07                      	pop	es
  9832 0000228C 7507                    	jnz	short NOTFND	;Didn't find the char
  9833 0000228E F6D1                            not	cl		;Turn how far to go into how far we went
  9834 00002290 00D9                            add	cl,bl		;Add size of template
  9835 00002292 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
  9836                                  FINDOLD_RETN:
  9837 00002294 C3                      	retn
  9838                                  
  9839                                  NOTFND:
  9840 00002295 5D                              pop	bp              ;Chuck return address
  9841 00002296 E99FFE                          jmp	GETCH
  9842                                  
  9843                                  REEDIT:
  9844 00002299 B040                    	mov	al,'@'		;Output re-edit character
  9845 0000229B E8DF00                  	call	OUTT
  9846 0000229E 5F                      	pop	di
  9847 0000229F 57                      	push	di
  9848 000022A0 06                      	push	es
  9849 000022A1 1E                      	push	ds
  9850 000022A2 E8E6FE                  	call	COPYNEW		;Copy current line into template
  9851 000022A5 1F                      	pop	ds
  9852 000022A6 07                      	pop	es
  9853 000022A7 5E                      	pop	si
  9854 000022A8 88F3                    	mov	bl,dh		;Size of line is new size template
  9855 000022AA E9F5FE                  	jmp	PUTNEW		;Start over again
  9856                                  
  9857                                  EXITINS:
  9858                                  ENTERINS:
  9859 000022AD 36F616[1405]            	not	byte [SS:INSMODE]
  9860 000022B2 E983FE                  	jmp	GETCH
  9861                                  
  9862                                  ;Put a real live ^Z in the buffer (embedded)
  9863                                  CTRLZ:
  9864 000022B5 B01A                    	mov	al,"Z"-"@" ; 1Ah
  9865 000022B7 E9A0FE                          jmp	SAVCH
  9866                                  
  9867                                  ;Output a CRLF
  9868                                  CRLF:
  9869 000022BA B00D                    	mov	al,c_CR ; 0Dh 
  9870 000022BC E8BE00                  	call	OUTT
  9871 000022BF B00A                    	mov	al,c_LF ; 0Ah
  9872 000022C1 E9B900                  	jmp	OUTT
  9873                                  
  9874                                  ;
  9875                                  ;----------------------------------------------------------------------------
  9876                                  ;
  9877                                  ;**	$RAW_CON_IO - Do Raw Console I/O
  9878                                  ;
  9879                                  ;	Input or output raw character from console, no echo
  9880                                  ;
  9881                                  ;	ENTRY	DL = -1 if input
  9882                                  ;		   =  output character if output
  9883                                  ;	EXIT	(AL) = input character if input
  9884                                  ;	USES	all
  9885                                  ;
  9886                                  ;----------------------------------------------------------------------------
  9887                                  ; 20/07/2018 - Retro DOS v3.0
  9888                                  
  9889                                  _$RAW_CON_IO:			; System call 6
  9890                                  
  9891 000022C4 88D0                            MOV     AL,DL
  9892 000022C6 3CFF                            CMP     AL,-1
  9893 000022C8 7542                            JNZ     SHORT RAWOUT
  9894                                          ;LES 	DI,[USER_SP]	; Get pointer to register save area
  9895 000022CA 36C43E[1E05]                    LES     DI,[SS:USER_SP] ; 12/03/2018
  9896 000022CF 31DB                    	XOR     BX,BX
  9897                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9898 000022D1 E8E41D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9899                                          ;JC	SHORT RET17
  9900 000022D4 72BE                            jc	short FINDOLD_RETN
  9901 000022D6 B401                    	MOV     AH,1
  9902 000022D8 E8772A                          CALL	IOFUNC
  9903 000022DB 750B                            JNZ     SHORT RESFLG
  9904 000022DD E8F633                          CALL	SPOOLINT
  9905                                          ;OR	BYTE [ES:DI+16H],40H
  9906 000022E0 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
  9907 000022E5 30C0                            XOR     AL,AL
  9908                                  RET17:
  9909 000022E7 C3                              RETN
  9910                                  
  9911                                  RESFLG:
  9912                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
  9913 000022E8 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
  9914                                  				; Reset user's zero flag
  9915                                  ;RILP:
  9916                                  rci0:
  9917 000022ED E8E633                       	CALL	SPOOLINT
  9918                                  
  9919                                  ;
  9920                                  ;----------------------------------------------------------------------------
  9921                                  ;
  9922                                  ;**	$Raw_CON_INPUT - Raw Console Input
  9923                                  ;
  9924                                  ;	Input raw character from console, no echo
  9925                                  ;
  9926                                  ;	ENTRY	none
  9927                                  ;	EXIT	(al) = character
  9928                                  ;	USES	all
  9929                                  ;
  9930                                  ;----------------------------------------------------------------------------
  9931                                  ;
  9932                                  
  9933                                  ;rci0:	invoke	SPOOLINT
  9934                                  
  9935                                  	;entry	$RAW_CON_INPUT
  9936                                  
  9937                                  _$RAW_CON_INPUT:		; System call 7
  9938 000022F0 53                      	push	bx
  9939 000022F1 31DB                            XOR     BX,BX
  9940                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9941 000022F3 E8C21D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9942 000022F6 5B                              pop	bx
  9943 000022F7 72EE                    	JC	SHORT RET17
  9944 000022F9 B401                            MOV     AH,1
  9945 000022FB E8542A                          CALL	IOFUNC
  9946                                  	;JZ	SHORT RILP	; MSDOS 2.11
  9947                                  	;XOR     AH,AH
  9948                                          ;CALL	IOFUNC
  9949                                          ;RETN
  9950 000022FE 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
  9951 00002300 B484                    	MOV	AH,84h
  9952 00002302 CD2A                    	INT	int_IBM  ; int 2Ah
  9953 00002304 EBE7                    	JMP	short rci0
  9954                                  rci5:	
  9955 00002306 30E4                            XOR     AH,AH
  9956 00002308 E8472A                          CALL	IOFUNC
  9957 0000230B C3                              RETN
  9958                                  
  9959                                  ;
  9960                                  ;       Output the character in AL to stdout
  9961                                  ;
  9962                                  	;entry   RAWOUT
  9963                                  
  9964                                  RAWOUT:
  9965 0000230C 53                              PUSH    BX
  9966 0000230D BB0100                          MOV     BX,1
  9967                                  
  9968                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9969 00002310 E8A51D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9970 00002313 721B                            JC      SHORT RAWRET1
  9971                                  	;
  9972                                  	; MSDOS 2.11
  9973                                          ;TEST	BYTE [SI+18H],080H	; output to file?
  9974                                          ;JZ	SHORT RAWNORM		; if so, do normally
  9975                                          ;PUSH	DS
  9976                                          ;PUSH	SI
  9977                                          ;LDS	SI,[SI+19H]		; output to special?
  9978                                  	;TEST	BYTE [SI+4],ISSPEC
  9979                                  	;POP	SI
  9980                                  	;
  9981                                          
  9982                                  	; MSDOS 3.3 & MSDOS 6.0
  9983                                  	;mov	bx,[si+5]
  9984 00002315 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
  9985                                   ;
  9986                                   ; If we are a network handle OR if we are not a local device then go do the
  9987                                   ; output the hard way.
  9988                                   ;	
  9989                                  	;and	bx,8080h
  9990 00002318 81E38080                	AND	BX,sf_isnet+devid_device
  9991                                  	;cmp	bx,80h
  9992 0000231C 81FB8000                	CMP	BX,devid_device
  9993 00002320 7510                    	jnz     short RAWNORM
  9994 00002322 1E                      	push    ds
  9995                                  	;lds	bx,[si+7]
  9996 00002323 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
  9997                                  	;test	byte [bx+4],10h
  9998 00002326 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
  9999                                  	;
 10000                                  
 10001 0000232A 1F                              POP     DS
 10002 0000232B 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10003 0000232D CD29                            INT     int_fastcon   ; int 29h	; quickly output the char
 10004                                  
 10005                                          ;JMP     SHORT RAWRET
 10006                                  ;RAWNORM:
 10007                                  ;	CALL    RAWOUT3
 10008                                  
 10009                                  RAWRET: 
 10010 0000232F F8                      	CLC
 10011                                  RAWRET1:
 10012 00002330 5B                              POP     BX
 10013                                  RAWRET2:
 10014 00002331 C3                      	RETN
 10015                                  
 10016                                  RAWNORM:
 10017 00002332 E80700                  	CALL    RAWOUT3
 10018 00002335 EBF8                    	jmp	short RAWRET
 10019                                  
 10020                                  ;
 10021                                  ;       Output the character in AL to handle in BX
 10022                                  ;
 10023                                  ;	entry   RAWOUT2
 10024                                  
 10025                                  RAWOUT2:
 10026                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10027                                  	;JC	SHORT RET18
 10028 00002337 E87E1D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10029 0000233A 72F5                    	JC	SHORT RAWRET2
 10030                                  RAWOUT3:
 10031 0000233C 50                              PUSH    AX
 10032 0000233D EB03                            JMP     SHORT RAWOSTRT
 10033                                  ROLP:
 10034 0000233F E89433                          CALL	SPOOLINT
 10035                                  
 10036                                  	; MSDOS 6.0
 10037                                  	;OR	word [DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10038                                  				;AN002; set control break
 10039                                  	;;invoke DSKSTATCHK
 10040                                  	;call	DSKSTATCHK	;AN002; check control break
 10041                                  
 10042                                  RAWOSTRT:
 10043 00002342 B403                            MOV     AH,3
 10044 00002344 E80B2A                          CALL    IOFUNC
 10045 00002347 74F6                            JZ      SHORT ROLP
 10046                                  
 10047                                  	; MSDOS 6.0
 10048                                  ;SR;
 10049                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10050                                  ;the user failed. We do not send a char if this happens. We however return 
 10051                                  ;to the caller with carry clear because this DOS call does not return any
 10052                                  ;status. 
 10053                                  ;
 10054                                  	;inc	ax		;fail on I24 if ax = -1
 10055                                  	;POP	AX
 10056                                  	;jz	short nosend	;yes, do not send char
 10057                                  	;MOV	AH,2
 10058                                  	;call	IOFUNC
 10059                                  ;nosend:
 10060                                  	;CLC			; Clear carry indicating successful
 10061                                  	;retn
 10062                                  
 10063                                  	; MSDOS 3.3 & MSDOS 2.11
 10064 00002349 58                              POP     AX
 10065 0000234A B402                            MOV     AH,2
 10066 0000234C E8032A                          CALL    IOFUNC
 10067 0000234F F8                              CLC                     ; Clear carry indicating successful
 10068                                  RET18:    
 10069 00002350 C3                      	RETN
 10070                                  
 10071                                  ;;10/08/2018
 10072                                  ; 20/07/2018 - Retro DOS v3.0
 10073                                  ; ---------------------------------------------------------------------------
 10074                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10075                                  ; ---------------------------------------------------------------------------
 10076                                  
 10077                                  ; This routine is called at DOS init
 10078                                  
 10079                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10080                                  ;;OUTMES:
 10081                                  ;;	;LODS	CS:BYTE PTR [SI]
 10082                                  ;;	CS	LODSB
 10083                                  ;;	CMP     AL,"$" ; 24h
 10084                                  ;;	JZ	SHORT RET18
 10085                                  ;;	CALL	OUTT
 10086                                  ;;	JMP     SHORT OUTMES
 10087                                  
 10088                                  ; ---------------------------------------------------------------------------
 10089                                  
 10090                                  ; 20/07/2018 - Retro DOS v3.0
 10091                                  
 10092                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10093                                  
 10094                                  ;
 10095                                  ;----------------------------------------------------------------------------
 10096                                  ;
 10097                                  ; Inputs:
 10098                                  ;	AX=0 save the DEVCALL request packet
 10099                                  ;	  =1 restore the DEVCALL request packet
 10100                                  ; Function:
 10101                                  ;	save or restore the DEVCALL packet
 10102                                  ; Returns:
 10103                                  ;	none
 10104                                  ;
 10105                                  ;----------------------------------------------------------------------------
 10106                                  ;
 10107                                  
 10108                                  Save_Restore_Packet:
 10109 00002351 1E                      	PUSH	DS
 10110 00002352 06                      	PUSH	ES
 10111 00002353 56                      	PUSH	SI
 10112 00002354 57                      	PUSH	DI
 10113                                  
 10114                                  	; 09/09/2018
 10115 00002355 BF[730F]                	mov	di,FAKE_STACK_2F 
 10116 00002358 BE[0603]                	mov	si,DEVCALL
 10117                                  	;
 10118 0000235B 83F800                  	CMP	AX,0		; save packet
 10119                                  	;JZ	short save_packet
 10120 0000235E 7402                    	je	short set_seg 
 10121                                  
 10122                                  	; MSDOS 6.0
 10123                                  restore_packet:
 10124                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	 ;sourec
 10125                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	 ;destination
 10126                                  	; MSDOS 3.3
 10127                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10128                                  	;mov	di,DEVCALL  ; 09/09/2018
 10129                                  	;
 10130                                  	;JMP	short set_seg
 10131                                  	
 10132                                  	; 09/09/2018
 10133 00002360 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10134                                  
 10135                                  	; MSDOS 6.0
 10136                                  save_packet:
 10137                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	 ;destination
 10138                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	 ;source
 10139                                  	; 09/09/2018
 10140                                  	; MSDOS 3.3
 10141                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10142                                  	;mov	si,DEVCALL ; 09/09/2018
 10143                                  
 10144                                  set_seg:
 10145                                  	; MSDOS 6.0
 10146                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 10147                                  	; MSDOS 3.3
 10148 00002362 8CC8                    	mov	ax,cs
 10149                                  	;
 10150 00002364 8ED8                    	MOV	DS,AX
 10151 00002366 8EC0                    	MOV	ES,AX
 10152 00002368 B90B00                  	MOV	CX,11		; 11 words to move
 10153 0000236B F3A5                    	REP	MOVSW
 10154                                  
 10155 0000236D 5F                      	POP	DI
 10156 0000236E 5E                      	POP	SI
 10157 0000236F 07                      	POP	ES
 10158 00002370 1F                      	POP	DS
 10159 00002371 C3                      	retn
 10160                                  
 10161                                  ;============================================================================
 10162                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10163                                  ;============================================================================
 10164                                  ; 20/07/2018 - Retro DOS v3.0
 10165                                  
 10166                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10167                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10168                                  ;hkn;	not valid. 
 10169                                  
 10170                                  ;
 10171                                  ;----------------------------------------------------------------------------
 10172                                  ;
 10173                                  ;**	$STD_CON_INPUT - System Call 1
 10174                                  ;
 10175                                  ;	Input character from console, echo
 10176                                  ;
 10177                                  ;	ENTRY	none
 10178                                  ;	EXIT	(al) = character
 10179                                  ;	USES	ALL
 10180                                  ;
 10181                                  ;----------------------------------------------------------------------------
 10182                                  ;
 10183                                  
 10184                                  _$STD_CON_INPUT:	;System call 1
 10185                                  	
 10186 00002372 E810FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10187 00002375 50                      	PUSH	AX
 10188 00002376 E80400                  	CALL	OUTT
 10189 00002379 58                      	POP	AX
 10190                                  CON_INPUT_RETN:	
 10191 0000237A C3                      	RETN
 10192                                  
 10193                                  ;
 10194                                  ;----------------------------------------------------------------------------
 10195                                  ;
 10196                                  ;**	$STD_CON_OUTPUT - System Call 2
 10197                                  ;
 10198                                  ;	Output character to console
 10199                                  ;
 10200                                  ;	ENTRY	(dl) = character
 10201                                  ;	EXIT	none
 10202                                  ;	USES	all
 10203                                  ;
 10204                                  ;----------------------------------------------------------------------------
 10205                                  ;
 10206                                  
 10207                                  _$STD_CON_OUTPUT:	;System call 2
 10208                                  
 10209 0000237B 88D0                    	MOV	AL,DL
 10210                                  
 10211                                  OUTT:
 10212 0000237D 3C20                    	CMP	AL,20H ; " "
 10213 0000237F 725E                    	JB	SHORT CTRLOUT
 10214 00002381 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10215 00002383 7405                    	JZ	SHORT OUTCH
 10216                                  OUTCHA:	
 10217                                  	;INC	BYTE PTR [CARPOS]
 10218 00002385 36FE06[A701]            	INC	BYTE [SS:CARPOS]
 10219                                  OUTCH:
 10220 0000238A 1E                      	PUSH	DS
 10221 0000238B 56                      	PUSH	SI
 10222                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10223                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10224 0000238C 36FE06[AE02]            	INC	BYTE [SS:CHARCO]	
 10225                                  	;AND	BYTE [SS:CHARCO],00111111B
 10226                                  	; 14/03/2018
 10227 00002391 368026[AE02]03          	and	byte [SS:CHARCO],3  ; IBMDOS.COM, MSDOS 3.3, MSDOS 2.11
 10228 00002397 7505                    	JNZ	SHORT OUTSKIP
 10229 00002399 50                      	PUSH	AX
 10230 0000239A E85833                  	CALL	STATCHK
 10231 0000239D 58                      	POP	AX
 10232                                  OUTSKIP:
 10233 0000239E E86BFF                  	CALL	RAWOUT				;output the character
 10234 000023A1 5E                      	POP	SI
 10235 000023A2 1F                      	POP	DS
 10236                                  
 10237                                  	;TEST	BYTE PTR [PFLAG],-1
 10238                                  	;retz
 10239 000023A3 36F606[AC02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 10240 000023A9 74CF                    	JZ	SHORT CON_INPUT_RETN
 10241                                  
 10242 000023AB 53                      	PUSH	BX
 10243 000023AC 1E                      	PUSH	DS
 10244 000023AD 56                      	PUSH	SI
 10245 000023AE BB0100                  	MOV	BX,1
 10246                                  	; 20/07/2018 - Retro DOS v3.0
 10247                                  	; MSDOS 3.3
 10248                                  	; MSDOS 6.0 (CPMIO2.ASM)
 10249 000023B1 E8041D                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 10250                                  					;hkn; to sft entry
 10251 000023B4 7226                    	JC	SHORT TRIPOPJ
 10252                                  	;mov	bx,[si+5]
 10253 000023B6 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 10254                                  	;test	bx,8000h
 10255 000023B9 F7C30080                	TEST	BX,sf_isnet	; 8000H		; output to NET?
 10256 000023BD 751D                    	JNZ	short TRIPOPJ 			; if so, no echo
 10257                                  	;test	bx,80h
 10258 000023BF F7C38000                	TEST	BX,devid_device ; 80H		; output to file?
 10259 000023C3 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 10260                                  	; 14/03/2018
 10261                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 10262                                  	;jc	short TRIPOPJ
 10263                                  	; MSDOS 2.11
 10264                                  	;test	byte [SI+18H], 80h
 10265                                  	;jz	short TRIPOPJ
 10266 000023C5 BB0400                  	MOV	BX,4
 10267 000023C8 E8ED1C                  	CALL	GET_IO_SFT
 10268 000023CB 720F                    	JC	SHORT TRIPOPJ
 10269                                  	;test	word [si+5], 800h
 10270 000023CD F744050008              	TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H 
 10271                                  						; StdPrn redirected?
 10272                                  	;JZ	SHORT LISSTRT2J			; No, OK to echo
 10273 000023D2 0F848E00                	jz	LISSTRT2 ; 10/08/2018 
 10274                                  	;MOV	BYTE [PFLAG],0			
 10275 000023D6 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 10276                                  	; MSDOS 2.11
 10277                                  	;mov	bx,4
 10278                                  	;jmp	short LISSTRT2
 10279                                  	
 10280                                  TRIPOPJ:
 10281                                  	; 20/07/2018
 10282 000023DC E98800                  	JMP	TRIPOP
 10283                                  
 10284                                  ;LISSTRT2J:
 10285                                  ;	JMP	LISSTRT2
 10286                                  
 10287                                  CTRLOUT:
 10288 000023DF 3C0D                    	CMP	AL,c_CR ; 0Dh
 10289 000023E1 7420                    	JZ	SHORT ZERPOS
 10290 000023E3 3C08                    	CMP	AL,c_BS ; 8
 10291 000023E5 7428                    	JZ	SHORT BACKPOS
 10292 000023E7 3C09                    	CMP	AL,c_HT ; 9
 10293 000023E9 759F                    	JNZ	SHORT OUTCH
 10294                                  	;MOV	AL,[CARPOS]
 10295 000023EB 36A0[A701]              	MOV	AL,[SS:CARPOS]
 10296 000023EF 0CF8                    	OR	AL,0F8H
 10297 000023F1 F6D8                    	NEG	AL
 10298                                  
 10299                                  TAB:
 10300 000023F3 51                      	PUSH	CX
 10301 000023F4 88C1                    	MOV	CL,AL
 10302 000023F6 B500                    	MOV	CH,0
 10303 000023F8 E307                    	JCXZ	POPTAB
 10304                                  TABLP:
 10305 000023FA B020                    	MOV	AL," "
 10306 000023FC E87EFF                  	CALL	OUTT
 10307 000023FF E2F9                    	LOOP	TABLP
 10308                                  POPTAB:
 10309 00002401 59                      	POP	CX
 10310 00002402 C3                      	RETN
 10311                                  
 10312                                  ZERPOS:
 10313                                  	;MOV	BYTE PTR [CARPOS],0
 10314 00002403 36C606[A701]00          	MOV	BYTE [SS:CARPOS],0
 10315                                  	; 10/08/2018
 10316 00002409 E97EFF                  	JMP	OUTCH
 10317                                  OUTJ:	
 10318 0000240C E96EFF                  	JMP	OUTT
 10319                                  
 10320                                  BACKPOS:
 10321                                  	;DEC	BYTE PTR [CARPOS]
 10322 0000240F 36FE0E[A701]            	DEC	BYTE [SS:CARPOS]
 10323 00002414 E973FF                  	JMP	OUTCH
 10324                                  
 10325                                  BUFOUT:
 10326 00002417 3C20                    	CMP	AL," "
 10327 00002419 73F1                    	JAE	SHORT OUTJ		;Normal char
 10328 0000241B 3C09                    	CMP	AL,9
 10329 0000241D 74ED                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 10330                                  	;DOS 3.3  7/14/86
 10331 0000241F 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 10332 00002421 740D                    	JZ	short CTRLU
 10333 00002423 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 10334 00002425 7409                    	JZ	short CTRLU
 10335                                  NOT_CTRLU:
 10336                                  	;DOS 3.3  7/14/86
 10337 00002427 50                      	PUSH	AX
 10338 00002428 B05E                    	MOV	AL,"^"
 10339 0000242A E850FF                  	CALL	OUTT		;Print '^' before control chars
 10340 0000242D 58                      	POP	AX
 10341 0000242E 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 10342                                  CTRLU:
 10343 00002430 E84AFF                  	CALL	OUTT
 10344                                  BUFOUT_RETN:
 10345 00002433 C3                      	RETN
 10346                                  
 10347                                  ;
 10348                                  ;----------------------------------------------------------------------------
 10349                                  ;
 10350                                  ;**	$STD_AUX_INPUT - System Call 3
 10351                                  ;
 10352                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 10353                                  ;
 10354                                  ;	ENTRY	none
 10355                                  ;	EXIT	(al) = character
 10356                                  ;	USES	all
 10357                                  ;
 10358                                  ;----------------------------------------------------------------------------
 10359                                  ;
 10360                                  
 10361                                  _$STD_AUX_INPUT:	;System call 3
 10362                                  
 10363 00002434 E8BE32                  	CALL	STATCHK
 10364 00002437 BB0300                  	MOV	BX,3
 10365 0000243A E87B1C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10366                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10367                                  	;retc
 10368 0000243D 72F4                    	JC	SHORT BUFOUT_RETN
 10369 0000243F EB03                    	JMP	SHORT TAISTRT
 10370                                  AUXILP:
 10371 00002441 E89232                  	CALL	SPOOLINT
 10372                                  TAISTRT:
 10373 00002444 B401                    	MOV	AH,1
 10374 00002446 E80929                  	CALL	IOFUNC
 10375 00002449 74F6                    	JZ	SHORT AUXILP
 10376 0000244B 30E4                    	XOR	AH,AH
 10377 0000244D E80229                  	CALL	IOFUNC
 10378 00002450 C3                      	RETN
 10379                                  
 10380                                  ;
 10381                                  ;----------------------------------------------------------------------------
 10382                                  ;
 10383                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 10384                                  ;
 10385                                  ;	ENTRY	(dl) = character
 10386                                  ;	EXIT	none
 10387                                  ;	USES	all
 10388                                  ;
 10389                                  ;----------------------------------------------------------------------------
 10390                                  ;
 10391                                  
 10392                                  _$STD_AUX_OUTPUT:	;System call 4
 10393                                  
 10394 00002451 53                      	PUSH	BX
 10395 00002452 BB0300                  	MOV	BX,3
 10396 00002455 EB04                    	JMP	SHORT SENDOUT
 10397                                  
 10398                                  ;
 10399                                  ;----------------------------------------------------------------------------
 10400                                  ;
 10401                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 10402                                  ;
 10403                                  ;	ENTRY	(dl) = character
 10404                                  ;	EXIT	none
 10405                                  ;	USES	all
 10406                                  ;
 10407                                  ;----------------------------------------------------------------------------
 10408                                  ;
 10409                                  
 10410                                  _$STD_PRINTER_OUTPUT:	;System call 5
 10411                                  
 10412 00002457 53                      	PUSH	BX
 10413 00002458 BB0400                  	MOV	BX,4
 10414                                  
 10415                                  SENDOUT:
 10416 0000245B 88D0                    	MOV	AL,DL
 10417 0000245D 50                      	PUSH	AX
 10418 0000245E E89432                  	CALL	STATCHK
 10419 00002461 58                      	POP	AX
 10420 00002462 1E                      	PUSH	DS
 10421 00002463 56                      	PUSH	SI
 10422                                  LISSTRT2:
 10423 00002464 E8D0FE                  	CALL	RAWOUT2
 10424                                  TRIPOP:
 10425 00002467 5E                      	POP	SI
 10426 00002468 1F                      	POP	DS
 10427 00002469 5B                      	POP	BX
 10428                                  SCIS_RETN:	; 20/07/2018
 10429 0000246A C3                      	RETN
 10430                                  ;
 10431                                  ;----------------------------------------------------------------------------
 10432                                  ;
 10433                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 10434                                  ;
 10435                                  ;	Check console input status
 10436                                  ;
 10437                                  ;	ENTRY	none
 10438                                  ;	EXIT	AL = -1 character available, = 0 no character
 10439                                  ;	USES	all
 10440                                  ;
 10441                                  ;----------------------------------------------------------------------------
 10442                                  ;
 10443                                  
 10444                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 10445                                  
 10446 0000246B E88732                  	CALL	STATCHK
 10447 0000246E B000                    	MOV	AL,0			; no xor!!
 10448                                  	;retz
 10449 00002470 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 10450 00002472 0CFF                    	OR	AL,-1
 10451                                  ;SCIS_RETN:
 10452 00002474 C3                      	RETN
 10453                                  
 10454                                  ;
 10455                                  ;----------------------------------------------------------------------------
 10456                                  ;
 10457                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 10458                                  ;
 10459                                  ;	Flush console input buffer and perform call in AL
 10460                                  ;
 10461                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 10462                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 10463                                  ;		return arguments for the fcn supplied in (AL)
 10464                                  ;	USES	all
 10465                                  ;
 10466                                  ;----------------------------------------------------------------------------
 10467                                  ;
 10468                                  
 10469                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 10470                                  
 10471 00002475 50                      	PUSH	AX
 10472 00002476 52                      	PUSH	DX
 10473 00002477 31DB                    	XOR	BX,BX
 10474 00002479 E83C1C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10475                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10476 0000247C 7205                    	JC	SHORT BADJFNCON
 10477 0000247E B404                    	MOV	AH,4
 10478 00002480 E8CF28                  	CALL	IOFUNC
 10479                                  
 10480                                  BADJFNCON:
 10481 00002483 5A                      	POP	DX
 10482 00002484 58                      	POP	AX
 10483 00002485 88C4                    	MOV	AH,AL
 10484 00002487 3C01                    	CMP	AL,1
 10485 00002489 7413                    	JZ	SHORT REDISPJ
 10486 0000248B 3C06                    	CMP	AL,6
 10487 0000248D 740F                    	JZ	SHORT REDISPJ
 10488 0000248F 3C07                    	CMP	AL,7
 10489 00002491 740B                    	JZ	SHORT REDISPJ
 10490 00002493 3C08                    	CMP	AL,8
 10491 00002495 7407                    	JZ	SHORT REDISPJ
 10492 00002497 3C0A                    	CMP	AL,10
 10493 00002499 7403                    	JZ	SHORT REDISPJ
 10494 0000249B B000                    	MOV	AL,0
 10495 0000249D C3                      	RETN
 10496                                  
 10497                                  REDISPJ:
 10498 0000249E FA                      	CLI
 10499                                  	;transfer REDISP
 10500 0000249F E9A3F0                  	JMP	REDISP
 10501                                  
 10502                                  ;============================================================================
 10503                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 10504                                  ;============================================================================
 10505                                  ; 20/07/2018 - Retro DOS v3.0
 10506                                  
 10507                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 10508                                  ;
 10509                                  ;	$GET_FCB_POSITION
 10510                                  ;	$FCB_DELETE
 10511                                  ;	$GET_FCB_FILE_LENGTH
 10512                                  ;	$FCB_CLOSE
 10513                                  ;	$FCB_RENAME
 10514                                  ;	SaveFCBInfo
 10515                                  ;	ResetLRU
 10516                                  ;	SetOpenAge
 10517                                  ;	LRUFCB
 10518                                  ;	FCBRegen
 10519                                  ;	BlastSFT
 10520                                  ;	CheckFCB
 10521                                  ;	SFTFromFCB
 10522                                  ;	FCBHardErr
 10523                                  ;
 10524                                  ;	Revision history:
 10525                                  ;
 10526                                  ;		Created: ARR 4 April 1983"
 10527                                  ;			 MZ  6 June  1983 completion of functions
 10528                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 10529                                  ;					  times.  Change so successive closes work by
 10530                                  ;					  always returning OK.	Also, detect I/O to
 10531                                  ;					  already closed FCB and return EOF.
 10532                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 10533                                  ;					  out of sft into FCB for reconnection
 10534                                  ;
 10535                                  ;		A000	 version 4.00  Jan. 1988
 10536                                  
 10537                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 10538                                  ;----------------------------------------------------------------------------
 10539                                  ;
 10540                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 10541                                  ;	extent and next record field and set the random record field to point
 10542                                  ;	to that record
 10543                                  ;
 10544                                  ;   Inputs:	DS:DX point to a possible extended FCB
 10545                                  ;   Outputs:	The random record field of the FCB is set to the current record
 10546                                  ;   Registers modified: all
 10547                                  ;
 10548                                  ;----------------------------------------------------------------------------
 10549                                  ;
 10550                                  
 10551                                  _$GET_FCB_POSITION:
 10552 000024A2 E81D05                  	call	GetExtended		; point to FCB
 10553 000024A5 E8ED04                  	call	GetExtent		; DX:AX is current record
 10554                                  	;mov	[si+21h],ax
 10555 000024A8 894421                  	MOV	[SI+SYS_FCB.RR],AX ; drop in low order piece
 10556                                  	;mov	[si+23h],dl
 10557 000024AB 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 10558                                  	;cmp	word [si+0Eh],64
 10559 000024AE 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 10560 000024B2 7303                    	JAE	short GetFCBBye
 10561                                  	;mov	[si+24h],dh
 10562 000024B4 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 10563                                  GetFCBBye:
 10564 000024B7 E95FF2                  	jmp	FCB_RET_OK
 10565                                  
 10566                                  
 10567                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 10568                                  ;----------------------------------------------------------------------------
 10569                                  ;
 10570                                  ;**	$FCB_Delete - Delete from FCB Template
 10571                                  ;
 10572                                  ;	given an FCB, remove all directory entries in the current
 10573                                  ;	directory that have names that match the FCB's ?  marks.
 10574                                  ;
 10575                                  ;	ENTRY	(DS:DX) = address of FCB
 10576                                  ;	EXIT	entries matching the FCB are deleted
 10577                                  ;		(al) = ff iff no entries were deleted
 10578                                  ;	USES	all
 10579                                  ;
 10580                                  ;----------------------------------------------------------------------------
 10581                                  ;
 10582                                  
 10583                                  _$FCB_DELETE:		; System call 19
 10584                                  					; OpenBuf is in DOSDATA
 10585 000024BA BF[6003]                	MOV	DI,OPENBUF 		; appropriate place 
 10586                                  
 10587 000024BD E82D45                  	call	TransFCB		; convert FCB to path
 10588 000024C0 720A                    	JC	short BadPath 		; signal no deletions
 10589                                  
 10590 000024C2 16                      	push	SS
 10591 000024C3 1F                      	pop	DS			; SS is DOSDATA
 10592                                  
 10593 000024C4 E8A30D                  	call	DOS_DELETE		; wham
 10594 000024C7 7203                    	JC	short BadPath
 10595                                  GoodPath:
 10596 000024C9 E94DF2                  	jmp	FCB_RET_OK		; do a good return
 10597                                  BadPath:
 10598                                  	; Error code is in AX
 10599                                  
 10600 000024CC E94DF2                  	jmp	FCB_RET_ERR		; let someone else signal the error
 10601                                  
 10602                                  
 10603                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 10604                                  ;----------------------------------------------------------------------------
 10605                                  ;
 10606                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 10607                                  ;	file in records (rounded up if partial).
 10608                                  ;
 10609                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 10610                                  ;   Outputs:	Random record field updated to reflect the number of records
 10611                                  ;   Registers modified: all
 10612                                  ;
 10613                                  ;----------------------------------------------------------------------------
 10614                                  ;
 10615                                  
 10616                                  _$GET_FCB_FILE_LENGTH:
 10617                                  
 10618 000024CF E8F004                  	call	GetExtended		; get real FCB pointer
 10619                                  					; DX points to Input FCB
 10620                                  
 10621                                  					; OpenBuf is in DOSDATA
 10622 000024D2 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 10623                                  
 10624 000024D5 1E                      	push	ds			; save pointer to true FCB
 10625 000024D6 56                      	push	si
 10626 000024D7 E81345                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 10627 000024DA 5E                      	pop	si
 10628 000024DB 1F                      	pop	ds
 10629 000024DC 72EE                    	JC	short BadPath
 10630 000024DE 1E                      	push	ds			; save pointer
 10631 000024DF 56                      	push	si
 10632 000024E0 16                      	push	ss		
 10633 000024E1 1F                      	pop	ds
 10634 000024E2 E80811                  	call	GET_FILE_INFO		; grab the info
 10635 000024E5 5E                      	pop	si			; get pointer back
 10636 000024E6 1F                      	pop	ds
 10637 000024E7 72E3                    	JC	short BadPath 		; invalid something
 10638 000024E9 89DA                    	MOV	DX,BX			; get high order size
 10639 000024EB 89F8                    	MOV	AX,DI			; get low order size
 10640                                  	;mov	 bx,[si+0Eh]
 10641 000024ED 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 10642 000024F0 09DB                    	OR	BX,BX			; empty record => 0 size for file
 10643 000024F2 7503                    	JNZ	short GetSize 		; not empty
 10644 000024F4 BB8000                  	MOV	BX,128
 10645                                  GetSize:
 10646 000024F7 89C7                    	MOV	DI,AX			; save low order word
 10647 000024F9 89D0                    	MOV	AX,DX			; move high order for divide
 10648 000024FB 31D2                    	XOR	DX,DX			; clear out high
 10649 000024FD F7F3                    	DIV	BX			; wham
 10650 000024FF 50                      	PUSH	AX			; save dividend
 10651 00002500 89F8                    	MOV	AX,DI			; get low order piece
 10652 00002502 F7F3                    	DIV	BX			; wham
 10653 00002504 89D1                    	MOV	CX,DX			; save remainder
 10654 00002506 5A                      	POP	DX			; get high order dividend
 10655 00002507 E306                    	JCXZ	LengthStore		; no roundup
 10656 00002509 83C001                  	ADD	AX,1
 10657 0000250C 83D200                  	ADC	DX,0			; 32-bit increment
 10658                                  LengthStore:
 10659                                  	;mov	[si+21h],ax
 10660 0000250F 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 10661                                  	;mov	[si+23h],dl
 10662 00002512 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 10663 00002515 08F6                    	OR	DH,DH
 10664 00002517 74B0                    	JZ	short GoodPath		; not storing insignificant zero
 10665                                  	;mov	[si+24h],dh
 10666 00002519 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 10667                                  GoodRet:
 10668                                  	;jmp	FCB_RET_OK
 10669 0000251C EBAB                    	jmp	short GoodPath
 10670                                  
 10671                                  ;Break <$FCB_Close - close a file>
 10672                                  ;----------------------------------------------------------------------------
 10673                                  ;
 10674                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 10675                                  ;	as the FCB may be used for further I/O
 10676                                  ;
 10677                                  ;   Inputs:	DS:DX point to FCB
 10678                                  ;   Outputs:	AL = FF if file was not found on disk
 10679                                  ;   Registers modified: all
 10680                                  ;
 10681                                  ;----------------------------------------------------------------------------
 10682                                  ;
 10683                                  
 10684                                  _$FCB_CLOSE:		; System call 16
 10685                                  
 10686 0000251E 30C0                    	XOR	AL,AL			; default search attributes
 10687 00002520 E89F04                  	call	GetExtended		; DS:SI point to real FCB
 10688 00002523 7403                    	JZ	short NoAttr		; not extended
 10689 00002525 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 10690                                  NoAttr:
 10691                                  					; SS override
 10692 00002528 36A2[0605]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 10693 0000252C E80804                  	call	SFTFromFCB
 10694 0000252F 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 10695                                  
 10696                                  	;
 10697                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 10698                                  	; there is no need to set the SFT's attribute.
 10699                                  	;
 10700                                  
 10701                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10702                                  	;;; done
 10703                                  
 10704                                  	;mov	al,[es:di+4]
 10705 00002531 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 10706 00002535 30E4                    	XOR	AH,AH
 10707 00002537 50                      	PUSH	AX
 10708                                  
 10709                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10710                                  	;;; done
 10711                                  
 10712 00002538 E8E84D                  	call	CheckShare
 10713 0000253B 7508                    	JNZ	short NoStash
 10714 0000253D 36A0[0605]              	MOV	AL,[SS:ATTRIB]
 10715                                  	;mov	[es:di+4],al
 10716 00002541 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 10717                                  NoStash:
 10718                                  	;mov	ax,[si+14h]
 10719 00002545 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 10720                                  	;mov	[es:di+0Fh],ax
 10721 00002548 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 10722                                  	;mov	ax,[si+16h]
 10723 0000254C 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 10724                                  	;mov	[es:di+0Dh],ax
 10725 0000254F 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 10726                                  	;mov	ax,[si+10h]
 10727 00002553 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 10728                                  	;mov	[es:di+11h],ax
 10729 00002556 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 10730                                  	;mov	ax,[si+12h]
 10731 0000255A 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 10732                                  	;mov	[es:di+13h],ax
 10733 0000255D 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 10734                                  	;or	word [es:di+5],4000h
 10735 00002561 26814D050040            	OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 10736 00002567 16                      	push	ss
 10737 00002568 1F                      	pop	ds
 10738 00002569 E85015                  	call	DOS_CLOSE	; wham
 10739 0000256C C43E[3605]              	LES	DI,[THISSFT]
 10740                                  
 10741                                  	;;; 9/8/86 F.C. restore SFT attribute
 10742 00002570 59                      	POP	CX
 10743                                  	;mov	[es:di+4],cl
 10744 00002571 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 10745                                  	;;; 9/8/86 F.C. restore SFT attribute
 10746                                  
 10747 00002575 9C                      	PUSHF
 10748                                  	;test	word [es:di],0FFFFh
 10749                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 10750                                  				; zero ref count gets blasted
 10751 00002576 26833D00                	cmp	word [ES:DI],0
 10752 0000257A 7507                    	jnz     short CloseOK
 10753 0000257C 50                      	PUSH	AX
 10754 0000257D B04D                    	MOV	AL,'M'
 10755 0000257F E8DA02                  	call	BlastSFT
 10756 00002582 58                      	POP	AX
 10757                                  CloseOK:
 10758 00002583 9D                      	POPF
 10759 00002584 7396                    	JNC	short GoodRet
 10760                                  	;cmp	al,6
 10761 00002586 3C06                    	CMP	AL,error_invalid_handle
 10762 00002588 7492                    	JZ	short GoodRet
 10763                                  	;mov	al,2
 10764 0000258A B002                    	MOV	AL,error_file_not_found
 10765                                  fcb_close_err:
 10766 0000258C E98DF1                  	jmp	FCB_RET_ERR
 10767                                  
 10768                                  ;
 10769                                  ;----------------------------------------------------------------------------
 10770                                  ;
 10771                                  ;**	$FCB_Rename - Rename a File
 10772                                  ;
 10773                                  ;	$FCB_Rename - rename a file in place within a directory.  Renames
 10774                                  ;	multiple files copying from the meta characters.
 10775                                  ;
 10776                                  ;	ENTRY	DS:DX point to an FCB.	The normal name field is the source
 10777                                  ;		    name of the files to be renamed.  Starting at offset 11h
 10778                                  ;		    in the FCB is the destination name.
 10779                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 10780                                  ;		AL = FF -> some files may have been renamed but:
 10781                                  ;			rename to existing file or source file not found
 10782                                  ;	USES	ALL
 10783                                  ;
 10784                                  ;----------------------------------------------------------------------------
 10785                                  ;
 10786                                  
 10787                                  _$FCB_RENAME:		; System call 23
 10788                                  
 10789 0000258F E83004                  	call	GetExtended		; get pointer to real FCB
 10790 00002592 52                      	push	dx
 10791 00002593 8A04                    	MOV	AL,[SI] 		; get drive byte
 10792 00002595 83C610                  	ADD	SI,10h			; point to destination
 10793                                  
 10794                                  					; RenBuf is in DOSDATA
 10795 00002598 BF[E003]                	MOV	DI,RENBUF		; point to destination buffer
 10796 0000259B FF34                    	push	word [SI]
 10797 0000259D 1E                      	push	ds
 10798                                  	;push	di			; save source pointer for TransFCB
 10799                                  	; 16/01/2024 - BugFix !
 10800 0000259E 56                      	push	si
 10801 0000259F 8804                    	MOV	[SI],AL			; drop in real drive
 10802 000025A1 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 10803 000025A3 E84744                  	call	TransFCB		; munch this pathname
 10804 000025A6 5E                      	pop	si
 10805 000025A7 1F                      	pop	ds	
 10806 000025A8 8F04                    	pop	WORD [SI]		; get path back
 10807 000025AA 5A                      	pop	dx			; Original FCB pointer
 10808 000025AB 721A                    	JC	short fren90		; bad path -> error
 10809                                  
 10810                                  					; SS override for WFP_Start & Ren_WFP
 10811 000025AD 368B36[4A05]            	MOV	SI,[ss:WFP_START]	; get pointer
 10812 000025B2 368936[4C05]            	MOV	[ss:REN_WFP],SI		; stash it
 10813                                  
 10814                                  					; OpenBuf is in DOSDATA
 10815 000025B7 BF[6003]                	MOV	DI,OPENBUF		; appropriate spot
 10816 000025BA E83044                  	call	TransFCB		; wham
 10817                                  					; NOTE that this call is pointing
 10818                                  					;  back to the ORIGINAL FCB so
 10819                                  					;  SATTRIB gets set correctly
 10820 000025BD 7208                    	JC	short fren90		; error
 10821 000025BF E8530E                  	call	DOS_RENAME
 10822 000025C2 7203                    	JC	short fren90
 10823 000025C4 E952F1                  	jmp	FCB_RET_OK
 10824                                  
 10825                                  ;	Error -
 10826                                  ;
 10827                                  ;	(al) = error code
 10828                                  
 10829                                  fren90:	
 10830 000025C7 E952F1                  	jmp	FCB_RET_ERR
 10831                                  
 10832                                  
 10833                                  ;Break <Misbehavior fixers>
 10834                                  ;
 10835                                  ;   FCBs suffer from several problems.	First, they are maintained in the
 10836                                  ;   user's space so he may move them at will.  Second, they have a small
 10837                                  ;   reserved area that may be used for system information.  Third, there was
 10838                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 10839                                  ;   usage.
 10840                                  ;
 10841                                  ;   This results in the following misbehavior:
 10842                                  ;
 10843                                  ;	infinite opens of the same file:
 10844                                  ;
 10845                                  ;	While (TRUE) {			While (TRUE) {
 10846                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 10847                                  ;	    Read (FCB); 		    Write (FCB);
 10848                                  ;	    }				    }
 10849                                  ;
 10850                                  ;	infinite opens of different files:
 10851                                  ;
 10852                                  ;	While (TRUE) {			While (TRUE) {
 10853                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 10854                                  ;	    Read (FCB); 		    Write (FCB);
 10855                                  ;	    }				    }
 10856                                  ;
 10857                                  ;	multiple closes of the same file:
 10858                                  ;
 10859                                  ;	FCBOpen (FCB);
 10860                                  ;	while (TRUE)
 10861                                  ;	    FCBClose (FCB);
 10862                                  ;
 10863                                  ;	I/O after closing file:
 10864                                  ;
 10865                                  ;	FCBOpen (FCB);
 10866                                  ;	while (TRUE) {
 10867                                  ;	    FCBWrite (FCB);
 10868                                  ;	    FCBClose (FCB);
 10869                                  ;	    }
 10870                                  ;
 10871                                  ;   The following is am implementation of a methodology for emulating the
 10872                                  ;   above with the exception of I/O after close.  We are NOT attempting to
 10873                                  ;   resolve that particular misbehavior.  We will enforce correct behaviour in
 10874                                  ;   FCBs when they refer to a network file or when there is file sharing on
 10875                                  ;   the local machine.
 10876                                  ;
 10877                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 10878                                  ;   structures depending on the file itself and the state of operations of the
 10879                                  ;   OS.  The information contained in this reserved field is enough to
 10880                                  ;   regenerate the SFT for the local non-shared file.  It is assumed that this
 10881                                  ;   regeneration procedure may be expensive.  The SFT for the FCB is
 10882                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 10883                                  ;
 10884                                  ;   No regeneration of SFTs is attempted for network FCBs.
 10885                                  ;
 10886                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 10887                                  ;   file sharer is working.  If the file sharer is present then the SFT is not
 10888                                  ;   regenerated.
 10889                                  ;
 10890                                  ;   Finally, if there is no local sharing, the full name of the file is no
 10891                                  ;   longer available.  We can make up for this by using the following
 10892                                  ;   information:
 10893                                  ;
 10894                                  ;	The Drive number (from the DPB).
 10895                                  ;	The physical sector of the directory that contains the entry.
 10896                                  ;	The relative position of the entry in the sector.
 10897                                  ;	The first cluster field.
 10898                                  ;	The last used SFT.
 10899                                  ;      OR In the case of a device FCB
 10900                                  ;	The low 6 bits of sf_flags (indicating device type)
 10901                                  ;	The pointer to the device header
 10902                                  ;
 10903                                  ;
 10904                                  ;   We read in the particular directory sector and examine the indicated
 10905                                  ;   directory entry.  If it matches, then we are kosher; otherwise, we fail.
 10906                                  ;
 10907                                  ;   Some key items need to be remembered:
 10908                                  ;
 10909                                  ;	Even though we are caching SFTs, they may contain useful sharing
 10910                                  ;	information.  We enforce good behavior on the FCBs.
 10911                                  ;
 10912                                  ;	Network support must not treat FCBs as impacting the ref counts on
 10913                                  ;	open VCs.  The VCs may be closed only at process termination.
 10914                                  ;
 10915                                  ;	If this is not an installed version of the DOS, file sharing will
 10916                                  ;	always be present.
 10917                                  ;
 10918                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 10919                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 10920                                  ;
 10921                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 10922                                  ;	and open_for_both.  This is so the FCB code in the sharer can find the
 10923                                  ;	proper OI record.
 10924                                  ;
 10925                                  ;   The test bits are:
 10926                                  ;
 10927                                  ;	00 -> local file
 10928                                  ;	40 -> sharing local
 10929                                  ;	80 -> network
 10930                                  ;	C0 -> local device
 10931                                  
 10932                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 10933                                  ;----------------------------------------------------------------------------
 10934                                  ;
 10935                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 10936                                  ;	pieces of information into the FCB to allow for subsequent
 10937                                  ;	regeneration. Poke LRU also.
 10938                                  ;
 10939                                  ;   Inputs:	ThisSFT points to a complete SFT.
 10940                                  ;		DS:SI point to the FCB (not an extended one)
 10941                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 10942                                  ;		DS:SI preserved
 10943                                  ;		ES:DI point to sft
 10944                                  ;   Registers modified: All
 10945                                  ;
 10946                                  ;
 10947                                  ;----------------------------------------------------------------------------
 10948                                  ;
 10949                                  
 10950                                  SaveFCBInfo:
 10951                                  
 10952 000025CA 36C43E[3605]            	LES	DI,[SS:THISSFT]		; SS override
 10953 000025CF E80AFA                  	call	IsSFTNet
 10954 000025D2 7419                    	JZ	short SaveLocal		; if not network then save local info
 10955                                  ;
 10956                                  ;----- In net support -----
 10957                                  ;
 10958                                  	; MSDOS 6.0
 10959                                  	;MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 10960                                  	;MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 10961                                  	; MSDOS 3.3
 10962                                  	;mov	ax,[es:di+1Dh]
 10963 000025D4 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 10964                                  	;mov	[si+1Ah],ax
 10965 000025D8 89441A                  	mov	[si+fcb_net_handle],ax
 10966                                  
 10967                                  	; MSDOS 3.3
 10968 000025DB 06                      	push	es
 10969 000025DC 57                      	push	di
 10970                                  	;les	di,[es:di+19h]
 10971 000025DD 26C47D19                	LES	DI,[ES:DI+sf_netid]
 10972                                  	;mov	[si+1Ch],di
 10973 000025E1 897C1C                  	MOV	[SI+fcb_netID],DI	; save net ID
 10974                                  	;mov 	[si+1Eh],es
 10975 000025E4 8C441E                  	MOV	[SI+fcb_netID+2],ES
 10976 000025E7 5F                      	pop	di
 10977 000025E8 07                      	pop	es
 10978                                  
 10979                                  	;mov	bl,80h
 10980 000025E9 B380                    	MOV	BL,FCBNETWORK
 10981                                  ;
 10982                                  ;----- END In net support -----
 10983                                  ;
 10984 000025EB EB4C                    	jmp	SHORT SaveSFN
 10985                                  
 10986                                  SaveLocal:
 10987                                  	;IF	Installed
 10988 000025ED E8334D                  	call	CheckShare
 10989 000025F0 7402                    	JZ	short SaveNoShare	; no sharer
 10990 000025F2 EB40                    	JMP	short SaveShare		; sharer present
 10991                                  
 10992                                  SaveNoShare:
 10993                                  	;test 	word [es:di+5],80h
 10994 000025F4 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 10995 000025FA 7526                    	JNZ	short SaveNoShareDev	; Device
 10996                                  	;
 10997                                  	; Save no sharing local file information
 10998                                  	;
 10999                                  	;mov	ax,[es:di+1Dh]
 11000 000025FC 268B451D                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11001                                  	;mov	[si+1Dh],ax
 11002 00002600 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11003                                  
 11004                                  	; MSDOS 6.0
 11005                                  	;SR; Store high byte of directory sector
 11006                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11007                                  	;
 11008                                  	; SR;
 11009                                  	; We have to store the read-only and archive attributes of the file.
 11010                                  	; We extract it from the SFT and store it in the top two bits of the 
 11011                                  	; sector number ( sector number == 22 bits only )
 11012                                  	;
 11013                                  	;mov	bl,[es:di+SF_ENTRY.sf_attr]
 11014                                  	;mov	bh,bl
 11015                                  	;ror	bl,1
 11016                                  	;shl	bh,1
 11017                                  	;or	bl,bh
 11018                                  	;and	bl,0C0h
 11019                                  	;
 11020                                  	;or	al,bl
 11021                                  	;mov	[si+fcb_sfn],al	;sector number = 22-bits
 11022                                  
 11023                                  	; MSDOS 3.3 ($ MSDOS 6.0)
 11024                                  	;mov	al,[es:di+1Fh]
 11025 00002603 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11026                                  	;mov	[si+1Fh],al
 11027 00002607 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11028                                  	;mov	ax,[es:di+0Bh]
 11029 0000260A 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11030                                  	;mov	[si+1Bh],ax
 11031 0000260E 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11032 00002611 B300                    	MOV	BL,0
 11033                                  
 11034                                  	; Create the bits field from the dirty/device bits of the flags word 
 11035                                  	; and the mode byte
 11036                                  
 11037                                  SetFCBBits:
 11038                                  	;mov	ax,[es:di+5]
 11039 00002613 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11040 00002617 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11041                                  	;or	al,[es:di+2]
 11042 00002619 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11043                                  	;mov	[si+1Ah], al
 11044 0000261D 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11045                                  
 11046                                  	; MSDOS 6.0
 11047                                  	; SR;
 11048                                  	; Check if we came here for local file or device. If for local file, 
 11049                                  	; skip setting of SFT index
 11050                                  	;
 11051                                  	;or	bl,bl
 11052                                  	;jz	short SaveNoSFN		; do not save SFN if local file
 11053                                  
 11054 00002620 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11055                                  
 11056                                  	; Save no sharing local device information
 11057                                  
 11058                                  SaveNoShareDev:
 11059                                  	;mov	ax,[es:di+7]
 11060 00002622 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11061                                  	;mov	[si+1Ah],ax
 11062 00002626 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11063                                  	;mov	ax,[es:di+9]
 11064 00002629 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11065 0000262D 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11066                                  	;mov	bl,40h
 11067 00002630 B340                    	MOV	BL,FCBDEVICE
 11068 00002632 EBDF                    	JMP	SetFCBBits		; go and save SFN
 11069                                  
 11070                                  SaveShare:
 11071                                  	;ENDIF
 11072                                  ;
 11073                                  ;----- In share support -----
 11074                                  ;
 11075                                  	;call	far [ss:ShSave]
 11076 00002634 36FF1E[8400]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11077                                  ;
 11078                                  ;----- end in share support -----
 11079                                  ;
 11080                                  SaveSFN:
 11081                                  	; MSDOS 3.3
 11082                                  	;mov	ax,[es:di+5]
 11083                                  	;and	al,3Fh
 11084                                  	;or	al,bl
 11085                                  	;mov	[si+19h],al
 11086                                  
 11087                                  	;lea	ax, [di-6]
 11088 00002639 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11089                                  	
 11090                                  	; Adjust for offset to table.
 11091                                  	
 11092 0000263C 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11093                                  
 11094 00002641 53                      	push	bx			;bx = FCB type (net/Share or local)
 11095 00002642 B335                    	mov	bl,53
 11096 00002644 B335                    	MOV	BL,SF_ENTRY.size
 11097 00002646 F6F3                    	DIV	BL
 11098 00002648 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11099 0000264B 5B                      	pop	bx			;restore bx
 11100                                  
 11101                                  SaveNoSFN:
 11102                                  	;mov	ax,[es:di+5]
 11103 0000264C 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11104 00002650 243F                    	AND	AL,3Fh			; get real drive
 11105 00002652 08D8                    	OR	AL,BL
 11106                                  	;mov	[si+19h],al
 11107 00002654 884419                  	MOV	[SI+fcb_l_drive],AL
 11108                                  
 11109 00002657 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11110 0000265B 40                      	INC	AX
 11111                                  	;mov	[es:di+15h],ax
 11112 0000265C 26894515                	MOV	[ES:DI+sf_LRU],AX
 11113 00002660 7506                    	JNZ	short SimpleStuff
 11114                                  	
 11115                                  	; lru flag overflowed.	Run through all FCB sfts and adjust:  
 11116                                  	; LRU < 8000H get set to 0.  Others -= 8000h.  This LRU = 8000h
 11117                                  	
 11118                                  	;mov	bx,15h
 11119 00002662 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11120 00002665 E80500                  	call	ResetLRU
 11121                                  
 11122                                  	;	Set new LRU to AX
 11123                                  SimpleStuff:
 11124 00002668 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11125 0000266C C3                      	retn
 11126                                  
 11127                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11128                                  ;----------------------------------------------------------------------------
 11129                                  ;
 11130                                  ;   ResetLRU - during lru updates, we may wrap at 64K.	We must walk the
 11131                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11132                                  ;   at 0.
 11133                                  ;
 11134                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11135                                  ;		ES:DI point to SFT currently being updated
 11136                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11137                                  ;		AX has 8000h
 11138                                  ;   Registers modified: none
 11139                                  ;
 11140                                  ;----------------------------------------------------------------------------
 11141                                  ;
 11142                                  
 11143                                  ResetLRU:
 11144                                  
 11145                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11146                                  	; DOSDATA
 11147                                  
 11148 0000266D B80080                  	MOV	AX,8000h
 11149 00002670 06                      	push	es
 11150 00002671 57                      	push	di
 11151 00002672 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; get pointer to head
 11152                                  	;mov	cx,[es:di+4]
 11153 00002677 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11154                                  	;lea	di,[di+6]
 11155 0000267B 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11156                                  ovScan:
 11157 0000267E 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11158 00002681 7703                    	JA	short ovLoop
 11159 00002683 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11160                                  ovLoop:
 11161                                  	;add	di,53
 11162 00002686 83C735                  	ADD	DI,SF_ENTRY.size	; advance to next
 11163 00002689 E2F3                    	LOOP	ovScan
 11164 0000268B 5F                      	pop	di
 11165 0000268C 07                      	pop	es
 11166 0000268D 268901                  	MOV	[ES:DI+BX],AX
 11167 00002690 C3                      	retn
 11168                                  
 11169                                  ;IF  0  ; We dont need this routine any more.
 11170                                  
 11171                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11172                                  ;----------------------------------------------------------------------------
 11173                                  ;
 11174                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11175                                  ;   we keep the 'open age' or an LRU count based on opens.  We update the
 11176                                  ;   count here and fill in the appropriate field.
 11177                                  ;
 11178                                  ;   Inputs:	ES:DI point to SFT
 11179                                  ;   Outputs:	ES:DI has the open age field filled in.
 11180                                  ;		If open age has wraparound, we will have subtracted 8000h
 11181                                  ;		    from all open ages.
 11182                                  ;   Registers modified: AX
 11183                                  ;
 11184                                  ;----------------------------------------------------------------------------
 11185                                  ;
 11186                                  
 11187                                  SetOpenAge:
 11188                                  
 11189                                  	; 20/07/2018 - Retro DOS v3.0
 11190                                  	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 11191                                  	; (& MSDOS 6.0, FCBIO.ASM)
 11192                                  
 11193                                  	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 11194                                  
 11195 00002691 2EA1[1200]              	MOV	AX,[CS:OpenLRU]	; SS override
 11196 00002695 40                      	INC	AX
 11197                                  	;mov	[es:di+17h],ax
 11198 00002696 26894517                	MOV	[ES:DI+sf_OpenAge],AX
 11199 0000269A 7506                    	JNZ	short SetDone
 11200                                  	;mov	bx,17h
 11201 0000269C BB1700                  	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 11202 0000269F E8CBFF                  	call	ResetLRU
 11203                                  SetDone:
 11204 000026A2 2EA3[1200]              	MOV	[CS:OpenLRU],AX
 11205 000026A6 C3                      	retn
 11206                                  
 11207                                  ;ENDIF	; SetOpenAge no longer needed
 11208                                  
 11209                                  
 11210                                  ; 21/07/2018 - Retro DOS v3.0
 11211                                  
 11212                                  ; LRUFCB for MSDOS 3.3 !
 11213                                  
 11214                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 11215                                  ;----------------------------------------------------------------------------
 11216                                  ;
 11217                                  ;   LRUFCB - find LRU fcb in cache.  Set ThisSFT and return it.  We preserve
 11218                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 11219                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 11220                                  ;
 11221                                  ;   Inputs:	none
 11222                                  ;   Outputs:	ES:DI point to SFT
 11223                                  ;		ThisSFT points to SFT
 11224                                  ;		SFT is zeroed
 11225                                  ;		Carry set of closes failed
 11226                                  ;   Registers modified: none
 11227                                  ;
 11228                                  ;----------------------------------------------------------------------------
 11229                                  ;
 11230                                  
 11231                                  ; MSDOS 6.0
 11232                                  ;IF 0	; rewritten this routine
 11233                                  
 11234                                  LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 11235 000026A7 E84EEF                  	call	save_world
 11236                                  	
 11237                                  ; Find nth oldest NET/SHARE FCB.  We want to find its age for the second scan
 11238                                  ; to find the lease recently used one that is younger than the open age.  We
 11239                                  ; operate be scanning the list n times finding the least age that is greater
 11240                                  ; or equal to the previous minimum age.
 11241                                  ;
 11242                                  ;   BP is the count of times we need to go through this loop.
 11243                                  ;   AX is the current acceptable minimum age to consider
 11244                                  ;
 11245 000026AA 2E8B2E[4400]            	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 11246 000026AF 31C0                    	XOR	AX,AX			; low = 0;
 11247                                  ;
 11248                                  ; If we've scanned the table n times, then we are done.
 11249                                  ;
 11250                                  lru1:
 11251 000026B1 83FD00                  	CMP	bp,0			; while (k--) {
 11252 000026B4 7451                    	JZ	short lru75
 11253 000026B6 4D                      	DEC	bp
 11254                                  ;
 11255                                  ; Set up for scan.
 11256                                  ;
 11257                                  ;   AX is the minimum age for consideration
 11258                                  ;   BX is the minimum age found during the scan
 11259                                  ;   SI is the position of the entry that corresponds to BX
 11260                                  ;
 11261 000026B7 BBFFFF                  	MOV	BX,-1			;     min = 0xffff;
 11262 000026BA 89DE                    	MOV	si,BX			;     pos = 0xffff;
 11263 000026BC 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 11264                                  	;mov	cx,[es:di+4]
 11265 000026C1 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11266                                  	;lea	di,[di+6]
 11267 000026C5 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11268                                  ;
 11269                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 11270                                  ; current entry is busy (indicating a previous aborted allocation), then we
 11271                                  ; are done.  In both cases, we use the found entry.
 11272                                  ;
 11273                                  lru2:
 11274 000026C8 26833D00                	cmp	word [es:di],0
 11275                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 11276 000026CC 7406                    	jz	short lru25
 11277                                  	;cmp	word [es:di],-1
 11278                                  	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 11279 000026CE 26833DFF                	cmp	word [es:di],sf_busy
 11280 000026D2 7504                    	jnz	short lru3
 11281                                  ;
 11282                                  ; The entry is usable without further scan.  Go and use it.
 11283                                  ;
 11284                                  lru25:
 11285 000026D4 89FE                    	MOV	si,DI			;	      pos = i;
 11286 000026D6 EB69                    	JMP	short lru11		;	      goto got;
 11287                                  ;
 11288                                  ; See if the entry is for the network or for the sharer.
 11289                                  ;
 11290                                  ;  If for the sharer or network then
 11291                                  ;	if the age < current minimum AND >= allowed minimum then
 11292                                  ;	    this entry becomes current minimum
 11293                                  ;
 11294                                  lru3:
 11295                                  	;test	word [es:di+5],8000h
 11296 000026D8 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 11297                                  					;	  if (!net[i]
 11298 000026DE 7505                    	JNZ	short lru35
 11299                                  ;if installed
 11300 000026E0 E8404C                  	call	CheckShare		;		&& !sharing)
 11301 000026E3 7410                    	JZ	short lru5		;	  else
 11302                                  ;ENDIF
 11303                                  ;
 11304                                  ; This SFT is for the net or is for the sharer.  See if it less than the
 11305                                  ; current minimum.
 11306                                  ;
 11307                                  lru35:
 11308                                  	;mov	dx,[es:di+17h]
 11309 000026E5 268B5517                	MOV	DX,[ES:DI+sf_OpenAge]
 11310 000026E9 39C2                    	CMP	DX,AX			;	  if (age[i] >= low &&
 11311 000026EB 7208                    	JB	short lru5
 11312 000026ED 39DA                    	CMP	DX,BX
 11313 000026EF 7304                    	JAE	short lru5		;	      age[i] < min) {
 11314                                  ;
 11315                                  ; entry is new minimum.  Remember his age.
 11316                                  ;
 11317 000026F1 89D3                    	mov	bx,DX			;	      min = age[i];
 11318 000026F3 89FE                    	mov	si,di			;	      pos = i;
 11319                                  ;
 11320                                  ; End of loop.	gp back for more
 11321                                  ;
 11322                                  lru5:
 11323                                  	;add	di,53
 11324 000026F5 83C735                  	add	di,SF_ENTRY.size
 11325 000026F8 E2CE                    	loop	lru2			;	      }
 11326                                  ;
 11327                                  ; The scan is complete.  If we have successfully found a new minimum (pos != -1)
 11328                                  ; set then threshold value to this new minimum + 1.  Otherwise, the scan is
 11329                                  ; complete.  Go find LRU.
 11330                                  ;
 11331                                  lru6:	
 11332 000026FA 83FEFF                  	cmp	si,-1			; position not -1?
 11333 000026FD 7408                    	jz	short lru75		; no, done with everything
 11334 000026FF 8D4701                  	lea	ax,[bx+1]		; set new threshold age
 11335 00002702 EBAD                    	jmp	short lru1		; go and loop for more
 11336                                  lru65:	
 11337 00002704 F9                      	stc
 11338 00002705 EB70                    	jmp	short LRUDead		;	  return -1;
 11339                                  ;
 11340                                  ; Main loop is done.  We have AX being the age+1 of the nth oldest sharer or
 11341                                  ; network entry.  We now make a second pass through to find the LRU entry
 11342                                  ; that is local-no-share or has age >= AX
 11343                                  ;
 11344                                  lru75:
 11345 00002707 BBFFFF                  	mov	bx,-1			; min = 0xffff;
 11346 0000270A 89DE                    	mov	si,bx			; pos = 0xffff;
 11347 0000270C 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 11348                                  	;mov	cx,[es:di+4]
 11349 00002711 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11350                                  	;lea	di,[di+6]
 11351 00002715 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11352                                  ;
 11353                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 11354                                  ; then check for lru.
 11355                                  ;
 11356                                  lru8:
 11357                                  	;test	word [es:di+5],8000h
 11358 00002718 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11359 0000271E 7505                    	jnz	short lru85		; is for network, go check age
 11360 00002720 E8004C                  	call	CheckShare		; sharer here?
 11361 00002723 7406                    	jz	short lru86		; no, go check lru
 11362                                  ;
 11363                                  ; Network or sharer.  Check age
 11364                                  ;
 11365                                  lru85:
 11366                                  	;cmp	[es:di+17h],ax
 11367 00002725 26394517                	cmp	[es:di+sf_OpenAge],ax
 11368 00002729 720C                    	jb	short lru9		; age is before threshold, skip it
 11369                                  ;
 11370                                  ; Check LRU
 11371                                  ;
 11372                                  lru86:
 11373                                  	;cmp	[es:di+15h],bx
 11374 0000272B 26395D15                	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 11375 0000272F 7306                    	jae	short lru9		; no, skip this
 11376 00002731 89FE                    	mov	si,di			; remember position
 11377                                  	;mov	bx,[es:di+15h]
 11378 00002733 268B5D15                	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 11379                                  ;
 11380                                  ; Done with this entry, go back for more.
 11381                                  ;
 11382                                  lru9:
 11383                                  	;add	di, 53
 11384 00002737 83C735                  	add	di,SF_ENTRY.size
 11385 0000273A E2DC                    	loop	lru8
 11386                                  ;
 11387                                  ; Scan is complete.  If we found NOTHING that satisfied us then we bomb
 11388                                  ; out.	The conditions here are:
 11389                                  ;
 11390                                  ;   No local-no-shares AND all net/share entries are older than threshold
 11391                                  ;
 11392                                  lru10:
 11393 0000273C 83FEFF                  	cmp	si,-1			; if no one f
 11394 0000273F 74C3                    	jz	short lru65		;     return -1;
 11395                                  lru11:
 11396 00002741 89F7                    	mov	di,si
 11397 00002743 2E893E[3605]            	MOV	[CS:THISSFT],DI		; set thissft
 11398 00002748 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11399                                  ;
 11400                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 11401                                  ; is 0.
 11402                                  ;
 11403                                  	;test	word [es:di+5],8000h
 11404 0000274D 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11405 00002753 7505                    	JNZ	short LRUClose
 11406                                  ;IF INSTALLED
 11407 00002755 E8CB4B                  	call	CheckShare
 11408 00002758 7418                    	JZ	short LRUDone
 11409                                  ;ENDIF
 11410                                  ;
 11411                                  ; Repeat close until ref count is 0
 11412                                  ;
 11413                                  LRUClose:
 11414 0000275A 16                      	push	ss
 11415 0000275B 1F                      	pop	ds
 11416 0000275C C43E[3605]              	LES	DI,[THISSFT]
 11417 00002760 26833D00                	cmp     word [es:di],0
 11418                                  	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 11419 00002764 740C                    	JZ	short LRUDone 		; nope, all done
 11420 00002766 E85313                  	call	DOS_CLOSE
 11421 00002769 73EF                    	jnc	short LRUClose		; no error => clean up
 11422                                  	;cmp	al,6
 11423 0000276B 3C06                    	cmp	al,error_invalid_handle
 11424 0000276D 74EB                    	jz	short LRUClose
 11425 0000276F F9                      	stc
 11426 00002770 EB05                    	JMP	short LRUDead
 11427                                  LRUDone:
 11428 00002772 30C0                    	XOR	AL,AL
 11429 00002774 E8E500                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 11430                                  
 11431                                  LRUDead:
 11432 00002777 E86BEE                  	call	restore_world
 11433 0000277A 2EC43E[3605]             	LES     DI,[CS:THISSFT]
 11434 0000277F 7302                    	jnc	short LRUFCB_retn
 11435                                  LRUFCB_err:
 11436                                  	; mov	al, 23h	
 11437 00002781 B023                    	MOV	AL,error_FCB_unavailable
 11438                                  LRUFCB_retn:	
 11439                                  	retn:
 11440                                  
 11441                                  ;ENDIF
 11442                                  
 11443                                  FCBRegen:
 11444                                  	; called from SFTFromFCB. SS already DOSDATA
 11445                                  
 11446                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 11447                                  	; we do not fill, size we do no fill, position we do not fill,
 11448                                  	; bit 14 of flags = TRUE, other bits = FALSE
 11449                                  
 11450                                  	;mov	al,[si+19h]
 11451 00002783 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11452                                  
 11453                                  	; We discriminate based on the first two bits in the reserved field.
 11454                                  	
 11455                                  	;test	al,80h
 11456 00002786 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 11457 00002788 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 11458                                  
 11459                                  	;
 11460                                  	; The FCB is for a network or a sharing based system.  At this point 
 11461                                  	; we have already closed the SFT for this guy and reconnection is 
 11462                                  	; impossible.
 11463                                  	;
 11464                                  	; Remember that he may have given us a FCB with bogus information in
 11465                                  	; it. Check to see if sharing is present or if the redir is present.
 11466                                  	; If either is around, presume that we have cycled out the FCB and 
 11467                                  	; give the hard error. Otherwise, just return with carry set.
 11468                                  	;
 11469                                  
 11470 0000278A E8964B                  	call	CheckShare		; test for sharer
 11471 0000278D 7509                    	JNZ	short RegenFail		; yep, fail this.
 11472                                  	;mov	ax,1100h
 11473 0000278F B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 11474 00002792 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 11475                                  			; Return: AL = 00h  not installed, OK to install
 11476                                  			; 01h  not installed, not OK to install
 11477                                  			; FFh  installed
 11478 00002794 08C0                    	OR	AL,AL			; is it there?
 11479 00002796 740C                    	JZ	short RegenDead		; no, just fail the operation
 11480                                  RegenFail:
 11481 00002798 2EA1[E602]              	MOV     AX,[CS:USER_IN_AX]	; SS override
 11482                                  	;cmp	ah,10h
 11483 0000279C 80FC10                  	cmp	AH,FCB_CLOSE
 11484 0000279F 7403                    	jz	short RegenDead
 11485 000027A1 E8C701                  	call	FCBHardErr		; massive hard error.
 11486                                  RegenDead:
 11487 000027A4 F9                      	STC				; carry set
 11488                                  FCBRegen_retn:
 11489 000027A5 C3                      	retn
 11490                                  
 11491                                  	;
 11492                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 11493                                  	; so fail the operation.
 11494                                  	;
 11495                                  RegenNoSharing:
 11496 000027A6 E87A4B                  	call	CheckShare		; Sharing around?
 11497 000027A9 75ED                    	JNZ	short RegenFail
 11498                                  	
 11499                                  	; Find an SFT for this guy.
 11500                                  	
 11501                                  	; MSDOS 6.0
 11502                                  	;push	ax
 11503                                  	;mov	al,0			;indicate it is a regen operation
 11504                                  	;call	LRUFCB
 11505                                  	;pop	ax
 11506                                  	;jc	short FCBRegen_retn
 11507                                  
 11508                                  	; MSDOS 3.3
 11509 000027AB E8F9FE                  	call	LRUFCB
 11510 000027AE 72F5                    	jc	short FCBRegen_retn
 11511                                  
 11512                                  	;mov	word [es:di+2],8002h
 11513 000027B0 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 11514 000027B6 243F                    	AND	AL,3Fh			; get drive number for flags
 11515 000027B8 98                      	CBW
 11516                                  	;or	ax,4000h
 11517 000027B9 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 11518                                  
 11519                                  	;
 11520                                  	; The bits field consists of the upper two bits (dirty and device) 
 11521                                  	; from the SFT and the low 4 bits from the open mode.
 11522                                  	;
 11523                                  
 11524                                  	;mov	cl,[si+1Ah]
 11525 000027BC 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 11526 000027BF 88CD                    	MOV	CH,CL
 11527 000027C1 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 11528 000027C4 08E8                    	OR	AL,CH
 11529                                  	;and	cl,0Fh
 11530 000027C6 80E10F                  	AND	CL,access_mask		; get the mode bits
 11531                                  	;mov	[es:di+2],cl
 11532 000027C9 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 11533                                  	;mov	[es:di+5],ax
 11534 000027CD 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 11535 000027D1 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11536                                  	;mov	[es:di+31h],ax
 11537 000027D5 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 11538 000027D9 1E                      	push	ds
 11539 000027DA 56                      	push	si
 11540 000027DB 06                      	push	es
 11541 000027DC 57                      	push	di
 11542 000027DD 16                      	push	ss
 11543 000027DE 07                      	pop	es
 11544 000027DF BF[E604]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 11545                                  
 11546 000027E2 B90800                  	MOV	CX,8
 11547 000027E5 46                      	INC	SI			; Skip past drive byte to name in FCB
 11548                                  
 11549                                  	; MSDOS 6.0
 11550                                  	;call	RegenCopyName		;copy the name to NAME1
 11551                                  
 11552                                  	; MSDOS 3.3
 11553                                  RegenCopyName:
 11554 000027E6 AC                      	lodsb
 11555 000027E7 E8272E                  	call	UCase
 11556 000027EA AA                      	stosb
 11557 000027EB E2F9                    	loop	RegenCopyName
 11558                                  
 11559 000027ED 16                      	push	ss	; SS is DOSDATA
 11560 000027EE 1F                      	pop	ds
 11561                                  
 11562                                  	;mov	byte [ATTRIB],16h
 11563 000027EF C606[0605]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 11564                                  					; Must set this to something interesting
 11565                                  					; to call DEVNAME.
 11566 000027F4 E8EA22                  	call	DEVNAME 		; check for device
 11567 000027F7 5E                      	pop	si
 11568 000027F8 07                      	pop	es
 11569 000027F9 5E                      	pop	si
 11570 000027FA 1F                      	pop	ds
 11571 000027FB 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 11572                                  
 11573                                  	;
 11574                                  	; Device found.  We can ignore disk-specific info
 11575                                  	;
 11576                                  
 11577                                  	;mov	[es:di+5],bh
 11578 000027FD 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 11579                                  	;mov	byte [es:di+4],0
 11580 00002801 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 11581                                  					; SS override
 11582 00002806 2EC536[3205]            	LDS	SI,[CS:DEVPT]		; get device driver
 11583                                  	;mov	[es:di+7],si
 11584 0000280B 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11585                                  	;mov	[es:di+9],ds
 11586 0000280F 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11587 00002813 C3                      	retn				; carry is clear
 11588                                  
 11589                                  RegenDeadJ:
 11590 00002814 EB8E                    	JMP	RegenDead
 11591                                  
 11592                                  	;
 11593                                  	; File found.  Just copy in the remaining pieces.
 11594                                  	;
 11595                                  
 11596                                  RegenFileNoSharing:
 11597                                  	;mov	ax,[es:di+5]
 11598 00002816 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11599 0000281A 83E03F                  	AND	AX,03Fh
 11600 0000281D 1E                      	push	ds
 11601 0000281E 56                      	push	si
 11602 0000281F E88540                  	call	FIND_DPB
 11603                                  	;mov	[es:di+7],si
 11604 00002822 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11605                                  	;mov	[es:di+9],ds
 11606 00002826 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11607 0000282A 5E                      	pop	si
 11608 0000282B 1F                      	pop	ds
 11609 0000282C 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 11610                                  					; indicator was bogus
 11611                                  	;mov	ax,[si+1Dh]
 11612 0000282E 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 11613                                  	;mov	[es:di+1Dh],ax
 11614 00002831 2689451D                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 11615                                  
 11616                                  	;MSDOS6.0
 11617                                  	; SR;
 11618                                  	; Update the higher word of the directory sector from the FCB
 11619                                  	;
 11620                                  
 11621                                  	;MOV	word [ES:DI+SF_ENTRY.sf_dirsec+2],0	;AN000;>32mb
 11622                                  
 11623                                  	; SR;
 11624                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 11625                                  	; number
 11626                                  	;
 11627                                  
 11628                                  	;mov	al,[si+fcb_sfn]
 11629                                  	;and	al,0C0h		;get the 2 attribute bits
 11630                                  	;mov	ah,al
 11631                                  	;rol	ah,1
 11632                                  	;shr	al,1
 11633                                  	;or	al,ah
 11634                                  	;and	al,03Fh		;mask off unused bits
 11635                                  	;mov	[es:di+SF_ENTRY.sf_attr],al
 11636                                  
 11637                                  	;mov	al,[si+fcb_sfn]
 11638                                  	;and	al,03Fh		;mask off top 2 bits -- attr bits
 11639                                  	;sub	ah,ah
 11640                                  	;mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 11641                                  
 11642                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11643                                  	;mov	ax,[si+1Bh]
 11644 00002835 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 11645                                  	;mov	[es:di+0Bh],ax
 11646 00002838 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 11647                                  	;mov	[es:di+1Bh],ax
 11648 0000283C 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 11649                                  	;mov	al,[si+1Fh]
 11650 00002840 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 11651                                  	;mov  	[es:di+1Fh], al
 11652 00002843 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 11653                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 11654 00002847 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 11655                                  					; Existing FCB entries would be
 11656                                  					; flushed unnecessarily because of
 11657                                  					; check in CheckFCB of the ref_count.
 11658                                  					; July 22/85 - BAS
 11659                                  	;lea	si,[si+1]
 11660 0000284A 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11661                                  	;lea	di,[di+20h] ; MSDOS 3.3 
 11662 0000284D 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11663                                  	;mov	cx,11
 11664 00002850 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11665                                  	
 11666                                  	; 17/05/2019
 11667                                  	; MSDOS 6.0
 11668                                  	;call	RegenCopyName	;copy name to SFT 
 11669                                  	;
 11670                                  	; MSDOS3.3
 11671                                  RegenCopyName2:
 11672 00002853 AC                      	lodsb
 11673 00002854 E8BA2D                  	call    UCase
 11674 00002857 AA                      	stosb
 11675 00002858 E2F9                    	loop    RegenCopyName2
 11676                                  
 11677 0000285A F8                      	clc
 11678 0000285B C3                      	retn
 11679                                  
 11680                                  ;**	BlastSFT - FIll SFT with Garbage
 11681                                  ;
 11682                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 11683                                  ;	various garbage values to put into the SFT.  I don't know why,
 11684                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 11685                                  ;	necessary to show that the SFT is free after filling it.
 11686                                  ;
 11687                                  ;	ENTRY	(es:di) = address of SFT
 11688                                  ;		(al) = fill character
 11689                                  ;	EXIT	(ax) = -1
 11690                                  ;		'C' clear
 11691                                  ;	USES	AX, CX, Flags
 11692                                  
 11693                                  BlastSFT:
 11694 0000285C 57                      	push	di
 11695                                  	;mov	cx,53
 11696 0000285D B93500                  	mov	cx,SF_ENTRY.size
 11697 00002860 F3AA                    	rep	stosb
 11698 00002862 5F                      	pop	di
 11699 00002863 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 11700 00002865 268905                  	mov	[es:di],ax
 11701                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 11702                                  	;mov	[es:di+15h],ax
 11703 00002868 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 11704 0000286C 48                      	dec	ax	; -1					    ;
 11705                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 11706 0000286D 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 11707                                  BlastSFT_retn:
 11708 00002871 C3                      	retn				; return with 'C' clear     ;
 11709                                  
 11710                                  
 11711                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 11712                                  ;----------------------------------------------------------------------------
 11713                                  ;
 11714                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 11715                                  ;   regenerated.
 11716                                  ;
 11717                                  ;   Inputs:	DS:SI point to FCB (not extended)
 11718                                  ;		AL is SFT index
 11719                                  ;   Outputs:	Carry Set - FCB needs to be regened
 11720                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 11721                                  ;   Registers modified: AX and BX
 11722                                  ;
 11723                                  ;----------------------------------------------------------------------------
 11724                                  ;
 11725                                  
 11726                                  CheckFCB:
 11727                                  		
 11728                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 11729                                  
 11730                                  	; MSDOS6.0
 11731                                  	; SR;
 11732                                  	; We check if the given FCB is for a local file. If so, we return a 
 11733                                  	; bad SFT status forcing the caller to regenerate the SFT.
 11734                                  
 11735                                  	;test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 11736                                  	;jz	short BadSFT		;Local file, return bad SFT
 11737                                  
 11738                                  	; MSDOS 3.3 (& MSDOS6.0)
 11739 00002872 2EC43E[4000]            	LES     DI,[CS:SFTFCB]		; SS override
 11740                                  	;cmp	[es:di+4],al
 11741 00002877 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 11742 0000287B 7248                    	JC	short BadSFT
 11743 0000287D B335                    	MOV	BL,SF_ENTRY.size
 11744 0000287F F6E3                    	MUL	BL
 11745                                  	;lea	di,[di+6]
 11746 00002881 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11747 00002884 01C7                    	ADD	DI,AX
 11748 00002886 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11749                                  	;cmp	[es:di+31h],ax
 11750 0000288A 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 11751 0000288E 7535                    	JNZ	short BadSFT		; must match process
 11752 00002890 26833D00                	cmp	word [es:di],0
 11753                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11754 00002894 742F                    	JZ	short BadSFT		; must also be in use
 11755                                  	;mov	al,[si+19h]
 11756 00002896 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11757                                  	;test	al,80h
 11758 00002899 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 11759 0000289B 7443                    	JZ	short CheckNoShare	; No. try local or device
 11760                                  
 11761                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 11762                                  	; FCBSHARE is a superset of FCBNETWORK.
 11763                                  
 11764 0000289D 50                      	PUSH	AX
 11765                                  	;and	al,0C0h
 11766 0000289E 24C0                    	AND	AL,FCBMASK
 11767                                  	;cmp	al,0C0h
 11768 000028A0 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 11769 000028A2 58                      	POP	AX
 11770 000028A3 7522                    	JNZ	short CheckNet		; yes
 11771                                  ;
 11772                                  ;----- In share support -----
 11773                                  ;
 11774                                  	; 26/07/2019
 11775 000028A5 2EFF1E[8800]            	call	far [cs:JShare+(11*4)]  ; 11 = ShChk
 11776                                  	;Call	far [ss:JShare+(11*4)]	; SS Override
 11777 000028AA 7219                    	JC	short BadSFT
 11778 000028AC EB0A                    	JMP	SHORT CheckD
 11779                                  ;
 11780                                  ;----- End in share support -----
 11781                                  ;
 11782                                  CheckFirClus:
 11783 000028AE 263B5D0B                	cmp     bx,[es:di+0Bh]
 11784 000028B2 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 11785 000028B6 750D                    	JNZ	short BadSFT
 11786                                  CheckD: 
 11787 000028B8 243F                    	AND	AL,3Fh
 11788                                  	;mov	ah,[es:di+5]
 11789 000028BA 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 11790 000028BE 80E43F                  	AND	AH,3Fh
 11791 000028C1 38C4                    	CMP	AH,AL
 11792 000028C3 74AC                    	jz	short BlastSFT_retn	; carry is clear
 11793                                  BadSFT: 
 11794 000028C5 F9                      	STC
 11795 000028C6 C3                      	retn				; carry is clear
 11796                                  CheckNet:
 11797                                  ;
 11798                                  ;----- In net support -----
 11799                                  ;
 11800                                  	; MSDOS 6.0
 11801                                  	;MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 11802                                  	;CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 11803                                  	;JNZ	short BadSFT
 11804                                  
 11805                                  	; MSDOS 3.3
 11806                                  	;mov	ax,[si+1Ah]
 11807 000028C7 8B441A                  	mov	ax,[si+fcb_net_handle]
 11808                                  	;cmp	ax,[es:di+1Dh]
 11809 000028CA 263B451D                	cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 11810 000028CE 75F5                    	jnz	short BadSFT
 11811                                  	;cmp	ax,[es:di+19h]
 11812 000028D0 263B4519                	cmp	ax,[ES:DI+sf_netid]
 11813 000028D4 75EF                    	jnz     short BadSFT
 11814                                  	;mov	ax,[si+1Eh]
 11815 000028D6 8B441E                  	mov	ax,[si+fcb_l_attr]
 11816                                  	;cmp	ax,[es:di+1Bh]
 11817 000028D9 263B451B                	cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 11818 000028DD 75E6                    	jnz     short BadSFT
 11819                                  ;
 11820                                  ;----- END In net support -----
 11821                                  ;
 11822                                  CheckNet_retn:
 11823 000028DF C3                      	retn
 11824                                  
 11825                                  CheckNoShare:
 11826                                  	;test	al,40h
 11827 000028E0 A840                    	test	AL,FCBDEVICE		; Device?
 11828 000028E2 753F                    	JNZ	short CheckNoShareDev 	; Yes
 11829                                  
 11830                                  	; MSDOS6.0
 11831                                  	; SR;
 11832                                  	; The code below to match a local FCB with its SFT can no longer be
 11833                                  	; used. We just return a no-match status. This check is done right
 11834                                  	; at the top.
 11835                                  	;
 11836                                  
 11837                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 11838                                  	;mov	bx,[si+1Dh]
 11839 000028E4 8B5C1D                  	MOV	BX,[SI+fcb_nsl_dirsec]
 11840                                  	;cmp	bx,[es:di+1Dh]
 11841 000028E7 263B5D1D                	cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 11842 000028EB 75D8                    	jnz	short BadSFT
 11843                                  	;mov	bl,[si+1Fh]
 11844 000028ED 8A5C1F                  	MOV	bl,[SI+fcb_nsl_dirpos]
 11845                                  	;cmp	bl,[es:di+1Fh]
 11846 000028F0 263A5D1F                	cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 11847 000028F4 75CF                    	jnz     short BadSFT
 11848                                  	;mov	bl,[si+1Ah]
 11849 000028F6 8A5C1A                  	MOV	bl,[SI+fcb_nsl_bits]
 11850                                  	;mov	bh,[es:di+5]
 11851 000028F9 268A7D05                	MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 11852 000028FD 30DF                    	xor     bh,bl
 11853 000028FF 80E7C0                  	and     bh,0C0h
 11854 00002902 75C1                    	jnz     short BadSFT
 11855                                  	;xor	bl,[es:di+2]
 11856 00002904 26325D02                	xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 11857 00002908 80E30F                  	and     bl,0Fh
 11858 0000290B 75B8                    	jnz     short BadSFT
 11859 0000290D 57                      	push    di
 11860 0000290E 56                      	push    si
 11861                                  	;lea	di,[di+20h]  ; MSDOS 3.3
 11862 0000290F 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11863                                  	;lea	si,[si+1]
 11864 00002912 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11865                                  	;mov	cx,11
 11866 00002915 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11867 00002918 F3A6                    	repe	cmpsb
 11868 0000291A 5E                      	pop     si
 11869 0000291B 5F                      	pop     di
 11870 0000291C 75A7                    	jnz     short BadSFT
 11871                                  	;mov	bx,[si+1Bh]
 11872 0000291E 8B5C1B                  	MOV	bX,[SI+fcb_nsl_firclus]
 11873 00002921 EB8B                    	jmp     short CheckFirClus
 11874                                  
 11875                                  CheckNoShareDev:
 11876                                  	;mov	bx,[si+1Ah]
 11877 00002923 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 11878                                  	;cmp	bx,[es:di+7]
 11879 00002926 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 11880 0000292A 7599                    	JNZ	short BadSFT
 11881                                  	;mov	bx,[si+1Ch]
 11882 0000292C 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 11883                                  	;cmp	bx,[es:di+9]
 11884 0000292F 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11885 00002933 7590                    	JNZ	short BadSFT
 11886 00002935 EB81                    	JMP	CheckD
 11887                                  
 11888                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 11889                                  ;----------------------------------------------------------------------------
 11890                                  ;
 11891                                  ;   SFTFromFCB - the workhorse of this compatability crap.  Check to see if
 11892                                  ;	the SFT for the FCB is Good.  If so, make ThisSFT point to it.	If not
 11893                                  ;	good, get one from the cache and regenerate it.  Overlay the LRU field
 11894                                  ;	with PID
 11895                                  ;
 11896                                  ;   Inputs:	DS:SI point to FCB
 11897                                  ;   Outputs:	ThisSFT point to appropriate SFT
 11898                                  ;		Carry clear -> OK ES:DI -> SFT
 11899                                  ;		Carry set -> error in ax
 11900                                  ;   Registers modified: ES,DI, AX
 11901                                  ;
 11902                                  ;----------------------------------------------------------------------------
 11903                                  
 11904                                  SFTFromFCB:
 11905                                  
 11906                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 11907                                  
 11908 00002937 50                      	push	ax
 11909 00002938 53                      	push	bx
 11910                                  	;mov	al,[si+18h]
 11911 00002939 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 11912 0000293C E833FF                  	call	CheckFCB
 11913 0000293F 5B                      	pop	bx
 11914 00002940 58                      	pop	ax
 11915 00002941 2E893E[3605]            	MOV	[CS:THISSFT],DI		; SS override
 11916 00002946 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11917 0000294B 730F                    	JNC	short Set_SFT		; no problems, just set thissft
 11918 0000294D E8A8EC                  	call	save_world
 11919 00002950 E830FE                  	call	FCBRegen
 11920 00002953 E88FEC                  	call	restore_world		; use macro restore world
 11921 00002956 2EA1[D202]              	MOV     AX,[CS:EXTERR]		; SS override
 11922 0000295A 7283                    	jc	short CheckNet_retn
 11923                                  
 11924                                  Set_SFT: 
 11925 0000295C 2EC43E[3605]            	LES     DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 11926 00002961 2EFF36[E802]            	PUSH    word [CS:PROC_ID]	; set process id
 11927                                  	;pop	word [es:di+31h]
 11928 00002966 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 11929 0000296A C3                      	retn				; carry is clear
 11930                                  
 11931                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 11932                                  ;----------------------------------------------------------------------------
 11933                                  ;
 11934                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 11935                                  ;	unavailable FCB.
 11936                                  ;
 11937                                  ;   Inputs:	none.
 11938                                  ;   Outputs:	none.
 11939                                  ;   Registers modified: all
 11940                                  ;
 11941                                  ;----------------------------------------------------------------------------
 11942                                  ;
 11943                                  
 11944                                  FCBHardErr:
 11945                                  	;mov	ax,23h
 11946 0000296B B82300                  	MOV	AX,error_FCB_unavailable
 11947                                  	;mov	byte [cs:ALLOWED],8
 11948 0000296E 2EC606[F702]08          	MOV	byte [CS:ALLOWED],Allowed_FAIL
 11949 00002974 2EC42E[2405]            	LES	BP,[CS:THISDPB]
 11950 00002979 BF0100                  	MOV	DI,1			; Fake some registers
 11951 0000297C 89F9                    	MOV	CX,DI
 11952                                  	;mov	dx,[es:bp+0Bh]
 11953 0000297E 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 11954 00002982 E8C82E                  	call	HARDERR
 11955 00002985 F9                      	STC
 11956 00002986 C3                      	retn
 11957                                  
 11958                                  ;============================================================================
 11959                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 11960                                  ;============================================================================
 11961                                  ; 21/07/2018 - Retro DOS v3.0
 11962                                  
 11963                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 11964                                  ;
 11965                                  ;	GetRR
 11966                                  ;	GetExtent
 11967                                  ;	SetExtent
 11968                                  ;	GetExtended
 11969                                  ;	GetRecSize
 11970                                  ;	FCBIO
 11971                                  ;	$FCB_OPEN
 11972                                  ;	$FCB_CREATE
 11973                                  ;	$FCB_RANDOM_WRITE_BLOCK
 11974                                  ;	$FCB_RANDOM_READ_BLOCK
 11975                                  ;	$FCB_SEQ_READ
 11976                                  ;	$FCB_SEQ_WRITE
 11977                                  ;	$FCB_RANDOM_READ
 11978                                  ;	$FCB_RANDOM_WRITE
 11979                                  ;
 11980                                  ;	Revision history:
 11981                                  ;
 11982                                  ;		Created: ARR 4 April 1983
 11983                                  ;			 MZ  6 June  1983 completion of functions
 11984                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11985                                  ;				  times.  Change so successive closes work by
 11986                                  ;				  always returning OK.	Also, detect I/O to
 11987                                  ;				  already closed FCB and return EOF.
 11988                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11989                                  ;				  out of sft into FCB for reconnection
 11990                                  ;
 11991                                  ;	    A000   version 4.00	Jan. 1988
 11992                                  
 11993                                  ; Defintions for FCBOp flags
 11994                                  
 11995                                  RANDOM	equ 2				; random operation
 11996                                  FCBREAD equ 4				; doing a read
 11997                                  BLOCK	equ 8				; doing a block I/O
 11998                                  
 11999                                  ;Break <GetRR - return the random record field in DX:AX>
 12000                                  ;---------------------------------------------------------------------------
 12001                                  ;
 12002                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 12003                                  ;	from the FCB pointed to by DS:SI
 12004                                  ;
 12005                                  ;   Inputs:	DS:SI point to an FCB
 12006                                  ;		BX has record size
 12007                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12008                                  ;   Registers modified: none
 12009                                  ;---------------------------------------------------------------------------
 12010                                  
 12011                                  GetRR:
 12012                                  	;mov	ax,[si+21h]
 12013 00002987 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 12014                                  	;mov	dx,[si+23h]
 12015 0000298A 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 12016 0000298D 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 12017 00002990 7202                    	JB	short GetRRBye
 12018 00002992 30F6                    	XOR	DH,DH
 12019                                  GetRRBye:
 12020 00002994 C3                      	retn
 12021                                  
 12022                                  ;Break <GetExtent - retrieve next location for sequential IO>
 12023                                  ;---------------------------------------------------------------------------
 12024                                  ;
 12025                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 12026                                  ;	NR fields in the FCB.
 12027                                  ;
 12028                                  ;   Inputs:	DS:SI - point to FCB
 12029                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12030                                  ;   Registers modified: none
 12031                                  ;---------------------------------------------------------------------------
 12032                                  
 12033                                  GetExtent:
 12034                                  	;mov	al,[si+20h]
 12035 00002995 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 12036                                  	;mov	dx,[si+0Ch]
 12037 00002998 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 12038 0000299B D0E0                    	SHL	AL,1
 12039 0000299D D1EA                    	SHR	DX,1
 12040 0000299F D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 12041 000029A1 88D4                    	MOV	AH,DL
 12042 000029A3 88F2                    	MOV	DL,DH
 12043 000029A5 30F6                    	XOR	DH,DH
 12044 000029A7 C3                      	retn
 12045                                  
 12046                                  ;Break <SetExtent - update the extent/NR field>
 12047                                  ;---------------------------------------------------------------------------
 12048                                  ;
 12049                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 12050                                  ;	fields
 12051                                  ;
 12052                                  ;   Inputs:	DS:SI point to FCB
 12053                                  ;		DX:AX is a record location in file
 12054                                  ;   Outputs:	Extent/NR fields are filled in
 12055                                  ;   Registers modified: CX
 12056                                  ;---------------------------------------------------------------------------
 12057                                  
 12058                                  SetExtent:
 12059 000029A8 50                      	push	ax
 12060 000029A9 52                      	push	dx
 12061 000029AA 89C1                    	MOV	CX,AX
 12062 000029AC 247F                    	AND	AL,7FH			; next rec field
 12063                                  	;mov	[si+20h],al
 12064 000029AE 884420                  	MOV	[SI+SYS_FCB.NR],AL
 12065 000029B1 80E180                  	AND	CL,80H			; save upper bit
 12066 000029B4 D1E1                    	SHL	CX,1
 12067 000029B6 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 12068 000029B8 88E8                    	MOV	AL,CH
 12069 000029BA 88D4                    	MOV	AH,DL
 12070                                  	;mov	[si+0Ch], ax
 12071 000029BC 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 12072 000029BF 5A                      	pop	dx
 12073 000029C0 58                      	pop	ax
 12074 000029C1 C3                      	retn
 12075                                  
 12076                                  ;Break <GetExtended - find FCB in potential extended fcb>
 12077                                  ;---------------------------------------------------------------------------
 12078                                  ;
 12079                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 12080                                  ;
 12081                                  ;   Inputs:	DS:DX point to a possible extended FCB
 12082                                  ;   Outputs:	DS:SI point to the FCB part
 12083                                  ;		zeroflag set if not extended fcb
 12084                                  ;   Registers modified: SI
 12085                                  ;---------------------------------------------------------------------------
 12086                                  
 12087                                  GetExtended:
 12088 000029C2 89D6                    	MOV	SI,DX			; point to Something
 12089 000029C4 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 12090 000029C7 7503                    	JNZ	short GetBye		; not there
 12091 000029C9 83C607                  	ADD	SI,7			; point to FCB
 12092                                  GetBye:
 12093 000029CC 39D6                    	CMP	SI,DX			; set condition codes
 12094                                  getextd_retn:
 12095 000029CE C3                      	retn
 12096                                  
 12097                                  ;Break <GetRecSize - return in BX the FCB record size>
 12098                                  ;---------------------------------------------------------------------------
 12099                                  ;
 12100                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 12101                                  ;
 12102                                  ;   Inputs:	DS:SI point to a non-extended FCB
 12103                                  ;   Outputs:	BX contains the record size
 12104                                  ;   Registers modified: None
 12105                                  ;---------------------------------------------------------------------------
 12106                                  
 12107                                  GetRecSize:
 12108 000029CF 8B5C0E                  	mov	bx,[si+0Eh]
 12109 000029D2 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 12110 000029D5 09DB                    	OR	BX,BX			; is it nul?
 12111 000029D7 74F5                    	jz	short getextd_retn
 12112 000029D9 BB8000                  	MOV	BX,128			; use default size
 12113                                  	;mov	[si+0Eh],bx
 12114 000029DC 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 12115 000029DF C3                      	retn
 12116                                  
 12117                                  ;BREAK <FCBIO - do internal FCB I/O>
 12118                                  ;---------------------------------------------------------------------------
 12119                                  ;
 12120                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 12121                                  ;
 12122                                  ;   Inputs:	FCBOP flags which operations need to be performed
 12123                                  ;		DS:DX point to FCB
 12124                                  ;		CX may have count of number of records to xfer
 12125                                  ;   Outputs:	AL has error code
 12126                                  ;   Registers modified: all
 12127                                  ;---------------------------------------------------------------------------
 12128                                  
 12129                                  FCBIO:
 12130                                  
 12131                                  FEOF	EQU	1
 12132                                  FTRIM	EQU	2
 12133                                  
 12134                                  %define	FCBErr	byte [bp-1]  ; byte	
 12135                                  %define	cRec	word [bp-3]  ; word	
 12136                                  ;%define RecPos	word [bp-7]  ; dword
 12137                                  %define RecPosL	word [bp-7]  ; word
 12138                                  %define RecPosH	word [bp-5]  ; word
 12139                                  %define	RecSize	word [bp-9]  ; word
 12140                                  ;%define bPos	word [bp-13] ; dword
 12141                                  %define bPosL	word [bp-13] ; word
 12142                                  %define bPosH	word [bp-11] ; word
 12143                                  %define cByte	word [bp-15] ; word	
 12144                                  %define cResult word [bp-17] ; word	
 12145                                  %define	cRecRes	word [bp-19] ; word
 12146                                  %define	FCBOp	byte [bp-20] ; byte
 12147                                  
 12148                                  	;Enter
 12149                                  
 12150 000029E0 55                      	push	bp
 12151 000029E1 89E5                    	mov	bp,sp
 12152 000029E3 83EC14                  	sub	sp,20
 12153                                  	;mov	[bp-20],al
 12154 000029E6 8846EC                  	MOV	FCBOp,AL
 12155                                  	;mov	byte [bp-1],0
 12156 000029E9 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 12157 000029ED E8D2FF                  	call	GetExtended		;   FCB = GetExtended ();
 12158                                  	;test	byte [bp-20],8
 12159 000029F0 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 12160 000029F4 7503                    	JNZ	short GetPos
 12161 000029F6 B90100                  	MOV	CX,1			;	cRec = 1;
 12162                                  GetPos:
 12163                                  	;mov	[bp-3],cx
 12164 000029F9 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 12165 000029FC E896FF                  	call	GetExtent		;   RecPos = GetExtent ();
 12166 000029FF E8CDFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 12167                                  	;mov	[bp-9],bx
 12168 00002A02 895EF7                  	MOV	RecSize,BX
 12169                                  	;test	byte [bp-20],2
 12170 00002A05 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 12171 00002A09 7403                    	JZ	short GetRec
 12172 00002A0B E879FF                  	call	GetRR			;	RecPos = GetRR ();
 12173                                  GetRec:
 12174                                  	;mov	[bp-7],ax
 12175 00002A0E 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 12176                                  	;mov	[bp-5],dx
 12177 00002A11 8956FB                  	MOV	RecPosH,DX
 12178 00002A14 E891FF                  	call	SetExtent		;   SetExtent (RecPos);
 12179                                  	;mov	ax,[bp-5]
 12180 00002A17 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 12181 00002A1A F7E3                    	MUL	BX
 12182 00002A1C 89C7                    	MOV	DI,AX
 12183                                  	;mov	ax,[bp-7]
 12184 00002A1E 8B46F9                  	MOV	AX,RecPosL
 12185 00002A21 F7E3                    	MUL	BX
 12186 00002A23 01FA                    	ADD	DX,DI
 12187                                  	;mov	[bp-13],ax
 12188 00002A25 8946F3                  	MOV	bPosL,AX
 12189                                  	;mov	[bp-11],dx
 12190 00002A28 8956F5                  	MOV	bPosH,DX
 12191                                  	;mov	ax,[bp-3]
 12192 00002A2B 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 12193 00002A2E F7E3                    	MUL	BX
 12194                                  	;mov	[bp-15],ax
 12195 00002A30 8946F1                  	MOV	cByte,AX
 12196                                  
 12197                                  ;hkn; 	SS override
 12198 00002A33 360306[DA02]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 12199 00002A38 83D200                  	ADC	DX,0
 12200 00002A3B 7419                    	JZ	short DoOper
 12201                                  	;mov	byte [bp-1],2
 12202 00002A3D C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 12203                                  
 12204                                  ;hkn; 	SS override
 12205 00002A41 36A1[DA02]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 12206 00002A45 F7D8                    	NEG	AX
 12207 00002A47 7501                    	JNZ	short DoDiv
 12208 00002A49 48                      	DEC	AX
 12209                                  DoDiv:
 12210 00002A4A 31D2                    	XOR	DX,DX
 12211 00002A4C F7F3                    	DIV	BX
 12212                                  	;mov	[bp-3],ax
 12213 00002A4E 8946FD                  	MOV	cRec,AX
 12214 00002A51 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 12215                                  	;mov	[bp-15],ax
 12216 00002A53 8946F1                  	MOV	cByte,AX		;	}
 12217                                  DoOper:
 12218 00002A56 31DB                    	XOR	BX,BX
 12219                                  	;mov	[bp-17],bx
 12220 00002A58 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 12221                                  	;cmp	[bp-15],bx
 12222 00002A5B 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 12223 00002A5E 7506                    	JNZ	short DoGetExt
 12224                                  	;test	byte [bp-1],2
 12225 00002A60 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 12226                                  	;JZ	short DoGetExt
 12227                                  	;JMP	short SkipOp
 12228 00002A64 7576                    	jnz	short SkipOp
 12229                                  DoGetExt:
 12230 00002A66 E8CEFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 12231 00002A69 730F                    	JNC	short ContinueOp
 12232                                  FCBDeath:
 12233 00002A6B E8AEEC                  	call	FCB_RET_ERR		; signal error, map for extended
 12234                                  	;mov	word [bp-19],0
 12235 00002A6E C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 12236                                  	;mov	byte [bp-1],1
 12237 00002A73 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 12238 00002A77 E9F000                  	JMP	FCBSave 		; bam!
 12239                                  ContinueOp:
 12240                                  	;mov	di,offset DOS_READ
 12241                                  	;test	byte [bp-14h],4
 12242                                  	;jnz	short DoContext
 12243                                  	;mov	di,DOS_WRITE
 12244                                  
 12245                                  	;mov	ax,[si+10h]
 12246 00002A7A 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 12247                                  	;mov	[es:di+11h],ax
 12248 00002A7D 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 12249                                  	;mov	ax,[si+12h]
 12250 00002A81 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 12251                                  	;mov	[es:di+13h],ax
 12252 00002A84 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 12253                                  	;mov	ax,[bp-13]
 12254 00002A88 8B46F3                  	MOV	AX,bPosL
 12255                                  	;mov	dx,[bp-11]
 12256 00002A8B 8B56F5                  	MOV	DX,bPosH
 12257                                  	;mov	[es:di+15h],ax
 12258 00002A8E 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 12259                                  	;xchg	dx,[es:di+17h]
 12260 00002A92 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 12261 00002A96 52                      	PUSH	DX			; save away Open age.
 12262                                  	;mov	cx,[bp-15]
 12263 00002A97 8B4EF1                  	MOV	CX,cByte		;	cResult =
 12264                                  
 12265                                  ;hkn; DOS_Read is in DOSCODE
 12266 00002A9A BF[FE3D]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 12267                                  	;test	byte [bp-20],4
 12268 00002A9D F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 12269 00002AA1 7503                    	JNZ	short DoContext
 12270                                  
 12271                                  ;hkn; DOS_Write is in DOSCODE
 12272 00002AA3 BF[7F3F]                	MOV	DI,DOS_WRITE
 12273                                  DoContext:
 12274 00002AA6 55                      	push	bp
 12275 00002AA7 1E                      	push	ds
 12276 00002AA8 56                      	push	si
 12277                                  
 12278                                  ;hkn; SS is DOSDATA
 12279 00002AA9 16                      	push	ss
 12280 00002AAA 1F                      	pop	ds
 12281                                  
 12282                                  ;; Fix for disk full
 12283 00002AAB FFD7                    	CALL	DI
 12284                                  	
 12285 00002AAD 5E                      	pop	si
 12286 00002AAE 1F                      	pop	ds
 12287 00002AAF 5D                      	pop	bp
 12288 00002AB0 72B9                    	JC	short FCBDeath
 12289                                  	
 12290 00002AB2 36803E[8C0F]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 12291 00002AB8 740A                    	JZ	short NODSKFULL
 12292 00002ABA 36C606[8C0F]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 12293                                  	;mov	byte [bp-1],1 
 12294 00002AC0 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 12295                                  NODSKFULL:
 12296                                  ;; Fix for disk full
 12297                                  	;mov	[bp-17],cx
 12298 00002AC4 894EEF                  	MOV	cResult,CX
 12299 00002AC7 E800FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 12300                                  	;pop	word [es:di+17h]	
 12301 00002ACA 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 12302                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 12303                                  	;mov	ax,[es:di+11h]
 12304 00002ACE 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 12305                                  	;mov	[si+10h],ax
 12306 00002AD2 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12307                                  	;mov	ax,[es:di+13h]
 12308 00002AD5 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12309                                  	;mov	[si+12h],ax
 12310 00002AD9 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12311                                  					;	}
 12312                                  SkipOp:
 12313                                  	;mov	ax,[bp-17]
 12314 00002ADC 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 12315 00002ADF 31D2                    	XOR	DX,DX
 12316                                  	;div	word [bp-9]
 12317 00002AE1 F776F7                  	DIV	RecSize
 12318                                  	;mov	[bp-19],ax
 12319 00002AE4 8946ED                  	MOV	cRecRes,AX
 12320                                  	;add	[bp-7],ax
 12321 00002AE7 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 12322                                  	;adc	word [bp-5],0
 12323 00002AEA 8356FB00                	ADC	RecPosH,0
 12324                                  ;
 12325                                  ; If we have not gotten the expected number of records, we signal an EOF
 12326                                  ; condition.  On input, this is EOF.  On output this is usually disk full.
 12327                                  ; BUT...  Under 2.0 and before, all device output IGNORED this condition.  So
 12328                                  ; do we.
 12329                                  ;
 12330                                  	;cmp	ax,[bp-3]
 12331 00002AEE 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 12332 00002AF1 7412                    	JZ	short TryBlank
 12333                                  	;test	byte [bp-20],4
 12334 00002AF3 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 12335 00002AF7 7508                    	JNZ	short SetEOF
 12336                                  	;test	word [es:di+5],80h
 12337 00002AF9 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12338 00002AFF 7504                    	JNZ	short TryBlank
 12339                                  SetEOF:
 12340                                  	;mov	byte [bp-1],1
 12341 00002B01 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 12342                                  TryBlank:				;
 12343 00002B05 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 12344 00002B07 7426                    	JZ	short SetExt
 12345                                  	;add	word [bp-7],1
 12346 00002B09 8346F901                	ADD	RecPosL,1		;	RecPos++;
 12347                                  	;adc	word [bp-5],0
 12348 00002B0D 8356FB00                	ADC	RecPosH,0
 12349                                  	;test	byte [bp-20],4
 12350 00002B11 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 12351 00002B15 7418                    	JZ	short SetExt
 12352                                  	;inc	word [bp-19]
 12353 00002B17 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 12354                                  	;mov	byte [bp-1],3
 12355 00002B1A C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 12356                                  	;mov	cx,[bp-9]
 12357 00002B1E 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 12358 00002B21 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 12359 00002B23 30C0                    	XOR	AL,AL
 12360                                  ;hkn; 	SS override
 12361 00002B25 36C43E[DA02]            	les     di,[ss:DMAADD]
 12362                                  	;add	di,[bp-17]
 12363 00002B2A 037EEF                  	ADD	DI,cResult
 12364 00002B2D F3AA                    	REP	STOSB			;   }	}
 12365                                  SetExt:
 12366                                  	;mov	dx,[bp-5]
 12367 00002B2F 8B56FB                  	MOV	DX,RecPosH
 12368                                  	;mov	ax,[bp-7]
 12369 00002B32 8B46F9                  	MOV	AX,RecPosL
 12370                                  	;test	byte [bp-20],2
 12371 00002B35 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 12372 00002B39 7406                    	JZ	short DoSetExt
 12373                                  	;test	byte [bp-20],8
 12374 00002B3B F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 12375 00002B3F 7403                    	JZ	short TrySetRR
 12376                                  DoSetExt:
 12377 00002B41 E864FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 12378                                  TrySetRR:
 12379                                  	;test	byte [bp-20],8
 12380 00002B44 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12381 00002B48 740F                    	JZ	short TryReturn
 12382                                  	;mov	[si+21h],ax
 12383 00002B4A 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 12384                                  	;mov	[si+23h],dl
 12385 00002B4D 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 12386                                  	;cmp	word [si+0Eh],64
 12387 00002B50 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 12388 00002B54 7303                    	JAE	short TryReturn
 12389                                  	;mov	[si+24h],dh
 12390 00002B56 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 12391                                  TryReturn: 
 12392                                  	;test	byte [bp-20],4
 12393 00002B59 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 12394 00002B5D 750B                    	JNZ	short FCBSave
 12395 00002B5F 1E                      	push	ds			;	FCB->FDate = date;
 12396 00002B60 E853ED                  	call	DATE16			;	FCB->FTime = time;
 12397 00002B63 1F                      	pop	ds
 12398                                  	;mov	[si+14h],ax
 12399 00002B64 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12400                                  	;mov	[si+16h],dx
 12401 00002B67 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 12402                                  FCBSave: 
 12403                                  	;test	byte [bp-20],8
 12404 00002B6A F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12405 00002B6E 7409                    	jz	short DoReturn
 12406                                  	;mov	cx,[bp-19]
 12407 00002B70 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 12408 00002B73 E895EA                  	call    Get_User_Stack
 12409                                  	;mov	[si+4],cx
 12410 00002B76 894C04                  	MOV	[SI+user_env.user_CX],CX
 12411                                  DoReturn:
 12412                                  	;mov	al,[bp-1]
 12413 00002B79 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 12414                                  	;Leave	
 12415 00002B7C 89EC                    	mov     sp,bp
 12416 00002B7E 5D                      	pop     bp
 12417 00002B7F C3                      	retn
 12418                                  
 12419                                  ; 22/07/2018 - Retro DOS v3.0
 12420                                  
 12421                                  ;Break <$FCB_Open - open an old-style FCB>
 12422                                  ;---------------------------------------------------------------------------
 12423                                  ;
 12424                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 12425                                  ;	for us and asked to have the rest filled in.
 12426                                  ;
 12427                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12428                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12429                                  ;		FCB has the following fields filled in:
 12430                                  ;		    Time/Date Extent/NR Size
 12431                                  ;---------------------------------------------------------------------------
 12432                                  
 12433                                  _$FCB_OPEN:			; System call 15
 12434                                  
 12435 00002B80 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 12436                                  
 12437                                  ;hkn; DOS_Open is in DOSCODE
 12438 00002B83 B9[7C37]                	MOV	CX,DOS_OPEN
 12439                                  ;
 12440                                  ; The following is common code for Creation and openning of FCBs.  AX is
 12441                                  ; either attributes (for create) or open mode (for open)...  DS:DX points to
 12442                                  ; the FCB
 12443                                  ;
 12444                                  DoAccess:
 12445 00002B86 3E                      	pushj	ds
 12446 00002B87 52                      	push	dx
 12447 00002B88 51                      	push	cx
 12448 00002B89 50                      	push	ax			; save FCB pointer away
 12449                                  
 12450                                  ;hkn; 	OpenBuf is in DOSDATA
 12451 00002B8A BF[6003]                	MOV	DI,OPENBUF
 12452 00002B8D E85D3E                  	call	TransFCB		; crunch the fcb
 12453 00002B90 58                      	pop	ax
 12454 00002B91 59                      	pop	cx
 12455 00002B92 5A                      	pop	dx
 12456 00002B93 1F                      	pop	ds			; get fcb
 12457 00002B94 7303                    	JNC	short FindFCB		; everything seems ok
 12458                                  FCBOpenErr:
 12459                                  ;
 12460                                  ; AL has error code
 12461                                  ;
 12462 00002B96 E983EB                  	jmp	FCB_RET_ERR
 12463                                  FindFCB:
 12464 00002B99 E826FE                  	call	GetExtended		; DS:SI will point to FCB
 12465                                  
 12466                                  	; MSDOS 6.0
 12467                                  	;push	ax
 12468                                  	;mov	al,1			;indicate Open/Create operation
 12469                                  	;call	LRUFCB			; get a sft entry (no error)
 12470                                  	;pop	ax
 12471                                  	;jc	short HardMessage
 12472                                  	
 12473                                  	; MSDOS 3.3
 12474 00002B9C E808FB                  	call	LRUFCB
 12475 00002B9F 722A                    	JC	short HardMessage
 12476                                  
 12477                                  	;mov	word [es:di+2],8000h
 12478 00002BA1 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 12479 00002BA7 1E                      	push	ds
 12480 00002BA8 56                      	push	si
 12481 00002BA9 53                      	push	bx			; save fcb pointer
 12482 00002BAA 89CE                    	MOV	SI,CX
 12483                                  
 12484                                  ;hkn; SS is DOSDATA
 12485 00002BAC 16                      	push	ss
 12486 00002BAD 1F                      	pop	ds			; let DOS_Open see variables
 12487 00002BAE FFD6                    	CALL	SI			; go open the file
 12488 00002BB0 5B                      	pop	bx
 12489 00002BB1 5E                      	pop	si
 12490 00002BB2 1F                      	pop	ds			; get fcb
 12491                                  
 12492                                  ;hkn; SS override
 12493 00002BB3 36C43E[3605]            	LES	DI,[SS:THISSFT]		; get sf pointer
 12494 00002BB8 7319                    	JNC	short FCBOK		; operation succeeded
 12495                                  failopen:
 12496 00002BBA 50                      	PUSH	AX
 12497 00002BBB B052                    	MOV	AL,"R"                  ; clear out field (free sft)
 12498 00002BBD E89CFC                  	call	BlastSFT
 12499 00002BC0 58                      	POP	AX
 12500                                  	;cmp	ax,4
 12501 00002BC1 83F804                  	CMP	AX,error_too_many_open_files
 12502 00002BC4 7405                    	JZ	short HardMessage
 12503                                  	;cmp	ax,24h
 12504 00002BC6 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 12505 00002BC9 7505                    	jnz	short DeadFCB
 12506                                  HardMessage:
 12507 00002BCB 50                      	PUSH	AX
 12508 00002BCC E89CFD                  	call	FCBHardErr
 12509 00002BCF 58                      	POP	AX
 12510                                  DeadFCB:
 12511 00002BD0 E949EB                  	jmp	FCB_RET_ERR
 12512                                  FCBOK:
 12513                                  	; MSDOS 6.0
 12514                                  	;call	IsSFTNet		       ;AN007;F.C. >32mb  Non Fat file?
 12515                                  	;JNZ	short FCBOK2		       ;AN007;F.C. >32mb  yes
 12516                                  	;call	CheckShare		       ;AN000;F.C. >32mb  share around?
 12517                                  	;JNZ	short FCBOK2		       ;AN000;F.C. >32mb  yes
 12518                                  ;SR;
 12519                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 12520                                  ; LocalSFT variable to reflect this.
 12521                                  ;
 12522                                  	;mov	[cs:LocalSFT],di	;
 12523                                  	;mov	[cs:LocalSFT+2],es; Store the SFT address
 12524                                  ;;SR;
 12525                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 12526                                  ;;
 12527                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 12528                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 12529                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 12530                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 12531                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 12532                                  
 12533                                  FCBOK2:
 12534                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12535 00002BD3 26FF05                  	inc	word [es:di]
 12536                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 12537 00002BD6 E8F1F9                  	call	SaveFCBInfo
 12538                                  	; MSDOS 3.3
 12539 00002BD9 E8B5FA                  	call	SetOpenAge
 12540                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12541                                  	;test	word [es:di+5],80h
 12542 00002BDC 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12543 00002BE2 7509                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 12544 00002BE4 8A04                    	MOV	AL,[SI]			; get drive byte
 12545 00002BE6 E88D3D                  	call	GETTHISDRV		; convert
 12546 00002BE9 FEC0                    	INC	AL
 12547 00002BEB 8804                    	MOV	[SI],AL			; stash in good drive letter
 12548                                  FCBNoDrive:
 12549                                  	;mov	word [si+0Eh],128
 12550 00002BED C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 12551                                  
 12552                                  	;mov	ax,[es:di+0Dh]
 12553 00002BF2 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 12554                                  	;mov	[si+16h],ax
 12555 00002BF6 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 12556                                  	;mov	ax,[es:di+0Fh]
 12557 00002BF9 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 12558                                  	;mov	[si+14h],ax
 12559 00002BFD 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12560                                  	;mov	ax,[es:di+11h]
 12561 00002C00 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 12562                                  	;mov	[si+10h],ax
 12563 00002C04 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12564                                  	;mov	ax,[es:di+13h]
 12565 00002C07 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12566                                  	;mov	[si+12h],ax
 12567 00002C0B 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12568 00002C0E 31C0                    	XOR	AX,AX			; convenient zero
 12569                                  	;mov	[si+0Ch],ax
 12570 00002C10 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 12571                                  ;
 12572                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 12573                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 12574                                  ;
 12575                                  
 12576                                  ;hkn; 	SS override
 12577 00002C13 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 12578                                  	;mov	ah,[es:di+4]
 12579 00002C18 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 12580                                  OpenScan:
 12581                                  	;cmp	al,[si+18h]
 12582 00002C1C 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 12583 00002C1F 7407                    	JZ	short SkipCheck
 12584 00002C21 50                      	push	ax			; preserve count
 12585 00002C22 E84DFC                  	call	CheckFCB		; do they match
 12586 00002C25 58                      	pop	ax			; get count back
 12587 00002C26 7309                    	JNC	short OpenFound		; found a match!
 12588                                  SkipCheck:
 12589 00002C28 FEC0                    	INC	AL			; advance to next FCB
 12590 00002C2A 38E0                    	CMP	AL,AH			; table full?
 12591 00002C2C 75EE                    	JNZ	short OpenScan		; no, go for more
 12592                                  OpenDone:
 12593 00002C2E 30C0                    	xor	al,al			; return success
 12594 00002C30 C3                      	retn
 12595                                  ;
 12596                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 12597                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 12598                                  ; Consider:
 12599                                  ;
 12600                                  ;   open (foo)	delete (foo) open (bar)
 12601                                  ;
 12602                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 12603                                  ; foo even though foo is no longer needed; this is due to the server closing
 12604                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 12605                                  ; If we were to CLOSE bar, the server would then close the only reference to
 12606                                  ; bar and subsequent I/O would be lost to the redirector.
 12607                                  ;
 12608                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 12609                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 12610                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 12611                                  ; around.  This will allow us to access the same file through multiple network
 12612                                  ; connections and NOT prematurely terminate when the ref count on one
 12613                                  ; connection goes to zero.
 12614                                  ;
 12615                                  OpenFound:
 12616                                  	;mov	[si+18h],al
 12617 00002C31 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 12618 00002C34 26FF05                  	inc	word [es:di]
 12619                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] 
 12620                                  					; remember this new invocation
 12621 00002C37 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 12622                                  	;mov	[es:di+15h],ax
 12623 00002C3B 26894515                	MOV	[ES:DI+sf_LRU],AX
 12624                                  ;
 12625                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 12626                                  ; blast it to prevent other reuse.
 12627                                  ;
 12628 00002C3F 16                      	push	ss
 12629 00002C40 1F                      	pop	ds
 12630 00002C41 C43E[3605]              	LES	DI,[THISSFT]
 12631 00002C45 26FF0D                  	dec	word [es:di]
 12632                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12633                                  					; free the newly allocated SFT
 12634 00002C48 E80A47                  	call	ShareEnd
 12635 00002C4B B043                    	MOV	AL,'C'
 12636 00002C4D E80CFC                  	call	BlastSFT
 12637 00002C50 EBDC                    	JMP	short OpenDone
 12638                                  
 12639                                  ;BREAK	<$FCB_Create - create a new directory entry>
 12640                                  ;----------------------------------------------------------------------------
 12641                                  ;
 12642                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 12643                                  ;	FCB for us and asked to have the rest filled in.
 12644                                  ;
 12645                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12646                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12647                                  ;		FCB has the following fields filled in:
 12648                                  ;		    Time/Date Extent/NR Size
 12649                                  ;----------------------------------------------------------------------------
 12650                                  
 12651                                  _$FCB_CREATE:		; System call 22
 12652                                  
 12653                                  ;hkn; DOS_Create is in DOSCODE
 12654 00002C52 B9[E636]                	MOV	CX,DOS_CREATE		; routine to call
 12655 00002C55 31C0                    	XOR	AX,AX			; attributes to create
 12656 00002C57 E868FD                  	call	GetExtended		; get extended FCB
 12657 00002C5A 7403                    	JZ	short DoAccessJ		; not an extended FCB
 12658 00002C5C 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 12659                                  DoAccessJ:
 12660 00002C5F E924FF                  	JMP	DoAccess		; do dirty work
 12661                                  
 12662                                  ; 22/07/2018 - Retro DOS v3.0
 12663                                  
 12664                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 12665                                  ;----------------------------------------------------------------------------
 12666                                  ;
 12667                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 12668                                  ;	and write a number of blocks from it.
 12669                                  ;
 12670                                  ;   Inputs:	DS:DX point to an FCB
 12671                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 12672                                  ;		AL <> 0 Not enough room on disk for the output
 12673                                  ;
 12674                                  ;----------------------------------------------------------------------------
 12675                                  
 12676                                  _$FCB_RANDOM_WRITE_BLOCK:
 12677                                  	;mov	AL,0Ah	
 12678 00002C62 B00A                    	MOV	AL,RANDOM+BLOCK
 12679 00002C64 E979FD                  	JMP	FCBIO
 12680                                  
 12681                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 12682                                  ;----------------------------------------------------------------------------
 12683                                  ;
 12684                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 12685                                  ;	and read a number of blocks from it.
 12686                                  ;
 12687                                  ;   Inputs:	DS:DX point to an FCB
 12688                                  ;   Outputs:	AL = error codes defined above
 12689                                  ;
 12690                                  ;----------------------------------------------------------------------------
 12691                                  
 12692                                  _$FCB_RANDOM_READ_BLOCK:
 12693                                  	;mov	AL,0Eh	
 12694 00002C67 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 12695 00002C69 E974FD                  	JMP	FCBIO
 12696                                  
 12697                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 12698                                  ;----------------------------------------------------------------------------
 12699                                  ;
 12700                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 12701                                  ;	memory
 12702                                  ;
 12703                                  ;   Inputs:	DS:DX point to an FCB
 12704                                  ;   Outputs:	AL = error codes defined above
 12705                                  ;
 12706                                  ;----------------------------------------------------------------------------
 12707                                  
 12708                                  _$FCB_SEQ_READ:
 12709                                  	;mov	AL,4	
 12710 00002C6C B004                    	MOV	AL,FCBREAD
 12711 00002C6E E96FFD                  	JMP	FCBIO
 12712                                  
 12713                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 12714                                  ;----------------------------------------------------------------------------
 12715                                  ;
 12716                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 12717                                  ;	file
 12718                                  ;
 12719                                  ;   Inputs:	DS:DX point to an FCB
 12720                                  ;   Outputs:	AL = error codes defined above
 12721                                  ;
 12722                                  ;----------------------------------------------------------------------------
 12723                                  
 12724                                  _$FCB_SEQ_WRITE:
 12725 00002C71 B000                    	MOV	AL,0
 12726 00002C73 E96AFD                  	jmp	FCBIO
 12727                                  
 12728                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 12729                                  ;----------------------------------------------------------------------------
 12730                                  ;
 12731                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 12732                                  ;	record from it.
 12733                                  ;
 12734                                  ;   Inputs:	DS:DX point to an FCB
 12735                                  ;   Outputs:	AL = error codes defined above
 12736                                  ;
 12737                                  ;----------------------------------------------------------------------------
 12738                                  
 12739                                  _$FCB_RANDOM_READ:
 12740                                  	;mov	AL,6	
 12741 00002C76 B006                    	MOV	AL,RANDOM+FCBREAD
 12742 00002C78 E965FD                  	jmp	FCBIO			; single block
 12743                                  
 12744                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 12745                                  ;----------------------------------------------------------------------------
 12746                                  ;
 12747                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 12748                                  ;	a record to it.
 12749                                  ;
 12750                                  ;   Inputs:	DS:DX point to an FCB
 12751                                  ;   Outputs:	AL = error codes defined above
 12752                                  ;
 12753                                  ;----------------------------------------------------------------------------
 12754                                  
 12755                                  _$FCB_RANDOM_WRITE:
 12756                                  	;mov	AL,2	
 12757 00002C7B B002                    	MOV	AL,RANDOM
 12758 00002C7D E960FD                  	jmp	FCBIO
 12759                                  
 12760                                  ;============================================================================
 12761                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 12762                                  ;============================================================================
 12763                                  ; 22/07/2018 - Retro DOS v3.0
 12764                                  
 12765                                  ;**	Search.asm
 12766                                  ;
 12767                                  ;	Directory search system calls.
 12768                                  ;	These will be passed direct text of the pathname from the user. 
 12769                                  ;	They will need to be passed through the macro expander prior to
 12770                                  ;	being sent through the low-level stuff. 
 12771                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 12772                                  ;
 12773                                  ;	$Dir_Search_First	  written
 12774                                  ;	$Dir_Search_Next	  written
 12775                                  ;	$Find_First	  written
 12776                                  ;	$Find_Next		  written
 12777                                  ;	PackName		  written
 12778                                  ;
 12779                                  ;	Modification history:
 12780                                  ;
 12781                                  ;	  Created: ARR 4 April 1983
 12782                                  
 12783                                  ;----------------------------------------------------------------------------
 12784                                  ; Procedure Name : $DIR_SEARCH_FIRST
 12785                                  ;
 12786                                  ; Inputs:
 12787                                  ;	DS:DX Points to unopenned FCB
 12788                                  ; Function:
 12789                                  ;	Directory is searched for first matching entry and the directory
 12790                                  ;	entry is loaded at the disk transfer address
 12791                                  ; Returns:
 12792                                  ;	AL = -1 if no entries matched, otherwise 0
 12793                                  ;----------------------------------------------------------------------------
 12794                                  
 12795                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 12796                                  
 12797                                  _$DIR_SEARCH_FIRST:
 12798 00002C80 368916[3E05]            	MOV	[SS:THISFCB],DX
 12799 00002C85 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12800 00002C8A 89D6                    	MOV	SI,DX
 12801 00002C8C 803CFF                  	CMP	BYTE [SI],0FFH
 12802 00002C8F 7503                    	JNZ	short NORMFCB4
 12803 00002C91 83C607                  	ADD	SI,7			; Point to drive select byte
 12804                                  NORMFCB4:
 12805 00002C94 FF34                    	push	word [SI]		; Save original drive byte for later
 12806                                  
 12807 00002C96 16                      	push	ss
 12808 00002C97 07                      	pop	es			; get es to address DOSGroup
 12809                                  
 12810 00002C98 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12811 00002C9B E84F3D                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 12812 00002C9E 7304                    	JNC	short SearchIt		; no error, go and look
 12813 00002CA0 5B                      	pop	bx			; Clean stack
 12814                                  ;
 12815                                  ; Error code is in AX
 12816                                  ;
 12817 00002CA1 E978EA                  	jmp	FCB_RET_ERR		; error
 12818                                  
 12819                                  SearchIt:
 12820 00002CA4 16                      	push	ss
 12821 00002CA5 1F                      	pop	ds			; get ready for search
 12822 00002CA6 FF36[DA02]              	push	word [DMAADD]
 12823 00002CAA FF36[DC02]              	push	word [DMAADD+2]
 12824 00002CAE C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12825 00002CB4 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12826                                  	; MSDOS 6.0
 12827                                  	;call	GET_FAST_SEARCH 	; search
 12828                                  	; MSDOS 3.3
 12829 00002CB8 E8570C                  	call	DOS_SEARCH_FIRST
 12830 00002CBB 8F06[DC02]              	pop	word [DMAADD+2]
 12831 00002CBF 8F06[DA02]              	pop	word [DMAADD]
 12832 00002CC3 7304                    	JNC	short SearchSet		; no error, transfer info
 12833 00002CC5 5B                      	pop	bx			; Clean stack
 12834                                  ;
 12835                                  ; Error code is in AX
 12836                                  ;
 12837 00002CC6 E953EA                  	jmp	FCB_RET_ERR
 12838                                  
 12839                                  ;
 12840                                  ; The search was successful (or the search-next).  We store the information
 12841                                  ; into the user's FCB for continuation.
 12842                                  ;
 12843                                  SearchSet:
 12844 00002CC9 BE[6004]                	MOV	SI,SEARCHBUF
 12845 00002CCC C43E[3E05]              	LES	DI,[THISFCB]		; point to the FCB
 12846 00002CD0 F606[0705]FF            	TEST	byte [EXTFCB],0FFh		;
 12847 00002CD5 7403                    	JZ	short NORMFCB1
 12848 00002CD7 83C707                  	ADD	DI,7			; Point past the extension
 12849                                  NORMFCB1:
 12850 00002CDA 5B                      	pop	bx			; Get original drive byte
 12851 00002CDB 08DB                    	OR	BL,BL
 12852 00002CDD 7506                    	JNZ	short SearchDrv
 12853 00002CDF 8A1E[E402]              	MOV	BL,[CURDRV]
 12854 00002CE3 FEC3                    	INC	BL
 12855                                  SearchDrv:
 12856 00002CE5 AC                      	LODSB				; Get correct search contin drive byte
 12857 00002CE6 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 12858 00002CE8 47                      	INC	DI
 12859                                  	;STOSB				; Store the correct "user" drive byte
 12860                                  					;  at the start of the search info
 12861 00002CE9 B90A00                  	MOV	CX,20/2
 12862 00002CEC F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 12863 00002CEE 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 12864                                  					;   byte to AL
 12865 00002CF0 AA                      	STOSB				; Search contin drive byte at end of
 12866                                  					;   contin info
 12867 00002CF1 C43E[DA02]              	LES	DI,[DMAADD]
 12868 00002CF5 F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12869 00002CFA 740E                    	JZ	short NORMFCB2
 12870 00002CFC B0FF                    	MOV	AL,0FFh
 12871 00002CFE AA                      	STOSB
 12872 00002CFF FEC0                    	INC	AL
 12873 00002D01 B90500                  	MOV	CX,5
 12874 00002D04 F3AA                    	REP	STOSB
 12875 00002D06 A0[0805]                	MOV	AL,[SATTRIB]
 12876 00002D09 AA                      	STOSB
 12877                                  NORMFCB2:
 12878 00002D0A 88D8                    	MOV	AL,BL			; User Drive byte
 12879 00002D0C AA                      	STOSB
 12880 00002D0D B91000                  	MOV	CX,16			; 32 / 2 words of dir entry
 12881 00002D10 F3A5                    	REP	MOVSW
 12882 00002D12 E904EA                  	jmp	FCB_RET_OK
 12883                                  
 12884                                  ;----------------------------------------------------------------------------
 12885                                  ;
 12886                                  ; Procedure Name : $DIR_SEARCH_NEXT
 12887                                  ;
 12888                                  ; Inputs:
 12889                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 12890                                  ; Function:
 12891                                  ;	Directory is searched for the next matching entry and the directory
 12892                                  ;	entry is loaded at the disk transfer address
 12893                                  ; Returns:
 12894                                  ;	AL = -1 if no entries matched, otherwise 0
 12895                                  ;----------------------------------------------------------------------------
 12896                                  
 12897                                  _$DIR_SEARCH_NEXT:
 12898 00002D15 368916[3E05]            	MOV	[SS:THISFCB],DX
 12899 00002D1A 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12900 00002D1F 36C606[0805]00          	MOV	byte [SS:SATTRIB],0
 12901 00002D25 36C606[0705]00          	MOV	byte [SS:EXTFCB],0
 12902                                  
 12903 00002D2B 16                      	push	ss
 12904 00002D2C 07                      	pop	es
 12905                                  
 12906 00002D2D BF[6004]                	MOV	DI,SEARCHBUF
 12907                                  
 12908 00002D30 89D6                    	MOV	SI,DX
 12909 00002D32 803CFF                  	CMP	BYTE [SI],0FFh
 12910 00002D35 750D                    	JNZ	short NORMFCB6
 12911 00002D37 83C606                  	ADD	SI,6
 12912 00002D3A AC                      	LODSB
 12913                                  
 12914 00002D3B 36A2[0805]              	MOV	[SS:SATTRIB],AL
 12915 00002D3F 36FE0E[0705]            	DEC	byte [SS:EXTFCB]
 12916                                  NORMFCB6:
 12917 00002D44 AC                      	LODSB				; Get original user drive byte
 12918 00002D45 50                      	push	ax			; Put it on stack
 12919 00002D46 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 12920 00002D49 AA                      	STOSB				; Put in correct place
 12921 00002D4A B90A00                  	MOV	CX,20/2
 12922 00002D4D F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 12923                                  
 12924 00002D4F 16                      	push	ss
 12925 00002D50 1F                      	pop	ds
 12926                                  
 12927 00002D51 FF36[DA02]              	push	word [DMAADD]
 12928 00002D55 FF36[DC02]              	push	word [DMAADD+2]
 12929 00002D59 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12930 00002D5F 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12931 00002D63 E8610C                  	call	DOS_SEARCH_NEXT 	; Find it
 12932 00002D66 8F06[DC02]              	pop	word [DMAADD+2]
 12933 00002D6A 8F06[DA02]              	pop	word [DMAADD]
 12934 00002D6E 7203                    	JC	short SearchNoMore
 12935 00002D70 E956FF                  	JMP	SearchSet		; Ok set return
 12936                                  
 12937                                  SearchNoMore:
 12938 00002D73 C43E[3E05]              	LES	DI,[THISFCB]
 12939 00002D77 F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12940 00002D7C 7403                    	JZ	short NORMFCB8
 12941 00002D7E 83C707                  	ADD	DI,7			; Point past the extension
 12942                                  NORMFCB8:
 12943 00002D81 5B                      	pop	bx			; Get original drive byte
 12944 00002D82 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 12945                                  					;  at the right spot
 12946                                  ;
 12947                                  ; error code is in AX
 12948                                  ;
 12949 00002D85 E994E9                  	jmp	FCB_RET_ERR
 12950                                  
 12951                                  ;---------------------------------------------------------------------------
 12952                                  ;
 12953                                  ;   Procedure Name : $FIND_FIRST
 12954                                  ; 
 12955                                  ;   Assembler usage:
 12956                                  ;	    MOV AH, FindFirst
 12957                                  ;	    LDS DX, name
 12958                                  ;	    MOV CX, attr
 12959                                  ;	    INT 21h
 12960                                  ;	; DMA address has datablock
 12961                                  ;
 12962                                  ;   Error Returns:
 12963                                  ;	    AX = error_path_not_found
 12964                                  ;	       = error_no_more_files
 12965                                  ;---------------------------------------------------------------------------
 12966                                  
 12967                                  _$FIND_FIRST:
 12968 00002D88 89D6                    	MOV	SI,DX			; get name in appropriate place
 12969 00002D8A 36880E[0805]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 12970                                  
 12971 00002D8F BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12972                                  
 12973 00002D92 E8C03C                  	call	TransPathSet		; convert the path
 12974 00002D95 7305                    	JNC	short Find_it 		; no error, go and look
 12975                                  FindError:
 12976                                  	;mov	al,3
 12977 00002D97 B003                    	mov	al, error_path_not_found ; error and map into one.
 12978 00002D99 E96AE9                  	jmp	SYS_RET_ERR
 12979                                  Find_it:
 12980 00002D9C 16                      	push	ss
 12981 00002D9D 1F                      	pop	ds
 12982                                  
 12983 00002D9E FF36[DA02]              	push	word [DMAADD]
 12984 00002DA2 FF36[DC02]              	push	word [DMAADD+2]
 12985 00002DA6 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12986 00002DAC 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12987                                  	; MSDOS 6.0
 12988                                  	;call	GET_FAST_SEARCH 	; search
 12989                                  	; MSDOS 3.3
 12990 00002DB0 E85F0B                  	call	DOS_SEARCH_FIRST
 12991 00002DB3 8F06[DC02]              	pop	word [DMAADD+2]
 12992 00002DB7 8F06[DA02]              	pop	word [DMAADD]
 12993 00002DBB 7303                    	JNC	short FindSet 		; no error, transfer info
 12994 00002DBD E946E9                  	jmp	SYS_RET_ERR
 12995                                  
 12996                                  FindSet:
 12997 00002DC0 BE[6004]                	MOV	SI,SEARCHBUF
 12998 00002DC3 C43E[DA02]              	LES	DI,[DMAADD]
 12999 00002DC7 B91500                  	MOV	CX,21
 13000 00002DCA F3A4                    	REP	MOVSB
 13001 00002DCC 56                      	PUSH	SI			; Save pointer to start of entry
 13002                                  	;mov	al,[si+0Bh]
 13003 00002DCD 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 13004 00002DD0 AA                      	STOSB
 13005                                  	;add	si,16h
 13006 00002DD1 83C616                  	ADD	SI,dir_entry.dir_time
 13007 00002DD4 A5                      	MOVSW				; dir_time
 13008 00002DD5 A5                      	MOVSW				; dir_date
 13009 00002DD6 46                      	INC	SI
 13010 00002DD7 46                      	INC	SI			; Skip dir_first
 13011 00002DD8 A5                      	MOVSW				; dir_size (2 words)
 13012 00002DD9 A5                      	MOVSW
 13013 00002DDA 5E                      	POP	SI			; Point back to dir_name
 13014 00002DDB E83600                   	CALL	PackName
 13015 00002DDE E91CE9                  	jmp	SYS_RET_OK		; bye with no errors
 13016                                  
 13017                                  ;---------------------------------------------------------------------------
 13018                                  ;
 13019                                  ;   Procedure Name : $FIND_NEXT
 13020                                  ;
 13021                                  ;   Assembler usage:
 13022                                  ;	; dma points at area returned by find_first
 13023                                  ;	    MOV AH, findnext
 13024                                  ;	    INT 21h
 13025                                  ;	; next entry is at dma
 13026                                  ;
 13027                                  ;   Error Returns:
 13028                                  ;	    AX = error_no_more_files
 13029                                  ;---------------------------------------------------------------------------
 13030                                  
 13031                                  _$FIND_NEXT:
 13032 00002DE1 16                      	push	ss
 13033 00002DE2 07                      	pop	es
 13034                                  
 13035 00002DE3 BF[6004]                	MOV	DI,SEARCHBUF
 13036                                  
 13037 00002DE6 36C536[DA02]            	LDS	SI,[SS:DMAADD]
 13038                                  
 13039 00002DEB B91500                  	MOV	CX,21
 13040 00002DEE F3A4                    	REP	MOVSB			; Put the search continuation info
 13041                                  					;  in the right place
 13042 00002DF0 16                      	push	ss
 13043 00002DF1 1F                      	pop	ds			; get ready for search
 13044                                  	
 13045 00002DF2 FF36[DA02]              	push	word [DMAADD]
 13046 00002DF6 FF36[DC02]              	push	word [DMAADD+2]
 13047 00002DFA C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 13048 00002E00 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 13049 00002E04 E8C00B                  	call	DOS_SEARCH_NEXT 	; Find it
 13050 00002E07 8F06[DC02]              	pop	word [DMAADD+2]
 13051 00002E0B 8F06[DA02]              	pop	word [DMAADD]
 13052 00002E0F 73AF                    	JNC	short FindSet 		; No error, set info
 13053 00002E11 E9F2E8                  	jmp	SYS_RET_ERR
 13054                                  
 13055                                  ;---------------------------------------------------------------------------
 13056                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 13057                                  ;
 13058                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 13059                                  ;	the ASCIZ format.
 13060                                  ;
 13061                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 13062                                  ;		(ES:DI) = destination area (13 bytes)
 13063                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 13064                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 13065                                  ;---------------------------------------------------------------------------
 13066                                  
 13067                                  PackName:
 13068                                  ;	Move over 8 characters to cover the name component, then trim it's
 13069                                  ;	trailing blanks.
 13070                                  
 13071 00002E14 B90800                  	MOV	CX,8			; Pack the name
 13072 00002E17 F3A4                    	REP	MOVSB			; Move all of it
 13073                                  main_kill_tail:
 13074 00002E19 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13075 00002E1E 7507                    	JNZ	short find_check_dot
 13076 00002E20 4F                      	DEC	DI			; Back up over trailing space
 13077 00002E21 41                      	INC	CX
 13078 00002E22 83F908                  	CMP	CX,8
 13079 00002E25 72F2                    	JB	short main_kill_tail
 13080                                  find_check_dot:
 13081                                  	;CMP	WORD [SI],(" " << 8) | " "
 13082 00002E27 813C2020                	cmp     word [si],2020h 
 13083 00002E2B 7506                    	JNZ	short got_ext 		; Some chars in extension
 13084 00002E2D 807C0220                	CMP	BYTE [SI+2]," "
 13085 00002E31 7412                    	JZ	short find_done		; No extension
 13086                                  got_ext:
 13087 00002E33 B02E                    	MOV	AL,"."
 13088 00002E35 AA                      	STOSB
 13089 00002E36 B90300                  	MOV	CX,3
 13090 00002E39 F3A4                    	REP	MOVSB
 13091                                  ext_kill_tail:
 13092 00002E3B 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13093 00002E40 7503                    	JNZ	short find_done
 13094 00002E42 4F                      	DEC	DI			; Back up over trailing space
 13095 00002E43 EBF6                    	JMP	short ext_kill_tail
 13096                                  find_done:
 13097 00002E45 31C0                    	XOR	AX,AX
 13098 00002E47 AA                      	STOSB				; NUL terminate
 13099 00002E48 C3                      	retn
 13100                                  
 13101                                  ;GET_FAST_SEARCH:
 13102                                  ;	; 22/07/2018
 13103                                  ;	; MSDOS 6.0
 13104                                  ;	OR	word [DOS34_FLAG],SEARCH_FASTOPEN 
 13105                                  ;					;FO.trigger fastopen ;AN000;
 13106                                  ;	call	DOS_SEARCH_FIRST
 13107                                  ;	retn
 13108                                  
 13109                                  
 13110                                  ;============================================================================
 13111                                  ; PATH.ASM, MSDOS 6.0, 1991
 13112                                  ;============================================================================
 13113                                  ; 06/08/2018 - Retro DOS v3.0
 13114                                  
 13115                                  ;**	Directory related system calls. These will be passed direct text of the
 13116                                  ;	pathname from the user. They will need to be passed through the macro
 13117                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 13118                                  ;	defined in DISPATCH. The system calls are:
 13119                                  ;
 13120                                  ;	$CURRENT_DIR  Written
 13121                                  ;	$RMDIR	  Written
 13122                                  ;	$CHDIR	  Written
 13123                                  ;	$MKDIR	  Written
 13124                                  ;
 13125                                  ;
 13126                                  ;	Modification history:
 13127                                  ;
 13128                                  ;	    Created: ARR 4 April 1983
 13129                                  ;		 MZ 10 May 1983     CurrentDir implemented
 13130                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 13131                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 13132                                  ;				    current directory.
 13133                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 13134                                  
 13135                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 13136                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 13137                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 13138                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 13139                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 13140                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 13141                                  ;	I_Need	cMeta,BYTE
 13142                                  ;	I_Need	DrvErr,BYTE					;AN000;
 13143                                  
 13144                                  
 13145                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 13146                                  ;---------------------------------------------------------------------------
 13147                                  ;
 13148                                  ;   Procedure Name : $CURRENT_DIR
 13149                                  ;
 13150                                  ;   Assembler usage:
 13151                                  ;		LDS	SI,area
 13152                                  ;		MOV	DL,drive
 13153                                  ;		INT	21h
 13154                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 13155                                  ;	    ; current directory.
 13156                                  ;   Error returns:
 13157                                  ;	    AX = error_invalid_drive
 13158                                  ;
 13159                                  ;---------------------------------------------------------------------------
 13160                                  
 13161                                  _$CURRENT_DIR:
 13162                                  	;06/08/2018 - Retro DOS v3.0
 13163                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 13164 00002E49 E819F2                  	call	EcritDisk
 13165 00002E4C 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 13166 00002E4E E80E3B                  	call	GetVisDrv		; grab it
 13167 00002E51 7308                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 13168                                  CurdirErr:
 13169 00002E53 E817F2                  	call	LcritDisk
 13170                                  	
 13171                                  	; MSDOS 6.0
 13172                                  	;MOV	AL,[CS:DrvErr]		;IFS.			;AN000;
 13173                                  
 13174                                  	; MSDOS 3.3
 13175 00002E56 B00F                    	mov	al,0Fh
 13176                                  
 13177                                  curdir_errj:
 13178 00002E58 E9ABE8                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 13179                                  
 13180                                  CurrentValidate:
 13181 00002E5B 1E                      	push	ds		; save destination
 13182 00002E5C 56                      	push	si
 13183 00002E5D 2EC536[3A05]            	LDS	SI,[CS:THISCDS]
 13184                                  	;TEST	word [SI+curdir.flags],curdir_isnet
 13185                                  	;JNZ	short DoCheck
 13186                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 13187                                  ; media check.
 13188                                  ;	CMP	word [SI+curdir.ID],0
 13189                                  ;	JZ	short GetDst
 13190                                  DoCheck:
 13191 00002E62 2EC606[F802]00          	MOV	byte [cs:NoSetDir],0	; interested only in contents
 13192                                  
 13193 00002E68 BF[6003]                	MOV	DI,OPENBUF
 13194                                  
 13195 00002E6B E8011D                  	call	ValidateCDS		; output is ES:DI -> CDS
 13196 00002E6E 06                      	push	es	 		; swap source and destination
 13197 00002E6F 57                      	push	di
 13198 00002E70 5E                      	pop	si
 13199 00002E71 1F                      	pop	ds
 13200                                  GetDst:
 13201 00002E72 5F                      	pop	di
 13202 00002E73 07                      	pop	es			; get real destination
 13203 00002E74 72DD                    	JC	short CurdirErr
 13204                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 13205 00002E76 03744F                  	ADD	SI,[SI+curdir.end]
 13206 00002E79 803C5C                  	CMP	BYTE [SI],'\'		; root or subdirs present?
 13207 00002E7C 7501                    	JNZ	short CurrentCopy
 13208 00002E7E 46                      	INC	SI
 13209                                  CurrentCopy:
 13210                                  ;	call	FStrCpy
 13211                                  ;; 10/29/86 E5 char
 13212 00002E7F 50                      	PUSH	AX
 13213 00002E80 AC                      	LODSB				; get char
 13214 00002E81 08C0                    	OR	AL,AL
 13215 00002E83 7413                    	JZ	short FOK
 13216 00002E85 3C05                    	CMP	AL,05
 13217 00002E87 740D                    	JZ	short FCHANGE
 13218 00002E89 EB01                    	JMP	short FFF
 13219                                  FCPYNEXT:
 13220 00002E8B AC                      	LODSB				; get char
 13221                                  FFF:
 13222 00002E8C 3C5C                    	CMP	AL,'\'			; beginning of directory
 13223 00002E8E 7508                    	JNZ	short FOK		; no
 13224 00002E90 AA                      	STOSB				; put into user's buffer
 13225 00002E91 AC                      	LODSB				; 1st char of dir is 05?
 13226 00002E92 3C05                    	CMP	AL,05H
 13227 00002E94 7502                    	JNZ	short FOK		; no
 13228                                  FCHANGE:
 13229 00002E96 B0E5                    	MOV	AL,0E5H			; make it E5
 13230                                  FOK:
 13231 00002E98 AA                      	STOSB				; put into user's buffer
 13232 00002E99 08C0                    	OR	AL,AL			; final char
 13233 00002E9B 75EE                    	JNZ	short FCPYNEXT		; no
 13234 00002E9D 58                      	POP	AX
 13235                                  
 13236                                  ;; 10/29/86 E5 char
 13237 00002E9E 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 13238 00002EA0 E8CAF1                  	call	LcritDisk
 13239 00002EA3 E957E8                  	jmp	SYS_RET_OK		; no more, bye!
 13240                                  
 13241                                  
 13242                                  ;BREAK <$RmDir -- Remove a directory>
 13243                                  ;---------------------------------------------------------------------------
 13244                                  ;
 13245                                  ; Procedure Name : $RmDir
 13246                                  ;
 13247                                  ; Inputs:
 13248                                  ;	DS:DX Points to asciz name
 13249                                  ; Function:
 13250                                  ;	Delete directory if empty
 13251                                  ; Returns:
 13252                                  ;	STD XENIX Return
 13253                                  ;	AX = error_path_not_found If path bad
 13254                                  ;	AX = error_access_denied If
 13255                                  ;		Directory not empty
 13256                                  ;		Path not directory
 13257                                  ;		Root directory specified
 13258                                  ;		Directory malformed (. and .. not first two entries)
 13259                                  ;		User tries to delete a current directory
 13260                                  ;	AX = error_current_directory
 13261                                  ;
 13262                                  ;----------------------------------------------------------------------------
 13263                                  
 13264                                  _$RMDIR:
 13265 00002EA6 52                      	push	dx			; Save ptr to name
 13266 00002EA7 1E                      	push	ds
 13267 00002EA8 89D6                    	mov	si,dx			; Load ptr into si
 13268 00002EAA BF[6003]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 13269 00002EAD 57                      	push	di
 13270 00002EAE E8AC3B                  	call	TransPathNoSet		; Translate the name
 13271 00002EB1 5F                      	pop	di			; di = ptr to buf for trans name
 13272 00002EB2 7307                    	jnc	short rmlset		; If transpath succeeded, continue
 13273 00002EB4 1F                      	pop	ds
 13274 00002EB5 5A                      	pop	dx			; Restore the	 name
 13275 00002EB6 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 13276                                  	;jmp	short curdir_errj
 13277                                  rmdir_errj: ; 10/08/2018
 13278 00002EB8 E94BE8                  	jmp	SYS_RET_ERR
 13279                                  rmlset:
 13280 00002EBB 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 13281 00002EC1 7512                    	Jnz	short rmerr		;	return (-1);
 13282 00002EC3 16                      	push	ss
 13283 00002EC4 07                      	pop	es
 13284 00002EC5 30C0                    	xor	al,al			; al = 0 , ie drive a:
 13285                                  rmloop: 
 13286 00002EC7 E8FF3A                  	call	GetCDSFromDrv		; Get curdir for drive in al
 13287 00002ECA 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 13288 00002ECC E85EF0                  	call	StrCmp			; Are the 2 paths the same?
 13289 00002ECF 7404                    	jz	short rmerr		; Yes, report error.
 13290 00002ED1 FEC0                    	inc	al			; No, inc al to next drive number
 13291 00002ED3 EBF2                    	jmp	short rmloop		; Go check next drive.
 13292                                  rmerr:
 13293 00002ED5 1F                      	pop	ds
 13294 00002ED6 5A                      	pop	dx			; Restore the name
 13295 00002ED7 B010                    	mov	al,error_current_directory ;  error
 13296                                  	;jmp	short curdir_errj
 13297 00002ED9 EBDD                    	jmp	short rmdir_errj
 13298                                  rmcont:
 13299 00002EDB 1F                      	pop	ds
 13300 00002EDC 5A                      	pop	dx			; Restore the name
 13301 00002EDD BE[1D3D]                	MOV	SI,DOS_RMDIR
 13302 00002EE0 EB75                    	JMP	short DoDirCall ; 07/09/2018
 13303                                  
 13304                                  ;BREAK <$ChDir -- Change current directory on a drive>
 13305                                  ;----------------------------------------------------------------------------
 13306                                  ;
 13307                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 13308                                  ; for setting up the CDS for the specified drive appropriately.  There are
 13309                                  ; several cases to consider:
 13310                                  ;
 13311                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 13312                                  ;	it into a WFP.	We verify the existance of this directory and then
 13313                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 13314                                  ;	directory cluster.
 13315                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 13316                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 13317                                  ;	WFP back into the CDS.
 13318                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 13319                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 13320                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 13321                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 13322                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 13323                                  ;	to process the path but to return the logical CDS and the logical
 13324                                  ;	path.  We then copy the logical path into the logical CDS.
 13325                                  ;
 13326                                  ; Inputs:
 13327                                  ;	DS:DX Points to asciz name
 13328                                  ; Returns:
 13329                                  ;	STD XENIX Return
 13330                                  ;	AX = chdir_path_not_found if error
 13331                                  ;
 13332                                  ;----------------------------------------------------------------------------
 13333                                  
 13334                                  _$CHDIR:
 13335 00002EE2 BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13336 00002EE5 89D6                    	MOV	SI,DX			; get source
 13337 00002EE7 E8673B                  	call	TransPath		; go munge the path and get real CDS
 13338 00002EEA 7305                    	JNC	short ChDirCrack	; no errors, try path
 13339                                  ChDirErrP:
 13340 00002EEC B003                    	MOV	AL,error_path_not_found
 13341                                  ChDirErr:
 13342 00002EEE E915E8                  	jmp	SYS_RET_ERR 	; oops!
 13343                                  
 13344                                  ChDirCrack:
 13345 00002EF1 803E[1505]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 13346 00002EF6 75F4                    	JNZ	short ChDirErrP
 13347                                  ;
 13348                                  ; We cannot do a ChDir (yet) on a raw CDS.  This is treated as a path not
 13349                                  ; found.
 13350                                  ;
 13351 00002EF8 C43E[3A05]              	LES	DI,[THISCDS]
 13352 00002EFC 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 13353 00002EFF 74EB                    	JZ	short ChDirErrP		;	error ();
 13354                                   ;
 13355                                   ; Find out if the directory exists.
 13356                                   ;
 13357 00002F01 E8E40D                  	call	DOS_CHDIR
 13358 00002F04 72E8                    	Jc	short ChDirErr
 13359                                  ;
 13360                                  ; Get back CDS to see if a join as seen.  Set the currency pointer (only if
 13361                                  ; not network).  If one was seen, all we need to do is copy in the text
 13362                                  ;
 13363 00002F06 C43E[3A05]              	LES	DI,[THISCDS]
 13364 00002F0A 26F745430020            	TEST	word [ES:DI+curdir.flags],curdir_splice
 13365 00002F10 7425                    	JZ	short GotCDS
 13366                                  ;
 13367                                  ; The CDS was joined.  Let's go back and grab the logical CDS.
 13368                                  ;
 13369 00002F12 06                      	push	es	
 13370 00002F13 57                      	push	di
 13371 00002F14 51                      	push	cx			; save CDS and cluster...
 13372 00002F15 E8F3E6                  	call	Get_User_Stack		; get original text
 13373 00002F18 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 13374 00002F1B 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 13375 00002F1E BE[6003]                	MOV	SI,OPENBUF		; spot for translated name
 13376 00002F21 87F7                    	XCHG	SI,DI
 13377 00002F23 30C0                    	XOR	AL,AL			; do no splicing
 13378 00002F25 57                      	push	di
 13379 00002F26 E8343B                  	call	TransPathNoSet		; Munge path
 13380 00002F29 5E                      	pop	si
 13381                                  ;
 13382                                  ; There should NEVER be an error here.
 13383                                  ;
 13384                                  
 13385                                  ;IF FALSE
 13386                                  ;	JNC SKipErr
 13387                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 13388                                  ;SkipErr:
 13389                                  ;ENDIF
 13390 00002F2A C43E[3A05]              	LES	DI,[THISCDS]		; get new CDS
 13391 00002F2E 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 13392                                  					; no valid cluster here...
 13393 00002F34 59                      	pop	cx
 13394 00002F35 5F                      	pop	di
 13395 00002F36 07                      	pop	es
 13396                                  ;
 13397                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 13398                                  ;
 13399                                  GotCDS:
 13400                                  ;
 13401                                  ; wfp_start points to the text. See if it is long enough
 13402                                  ;
 13403                                  	; MSDOS 3.3
 13404                                  	;push	ss
 13405                                  	;pop	ds
 13406                                  	;mov	si,[WFP_START]
 13407                                  	;push	cx
 13408                                  	;call	DStrLen
 13409                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 13410                                  	;pop	cx
 13411                                  	;ja	short ChDirErrP
 13412                                  
 13413                                  	; MSDOS 6.0
 13414 00002F37 E84800                  	CALL	Check_PathLen		;PTM.		;AN000;
 13415 00002F3A 77B0                    	JA	short ChDirErrP
 13416                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13417 00002F3C 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 13418 00002F42 7508                    	JNZ	short SkipRecency
 13419                                  	; MSDOS 6.0
 13420                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 13421                                  	;				;PTM. for Join and Subst ;AN000;
 13422                                  	;JZ	short setdirclus	;PTM.		;AN000;
 13423                                  	;MOV	CX,-1			;PTM.		;AN000;
 13424                                  ;setdirclus:
 13425 00002F44 26894D49                	MOV	[ES:DI+curdir.ID],CX
 13426 00002F48 C43E[3A05]              	LES	DI,[THISCDS]		; get logical CDS
 13427                                  SkipRecency:
 13428 00002F4C E80BF0                  	call	FStrCpy
 13429 00002F4F 30C0                    	XOR	AL,AL
 13430                                  mkdir_ok:
 13431 00002F51 E9A9E7                  	jmp	SYS_RET_OK
 13432                                  
 13433                                  
 13434                                  ;BREAK <$MkDir - Make a directory entry>
 13435                                  ;---------------------------------------------------------------------------
 13436                                  ;
 13437                                  ; Procedure Name : $MkDir
 13438                                  ; Inputs:
 13439                                  ;	DS:DX Points to asciz name
 13440                                  ; Function:
 13441                                  ;	Make a new directory
 13442                                  ; Returns:
 13443                                  ;	STD XENIX Return
 13444                                  ;	AX = mkdir_path_not_found if path bad
 13445                                  ;	AX = mkdir_access_denied  If
 13446                                  ;		Directory cannot be created
 13447                                  ;		Node already exists
 13448                                  ;		Device name given
 13449                                  ;		Disk or directory(root) full
 13450                                  ;---------------------------------------------------------------------------
 13451                                  
 13452                                  _$MKDIR:
 13453 00002F54 BE[063C]                	MOV	SI,DOS_MKDIR
 13454                                  DoDirCall:
 13455 00002F57 BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13456                                  
 13457 00002F5A 56                      	push	si
 13458 00002F5B 89D6                    	MOV	SI,DX			; get source
 13459 00002F5D E8F13A                  	call	TransPath		; go munge the path
 13460 00002F60 5E                      	pop	si
 13461 00002F61 7305                    	JNC	short MkDirCrack	; no errors, try path
 13462                                  MkErrP:
 13463 00002F63 B003                    	MOV	AL,error_path_not_found	; oops!
 13464                                  MkErr:
 13465 00002F65 E99EE7                  	jmp	SYS_RET_ERR
 13466                                  MkDirCrack:
 13467 00002F68 36803E[1505]FF          	CMP	byte [SS:CMETA],-1
 13468 00002F6E 75F3                    	JNZ	short MkErrP
 13469                                  
 13470                                  	; MSDOS 3.3
 13471                                  	;push	ss
 13472                                  	;pop	ds
 13473                                  	;call	si
 13474                                  	;jb	short MkErr
 13475                                  	;;jmp	short mkdir_ok
 13476                                  	;jmp	SYS_RET_OK
 13477                                  
 13478                                  	; MSDOS 6.0
 13479 00002F70 56                      	PUSH	SI			;PTM.			;AN000;
 13480 00002F71 E80E00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 13481 00002F74 5E                      	POP	SI			;PTM.			;AN000;
 13482 00002F75 7604                    	JBE	short pathok		;PTM.			;AN000;
 13483 00002F77 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 13484                                  	;jmp	SYS_RET_ERR		;PTM.
 13485 00002F79 EBEA                    	jmp	short MkErr
 13486                                  pathok:
 13487 00002F7B FFD6                    	CALL	SI			; go get file
 13488 00002F7D 72E6                    	JC	short MkErr		; no errors
 13489                                  	;jmp	short mkdir_ok
 13490 00002F7F E97BE7                  	jmp	SYS_RET_OK
 13491                                  
 13492                                  ;----------------------------------------------------------------------------
 13493                                  ;
 13494                                  ; Procedure Name : Check_PathLen
 13495                                  ;
 13496                                  ; Inputs:
 13497                                  ;	nothing
 13498                                  ; Function:
 13499                                  ;	check if final path length greater than 67
 13500                                  ; Returns:
 13501                                  ;	Above flag set if > 67
 13502                                  ;
 13503                                  ;---------------------------------------------------------------------------
 13504                                  
 13505                                  Check_PathLen:
 13506                                  	; 09/09/2018
 13507                                  	;;MOV	SI,[WFP_START]
 13508                                  	;MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 13509                                  ;check_PathLen2:
 13510 00002F82 16                      	push	ss
 13511 00002F83 1F                      	pop	ds
 13512 00002F84 8B36[4A05]              	mov	SI,[WFP_START] ; MSDOS 3.3
 13513 00002F88 51                      	push	CX	
 13514 00002F89 E8E5EF                  	CALL	DStrLen
 13515 00002F8C 83F943                  	CMP	CX,DIRSTRLEN
 13516 00002F8F 59                      	POP	CX
 13517 00002F90 C3                      	retn
 13518                                  
 13519                                  ;============================================================================
 13520                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 13521                                  ;============================================================================
 13522                                  ; 07/08/2018 - Retro DOS v3.0
 13523                                  
 13524                                  ;**	IOCTL system call.
 13525                                  ;
 13526                                  ;	$IOCTL
 13527                                  ;
 13528                                  ;	  Revision history:
 13529                                  ;
 13530                                  ;		Created: ARR 4 April 1983
 13531                                  ;
 13532                                  ;		GenericIOCTL added:		KGS	22 April 1985
 13533                                  ;
 13534                                  ;		A000	version 4.00	Jan. 1988
 13535                                  ;
 13536                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 13537                                  ;
 13538                                  
 13539                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 13540                                  ;---------------------------------------------------------------------------
 13541                                  ;
 13542                                  ;   Assembler usage:
 13543                                  ;	    MOV     BX, Handle
 13544                                  ;	    MOV     DX, Data
 13545                                  ;
 13546                                  ;	(or LDS     DX,BUF
 13547                                  ;	    MOV     CX,COUNT)
 13548                                  ;
 13549                                  ;	    MOV     AH, Ioctl
 13550                                  ;	    MOV     AL, Request
 13551                                  ;	    INT     21h
 13552                                  ;
 13553                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 13554                                  ;	    attribute word in DX, handle in BX:
 13555                                  ;	    DH = high word of device driver attributes
 13556                                  ;	    DL = low byte of sf_flags
 13557                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 13558                                  ;	    in BX.
 13559                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 13560                                  ;	    into DS:DX.  Return number read in AX.
 13561                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 13562                                  ;	    DS:DX.  Return bytes written in AX.
 13563                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 13564                                  ;	    into DS:DX.  Return number read in AX.
 13565                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 13566                                  ;	    DS:DX.  Return bytes written in AX.
 13567                                  ;	 6  Return input status of handle in BX. If a read will go to the
 13568                                  ;	    device, AL = 0FFh, otherwise 0.
 13569                                  ;	 7  Return output status of handle in BX. If a write will go to the
 13570                                  ;	    device, AL = 0FFh, otherwise 0.
 13571                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 13572                                  ;	    removable media, 0 otherwise.
 13573                                  ;	 9  Return the contents of the device attribute word in DX for the
 13574                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 13575                                  ;	    network. 8000h is the bit for local use.
 13576                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 13577                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 13578                                  ;	    the count and CX is the delay.
 13579                                  ;
 13580                                  ;   Error returns:
 13581                                  ;	    AX = error_invalid_handle
 13582                                  ;	       = error_invalid_function
 13583                                  ;	       = error_invalid_data
 13584                                  ;
 13585                                  ;-------------------------------------------------------------------------------
 13586                                  ;
 13587                                  ;   This is the documentation copied from DOS 4.0 it is much better
 13588                                  ;   than the above
 13589                                  ;
 13590                                  ;	There are several basic forms of IOCTL calls:
 13591                                  ;
 13592                                  ;
 13593                                  ;	** Get/Set device information:	**
 13594                                  ;
 13595                                  ;	ENTRY	(AL) = function code
 13596                                  ;		  0 - Get device information
 13597                                  ;		  1 - Set device information
 13598                                  ;		(BX) = file handle
 13599                                  ;		(DX) = info for "Set Device Information"
 13600                                  ;	EXIT	'C' set if error
 13601                                  ;		  (AX) = error code
 13602                                  ;		'C' clear if OK
 13603                                  ;		  (DX) = info for "Get Device Information"
 13604                                  ;	USES	ALL
 13605                                  ;
 13606                                  ;
 13607                                  ;	**  Read/Write Control Data From/To Handle  **
 13608                                  ;
 13609                                  ;	ENTRY	(AL) = function code
 13610                                  ;		  2 - Read device control info
 13611                                  ;		  3 - Write device control info
 13612                                  ;		(BX) = file handle
 13613                                  ;		(CX) = transfer count
 13614                                  ;		(DS:DX) = address for data
 13615                                  ;	EXIT	'C' set if error
 13616                                  ;		  (AX) = error code
 13617                                  ;		'C' clear if OK
 13618                                  ;		  (AX) = count of bytes transfered
 13619                                  ;	USES	ALL
 13620                                  ;
 13621                                  ;
 13622                                  ;	**  Read/Write Control Data From/To Block Device  **
 13623                                  ;
 13624                                  ;	ENTRY	(AL) = function code
 13625                                  ;		  4 - Read device control info
 13626                                  ;		  5 - Write device control info
 13627                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13628                                  ;		(CX) = transfer count
 13629                                  ;		(DS:DX) = address for data
 13630                                  ;	EXIT	'C' set if error
 13631                                  ;		  (AX) = error code
 13632                                  ;		'C' clear if OK
 13633                                  ;		  (AX) = count of bytes transfered
 13634                                  ;	USES	ALL
 13635                                  ;
 13636                                  ;
 13637                                  ;	**  Get Input/Output Status  **
 13638                                  ;
 13639                                  ;	ENTRY	(AL) = function code
 13640                                  ;		  6 - Get Input status
 13641                                  ;		  7 - Get Output Status
 13642                                  ;		(BX) = file handle
 13643                                  ;	EXIT	'C' set if error
 13644                                  ;		  (AX) = error code
 13645                                  ;		'C' clear if OK
 13646                                  ;		  (AL) = 00 if not ready
 13647                                  ;		  (AL) = FF if ready
 13648                                  ;	USES	ALL
 13649                                  ;
 13650                                  ;
 13651                                  ;	**  Get Drive Information  **
 13652                                  ;
 13653                                  ;	ENTRY	(AL) = function code
 13654                                  ;		  8 - Check for removable media
 13655                                  ;		  9 - Get device attributes
 13656                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13657                                  ;	EXIT	'C' set if error
 13658                                  ;		  (AX) = error code
 13659                                  ;		'C' clear if OK
 13660                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 13661                                  ;		  (DX) = device attribute word (func. 9)
 13662                                  ;	USES	ALL
 13663                                  ;
 13664                                  ;
 13665                                  ;	**  Get Redirected bit	**
 13666                                  ;
 13667                                  ;	ENTRY	(AL) = function code
 13668                                  ;		  0Ah - Network stuff
 13669                                  ;		(BX) = file handle
 13670                                  ;	EXIT	'C' set if error
 13671                                  ;		  (AX) = error code
 13672                                  ;		'C' clear if OK
 13673                                  ;		  (DX) = SFT flags word, 8000h set if network file
 13674                                  ;	USES	ALL
 13675                                  ;
 13676                                  ;
 13677                                  ;	**  Change sharer retry parameters  **
 13678                                  ;
 13679                                  ;	ENTRY	(AL) = function code
 13680                                  ;		  0Bh - Set retry parameters
 13681                                  ;		(CX) = retry loop count
 13682                                  ;		(DX) = number of retries
 13683                                  ;	EXIT	'C' set if error
 13684                                  ;		  (AX) = error code
 13685                                  ;		'C' clear if OK
 13686                                  ;	USES	ALL
 13687                                  ;
 13688                                  ;
 13689                                  ;   =================================================================
 13690                                  ;
 13691                                  ;	**  New Standard Control  **
 13692                                  ;
 13693                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 13694                                  ;	FORMS ARE OBSOLETE.
 13695                                  ;
 13696                                  ;   =================================================================
 13697                                  ;
 13698                                  ;	ENTRY	(AL) = function code
 13699                                  ;		  0Ch - Control Function subcode
 13700                                  ;		(BX) = File Handle
 13701                                  ;		(CH) = Category Indicator
 13702                                  ;		(CL) = Function within category
 13703                                  ;		(DS:DX) = address for data, if any
 13704                                  ;		(SI) = Passed to device as argument, use depends upon function
 13705                                  ;		(DI) = Passed to device as argument, use depends upon function
 13706                                  ;	EXIT	'C' set if error
 13707                                  ;		  (AX) = error code
 13708                                  ;		'C' clear if OK
 13709                                  ;		  (SI) = Return value, meaning is function dependent
 13710                                  ;		  (DI) = Return value, meaning is function dependent
 13711                                  ;		  (DS:DX) = Return address, use is function dependent
 13712                                  ;	USES	ALL
 13713                                  ;
 13714                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 13715                                  ;     (See inc\ioctl.inc for more info)
 13716                                  ;
 13717                                  ;	ENTRY	(AL) = function code
 13718                                  ;		  0Dh - Control Function subcode
 13719                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 13720                                  ;		(CH) = Category Indicator
 13721                                  ;		(CL) = Function within category
 13722                                  ;		(DS:DX) = address for data, if any
 13723                                  ;		(SI) = Passed to device as argument, use depends upon function
 13724                                  ;		(DI) = Passed to device as argument, use depends upon function
 13725                                  ;
 13726                                  ;	EXIT	'C' set if error
 13727                                  ;		  (AX) = error code
 13728                                  ;		'C' clear if OK
 13729                                  ;		  (DS:DX) = Return address, use is function dependent
 13730                                  ;	USES	ALL
 13731                                  ;
 13732                                  ;---------------------------------------------------------------------------
 13733                                  	
 13734                                  	; MSDOS 6.0
 13735                                  IOCTLJMPTABLE:	;label	word
 13736                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13737 00002F91 [C92F]                  	dw	ioctl_getset_data	; 0
 13738 00002F93 [C92F]                  	dw	ioctl_getset_data   	; 1
 13739 00002F95 [1930]                  	dw	ioctl_control_string	; 2
 13740 00002F97 [1930]                  	dw	ioctl_control_string	; 3
 13741 00002F99 [7131]                  	dw	ioctl_get_dev		; 4
 13742 00002F9B [7131]                  	dw	ioctl_get_dev		; 5
 13743 00002F9D [3430]                  	dw	ioctl_status		; 6
 13744 00002F9F [3430]                  	dw	ioctl_status		; 7
 13745 00002FA1 [CA30]                  	dw	ioctl_rem_media		; 8
 13746 00002FA3 [0931]                  	dw	Ioctl_Drive_attr	; 9
 13747 00002FA5 [6031]                  	dw	IOCTL_Handle_Redir	; A
 13748 00002FA7 [5330]                  	dw	Set_Retry_Parameters	; B
 13749 00002FA9 [6230]                  	dw	GENERICIOCTLHANDLE	; C
 13750 00002FAB [7A30]                  	dw	GENERICIOCTL		; D
 13751                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13752 00002FAD [2432]                  	dw	ioctl_drive_owner	; E
 13753 00002FAF [2432]                  	dw	ioctl_drive_owner	; F
 13754                                  	; MSDOS 6.0
 13755                                  	;dw	query_handle_support	; 10h
 13756                                  	;dw	query_device_support	; 11h
 13757                                  
 13758                                  _$IOCTL:
 13759 00002FB1 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 13760 00002FB3 16                      	push	ss
 13761 00002FB4 1F                      	pop	ds			;hkn; SS is DOSDATA
 13762                                  
 13763                                  	; MSDOS 3.3
 13764 00002FB5 3C0F                    	cmp	al,0Fh 
 13765                                  	; MSDOS 6.0
 13766                                  	;cmp	al,11h			; al must be between 0 & 11h
 13767 00002FB7 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 13768                                  
 13769                                  	; 09/09/2018
 13770                                  	;push	AX			; Need to save AL for generic IOCTL
 13771 00002FB9 89C7                    	mov	di,ax			; di NOT a PARM
 13772 00002FBB 81E7FF00                	and	di,0FFh			; di = al
 13773 00002FBF D1E7                    	shl	di,1			; di = index into jmp table
 13774                                  	;pop	AX			; Restore AL for generic IOCTL
 13775                                  
 13776 00002FC1 2EFFA5[912F]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 13777                                  
 13778                                  
 13779                                  ioctl_bad_funj2:
 13780 00002FC6 E9F900                  	JMP	ioctl_bad_fun  ; 10/08/2018
 13781                                  
 13782                                  ;--------------------------------------------------------------------------
 13783                                  ;
 13784                                  ; IOCTL: AL= 0,1
 13785                                  ;
 13786                                  ; ENTRY : DS = DOSDATA
 13787                                  ;
 13788                                  ;---------------------------------------------------------------------
 13789                                  
 13790                                  ioctl_getset_data:
 13791                                  	; MSDOS 6.0
 13792 00002FC9 E83538                  	call	SFFromHandle		; ES:DI -> SFT
 13793 00002FCC 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 13794                                  ioctl_bad_handle:
 13795 00002FCE B006                    	mov	al,error_invalid_handle
 13796                                  ioctl_error:
 13797 00002FD0 E933E7                  	jmp	SYS_RET_ERR
 13798                                  
 13799                                  ioctl_check_permissions:
 13800 00002FD3 3C00                    	CMP	AL,0
 13801 00002FD5 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 13802 00002FD9 741B                    	JZ	short ioctl_read	; read the byte
 13803                                  
 13804 00002FDB 08F6                    	or	dh, dh
 13805 00002FDD 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 13806 00002FDF B00D                    	mov	al,error_invalid_data	; no DH <> 0
 13807                                  	;jmp	SYS_RET_ERR
 13808 00002FE1 EBED                    	jmp	short ioctl_error
 13809                                  
 13810                                  ioctl_check_device:
 13811 00002FE3 A880                    	test	AL,devid_device 	; can I set this handle?
 13812 00002FE5 74DF                    	jz	short ioctl_bad_funj2
 13813 00002FE7 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 13814                                  					;   device bit!! He can muck with the
 13815                                  					;   others at will.
 13816 00002FEA C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13817 00002FEF 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 13818                                  
 13819                                  ioctl_ok:
 13820 00002FF3 E907E7                  	jmp	SYS_RET_OK
 13821                                  
 13822                                  ioctl_read:
 13823 00002FF6 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 13824 00002FFB 30E4                    	XOR	AH,AH
 13825 00002FFD A880                    	test	AL,devid_device 	; Should I set high byte
 13826 00002FFF 740D                    	JZ	short ioctl_no_high	; no
 13827 00003001 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13828 00003006 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13829 0000300A 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 13830                                  ioctl_no_high:
 13831 0000300E 89C2                    	MOV	DX,AX
 13832 00003010 E8F8E5                  	call	Get_User_Stack
 13833 00003013 895406                  	MOV	[SI+user_env.user_DX],DX
 13834                                  	;;jmp	SYS_RET_OK
 13835                                  	;jmp	short ioctl_ok
 13836                                  	; 26/07/2019
 13837 00003016 E9E7E6                  	jmp	SYS_RET_OK_clc
 13838                                  
 13839                                  ;--------------------------------------------------------------------------
 13840                                  ;
 13841                                  ; IOCTL: 2,3
 13842                                  ;
 13843                                  ; ENTRY : DS = DOSDATA
 13844                                  ;	  SI = user's DS
 13845                                  ;
 13846                                  ;--------------------------------------------------------------------------
 13847                                  
 13848                                  ioctl_control_string:
 13849                                  
 13850 00003019 E8E537                  	call	SFFromHandle		; ES:DI -> SFT
 13851 0000301C 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 13852 0000301E 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 13853 00003024 74A0                    	jz	short ioctl_bad_funj2			; No it is a file
 13854 00003026 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13855 0000302B 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13856 0000302F 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 13857 00003031 E94201                  	JMP	ioctl_do_string
 13858                                  
 13859                                  ;--------------------------------------------------------------------------
 13860                                  ;
 13861                                  ; IOCTL: AL = 6,7
 13862                                  ;
 13863                                  ; ENTRY: DS = DOSDATA
 13864                                  ;
 13865                                  ;--------------------------------------------------------------------------
 13866                                  
 13867                                  ioctl_status:
 13868                                  
 13869 00003034 B401                    	MOV	AH,1
 13870 00003036 2C06                    	SUB	AL,6			; 6=0,7=1
 13871 00003038 7402                    	JZ	short ioctl_get_status
 13872 0000303A B403                    	MOV	AH,3
 13873                                  ioctl_get_status:
 13874 0000303C 50                      	PUSH	AX
 13875 0000303D E87810                  	call	GET_IO_SFT
 13876 00003040 58                      	POP	AX
 13877 00003041 7302                    	JNC	short DO_IOFUNC
 13878 00003043 EB89                    	JMP	short ioctl_bad_handle	; invalid SFT
 13879                                  
 13880                                  DO_IOFUNC:
 13881 00003045 E80A1D                  	call	IOFUNC
 13882 00003048 88C4                    	MOV	AH,AL
 13883 0000304A B0FF                    	MOV	AL,0FFH
 13884 0000304C 7502                    	JNZ	short ioctl_status_ret
 13885 0000304E FEC0                    	INC	AL
 13886                                  ioctl_status_ret:
 13887 00003050 E9AAE6                  	jmp	SYS_RET_OK
 13888                                  
 13889                                  ;------------------------------------------------------------------------
 13890                                  ;
 13891                                  ; IOCTL: AL = B
 13892                                  ;
 13893                                  ; ENTRY: DS = DOSDATA
 13894                                  ;
 13895                                  ;-------------------------------------------------------------------------
 13896                                  
 13897                                  Set_Retry_Parameters:
 13898                                  	; 09/09/2018
 13899 00003053 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 13900 00003057 09D2                    	OR	DX,DX			; zero retries not allowed
 13901 00003059 7467                    	JZ	short ioctl_bad_fun
 13902 0000305B 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 13903                                  doneok:
 13904 0000305F E99BE6                  	jmp	SYS_RET_OK		; Done
 13905                                  
 13906                                  ;--------------------------------------------------------------------------
 13907                                  ;
 13908                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 13909                                  ;
 13910                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 13911                                  ;	SI:DX -> Users Device Parameter Table
 13912                                  ;	IOCALL -> IOCTL_Req structure
 13913                                  ;
 13914                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 13915                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 13916                                  ;	call.
 13917                                  ;
 13918                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 13919                                  ;         the call to Check_If_Net because Check_If_Net gets our
 13920                                  ;         return address off the stack if the drive is invalid.
 13921                                  ;
 13922                                  ;----------------------------------------------------------------------------
 13923                                  
 13924                                  query_handle_support:	; Entry point for handles
 13925                                  GENERICIOCTLHANDLE:
 13926                                  
 13927 00003062 E89C37                  	call	SFFromHandle		; Get SFT for device.
 13928 00003065 7260                    	jc	short ioctl_bad_handlej
 13929                                  
 13930 00003067 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 13931 0000306D 7553                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 13932                                  
 13933 0000306F C606[D102]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev
 13934 00003074 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 13935 00003078 EB0F                    	jmp	short Do_GenIOCTL
 13936                                  
 13937                                  query_device_support:	; Entry point for devices:
 13938                                  GENERICIOCTL:
 13939                                  
 13940 0000307A C606[D102]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk
 13941 0000307F 80FD08                  	cmp	ch,IOC_DC		; Only disk devices are allowed to use
 13942 00003082 753E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 13943                                  
 13944 00003084 E88001                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 13945 00003087 7539                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 13946                                  
 13947                                  Do_GenIOCTL:
 13948                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 ; Can device handle Generic IOCTL funcs
 13949                                  	; 09/09/2018
 13950 00003089 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 13951 0000308E 7432                    	jz	short ioctl_bad_fun
 13952                                  
 13953                                  	; MSDOS 6.0
 13954                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ;Assume real Request
 13955                                  	;cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 13956                                  	;jl	short SetIOCtlBlock
 13957                                  	;
 13958                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 13959                                  	;jz	short ioctl_bad_fun	; No support for query 
 13960                                  	;
 13961                                  	;mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 13962                                  
 13963                                  ;SetIOCtlBlock:
 13964 00003090 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 13965 00003091 57                      	PUSH	DI			; in DS:SI
 13966                                  					; Setup Generic IOCTL Request Block
 13967 00003092 C606[2403]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 13968                                  	; 07/09/2018 (MSDOS 3.3)
 13969                                  	;mov	byte [IOCALL_REQFUNC],19
 13970 00003097 C606[2603]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 13971                                  	;
 13972 0000309C 881E[2503]              	MOV	byte [IOCALL_REQUNIT],BL
 13973 000030A0 882E[3103]              	MOV	byte [IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 13974 000030A4 880E[3203]              	MOV	byte [IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 13975 000030A8 8936[3303]              	MOV	word [IOCALL+IOCTL_REQ.REG_SI],SI
 13976 000030AC 893E[3503]              	MOV	word [IOCALL+IOCTL_REQ.REG_DI],DI
 13977 000030B0 8916[3703]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 13978 000030B4 8936[3903]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 13979                                  
 13980                                  ;hkn; IOCALL is in DOSDATA
 13981 000030B8 BB[2403]                	MOV	BX,IOCALL
 13982                                  
 13983 000030BB 16                      	PUSH	SS
 13984 000030BC 07                      	POP	ES
 13985                                  					; DS:SI -> Device header.
 13986 000030BD 5E                      	POP	SI
 13987 000030BE 1F                      	POP	DS
 13988                                  	; 10/08/2018
 13989 000030BF E9EE00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 13990                                  
 13991                                  ioctl_bad_fun:
 13992 000030C2 B001                    	mov	al, error_invalid_function
 13993 000030C4 E93FE6                  	jmp	SYS_RET_ERR	
 13994                                  
 13995                                  ioctl_bad_handlej:
 13996 000030C7 E904FF                  	jmp	ioctl_bad_handle
 13997                                  
 13998                                  ;---------------------------------------------------------------------------
 13999                                  ;
 14000                                  ; IOCTL AL = 8
 14001                                  ;
 14002                                  ; ENTRY:  DS = DOSDATA
 14003                                  ;
 14004                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 14005                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14006                                  ;         return address off the stack if the drive is invalid.
 14007                                  ;
 14008                                  ;-------------------------------------------------------------------------
 14009                                  
 14010                                  ioctl_rem_media:
 14011                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14012 000030CA E83A01                  	CALL	Check_If_Net
 14013 000030CD 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 14014                                  					;   certainly don't know how to do this
 14015                                  					;   call.
 14016 000030CF 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 14017 000030D5 74EB                    	JZ	short ioctl_bad_fun		; NO
 14018                                  
 14019                                  ;hkn; SS override for IOCALL
 14020 000030D7 36C606[2603]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD
 14021 000030DD B00D                    	MOV	AL,REMHL
 14022 000030DF 88DC                    	MOV	AH,BL			; Unit number
 14023 000030E1 36A3[2403]              	MOV	[SS:IOCALL_REQLEN],AX
 14024 000030E5 31C0                    	XOR	AX,AX
 14025 000030E7 36A3[2703]              	MOV	[SS:IOCALL_REQSTAT],AX
 14026 000030EB 06                      	PUSH	ES
 14027 000030EC 1F                      	POP	DS
 14028 000030ED 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14029 000030EF 16                      	PUSH	SS
 14030 000030F0 07                      	POP	ES
 14031                                  
 14032                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 14033 000030F1 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14034 000030F4 1E                      	push	ds
 14035 000030F5 56                      	push	si
 14036 000030F6 E8061E                  	call	DEVIOCALL2
 14037 000030F9 5E                      	pop	si
 14038 000030FA 1F                      	pop	ds
 14039                                  
 14040                                  ;hkn; SS override
 14041 000030FB 36A1[2703]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 14042 000030FF 250002                  	AND	AX,STBUI		; Mask to busy bit
 14043 00003102 B109                    	MOV	CL,9
 14044 00003104 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 14045 00003106 E9F4E5                  	jmp	SYS_RET_OK
 14046                                  
 14047                                  ;-------------------------------------------------------------------------
 14048                                  ;
 14049                                  ; IOCTL: AL = 9
 14050                                  ;
 14051                                  ; ENTRY: DS = DOSDATA
 14052                                  ;
 14053                                  ;-------------------------------------------------------------------------
 14054                                  
 14055                                  Ioctl_Drive_attr:
 14056                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14057 00003109 88D8                    	mov	al, bl
 14058 0000310B E86838                  	call	GETTHISDRV
 14059 0000310E 724B                    	jc	short ioctl_drv_err
 14060 00003110 E8C500                  	call	Get_Driver_BL
 14061                                  	; MSDOS 6.0
 14062 00003113 7246                    	JC	short ioctl_drv_err	; drive not valid
 14063                                  
 14064 00003115 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 14065                                  					; get device attribute word
 14066 00003119 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 14067                                  
 14068                                  ;hkn; SS override
 14069 0000311B 36C43E[3A05]            	LES	DI,[SS:THISCDS]
 14070 00003120 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14071 00003126 7403                    	JZ	short IOCTLShare
 14072                                  
 14073                                  	;or	dx,1000h ; msdos 3.3
 14074                                  
 14075                                  ;	Net devices don't return a device attribute word.
 14076                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 14077                                  
 14078 00003128 BA0010                  	MOV	DX,1000h ;  MSDOS 6.0
 14079                                  IOCTLShare:
 14080 0000312B 16                      	push	ss
 14081 0000312C 1F                      	pop	ds
 14082 0000312D BE[6003]                	MOV	SI,OPENBUF
 14083 00003130 80C341                  	ADD	BL,"A"
 14084 00003133 881C                    	MOV	[SI],BL
 14085 00003135 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 14086 0000313A B80003                  	MOV	AX,0300h
 14087 0000313D F8                      	CLC
 14088                                  	;INT	int_IBM
 14089 0000313E CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 14090                                  			; DS:SI -> ASCIZ disk device name (may be full path or only drive
 14091                                  			; specifier--must include the colon)
 14092                                  			; Return: CF clear if absolute disk access allowed
 14093 00003140 7304                    	JNC	short IOCTLLocal	; Not shared
 14094 00003142 81CA0002                	OR	DX,0200H		; Shared, bit 9
 14095                                  IOCTLLocal:
 14096 00003146 26F745430010            	TEST	word [ES:DI+curdir.flags],curdir_local
 14097 0000314C 7404                    	JZ	short ioctl_set_DX
 14098 0000314E 81CA0080                	OR	DX,8000h
 14099                                  ioctl_set_DX:
 14100 00003152 E8B6E4                  	call	Get_User_Stack
 14101 00003155 895406                  	MOV	[SI+user_env.user_DX],DX
 14102                                  	;jmp	SYS_RET_OK
 14103                                  	; 26/07/2019
 14104 00003158 E9A5E5                  	jmp	SYS_RET_OK_clc
 14105                                  
 14106                                  ioctl_drv_err:
 14107 0000315B B00F                    	mov	al, error_invalid_drive
 14108 0000315D E9A6E5                  	jmp	SYS_RET_ERR
 14109                                  
 14110                                  ;--------------------------------------------------------------------------
 14111                                  ; IOCTL: AL = A
 14112                                  ;
 14113                                  ; ENTRY: DS = DOSDATA
 14114                                  ;
 14115                                  ;--------------------------------------------------------------------------
 14116                                  
 14117                                  IOCTL_Handle_Redir:
 14118 00003160 E89E36                  	call	SFFromHandle		; ES:DI -> SFT
 14119 00003163 7303                    	JNC	short ioctl_got_sft	; have valid handle
 14120 00003165 E966FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 14121                                  
 14122                                  ioctl_got_sft:
 14123 00003168 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 14124 0000316C EBE4                    	JMP	short ioctl_set_DX	; pass dx to user and return
 14125                                  
 14126                                  ioctl_bad_funj:
 14127 0000316E E951FF                  	JMP	ioctl_bad_fun
 14128                                  
 14129                                  ;--------------------------------------------------------------------------
 14130                                  ;
 14131                                  ; IOCTL: AL= 4,5
 14132                                  ;
 14133                                  ; ENTRY: DS = DOSDATA
 14134                                  ;	 SI = user's DS
 14135                                  ;
 14136                                  ;
 14137                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 14138                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14139                                  ;         return address off the stack if the drive is invalid.
 14140                                  ;
 14141                                  ;-------------------------------------------------------------------------
 14142                                  
 14143                                  ioctl_get_dev:
 14144 00003171 E89300                  	CALL	Check_If_Net
 14145 00003174 75F8                    	JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 14146                                  					;   certainly don't know how to do this
 14147                                  					;   call.
 14148                                  ioctl_do_string:
 14149 00003176 26F745040040            	TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 14150 0000317C 74F0                    	JZ	short ioctl_bad_funj		; NO
 14151                                  					; assume IOCTL read
 14152 0000317E C606[2603]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL
 14153                                  
 14154 00003183 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 14155 00003185 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 14156                                  
 14157                                  					; it is an IOCTL write
 14158 00003187 C606[2603]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL
 14159                                  
 14160                                  ioctl_control_call:
 14161 0000318C B016                    	MOV	AL,DRDWRHL
 14162                                  ioctl_setup_pkt:
 14163 0000318E 88DC                    	MOV	AH,BL			; Unit number
 14164 00003190 A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14165 00003193 31C0                    	XOR	AX,AX
 14166 00003195 A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14167 00003198 A2[3103]                	MOV	[IOMED],AL
 14168 0000319B 890E[3603]              	MOV	[IOSCNT],CX
 14169 0000319F 8916[3203]              	MOV	[IOXAD],DX
 14170 000031A3 8936[3403]              	MOV	[IOXAD+2],SI
 14171 000031A7 06                      	PUSH	ES
 14172 000031A8 1F                      	POP	DS
 14173 000031A9 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14174 000031AB 16                      	PUSH	SS
 14175 000031AC 07                      	POP	ES
 14176                                  
 14177 000031AD BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14178                                  ioctl_do_IO:
 14179 000031B0 E84C1D                  	call	DEVIOCALL2
 14180                                  
 14181                                  ;hkn; SS override for IOCALL
 14182 000031B3 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 14183 000031BA 7507                    	JNZ	short ioctl_string_err
 14184                                  
 14185                                  ;hkn; SS override
 14186 000031BC 36A1[3603]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 14187 000031C0 E93AE5                  	jmp	SYS_RET_OK
 14188                                  
 14189                                  ioctl_string_err:
 14190 000031C3 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 14191                                  device_err:
 14192 000031C8 81E7FF00                	AND	DI,STECODE		; mask out irrelevant bits
 14193 000031CC 89F8                    	MOV	AX,DI
 14194 000031CE E84828                  	call	SET_I24_EXTENDED_ERROR
 14195                                  
 14196                                  ;hkn; use SS override
 14197                                  ;hkn;	mov	ax,[CS:EXTERR]
 14198 000031D1 36A1[D202]              	mov	ax,[SS:EXTERR]
 14199 000031D5 E92EE5                  	jmp	SYS_RET_ERR
 14200                                  
 14201                                  ;--------------------------------------------------------------------------
 14202                                  ; Proc name : Get_Driver_BL
 14203                                  ;
 14204                                  ;	DS is DOSDATA
 14205                                  ;	BL is drive number (0=default)
 14206                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 14207                                  ;	No regs modified
 14208                                  ;
 14209                                  ;---------------------------------------------------------------------------
 14210                                  
 14211                                  Get_Driver_BL:
 14212 000031D8 50                      	PUSH	AX
 14213 000031D9 88D8                    	MOV	AL,BL			; Drive
 14214 000031DB E89837                  	call	GETTHISDRV
 14215 000031DE 7225                    	jc	short ioctl_bad_drv
 14216 000031E0 30DB                    	XOR	BL,BL			; Unit zero on Net device
 14217 000031E2 C606[D102]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net
 14218 000031E7 C43E[3A05]              	LES	DI,[THISCDS]
 14219 000031EB 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14220 000031F1 26C47D45                	LES	DI,[ES:DI+curdir.devptr]; ES:DI -> Dpb or net dev
 14221 000031F5 750D                    	JNZ	short got_dev_ptr	; Is net
 14222 000031F7 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14223 000031FC 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 14224 00003200 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 14225                                  got_dev_ptr:
 14226 00003204 F8                      	CLC
 14227                                  ioctl_bad_drv:
 14228 00003205 58                      	POP	AX
 14229 00003206 C3                      	retn
 14230                                  
 14231                                  ;-------------------------------------------------------------------------
 14232                                  ; Proc Name : Check_If_Net:
 14233                                  ;
 14234                                  ;
 14235                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 14236                                  ; If no device is found, the return address is popped off the stack, and a
 14237                                  ; jump is made to ioctl_drv_err.
 14238                                  ;
 14239                                  ; On Entry:
 14240                                  ; Registers same as those for Get_Driver_BL
 14241                                  ;
 14242                                  ; On Exit:
 14243                                  ; ZERO flag	- set if not a net device
 14244                                  ;		- reset if net device
 14245                                  ; ES:DI -> the device
 14246                                  ;
 14247                                  ;
 14248                                  ; BUGBUG: This function assumes the following stack setup on entry
 14249                                  ;
 14250                                  ;	  SP+2 -> Error return address
 14251                                  ;	  SP   -> Normal return address
 14252                                  ;
 14253                                  ;-------------------------------------------------------------------------
 14254                                  
 14255                                  Check_If_Net:
 14256                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14257 00003207 E8CEFF                  	CALL	Get_Driver_BL
 14258 0000320A 720F                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 14259 0000320C 06                      	PUSH	ES
 14260 0000320D 57                      	PUSH	DI
 14261 0000320E C43E[3A05]              	LES	DI,[THISCDS]
 14262 00003212 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14263 00003218 5F                      	POP	DI
 14264 00003219 07                      	POP	ES
 14265 0000321A C3                      	retn
 14266                                  
 14267                                  ioctl_drv_err_pop:
 14268 0000321B 58                      	pop	ax			; pop off return address
 14269 0000321C E93CFF                  	jmp	ioctl_drv_err
 14270                                  
 14271                                  ioctl_bad_funj3:
 14272 0000321F E9A0FE                  	jmp	ioctl_bad_fun
 14273                                  
 14274                                  ioctl_string_errj:
 14275 00003222 EB9F                    	jmp	ioctl_string_err
 14276                                  
 14277                                  ;--------------------------------------------------------------------------
 14278                                  ;
 14279                                  ; IOCTL: AL = E, F
 14280                                  ;
 14281                                  ; ENTRY: DS = DOSDATA
 14282                                  ;
 14283                                  ;
 14284                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 14285                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14286                                  ;         return address off the stack if the drive is invalid.
 14287                                  ;
 14288                                  ;--------------------------------------------------------------------------
 14289                                  
 14290                                  ioctl_drive_owner:
 14291                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14292 00003224 E8E0FF                  	Call	Check_If_Net
 14293 00003227 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 14294                                  					;   certainly don't know how to do this
 14295                                  					;   call.
 14296                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 14297                                  	; 09/09/2018
 14298 00003229 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 14299 0000322E 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 14300 00003230 C606[2603]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 14301 00003235 3C0E                    	cmp	al,0Eh			; Get Owner ?
 14302 00003237 7405                    	jz	short GetOwner
 14303                                  SetOwner:
 14304 00003239 C606[2603]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN
 14305                                  GetOwner:
 14306 0000323E B00D                    	MOV	AL,OWNHL
 14307 00003240 88DC                    	MOV	AH,BL			; Unit number
 14308 00003242 A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14309 00003245 31C0                    	XOR	AX,AX
 14310 00003247 A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14311 0000324A 06                      	PUSH	ES
 14312 0000324B 1F                      	POP	DS
 14313 0000324C 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14314 0000324E 16                      	PUSH	SS
 14315 0000324F 07                      	POP	ES
 14316 00003250 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14317 00003253 1E                      	push	ds
 14318 00003254 56                      	push	si
 14319 00003255 E8A71C                  	call	DEVIOCALL2
 14320 00003258 5E                      	pop	si
 14321 00003259 1F                      	pop	ds
 14322                                  ;hkn; SS override
 14323 0000325A 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR
 14324 00003261 75BF                    	jnz	short ioctl_string_errj
 14325 00003263 36A0[2503]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 14326                                  					; owner returned is 1-based.
 14327 00003267 E993E4                  	jmp	SYS_RET_OK
 14328                                  
 14329                                  ;============================================================================
 14330                                  ; DELETE.ASM, MSDOS 6.0, 1991
 14331                                  ;============================================================================
 14332                                  ; 07/08/2018 - Retro DOS v3.0
 14333                                  
 14334                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 14335                                  ;	NAME	DOS_DELETE
 14336                                  
 14337                                  ;
 14338                                  ;	Microsoft Confidential
 14339                                  ;	Copyright (C) Microsoft Corporation 1991
 14340                                  ;	All Rights Reserved.
 14341                                  ;
 14342                                  
 14343                                  ;**	DELETE.ASM - Low level routine for deleting files
 14344                                  ;
 14345                                  ;		DOS_DELETE
 14346                                  ;		REN_DEL_Check
 14347                                  ;		FastOpen_Delete	       ; DOS 3.3
 14348                                  ;		FastOpen_Update	       ; DOS 3.3
 14349                                  
 14350                                  
 14351                                  ;   Revision history:
 14352                                  ;
 14353                                  ;   A000  version 4.00	Jan. 1988
 14354                                  ;   A001  Fastopen Rename fix	April 1989
 14355                                  
 14356                                  
 14357                                  ;Installed = TRUE
 14358                                  
 14359                                  ;	i_need	NoSetDir,BYTE
 14360                                  ;	i_need	Creating,BYTE
 14361                                  ;	i_need	DELALL,BYTE
 14362                                  ;	i_need	THISDPB,DWORD
 14363                                  ;	i_need	THISSFT,DWORD
 14364                                  ;	i_need	THISCDS,DWORD
 14365                                  ;	i_need	CURBUF,DWORD
 14366                                  ;	i_need	ATTRIB,BYTE
 14367                                  ;	i_need	SATTRIB,BYTE
 14368                                  ;	i_need	WFP_START,WORD
 14369                                  ;	i_need	REN_WFP,WORD			 ;BN001
 14370                                  ;	i_need	NAME1,BYTE			 ;BN001
 14371                                  ;	i_need	FoundDel,BYTE
 14372                                  ;	i_need	AUXSTACK,BYTE
 14373                                  ;	i_need	VOLCHNG_FLAG,BYTE
 14374                                  ;	i_need	JShare,DWORD
 14375                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 14376                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 14377                                  ;
 14378                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 14379                                  ;
 14380                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 14381                                  ;	i_need	DMAADD,DWORD
 14382                                  ;	i_need	RENAMEDMA,BYTE
 14383                                  
 14384                                  ;---------------------------------------------------------------------------
 14385                                  ;
 14386                                  ; Procedure Name : DOS_DELETE
 14387                                  ;
 14388                                  ; Inputs:
 14389                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 14390                                  ;		terminated)
 14391                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 14392                                  ;		( = -1 if current dir not involved, else
 14393                                  ;		 Points to first char after last "/" of current dir part)
 14394                                  ;	[THISCDS] Points to CDS being used
 14395                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14396                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14397                                  ; Function:
 14398                                  ;	Delete the specified file(s)
 14399                                  ; Outputs:
 14400                                  ;	CARRY CLEAR
 14401                                  ;		OK
 14402                                  ;	CARRY SET
 14403                                  ;	    AX is error code
 14404                                  ;		error_file_not_found
 14405                                  ;			Last element of path not found
 14406                                  ;		error_path_not_found
 14407                                  ;			Bad path (not in curr dir part if present)
 14408                                  ;		error_bad_curr_dir
 14409                                  ;			Bad path in current directory part of path
 14410                                  ;		error_access_denied
 14411                                  ;			Attempt to delete device or directory
 14412                                  ;		***error_sharing_violation***
 14413                                  ;			Deny both access required, generates an INT 24.
 14414                                  ;			This error is NOT returned. The INT 24H is generated,
 14415                                  ;			  and the file is ignored (not deleted). Delete will
 14416                                  ;			  simply continue on looking for more files.
 14417                                  ;			  Carry will NOT be set in this case.
 14418                                  ; DS preserved, others destroyed
 14419                                  ;
 14420                                  ;---------------------------------------------------------------------------
 14421                                  
 14422                                  FILEFOUND   equ 01h
 14423                                  FILEDELETED equ 10h
 14424                                  
 14425                                  DOS_DELETE:
 14426                                  
 14427                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 14428                                  ;hkn; appropriately at this point.
 14429                                  
 14430 0000326A E85AED                  	call	TestNet
 14431 0000326D 7306                    	JNC	short LOCAL_DELETE
 14432                                  
 14433                                  ;IF NOT Installed
 14434                                  ;	transfer NET_DELETE
 14435                                  ;ELSE
 14436                                  	;MOV	AX,(MultNET SHL 8) | 19
 14437                                  	;INT	2FH
 14438                                  	;return
 14439                                  
 14440 0000326F B81311                  	mov	ax,1113h
 14441 00003272 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 14442                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 14443                                  			;		fully-qualified filename in DOS CS
 14444                                  			; SDA CDS pointer -> current directory structure for drive with file
 14445                                  			; Return: CF set on error
 14446 00003274 C3                      	retn
 14447                                  
 14448                                  ;ENDIF
 14449                                  
 14450                                  LOCAL_DELETE:
 14451 00003275 C606[0A05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 14452 0000327A E8E8ED                  	call	EcritDisk
 14453 0000327D C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 14454 00003283 8B36[4A05]              	MOV	SI,[WFP_START]
 14455                                  SKPNUL:
 14456 00003287 AC                      	LODSB
 14457 00003288 08C0                    	OR	AL,AL
 14458 0000328A 75FB                    	JNZ	short SKPNUL		; go to end
 14459 0000328C 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 14460 0000328F 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 14461 00003293 7506                    	JNZ	short TEST_QUEST
 14462 00003295 807C022A                	CMP	BYTE [SI+2],"*"
 14463 00003299 741F                    	JZ	short CHECK_ATTS
 14464                                  TEST_QUEST:
 14465 0000329B 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 14466 0000329E 87FE                    	XCHG	DI,SI
 14467                                  
 14468 000032A0 16                      	push	ss
 14469                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 14470 000032A1 07                      	pop	es ; 17/05/2019 (BugFix)
 14471                                  
 14472 000032A2 B83F3F                  	MOV	AX,"??"
 14473 000032A5 B90400                  	MOV	CX,4		; four sets of "??"
 14474 000032A8 F3AF                    	REPE	SCASW
 14475 000032AA 751C                    	JNZ	short NOT_ALL
 14476 000032AC 87FE                    	XCHG	DI,SI
 14477 000032AE AD                      	LODSW
 14478 000032AF 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 14479 000032B2 7514                    	JNZ	short NOT_ALL
 14480 000032B4 AD                      	LODSW
 14481 000032B5 3D3F3F                  	CMP	AX,"??"
 14482 000032B8 750E                    	JNZ	short NOT_ALL
 14483                                  CHECK_ATTS:
 14484 000032BA A0[0805]                	MOV	AL,[SATTRIB]
 14485 000032BD 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14486                                  					; Look only at hidden bits
 14487 000032BF 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14488                                  					; All must be set
 14489 000032C1 7505                    	JNZ	short NOT_ALL
 14490                                  
 14491                                  ; NOTE WARNING DANGER-----
 14492                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 14493                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 14494                                  
 14495 000032C3 C606[1905]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 14496                                  NOT_ALL:
 14497 000032C8 C606[F802]01            	MOV	byte [NoSetDir],1
 14498 000032CD E86C15                  	call	GetPathNoSet
 14499 000032D0 7313                    	JNC	short Del_found
 14500 000032D2 750C                    	JNZ	short _bad_path
 14501 000032D4 08C9                    	OR	CL,CL
 14502 000032D6 7408                    	JZ	short _bad_path
 14503                                  No_file:
 14504 000032D8 B80200                  	MOV	AX,error_file_not_found
 14505                                  ErrorReturn:
 14506 000032DB F9                      	STC
 14507 000032DC E88EED                  	call	LcritDisk
 14508 000032DF C3                      	retn
 14509                                  
 14510                                  _bad_path:
 14511 000032E0 B80300                  	MOV	AX,error_path_not_found
 14512 000032E3 EBF6                    	JMP	short ErrorReturn
 14513                                  
 14514                                  Del_found:
 14515 000032E5 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 14516 000032E7 803E[1905]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 14517 000032EC 7405                    	JZ	short NOT_DIR
 14518                                  Del_access_err:
 14519 000032EE B80500                  	MOV	AX,error_access_denied
 14520 000032F1 EBE8                    	JMP	short ErrorReturn
 14521                                  
 14522                                  NOT_DIR:
 14523 000032F3 08E4                    	OR	AH,AH			; Check if device name
 14524 000032F5 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 14525                                  
 14526                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 14527                                  
 14528                                  DELFILE:
 14529 000032F7 800E[0A05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 14530                                  
 14531                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 14532                                  ; DOS issue a build BPB call the next time this drive is accessed.
 14533                                  
 14534 000032FC 1E                      	PUSH	DS
 14535 000032FD 8A26[1905]              	MOV	AH,[DELALL]
 14536 00003301 C53E[7405]              	LDS	DI,[CURBUF]
 14537                                  	
 14538                                  ;hkn; SS override
 14539 00003305 36F606[0605]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 14540 0000330B 7509                    	JNZ	short DoDelete		; yes
 14541                                  
 14542 0000330D F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 14543 00003311 7403                    	JZ	short DoDelete		; not read only
 14544                                  
 14545 00003313 1F                      	POP	DS
 14546 00003314 EB29                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 14547                                  
 14548                                  DoDelete:
 14549 00003316 E87700                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 14550 00003319 7303                    	JNC	short DEL_SHARE_OK
 14551 0000331B 1F                      	POP	DS
 14552 0000331C EB21                    	JMP	SHORT DELNXT		; Skip it
 14553                                  
 14554                                  DEL_SHARE_OK:
 14555                                  	; MSDOS 6.0
 14556                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 14557                                  	;				;LB. if already dirty		  ;AN000;
 14558                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 14559                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 14560 0000331E 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 14561                                  ;yesdirty:
 14562 00003322 8827                    	MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 14563 00003324 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 14564 00003326 1F                      	POP	DS
 14565 00003327 800E[0A05]10            	OR	byte [FOUNDDEL],FILEDELETED ; Deleted file
 14566                                  
 14567 0000332C 83FB02                  	CMP	BX,2
 14568 0000332F 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 14569 00003331 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 14570 00003335 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 14571                                  
 14572 00003337 E8B421                  	call	RELEASE 		; Free file data
 14573 0000333A 724E                    	JC	short No_fileJ
 14574                                  
 14575                                  ; DOS 3.3  FastOpen
 14576                                  
 14577 0000333C E8BA00                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 14578                                  
 14579                                  ; DOS 3.3  FastOpen
 14580                                  
 14581                                  DELNXT:
 14582 0000333F C42E[2405]              	LES	BP,[THISDPB]		; Possible to get here without this set
 14583 00003343 E86A14                  	call	GETENTRY		; Registers need to be reset
 14584 00003346 7242                    	JC	short No_fileJ
 14585 00003348 E8AC13                  	call	NEXTENT
 14586 0000334B 73AA                    	JNC	short DELFILE
 14587 0000334D C42E[2405]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 14588                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 14589 00003351 268A4600                	MOV	AL,[ES:BP]
 14590 00003355 E8DA2B                  	call	FLUSHBUF
 14591 00003358 7230                    	JC	short No_fileJ
 14592                                  ;
 14593                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 14594                                  ;
 14595                                  ;   not found not deleted		file not found
 14596                                  ;   not found	  deleted		*** impossible ***
 14597                                  ;	found not deleted		access denied (read-only)
 14598                                  ;	found	  deleted		no error
 14599                                  ;
 14600 0000335A F606[0A05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 14601 0000335F 7422                    	JZ	short DelError		; no, figure out what's wrong.
 14602                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 14603                                  ; and to force the DOS to issue a media check.
 14604 00003361 F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 14605 00003366 7417                    	jz	short No_Set_Flag
 14606 00003368 50                      	PUSH	AX
 14607 00003369 06                      	PUSH	ES
 14608 0000336A 57                      	PUSH	DI
 14609 0000336B C43E[3A05]              	LES	DI,[THISCDS]
 14610 0000336F 268A25                  	MOV	AH,[ES:DI]		; Get drive
 14611 00003372 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 14612 00003375 8826[070A]              	mov	[VOLCHNG_FLAG],AH
 14613                                  	
 14614                                  	; MSDOS 6.0
 14615                                  	;XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 14616                                  	;call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 14617                                  	 
 14618 00003379 E84428                  	call	FATREAD_CDS		; force media check
 14619 0000337C 5F                      	POP	DI
 14620 0000337D 07                      	POP	ES
 14621 0000337E 58                      	POP	AX
 14622                                  No_Set_Flag:
 14623 0000337F E8EBEC                  	call	LcritDisk		; carry is clear
 14624 00003382 C3                      	retn
 14625                                  DelError:
 14626 00003383 F606[0A05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 14627 00003388 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 14628                                  No_fileJ:
 14629 0000338A E94BFF                  	JMP	No_file ; 10/08/2018 		; Nope
 14630                                  Del_access_errJ:
 14631 0000338D E95EFF                  	JMP	Del_access_err ; 10/08/2018
 14632                                  
 14633                                  ; 08/08/2018 - Retro DOS v3.0
 14634                                  
 14635                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 14636                                  ;---------------------------------------------------------------------------
 14637                                  ; Procedure Name : REN_DEL_Check
 14638                                  ;
 14639                                  ; Inputs:
 14640                                  ;	[THISDPB] set
 14641                                  ;	[CURBUF+2]:BX points to entry
 14642                                  ;	[CURBUF+2]:SI points to firclus field of entry
 14643                                  ;	[WFP_Start] points to name
 14644                                  ; Function:
 14645                                  ;	Check for Exclusive access on given file.
 14646                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 14647                                  ; Outputs:
 14648                                  ;	ES:BP = [THISDPB]
 14649                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 14650                                  ;		last element will be loaded from the directory entry.  This is
 14651                                  ;		so the name given to the sharer doesn't have any meta chars in
 14652                                  ;		it.
 14653                                  ;	Carry set if sharing violation, INT 24H generated
 14654                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 14655                                  ;		This is because input AX is preserved.
 14656                                  ;		Caller must set the error if needed.
 14657                                  ;	Carry clear
 14658                                  ;		OK
 14659                                  ; AX,DS,BX,SI,DI preserved
 14660                                  ;---------------------------------------------------------------------------
 14661                                  
 14662                                  REN_DEL_Check:
 14663                                  
 14664 00003390 1E                      	PUSH	DS
 14665 00003391 57                      	PUSH	DI
 14666 00003392 50                      	PUSH	AX
 14667 00003393 53                      	PUSH	BX
 14668 00003394 56                      	PUSH	SI		; Save CURBUF pointers
 14669                                  	
 14670 00003395 16                      	push	ss
 14671 00003396 07                      	pop	es
 14672                                  
 14673                                  ;hkn; context ES will assume ES to DOSDATA
 14674                                  ;hkn; ASSUME	ES:DOSGROUP
 14675                                  
 14676                                  ;hkn; SS override
 14677 00003397 368B3E[4A05]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 14678 0000339C 89DE                    	MOV	SI,BX
 14679                                  
 14680                                  ;hkn; SS override
 14681 0000339E 368E1E[7605]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 14682 000033A3 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 14683 000033A5 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 14684 000033A8 E8B8EB                  	call	StrLen		; CX is length of ES:DI including NUL
 14685 000033AB 49                      	DEC	CX		; Don't include nul in count
 14686 000033AC 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 14687 000033AE E88838                  	call	SkipBack	; Back up one element
 14688 000033B1 47                      	INC	DI		; Point to start of last element
 14689                                  
 14690                                  ;hkn; SS override
 14691                                  	; MSDOS 6.0
 14692                                  	;MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 14693                                  	;
 14694 000033B2 E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 14695 000033B5 5E                      	POP	SI		; Get back entry pointers
 14696 000033B6 5B                      	POP	BX
 14697 000033B7 53                      	PUSH	BX
 14698 000033B8 56                      	PUSH	SI		; Back on stack
 14699                                  	
 14700 000033B9 16                      	push	ss
 14701 000033BA 1F                      	pop	ds
 14702                                  
 14703                                  ;hkn; context DS will assume ES to DOSDATA
 14704                                  ;hkn; ASSUME	DS:DOSGROUP
 14705                                  
 14706                                  ;
 14707                                  ; Close the file if possible by us.
 14708                                  ;
 14709                                  ;if installed
 14710 000033BB FF1E[9000]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 14711                                  ;else
 14712                                  ;	Call	ShCloseFile
 14713                                  ;endif
 14714 000033BF 8C1E[3805]              	MOV	[THISSFT+2],DS
 14715                                  
 14716                                  ;hkn; AUXSTACK is in DOSDATA
 14717 000033C3 C706[3605][D106]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size
 14718                                  				; Scratch space
 14719 000033C9 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 14720 000033CB E8F71D                  	call	DOOPEN		; Fill in SFT for share check
 14721 000033CE C43E[3605]              	LES	DI,[THISSFT]
 14722 000033D2 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH
 14723                                  				; requires exclusive access
 14724                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 14725 000033D8 26C7050100              	mov	word [ES:DI],1
 14726 000033DD E87A3F                  	call	ShareEnter
 14727 000033E0 720D                    	jc	short CheckDone
 14728 000033E2 C43E[3605]              	LES	DI,[THISSFT]
 14729                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 14730 000033E6 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 14731                                  	
 14732 000033EB E8673F                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 14733 000033EE F8                      	CLC
 14734                                  CheckDone:
 14735 000033EF C42E[2405]              	LES	BP,[THISDPB]
 14736 000033F3 5E                      	POP	SI
 14737 000033F4 5B                      	POP	BX
 14738 000033F5 58                      	POP	AX
 14739 000033F6 5F                      	POP	DI
 14740 000033F7 1F                      	POP	DS
 14741 000033F8 C3                      	retn
 14742                                  
 14743                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 14744                                  ;---------------------------------------------------------------------------
 14745                                  ; Procedure Name : FastOpen_Delete
 14746                                  ; Inputs:
 14747                                  ;	None
 14748                                  ; Function:
 14749                                  ;	Call FastOpen to delete the dir info.
 14750                                  ; Outputs:
 14751                                  ;	None
 14752                                  ;---------------------------------------------------------------------------
 14753                                  
 14754                                  FastOpen_Delete:
 14755 000033F9 9C                      	PUSHF			; save flag
 14756 000033FA 56                      	PUSH	SI		; save registers
 14757 000033FB 53                      	PUSH	BX
 14758 000033FC 50                      	PUSH	AX
 14759                                  ;hkn; SS override
 14760 000033FD 8B36[4A05]              	MOV	SI,[WFP_START]	; ds:si points to path name
 14761 00003401 B003                    	MOV	AL,FONC_delete	; al = 3
 14762                                  fastinvoke:
 14763                                  ;hkn; FastTable is in DOSDATA
 14764 00003403 BB[450F]                	MOV	BX,FastTable+2
 14765 00003406 FF1F                    	CALL	far [BX]	; call fastopen
 14766 00003408 58                      	POP	AX		; restore registers
 14767 00003409 5B                      	POP	BX
 14768 0000340A 5E                      	POP	SI
 14769 0000340B 9D                      	POPF			; restore flag
 14770 0000340C C3                      	retn
 14771                                  
 14772                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 14773                                  ;---------------------------------------------------------------------------
 14774                                  ; Procedure Name : FastOpen_Update
 14775                                  ;
 14776                                  ; Inputs:
 14777                                  ;	DL     drive number (A=0,B=1,,,)
 14778                                  ;	CX     first cluster #
 14779                                  ;	AH     0 updates dir entry
 14780                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 14781                                  ;	ES:DI  directory entry
 14782                                  ; Function:
 14783                                  ;	Call FastOpen to update the dir info.
 14784                                  ; Outputs:
 14785                                  ;	None
 14786                                  ;---------------------------------------------------------------------------
 14787                                  
 14788                                  FastOpen_Update:
 14789 0000340D 9C                      	PUSHF			; save flag
 14790 0000340E 56                      	PUSH	SI
 14791 0000340F 53                      	PUSH	BX		; save regs
 14792 00003410 50                      	PUSH	AX
 14793 00003411 B004                    	MOV	AL,FONC_update	; al = 4
 14794 00003413 EBEE                    	JMP	short fastinvoke
 14795                                  
 14796                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 14797                                  ;---------------------------------------------------------------------------
 14798                                  ; PROCEDURE Name : FastOpen_Rename
 14799                                  ;
 14800                                  ; Inputs:
 14801                                  ;	 REN_WFP   = Path Name
 14802                                  ;	 NAME1	   = New Name
 14803                                  ; Function:
 14804                                  ;	Call FastOpen to rename the dir entry in the cache
 14805                                  ; Outputs:
 14806                                  ;	None
 14807                                  ;---------------------------------------------------------------------------
 14808                                  
 14809                                  FastOpen_Rename:
 14810                                  	; 08/08/2018 - Retro DOS v3.0
 14811                                  	; MSDOS 6.0
 14812                                  	;PUSHF			;AN001 save flag
 14813                                  	;PUSH	SI		;AN001 save registers
 14814                                  	;PUSH	DI		;AN001
 14815                                  	;PUSH	BX		;AN001
 14816                                  	;PUSH	AX		;AN001
 14817                                  	;
 14818                                  ;hkn; SS override
 14819                                  	;;MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 14820                                  	;
 14821                                  	; ? - 08/08/2018 - Retro DOS v3.0
 14822                                  	;push	ss
 14823                                  	;pop	ds
 14824                                  	;mov	si,[REN_WFP]
 14825                                  	;
 14826                                  ;hkn; NAME1 is in DOSDATA
 14827                                  	;MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 14828                                  	;MOV	AL,FONC_Rename	;;AN001  al = 6
 14829                                  	;
 14830                                  ;hkn; FastTable is in DOSDATA
 14831                                  	;MOV	BX,FastTable+2
 14832                                  	;CALL	far [BX]	;;AN001  call fastopen
 14833                                  	;
 14834                                  	;POP	AX		; restore registers  ;AN001
 14835                                  	;POP	BX				     ;AN001
 14836                                  	;POP	DI				     ;AN001
 14837                                  	;POP	SI				     ;AN001
 14838                                  	;POPF			; restore flag	     ;AN001
 14839                                  	;retn					     ;AN001
 14840                                  
 14841                                  	; MSDOS 6.0
 14842                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 14843                                  Fast_Dispatch:
 14844                                  ;hkn; FastTable is in DOSDATA
 14845                                  	;MOV	SI,FastTable+2	; index to the	     ;AN000;
 14846                                  ;hkn; use SS override
 14847                                  	;CALL	far [SS:SI]	; RMFD call fastopen
 14848                                  	;retn
 14849                                  
 14850                                  ;============================================================================
 14851                                  ; RENAME.ASM, MSDOS 6.0, 1991
 14852                                  ;============================================================================
 14853                                  ; 08/08/2018 - Retro DOS v3.0
 14854                                  
 14855                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 14856                                  ;	NAME	DOS_RENAME
 14857                                  
 14858                                  ;**	Low level routine for renaming files
 14859                                  ;
 14860                                  ;	DOS_RENAME
 14861                                  ;
 14862                                  ;	Modification history:
 14863                                  ;
 14864                                  ;	    Created: ARR 30 March 1983
 14865                                  
 14866                                  ;----------------------------------------------------------------------------
 14867                                  ;
 14868                                  ; Procedure Name : DOS_RENAME
 14869                                  ;
 14870                                  ; Inputs:
 14871                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 14872                                  ;		chars, NUL terminated)
 14873                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 14874                                  ;		( = -1 if current dir not involved, else
 14875                                  ;		 Points to first char after last "/" of current dir part)
 14876                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 14877                                  ;		chars, NUL terminated)
 14878                                  ;	[THISCDS] Points to CDS being used
 14879                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14880                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14881                                  ; Function:
 14882                                  ;	Rename the specified file(s)
 14883                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 14884                                  ; Outputs:
 14885                                  ;	CARRY CLEAR
 14886                                  ;	    OK
 14887                                  ;	CARRY SET
 14888                                  ;	    AX is error code
 14889                                  ;		error_file_not_found
 14890                                  ;			No match for source, or dest path invalid
 14891                                  ;		error_not_same_device
 14892                                  ;			Source and dest are on different devices
 14893                                  ;		error_access_denied
 14894                                  ;			Directory specified (not simple rename),
 14895                                  ;			Device name given, Destination exists.
 14896                                  ;			NOTE: In third case some renames may have
 14897                                  ;			 been done if metas.
 14898                                  ;		error_path_not_found
 14899                                  ;			Bad path (not in curr dir part if present)
 14900                                  ;			SOURCE ONLY
 14901                                  ;		error_bad_curr_dir
 14902                                  ;			Bad path in current directory part of path
 14903                                  ;			SOURCE ONLY
 14904                                  ;		error_sharing_violation
 14905                                  ;			Deny both access required, generates an INT 24.
 14906                                  ; DS preserved, others destroyed
 14907                                  ;
 14908                                  ;----------------------------------------------------------------------------
 14909                                  
 14910                                  DOS_RENAME:
 14911                                  
 14912                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 14913                                  ;hkn; at this point to DOSDATA.
 14914                                  
 14915 00003415 E8AFEB                  	call	TestNet
 14916 00003418 7306                    	JNC	short LOCAL_RENAME
 14917                                  
 14918                                  ;IF NOT Installed
 14919                                  ;	transfer NET_RENAME
 14920                                  ;ELSE
 14921                                  	;MOV	AX,(MultNET SHL 8) OR 17
 14922                                  	;INT	2FH
 14923                                  	;return
 14924                                  
 14925 0000341A B81111                  	mov     ax, 1111h
 14926 0000341D CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 14927                                  			; SS = DS = DOS CS, 
 14928                                  			; SDA first filename pointer = offset of fully-qualified old name
 14929                                  			; SDA CDS pointer -> current directory
 14930                                  			; Return: CF set on error
 14931 0000341F C3                      	retn
 14932                                  ;ENDIF
 14933                                  
 14934                                  LOCAL_RENAME:
 14935 00003420 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14936 00003425 8B36[4A05]              	MOV	SI,[WFP_START]
 14937 00003429 8B3E[4C05]              	MOV	DI,[REN_WFP]
 14938 0000342D 8A04                    	MOV	AL,[SI]
 14939 0000342F 8A25                    	MOV	AH,[DI]
 14940 00003431 0D2020                  	OR	AX,2020H		; Lower case
 14941 00003434 38E0                    	CMP	AL,AH
 14942 00003436 7405                    	JZ	short SAMEDRV
 14943 00003438 B81100                  	MOV	AX,error_not_same_device
 14944 0000343B F9                      	STC
 14945 0000343C C3                      	retn
 14946                                  
 14947                                  SAMEDRV:
 14948 0000343D FF36[DC02]              	PUSH	WORD [DMAADD+2]
 14949 00003441 FF36[DA02]              	PUSH	WORD [DMAADD]
 14950 00003445 8C1E[DC02]              	MOV	[DMAADD+2],DS
 14951                                  
 14952                                  ;hkn; RENAMEDMA is in DOSDATA
 14953 00003449 C706[DA02][8605]        	MOV	WORD [DMAADD],RENAMEDMA
 14954 0000344F C606[0B05]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 14955 00003454 E80EEC                  	call	EcritDisk
 14956 00003457 E8B804                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 14957                                  					;    points to entry
 14958 0000345A 7315                    	JNC	short Check_Dev
 14959 0000345C 83F812                  	CMP	AX,error_no_more_files
 14960 0000345F 7503                    	JNZ	short GOTERR
 14961 00003461 B80200                  	MOV	AX,error_file_not_found
 14962                                  GOTERR:
 14963 00003464 F9                      	STC
 14964                                  RENAME_POP:
 14965 00003465 8F06[DA02]              	POP	WORD [DMAADD]
 14966 00003469 8F06[DC02]              	POP	WORD [DMAADD+2]
 14967 0000346D E8FDEB                  	call	LcritDisk
 14968 00003470 C3                      	retn
 14969                                  
 14970                                  Check_Dev:
 14971 00003471 B80500                  	MOV	AX,error_access_denied	; Assume error
 14972                                  	;
 14973                                  	; MSDOS 6.0
 14974                                  	;PUSH	DS			      ;PTM.			    ;AN000;
 14975                                  	;LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 14976                                  	;!?;ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 14977                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory  ;PTM.	    ;AN000;
 14978                                  	;JZ	short notdir		      ;PTM.			    ;AN000;
 14979                                  	;MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 14980                                  	;call	Check_Pathlen2		      ;PTM.   length < 67	    ;AN000;
 14981                                  ;notdir:
 14982                                  	;POP	DS			      ;PTM.			    ;AN000;
 14983                                  	;JA	short GOTERR		      ;PTM.			    ;AN000;
 14984                                  	;
 14985                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14986 00003474 803E[0B05]00            	CMP	byte [FOUND_DEV],0
 14987 00003479 75E9                    	JNZ	short GOTERR
 14988                                  ; At this point a source has been found. There is search continuation info (a
 14989                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 14990                                  ; directory entry found.
 14991                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 14992                                  ; throughout the RENAME since it is known at this point that the source and
 14993                                  ; destination are both on the same device.
 14994                                  ; [SATTRIB] is also set.
 14995 0000347B 89DE                    	MOV	SI,BX
 14996 0000347D 83C61A                  	ADD	SI,dir_entry.dir_first
 14997 00003480 E80DFF                  	call	REN_DEL_Check
 14998 00003483 7305                    	JNC	short REN_OK1
 14999 00003485 B82000                  	MOV	AX,error_sharing_violation
 15000 00003488 EBDB                    	JMP	short RENAME_POP
 15001                                  
 15002                                  ;------------------------------------------------------------------------------
 15003                                  ; Check if the source is a file or directory. If file, delete the entry
 15004                                  ; from the Fastopen cache. If directory, rename it later
 15005                                  ;------------------------------------------------------------------------------
 15006                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 15007                                  	; MSDOS 6.0
 15008                                  	;PUSH	SI
 15009                                  	;LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 15010                                  	;!?;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		   ;AN000;
 15011                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.   ;AN000;
 15012                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			   ;AN000;
 15013                                  	;POP	SI			;BN00X
 15014                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 15015                                  	;
 15016                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 15017                                  	;POP	SI
 15018                                  	;
 15019                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 15020 0000348A E86CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 15021                                  
 15022                                  ;SWAP_SOURCE:
 15023                                  	; MSDOS 3.3
 15024                                  	;MOV	SI,[REN_WFP]
 15025                                  	;MOV	[WFP_START],SI
 15026                                  	; MSDOS 6.0
 15027 0000348D A1[4A05]                	MOV	AX,[WFP_START]		; Swap source and destination
 15028 00003490 8B36[4C05]              	MOV	SI,[REN_WFP]		; Swap source and destination
 15029 00003494 8936[4A05]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 15030 00003498 A3[4C05]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 15031                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15032 0000349B C706[4E05]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 15033 000034A1 C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 15034                                  					; A rename is like a CREATE_NEW as far
 15035                                  					; as the destination is concerned.
 15036 000034A7 E89213                  	call	GetPathNoSet
 15037                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 15038                                  ;   since no files match the destination name. If it fails for any other
 15039                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 15040                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 15041                                  ;   if the rename should fail because we haven't built an explicit name by
 15042                                  ;   substituting for the meta chars in it. In this case the destination file
 15043                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 15044                                  ;   in the directory entry part.
 15045 000034AA 7223                    	JC	short NODEST
 15046                                  	;; MSDOS 6.0
 15047                                  	;; JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 15048                                  	; !! MSDOS 3.3 !!
 15049 000034AC 7404                    	JZ	short BAD_ACC ; !!	; Dest string is a directory
 15050                                  	;
 15051 000034AE 08E4                    	OR	AH,AH			; Device?
 15052 000034B0 7930                    	JNS	short SAVEDEST		; No, continue
 15053                                  BAD_ACC:
 15054 000034B2 B80500                  	MOV	AX,error_access_denied
 15055 000034B5 F9                      	STC
 15056                                  RENAME_CLEAN:
 15057 000034B6 9C                      	PUSHF				; Save carry state
 15058 000034B7 50                      	PUSH	AX			; and error code (if carry set)
 15059 000034B8 A0[1105]                	MOV	AL,[THISDRV]
 15060 000034BB E8742A                  	call	FLUSHBUF
 15061 000034BE 58                      	POP	AX
 15062 000034BF 803E[F602]00            	CMP	byte [FAILERR],0
 15063 000034C4 7503                    	JNZ	short BAD_ERR		; User FAILed to I 24
 15064 000034C6 9D                      	POPF
 15065 000034C7 EB9C                    	JMP	short RENAME_POP
 15066                                  
 15067                                  BAD_ERR:
 15068 000034C9 58                      	POP	AX			; Saved flags
 15069 000034CA B80300                  	MOV	AX,error_path_not_found
 15070 000034CD EB95                    	JMP	short GOTERR
 15071                                  
 15072                                  NODEST:
 15073 000034CF 750B                    	JNZ	short BAD_PATH
 15074 000034D1 803E[F602]00            	CMP	byte [FAILERR],0
 15075 000034D6 7504                    	JNZ	short BAD_PATH	; Search for dest failed because user FAILed on
 15076                                  				;	I 24
 15077 000034D8 08C9                    	OR	CL,CL
 15078 000034DA 7506                    	JNZ	short SAVEDEST
 15079                                  BAD_PATH:
 15080 000034DC B80300                  	MOV	AX,error_path_not_found
 15081 000034DF F9                      	STC
 15082 000034E0 EB83                    	JMP	short RENAME_POP
 15083                                  
 15084                                  SAVEDEST:
 15085 000034E2 16                      	push	ss
 15086 000034E3 07                      	pop	es
 15087                                  
 15088                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 15089 000034E4 BF[F204]                	MOV	DI,NAME2
 15090 000034E7 BE[E604]                	MOV	SI,NAME1
 15091                                  
 15092 000034EA B90B00                  	MOV	CX,11
 15093 000034ED F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 15094 000034EF A1[5805]                	MOV	AX,[DIRSTART]
 15095 000034F2 A3[FF04]                	MOV	[DESTSTART],AX
 15096                                  BUILDDEST:
 15097 000034F5 16                      	push	ss
 15098 000034F6 07                      	pop	es			; needed due to JMP BUILDDEST below
 15099                                  
 15100                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 15101 000034F7 BB[9B05]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 15102 000034FA BF[E604]                	MOV	DI,NAME1		; Real dest name goes here
 15103 000034FD BE[F204]                	MOV	SI,NAME2		; Raw dest
 15104                                  
 15105 00003500 B90B00                  	MOV	CX,11
 15106                                  	
 15107                                  	; MSDOS 6.0
 15108                                  	;CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 15109                                  
 15110                                  	; MSDOS 3.3
 15111                                  
 15112                                  ; 08/08/2018 - Retro DOS v3.0
 15113                                  ; MSDOS 6.0 
 15114                                  ;---------------------------------------------------------------------------
 15115                                  ;Procedure: NEW_RENAME
 15116                                  ;
 15117                                  ;Input: DS:SI -> raw string with ?
 15118                                  ;	ES:DI -> destination string
 15119                                  ;	DS:BX -> source string
 15120                                  ;Function: replace ? chars of raw string with chars in source string and
 15121                                  ;	   put in destination string
 15122                                  ;Output: ES:DI-> new string
 15123                                  ;---------------------------------------------------------------------------
 15124                                  
 15125                                  NEW_RENAME:
 15126                                  NEWNAM:
 15127                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 15128 00003503 AC                      	LODSB
 15129 00003504 3C3F                    	CMP	AL,"?"
 15130 00003506 7502                    	JNZ	short NOCHG
 15131 00003508 8A07                    	MOV	AL,[BX] 		; Get replace char
 15132                                  NOCHG:
 15133 0000350A AA                      	STOSB
 15134 0000350B 43                      	INC	BX			; Next replace char
 15135 0000350C E2F5                    	LOOP	NEWNAM
 15136                                  	; MSSOS 6.0
 15137                                  	;retn
 15138                                  
 15139                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15140 0000350E C606[0605]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 15141 00003513 C606[1805]FF            	MOV	byte [CREATING],0FFH
 15142 00003518 E8C615                  	call	DEVNAME 		; Check if we built a device name
 15143 0000351B 7395                    	JNC	short BAD_ACC
 15144 0000351D 8B1E[FF04]              	MOV	BX,[DESTSTART]
 15145 00003521 C42E[2405]              	LES	BP,[THISDPB]
 15146 00003525 E8B912                  	call	SETDIRSRCH		; Reset search to start of dir
 15147 00003528 7288                    	JC	short BAD_ACC 		; Screw up
 15148 0000352A E87911                  	call	FINDENTRY		; See if new name already exists
 15149 0000352D 7383                    	JNC	short BAD_ACC 		; Error if found
 15150 0000352F 803E[F602]00            	CMP	byte [FAILERR],0
 15151 00003534 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 15152 00003536 A1[FF04]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 15153 00003539 3B06[9505]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 15154 0000353D 7453                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 15155                                  
 15156 0000353F A0[A605]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 15157 00003542 A810                    	TEST	AL,attr_directory
 15158 00003544 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 15159                                  					; otherwise the . and .. entries get
 15160                                  					; wiped.
 15161 00003546 A2[0605]                	MOV	[ATTRIB],AL
 15162 00003549 8C1E[3805]              	MOV	[THISSFT+2],DS
 15163                                  
 15164                                  ;hkn; AUXSTACK is in DOSDATA
 15165 0000354D BE[D106]                	MOV	SI,AUXSTACK-SF_ENTRY.size
 15166 00003550 8936[3605]              	MOV	[THISSFT],SI
 15167 00003554 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15168 00003559 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 15169 0000355B E8F91A                  	call	RENAME_MAKE		; This is in mknode
 15170 0000355E 7303                    	JNC	short GOT_DEST
 15171                                  BAD_ACCJ:
 15172 00003560 E94FFF                  	JMP	BAD_ACC
 15173                                  
 15174                                  GOT_DEST:
 15175 00003563 53                      	push	bx
 15176 00003564 C43E[3605]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 15177 00003568 E8EA3D                  	call	ShareEnd		; we need to remove it.
 15178 0000356B 5B                      	pop	bx
 15179                                  ; A zero length entry with the correct new name has now been made at
 15180                                  ;   [CURBUF+2]:BX.
 15181 0000356C C43E[7405]              	LES	DI,[CURBUF]
 15182                                  
 15183                                  	; MSDOS 6.0
 15184                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15185                                  	;				;LB. if already dirty		  ;AN000;
 15186                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15187                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15188                                  	
 15189 00003570 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15190                                  ;yesdirty:
 15191 00003575 89DF                    	MOV	DI,BX
 15192 00003577 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 15193                                  
 15194                                  ;hkn; RENAMEDMA is in DOSDATA
 15195 0000357A BE[A605]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 15196 0000357D B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr ; mov cx,21
 15197 00003580 F3A4                    	REP	MOVSB
 15198 00003582 E85100                  	CALL	GET_SOURCE
 15199 00003585 724B                    	JC	short RENAME_OVER
 15200 00003587 89DF                    	MOV	DI,BX
 15201 00003589 8E06[7605]              	MOV	ES,[CURBUF+2]
 15202 0000358D B0E5                    	MOV	AL,DIRFREE
 15203 0000358F AA                      	STOSB				; "free" the source
 15204 00003590 EB13                    	JMP	SHORT DIRTY_IT
 15205                                  
 15206                                  SIMPLE_RENAME:
 15207 00003592 E84100                  	CALL	GET_SOURCE		; Get the source back
 15208 00003595 723B                    	JC	short RENAME_OVER
 15209 00003597 89DF                    	MOV	DI,BX
 15210 00003599 8E06[7605]              	MOV	ES,[CURBUF+2]
 15211                                  
 15212                                  ;hkn; NAME1 is in DOSDATA
 15213 0000359D BE[E604]                	MOV	SI,NAME1		; New Name
 15214 000035A0 B90B00                  	MOV	CX,11
 15215 000035A3 F3A4                    	REP	MOVSB
 15216                                  DIRTY_IT:
 15217 000035A5 8B3E[7405]              	MOV	DI,[CURBUF]
 15218                                  
 15219                                  	; MSDOS 6.0
 15220                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15221                                  	;				;LB. if already dirty		  ;AN000;
 15222                                  	;JNZ	short Yesdirty2		;LB.  don't increment dirty count ;AN000;
 15223                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15224                                  	
 15225 000035A9 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15226                                  ;------------------------------------------------------------------------------
 15227                                  ; Check if the source is a directory of file. If directory rename it to the
 15228                                  ; the new name in the Fastopen cache buffer.  If file name it has been
 15229                                  ; previously deleted.
 15230                                  ;------------------------------------------------------------------------------
 15231                                  ;Yesdirty2:
 15232                                  	; MSDOS 6.0
 15233                                  	;PUSH	SI
 15234                                  	;LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 15235                                  	;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 15236                                  	;TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 15237                                  	;JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 15238                                  	;call	FASTOPEN_RENAME		;;BN00X rename dir entry in fastopen
 15239                                  	;POP	SI
 15240                                  	;JMP	SHORT NOT_DIRTY1
 15241                                  ;NOT_DIR2:				;;BN00X it is a file, delete the entry
 15242                                  	;POP	SI
 15243                                  ;NOT_DIRTY1:				;;BN00X
 15244                                  NEXT_SOURCE:
 15245                                  ;hkn; RENAMEDMA is in DOSDATA
 15246 000035AE BE[8705]                	MOV	SI,RENAMEDMA+1		;Name
 15247                                  ;
 15248                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 15249                                  ; to enter it before going to RENAME_Next.
 15250                                  ;
 15251 000035B1 E8B1EA                  	call	EcritDisk
 15252 000035B4 C606[1805]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 15253                                  				  ;  to FF when we made the prev new file).
 15254 000035B9 E85704                  	call	RENAME_NEXT
 15255                                  ;
 15256                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 15257                                  ; we were before.
 15258                                  ;
 15259 000035BC 7214                    	JC	short RENAME_OVER
 15260 000035BE 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 15261 000035C1 E8CCFD                  	call	REN_DEL_Check
 15262 000035C4 7306                    	JNC	short REN_OK2
 15263 000035C6 B82000                  	MOV	AX,error_sharing_violation
 15264 000035C9 E9EAFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15265                                  
 15266                                  ;------------------------------------------------------------------------------
 15267                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 15268                                  ; if directory, rename directory name in the Fastopen cache.
 15269                                  ;-----------------------------------------------------------------------------
 15270                                  REN_OK2:
 15271                                  	; MSDOS 6.0
 15272                                  	;MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 15273                                  	;TEST	AL,attr_directory	;;BN00X directory
 15274                                  	;JZ	short Ren_Directory	;;BN00X no - file, delete it
 15275                                  	
 15276                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15277 000035CC E82AFE                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 15278 000035CF E923FF                  	JMP	BUILDDEST		;;BN00X
 15279                                  
 15280                                  	; MSDOS 6.0
 15281                                  ;Ren_Directory:
 15282                                  	;call	FASTOPEN_RENAME 	;;BN00X delete dir info in fastopen DOS 3.3
 15283                                  	;JMP	BUILDDEST
 15284                                  
 15285                                  RENAME_OVER:
 15286 000035D2 F8                      	CLC
 15287 000035D3 E9E0FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15288                                  
 15289                                  ;----------------------------------------------------------------------------
 15290                                  ; Procedure: GET_SOURCE
 15291                                  ;
 15292                                  ; Inputs:
 15293                                  ;	RENAMEDMA has source info
 15294                                  ; Function:
 15295                                  ;	Re-find the source
 15296                                  ; Output:
 15297                                  ;	[CURBUF] set
 15298                                  ;	[CURBUF+2]:BX points to entry
 15299                                  ;	Carry set if error (currently user FAILed to I 24)
 15300                                  ; DS preserved, others destroyed
 15301                                  ;----------------------------------------------------------------------------
 15302                                  
 15303                                  GET_SOURCE:
 15304 000035D6 8B1E[9505]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 15305 000035DA C42E[2405]              	LES	BP,[THISDPB]
 15306 000035DE E80012                  	call	SETDIRSRCH
 15307 000035E1 7209                    	JC	short gs_ret_label	; retc
 15308 000035E3 E8DA14                  	call	STARTSRCH
 15309 000035E6 A1[9305]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 15310 000035E9 E8C711                  	call	GETENT
 15311                                  
 15312                                  gs_ret_label:
 15313 000035EC C3                      	retn
 15314                                  
 15315                                  ;============================================================================
 15316                                  ; FINFO.ASM, MSDOS 6.0, 1991
 15317                                  ;============================================================================
 15318                                  ; 08/08/2018 - Retro DOS v3.0
 15319                                  
 15320                                  ;**	Low level routines for returning file information and setting file
 15321                                  ;	attributes
 15322                                  ;
 15323                                  ;	GET_FILE_INFO
 15324                                  ;	SET_FILE_ATTRIBUTE
 15325                                  ;
 15326                                  ;	Modification history:
 15327                                  ;
 15328                                  ;	    Created: ARR 30 March 1983
 15329                                  ;
 15330                                  ;	M025: Return access_denied if attempting to set
 15331                                  ;	      attribute of root directory.
 15332                                  ;
 15333                                  
 15334                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 15335                                  
 15336                                  ;---------------------------------------------------------------------------
 15337                                  ; Procedure Name : GET_FILE_INFO
 15338                                  ;
 15339                                  ; Inputs:
 15340                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15341                                  ;		terminated)
 15342                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15343                                  ;		( = -1 if current dir not involved, else
 15344                                  ;		 Points to first char after last "/" of current dir part)
 15345                                  ;	[THISCDS] Points to CDS being used
 15346                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15347                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15348                                  ; Function:
 15349                                  ;	Get Information about a file
 15350                                  ; Returns:
 15351                                  ;	CARRY CLEAR
 15352                                  ;	    AX = Attribute of file
 15353                                  ;	    CX = Time stamp of file
 15354                                  ;	    DX = Date stamp of file
 15355                                  ;	    BX:DI = Size of file (32 bit)
 15356                                  ;	CARRY SET
 15357                                  ;	    AX is error code
 15358                                  ;		error_file_not_found
 15359                                  ;			Last element of path not found
 15360                                  ;		error_path_not_found
 15361                                  ;			Bad path (not in curr dir part if present)
 15362                                  ;		error_bad_curr_dir
 15363                                  ;			Bad path in current directory part of path
 15364                                  ; DS preserved, others destroyed
 15365                                  ;---------------------------------------------------------------------------
 15366                                  
 15367                                  GET_FILE_INFO:
 15368                                  
 15369                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 15370                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15371                                  
 15372 000035ED E8D7E9                  	call	TestNet
 15373 000035F0 7306                    	JNC	short LOCAL_INFO
 15374                                  
 15375                                  ;IF NOT Installed
 15376                                  ;	transfer NET_GET_FILE_INFO
 15377                                  ;ELSE
 15378                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 15379                                  ;	INT	2FH
 15380                                  ;	return
 15381                                  
 15382 000035F2 B80F11                  	mov     ax, 110Fh
 15383 000035F5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 15384                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15385                                  			; SDA CDS pointer -> current directory
 15386                                  			; Return: CF set on error, AX = file attributes
 15387 000035F7 C3                      	retn
 15388                                  ;ENDIF
 15389                                  
 15390                                  LOCAL_INFO:
 15391 000035F8 E86AEA                  	call	EcritDisk
 15392 000035FB C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15393                                  	; MSDOS 6.0
 15394                                  	;call	Get_FAST_PATH
 15395                                  	; MSDOS 3.3
 15396 00003600 E83312                  	call	GETPATH
 15397                                  info_check:
 15398 00003603 7313                    	JNC	short info_check_dev
 15399                                  NO_PATH:
 15400 00003605 750C                    	JNZ	short bad_path1
 15401 00003607 08C9                    	OR	CL,CL
 15402 00003609 7408                    	JZ	short bad_path1
 15403                                  info_no_file:
 15404 0000360B B80200                  	MOV	AX,error_file_not_found
 15405                                  BadRet:
 15406 0000360E F9                      	STC
 15407                                  JustRet:
 15408 0000360F E85BEA                  	call	LcritDisk
 15409 00003612 C3                      	retn
 15410                                  
 15411                                  bad_path1:
 15412 00003613 B80300                  	MOV	AX,error_path_not_found
 15413 00003616 EBF6                    	jmp	short BadRet
 15414                                  
 15415                                  info_check_dev:
 15416 00003618 08E4                    	OR	AH,AH
 15417 0000361A 78EF                    	JS	short info_no_file	; device
 15418                                  
 15419                                  	; MSDOS 6.0
 15420                                  ;SR;
 15421                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 15422                                  ;for a root dir
 15423                                  ;
 15424 0000361C 833E[7405]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 15425 00003621 7507                    	jne	short not_root		;no, CurBuf ptr is valid
 15426                                  
 15427 00003623 30E4                    	xor	ah,ah
 15428 00003625 B010                    	mov	al,attr_directory
 15429 00003627 F8                      	clc
 15430 00003628 EBE5                    	jmp	short JustRet
 15431                                  
 15432                                  not_root:
 15433                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15434 0000362A 1E                      	PUSH	DS
 15435 0000362B 8E1E[7605]              	MOV	DS,[CURBUF+2]
 15436 0000362F 89DE                    	MOV	SI,BX
 15437 00003631 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 15438 00003633 89DF                    	MOV	DI,BX
 15439 00003635 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 15440 00003638 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 15441 0000363B 30E4                    	XOR	AH,AH
 15442 0000363D 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 15443 00003640 A810                    	TEST	AL,attr_directory
 15444 00003642 7506                    	JNZ	short NO_SIZE
 15445 00003644 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 15446 00003647 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 15447                                  NO_SIZE:
 15448 0000364A 1F                      	POP	DS
 15449 0000364B F8                      	CLC
 15450 0000364C EBC1                    	jmp	short JustRet
 15451                                  
 15452                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 15453                                  ;-------------------------------------------------------------------------------
 15454                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 15455                                  ; Inputs:
 15456                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15457                                  ;		terminated)
 15458                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15459                                  ;		( = -1 if current dir not involved, else
 15460                                  ;		 Points to first char after last "/" of current dir part)
 15461                                  ;	[THISCDS] Points to CDS being used
 15462                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15463                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 15464                                  ;	AX is new attributes to give to file
 15465                                  ; Function:
 15466                                  ;	Set File Attributes
 15467                                  ; Returns:
 15468                                  ;	CARRY CLEAR
 15469                                  ;	    No error
 15470                                  ;	CARRY SET
 15471                                  ;	    AX is error code
 15472                                  ;		error_file_not_found
 15473                                  ;			Last element of path not found
 15474                                  ;		error_path_not_found
 15475                                  ;			Bad path (not in curr dir part if present)
 15476                                  ;		error_bad_curr_dir
 15477                                  ;			Bad path in current directory part of path
 15478                                  ;		error_access_denied
 15479                                  ;			Attempt to set an attribute which cannot be set
 15480                                  ;			(attr_directory, attr_volume_ID)
 15481                                  ;		error_sharing_violation
 15482                                  ;			Sharing mode of file did not allow the change
 15483                                  ;			(this request requires exclusive write/read access)
 15484                                  ;			(INT 24H generated)
 15485                                  ; DS preserved, others destroyed
 15486                                  ;----------------------------------------------------------------------------
 15487                                  
 15488                                  SET_FILE_ATTRIBUTE:
 15489                                  
 15490                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 15491                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15492                                  
 15493 0000364E A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 15494 00003651 7414                    	JZ	short set_look
 15495                                  _BAD_ACC:
 15496 00003653 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15497 00003658 C606[D502]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr
 15498 0000365D C606[D402]04            	MOV	byte [EXTERR_ACTION],errACT_Abort
 15499 00003662 B80500                  	MOV	AX,error_access_denied
 15500 00003665 F9                      	STC
 15501 00003666 C3                      	retn
 15502                                  
 15503                                  set_look:
 15504 00003667 E85DE9                  	call	TestNet
 15505 0000366A 7308                    	JNC	short LOCAL_SET
 15506                                  
 15507                                  ;IF NOT Installed
 15508                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 15509                                  ;ELSE
 15510 0000366C 50                      	PUSH	AX
 15511                                  	
 15512                                  	;MOV	AX,(MultNET SHL 8) OR 14
 15513                                  	;INT	2FH
 15514                                  
 15515 0000366D B80E11                  	mov     ax, 110Eh
 15516 00003670 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 15517                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15518                                  			; SDA CDS pointer -> current directory
 15519                                  			; STACK: WORD new file attributes
 15520                                  			; Return: CF set on error
 15521                                  
 15522 00003672 5B                      	POP	BX			; clean stack
 15523 00003673 C3                      	retn
 15524                                  ;ENDIF
 15525                                  
 15526                                  LOCAL_SET:
 15527 00003674 E8EEE9                  	call	EcritDisk
 15528 00003677 50                      	PUSH	AX			; Save new attributes
 15529 00003678 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15530 0000367D E8B611                  	call	GETPATH 		; get path through fastopen if there	 ;AC000;
 15531 00003680 7303                    	JNC	short set_check_device
 15532 00003682 5B                      	POP	BX			; Clean stack (don't zap AX)
 15533 00003683 EB80                    	JMP	short NO_PATH
 15534                                  
 15535                                  set_check_device:
 15536 00003685 08E4                    	OR	AH,AH
 15537 00003687 7906                    	JNS	short set_check_share
 15538 00003689 58                      	POP	AX
 15539 0000368A E8E0E9                  	call	LcritDisk
 15540 0000368D EBC4                    	JMP	short _BAD_ACC 		; device
 15541                                  
 15542                                  set_check_share:
 15543 0000368F 58                      	POP	AX			; Get new attributes
 15544                                  
 15545                                  	; MSDOS 6.0
 15546 00003690 833E[7405]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 15547 00003695 740A                    	je	short cannot_set_root	; M025: Y: return error
 15548                                  
 15549                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15550 00003697 E8F6FC                  	call	REN_DEL_Check
 15551 0000369A 730B                    	JNC	short set_do
 15552 0000369C B82000                  	MOV	AX,error_sharing_violation
 15553 0000369F EB30                    	jmp	short OK_BYE
 15554                                  
 15555                                  	; MSDOS 6.0
 15556                                  cannot_set_root:			; M025:
 15557 000036A1 B80500                  	mov	ax, error_access_denied	; M025: return error is attempting
 15558 000036A4 F9                      	stc				; M025: to set attr. of root
 15559 000036A5 EB2A                    	jmp	short OK_BYE		; M025:
 15560                                  
 15561                                  set_do:
 15562                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15563 000036A7 C43E[7405]              	LES	DI,[CURBUF]
 15564 000036AB 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 15565 000036B0 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 15566                                  
 15567                                  	; MSDOS 6.0
 15568                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15569                                  	;				;LB. if already dirty		  ;AN000;
 15570                                  	;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 15571                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15572                                  	
 15573 000036B4 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15574                                  ;yesdirty3:
 15575 000036B9 A0[1105]                	MOV	AL,[THISDRV]
 15576                                  ;;;; 10/1/86 F.C update fastopen cache
 15577 000036BC 52                      	PUSH	DX
 15578 000036BD 57                      	PUSH	DI
 15579 000036BE B400                    	MOV	AH,0		  ; dir entry update
 15580 000036C0 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 15581 000036C2 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 15582 000036C4 E846FD                  	call	FastOpen_Update
 15583 000036C7 5F                      	POP	DI
 15584 000036C8 5A                      	POP	DX
 15585                                  ;;;; 9/11/86 F.C update fastopen cache
 15586 000036C9 E86628                  	call	FLUSHBUF
 15587 000036CC 7303                    	JNC	short OK_BYE
 15588 000036CE B80200                  	MOV	AX,error_file_not_found
 15589                                  OK_BYE:
 15590 000036D1 E899E9                  	call	LcritDisk
 15591 000036D4 C3                      	retn
 15592                                  
 15593                                  	; MSDOS 6.0
 15594                                  ;GET_FAST_PATH:
 15595                                  ;hkn; use SS override for FastOpenFlg
 15596                                  	;OR	byte [FastOpenFlg],FastOpen_Set
 15597                                  	;				;FO. trigger fastopen	;AN000;
 15598                                  	;call	GETPATH
 15599                                  	;PUSHF			 	;FO.			;AN000;
 15600                                  	;AND	byte [FastOpenFlg],Fast_yes 
 15601                                  	;				;FO. clear all fastopen flags ;AN000;
 15602                                  	;POPF				;FO.			;AN000;
 15603                                  	;retn
 15604                                  
 15605                                  ;============================================================================
 15606                                  ; DUP.ASM, MSDOS 6.0, 1991
 15607                                  ;============================================================================
 15608                                  ; 08/08/2018 - Retro DOS v3.0
 15609                                  
 15610                                  ;**	Low level DUP routine for use by EXEC when creating a new process. Exports
 15611                                  ;	  the DUP to the server machine and increments the SFT ref count
 15612                                  ;
 15613                                  ;	DOS_DUP
 15614                                  ;
 15615                                  ;	Modification history:
 15616                                  ;
 15617                                  ;	  Created: ARR 30 March 1983
 15618                                  
 15619                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 15620                                  ;---------------------------------------------------------------------------
 15621                                  ; Procedure Name : DOS_DUP
 15622                                  ;
 15623                                  ; Inputs:
 15624                                  ;	[THISSFT] set to the SFT for the file being DUPed
 15625                                  ;		(a non net SFT is OK, in this case the ref
 15626                                  ;		 count is simply incremented)
 15627                                  ; Function:
 15628                                  ;	Signal to the devices that a logical open is occurring
 15629                                  ; Returns:
 15630                                  ;	ES:DI point to SFT
 15631                                  ;    Carry clear
 15632                                  ;	SFT ref_count is incremented
 15633                                  ; Registers modified: None.
 15634                                  ; NOTE:
 15635                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 15636                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 15637                                  ;	that time.
 15638                                  ;---------------------------------------------------------------------------
 15639                                  
 15640                                  DOS_DUP:
 15641 000036D5 2EC43E[3605]            	LES	DI,[CS:THISSFT]
 15642                                  
 15643                                  	;Entry	Dos_Dup_Direct
 15644                                  DOS_Dup_Direct:
 15645 000036DA E8FFE8                  	call	IsSFTNet
 15646 000036DD 7503                    	JNZ	short DO_INC
 15647 000036DF E89817                  	call	DEV_OPEN_SFT
 15648                                  DO_INC:
 15649                                  
 15650                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 15651 000036E2 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 15652                                  					;   we're in big trouble anyway)
 15653 000036E5 C3                      	retn
 15654                                  
 15655                                  ;============================================================================
 15656                                  ; CREATE.ASM, MSDOS 6.0, 1991
 15657                                  ;============================================================================
 15658                                  ; 08/08/2018 - Retro DOS v3.0
 15659                                  
 15660                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 15661                                  ;NAME	DOS_CREATE
 15662                                  
 15663                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 15664                                  ;
 15665                                  ;	DOS_CREATE
 15666                                  ;	DOS_CREATE_NEW
 15667                                  ;	SET_MKND_ERR
 15668                                  ;	SET_Media_ID
 15669                                  ;	SET_EXT_Mode
 15670                                  ;
 15671                                  ;	Revision history:
 15672                                  ;
 15673                                  ;	    A000 version 4.00	  Jan. 1988
 15674                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 15675                                  
 15676                                  ;Installed = TRUE
 15677                                  
 15678                                  ;	i_need	THISSFT,DWORD
 15679                                  ;	i_need	THISCDS,DWORD
 15680                                  ;	I_need	EXTERR,WORD
 15681                                  ;	I_Need	ExtErr_locus,BYTE
 15682                                  ;	I_need	JShare,DWORD
 15683                                  ;	I_need	VOLCHNG_FLAG,BYTE
 15684                                  ;	I_need	SATTRIB,BYTE
 15685                                  ;	I_need	CALLVIDM,DWORD
 15686                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 15687                                  ;	I_need	NAME1,BYTE			  ;AN000;
 15688                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 15689                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 15690                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 15691                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 15692                                  
 15693                                  ;***	DOS_CREATE - Create a File
 15694                                  ;----------------------------------------------------------------------------
 15695                                  ;	DOS_Create is called to create the specified file, truncating
 15696                                  ;	the old one if it exists.
 15697                                  ;
 15698                                  ;
 15699                                  ;	ENTRY	AX is Attribute to create
 15700                                  ;		(ds) = DOSDATA
 15701                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15702                                  ;			terminated)
 15703                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 15704                                  ;			( = -1 if current dir not involved, else
 15705                                  ;			 Points to first char after last "/" of current dir part)
 15706                                  ;		[THISCDS] Points to CDS being used
 15707                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 15708                                  ;		[THISSFT] Points to SFT to fill in if file created
 15709                                  ;			(sf_mode field set so that FCB may be detected)
 15710                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 15711                                  ;
 15712                                  ;	EXIT	sf_ref_count is NOT altered
 15713                                  ;		CARRY CLEAR
 15714                                  ;		    THISSFT filled in.
 15715                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 15716                                  ;		CARRY SET
 15717                                  ;		    AX is error code
 15718                                  ;			error_path_not_found
 15719                                  ;				Bad path (not in curr dir part if present)
 15720                                  ;			error_bad_curr_dir
 15721                                  ;				Bad path in current directory part of path
 15722                                  ;			error_access_denied
 15723                                  ;				Attempt to re-create read only file , or
 15724                                  ;				create a second volume id or create a dir
 15725                                  ;			error_sharing_violation
 15726                                  ;				The sharing mode was correct but not allowed
 15727                                  ;				generates an INT 24
 15728                                  ;	USES	all but DS
 15729                                  ;----------------------------------------------------------------------------
 15730                                  
 15731                                  DOS_CREATE:
 15732                                  
 15733                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 15734                                  ;hkn; this point.
 15735                                  
 15736 000036E6 30E4                    	XOR	AH,AH		; Truncate is OK
 15737                                  
 15738                                  ;	Enter here from Dos_Create_New
 15739                                  ;
 15740                                  ;	(ah) = 0 iff truncate OK
 15741                                  
 15742                                  Create_inter:
 15743 000036E8 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 15744                                  				; Mask out any meaningless bits
 15745 000036EA 750C                    	JNZ	short AttErr
 15746 000036EC A808                    	TEST	AL,attr_volume_id
 15747 000036EE 7402                    	JZ	short NoReset
 15748                                  	;
 15749                                  	; MSDOS 6.0
 15750                                  	;OR	[DOS34_FLAG],DBCS_VOLID      ;AN000;FOR dbcs volid
 15751                                  	;
 15752 000036F0 B008                    	MOV	AL,attr_volume_id
 15753                                  NoReset:
 15754 000036F2 0C20                    	OR	AL,attr_archive ; File changed
 15755 000036F4 A850                    	TEST	AL,attr_directory+attr_device
 15756 000036F6 740A                    	JZ	short ATT_OK
 15757                                  AttErr:
 15758 000036F8 B80500                  	MOV	AX,5		; Attribute problem
 15759 000036FB C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15760 00003700 EB3D                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 15761                                  				   ;	attr_device to be set.
 15762                                  ATT_OK:
 15763 00003702 C43E[3605]              	LES	DI,[THISSFT]
 15764 00003706 06                      	PUSH	ES
 15765 00003707 C436[3A05]              	LES	SI,[THISCDS]
 15766 0000370B 83FEFF                  	CMP	SI,-1
 15767 0000370E 7509                    	JNE	short TEST_RE_NET
 15768                                  
 15769                                  ;	No CDS, it must be redirected.
 15770                                  
 15771 00003710 07                      	POP	ES
 15772                                  
 15773                                  	; MSDOS 6.0
 15774                                  ;Extended open hooks
 15775                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15776                                  	;JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 15777                                  ;IFS_extopen:				    ;AN000;EO.
 15778                                  	;PUSH	AX			    ;AN000;EO. pass create attr
 15779                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 15780                                  	;mov	ax,112Eh
 15781                                  	;INT	2FH			    ;AN000;EO.
 15782                                  	;POP	BX			    ;AN000;EO. trash bx
 15783                                  	;MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 15784                                  	;retn				    ;AN000;EO.
 15785                                  ;NOEXTOP:				    ;AN000;
 15786                                  ;Extended open hooks
 15787                                  
 15788                                  ;IF NOT Installed
 15789                                  ;	transfer NET_SEQ_CREATE
 15790                                  ;ELSE
 15791 00003711 50                      	PUSH	AX
 15792                                  
 15793                                  	;MOV	AX,(MultNET SHL 8) OR 24
 15794                                  	;INT	2FH
 15795                                  
 15796 00003712 B81811                  	mov     ax,1118h
 15797 00003715 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 15798                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15799                                  			; SDA first filename pointer -> fully-qualified name of file
 15800                                  			; STACK: WORD file creation mode???
 15801                                  
 15802 00003717 5B                      	POP	BX			; BX is trashed anyway
 15803 00003718 C3                      	retn
 15804                                  ;ENDIF
 15805                                  
 15806                                  ;	We have a CDS. See if it's network
 15807                                  
 15808                                  TEST_RE_NET:
 15809 00003719 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 15810 0000371F 07                      	POP	ES
 15811 00003720 7408                    	JZ	short LOCAL_CREATE
 15812                                  
 15813                                  	; MSDOS 6.0
 15814                                  	;CALL	Set_EXT_mode		    ;AN000;EO.
 15815                                  	;JC	SHORT dochk		    ;AN000;EO.
 15816                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 15817                                  
 15818                                  ;Extended open hooks
 15819                                  ;dochk:
 15820                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15821                                  	;JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 15822                                  ;Extended open hooks
 15823                                  
 15824                                  ;IF NOT Installed
 15825                                  ;	transfer NET_CREATE
 15826                                  ;ELSE
 15827 00003722 50                      	PUSH	AX
 15828                                  	
 15829                                  	;MOV	AX,(MultNET SHL 8) OR 23
 15830                                  	;INT	2FH
 15831                                  	
 15832 00003723 B81711                  	mov     ax, 1117h
 15833 00003726 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 15834                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15835                                  			; SDA first filename pointer -> fully-qualified name of file to open
 15836                                  			; SDA CDS pointer -> current directory
 15837                                  			; Return: CF set on error
 15838                                  
 15839 00003728 5B                      	POP	BX			; BX is trashed anyway
 15840                                  ;nomore:
 15841 00003729 C3                      	retn
 15842                                  ;ENDIF
 15843                                  
 15844                                  
 15845                                  ;**	It's a local create.  We have a local CDS for it.
 15846                                  
 15847                                  LOCAL_CREATE:
 15848                                  	; MSDOS 6.0
 15849                                  	;CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 15850                                  	;JC	short setdone	;AN000;EO.
 15851                                  	
 15852                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15853 0000372A 26834D0202              	OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15854                                  ;setdone:
 15855 0000372F E833E9                  	call	EcritDisk
 15856 00003732 E8FC18                  	call	MakeNode
 15857 00003735 730E                    	JNC	short Create_ok
 15858 00003737 C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 15859 0000373C E82EE9                  	call	LcritDisk
 15860                                  
 15861                                  	;entry	SET_MKND_ERR
 15862                                  SET_MKND_ERR:
 15863                                  
 15864                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 15865                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 15866                                  
 15867                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 15868 0000373F BB[FD12]                	MOV     BX,CRTERRTAB
 15869 00003742 D7                      	XLAT
 15870                                  	;XLAT	byte [CS:BX]
 15871                                  CreatBadRet:
 15872 00003743 F9                      	STC
 15873 00003744 C3                      	retn
 15874                                  
 15875                                  ; We have just created a new file. This results in the truncation of old
 15876                                  ; files. We must inform the sharer to slash all the open SFT's for this
 15877                                  ; file to the current size.
 15878                                  
 15879                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 15880                                  ; drive number to force a Build BPB after Media Check.
 15881                                  
 15882                                  ;;; FASTOPEN 8/29/86
 15883                                  Create_ok:
 15884 00003745 E8B1FC                  	call	FastOpen_Delete
 15885                                  ;;; FASTOPEN 8/29/86
 15886 00003748 A0[0805]                	mov	al,[SATTRIB]
 15887 0000374B A808                    	test	al,attr_volume_id
 15888 0000374D 7417                    	jz	short NoVolLabel
 15889 0000374F C43E[3A05]              	LES	DI,[THISCDS]
 15890                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 15891 00003753 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 15892 00003756 80EC41                  	sub	ah,'A'                  ; convert to drive letter
 15893 00003759 8826[070A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 15894                                  	
 15895                                  	; MSDOS 6.0
 15896                                  	;MOV	BH,1			;AN000;>32mb set volume id to boot record
 15897                                  	;CALL	Set_Media_ID		;AN000;>32mb
 15898                                  	
 15899 0000375D E805E9                  	call	EcritDisk
 15900 00003760 E85D24                  	call	FATREAD_CDS		; force a media check
 15901 00003763 E807E9                  	call	LcritDisk
 15902                                  
 15903                                  NoVolLabel:
 15904 00003766 B80200                  	MOV	ax,2
 15905 00003769 C43E[3605]              	LES	DI,[THISSFT]
 15906                                  ;if installed
 15907                                  	;call	JShare + 14 * 4
 15908 0000376D FF1E[9400]              	call	far [JShare+(14*4)] ; 14 = ShSU
 15909                                  ;else
 15910                                  ;	Call	ShSU
 15911                                  ;endif
 15912 00003771 E8F9E8                  	call	LcritDisk
 15913 00003774 E9D800                  	jmp	SET_SFT_MODE
 15914                                  
 15915                                  ;---------------------------------------------------------------------------
 15916                                  ; Procedure Name : Dos_Create_New
 15917                                  ;
 15918                                  ; Inputs:
 15919                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15920                                  ;		terminated)
 15921                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15922                                  ;		( = -1 if current dir not involved, else
 15923                                  ;		 Points to first char after last "/" of current dir part)
 15924                                  ;	[THISCDS] Points to CDS being used
 15925                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15926                                  ;	[THISSFT] Points to SFT to fill in if file created
 15927                                  ;		(sf_mode field set so that FCB may be detected)
 15928                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15929                                  ;	AX is Attribute to create
 15930                                  ; Function:
 15931                                  ;	Try to create the specified file truncating an old one that exists
 15932                                  ; Outputs:
 15933                                  ;	sf_ref_count is NOT altered
 15934                                  ;	CARRY CLEAR
 15935                                  ;	    THISSFT filled in.
 15936                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 15937                                  ;	CARRY SET
 15938                                  ;	    AX is error code
 15939                                  ;		error_path_not_found
 15940                                  ;			Bad path (not in curr dir part if present)
 15941                                  ;		error_bad_curr_dir
 15942                                  ;			Bad path in current directory part of path
 15943                                  ;		error_access_denied
 15944                                  ;			Create a second volume id or create a dir
 15945                                  ;		error_file_exists
 15946                                  ;			Already a file by this name
 15947                                  ; DS preserved, others destroyed
 15948                                  ;---------------------------------------------------------------------------
 15949                                  
 15950                                  DOS_Create_New:
 15951 00003777 B401                    	MOV	AH,1		; Truncate is NOT OK
 15952 00003779 E96CFF                  	JMP	Create_inter
 15953                                  
 15954                                  ; MSDOS 6.0
 15955                                  ;---------------------------------------------------------------------------
 15956                                  ; Procedure Name : Set_Media_ID
 15957                                  ;
 15958                                  ; Inputs:
 15959                                  ;	NAME1= Volume ID
 15960                                  ;	BH= 0, delete volume id
 15961                                  ;	    1, set new volume id
 15962                                  ;	DS= DOSGROUP
 15963                                  ; Function:
 15964                                  ;	Set Volume ID to DOS 4.00 Boot record.
 15965                                  ; Outputs:
 15966                                  ;	CARRY CLEAR
 15967                                  ;	    volume id set
 15968                                  ;	CARRY SET
 15969                                  ;	    AX is error code
 15970                                  ;---------------------------------------------------------------------------
 15971                                  ;
 15972                                  ;procedure   Set_Media_ID,NEAR
 15973                                  ;	DOSAssume   <DS>,"SetMedID"
 15974                                  ;
 15975                                  ;	PUSH	AX		;AN000;;>32mb
 15976                                  ;	PUSH	ES		;AN000;;>32mb
 15977                                  ;	PUSH	DI		;AN000;;>32mb
 15978                                  ;
 15979                                  ;	INC	AH		;AN000;;>32mb  bl=drive #
 15980                                  ;	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 15981                                  ;	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 15982                                  ;	MOV	CX,0866H	;AN001;;>32mb  get media id
 15983                                  ;
 15984                                  ;hkn; PACKET_TEMP is in DOSDATA
 15985                                  ;	MOV	DX,OFFSET DOSDATA:PACKET_TEMP	;AN000;>32mb
 15986                                  ;
 15987                                  ;	PUSH	BX		;AN000;;>32mb
 15988                                  ;	PUSH	DX		;AN000;;>32mb
 15989                                  ;	XOR	BH,BH		;AN000;;>32mb
 15990                                  ;
 15991                                  ;	invoke	$IOCTL		;AN000;;>32mb
 15992                                  ;	POP	DX		;AN000;;>32mb
 15993                                  ;	POP	BX		;AN000;;>32mb
 15994                                  ;	JC	geterr		;AN000;;>32mb
 15995                                  ;
 15996                                  ;	OR	BH,BH		;AN000;;>32mb delete volume id
 15997                                  ;	JZ	NoName		;AN000;>32mb yes
 15998                                  ;
 15999                                  ;hkn; NAME1 is in DOSDATA
 16000                                  ;	MOV	SI,OFFSET DOSDATA:NAME1   ;AN000;>32mb
 16001                                  ;
 16002                                  ;	JMP	SHORT doset	;AN000;>32mb yes
 16003                                  ;Noname: 			;AN000;
 16004                                  ;
 16005                                  ;hkn; NO_NAME_ID is in DOSDATA
 16006                                  ;	MOV	SI,OFFSET DOSDATA:NO_NAME_ID  ;AN000;>32mb
 16007                                  ;
 16008                                  ;doset:					       ;AN000;
 16009                                  ;	MOV	DI,DX		;AN000;;>32mb
 16010                                  ;	ADD	DI,MEDIA_LABEL	;AN000;;>32mb
 16011                                  ;
 16012                                  ;hkn; ES & DS must point to SS
 16013                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 16014                                  ;	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 16015                                  ;
 16016                                  ;	POP	DS		;AN000;;>32mb
 16017                                  ;
 16018                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 16019                                  ;	PUSH	SS		;AN000;;>32mb
 16020                                  ;
 16021                                  ;	POP	ES		;AN000;;>32mb
 16022                                  ;	MOV	CX,11		;AN000;;>32mb
 16023                                  ;	REP	MOVSB		;AN000;;>32mb
 16024                                  ;	MOV	CX,0846H	;AN001;;>32mb
 16025                                  ;	MOV	AL,0DH		;AN000;;>32mb
 16026                                  ;	XOR	BH,BH		;AN000;;>32mb
 16027                                  ;	invoke	$IOCTL		;AN000;;>32mb  set volume id
 16028                                  ;geterr: 			;AN000;
 16029                                  ;
 16030                                  ;hkn;	PUSH	CS		;AN000;>32mb
 16031                                  ;	PUSH	SS		;AN000;>32mb
 16032                                  ;
 16033                                  ;	POP	DS		;AN000;>32mb   ds= dosgroup
 16034                                  ;
 16035                                  ;	POP	DI		;AN000;;>32mb
 16036                                  ;	POP	ES		;AN000;;>32mb
 16037                                  ;	POP	AX		;AN000;;>32mb
 16038                                  ;	return			;AN000;>32mb
 16039                                  ;
 16040                                  ;EndProc Set_Media_ID		;AN000;
 16041                                  
 16042                                  ; MSDOS 6.0
 16043                                  ;---------------------------------------------------------------------------
 16044                                  ; Procedure Name : Set_EXT_mode
 16045                                  ;
 16046                                  ; Inputs:
 16047                                  ;	[EXTOPEN_ON]= flag for extended open
 16048                                  ;	SAVE_BX= mode specified in Extended Open
 16049                                  ; Function:
 16050                                  ;	Set mode in ThisSFT
 16051                                  ; Outputs:
 16052                                  ;	carry set,mode is set if from Extended Open
 16053                                  ;	carry clear, mode not set yet
 16054                                  ;---------------------------------------------------------------------------
 16055                                  ;
 16056                                  ;procedure   Set_EXT_mode,NEAR
 16057                                  ;
 16058                                  ;hkn; SS override
 16059                                  ;	TEST	[EXTOPEN_ON],ext_open_on    ;AN000;EO. from extended open
 16060                                  ;	JZ	NOTEX			    ;AN000;EO. no, do normal
 16061                                  ;	PUSH	AX			    ;AN000;EO.
 16062                                  ;
 16063                                  ;hkn; SS override
 16064                                  ;	MOV	AX,[SAVE_BX]		    ;AN000;EO.
 16065                                  ;	OR	ES:[DI.sf_mode],AX	    ;AN000;EO.
 16066                                  ;	POP	AX			    ;AN000;EO.
 16067                                  ;	STC				    ;AN000;EO.
 16068                                  ;NOTEX:					    ;AN000;
 16069                                  ;	return				    ;AN000;EO.
 16070                                  ;
 16071                                  ;EndProc Set_EXT_mode			    ;AN000;
 16072                                  
 16073                                  ;============================================================================
 16074                                  ; OPEN.ASM, MSDOS 6.0, 1991
 16075                                  ;============================================================================
 16076                                  ; 08/08/2018 - Retro DOS v3.0
 16077                                  
 16078                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 16079                                  ;	NAME	DOS_OPEN
 16080                                  
 16081                                  ;**	OPEN.ASM - File Open
 16082                                  ;----------------------------------------------------------------------------
 16083                                  ;	Low level routines for openning a file from a file spec.
 16084                                  ;	Also misc routines for sharing errors
 16085                                  ;
 16086                                  ;	DOS_Open
 16087                                  ;	Check_Access_AX
 16088                                  ;	SHARE_ERROR
 16089                                  ;	SET_SFT_MODE
 16090                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 16091                                  ;
 16092                                  ;	Revision history:
 16093                                  ;
 16094                                  ;	    Created: ARR 30 March 1983
 16095                                  ;	    A000	version 4.00   Jan. 1988
 16096                                  ;
 16097                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 16098                                  ; 	       remote extended opens and not save_cx.
 16099                                  ;
 16100                                  ;	M035 - if open made from exec then we must set the appropriate bits
 16101                                  ;	       on the stack before calling off to the redir.
 16102                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 16103                                  ;	       to handle open from exec. In this case set the appropriate bit
 16104                                  ;	       else do not.
 16105                                  ;----------------------------------------------------------------------------	
 16106                                  
 16107                                  ;Installed = TRUE
 16108                                  
 16109                                  ;	i_need	NoSetDir,BYTE
 16110                                  ;	i_need	THISSFT,DWORD
 16111                                  ;	i_need	THISCDS,DWORD
 16112                                  ;	i_need	CURBUF,DWORD
 16113                                  ;	i_need	CurrentPDB,WORD
 16114                                  ;	i_need	CURR_DIR_END,WORD
 16115                                  ;	I_need	RetryCount,WORD
 16116                                  ;	I_need	Open_Access,BYTE
 16117                                  ;	I_need	fSharing,BYTE
 16118                                  ;	i_need	JShare,DWORD
 16119                                  ;	I_need	FastOpenFlg,byte
 16120                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 16121                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 16122                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 16123                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 16124                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 16125                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 16126                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 16127                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 16128                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 16129                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 16130                                  ;	I_need	SAVE_BX,WORD			  ;M034
 16131                                  ;
 16132                                  ;	I_need	DOS_FLAG,BYTE
 16133                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 16134                                  
 16135                                  ;Break	<DOS_Open - internal file access>
 16136                                  ;---------------------------------------------------------------------------
 16137                                  ; Procedure Name : DOS_Open
 16138                                  ;
 16139                                  ; Inputs:
 16140                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16141                                  ;		terminated)
 16142                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16143                                  ;		( = -1 if current dir not involved, else
 16144                                  ;		 Points to first char after last "/" of current dir part)
 16145                                  ;	[THISCDS] Points to CDS being used
 16146                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16147                                  ;	[THISSFT] Points to SFT to fill in if file found
 16148                                  ;		(sf_mode field set so that FCB may be detected)
 16149                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16150                                  ;	AX is Access and Sharing mode
 16151                                  ;	  High NIBBLE of AL (Sharing Mode)
 16152                                  ;		sharing_compat	   file is opened in compatibility mode
 16153                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16154                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16155                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16156                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16157                                  ;	  Low NIBBLE of AL (Access Mode)
 16158                                  ;		open_for_read	file is opened for reading
 16159                                  ;		open_for_write	file is opened for writing
 16160                                  ;		open_for_both	file is opened for both reading and writing.
 16161                                  ;
 16162                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 16163                                  ;		(not checked)
 16164                                  ; Function:
 16165                                  ;	Try to open the specified file
 16166                                  ; Outputs:
 16167                                  ;	sf_ref_count is NOT altered
 16168                                  ;	CARRY CLEAR
 16169                                  ;	    THISSFT filled in.
 16170                                  ;	CARRY SET
 16171                                  ;	    AX is error code
 16172                                  ;		error_file_not_found
 16173                                  ;			Last element of path not found
 16174                                  ;		error_path_not_found
 16175                                  ;			Bad path (not in curr dir part if present)
 16176                                  ;		error_bad_curr_dir
 16177                                  ;			Bad path in current directory part of path
 16178                                  ;		error_invalid_access
 16179                                  ;			Bad sharing mode or bad access mode or bad combination
 16180                                  ;		error_access_denied
 16181                                  ;			Attempt to open read only file for writting, or
 16182                                  ;			open a directory
 16183                                  ;		error_sharing_violation
 16184                                  ;			The sharing mode was correct but not allowed
 16185                                  ;			generates an INT 24 on compatibility mode SFTs
 16186                                  ; DS preserved, others destroyed
 16187                                  ;----------------------------------------------------------------------------
 16188                                  
 16189                                  DOS_OPEN:
 16190                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 16191                                  
 16192 0000377C C606[F802]00            	MOV	byte [NoSetDir],0
 16193 00003781 E80001                  	CALL	Check_Access_AX
 16194 00003784 721C                    	JC	short do_ret_label		    ; retc
 16195                                  
 16196 00003786 C43E[3605]              	LES	DI,[THISSFT]
 16197 0000378A 30E4                    	XOR	AH,AH
 16198                                  
 16199                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 16200                                  
 16201 0000378C 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 16202 00003790 06                      	PUSH	ES
 16203 00003791 C436[3A05]              	LES	SI,[THISCDS]
 16204                                  	; 18/08/2018
 16205 00003795 83FEFF                  	CMP	SI,-1
 16206 00003798 7509                    	JNZ	short TEST_RE_NET1
 16207 0000379A 07                      	POP	ES
 16208                                  
 16209                                  	; MSDOS 6.0
 16210                                  ;Extended open hooks
 16211                                  	;TEST	byte [EXTOPEN_ON],ext_open_on	;FT. from extnded open		;AN000;
 16212                                  	;JZ	short NOEXTOP 		    ;FT. no, do normal			;AN000;
 16213                                  IFS_extopen:									;AN000;
 16214                                  	;MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 16215                                  	;				    ; with which call was made. This
 16216                                  	;				    ; has the open access bits. 
 16217                                  	;;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 16218                                  	;
 16219                                  	;PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 16220                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 16221                                  	;mov	ax,(MultNET*256)+46 
 16222                                  	;INT	2FH			    ;FT.				;AN000;
 16223                                  	;POP	BX			    ;FT. trash bx			;AN000;
 16224                                  	;MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 16225                                  
 16226                                  ;do_ret_label:
 16227                                  	;retn				    ;FT.				;AN000;
 16228                                  ;NOEXTOP:
 16229                                  ;Extended open hooks
 16230                                  	;
 16231                                  ;IF NOT Installed
 16232                                  	;transfer NET_SEQ_OPEN
 16233                                  ;ELSE
 16234                                  	;
 16235                                  do_net_int2f:
 16236                                  	;
 16237                                  	;test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 16238                                  	;jz	short not_exec_open	; N: just do net open
 16239                                  	;				; Y: check to see if redir is aware
 16240                                  	;				;    of this 
 16241                                  	;
 16242                                  	;				; M042 - start
 16243                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR
 16244                                  	;				; Q: does this redir know how to 
 16245                                  	;				;    this
 16246                                  	;jz	short not_exec_open	; N: just do net open
 16247                                  	;				; Y: set bit 3 of access byte and 
 16248                                  	;				;    set sharing mode to DENY_WRITE
 16249                                  	;				; M042 - end
 16250                                  	;
 16251                                  	; NOTE: This specific mode has not been set for the code assembled
 16252                                  	; under the "NOT Installed" conditional. Currently Installed is 
 16253                                  	; always one.
 16254                                  	;				; M035 - set the bits on the stack
 16255                                  	;mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 16256                                  	;
 16257                                  ;not_exec_open:
 16258                                  
 16259                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16260 0000379B 50                      	PUSH	AX
 16261                                  
 16262                                  	;MOV	AX,(MultNET SHL 8) OR 22
 16263                                  	;INT	2FH
 16264                                  
 16265 0000379C B81611                  	mov     ax,1116h
 16266 0000379F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 16267                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16268                                  			; SDA first filename pointer -> fully-qualified name of file to open
 16269                                  			; STACK: WORD file open mode
 16270                                  			; Return: CF set on error
 16271                                  
 16272 000037A1 5B                      	POP	BX			; clean stack
 16273                                  do_ret_label: ; 09/08/2018
 16274 000037A2 C3                      	retn
 16275                                  ;ENDIF
 16276                                  
 16277                                  TEST_RE_NET1:
 16278 000037A3 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 16279                                  	; 18/08/2018
 16280 000037A9 07                      	POP	ES
 16281                                  	;JZ	short LOCAL_OPEN
 16282                                  
 16283 000037AA 75EF                    	jnz	short do_net_int2f ; (*)
 16284                                  
 16285                                  ;Extended open hooks
 16286                                  	; MSDOS 6.0
 16287                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;FT. from extended open	;AN000;
 16288                                  	;JNZ	short IFS_extopen	      ;FT. isuue extended open	;AN000;
 16289                                  ;Extended open hooks
 16290                                  
 16291                                  ;IF NOT Installed
 16292                                  ;	transfer NET_OPEN
 16293                                  ;ELSE
 16294                                  	;jmp	short do_net_int2f (*)
 16295                                  ;ENDIF
 16296                                  
 16297                                  LOCAL_OPEN:
 16298                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16299 000037AC E8B6E8                  	call	EcritDisk
 16300                                  
 16301                                  ; DOS 3.3 FastOPen 6/16/86
 16302                                  
 16303 000037AF 800E[6E0F]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 16304                                  
 16305 000037B4 E87F10                  	call	GETPATH
 16306                                  
 16307                                  ; DOS 3.3 FastOPen 6/16/86
 16308                                  
 16309 000037B7 731E                    	JNC	short Open_found
 16310 000037B9 7512                    	JNZ	short bad_path2
 16311 000037BB 08C9                    	OR	CL,CL
 16312 000037BD 740E                    	JZ	short bad_path2
 16313                                  
 16314                                  OpenFNF:
 16315 000037BF B80200                  	MOV	AX,error_file_not_found
 16316                                  
 16317                                  OpenBadRet:
 16318                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 16319                                  	; 12/08/2018
 16320                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 16321                                  	; MSDOS 6.0
 16322 000037C2 368026[6E0F]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16323 000037C8 F9                      	STC
 16324 000037C9 E8A1E8                  	call	LcritDisk
 16325                                  	;JMP	Clear_FastOpen ; 10/08/2018
 16326 000037CC C3                      	retn 	; 08/09/2018
 16327                                  
 16328                                  bad_path2:
 16329 000037CD B80300                  	MOV	AX,error_path_not_found
 16330 000037D0 EBF0                    	JMP	short OpenBadRet
 16331                                  
 16332                                  Open_Bad_Access:
 16333 000037D2 B80500                  	MOV	AX,error_access_denied
 16334 000037D5 EBEB                    	JMP	short OpenBadRet
 16335                                  
 16336                                  Open_found:
 16337 000037D7 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 16338 000037D9 08E4                    	OR	AH,AH
 16339 000037DB 783F                    	JS	short open_ok		; Devices don't have attributes
 16340 000037DD 8E06[7605]              	MOV	ES,[CURBUF+2]		; get buffer location
 16341 000037E1 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 16342 000037E5 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 16343 000037E7 75E9                    	JNZ	short Open_Bad_Access
 16344 000037E9 A801                    	TEST	AL,attr_read_only	; check write on read only
 16345 000037EB 742F                    	JZ	short open_ok
 16346                                  ;
 16347                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 16348                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 16349                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 16350                                  ; processing until the actual write operation:
 16351                                  ;
 16352                                  ; If FCB, then we change the mode to be read_only.
 16353                                  ; If net_FCB, then we change the mode to be read_only.
 16354                                  ; If not open for read then error.
 16355                                  ;
 16356 000037ED 1E                      	push	ds
 16357 000037EE 56                      	push	si
 16358 000037EF C536[3605]              	LDS	SI,[THISSFT]
 16359 000037F3 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 16360 000037F6 F7C10080                	TEST	CX,sf_isFCB		; is it FCB?
 16361 000037FA 750A                    	JNZ	short ResetAccess	; yes, reset the access
 16362 000037FC 88CA                    	MOV	DL,CL
 16363 000037FE 80E2F0                  	AND	DL,SHARING_MASK
 16364 00003801 80FA70                  	CMP	DL,SHARING_NET_FCB	; is it net FCB?
 16365 00003804 7508                    	JNZ	short NormalOpen	; no
 16366                                  ResetAccess:
 16367 00003806 83E1F0                  	AND	CX,~access_mask	;0FFF0h	; clear access
 16368                                  ;	OR	CX,open_for_read	; stick in open_for_read
 16369 00003809 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 16370 0000380C EB0C                    	JMP	SHORT FillSFT
 16371                                  ;
 16372                                  ; The SFT is normal.  See if the requested access is open_for_read
 16373                                  ;
 16374                                  NormalOpen:
 16375 0000380E 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 16376 00003811 80F900                  	CMP	CL,open_for_read	; is it open for read?
 16377 00003814 7404                    	JZ	short FillSFT
 16378 00003816 5E                      	pop	si
 16379 00003817 1F                      	pop	ds
 16380 00003818 EBB8                    	JMP	short Open_Bad_Access
 16381                                  ;
 16382                                  ; All done, restore registers and fill the SFT.
 16383                                  ;
 16384                                  FillSFT:
 16385 0000381A 5E                      	pop	si
 16386 0000381B 1F                      	pop	ds
 16387                                  open_ok:
 16388 0000381C E8A619                  	call	DOOPEN			; Fill in SFT
 16389                                  
 16390                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 16391                                  	;12/08/2018
 16392                                  	;AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16393 0000381F 8026[6E0F]80            	and	byte [FastOpenFlg],Fast_yes	
 16394                                  
 16395                                  	; MSDOS 6.0
 16396                                  	;CALL	DO_SHARE_CHECK
 16397                                  	;JNC	short SHARE_OK
 16398                                  	;call	LcritDisk
 16399                                  	;JMP	short Clear_FastOpen	
 16400                                  
 16401                                  	; MSDOS 3.3
 16402                                  DO_SHARE_CHECK:
 16403 00003824 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 16404                                  OpenShareRetry:
 16405 00003828 51                      	push	cx			; Save number left to do
 16406 00003829 E8FE3A                  	call	SHARE_CHECK		; Final Check
 16407 0000382C 59                      	pop	cx			; CX = # left
 16408 0000382D 7312                    	JNC	short SHARE_OK		; No problem with access
 16409 0000382F E850E7                  	call	Idle
 16410 00003832 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 16411                                  OpenShareFail:
 16412 00003834 C43E[3605]              	LES	DI,[THISSFT]
 16413 00003838 E82B00                  	call	SHARE_ERROR
 16414 0000383B 73E7                    	JNC	short DO_SHARE_CHECK	; User wants more retry
 16415                                  	
 16416                                  	;12/08/2018
 16417                                  	;mov	byte [ss:FastOpenFlg],0
 16418                                  	;08/09/2018
 16419                                  	;mov	byte [FastOpenFlg],0
 16420 0000383D E82DE8                  	call	LcritDisk
 16421                                  	;JMP	short Clear_FastOpen
 16422 00003840 C3                      	retn
 16423                                  
 16424                                  SHARE_OK:
 16425                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16426 00003841 B80300                  	MOV	AX,3
 16427 00003844 C43E[3605]              	LES	DI,[THISSFT]
 16428                                  ;if installed
 16429                                  	;call	JShare + 14 * 4
 16430 00003848 FF1E[9400]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 16431                                  ;else
 16432                                  ;	Call	ShSU
 16433                                  ;endif
 16434 0000384C E81EE8                  	call	LcritDisk
 16435                                  	
 16436                                  	;FallThru Set_SFT_Mode
 16437                                  
 16438                                  ;----------------------------------------------------------------------------
 16439                                  ; Procedure Name : SET_SFT_MODE
 16440                                  ;
 16441                                  ; Finish SFT initialization for new reference. Set the correct mode.
 16442                                  ;
 16443                                  ;   Inputs:
 16444                                  ;	ThisSFT points to SFT
 16445                                  ;
 16446                                  ;   Outputs:
 16447                                  ;	Carry clear
 16448                                  ;   Registers modified: AX.
 16449                                  ;---------------------------------------------------------------------------
 16450                                  
 16451                                  ;hkn; called from create. DS already set up to DOSDATA.
 16452                                  
 16453                                  SET_SFT_MODE:
 16454 0000384F C43E[3605]              	LES	DI,[THISSFT]
 16455 00003853 E82416                  	call	DEV_OPEN_SFT
 16456 00003856 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 16457 0000385C 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 16458 0000385E A1[DE02]                	MOV	AX,[CurrentPDB]
 16459 00003861 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 16460                                  
 16461                                  Clear_FastOpen:
 16462 00003865 C3                      	retn			       ;;;;; DOS 3.3
 16463                                  
 16464                                  ;----------------------------------------------------------------------------
 16465                                  ; Procedure Name : SHARE_ERROR
 16466                                  ;
 16467                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 16468                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 16469                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 16470                                  ; really ignore).  Carry clear
 16471                                  ; if user wants a retry. ES, DI, DS preserved
 16472                                  ;---------------------------------------------------------------------------
 16473                                  
 16474                                  SHARE_ERROR:
 16475 00003866 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 16476 0000386C 750C                    	JNZ	short _HARD_ERR
 16477 0000386E 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 16478 00003872 80E1F0                  	AND	CL,SHARING_MASK
 16479 00003875 80F900                  	CMP	CL,SHARING_COMPAT
 16480 00003878 7505                    	JNE	short _NO_HARD_ERR
 16481                                  _HARD_ERR:
 16482 0000387A E8B23A                  	call	SHARE_VIOLATION
 16483                                  	;retnc				; User wants retry
 16484 0000387D 73E6                    	jnc	short Clear_FastOpen
 16485                                  _NO_HARD_ERR:
 16486 0000387F B82000                  	MOV	AX,error_sharing_violation
 16487 00003882 F9                      	STC
 16488 00003883 C3                      	retn
 16489                                  
 16490                                  ; MSDOS 6.0
 16491                                  ;----------------------------------------------------------------------------
 16492                                  ; Procedure Name : DO_SHARE_CHECK
 16493                                  ;
 16494                                  ; Input: THISDPB, WFP_Start, THISSFT set
 16495                                  ; Functions: check file sharing mode is valid
 16496                                  ; Output: carry set, error
 16497                                  ;	  carry clear, share ok
 16498                                  ;----------------------------------------------------------------------------
 16499                                  ;
 16500                                  ;DO_SHARE_CHECK:
 16501                                  ;	call	EcritDisk		; enter critical section
 16502                                  ;OPN_RETRY:
 16503                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 16504                                  ;OpenShareRetry:
 16505                                  ;	push	cx			; Save number left to do
 16506                                  ;	call	SHARE_CHECK		; Final Check
 16507                                  ;	pop	cx			; CX = # left
 16508                                  ;	JNC	short Share_Ok2		; No problem with access
 16509                                  ;	call	Idle
 16510                                  ;	LOOP	OpenShareRetry		; One more retry used up
 16511                                  ;OpenShareFail:
 16512                                  ;	LES	DI,[THISSFT]
 16513                                  ;	call	SHARE_ERROR
 16514                                  ;	JNC	short OPN_RETRY		; User wants more retry
 16515                                  ;Share_Ok2:
 16516                                  ;	call	LcritDisk		; leave critical section
 16517                                  ;	retn
 16518                                  
 16519                                  ;-----------------------------------------------------------------------------
 16520                                  ; Procedure Name : Check_Access
 16521                                  ;
 16522                                  ; Inputs:
 16523                                  ;	AX is mode
 16524                                  ;	  High NIBBLE of AL (Sharing Mode)
 16525                                  ;		sharing_compat	   file is opened in compatibility mode
 16526                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16527                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16528                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16529                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16530                                  ;	  Low NIBBLE of AL (Access Mode)
 16531                                  ;		open_for_read	file is opened for reading
 16532                                  ;		open_for_write	file is opened for writing
 16533                                  ;		open_for_both	file is opened for both reading and writing.
 16534                                  ; Function:
 16535                                  ;	Check this access mode for correctness
 16536                                  ; Outputs:
 16537                                  ;	[open_access] = AL input
 16538                                  ;	Carry Clear
 16539                                  ;		Mode is correct
 16540                                  ;		AX unchanged
 16541                                  ;	Carry Set
 16542                                  ;		Mode is bad
 16543                                  ;		AX = error_invalid_access
 16544                                  ; No other registers effected
 16545                                  ;----------------------------------------------------------------------------
 16546                                  
 16547                                  Check_Access_AX:
 16548                                  
 16549 00003884 A2[0905]                	MOV	[OPEN_ACCESS],AL
 16550 00003887 53                      	PUSH	BX
 16551                                  
 16552                                  ;	If sharing, then test for special sharing mode for FCBs
 16553                                  
 16554 00003888 88C3                    	MOV	BL,AL
 16555 0000388A 80E3F0                  	AND	BL,SHARING_MASK
 16556 0000388D 803E[0D05]FF            	CMP	byte [FSHARING],-1
 16557 00003892 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 16558 00003894 80FB70                  	CMP	BL,SHARING_NET_FCB
 16559 00003897 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 16560                                  CheckShareMode:
 16561 00003899 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 16562 0000389C 770D                    	JA	short Make_Bad_Access
 16563                                  CheckAccessMode:
 16564 0000389E 88C3                    	MOV	BL,AL
 16565 000038A0 80E30F                  	AND	BL,access_mask
 16566 000038A3 80FB02                  	CMP	BL,2
 16567 000038A6 7703                    	JA	short Make_Bad_Access
 16568 000038A8 5B                      	POP	BX
 16569 000038A9 F8                      	CLC
 16570 000038AA C3                      	retn
 16571                                  
 16572                                  Make_Bad_Access:
 16573 000038AB B80C00                  	MOV	AX,error_invalid_access
 16574 000038AE 5B                      	POP	BX
 16575 000038AF F9                      	STC
 16576 000038B0 C3                      	retn
 16577                                  
 16578                                  ;============================================================================
 16579                                  ; DINFO.ASM, MSDOS 6.0, 1991
 16580                                  ;============================================================================
 16581                                  ; 08/08/2018 - Retro DOS v3.0
 16582                                  
 16583                                  ;**	Low level routine for returning disk drive information from a local
 16584                                  ;	  or NET device
 16585                                  ;
 16586                                  ;	DISK_INFO
 16587                                  ;
 16588                                  ;	  Modification history:
 16589                                  ;
 16590                                  ;		Created: ARR 30 March 1983
 16591                                  
 16592                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 16593                                  ;---------------------------------------------------------------------------
 16594                                  ; Procedure Name : DISK_INFO
 16595                                  ;
 16596                                  ; Inputs:
 16597                                  ;	[THISCDS] Points to the Macro List Structure of interest
 16598                                  ;		(It MAY NOT be NUL, error not detected)
 16599                                  ; Function:
 16600                                  ;	Get Interesting Drive Information
 16601                                  ; Returns:
 16602                                  ;	DX = Number of free allocation units
 16603                                  ;	BX = Total Number of allocation units on disk
 16604                                  ;	CX = Sector size
 16605                                  ;	AL = Sectors per allocation unit
 16606                                  ;	AH = FAT ID BYTE
 16607                                  ;	Carry set if error (currently user FAILed to I 24)
 16608                                  ; Segs except ES preserved, others destroyed
 16609                                  ;----------------------------------------------------------------------------
 16610                                  
 16611                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 16612                                  ;hkn; DOSDATA. 
 16613                                  
 16614                                  DISK_INFO:
 16615                                  	; 08/08/2018 - Retro DOS v3.0
 16616                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 16617                                  
 16618 000038B1 E813E7                  	call	TestNet
 16619 000038B4 7306                    	JNC	short LOCAL_DSK_INFO
 16620                                  
 16621                                  ;IF NOT Installed
 16622                                  ;	transfer NET_DISK_INFO
 16623                                  ;ELSE
 16624                                  	;MOV	AX,(MultNET SHL 8) OR 12
 16625                                  	;INT	2FH
 16626                                  	;return
 16627                                  
 16628 000038B6 B80C11                  	mov     ax,110Ch
 16629 000038B9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 16630                                  			; ES:DI -> current directory
 16631                                  			; Return: AL = sectors per cluster, BX = total clusters
 16632                                  			; CX = bytes per sector, DX = number of available clusters
 16633 000038BB C3                      	retn
 16634                                  ;ENDIF
 16635                                  
 16636                                  LOCAL_DSK_INFO:
 16637 000038BC C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16638 000038C1 E8A1E7                  	call	EcritDisk
 16639 000038C4 E8F922                  	call	FATREAD_CDS		; perform media check.
 16640 000038C7 7241                    	JC	short CRIT_LEAVE
 16641 000038C9 BB0200                  	MOV	BX,2
 16642 000038CC E88321                  	call	UNPACK			; Get first FAT sector into CURBUF
 16643 000038CF 7239                    	JC	short CRIT_LEAVE
 16644 000038D1 C536[7405]              	LDS	SI,[CURBUF]
 16645 000038D5 8A6410                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 16646                                  
 16647                                  ;hkn; SS is DOSDATA
 16648 000038D8 16                      	push	ss
 16649 000038D9 1F                      	pop	ds
 16650 000038DA 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 16651                                  ;
 16652                                  ; Examine the current free count.  If it indicates that we have an invalid
 16653                                  ; count, do the expensive calculation.
 16654                                  ;
 16655 000038DE 268B561E                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 16656 000038E2 83FAFF                  	CMP	DX,-1			; is it valid?
 16657 000038E5 7404                    	JZ	short DoScan
 16658                                  ;
 16659                                  ; Check to see if it is in a reasonalbe range.	If so, trust it and return.
 16660                                  ; Otherwise, we need to blast out an internal error message and then recompute
 16661                                  ; the count.
 16662                                  ;
 16663 000038E7 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 16664 000038E9 7223                    	JB	short GotVal		; yes, trust it.
 16665                                  DoScan:
 16666 000038EB 31D2                    	XOR	DX,DX
 16667 000038ED 49                      	DEC	CX
 16668                                  SCANFREE:
 16669 000038EE E86121                  	call	UNPACK
 16670 000038F1 7217                    	JC	short CRIT_LEAVE
 16671 000038F3 7501                    	JNZ	short NOTFREECLUS
 16672 000038F5 42                      	INC	DX			; A free one
 16673                                  NOTFREECLUS:
 16674 000038F6 43                      	INC	BX			; Next cluster
 16675 000038F7 E2F5                    	LOOP	SCANFREE
 16676 000038F9 4B                      	DEC	BX			; BX was next cluster.	Convert to
 16677                                  ReturnVals:
 16678 000038FA 4B                      	DEC	BX			; count
 16679 000038FB 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK] 
 16680 000038FF FEC0                    	INC	AL			; Sectors/cluster
 16681 00003901 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 16682 00003905 2689561E                	MOV	[ES:BP+DPB.FREE_CNT],DX
 16683 00003909 F8                      	CLC
 16684                                  CRIT_LEAVE:
 16685 0000390A E860E7                  	call	LcritDisk
 16686 0000390D C3                      	retn
 16687                                  ;
 16688                                  ; We have correctly computed everything previously. Load up registers for
 16689                                  ; return.
 16690                                  ;
 16691                                  GotVal: 
 16692 0000390E 89CB                    	MOV	BX,CX			; get cluster count
 16693 00003910 EBE8                    	JMP	short ReturnVals
 16694                                  
 16695                                  ;============================================================================
 16696                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 16697                                  ;============================================================================
 16698                                  ; 22/07/2018 - Retro DOS v3.0
 16699                                  
 16700                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 16701                                  ;	NAME	DOS_SEARCH
 16702                                  
 16703                                  ;**	Low level routines for doing local and NET directory searches
 16704                                  ;
 16705                                  ;	DOS_SEARCH_FIRST
 16706                                  ;	DOS_SEARCH_NEXT
 16707                                  ;	RENAME_NEXT
 16708                                  ;
 16709                                  ;	Revision history:
 16710                                  ;
 16711                                  ;	    Created: ARR 30 March 1983
 16712                                  ;	    A000	version 4.00  Jan. 1988
 16713                                  ;	    A001	PTM 3564 -- search for fastopen
 16714                                  
 16715                                  ;Installed = TRUE
 16716                                  
 16717                                  ;--------------------------------------------------------------------------
 16718                                  ;
 16719                                  ; Procedure Name : DOS_SEARCH_FIRST
 16720                                  ;
 16721                                  ; Inputs:
 16722                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16723                                  ;		terminated)
 16724                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16725                                  ;		( = -1 if current dir not involved, else
 16726                                  ;		 Points to first char after last "/" of current dir part)
 16727                                  ;	[THISCDS] Points to CDS being used
 16728                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16729                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16730                                  ;	[DMAADD] Points to 53 byte buffer
 16731                                  ; Function:
 16732                                  ;	Initiate a search for the given file spec
 16733                                  ; Outputs:
 16734                                  ;	CARRY CLEAR
 16735                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 16736                                  ;
 16737                                  ;	LOCAL
 16738                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 16739                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 16740                                  ;	    11 byte search name with Meta chars in it
 16741                                  ;	    Search Attribute Byte, attribute of search
 16742                                  ;	    WORD LastEnt value
 16743                                  ;	    WORD DirStart
 16744                                  ;	    4 byte pad
 16745                                  ;	    32 bytes of the directory entry found
 16746                                  ;	NET
 16747                                  ;	    21 bytes First byte has high bit set
 16748                                  ;	    32 bytes of the directory entry found
 16749                                  ;
 16750                                  ;	CARRY SET
 16751                                  ;	    AX = error code
 16752                                  ;		error_no_more_files
 16753                                  ;			No match for this file
 16754                                  ;		error_path_not_found
 16755                                  ;			Bad path (not in curr dir part if present)
 16756                                  ;		error_bad_curr_dir
 16757                                  ;			Bad path in current directory part of path
 16758                                  ; DS preserved, others destroyed
 16759                                  ;---------------------------------------------------------------------------
 16760                                  
 16761                                  DOS_SEARCH_FIRST:
 16762                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 16763                                  
 16764 00003912 C43E[3A05]              	LES	DI,[THISCDS]
 16765 00003916 83FFFF                  	CMP	DI,-1
 16766 00003919 7506                    	JNZ	short TEST_RE_NET2
 16767                                  
 16768                                  ;IF NOT Installed
 16769                                  ;	transfer NET_SEQ_SEARCH_FIRST
 16770                                  ;ELSE
 16771                                  	;mov	ax,1119h
 16772 0000391B B81911                  	MOV	AX,(MultNET<<8)|25
 16773 0000391E CD2F                    	INT	2Fh
 16774 00003920 C3                      	retn
 16775                                  ;ENDIF
 16776                                  
 16777                                  TEST_RE_NET2:
 16778                                  	;test	word [es:di+43h],8000h
 16779 00003921 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 16780 00003927 7406                    	JZ	short LOCAL_SEARCH_FIRST
 16781                                  
 16782                                  ;IF NOT Installed
 16783                                  ;	transfer NET_SEARCH_FIRST
 16784                                  ;ELSE
 16785                                  	;mov	ax,111Bh
 16786 00003929 B81B11                  	MOV	AX,(MultNET<<8)|27
 16787 0000392C CD2F                    	INT	2FH
 16788 0000392E C3                      	retn
 16789                                  ;ENDIF
 16790                                  
 16791                                  LOCAL_SEARCH_FIRST:
 16792 0000392F E833E7                  	call	EcritDisk
 16793                                  	; MSDOS 6.0
 16794                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 16795                                  	;JZ	short NOFN			;AN000;
 16796                                  	;OR	byte [FastOpenflg],Fastopen_Set	;AN000;
 16797                                  ;NOFN:						;AN000;
 16798 00003932 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16799                                  	; MSDOS 6.0
 16800                                  	;CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 16801                                  	;JNC	short norm_GETPATH	;AN000;;FO. no
 16802                                  	;AND	byte [FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16803                                  ;norm_GETPATH:
 16804 00003937 E8FC0E                  	call	GETPATH
 16805                                  	; BX = offset NAME1
 16806                                  ;_getdone:
 16807 0000393A 7313                    	JNC	short find_check_dev
 16808 0000393C 750C                    	JNZ	short bad_path3
 16809 0000393E 08C9                    	OR	CL,CL
 16810 00003940 7408                    	JZ	short bad_path3
 16811                                  find_no_more:
 16812                                  	;mov	ax,12h
 16813 00003942 B81200                  	MOV	AX,error_no_more_files
 16814                                  BadBye:
 16815                                  	; MSDOS 6.0
 16816                                  	;AND	[SS:FastOpenflg],Fast_yes  ;AN000;;FO. reset fastopen
 16817                                  
 16818 00003945 F9                      	STC
 16819 00003946 E824E7                  	call	LcritDisk
 16820 00003949 C3                      	retn
 16821                                  
 16822                                  bad_path3:
 16823                                  	;mov	ax,3
 16824 0000394A B80300                  	MOV	AX,error_path_not_found
 16825 0000394D EBF6                    	JMP	short BadBye
 16826                                  
 16827                                  find_check_dev:
 16828 0000394F 08E4                    	OR	AH,AH
 16829 00003951 790A                    	JNS	short found_entry
 16830 00003953 C706[F402]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 16831 00003959 FE06[0B05]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 16832                                  found_entry:
 16833                                  ;
 16834                                  ; We set the physical drive byte here Instead of after found_it; Doing
 16835                                  ; a search-next may not have wfp_start set correctly
 16836                                  ;
 16837 0000395D C43E[DA02]              	LES	DI,[DMAADD]
 16838 00003961 8B36[4A05]              	MOV	SI,[WFP_START]		; get pointer to beginning
 16839 00003965 AC                      	LODSB
 16840 00003966 2C40                    	SUB	AL,'A'-1                ; logical drive
 16841 00003968 AA                      	STOSB				; High bit not set (local)
 16842                                  found_it:
 16843 00003969 C43E[DA02]              	LES	DI,[DMAADD]
 16844 0000396D 47                      	INC	DI
 16845                                  
 16846                                  	; MSDOS 6.0
 16847                                  	;PUSH	DS				  ;FO.;AN001; save ds
 16848                                  	;TEST	byte [Fastopenflg],Set_For_Search ;FO.;AN001; from fastopen
 16849                                  	;JZ	short notfast 			  ;FO.;AN001;
 16850                                  	;MOV	SI,BX				  ;FO.;AN001;
 16851                                  	;MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 16852                                  	;JMP	SHORT movmov			  ;FO.;AN001;
 16853                                  
 16854                                  notfast:
 16855 0000396E BE[E604]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 16856                                  movmov:
 16857                                  ; Special E5 code
 16858 00003971 A4                      	MOVSB
 16859 00003972 26807DFF05              	CMP	BYTE [ES:DI-1],5
 16860 00003977 7505                    	JNZ	short NOTKANJB
 16861 00003979 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 16862                                  NOTKANJB:
 16863 0000397E B90A00                  	MOV	CX,10
 16864 00003981 F3A4                    	REP	MOVSB
 16865                                  
 16866                                  	; 08/09/2018
 16867                                  	;POP	DS			;FO.;AN001; restore ds
 16868                                  
 16869 00003983 A0[0605]                	MOV	AL,[ATTRIB]
 16870 00003986 AA                      	STOSB
 16871 00003987 50                      	PUSH	AX			; Save AH device info
 16872 00003988 A1[F402]                	MOV	AX,[LASTENT]
 16873 0000398B AB                      	STOSW
 16874 0000398C A1[5805]                	MOV	AX,[DIRSTART]
 16875 0000398F AB                      	STOSW
 16876                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 16877 00003990 83C704                  	ADD	DI,4
 16878 00003993 58                      	POP	AX			; Recover AH device info
 16879 00003994 08E4                    	OR	AH,AH
 16880 00003996 7813                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 16881 00003998 833E[7405]FF            	CMP	WORD [CURBUF],-1
 16882 0000399D 7508                    	JNZ	short OKSTORE
 16883                                  
 16884                                  	; MSDOS 6.0
 16885                                  	;TEST	byte [FastOPenFlg],Set_For_Search
 16886                                  					;AN000;;FO. from fastopen and is good
 16887                                  	;JNZ	short OKSTORE		;AN000;;FO.
 16888                                  
 16889                                  	; The user has specified the root directory itself, rather than some
 16890                                  	; contents of it. We can't "find" that.
 16891 0000399F 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 16892                                  					;   stuffing a -1 at Lastent
 16893 000039A5 EB9B                    	JMP	short find_no_more
 16894                                  
 16895                                  OKSTORE:
 16896 000039A7 8E1E[7605]              	MOV	DS,[CURBUF+2]
 16897                                  DOSREL:
 16898                                  	; BX = offset NAME1 (from GETPATH)
 16899 000039AB 89DE                    	MOV	SI,BX			; SI-> start of entry
 16900                                  
 16901                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 16902                                  
 16903                                  	;mov	cx,32
 16904 000039AD B92000                  	MOV	CX,dir_entry.size
 16905                                  ;;;;; 7/29/86
 16906 000039B0 89F8                    	MOV	AX,DI			; save the 1st byte addr
 16907 000039B2 F3A4                    	REP	MOVSB
 16908 000039B4 89C7                    	MOV	DI,AX			; restore 1st byte addr
 16909 000039B6 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 16910 000039BA 7504                    	JNZ	short NO05
 16911 000039BC 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 16912                                  NO05:
 16913                                  
 16914                                  ;;;;; 7/29/86
 16915                                  
 16916                                  ;hkn; FastOpenflg is in DOSDATA use SS
 16917                                  	; MSDOS 6.0
 16918                                  	;AND	byte [SS:FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16919                                  	;push	ss
 16920                                  	;pop	ds
 16921                                  	;AND	byte [FastOpenflg],Fast_yes
 16922                                  
 16923                                  ;hkn; SS is DOSDATA
 16924 000039C0 16                      	push	ss
 16925 000039C1 1F                      	pop	ds
 16926 000039C2 F8                      	CLC
 16927 000039C3 E8A7E6                  	call	LcritDisk
 16928 000039C6 C3                      	retn
 16929                                  
 16930                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 16931                                  ;----------------------------------------------------------------------------
 16932                                  ;
 16933                                  ; Procedure Name : DOS_SEARCH_NEXT
 16934                                  ;
 16935                                  ; Inputs:
 16936                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 16937                                  ;	    (only first 21 bytes must have valid information)
 16938                                  ; Function:
 16939                                  ;	Look for subsequent matches
 16940                                  ; Outputs:
 16941                                  ;	CARRY CLEAR
 16942                                  ;	    The 53 bytes at DMAADD are updated for next call
 16943                                  ;		(see DOS_SEARCH_FIRST)
 16944                                  ;	CARRY SET
 16945                                  ;	    AX = error code
 16946                                  ;		error_no_more_files
 16947                                  ;			No more files to find
 16948                                  ; DS preserved, others destroyed
 16949                                  ;---------------------------------------------------------------------------
 16950                                  
 16951                                  ;hkn; called from search.asm. DS already set up at this point.
 16952                                  
 16953                                  DOS_SEARCH_NEXT:
 16954 000039C7 C43E[DA02]              	LES	DI,[DMAADD]
 16955 000039CB 268A05                  	MOV	AL,[ES:DI]
 16956 000039CE A880                    	TEST	AL,80H			; Test for NET
 16957 000039D0 7406                    	JZ	short LOCAL_SEARCH_NEXT
 16958                                  ;IF NOT Installed
 16959                                  ;	transfer NET_SEARCH_NEXT
 16960                                  ;ELSE
 16961                                  	;mov	ax,111Ch
 16962 000039D2 B81C11                  	MOV	AX,(MultNET<<8)|28
 16963 000039D5 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 16964                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 16965                                  		     ; Return: CF set on error, AX = DOS error code
 16966                                  		     ; CF clear if successful
 16967 000039D7 C3                      	retn
 16968                                  ;ENDIF
 16969                                  
 16970                                  LOCAL_SEARCH_NEXT:
 16971                                  	;AL is drive A=1
 16972                                  	;mov	byte [EXTERR_LOCUS],2
 16973 000039D8 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16974 000039DD E885E6                  	call	EcritDisk
 16975                                  
 16976                                  ;hkn; DummyCDS is in DOSDATA
 16977 000039E0 C706[3A05][9504]        	MOV     word [THISCDS],DUMMYCDS
 16978                                  ;hkn; Segment address is DOSDATA - use ds
 16979                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 16980 000039E6 8C1E[3C05]              	mov	[THISCDS+2],DS
 16981                                  
 16982 000039EA 0440                    	ADD	AL,'A'-1
 16983 000039EC E8CD2E                  	call	InitCDS
 16984                                  
 16985                                  ;	call	GETTHISDRV		; Set CDS pointer
 16986                                  
 16987 000039EF 7236                    	JC	short No_files		; Bogus drive letter
 16988 000039F1 C43E[3A05]              	LES	DI,[THISCDS]		; Get CDS pointer
 16989                                  	;les	bp,[es:di+45h]
 16990 000039F5 26C46D45                	LES	BP,[ES:DI+curdir.devptr]; Get DPB pointer
 16991 000039F9 E8F8DC                  	call	GOTDPB			; [THISDPB] = ES:BP
 16992                                  
 16993 000039FC 268A4600                	mov	al,[ES:BP]
 16994                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 16995 00003A00 A2[1105]                	mov	[THISDRV],AL
 16996                                  	;mov	word [CREATING], 0E500h
 16997 00003A03 C706[1805]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 16998 00003A09 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16999 00003A0E C536[DA02]              	LDS	SI,[DMAADD]
 17000 00003A12 AC                      	LODSB				; Drive Byte
 17001                                  
 17002                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 17003                                  RENAME_NEXT:
 17004                                  	;context ES
 17005 00003A13 16                      	push	ss
 17006 00003A14 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 17007                                  
 17008                                  ;hkn; NAME1 is in DOSDATA
 17009 00003A15 BF[E604]                	MOV	DI,NAME1
 17010                                  
 17011 00003A18 B90B00                  	MOV	CX,11
 17012 00003A1B F3A4                    	REP	MOVSB			; Search name
 17013 00003A1D AC                      	LODSB				; Attribute
 17014                                  
 17015                                  ;hkn; SS override
 17016 00003A1E 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17017 00003A22 AD                      	LODSW				; LastEnt
 17018 00003A23 09C0                    	OR	AX,AX
 17019 00003A25 7903                    	JNS	short cont_load
 17020                                  No_files:
 17021 00003A27 E918FF                  	JMP	find_no_more
 17022                                  
 17023                                  cont_load:
 17024 00003A2A 50                      	PUSH	AX			; Save LastEnt
 17025 00003A2B AD                      	LODSW				; DirStart
 17026 00003A2C 89C3                    	MOV	BX,AX
 17027                                  
 17028                                  ;hkn; SS is DOSDATA
 17029                                  	;context DS
 17030 00003A2E 16                      	push	ss
 17031 00003A2F 1F                      	pop	ds
 17032 00003A30 C42E[2405]              	LES	BP,[THISDPB]		; Recover ES:BP
 17033                                  	;invoke	SetDirSrch
 17034 00003A34 E8AA0D                  	call	SETDIRSRCH
 17035 00003A37 7303                    	JNC	short SEARCH_GOON
 17036 00003A39 58                      	POP	AX			; Clean stack
 17037 00003A3A EBEB                    	JMP	short No_files
 17038                                  
 17039                                  SEARCH_GOON:
 17040 00003A3C E88110                  	call	STARTSRCH
 17041 00003A3F 58                      	POP	AX
 17042 00003A40 E8700D                  	call	GETENT
 17043 00003A43 72E2                    	JC	short No_files
 17044 00003A45 E8AF0C                  	call	NEXTENT
 17045 00003A48 72DD                    	JC	short No_files
 17046 00003A4A 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 17047 00003A4C E91AFF                  	JMP	found_it ; 10/08/2018
 17048                                  
 17049                                  ; MSDOS6.0
 17050                                  ;---------------------------------------------------------------------------
 17051                                  ;
 17052                                  ; Procedure Name : CHECK_QUESTION
 17053                                  ;
 17054                                  ; Input: [WFP_START]= pointer to final path
 17055                                  ; Function: check '?' char
 17056                                  ; Output: carry clear, if no '?'
 17057                                  ;	 carry set, if '?' exists
 17058                                  ;---------------------------------------------------------------------------
 17059                                  
 17060                                  ;CHECK_QUESTION:
 17061                                  ;;hkn;	wfp_start is in DOSDATA;hkn;	MOV     WORD PTR ThisCDS+2,CS
 17062                                  ;;hkn;	PUSH	CS			;AN000;;FO.
 17063                                  ;	push	ss
 17064                                  ;
 17065                                  ;	POP	DS			;AN000;;FO. ds:si -> final path
 17066                                  ;	MOV	SI,[WFP_START]		;AN000;;FO.
 17067                                  ;getnext:				;AN000;
 17068                                  ;	LODSB				;AN000;;FO. get char
 17069                                  ;	OR	AL,AL			;AN000;;FO. is it null
 17070                                  ;	JZ	short NO_Question	;AN000;;FO. yes
 17071                                  ;	CMP	AL,'?'                  ;AN000;;FO. is '?'
 17072                                  ;	JNZ	short getnext 		;AN000;;FO. no
 17073                                  ;	STC				;AN000;;FO.
 17074                                  ;NO_Question:				;AN000;
 17075                                  ;	retn				;AN000;;FO.
 17076                                  
 17077                                  ;============================================================================
 17078                                  ; ABORT.ASM, MSDOS 6.0, 1991
 17079                                  ;============================================================================
 17080                                  ; 23/07/2018 - Retro DOS v3.0
 17081                                  
 17082                                  ;**
 17083                                  ;
 17084                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 17085                                  ;  If process has NET resources a close all is sent out over the net.
 17086                                  ;
 17087                                  ;   DOS_ABORT
 17088                                  ;
 17089                                  ;   Modification history:
 17090                                  ;
 17091                                  ;       Created: ARR 30 March 1983
 17092                                  ;
 17093                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 17094                                  ;				being terminated only if it is busy.
 17095                                  ;
 17096                                  
 17097                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 17098                                  ;--------------------------------------------------------------------------
 17099                                  ;
 17100                                  ; Procedure Name : DOS_ABORT
 17101                                  ;
 17102                                  ; Inputs:
 17103                                  ;       [CurrentPDB] set to PID of process aborting
 17104                                  ; Function:
 17105                                  ;       Close all files and free all SFTs for this PID
 17106                                  ; Returns:
 17107                                  ;       None
 17108                                  ; All destroyed except stack
 17109                                  ;---------------------------------------------------------------------------
 17110                                  
 17111                                  DOS_ABORT:
 17112 00003A4F 368E06[DE02]            	MOV     ES,[SS:CurrentPDB]	; SS override
 17113 00003A54 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 17114                                  reset_free_jfn:
 17115 00003A59 89CB                    	MOV     BX,CX
 17116 00003A5B 51                      	PUSH    CX
 17117 00003A5C 4B                      	DEC     BX                      ; get jfn (start with last one)
 17118                                  
 17119 00003A5D E86833                  	CALL	_$CLOSE
 17120 00003A60 59                      	POP     CX
 17121 00003A61 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 17122                                  ;
 17123                                  ; Note:  We do need to explicitly close FCBs. Reasons are as follows: If we
 17124                                  ; are running in the no-sharing no-network environment, we are simulating the
 17125                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 17126                                  ; BUT...  the cache remains in a state with garbage that may be reused by the
 17127                                  ; next process.  We scan the set and blast the ref counts of the FCBs we own.
 17128                                  ;
 17129                                  ; If sharing is loaded, then the following call to close process will
 17130                                  ; correctly close all FCBs.  We will then need to walk the list AFTER here.
 17131                                  ;
 17132                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 17133                                  ; known network resources.  These resources are then responsible for cleaning
 17134                                  ; up after this process.
 17135                                  ;
 17136                                  ; Sleazy, eh?
 17137                                  ;
 17138                                  	;context DS			; SS is DOSDATA
 17139 00003A63 16                      	push	ss
 17140 00003A64 1F                      	pop	ds  ; 09/09/2018
 17141                                  
 17142                                  	;CallInstall Net_Abort, MultNET, 29
 17143 00003A65 B81D11                  	mov	ax, 111Dh
 17144 00003A68 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 17145                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 17146                                  			; DS???, SS = DOS CS
 17147                                  ;if installed
 17148 00003A6A FF1E[6C00]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 17149                                  ;else
 17150                                  ;	call 	mftCloseP
 17151                                  ;endif
 17152                                  
 17153                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 17154                                  ; counts.
 17155                                  					; SS override
 17156 00003A6E 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 17157                                  	;mov	cx,[es:di+4]
 17158 00003A73 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 17159 00003A77 E317                    	jcxz    FCBScanDone
 17160                                  	;lea	di,[di+6]
 17161 00003A79 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 17162 00003A7C 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17163                                  FCBTest:
 17164                                  	;cmp	[es:di+31h],ax
 17165 00003A80 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 17166 00003A84 7505                    	jnz	short FCBNext		; no, skip it
 17167 00003A86 26C7050000              	mov	word [es:di],0
 17168                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 17169                                  FCBNext:
 17170 00003A8B 83C735                  	add     di,SF_ENTRY.size
 17171 00003A8E E2F0                    	loop    FCBTest
 17172                                  FCBScanDone:
 17173                                  
 17174                                  ;
 17175                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 17176                                  ;
 17177 00003A90 31DB                    	XOR     BX,BX
 17178                                  Scan:
 17179 00003A92 53                      	push    bx
 17180 00003A93 E8812D                  	call	SFFromSFN
 17181 00003A96 5B                      	pop     bx
 17182 00003A97 7301                    	jnc     short Scan1
 17183 00003A99 C3                      	retn
 17184                                  
 17185                                  ;M038
 17186                                  ; Do what the comment above says, check for busy state
 17187                                  ;
 17188                                  Scan1:
 17189                                  	;cmp	word [es:di],0
 17190                                  	;jz	short scan_next  ; MSDOS 3.3
 17191                                  	; MSDOS6.0
 17192 00003A9A 26833DFF                	cmp	word [es:di],sf_busy ; -1
 17193                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 17194                                  				; Is Sft busy? ;M038
 17195 00003A9E 7519                    	jnz	short scan_next
 17196                                  ;
 17197                                  ; we have a SFT that is busy. See if it is for the current process
 17198                                  ;
 17199 00003AA0 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17200                                  	;cmp	[es:di+31h],ax
 17201 00003AA4 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 17202 00003AA8 750F                    	jnz	short scan_next
 17203 00003AAA 36A1[EA02]              	mov     ax,[SS:USER_ID]		; SS override
 17204                                  	;cmp	[es:di+2Fh],ax
 17205 00003AAE 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 17206 00003AB2 7505                    	jnz	short scan_next
 17207                                  ;
 17208                                  ; This SFT is labelled as ours.
 17209                                  ;
 17210 00003AB4 26C7050000              	mov	word [es:di],0
 17211                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 17212                                  scan_next:
 17213 00003AB9 43                      	inc     bx
 17214 00003ABA EBD6                    	jmp     short Scan
 17215                                  
 17216                                  
 17217                                  ;============================================================================
 17218                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 17219                                  ;============================================================================
 17220                                  ; 23/07/2018 - Retro DOS v3.0
 17221                                  
 17222                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 17223                                  ;
 17224                                  ;	DOS_CLOSE
 17225                                  ;	DOS_COMMIT
 17226                                  ;	FREE_SFT
 17227                                  ;	SetSFTTimes
 17228                                  ;
 17229                                  ;	Revision history:
 17230                                  ;
 17231                                  ;	   AN000  version 4.00	Jan. 1988
 17232                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 17233                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 17234                                  
 17235                                  ;Installed = TRUE
 17236                                  
 17237                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 17238                                  ;---------------------------------------------------------------------------
 17239                                  ;
 17240                                  ; Procedure Name : DOS_CLOSE
 17241                                  ;
 17242                                  ; Inputs:
 17243                                  ;	[THISSFT] set to the SFT for the file being used
 17244                                  ; Function:
 17245                                  ;	Close the indicated file via the SFT
 17246                                  ; Returns:
 17247                                  ;	sf_ref_count decremented otherwise
 17248                                  ;	ES:DI point to SFT
 17249                                  ;	Carry set if error
 17250                                  ;	    AX has error code
 17251                                  ; DS preserved, others destroyed
 17252                                  ;---------------------------------------------------------------------------
 17253                                  
 17254                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 17255                                  
 17256                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 17257                                  
 17258                                  DOS_CLOSE:
 17259 00003ABC C43E[3605]              	LES	DI,[THISSFT]
 17260                                  	;mov	bx,[ES:DI+5]
 17261 00003AC0 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17262                                  
 17263                                  ;	Network closes are handled entirely by the net code.
 17264                                  
 17265                                  	;test	bx,8000h
 17266 00003AC4 F7C30080                	TEST	BX,sf_isnet
 17267 00003AC8 7406                    	JZ	short LocalClose
 17268                                  
 17269                                  	;CallInstall Net_Close,MultNET,6
 17270 00003ACA B80611                  	mov     ax, 1106h
 17271 00003ACD CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 17272                                  			; ES:DI -> SFT
 17273                                  			; SFT DPB field -> DPB of drive containing file
 17274                                  			; Return: CF set on error, AX = DOS error code
 17275                                  			; CF clear if successful
 17276 00003ACF C3                      	retn
 17277                                  
 17278                                  ;
 17279                                  ; All closes release the sharing information.
 17280                                  ; No commit releases sharing information
 17281                                  ;
 17282                                  ; All closes decrement the ref count.
 17283                                  ; No commit decrements the ref count.
 17284                                  ;
 17285                                  LocalClose:
 17286 00003AD0 E892E5                  	call	EcritDisk
 17287 00003AD3 E80E01                  	CALL	SetSFTTimes
 17288 00003AD6 E89D00                  	CALL	FREE_SFT		; dec ref count or mark as busy
 17289                                  
 17290                                  ;hkn; SS is DOSDATA
 17291                                  	;Context DS
 17292 00003AD9 16                      	push	ss
 17293 00003ADA 1F                      	pop	ds
 17294                                  
 17295 00003ADB 50                      	push	ax
 17296 00003ADC 53                      	push	bx
 17297 00003ADD E87538                  	call	ShareEnd
 17298 00003AE0 5B                      	pop	bx
 17299 00003AE1 58                      	pop	ax
 17300                                  ;
 17301                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 17302                                  ;
 17303                                  CloseEntry:
 17304 00003AE2 50                      	PUSH	AX
 17305                                  ;
 17306                                  ; File clean or device does not get stamped nor disk looked at.
 17307                                  ;
 17308                                  	;test	bx,0C0h
 17309 00003AE3 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17310                                  	;JZ	short rdir
 17311                                  	;JMP	FREE_SFT_OK		; either clean or device
 17312 00003AE7 757A                    	jnz	short FREE_SFT_OK
 17313                                  ;
 17314                                  ; Retrieve the directory entry for the file
 17315                                  ;
 17316                                  rdir:
 17317 00003AE9 E89700                  	CALL	DirFromSFT
 17318                                  	;mov	al,5
 17319 00003AEC B005                    	MOV	AL,error_access_denied
 17320                                  	;JNC	short clook
 17321                                  	;JMP	CloseFinish		; pretend the close worked.
 17322 00003AEE 7274                    	jc	short CloseFinish
 17323                                  clook:
 17324                                  ;
 17325                                  ; ES:DI points to entry
 17326                                  ; DS:SI points to SFT
 17327                                  ; ES:BX points to buffer header
 17328                                  ;
 17329 00003AF0 57                      	push	di
 17330 00003AF1 56                      	push	si
 17331                                  	;lea	si,[si+20h] ; MSDOS 3.3
 17332 00003AF2 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 17333                                  ;
 17334                                  ; ES:DI point to directory entry
 17335                                  ; DS:SI point to unpacked name
 17336                                  ;
 17337 00003AF5 E883E4                  	call	XCHGP
 17338                                  ;
 17339                                  ; ES:DI point to unpacked name
 17340                                  ; DS:SI point to directory entry
 17341                                  ;
 17342 00003AF8 E85A0C                  	call	MetaCompare
 17343 00003AFB E87DE4                  	call	XCHGP
 17344 00003AFE 5E                      	pop	si
 17345 00003AFF 5F                      	pop	di
 17346 00003B00 740B                    	JZ	short CLOSE_GO		; Name OK
 17347                                  Bye:	
 17348 00003B02 89F7                    	MOV	DI,SI
 17349 00003B04 1E                      	PUSH	DS
 17350 00003B05 07                      	POP	ES			; ES:DI points to SFT
 17351 00003B06 16                      	PUSH	SS
 17352 00003B07 1F                      	POP	DS
 17353 00003B08 F9                      	STC
 17354                                  	;mov	al,2
 17355 00003B09 B002                    	MOV	AL,error_file_not_found
 17356 00003B0B EB57                    	JMP	short CloseFinish
 17357                                  
 17358                                  CLOSE_GO:
 17359                                  	; MSDOS 6.0
 17360                                  	;TEST	[SI+SF_ENTRY.sf_mode],sf_isFCB	; FCB ?
 17361                                  	;JZ	short nofcb		; no, set dir attr, sf_attr
 17362                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17363                                  	;mov	ch,[es:di+0Bh]
 17364 00003B0D 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 17365                                  	;mov	al,[si+4]
 17366 00003B11 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 17367                                  
 17368                                  ;hkn; SS override
 17369 00003B14 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17370                                  	; MSDOS 3.3
 17371 00003B18 E8B90F                  	call	MatchAttributes
 17372 00003B1B 75E5                    	JNZ	short Bye		; attributes do not match
 17373                                  	;JMP	SHORT setattr		;FT.
 17374                                  	; MSDOS 6.0
 17375                                  ;nofcb:
 17376                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 17377                                  	;MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 17378                                  setattr:
 17379                                  	; MSDOS 3.3 (& MSDOS6.0)
 17380                                  	;or	byte [es:di+0Bh],20h
 17381 00003B1D 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 17382                                  	; MSDOS6.0
 17383                                  	;MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 17384                                  					;F.O. save old first cluster
 17385                                  ;hkn; SS override
 17386                                  	;MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 17387                                  
 17388                                  	;mov	ax,[si+0Bh]
 17389 00003B22 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 17390                                  	;mov	[es:di+1Ah],ax
 17391 00003B25 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 17392                                  	;mov	ax,[si+11h]
 17393 00003B29 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 17394                                  	;mov	[es:di+1Ch],ax
 17395 00003B2C 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 17396                                  	;mov	ax,[si+13h]
 17397 00003B30 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 17398                                  	;mov	[es:di+1Eh],ax
 17399 00003B33 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 17400                                  	;mov	ax,[si+0Fh]
 17401 00003B37 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 17402                                  	;mov	[es:di+18h],ax
 17403 00003B3A 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 17404                                  	;mov	ax,[si+0Dh]
 17405 00003B3E 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 17406                                  	;mov	[es:di+16h],ax
 17407 00003B41 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 17408                                  
 17409                                  	; MSDOS 6.0
 17410                                  ;; File Tagging
 17411                                  	;TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 17412                                  	;			  ;LB. if already dirty		    ;AN000;
 17413                                  	;JNZ	short yesdirty	  ;LB.  don't increment dirty count ;AN000;
 17414                                  	;call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 17415                                  	; MSDOS 3.3 (& MSDOS6.0)
 17416                                  	;or	byte [es:bx+5],40h
 17417 00003B45 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 17418                                  yesdirty:
 17419 00003B4A 1E                      	push	ds
 17420 00003B4B 56                      	push	si
 17421                                  	; MSDOS 6.0
 17422                                  	;MOV	CX,[SI.sf_firclus]	; do this for Fastopen
 17423                                  
 17424                                  ;hkn; SS override
 17425                                  	;MOV	AL,[SS:THISDRV]
 17426                                  	; MSDOS3.3 
 17427 00003B4C 16                      	push	ss
 17428 00003B4D 1F                      	pop	ds
 17429 00003B4E A0[1105]                	MOV	AL,[THISDRV]
 17430                                  ;;; 10/1/86  update fastopen cache
 17431                                  	; MSDOS 3.3 (& MSDOS6.0)
 17432 00003B51 52                      	PUSH	DX
 17433 00003B52 B400                    	MOV	AH,0			; dir entry update
 17434 00003B54 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 17435                                  	; MSDOS 6.0
 17436                                  	;OR	CX,CX			;AN005; first cluster 0; may be truncated
 17437                                  	;JNZ	short do_update2	;AN005; no, do update
 17438                                  	;MOV	AH,3			;AN005; do a delete cache entry
 17439                                  	;MOV	DI,[SI+SF_ENTRY.sf_dirsec]   ;AN005; cx:di = dir sector
 17440                                  	;MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 17441                                  	;MOV	DH,[SI+SF_ENTRY.sf_dirpos]   ;AN005; dh= dir pos
 17442                                  	;JMP	SHORT do_update 	;AN011;F.O.
 17443                                  ;do_update2:				;AN011;F.O.
 17444                                  ;hkn; SS override fort OLD_FIRSTCLUS
 17445                                  	;CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 17446                                  	;JZ	short do_update		;AN011;F.O. yes
 17447                                  	;MOV	AH,2			;AN011;F.O. delete the old entry
 17448                                  	;MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 17449                                  do_update:				;AN005;
 17450                                  ;hkn; SS is DOSDATA
 17451                                  	;Context DS
 17452                                  	;push	ss
 17453                                  	;pop	ds	
 17454                                  	; MSDOS 3.3 (& MSDOS6.0)
 17455 00003B56 E8B4F8                  	call	FastOpen_Update 	; invoke fastopen
 17456 00003B59 5A                      	POP	DX
 17457                                  
 17458                                  ;;; 10/1/86  update fastopen cache
 17459 00003B5A E8D523                  	call	FLUSHBUF		; flush all relevant buffers
 17460 00003B5D 5F                      	pop	di
 17461 00003B5E 07                      	pop	es
 17462                                  	;mov	al,5
 17463 00003B5F B005                    	MOV	AL,error_access_denied
 17464 00003B61 7201                    	JC	short CloseFinish
 17465                                  FREE_SFT_OK:
 17466 00003B63 F8                      	CLC				; signal no error.
 17467                                  CloseFinish:
 17468                                  ;
 17469                                  ; Indicate to the device that the SFT is being closed.
 17470                                  ;
 17471                                  ;;;; 7/21/86
 17472 00003B64 9C                      	PUSHF				; save flag from DirFromSFT
 17473 00003B65 E81913                  	call	DEV_CLOSE_SFT
 17474 00003B68 9D                      	POPF
 17475                                  ;;;; 7/21/86
 17476                                  ;
 17477                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 17478                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 17479                                  ; going to be moving from busy to free.
 17480                                  ;
 17481 00003B69 59                      	POP	CX			; get old ref count
 17482 00003B6A 9C                      	PUSHF
 17483 00003B6B 49                      	DEC	CX			; if cx != 1
 17484 00003B6C 7503                    	JNZ	short NoFree		; then do NOT free SFT
 17485 00003B6E 26890D                  	mov	[es:di],cx
 17486                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 17487                                  NoFree:
 17488 00003B71 E8F9E4                  	call	LcritDisk
 17489 00003B74 9D                      	POPF
 17490 00003B75 C3                      	retn
 17491                                  
 17492                                  ;---------------------------------------------------------------------------
 17493                                  ;
 17494                                  ; Procedure Name : FREE_SFT
 17495                                  ;
 17496                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 17497                                  ; Flags preserved. Return old ref count in AX
 17498                                  ;
 17499                                  ; Note that busy is indicated by the SFT ref count being -1.
 17500                                  ;
 17501                                  ;---------------------------------------------------------------------------
 17502                                  
 17503                                  FREE_SFT:
 17504 00003B76 9C                      	PUSHF		; Save carry state
 17505 00003B77 268B05                  	mov	ax,[es:di]
 17506                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17507 00003B7A 48                      	DEC	AX
 17508 00003B7B 7501                    	JNZ	short SetCount
 17509 00003B7D 48                      	DEC	AX
 17510                                  SetCount:
 17511 00003B7E 268705                  	xchg	ax,[es:di]
 17512                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17513 00003B81 9D                      	POPF
 17514 00003B82 C3                      	retn
 17515                                  
 17516                                  ;----------------------------------------------------------------------------
 17517                                  ;
 17518                                  ; Procedure Name : DirFromSFT
 17519                                  ;
 17520                                  ;   DirFromSFT - locate a directory entry given an SFT.
 17521                                  ;
 17522                                  ;   Inputs:	ES:DI point to SFT
 17523                                  ;		DS = DOSDATA
 17524                                  ;   Outputs:
 17525                                  ;		EXTERR_LOCUS = errLOC_Disk
 17526                                  ;		CurBuf points to buffer
 17527                                  ;		Carry Clear -> operation OK
 17528                                  ;		    ES:DI point to entry
 17529                                  ;		    ES:BX point to buffer
 17530                                  ;		    DS:SI point to SFT
 17531                                  ;		Carry SET   -> operation failed
 17532                                  ;		    registers trashified
 17533                                  ;   Registers modified: ALL
 17534                                  ;----------------------------------------------------------------------------
 17535                                  
 17536                                  DirFromSFT:
 17537                                  	;mov	byte [EXTERR_LOCUS],2
 17538 00003B83 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 17539 00003B88 06                      	push	es
 17540 00003B89 57                      	push	di
 17541                                  	; MSDOS 3.3
 17542                                  	;mov	dx,[es:di+1Dh]
 17543 00003B8A 268B551D                	MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 17544                                  	; MSDOS 6.0
 17545                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 17546                                  	;MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 17547                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 17548                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 17549                                  	; MSDOS 3.3 (& MSDOS6.0)
 17550 00003B8E 52                      	PUSH	DX
 17551 00003B8F E81C20                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 17552                                  					; [THISDPB] set
 17553 00003B92 5A                      	POP	DX
 17554                                  	;POP	word [HIGH_SECTOR]	;F.C. >32mb
 17555 00003B93 7225                    	JC	short PopDone
 17556 00003B95 30C0                    	XOR	AL,AL			; Pre read
 17557                                  	;mov	byte [ALLOWED],18h
 17558 00003B97 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17559 00003B9C E8EB22                  	call	GETBUFFR
 17560 00003B9F 7219                    	JC	short PopDone
 17561 00003BA1 5E                      	pop	si
 17562 00003BA2 1F                      	pop	ds			; Get back SFT pointer
 17563                                  
 17564                                  ;hkn; SS override
 17565 00003BA3 36C43E[7405]            	LES	DI,[SS:CURBUF]
 17566                                  	;or	byte [es:di+5],4
 17567 00003BA8 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 17568 00003BAD 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 17569                                  	;lea	di,[di+10h]
 17570 00003BAF 8D7D10                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 17571                                  	;mov	al,32
 17572 00003BB2 B020                    	MOV	AL,dir_entry.size
 17573 00003BB4 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 17574 00003BB7 01C7                    	ADD	DI,AX			; Point at the entry
 17575 00003BB9 C3                      	retn				; carry is clear
 17576                                  
 17577                                  PopDone:
 17578 00003BBA 5F                      	pop	di
 17579 00003BBB 07                      	pop	es
 17580                                  PopDone_retn:
 17581 00003BBC C3                      	retn
 17582                                  
 17583                                  ;----------------------------------------------------------------------------
 17584                                  ;
 17585                                  ;**	DOS_Commit - UPdate Directory Entries
 17586                                  ;
 17587                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 17588                                  ;		(DS) = DOSGROUP
 17589                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 17590                                  ;	USES	all but DS
 17591                                  ;
 17592                                  ;----------------------------------------------------------------------------
 17593                                  ;
 17594                                  
 17595                                  DOS_COMMIT:
 17596                                  	;hkn; called from srvcall. DS already set up.
 17597 00003BBD C43E[3605]              	LES	DI,[THISSFT]
 17598                                  	;mov	bx,[es:di+5]
 17599 00003BC1 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17600                                  	;test	bx,0C0h
 17601 00003BC5 F7C3C000                	TEST	BX,devid_file_clean+devid_device ;Clears carry
 17602 00003BC9 75F1                    	jnz	short PopDone_retn
 17603                                  	;test	bx,8000h
 17604 00003BCB F7C30080                	TEST	BX,sf_isnet
 17605 00003BCF 7406                    	JZ	short LOCAL_COMMIT
 17606                                  
 17607                                  ;IF NOT Installed
 17608                                  ;	transfer NET_COMMIT
 17609                                  ;ELSE
 17610                                  	;mov	ax,1107h
 17611 00003BD1 B80711                  	MOV	AX,(MultNET<<8)|7
 17612 00003BD4 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 17613                                  			; ES:DI -> SFT
 17614                                  			; SFT DPB field -> DPB of drive containing file
 17615                                  			; Return: CF set on error, AX = DOS error code
 17616                                  			; CF clear if successful
 17617 00003BD6 C3                      	retn
 17618                                  ;ENDIF
 17619                                  
 17620                                  ;
 17621                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 17622                                  ; There are three ways we can do this.	One is to enter a critical section to
 17623                                  ; protect a potential free.  The second is to increment the ref count to mask
 17624                                  ; the close decrementing.
 17625                                  ;
 17626                                  ; The proper way is to let the caller's of close decide if a decrement should
 17627                                  ; be done.  We do this by providing another entry into close after the
 17628                                  ; decrement and after the share information release.
 17629                                  ;
 17630                                  LOCAL_COMMIT:
 17631 00003BD7 E88BE4                  	call	EcritDisk
 17632                                  	; MSDOS6.0
 17633                                  	;call	EcritDisk	;PTM.
 17634 00003BDA E80700                  	call	SetSFTTimes
 17635 00003BDD B8FFFF                  	MOV	AX,-1
 17636 00003BE0 E8FFFE                  	call	CloseEntry
 17637                                  	; MSDOS 6.0
 17638                                  	;PUSHF			;PTM.				;AN000;
 17639                                  	;call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 17640                                  	;POPF			;PTM.				;AN000;
 17641                                  	;call	LcritDisk	;PTM.				;AN000;
 17642                                  localcommit_retn:
 17643 00003BE3 C3                      	retn
 17644                                  
 17645                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 17646                                  ;----------------------------------------------------------------------------
 17647                                  ;
 17648                                  ; Procedure Name : SetSFTTimes
 17649                                  ;
 17650                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 17651                                  ;   Reflect these times in other SFT's for the same file.
 17652                                  ;
 17653                                  ;   Inputs:	ES:DI point to SFT
 17654                                  ;		BX = sf_flags set apprpriately
 17655                                  ;   Outputs:	Set sft times to current time iff File & dirty & !nodate
 17656                                  ;   Registers modified: All except ES:DI, BX, AX
 17657                                  ;
 17658                                  ;----------------------------------------------------------------------------
 17659                                  
 17660                                  SetSFTTimes:
 17661                                  ;	File clean or device does not get stamped nor disk looked at.
 17662                                  	
 17663                                  	;test	bx,0C0h
 17664 00003BE4 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17665                                  	;retnz				; clean or device => no timestamp
 17666 00003BE8 75F9                    	jnz	short localcommit_retn
 17667                                  
 17668                                  ;	file and dirty. See if date is good
 17669                                  
 17670                                  	;test	bx,4000h
 17671 00003BEA F7C30040                	TEST	BX,sf_close_nodate
 17672                                  	;retnz				; nodate => no timestamp
 17673 00003BEE 75F3                    	jnz	short localcommit_retn
 17674                                  
 17675 00003BF0 50                      	push	ax
 17676 00003BF1 53                      	push	bx
 17677 00003BF2 E8C1DC                  	call	DATE16			; Date/Time to AX/DX
 17678                                  	;mov	[es:di+0Fh],ax
 17679 00003BF5 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 17680                                  	;mov	[es:di+0Dh],dx
 17681 00003BF9 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 17682 00003BFD 31C0                    	XOR	AX,AX
 17683                                  ;if installed
 17684                                  	;call	JShare + 14 * 4
 17685 00003BFF FF1E[9400]              	call	far [JShare+(14*4)]	; 14 = ShSU
 17686                                  ;else
 17687                                  ;	call	ShSU
 17688                                  ;endif
 17689 00003C03 5B                      	pop	bx
 17690 00003C04 58                      	pop	ax
 17691 00003C05 C3                      	retn
 17692                                  
 17693                                  ;============================================================================
 17694                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 17695                                  ;============================================================================
 17696                                  ; 23/07/2018 - Retro DOS v3.0
 17697                                  
 17698                                  ;TITLE DIRCALL - Directory manipulation internal calls
 17699                                  ;NAME  DIRCALL
 17700                                  
 17701                                  ;**	Low level directory manipulation routines for making removing and
 17702                                  ;	  verifying local or NET directories
 17703                                  ;
 17704                                  ;	DOS_MKDIR
 17705                                  ;	DOS_CHDIR
 17706                                  ;	DOS_RMDIR
 17707                                  ;
 17708                                  ;	Modification history:
 17709                                  ;
 17710                                  ;		Created: ARR 30 March 1983
 17711                                  
 17712                                  ;BREAK <DOS_MkDir - Make a directory entry>
 17713                                  ;---------------------------------------------------------------------------
 17714                                  ;
 17715                                  ; Procedure Name : DOS_MkDir
 17716                                  ;
 17717                                  ; Inputs:
 17718                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17719                                  ;		terminated)
 17720                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17721                                  ;		( = -1 if current dir not involved, else
 17722                                  ;		 Points to first char after last "/" of current dir part)
 17723                                  ;	[THISCDS] Points to CDS being used
 17724                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17725                                  ; Function:
 17726                                  ;	Make a new directory
 17727                                  ; Returns:
 17728                                  ;	Carry Clear
 17729                                  ;		No error
 17730                                  ;	Carry Set
 17731                                  ;	    AX is error code
 17732                                  ;		error_path_not_found
 17733                                  ;			Bad path (not in curr dir part if present)
 17734                                  ;		error_bad_curr_dir
 17735                                  ;			Bad path in current directory part of path
 17736                                  ;		error_access_denied
 17737                                  ;			Already exists, device name
 17738                                  ; DS preserved, Others destroyed
 17739                                  ;---------------------------------------------------------------------------
 17740                                  
 17741                                  ;hkn; called from path.asm. DS already set up.
 17742                                  
 17743                                  DOS_MKDIR:
 17744 00003C06 E8BEE3                  	call	TestNet
 17745 00003C09 7314                    	JNC	short LOCAL_MKDIR
 17746                                  
 17747                                  ;IF NOT Installed
 17748                                  ;	transfer NET_MKDIR
 17749                                  ;ELSE
 17750                                  	;mov	ax,1103h
 17751 00003C0B B80311                  	MOV	AX,(MultNET<<8)|3
 17752 00003C0E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 17753                                  			; SS = DOS CS
 17754                                  			; SDA first filename pointer -> fully-qualified directory name
 17755                                  			; SDA CDS pointer -> current directory
 17756                                  			; Return: CF set on error, AX = DOS error code
 17757                                  			; CF clear if successful
 17758 00003C10 C3                      	retn
 17759                                  ;ENDIF
 17760                                  
 17761                                  NODEACCERRJ:
 17762                                  	;mov	ax,5
 17763 00003C11 B80500                  	MOV	AX,error_access_denied
 17764                                  _BadRet:
 17765 00003C14 F9                      	STC
 17766 00003C15 E855E4                  	call	LcritDisk
 17767 00003C18 C3                      	retn
 17768                                  
 17769                                  PATHNFJ:
 17770 00003C19 E851E4                  	call	LcritDisk
 17771 00003C1C E920FB                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 17772                                  
 17773                                  LOCAL_MKDIR:
 17774 00003C1F E843E4                  	call	EcritDisk
 17775                                  ;
 17776                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 17777                                  ;
 17778 00003C22 8C16[3805]              	MOV	[THISSFT+2],SS
 17779                                  
 17780                                  ;hkn; DOSDATA
 17781 00003C26 C706[3605][E003]        	MOV	WORD [THISSFT],RENBUF
 17782                                  ;
 17783                                  ;  NOTE: Need WORD PTR because MASM takes type of
 17784                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 17785                                  ;
 17786 00003C2C C706[1304]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 17787                                  				; make sure SHARER won't complain.
 17788                                  	;mov	al,10h
 17789 00003C32 B010                    	MOV	AL,attr_directory
 17790 00003C34 E8FA13                  	call	MakeNode
 17791 00003C37 72E0                    	JC	short PATHNFJ
 17792 00003C39 83F803                  	CMP	AX,3
 17793 00003C3C 74D3                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 17794 00003C3E C42E[2405]              	LES	BP,[THISDPB]	; Makenode zaps this
 17795 00003C42 C53E[7405]              	LDS	DI,[CURBUF]
 17796 00003C46 29FE                    	SUB	SI,DI
 17797 00003C48 56                      	PUSH	SI		; Pointer to dir_first
 17798                                  	; MSDOS 6.0
 17799                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 17800                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17801                                  	;push	word [di+6]
 17802 00003C49 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 17803 00003C4C 16                      	push	ss
 17804 00003C4D 1F                      	pop	ds
 17805 00003C4E FF36[5805]              	PUSH	word [DIRSTART]	; Parent for .. entry
 17806 00003C52 31C0                    	XOR	AX,AX
 17807 00003C54 A3[5805]                	MOV	[DIRSTART],AX	; Null directory
 17808 00003C57 E81B13                  	call	NEWDIR
 17809 00003C5A 7260                    	JC	short NODEEXISTSPOPDEL ; No room
 17810 00003C5C E8540B                  	call	GETENT		; First entry
 17811 00003C5F 725B                    	JC	short NODEEXISTSPOPDEL ; Screw up
 17812 00003C61 C43E[7405]              	LES	DI,[CURBUF]
 17813                                  
 17814                                  	; MSDOS 6.0
 17815                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17816                                  	;			 ;LB. if already dirty		    ;AN000;
 17817                                  	;JNZ	short yesdirty_	 ;LB.   don't increment dirty count ;AN000;
 17818                                  	;call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 17819                                  	
 17820                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17821                                  	;or	byte [es:di+5],40h
 17822 00003C65 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17823                                  ;yesdirty_:
 17824                                  	;add	di,16
 17825 00003C6A 83C710                  	ADD	DI,BUFINSIZ	; Point at buffer
 17826 00003C6D B82E20                  	MOV	AX,202EH	; ". "
 17827 00003C70 8B16[5805]              	MOV	DX,[DIRSTART]	; Point at itself
 17828 00003C74 E89613                  	call	SETDOTENT
 17829 00003C77 B82E2E                  	MOV	AX,2E2EH	; ".."
 17830 00003C7A 5A                      	POP	DX		; Parent
 17831 00003C7B E88F13                  	call	SETDOTENT
 17832 00003C7E C42E[2405]              	LES	BP,[THISDPB]
 17833                                  	;mov	byte [ALLOWED],18h
 17834 00003C82 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17835 00003C87 5A                      	POP	DX		; Entry sector
 17836                                  	; MSDOS 6.0
 17837                                  	;POP	word [HIGH_SECTOR] ;F.C. >32mb
 17838                                  
 17839 00003C88 30C0                    	XOR	AL,AL		; Pre read
 17840 00003C8A E8FD21                  	call	GETBUFFR
 17841 00003C8D 7256                    	JC	short NODEEXISTSP
 17842 00003C8F 8B16[5805]              	MOV	DX,[DIRSTART]
 17843 00003C93 C53E[7405]              	LDS	DI,[CURBUF]
 17844                                  	;or	byte [di+5],4
 17845 00003C97 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17846 00003C9B 5E                      	POP	SI		; dir_first pointer
 17847 00003C9C 01FE                    	ADD	SI,DI
 17848 00003C9E 8914                    	MOV	[SI],DX
 17849 00003CA0 31D2                    	XOR	DX,DX
 17850 00003CA2 895402                  	MOV	[SI+2],DX	; Zero size
 17851 00003CA5 895404                  	MOV	[SI+4],DX
 17852                                  DIRUP:
 17853                                  	; MSDOS 6.0
 17854                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 17855                                  	;			 ;LB. if already dirty 		   ;AN000;
 17856                                  	;JNZ	short yesdirty2	 ;LB.  don't increment dirty count ;AN000;
 17857                                  	;call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 17858                                  	
 17859                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17860                                  	;or	byte [di+5],40h
 17861 00003CA8 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 17862                                  ;yesdirty2:
 17863 00003CAC 16                      	push	ss
 17864 00003CAD 1F                      	pop	ds
 17865 00003CAE 268A4600                	mov	al,[es:bp]
 17866                                  	; 18/05/2019
 17867                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 17868 00003CB2 E87D22                  	call	FLUSHBUF
 17869                                  	;mov	ax,5
 17870 00003CB5 B80500                  	MOV	AX,error_access_denied
 17871 00003CB8 E8B2E3                  	call	LcritDisk
 17872 00003CBB C3                      	retn
 17873                                  
 17874                                  NODEEXISTSPOPDEL:
 17875 00003CBC 5A                      	POP	DX		; Parent
 17876 00003CBD 5A                      	POP	DX		; Entry sector
 17877                                  	; MSDOS 6.0 
 17878                                  	;POP	word [HIGH_SECTOR] ; F.C. >32mb
 17879 00003CBE C42E[2405]              	LES	BP,[THISDPB]
 17880                                  	;mov	byte [ALLOWED],18h
 17881 00003CC2 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17882 00003CC7 30C0                    	XOR	AL,AL		; Pre read
 17883 00003CC9 E8BE21                  	call	GETBUFFR
 17884 00003CCC 7217                    	JC	short NODEEXISTSP
 17885 00003CCE C53E[7405]              	LDS	DI,[CURBUF]
 17886                                  	;or	byte [di+5],4
 17887 00003CD2 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17888 00003CD6 5E                      	POP	SI		; dir_first pointer
 17889 00003CD7 01FE                    	ADD	SI,DI
 17890                                  	;sub	si,1Ah ; 26
 17891 00003CD9 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 17892 00003CDC C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 17893 00003CDF E8C6FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 17894                                  NODEEXISTS:
 17895 00003CE2 E92CFF                  	JMP	NODEACCERRJ ; 10/08/2018
 17896                                  
 17897                                  NODEEXISTSP:
 17898 00003CE5 5E                      	POP	SI		; Clean stack
 17899 00003CE6 EBFA                    	JMP	short NODEEXISTS
 17900                                  
 17901                                  ;BREAK <DOS_ChDir -- Verify a directory>
 17902                                  ;----------------------------------------------------------------------------
 17903                                  ;
 17904                                  ; Procedure Name : DOS_ChDir
 17905                                  ;
 17906                                  ; Inputs:
 17907                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17908                                  ;		terminated)
 17909                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17910                                  ;		( = -1 if current dir not involved, else
 17911                                  ;		 Points to first char after last "/" of current dir part)
 17912                                  ;	[THISCDS] Points to CDS being used May not be NUL
 17913                                  ; Function:
 17914                                  ;	Validate the path for potential new current directory
 17915                                  ; Returns:
 17916                                  ;	NOTE:
 17917                                  ;	    [SATTRIB] is modified by this call
 17918                                  ;	Carry Clear
 17919                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 17920                                  ;		Caller must NOT set ID fields on a NET CDS.
 17921                                  ;	Carry Set
 17922                                  ;	    AX is error code
 17923                                  ;		error_path_not_found
 17924                                  ;			Bad path
 17925                                  ;		error_access_denied
 17926                                  ;			device or file name
 17927                                  ; DS preserved, Others destroyed
 17928                                  ;----------------------------------------------------------------------------
 17929                                  
 17930                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 17931                                  
 17932                                  DOS_CHDIR:
 17933 00003CE8 E8DCE2                  	call	TestNet
 17934 00003CEB 7306                    	JNC	short LOCAL_CHDIR
 17935                                  
 17936                                  ;IF NOT Installed
 17937                                  ;	transfer NET_CHDIR
 17938                                  ;ELSE
 17939                                  	;mov	ax,1105h
 17940 00003CED B80511                  	MOV	AX,(MultNET<<8)|5
 17941 00003CF0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 17942                                  			; SS = DOS CS
 17943                                  			; SDA first filename pointer -> fully-qualified directory name
 17944                                  			; SDA CDS pointer -> current directory
 17945                                  			; Return: CF set on error, AX = DOS error code
 17946                                  			; CF clear if successful
 17947 00003CF2 C3                      	retn
 17948                                  ;ENDIF
 17949                                  
 17950                                  LOCAL_CHDIR:
 17951 00003CF3 E86FE3                  	call	EcritDisk
 17952                                  	; MSDOS 6.0
 17953                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 17954                                  	;JZ	short nojoin			   ;PTM.
 17955                                  	;MOV	word [ES:DI+curdir.ID],0FFFFH	   ;PTM.
 17956                                  ;nojoin:
 17957                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17958 00003CF6 C606[F802]00            	MOV	byte [NoSetDir],0 ; FALSE
 17959                                  	;mov	byte [SATTRIB],16h
 17960 00003CFB C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 17961                                  				; Dir calls can find these
 17962                                  ; DOS 3.3  6/24/86 FastOpen
 17963 00003D00 800E[6E0F]01            	OR	byte [FastOpenFlg],FastOpen_Set	   ; set fastopen flag
 17964 00003D05 E82E0B                  	call	GETPATH
 17965                                  	;PUSHF							;AN000;
 17966                                  	;AND	byte [FastOpenFlg],Fast_yes	   ; clear it all ;AC000;
 17967                                  	;POPF							;AN000;
 17968                                  ; DOS 3.3  6/24/86 FastOpen
 17969                                  
 17970                                  	; MSDOS 3.3
 17971 00003D08 C606[6E0F]00            	mov	byte [FastOpenFlg],0
 17972                                  	;mov	ax,3
 17973 00003D0D B80300                  	MOV	AX,error_path_not_found
 17974 00003D10 7207                    	JC	short ChDirDone
 17975 00003D12 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 17976 00003D14 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get cluster number
 17977 00003D18 F8                      	CLC
 17978                                  ChDirDone:
 17979 00003D19 E851E3                  	call	LcritDisk
 17980 00003D1C C3                      	retn
 17981                                  
 17982                                  ;BREAK <DOS_RmDir -- Remove a directory>
 17983                                  ;----------------------------------------------------------------------------
 17984                                  ;
 17985                                  ; Procedure Name : DOS_RmDir
 17986                                  ;
 17987                                  ; Inputs:
 17988                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17989                                  ;		terminated)
 17990                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17991                                  ;		( = -1 if current dir not involved, else
 17992                                  ;		 Points to first char after last "/" of current dir part)
 17993                                  ;	[THISCDS] Points to CDS being used
 17994                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17995                                  ; Function:
 17996                                  ;	Remove a directory
 17997                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 17998                                  ; Returns:
 17999                                  ;	NOTE:
 18000                                  ;	    [SATTRIB] is modified by this call
 18001                                  ;	Carry Clear
 18002                                  ;		No error
 18003                                  ;	Carry Set
 18004                                  ;	    AX is error code
 18005                                  ;		error_path_not_found
 18006                                  ;			Bad path (not in curr dir part if present)
 18007                                  ;		error_bad_curr_dir
 18008                                  ;			Bad path in current directory part of path
 18009                                  ;		error_access_denied
 18010                                  ;			device or file name, root directory
 18011                                  ;			Bad directory ('.' '..' messed up)
 18012                                  ; DS preserved, Others destroyed
 18013                                  ;----------------------------------------------------------------------------
 18014                                  
 18015                                  ;hkn; called from path.asm. DS already set up.
 18016                                  
 18017                                  DOS_RMDIR:
 18018 00003D1D E8A7E2                  	call	TestNet
 18019 00003D20 7306                    	JNC	short LOCAL_RMDIR
 18020                                  
 18021                                  ;IF NOT Installed
 18022                                  ;	transfer NET_RMDIR
 18023                                  ;ELSE
 18024                                  	;mov	ax,1101h
 18025 00003D22 B80111                  	MOV	AX,(MultNET<<8)|1
 18026 00003D25 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 18027                                  			; SS = DOS CS
 18028                                  			; SDA first filename pointer -> fully-qualified directory name
 18029                                  			; SDA CDS pointer -> current directory
 18030                                  			; Return: CF set on error, AX = DOS error code
 18031                                  			; CF clear if successful
 18032 00003D27 C3                      	retn
 18033                                  ;ENDIF
 18034                                  
 18035                                  LOCAL_RMDIR:
 18036 00003D28 E83AE3                  	call	EcritDisk
 18037 00003D2B C606[F802]00            	MOV	byte [NoSetDir],0
 18038                                  	;mov	byte [SATTRIB],16h
 18039 00003D30 C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 18040                                  					; Dir calls can find these
 18041 00003D35 E8FE0A                  	call	GETPATH
 18042 00003D38 720C                    	JC	short NOPATH		; Path not found
 18043 00003D3A 7512                    	JNZ	short NOTDIRPATH	; Path not a DIR
 18044 00003D3C 8B3E[5805]              	MOV	DI,[DIRSTART]
 18045 00003D40 09FF                    	OR	DI,DI			; Root ?
 18046 00003D42 750D                    	JNZ	short rmdir_get_buf	; No
 18047 00003D44 EB08                    	JMP	SHORT NOTDIRPATH
 18048                                  
 18049                                  NOPATH:
 18050                                  	;mov	ax,3
 18051 00003D46 B80300                  	MOV	AX,error_path_not_found
 18052 00003D49 E9C8FE                  	JMP	_BadRet
 18053                                  
 18054                                  NOTDIRPATHPOP:
 18055                                  	; MSDOS 6.0
 18056                                  	;POP	AX			  ;F.C. >32mb
 18057 00003D4C 58                      	POP	AX
 18058                                  NOTDIRPATHPOP2:
 18059 00003D4D 58                      	POP	AX
 18060                                  NOTDIRPATH:
 18061 00003D4E E9C0FE                  	JMP	NODEACCERRJ
 18062                                  
 18063                                  rmdir_get_buf:
 18064 00003D51 C53E[7405]              	LDS	DI,[CURBUF]
 18065 00003D55 29FB                    	SUB	BX,DI		; Compute true offset
 18066 00003D57 53                      	PUSH	BX		; Save entry pointer
 18067                                  	
 18068                                  	; MSDOS 6.0
 18069                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 18070                                  	
 18071                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18072                                  	;push	word [di+6]
 18073 00003D58 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 18074                                  
 18075                                  ;hkn; SS is DOSDATA
 18076                                  	;context DS
 18077 00003D5B 16                      	push	ss
 18078 00003D5C 1F                      	pop	ds
 18079                                  	;context ES
 18080 00003D5D 16                      	push	ss
 18081 00003D5E 07                      	pop	es
 18082                                  
 18083                                  ;hkn; NAME1 is in DOSDATA
 18084 00003D5F BF[E604]                	MOV	DI,NAME1
 18085 00003D62 B03F                    	MOV	AL,'?'
 18086 00003D64 B90B00                  	MOV	CX,11
 18087 00003D67 F3AA                    	REP	STOSB
 18088 00003D69 30C0                    	XOR	AL,AL
 18089 00003D6B AA                      	STOSB				; Nul terminate it
 18090 00003D6C E8510D                  	call	STARTSRCH		; Set search
 18091 00003D6F E83E0A                  	call	GETENTRY		; Get start of directory
 18092 00003D72 72D8                    	JC	short NOTDIRPATHPOP	; Screw up
 18093 00003D74 8E1E[7605]              	MOV	DS,[CURBUF+2]
 18094 00003D78 89DE                    	MOV	SI,BX
 18095 00003D7A AD                      	LODSW
 18096                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 18097 00003D7B 3D2E20                  	cmp	ax,202Eh ; ". "
 18098 00003D7E 75CC                    	JNZ	short NOTDIRPATHPOP	; Nope
 18099                                  	;add     si,30
 18100 00003D80 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 18101 00003D83 AD                      	LODSW
 18102                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 18103                                  	;cmp	ax, '..'
 18104 00003D84 3D2E2E                  	cmp	ax,2E2Eh
 18105 00003D87 75C3                    	JNZ	short NOTDIRPATHPOP	; Nope
 18106                                  
 18107                                  ;hkn; SS is DOSDATA
 18108                                  	;context DS
 18109 00003D89 16                      	push	ss
 18110 00003D8A 1F                      	pop	ds
 18111 00003D8B C706[F402]0200          	MOV	word [LASTENT],2	; Skip . and ..
 18112 00003D91 E81C0A                  	call	GETENTRY		; Get next entry
 18113 00003D94 72B6                    	JC	short NOTDIRPATHPOP	; Screw up
 18114                                  	;mov	byte [ATTRIB],16h
 18115 00003D96 C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 18116 00003D9B E81F09                  	call	SRCH			; Do a search
 18117 00003D9E 73AC                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 18118 00003DA0 803E[F602]00            	CMP	byte [FAILERR],0
 18119 00003DA5 75A5                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 18120 00003DA7 C42E[2405]              	LES	BP,[THISDPB]
 18121 00003DAB 8B1E[5805]              	MOV	BX,[DIRSTART]
 18122 00003DAF E83C17                  	call	RELEASE 		; Release data in sub dir
 18123 00003DB2 7298                    	JC	short NOTDIRPATHPOP	; Screw up
 18124 00003DB4 5A                      	POP	DX			; Sector # of entry
 18125                                  	;POP	word [HIGH_SECTOR]	; F.C. >32mb
 18126                                  	;mov	byte [ALLOWED],18h
 18127 00003DB5 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18128 00003DBA 30C0                    	XOR	AL,AL			; Pre read
 18129 00003DBC E8CB20                  	call	GETBUFFR		; Get sector back
 18130 00003DBF 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 18131 00003DC1 C53E[7405]              	LDS	DI,[CURBUF]
 18132                                  	;or	byte [di+5],4
 18133 00003DC5 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18134 00003DC9 5B                      	POP	BX			; Pointer to start of entry
 18135 00003DCA 01FB                    	ADD	BX,DI			; Corrected
 18136 00003DCC C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 18137                                  
 18138                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18139 00003DCF 1E                      	PUSH	DS
 18140                                  
 18141                                  ;hkn; SS is DOSDATA
 18142                                  	;context DS
 18143 00003DD0 16                      	push	ss
 18144 00003DD1 1F                      	pop	ds
 18145                                  
 18146                                  	; MSDOS 6.0
 18147                                  	;call	FastOpen_Delete 	; call fastopen to delete an entry
 18148                                  
 18149                                  	; MSDOS 3.3
 18150                                  _FastOpen_Delete:
 18151 00003DD2 50                      	push	ax
 18152 00003DD3 8B36[4A05]              	mov	si,[WFP_START]
 18153 00003DD7 BB[430F]                	mov	bx,FastTable
 18154                                  	;mov	al,3  ; FONC_delete
 18155 00003DDA B003                    	mov	al,FONC_delete
 18156 00003DDC FF5F02                  	call	far [BX+2]  ; FastTable+2
 18157 00003DDF 58                      	pop	ax
 18158                                  
 18159 00003DE0 1F                      	POP	DS
 18160                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18161                                  
 18162 00003DE1 E9C4FE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 18163                                  
 18164                                  ;============================================================================
 18165                                  ; DISK.ASM, MSDOS 6.0, 1991
 18166                                  ;============================================================================
 18167                                  ; 23/07/2018 - Retro DOS v3.0 
 18168                                  
 18169                                  ;	TITLE	DISK - Disk utility routines
 18170                                  ;	NAME	Disk
 18171                                  
 18172                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 18173                                  ;
 18174                                  ;	SWAPCON
 18175                                  ;	SWAPBACK
 18176                                  ;	DOS_READ
 18177                                  ;	DOS_WRITE
 18178                                  ;	get_io_sft
 18179                                  ;	DirRead
 18180                                  ;	FIRSTCLUSTER
 18181                                  ;	SET_BUF_AS_DIR
 18182                                  ;	FATSecRd
 18183                                  ;	DREAD
 18184                                  ;	CHECK_WRITE_LOCK
 18185                                  ;	CHECK_READ_LOCK
 18186                                  ;
 18187                                  ;	Revision history:
 18188                                  ;
 18189                                  ;		A000   version 4.00  Jan. 1988
 18190                                  ;
 18191                                  ;----------------------------------------------------------------------------
 18192                                  ;
 18193                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 18194                                  ;		error happens, DOS retries the entire block assuming that
 18195                                  ;		zero characters were transferred. Modified the code to take
 18196                                  ;		into account the number of characters transfered before
 18197                                  ;		retrying the operation.
 18198                                  ;
 18199                                  ;----------------------------------------------------------------------------
 18200                                  ;
 18201                                  
 18202                                  ;Installed = TRUE
 18203                                  
 18204                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 18205                                  
 18206                                  ; **** Drivers for file input from devices ****
 18207                                  ;----------------------------------------------------------------------------
 18208                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 18209                                  ;   of handles 0 and 1
 18210                                  ;
 18211                                  ;   Inputs:	DS is DOSDATA
 18212                                  ;   Outputs:	CONSWAP is set to false.
 18213                                  ;   Registers modified: none
 18214                                  ;----------------------------------------------------------------------------
 18215                                  
 18216                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 18217                                  
 18218                                  SWAPBACK:
 18219 00003DE4 C606[0303]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 18220 00003DE9 C3                      	retn
 18221                                  
 18222                                  ;----------------------------------------------------------------------------
 18223                                  ;
 18224                                  ; Procedure Name : SWAPCON
 18225                                  ;
 18226                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 18227                                  ;
 18228                                  ;   Inputs:	ThisSFT as the sft of the desired file
 18229                                  ;		DS is DOSDATA
 18230                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 18231                                  ;   Registers modified: none
 18232                                  ;--------------------------------------------------------------------------
 18233                                  
 18234                                  SWAPCON:
 18235                                  	; MSDOS 3.3
 18236                                  	;push	es
 18237                                  	;push	di
 18238                                  	;mov	byte [CONSWAP],1
 18239                                  	;les	di,[THISSFT]
 18240                                  	;mov	word [CONSFT],di
 18241                                  	;mov	word [CONSFT+2],es
 18242                                  	;pop	di
 18243                                  	;pop	es
 18244                                  	;retn
 18245                                  
 18246                                  	; MSDOS 6.0
 18247 00003DEA C606[0303]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 18248 00003DEF 50                      	push	ax
 18249 00003DF0 A1[3605]                	mov	ax,[THISSFT]
 18250 00003DF3 A3[7805]                	mov	[CONSFT],ax
 18251 00003DF6 A1[3805]                	mov	ax,[THISSFT+2]
 18252 00003DF9 A3[7A05]                	mov	[CONSFT+2],ax
 18253 00003DFC 58                      	pop	ax
 18254 00003DFD C3                      	retn
 18255                                  
 18256                                  
 18257                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 18258                                  ;-----------------------------------------------------------------------------
 18259                                  ;
 18260                                  ; Inputs:
 18261                                  ;	ThisSFT set to the SFT for the file being used
 18262                                  ;	[DMAADD] contains transfer address
 18263                                  ;	CX = No. of bytes to read
 18264                                  ;	DS = DOSDATA
 18265                                  ; Function:
 18266                                  ;	Perform read operation
 18267                                  ; Outputs:
 18268                                  ;    Carry clear
 18269                                  ;	SFT Position and cluster pointers updated
 18270                                  ;	CX = No. of bytes read
 18271                                  ;	ES:DI point to SFT
 18272                                  ;    Carry set
 18273                                  ;	AX is error code
 18274                                  ;	CX = 0
 18275                                  ;	ES:DI point to SFT
 18276                                  ; DS preserved, all other registers destroyed
 18277                                  ;
 18278                                  ;-----------------------------------------------------------------------------
 18279                                  
 18280                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 18281                                  
 18282                                  DOS_READ:
 18283 00003DFE C43E[3605]              	LES	DI,[THISSFT]
 18284                                  
 18285                                  ; Verify that the sft has been opened in a mode that allows reading.
 18286                                  
 18287                                  	;mov	al,[es:di+2]
 18288 00003E02 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18289                                  	;and	al,0Fh
 18290 00003E06 240F                    	AND	AL,access_mask
 18291                                  	;cmp	al,1
 18292 00003E08 3C01                    	CMP	AL,open_for_write
 18293 00003E0A 7503                    	JNE	short READ_NO_MODE		;Is read or both
 18294 00003E0C E94205                  	jmp	SET_ACC_ERR
 18295                                  
 18296                                  READ_NO_MODE:
 18297 00003E0F E81904                  	call	SETUP
 18298 00003E12 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 18299 00003E14 E8C5E1                  	call	IsSFTNet
 18300 00003E17 7408                    	JZ	short LOCAL_READ
 18301                                  
 18302                                  ;IF NOT Installed
 18303                                  ;	transfer NET_READ
 18304                                  ;ELSE
 18305                                  	;mov	ax,1108h
 18306 00003E19 B80811                  	MOV	AX,(MultNET<<8)|8
 18307 00003E1C CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 18308                                  			; ES:DI -> SFT
 18309                                  			; SFT DPB field -> DPB of drive containing file
 18310                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18311                                  			; Return: CF set on error, CX = bytes read
 18312 00003E1E C3                      	retn
 18313                                  ;ENDIF
 18314                                  
 18315                                  ; The user ended up requesting 0 bytes of input.  We do nothing for this case
 18316                                  ; except return immediately.
 18317                                  
 18318                                  NoIORet:
 18319 00003E1F F8                      	CLC
 18320 00003E20 C3                      	retn
 18321                                  
 18322                                  LOCAL_READ:
 18323                                  	;test	word [es:di+5],80h
 18324 00003E21 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 18325 00003E27 750F                    	JNZ	short READDEV
 18326                                  	;mov	byte [EXTERR_LOCUS],2
 18327 00003E29 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18328 00003E2E E834E2                  	call	EcritDisk
 18329 00003E31 E8D804                  	call	DISKREAD
 18330                                  
 18331                                  critexit:
 18332 00003E34 E836E2                  	call	LcritDisk
 18333 00003E37 C3                      	retn
 18334                                  
 18335                                  ; We are reading from a device. Examine the status of the device to see if we
 18336                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 18337                                  ; null device, we can safely indicate no transfer.
 18338                                  
 18339                                  READDEV:
 18340                                  	;mov	byte [EXTERR_LOCUS],4
 18341 00003E38 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18342                                  	;mov	bl,[es:di+5]
 18343 00003E3D 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18344 00003E41 C43E[DA02]              	LES	DI,[DMAADD]
 18345                                  	;test	bl,40h
 18346 00003E45 F6C340                  	test	BL,devid_device_EOF	; End of file?
 18347 00003E48 7407                    	JZ	short ENDRDDEVJ3
 18348                                  	;test	bl,4
 18349 00003E4A F6C304                  	test	BL,devid_device_null	; NUL device?
 18350 00003E4D 7405                    	JZ	short TESTRAW 		; NO
 18351 00003E4F 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 18352                                  ENDRDDEVJ3:
 18353 00003E51 E9BC00                  	JMP	ENDRDDEVJ2
 18354                                  
 18355                                  ;
 18356                                  ; We need to hit the device.  Figure out if we do a raw read or we do the
 18357                                  ; bizarre std_con_string_input.
 18358                                  ;
 18359                                  TESTRAW:
 18360                                  	;test	bl,20h
 18361 00003E54 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 18362 00003E57 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 18363                                  	;test	bl,1
 18364 00003E59 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 18365 00003E5C 7447                    	JZ	short NOTRDCON
 18366 00003E5E E9E500                  	JMP	READCON
 18367                                  
 18368                                  DVRDRAW:
 18369 00003E61 06                      	PUSH	ES
 18370 00003E62 1F                      	POP	DS			; Xaddr to DS:DI
 18371                                  
 18372                                  	; MSDOS 6.0
 18373                                  ;SR;
 18374                                  ;Check for win386 presence -- if present, do polled read of characters
 18375                                  ;
 18376                                  	;test	byte [ss:IsWIN386],1
 18377                                  	;jz	short ReadRawRetry	;not present
 18378                                  	;test	bl,devid_device_con_in	;is it console device
 18379                                  	;jz	short ReadRawRetry	;no, do normal read
 18380                                  	;jmp	do_polling		;yes, do win386 polling loop
 18381                                  
 18382                                  ReadRawRetry:
 18383 00003E63 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 18384 00003E65 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18385 00003E67 89C2                    	MOV	DX,AX			; Start at 0
 18386 00003E69 E8B710                  	call	SETREAD
 18387 00003E6C 1E                      	PUSH	DS			; Save Seg part of Xaddr
 18388                                  
 18389                                  ;hkn; SS override
 18390 00003E6D 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18391 00003E72 E88710                  	call	DEVIOCALL
 18392 00003E75 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 18393 00003E77 B486                    	MOV	AH,86H			; Read error
 18394                                  
 18395                                  ;hkn; SS override
 18396 00003E79 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18397                                  	; MSDOS 3.3
 18398                                  	;test	di,8000h
 18399                                  	;jz	short CRDROK
 18400                                  	; MSDOS 6.0
 18401 00003E7E 09FF                    	or	di,di
 18402 00003E80 7919                    	jns	short CRDROK		; no errors
 18403                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18404 00003E82 E8AA19                  	call	CHARHARD
 18405 00003E85 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 18406                                  
 18407                                  	; MSDOS 6.0
 18408                                  	;add	di,[ss:callscnt]	; update ptr and count to reflect the	M065
 18409                                  	;sub	cx,[ss:callscnt]	; number of chars xferred		M065
 18410                                  
 18411                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18412 00003E87 08C0                    	OR	AL,AL
 18413 00003E89 7410                    	JZ	short CRDROK		; Ignore
 18414 00003E8B 3C03                    	CMP	AL,3
 18415 00003E8D 7403                    	JZ	short CRDFERR 		; fail.
 18416 00003E8F 1F                      	POP	DS			; Recover saved seg part of Xaddr
 18417                                  	; 19/05/2019
 18418 00003E90 EBD1                    	JMP	short ReadRawRetry	; Retry
 18419                                  
 18420                                  ;
 18421                                  ; We have encountered a device-driver error.  We have informed the user of it
 18422                                  ; and he has said for us to fail the system call.
 18423                                  ;
 18424                                  CRDFERR:
 18425 00003E92 5F                      	POP	DI			; Clean stack
 18426                                  DEVIOFERR:
 18427                                  
 18428                                  ;hkn; SS override
 18429 00003E93 36C43E[3605]            	LES	DI,[SS:THISSFT]
 18430 00003E98 E9B404                  	jmp	SET_ACC_ERR_DS
 18431                                  
 18432                                  CRDROK:
 18433 00003E9B 5F                      	POP	DI			; Chuck saved seg of Xaddr
 18434 00003E9C 89D7                    	MOV	DI,DX
 18435                                  
 18436                                  ;hkn; SS override
 18437 00003E9E 36033E[1803]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 18438 00003EA3 EBAC                    	JMP	SHORT ENDRDDEVJ3
 18439                                  
 18440                                  ; We are going to do a cooked read on some character device. There is a
 18441                                  ; problem here, what does the data look like? Is it a terminal device, line
 18442                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 18443                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 18444                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 18445                                  ; included in data). this "simulates" the way con works in cooked mode
 18446                                  ; reading one line at a time. With file data, however, the lines will look
 18447                                  ; like, LF line CR. This is a little weird.
 18448                                  
 18449                                  NOTRDCON:
 18450 00003EA5 8CC0                    	MOV	AX,ES
 18451 00003EA7 8ED8                    	MOV	DS,AX
 18452 00003EA9 89FB                    	MOV	BX,DI
 18453 00003EAB 31D2                    	XOR	DX,DX
 18454 00003EAD 89D0                    	MOV	AX,DX
 18455 00003EAF 51                      	PUSH	CX
 18456 00003EB0 B90100                  	MOV	CX,1
 18457 00003EB3 E86D10                  	call	SETREAD
 18458 00003EB6 59                      	POP	CX
 18459                                  
 18460                                  ;hkn; SS override
 18461 00003EB7 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18462                                  	;lds	si,[si+7]
 18463 00003EBC C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18464                                  DVRDLP:
 18465 00003EBF E89817                  	call	DSKSTATCHK
 18466 00003EC2 E83A10                  	call	DEVIOCALL2
 18467 00003EC5 57                      	PUSH	DI		; Save "count" done
 18468 00003EC6 B486                    	MOV	AH,86H
 18469                                  
 18470                                  ;hkn; SS override
 18471 00003EC8 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18472                                  	
 18473                                  	; MSDOS 3.3
 18474                                  	;test	di, 8000h
 18475                                  	;jz	short CRDOK
 18476                                  	; MSDOS 6.0
 18477 00003ECD 09FF                    	or	di,di
 18478 00003ECF 7917                    	jns	short CRDOK
 18479                                  	
 18480 00003ED1 E85B19                  	call	CHARHARD
 18481 00003ED4 5F                      	POP	DI
 18482                                  
 18483                                  ;hkn; SS override
 18484 00003ED5 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18485 00003EDC 3C01                    	CMP	AL,1
 18486 00003EDE 74DF                    	JZ	short DVRDLP		;Retry
 18487 00003EE0 3C03                    	CMP	AL,3
 18488 00003EE2 74AF                    	JZ	short DEVIOFERR		; FAIL
 18489 00003EE4 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 18490 00003EE6 EB12                    	JMP	SHORT DVRDIGN
 18491                                  
 18492                                  CRDOK:
 18493 00003EE8 5F                      	POP	DI
 18494                                  
 18495                                  ;hkn; SS override
 18496 00003EE9 36833E[1803]01          	CMP	word [SS:CALLSCNT],1
 18497 00003EEF 751F                    	JNZ	short ENDRDDEVJ2
 18498 00003EF1 1E                      	PUSH	DS
 18499                                  
 18500                                  ;hkn; SS override
 18501 00003EF2 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18502 00003EF7 8A05                    	MOV	AL,[DI]			; Get the character we just read
 18503 00003EF9 1F                      	POP	DS
 18504                                  DVRDIGN:
 18505                                  
 18506                                  ;hkn; SS override
 18507 00003EFA 36FF06[1403]            	INC	WORD [SS:CALLXAD]	; Next character
 18508 00003EFF 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18509 00003F06 47                      	INC	DI			; Next character
 18510 00003F07 3C1A                    	CMP	AL,1AH			; ^Z?
 18511 00003F09 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 18512 00003F0B 3C0D                    	CMP	AL,c_CR 		; CR?
 18513 00003F0D E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 18514 00003F0F 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 18515                                  					;  AX=FFFF which is not likely
 18516                                  ENDRDDEVJ2:
 18517 00003F10 EB1F                    	JMP	short ENDRDDEV		;changed short to long for win386
 18518                                  
 18519                                  	;  MSDOS 6.0
 18520                                  ;;SR;
 18521                                  ;;Polling code for raw read on CON when WIN386 is present
 18522                                  ;;
 18523                                  ;;At this point -- ds:di is transfer address
 18524                                  ;;		  cx is count
 18525                                  ;;
 18526                                  ;
 18527                                  ;do_polling:
 18528                                  ;	mov	bx,di			;ds:bx is Xfer address
 18529                                  ;	xor	ax,ax
 18530                                  ;	mov	dx,ax
 18531                                  ;	call	setread			;prepare device packet
 18532                                  ;
 18533                                  ;do_io:
 18534                                  ;;
 18535                                  ;;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 18536                                  ;;
 18537                                  ;	mov	byte ptr es:[bx+2],DEVRDND	;Change command code
 18538                                  ;	push	ds
 18539                                  ;	lds	si,[THISSFT]		;get device header
 18540                                  ;	call	deviocall		;call device driver
 18541                                  ;	pop	ds
 18542                                  ;	
 18543                                  ;	test	es:[bx.REQSTAT],STERR	;check if error
 18544                                  ;	jz	check_busy		;no
 18545                                  ;
 18546                                  ;	push	ds
 18547                                  ;	mov	dx,di
 18548                                  ;	invoke 	charhard		;invoke int 24h handler
 18549                                  ;	mov	di,dx
 18550                                  ;	or	al,al
 18551                                  ;	jz	pop_done_read		;ignore by user, assume read done
 18552                                  ;	cmp	al,3
 18553                                  ;	jz	devrderr		;user asked to fail
 18554                                  ;	pop	ds
 18555                                  ;	jmp	do_io			;user asked to retry
 18556                                  ;
 18557                                  ;check_busy:
 18558                                  ;	test	es:[bx.REQSTAT],0200h	;see if busy bit set
 18559                                  ;	jnz	no_char			;yes, no character available
 18560                                  ;;
 18561                                  ;;Character is available. Read in 1 character at a time until all characters
 18562                                  ;;are read in or no character is available
 18563                                  ;;
 18564                                  ;	mov	byte ptr es:[bx+2],DEVRD	;command code is READ now
 18565                                  ;	mov	word ptr es:[bx+18],1		;change count to 1 character
 18566                                  ;	push	ds
 18567                                  ;	lds	si,[THISSFT]
 18568                                  ;	call	deviocall
 18569                                  ;
 18570                                  ;	mov	dx,di
 18571                                  ;	mov	ah,86h
 18572                                  ;	mov	di,es:[bx.REQSTAT]	;get returned status
 18573                                  ;	test	di,STERR		;was there an error during read?
 18574                                  ;	jz	next_char		;no,read next character
 18575                                  ;
 18576                                  ;	invoke	charhard		;invoke int 24h handler
 18577                                  ;	mov	di,dx			;restore di
 18578                                  ;	or	al,al			;
 18579                                  ;	jz	pop_done_read		;ignore by user,assume read is done
 18580                                  ;	cmp	al,3
 18581                                  ;	jz	devrderr		;user issued a 'fail',indicate error
 18582                                  ;	pop	ds
 18583                                  ;	jmp	do_io			;user issued a retry
 18584                                  ;
 18585                                  ;next_char:
 18586                                  ;	pop	ds
 18587                                  ;	mov	di,dx
 18588                                  ;	dec	cx			;decrement count
 18589                                  ;	jcxz	done_read		;all characters read in
 18590                                  ;	inc	word ptr es:[bx+14]	;update transfer address
 18591                                  ;	jmp	do_io			;read next character in
 18592                                  ;
 18593                                  ;devrderr:
 18594                                  ;	pop	di			;discard segment address
 18595                                  ;	les	di,[THISSFT]
 18596                                  ;	transfer SET_ACC_ERR_DS		;indicate error
 18597                                  ;
 18598                                  ;no_char:
 18599                                  ;;
 18600                                  ;;Since no character is available, we let win386 switch the VM out
 18601                                  ;;
 18602                                  ;	push	ax
 18603                                  ;	mov	ah,84h
 18604                                  ;	int	2ah			;indicate idle to WIN386
 18605                                  ;;
 18606                                  ;;When control returns from WIN386, we continue the raw read
 18607                                  ;;
 18608                                  ;	pop	ax
 18609                                  ;	jmp	do_io
 18610                                  ;
 18611                                  ;pop_done_read:
 18612                                  ;	pop	ds
 18613                                  ;done_read:
 18614                                  ;	add	di,[CALLSCNT]
 18615                                  ;	jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 18616                                  
 18617                                  TRANBUF:
 18618 00003F12 AC                      	LODSB
 18619 00003F13 AA                      	STOSB
 18620 00003F14 3C0D                    	CMP	AL,c_CR 	; Check for carriage return
 18621 00003F16 7503                    	JNZ	short NORMCH
 18622 00003F18 C6040A                  	MOV	BYTE [SI],c_LF
 18623                                  NORMCH:
 18624 00003F1B 3C0A                    	CMP	AL,c_LF
 18625 00003F1D E0F3                    	LOOPNZ	TRANBUF
 18626 00003F1F 7507                    	JNZ	short ENDRDCON
 18627 00003F21 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 18628 00003F23 E857E4                  	call	OUTT		; Transmit linefeed
 18629 00003F26 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 18630                                  ENDRDCON:
 18631                                  
 18632                                  ;hkn; SS is DOSDATA
 18633 00003F28 16                      	push	ss
 18634 00003F29 1F                      	pop	ds
 18635 00003F2A E8B7FE                  	CALL	SWAPBACK
 18636 00003F2D 8936[2200]              	MOV	[CONTPOS],SI
 18637                                  ENDRDDEV:
 18638                                  
 18639                                  ;hkn; SS is DOSDATA
 18640 00003F31 16                      	push	ss
 18641 00003F32 1F                      	pop	ds
 18642                                  
 18643 00003F33 893E[5005]              	MOV	[NEXTADD],DI
 18644 00003F37 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 18645 00003F39 C43E[3605]              	LES	DI,[THISSFT]
 18646                                  	;and	byte [es:di+5],0BFh
 18647 00003F3D 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 18648                                  					; Mark as no more data available
 18649                                  SETSFTC:
 18650 00003F42 E8ED04                  	call	SETSFT
 18651 00003F45 C3                      	retn
 18652                                  
 18653                                  READCON:
 18654 00003F46 E8A1FE                  	CALL	SWAPCON
 18655 00003F49 8B36[2200]              	MOV	SI,[CONTPOS]
 18656 00003F4D 09F6                    	OR	SI,SI
 18657 00003F4F 75C1                    	JNZ	short TRANBUF
 18658 00003F51 803E[2902]80            	CMP	BYTE [CONBUF],128
 18659 00003F56 7406                    	JZ	short GETBUF
 18660 00003F58 C706[2902]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 18661                                  GETBUF:
 18662 00003F5E 51                      	PUSH	CX
 18663 00003F5F 06                      	PUSH	ES
 18664 00003F60 57                      	PUSH	DI
 18665                                  
 18666                                  ;hkn; CONBUF is in DOSDATA
 18667 00003F61 BA[2902]                	MOV	DX,CONBUF
 18668                                  
 18669 00003F64 E896E1                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 18670 00003F67 5F                      	POP	DI
 18671 00003F68 07                      	POP	ES
 18672 00003F69 59                      	POP	CX
 18673                                  
 18674                                  ;hkn; CONBUF is in DOSDATA
 18675 00003F6A BE[2B02]                	MOV	SI,CONBUF+2
 18676                                  
 18677 00003F6D 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 18678 00003F70 75A0                    	JNZ	short TRANBUF
 18679 00003F72 B01A                    	MOV	AL,1AH
 18680 00003F74 AA                      	STOSB
 18681 00003F75 4F                      	DEC	DI
 18682 00003F76 B00A                    	MOV	AL,c_LF
 18683 00003F78 E802E4                  	call	OUTT		; Send linefeed
 18684 00003F7B 31F6                    	XOR	SI,SI
 18685 00003F7D EBA9                    	JMP	ENDRDCON
 18686                                  
 18687                                  ; 24/07/2018 - Retro DOS v3.0
 18688                                  
 18689                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 18690                                  ;---------------------------------------------------------------------------
 18691                                  ;
 18692                                  ; Procedure Name : DOS_WRITE
 18693                                  ;
 18694                                  ; Inputs:
 18695                                  ;	ThisSFT set to the SFT for the file being used
 18696                                  ;	[DMAADD] contains transfer address
 18697                                  ;	CX = No. of bytes to write
 18698                                  ; Function:
 18699                                  ;	Perform write operation
 18700                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 18701                                  ;		to current sf_position
 18702                                  ; Outputs:
 18703                                  ;    Carry clear
 18704                                  ;	SFT Position and cluster pointers updated
 18705                                  ;	CX = No. of bytes written
 18706                                  ;	ES:DI point to SFT
 18707                                  ;    Carry set
 18708                                  ;	AX is error code
 18709                                  ;	CX = 0
 18710                                  ;	ES:DI point to SFT
 18711                                  ; DS preserved, all other registers destroyed
 18712                                  ;---------------------------------------------------------------------------
 18713                                  
 18714                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 18715                                  ;hkn; point to DOSDATA.
 18716                                  
 18717                                  DOS_WRITE:
 18718 00003F7F C43E[3605]              	LES	DI,[THISSFT]
 18719                                  	;mov	al,[ES:DI+2]
 18720 00003F83 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18721                                  	;and	al,0Fh
 18722 00003F87 240F                    	AND	AL,access_mask
 18723                                  	;cmp	al,0
 18724 00003F89 3C00                    	CMP	AL,open_for_read
 18725 00003F8B 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 18726                                  BadMode:
 18727 00003F8D E9C103                  	jmp	SET_ACC_ERR
 18728                                  
 18729                                  ;
 18730                                  ; NOTE: The following check for writting to a Read Only File is performed
 18731                                  ;	    ONLY on FCBs!!!!
 18732                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 18733                                  ;	    of a read only file which can then be written to.
 18734                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 18735                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 18736                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 18737                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 18738                                  ;	    to a read-only file.
 18739                                  ;
 18740                                  Check_FCB_RO:
 18741                                  	;test	word [es:di+2],8000h
 18742 00003F90 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 18743 00003F96 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 18744                                  	;test	byte [es:di+4],1
 18745 00003F98 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 18746 00003F9D 75EE                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 18747                                  WRITE_NO_MODE:
 18748 00003F9F E88902                  	call	SETUP
 18749 00003FA2 E837E0                  	call	IsSFTNet
 18750 00003FA5 7406                    	JZ	short LOCAL_WRITE
 18751                                  
 18752                                  ;IF NOT Installed
 18753                                  ;	transfer NET_WRITE
 18754                                  ;ELSE
 18755                                  	;mov	ax,1109h
 18756 00003FA7 B80911                  	MOV	AX,(MultNET<<8)|9
 18757 00003FAA CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 18758                                  			; ES:DI -> SFT
 18759                                  			; SFT DPB field -> DPB of drive containing file
 18760                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18761                                  			; Return: CF set on error, CX = bytes written
 18762 00003FAC C3                      	retn
 18763                                  ;ENDIF
 18764                                  
 18765                                  LOCAL_WRITE:
 18766                                  	;test	word [es:di+5],80h
 18767 00003FAD 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 18768 00003FB3 7552                    	jnz	short WRTDEV
 18769                                  	;mov	byte [EXTERR_LOCUS],2
 18770 00003FB5 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18771 00003FBA E8A8E0                  	call	EcritDisk
 18772                                  
 18773 00003FBD E8A104                  	call	DISKWRITE
 18774                                  
 18775                                  	; MSDOS 6.0
 18776                                  ;; Extended Open
 18777                                  	;JC	short nocommit
 18778                                  	;LES	DI,[THISSFT]
 18779                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],auto_commit_write
 18780                                  	;JZ	short nocommit
 18781                                  	;PUSH	CX
 18782                                  	;call	DOS_COMMIT
 18783                                  	;POP	CX
 18784                                  ;nocommit:
 18785                                  ;; Extended Open
 18786 00003FC0 E8AAE0                  	call	LcritDisk
 18787 00003FC3 C3                      	retn
 18788                                  
 18789                                  DVWRTRAW:
 18790 00003FC4 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18791 00003FC6 E88D0F                  	call	SETWRITE
 18792 00003FC9 1E                      	PUSH	DS			; Save seg of transfer
 18793                                  
 18794                                  ;hkn; SS override
 18795 00003FCA 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18796 00003FCF E82A0F                  	call	DEVIOCALL		; DS:SI -> DEVICE
 18797                                  
 18798 00003FD2 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 18799 00003FD4 B487                    	MOV	AH,87H
 18800                                  
 18801                                  ;hkn; SS override
 18802 00003FD6 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18803                                  
 18804                                  	; MSDOS 3.3
 18805                                  	;test	di,8000h
 18806                                  	;jz	short CWRTROK
 18807                                  
 18808                                  	; MSDOS 6.0
 18809 00003FDB 09FF                    	or	di,di
 18810 00003FDD 7914                    	jns	short CWRTROK
 18811                                  	
 18812                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18813 00003FDF E84D18                  	call	CHARHARD
 18814                                  
 18815                                  	; MSDOS 6.0
 18816                                  	;sub	cx,[ss:callscnt]	; update ptr & count to reflect	M065
 18817                                  	;mov	bx,dx			; number of chars xferred	M065
 18818                                  	;add	bx,[ss:callscnt]		;				M065
 18819                                  	;mov	di,bx			;				M065
 18820                                  	
 18821                                  	; MSDOS 3.3
 18822 00003FE2 89D3                    	MOV	BX,DX			; Recall transfer addr		M065
 18823                                  
 18824                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18825 00003FE4 08C0                    	OR	AL,AL
 18826 00003FE6 740B                    	JZ	short CWRTROK 		; Ignore
 18827 00003FE8 3C03                    	CMP	AL,3
 18828 00003FEA 7403                    	JZ	short CWRFERR
 18829 00003FEC 1F                      	POP	DS			; Recover saved seg of transfer
 18830 00003FED EBD5                    	JMP	short DVWRTRAW		; Try again
 18831                                  
 18832                                  CWRFERR:
 18833 00003FEF 58                      	POP	AX			; Chuck saved seg of transfer
 18834 00003FF0 E99FFE                  	JMP	CRDFERR 		; Will pop one more stack element
 18835                                  
 18836                                  CWRTROK:
 18837 00003FF3 58                      	POP	AX			; Chuck saved seg of transfer
 18838 00003FF4 1F                      	POP	DS
 18839 00003FF5 A1[1803]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 18840                                  ENDWRDEV:
 18841 00003FF8 C43E[3605]              	LES	DI,[THISSFT]
 18842 00003FFC 89C1                    	MOV	CX,AX
 18843 00003FFE E85304                  	call	ADDREC
 18844 00004001 C3                      	retn
 18845                                  
 18846                                  WRTNUL:
 18847 00004002 89CA                    	MOV	DX,CX			;Entire transfer done
 18848                                  WRTCOOKJ:
 18849 00004004 E98D00                  	JMP	WRTCOOKDONE
 18850                                  
 18851                                  WRTDEV:
 18852                                  	;mov	byte [EXTERR_LOCUS],4
 18853 00004007 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18854                                  	;or	byte [es:di+5],40h
 18855 0000400C 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 18856                                  					; Reset EOF for input
 18857                                  	;mov	bl,[es:di+5]
 18858 00004011 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18859 00004015 31C0                    	XOR	AX,AX
 18860 00004017 E3DF                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 18861 00004019 1E                      	PUSH	DS
 18862 0000401A 88D8                    	MOV	AL,BL
 18863 0000401C C51E[DA02]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 18864 00004020 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 18865 00004022 31D2                    	XOR	DX,DX			; Set starting point
 18866                                  	;test	al,20h
 18867 00004024 A820                    	test	AL,devid_device_raw	; Raw?
 18868                                  	;JZ	short TEST_DEV_CON
 18869                                  	;JMP	DVWRTRAW
 18870 00004026 759C                    	jnz	short DVWRTRAW
 18871                                  
 18872                                  TEST_DEV_CON:
 18873                                  	;test	al,2
 18874 00004028 A802                    	test	AL,devid_device_con_out ; Console output device?
 18875 0000402A 756E                    	jnz	short WRITECON
 18876                                  	;test	al,4
 18877 0000402C A804                    	test	AL,devid_device_null
 18878 0000402E 75D2                    	JNZ	short WRTNUL
 18879 00004030 89D0                    	MOV	AX,DX
 18880 00004032 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 18881 00004035 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 18882 00004037 51                      	PUSH	CX
 18883 00004038 B90100                  	MOV	CX,1
 18884 0000403B E8180F                  	call	SETWRITE
 18885 0000403E 59                      	POP	CX
 18886                                  
 18887                                  ;hkn; SS override
 18888 0000403F 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18889                                  ;
 18890                                  ;SR; Removed X25 support from here
 18891                                  ;
 18892                                  	;lds	si,[si+7]
 18893 00004044 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18894                                  DVWRTLP:
 18895 00004047 E81016                  	call	DSKSTATCHK
 18896 0000404A E8B20E                  	call	DEVIOCALL2
 18897 0000404D 57                      	PUSH	DI
 18898 0000404E B487                    	MOV	AH,87H
 18899                                  
 18900                                  ;hkn; SS override
 18901 00004050 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18902                                  	
 18903                                  	; MSDOS 3.3
 18904                                  	;test	di,8000h
 18905                                  	;jz	short CWROK
 18906                                  
 18907                                  	; MSDOS 6.0
 18908 00004055 09FF                    	or	di,di
 18909 00004057 7916                    	jns	short CWROK
 18910                                  	
 18911                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18912 00004059 E8D317                  	call	CHARHARD
 18913 0000405C 5F                      	POP	DI
 18914                                  
 18915                                  ;hkn; SS override
 18916 0000405D 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18917 00004064 3C01                    	CMP	AL,1
 18918 00004066 74DF                    	JZ	short DVWRTLP 	; Retry
 18919 00004068 08C0                    	OR	AL,AL
 18920 0000406A 740C                    	JZ	short DVWRTIGN	; Ignore
 18921                                  	; 10/08/2018
 18922 0000406C E923FE                  	JMP	CRDFERR 	; Fail, pops one stack element
 18923                                  
 18924                                  CWROK:
 18925 0000406F 5F                      	POP	DI
 18926                                  
 18927                                  ;hkn; SS override
 18928 00004070 36833E[1803]00          	CMP	word [SS:CALLSCNT],0
 18929 00004076 741C                    	JZ	short WRTCOOKDONE
 18930                                  DVWRTIGN:
 18931 00004078 42                      	INC	DX
 18932                                  
 18933                                  ;hkn; SS override for CALLXAD
 18934 00004079 36FF06[1403]            	INC	WORD [SS:CALLXAD]
 18935 0000407E 47                      	INC	DI
 18936 0000407F 1E                      	PUSH	DS
 18937 00004080 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18938 00004085 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 18939 00004088 1F                      	POP	DS
 18940 00004089 7409                    	JZ	short WRTCOOKDONE
 18941                                  
 18942                                  ;hkn; SS override
 18943 0000408B 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18944 00004092 E2B3                    	LOOP	DVWRTLP
 18945                                  WRTCOOKDONE:
 18946 00004094 89D0                    	MOV	AX,DX
 18947 00004096 1F                      	POP	DS
 18948 00004097 E95EFF                  	JMP	ENDWRDEV ; 10/08/2018
 18949                                  
 18950                                  WRITECON:
 18951 0000409A 1E                      	PUSH	DS
 18952                                  
 18953                                  ;hkn; SS is DOSDATA
 18954 0000409B 16                      	push	ss
 18955 0000409C 1F                      	pop	ds
 18956 0000409D E84AFD                  	CALL	SWAPCON
 18957 000040A0 1F                      	POP	DS
 18958 000040A1 89DE                    	MOV	SI,BX
 18959 000040A3 51                      	PUSH	CX
 18960                                  WRCONLP:
 18961 000040A4 AC                      	LODSB
 18962 000040A5 3C1A                    	CMP	AL,1Ah		; ^Z?
 18963 000040A7 7405                    	JZ	short CONEOF
 18964 000040A9 E8D1E2                  	call	OUTT
 18965 000040AC E2F6                    	LOOP	WRCONLP
 18966                                  CONEOF:
 18967 000040AE 58                      	POP	AX			; Count
 18968 000040AF 29C8                    	SUB	AX,CX			; Amount actually written
 18969 000040B1 1F                      	POP	DS
 18970 000040B2 E82FFD                  	CALL	SWAPBACK
 18971 000040B5 E940FF                  	JMP	ENDWRDEV
 18972                                  
 18973                                  ;---------------------------------------------------------------------------
 18974                                  ;
 18975                                  ; Procedure Name : get_io_sft
 18976                                  ;
 18977                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 18978                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more.  Otherwise, we
 18979                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 18980                                  ;
 18981                                  ;---------------------------------------------------------------------------
 18982                                  
 18983                                  GET_IO_SFT:
 18984                                  	;test	byte [SS:CONSWAP],0FFh
 18985 000040B8 36803E[0303]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 18986 000040BE 7512                    	JNZ	short GetRedir
 18987                                  GetNormal:
 18988 000040C0 16                      	push	ss
 18989 000040C1 1F                      	pop	ds
 18990 000040C2 06                      	PUSH	ES
 18991 000040C3 57                      	PUSH	DI
 18992 000040C4 E83A27                  	call	SFFromHandle
 18993 000040C7 7206                    	JC	short RET44P
 18994 000040C9 8CC6                    	MOV	SI,ES
 18995 000040CB 8EDE                    	MOV	DS,SI
 18996 000040CD 89FE                    	MOV	SI,DI
 18997                                  RET44P:
 18998 000040CF 5F                      	POP	DI
 18999 000040D0 07                      	POP	ES
 19000 000040D1 C3                      	retn
 19001                                  GetRedir:
 19002 000040D2 83FB01                  	CMP	BX,1
 19003 000040D5 77E9                    	JA	short GetNormal
 19004 000040D7 36C536[7805]            	LDS	SI,[SS:CONSFT]
 19005 000040DC F8                      	CLC
 19006                                  get_io_sft_retn:
 19007 000040DD C3                      	retn
 19008                                  
 19009                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 19010                                  ;---------------------------------------------------------------------------
 19011                                  ;
 19012                                  ; Procedure Name : DIRREAD
 19013                                  ;
 19014                                  ; Inputs:
 19015                                  ;	AX = Directory block number (relative to first block of directory)
 19016                                  ;	ES:BP = Base of drive parameters
 19017                                  ;	[DIRSEC] = First sector of first cluster of directory
 19018                                  ;	[CLUSNUM] = Next cluster
 19019                                  ;	[CLUSFAC] = Sectors/Cluster
 19020                                  ; Function:
 19021                                  ;	Read the directory block into [CURBUF].
 19022                                  ; Outputs:
 19023                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 19024                                  ;	[SECCLUSPOS] Set
 19025                                  ;	ES:BP unchanged
 19026                                  ;	[CURBUF] Points to Buffer with dir sector
 19027                                  ;	Carry set if error (user said FAIL to I 24)
 19028                                  ; DS preserved, all other registers destroyed.
 19029                                  ;---------------------------------------------------------------------------
 19030                                  
 19031                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 19032                                  
 19033                                  DIRREAD:
 19034                                  
 19035                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 19036                                  ; the same as what is in the DPB! In the case of the root directory, we have
 19037                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 19038                                  ; by DIRStart = 0.
 19039                                  
 19040 000040DE 31D2                    	XOR	DX,DX
 19041 000040E0 833E[5805]00            	CMP	word [DIRSTART],0
 19042 000040E5 7503                    	jnz	short SubDir
 19043 000040E7 92                      	XCHG	AX,DX
 19044 000040E8 EB0C                    	JMP	short DoRead
 19045                                  
 19046                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 19047                                  
 19048                                  SubDir:
 19049 000040EA 88C2                    	MOV	DL,AL
 19050                                  	;and	dl,[es:bp+4]
 19051 000040EC 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 19052                                  
 19053                                  ;	(DX) = sector-in-cluster
 19054                                  
 19055                                  	;mov	cl,[es:bp+5]
 19056 000040F0 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19057 000040F4 D3E8                    	SHR	AX,CL
 19058                                  
 19059                                  ;	(DX) = position in cluster
 19060                                  ;	(AX) = number of clusters to skip
 19061                                  
 19062                                  DoRead:
 19063 000040F6 8816[0E05]              	MOV	[SECCLUSPOS],DL
 19064 000040FA 89C1                    	MOV	CX,AX
 19065 000040FC 88D4                    	MOV	AH,DL
 19066                                  
 19067                                  ;	(CX) = number of clusters to skip.
 19068                                  ;	(AH) = remainder
 19069                                  
 19070                                  	; MSDOS 6.0
 19071                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 19072                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 19073 000040FE 8B16[5605]              	MOV	DX,[DIRSEC]
 19074 00004102 00E2                    	ADD	DL,AH
 19075 00004104 80D600                  	ADC	DH,0
 19076                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 19077                                  
 19078 00004107 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19079 0000410B 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19080 0000410F E319                    	JCXZ	FIRSTCLUSTER
 19081                                  SKPCLLP:
 19082 00004111 E83E19                  	call	UNPACK
 19083 00004114 72C7                    	jc	short get_io_sft_retn
 19084 00004116 87DF                    	XCHG	BX,DI
 19085 00004118 E82019                  	call	IsEOF			; test for eof based on fat size
 19086 0000411B 7302                    	JAE	short HAVESKIPPED
 19087 0000411D E2F2                    	LOOP	SKPCLLP
 19088                                  HAVESKIPPED:
 19089 0000411F 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19090 00004123 89FA                    	MOV	DX,DI
 19091 00004125 88E3                    	MOV	BL,AH
 19092 00004127 E80C13                  	call	FIGREC
 19093                                  
 19094                                  	;entry	FIRSTCLUSTER
 19095                                  
 19096                                  FIRSTCLUSTER:
 19097                                  	;mov	byte [ALLOWED],18h
 19098 0000412A C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 19099 0000412F 30C0                    	XOR	AL,AL		; Indicate pre-read
 19100 00004131 E8561D                  	call	GETBUFFR
 19101 00004134 72A7                    	jc	short get_io_sft_retn
 19102                                  
 19103                                  	;entry	SET_BUF_AS_DIR
 19104                                  
 19105                                  SET_BUF_AS_DIR:
 19106                                  
 19107                                  ;	Set the type of CURBUF to be a directory sector.
 19108                                  ;	Only flags are modified.
 19109                                  
 19110 00004136 1E                      	PUSH	DS
 19111 00004137 56                      	PUSH	SI
 19112 00004138 C536[7405]              	LDS	SI,[CURBUF]
 19113                                  	;or	byte [si+5],4
 19114 0000413C 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 19115 00004140 5E                      	POP	SI
 19116 00004141 1F                      	POP	DS
 19117                                  dirread_retn:
 19118 00004142 C3                      	retn
 19119                                  
 19120                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 19121                                  ;----------------------------------------------------------------------------
 19122                                  ;
 19123                                  ; Procedure Name : FATSECRD
 19124                                  ; Inputs:
 19125                                  ;	Same as DREAD
 19126                                  ;	DS:BX = Transfer address
 19127                                  ;	CX = Number of sectors
 19128                                  ;	DX = Absolute record number
 19129                                  ;	ES:BP = Base of drive parameters
 19130                                  ; Function:
 19131                                  ;	Calls BIOS to perform FAT read.
 19132                                  ; Outputs:
 19133                                  ;	Same as DREAD
 19134                                  ;---------------------------------------------------------------------------
 19135                                  
 19136                                  FATSECRD:
 19137                                  ;hkn; SS override
 19138                                  	;mov	byte [ss:ALLOWED],18h
 19139 00004143 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 19140 00004149 89CF                    	MOV	DI,CX
 19141                                  	;mov	cl,[es:bp+8]
 19142 0000414B 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 19143                                  	; MSDOS 6.0
 19144                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE] 	;>32mb
 19145                                  	; MSDOS 3.3
 19146                                  	;mov	al,[es:bp+0Fh]
 19147 0000414F 268A460F                	MOV	AL,[ES:BP+DPB.FAT_SIZE] 
 19148 00004153 30E4                    	XOR	AH,AH
 19149 00004155 30ED                    	XOR	CH,CH				;>32mb
 19150 00004157 52                      	PUSH	DX
 19151                                  NXTFAT:
 19152                                  	; MSDOS 6.0
 19153                                  ;hkn; SS override
 19154                                  	;MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 19155 00004158 51                      	PUSH	CX			;32mb
 19156 00004159 50                      	PUSH	AX
 19157 0000415A 89F9                    	MOV	CX,DI
 19158 0000415C E85A00                  	call	DSKREAD
 19159 0000415F 58                      	POP	AX
 19160 00004160 59                      	POP	CX
 19161 00004161 7420                    	JZ	short RET41P		; Carry clear
 19162 00004163 01C2                    	ADD	DX,AX
 19163 00004165 E2F1                    	LOOP	NXTFAT
 19164 00004167 5A                      	POP	DX
 19165 00004168 89F9                    	MOV	CX,DI
 19166                                  
 19167                                  ; NOTE FALL THROUGH
 19168                                  
 19169                                  ;Break	<DREAD -- DO A DISK READ>
 19170                                  ;---------------------------------------------------------------------------
 19171                                  ;
 19172                                  ; Procedure Name : DREAD
 19173                                  ;
 19174                                  ; Inputs:
 19175                                  ;	DS:BX = Transfer address
 19176                                  ;	CX = Number of sectors
 19177                                  ;	DX = Absolute record number	      (LOW)
 19178                                  ;	[HIGH_SECTOR]= Absolute record number (HIGH)
 19179                                  ;	ES:BP = Base of drive parameters
 19180                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 19181                                  ; Function:
 19182                                  ;	Calls BIOS to perform disk read. If BIOS reports
 19183                                  ;	errors, will call HARDERRRW for further action.
 19184                                  ; Outputs:
 19185                                  ;	Carry set if error (currently user FAILED to INT 24)
 19186                                  ; DS,ES:BP preserved. All other registers destroyed.
 19187                                  ;---------------------------------------------------------------------------
 19188                                  
 19189                                  	;entry	DREAD
 19190                                  DREAD:
 19191 0000416A E84C00                  	call	DSKREAD
 19192 0000416D 74D3                    	jz	short dirread_retn	; Carry clear
 19193                                  ;hkn; SS override
 19194 0000416F 36C606[1005]00          	MOV	BYTE [SS:READOP],0
 19195 00004175 E89900                  	call	HARDERRRW
 19196 00004178 3C01                    	CMP	AL,1		; Check for retry
 19197 0000417A 74EE                    	JZ	short DREAD
 19198 0000417C 3C03                    	CMP	AL,3		; Check for FAIL
 19199 0000417E F8                      	CLC
 19200 0000417F 7501                    	JNZ	short NO_CAR		; Ignore
 19201 00004181 F9                      	STC
 19202                                  NO_CAR:
 19203 00004182 C3                      	retn
 19204                                  RET41P: 
 19205 00004183 5A                      	POP	DX
 19206 00004184 C3                      	retn
 19207                                  
 19208                                  ; 24/07/2018 - Retro DOS v3.0
 19209                                  
 19210                                  ;Break	<CHECK_WRITE_LOCK>
 19211                                  ;---------------------------------------------------------------------------
 19212                                  ;
 19213                                  ; Procedure Name : CHECK_WRITE_LOCK
 19214                                  ;
 19215                                  ; Inputs:
 19216                                  ;	output of SETUP
 19217                                  ;	ES:DI -> SFT
 19218                                  ; Function:
 19219                                  ;	check write lock
 19220                                  ; Outputs:
 19221                                  ;	Carry set if error
 19222                                  ;	Carry clear if ok
 19223                                  ;
 19224                                  ;----------------------------------------------------------------------------
 19225                                  
 19226                                  CHECK_WRITE_LOCK:
 19227                                  	; MSDOS 6.0
 19228                                  	;test	byte [es:di+4],8
 19229 00004185 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19230                                  	;JZ	short write_cont			     ;no
 19231                                  	;call	SET_ACC_ERR_DS		;
 19232                                  	;retn
 19233                                  	;jnz	SET_ACC_ERR_DS
 19234                                  	; 19/08/2018
 19235 0000418A 7403                    	jz	short write_cont
 19236 0000418C E9C001                  	jmp	SET_ACC_ERR_DS
 19237                                  write_cont:				;
 19238 0000418F 51                      	PUSH	CX			;save reg
 19239 00004190 09C9                    	OR	CX,CX			;
 19240 00004192 7501                    	JNZ	short Not_Truncate	;
 19241 00004194 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 19242                                  Not_Truncate:				;
 19243 00004195 B080                    	MOV	AL,80H			;check write access
 19244 00004197 E84F31                  	call	LOCK_CHECK		;check lock
 19245 0000419A 59                      	POP	CX			;restore reg
 19246 0000419B 7305                    	JNC	short WRITE_OK		;lock ok
 19247 0000419D E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 19248 000041A0 73ED                    	JNC	short write_cont	;retry
 19249                                  WRITE_OK:				;
 19250 000041A2 C3                      	retn				;
 19251                                  
 19252                                  ;Break	<CHECK_READ_LOCK>
 19253                                  ;---------------------------------------------------------------------------
 19254                                  ;
 19255                                  ; Procedure Name : CHECK_READ_LOC
 19256                                  ;
 19257                                  ; Inputs:
 19258                                  ;	ES:DI -> SFT
 19259                                  ;	output of SETUP
 19260                                  ; Function:
 19261                                  ;	check read lock
 19262                                  ; Outputs:
 19263                                  ;	Carry set if error
 19264                                  ;	Carry clear if ok
 19265                                  ;----------------------------------------------------------------------------
 19266                                  
 19267                                  CHECK_READ_LOCK:
 19268                                  	; MSDOS 6.0
 19269                                  	;test	byte [es:di+4],8
 19270 000041A3 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19271                                  	;JZ	short do_retry			   	     ; no
 19272                                  	;call	SET_ACC_ERR		;
 19273                                  	;retn
 19274 000041A8 0F85A501                	jnz	SET_ACC_ERR		;
 19275                                  do_retry:				;
 19276 000041AC 30C0                    	xor	al,al			;check read access
 19277 000041AE E83831                  	call	LOCK_CHECK		;check lock
 19278 000041B1 7305                    	JNC	short READLOCK_OK 	;lock ok
 19279 000041B3 E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 19280 000041B6 73F4                    	JNC	short do_retry		;retry
 19281                                  READLOCK_OK:				;
 19282 000041B8 C3                      	retn				;
 19283                                  
 19284                                  ;============================================================================
 19285                                  ; DISK2.ASM, MSDOS 6.0, 1991
 19286                                  ;============================================================================
 19287                                  ; 24/07/2018 - Retro DOS v3.0 
 19288                                  
 19289                                  ;	TITLE	DISK2 - Disk utility routines
 19290                                  ;	NAME	Disk2
 19291                                  
 19292                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19293                                  ;
 19294                                  ;	DskRead
 19295                                  ;	DWRITE
 19296                                  ;	DSKWRITE
 19297                                  ;	HarderrRW
 19298                                  ;	SETUP
 19299                                  ;	BREAKDOWN
 19300                                  ;	READ_LOCK_VIOLATION
 19301                                  ;	WRITE_LOCK_VIOLATION
 19302                                  ;	DISKREAD
 19303                                  ;	SET_ACC_ERR_DS
 19304                                  ;	SET_ACC_ERR
 19305                                  ;	SETSFT
 19306                                  ;	SETCLUS
 19307                                  ;	AddRec
 19308                                  ;
 19309                                  ;	Revision history:
 19310                                  ;
 19311                                  ;		AN000 version 4.00 Jan. 1988
 19312                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 19313                                  
 19314                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 19315                                  ;---------------------------------------------------------------------------
 19316                                  ;
 19317                                  ; Procedure Name : DSKREAD
 19318                                  ;
 19319                                  ; Inputs:
 19320                                  ;	DS:BX = Transfer addr
 19321                                  ;	CX = Number of sectors
 19322                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19323                                  ;	DX = Absolute record number	       (LOW)
 19324                                  ;	ES:BP = Base of drive parameters
 19325                                  ; Function:
 19326                                  ;	Call BIOS to perform disk read
 19327                                  ; Outputs:
 19328                                  ;	DI = CX on entry
 19329                                  ;	CX = Number of sectors unsuccessfully transfered
 19330                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19331                                  ;	Zero set if OK (from BIOS) (carry clear)
 19332                                  ;	Zero clear if error (carry clear)
 19333                                  ; SI Destroyed, others preserved
 19334                                  ;---------------------------------------------------------------------------
 19335                                  
 19336                                  DSKREAD:
 19337 000041B9 51                      	PUSH	CX
 19338                                  	;mov	ah,[es:bp+16h]
 19339 000041BA 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19340                                  	;mov	al,[es:bp+1]
 19341 000041BE 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19342 000041C2 53                      	PUSH	BX
 19343 000041C3 06                      	PUSH	ES
 19344 000041C4 E85C0D                  	call	SETREAD
 19345 000041C7 EB27                    	JMP	short DODSKOP
 19346                                  
 19347                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 19348                                  ;--------------------------------------------------------------------------
 19349                                  ;
 19350                                  ; Procedure Name : DWRITE
 19351                                  ;
 19352                                  ; Inputs:
 19353                                  ;	DS:BX = Transfer address
 19354                                  ;	CX = Number of sectors
 19355                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19356                                  ;	DX = Absolute record number	       (LOW)
 19357                                  ;	ES:BP = Base of drive parameters
 19358                                  ;	[ALLOWED] must be set in case HARDERR called
 19359                                  ; Function:
 19360                                  ;	Calls BIOS to perform disk write. If BIOS reports
 19361                                  ;	errors, will call HARDERRRW for further action.
 19362                                  ; Output:
 19363                                  ;	Carry set if error (currently, user FAILed to I 24)
 19364                                  ; BP preserved. All other registers destroyed.
 19365                                  ;----------------------------------------------------------------------------
 19366                                  
 19367                                  
 19368                                  	;entry	DWRITE
 19369                                  DWRITE:
 19370 000041C9 E81600                  	CALL	DSKWRITE
 19371 000041CC 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 19372                                  
 19373                                  ;hkn; SS override
 19374 000041CE 36C606[1005]01          	MOV	BYTE [SS:READOP],1
 19375 000041D4 E83A00                  	call	HARDERRRW
 19376 000041D7 3C01                    	CMP	AL,1		; Check for retry
 19377 000041D9 74EE                    	JZ	short DWRITE
 19378 000041DB 3C03                    	CMP	AL,3		; Check for FAIL
 19379 000041DD F8                      	CLC
 19380 000041DE 7501                    	JNZ	short NO_CAR2 	; Ignore
 19381 000041E0 F9                      	STC
 19382                                  NO_CAR2:
 19383                                  dw_ret_label:
 19384 000041E1 C3                      	retn
 19385                                  
 19386                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 19387                                  ;---------------------------------------------------------------------------
 19388                                  ;
 19389                                  ; Procedure Name : DSKWRITE
 19390                                  ;
 19391                                  ; Inputs:
 19392                                  ;	DS:BX = Transfer addr
 19393                                  ;	CX = Number of sectors
 19394                                  ;	DX = Absolute record number	       (LOW)
 19395                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19396                                  ;	ES:BP = Base of drive parameters
 19397                                  ; Function:
 19398                                  ;	Call BIOS to perform disk read
 19399                                  ; Outputs:
 19400                                  ;	DI = CX on entry
 19401                                  ;	CX = Number of sectors unsuccessfully transfered
 19402                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19403                                  ;	Zero set if OK (from BIOS) (carry clear)
 19404                                  ;	Zero clear if error (carry clear)
 19405                                  ; SI Destroyed, others preserved
 19406                                  ;
 19407                                  ;----------------------------------------------------------------------------
 19408                                  
 19409                                  	;entry	DSKWRITE
 19410                                  DSKWRITE:
 19411 000041E2 51                      	PUSH	CX
 19412                                  	;mov	ah,[es:bp+16h]
 19413 000041E3 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19414                                  	;mov	al,[es:bp+1]
 19415 000041E7 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19416 000041EB 53                      	PUSH	BX
 19417 000041EC 06                      	PUSH	ES
 19418 000041ED E8660D                  	call	SETWRITE
 19419                                  DODSKOP:
 19420 000041F0 8CD9                    	MOV	CX,DS		; Save DS
 19421 000041F2 1F                      	POP	DS		; DS:BP points to DPB
 19422 000041F3 1E                      	PUSH	DS
 19423                                  	;lds	si,[ds:bp+12h]
 19424 000041F4 3EC57612                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 19425 000041F8 E8040D                  	call	DEVIOCALL2
 19426 000041FB 8ED9                    	MOV	DS,CX		; Restore DS
 19427 000041FD 07                      	POP	ES		; Restore ES
 19428 000041FE 5B                      	POP	BX
 19429                                  
 19430                                  ;hkn; SS override
 19431 000041FF 368B0E[1803]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 19432 00004204 5F                      	POP	DI
 19433 00004205 29F9                    	SUB	CX,DI
 19434 00004207 F7D9                    	NEG	CX		; Number of sectors not transferred
 19435                                  
 19436                                  ;hkn; SS override
 19437 00004209 36A1[0903]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 19438                                  	;test	ax,8000h
 19439 0000420D A90080                  	test	AX,STERR
 19440 00004210 C3                      	retn
 19441                                  
 19442                                  ;Break	<HardErrRW - map extended errors and call harderr>
 19443                                  ;---------------------------------------------------------------------------
 19444                                  ;
 19445                                  ; Procedure Name : HardErrRW
 19446                                  ;
 19447                                  ; Inputs:
 19448                                  ;	AX is error code from read or write
 19449                                  ;	Other registers set as per HARDERR
 19450                                  ; Function:
 19451                                  ;	Checks the error code for special extended
 19452                                  ;	errors and maps them if needed. Then invokes
 19453                                  ;	Harderr
 19454                                  ; Outputs:
 19455                                  ;	Of HARDERR
 19456                                  ; AX may be modified prior to call to HARDERR.
 19457                                  ; No other registers altered.
 19458                                  ;
 19459                                  ;---------------------------------------------------------------------------
 19460                                  
 19461                                  HARDERRRW:
 19462                                  	;cmp	al,0Fh
 19463 00004211 3C0F                    	CMP	AL,error_I24_wrong_disk
 19464 00004213 7512                    	JNZ	short DO_ERR				; Nothing to do
 19465                                  
 19466                                  	; MSDOS 3.3
 19467                                  	;push	ds
 19468                                  	;push	si
 19469                                  	;lds	si,[ss:CALLVIDRW]
 19470                                  	;mov	[ss:EXTERRPT+2], ds
 19471                                  	;mov	[ss:EXTERRPT], si
 19472                                  	;pop	si
 19473                                  	;pop	ds
 19474                                  
 19475                                  	; MSDOS 6.0
 19476 00004215 50                      	push	ax
 19477 00004216 36A1[1C03]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 19478 0000421A 36A3[D602]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 19479 0000421E 36A1[1E03]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 19480 00004222 36A3[D802]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 19481 00004226 58                      	pop	ax
 19482                                  DO_ERR:
 19483 00004227 E82316                  	call	HARDERR
 19484 0000422A C3                      	retn
 19485                                  
 19486                                  ; 24/07/2018 - Retro DOS v3.0
 19487                                  
 19488                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 19489                                  ;----------------------------------------------------------------------------
 19490                                  ;
 19491                                  ; Procedure Name : SETUP
 19492                                  ;
 19493                                  ; Inputs:
 19494                                  ;	ES:DI point to SFT (value also in THISSFT)
 19495                                  ;	DMAAdd contains transfer address
 19496                                  ;	CX = Byte count
 19497                                  ;	DS = DOSDATA
 19498                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 19499                                  ;		2nd of caller of caller.
 19500                                  ; Outputs:
 19501                                  ;	    CX = byte count
 19502                                  ;	    [THISDPB] = Base of drive parameters if file
 19503                                  ;		      = Pointer to device header if device or NET
 19504                                  ;	    ES:DI Points to SFT
 19505                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 19506                                  ;	    [TRANS] = 0 (No transfers yet)
 19507                                  ;	    BytPos = Byte position in file
 19508                                  ;
 19509                                  ;	The following fields are relevant to local files (not devices) only:
 19510                                  ;
 19511                                  ;	    SecPos = Position of first sector (local files only)
 19512                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 19513                                  ;	    [CLUSNUM] = First cluster (local files only)
 19514                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 19515                                  ;	    [THISDRV] = Physical unit number (local files only)
 19516                                  ;
 19517                                  ;      RETURNS ONE LEVEL UP WITH:
 19518                                  ;	   CX = 0
 19519                                  ;	   CARRY = Clear
 19520                                  ;	IF AN ERROR IS DETECTED
 19521                                  ; All other registers destroyed
 19522                                  ;----------------------------------------------------------------------------
 19523                                  
 19524                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 19525                                  
 19526                                  SETUP:
 19527                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 19528                                  
 19529                                  	;lds 	si,[es:di+7]
 19530 0000422B 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 19531                                  
 19532                                  ;hkn; SS override
 19533 0000422F 368C1E[2605]            	MOV	[SS:THISDPB+2],DS
 19534                                  
 19535                                  ;hkn; SS is DOSDATA
 19536 00004234 16                      	push	ss
 19537 00004235 1F                      	pop	ds
 19538                                  
 19539 00004236 8936[2405]              	MOV	[THISDPB],SI
 19540                                  
 19541 0000423A 8B1E[DA02]              	MOV	BX,[DMAADD]
 19542 0000423E 891E[5005]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 19543 00004242 C606[0F05]00            	MOV	BYTE [TRANS],0		;No transferes
 19544                                  	;mov	ax,[es:di+15h]
 19545 00004247 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 19546                                  	;mov	dx,[es:di+17h]
 19547 0000424B 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 19548 0000424F 8916[6205]              	MOV	[BYTPOS+2],DX	;Set it
 19549 00004253 A3[6005]                	MOV	[BYTPOS],AX
 19550                                  	;test	word [es:di+5],8080h
 19551 00004256 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 19552 0000425C 7536                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 19553 0000425E 06                      	PUSH	ES
 19554 0000425F C42E[2405]              	LES	BP,[THISDPB]		;Point at the DPB
 19555                                  	;mov	bl,[es:bp+0]
 19556                                  	;MOV	BL,[ES:BP+DPB.drive]
 19557 00004263 268A5E00                	mov	bl,[es:bp]
 19558 00004267 881E[1105]              	MOV	[THISDRV],BL		;Set THISDRV
 19559                                  	;mov	bx,[es:bp+2]
 19560 0000426B 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 19561                                  
 19562                                  	; MSDOS 3.3
 19563 0000426F 39DA                    	cmp	dx, bx
 19564 00004271 7336                    	jnb	short EOFERR
 19565 00004273 F7F3                    	div	bx
 19566 00004275 A3[5A05]                	mov	[SECPOS],ax
 19567 00004278 8916[5E05]              	mov	[BYTSECPOS],dx
 19568 0000427C 89C2                    	mov	dx,ax
 19569                                  	;and	al,[es:bp+4]
 19570 0000427E 26224604                	AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 19571 00004282 A2[0E05]                	mov	[SECCLUSPOS],al
 19572 00004285 89C8                    	mov	ax,cx
 19573                                  	;mov	cl,[es:bp+5]
 19574 00004287 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19575 0000428B D3EA                    	shr	dx,cl
 19576 0000428D 8916[5405]              	mov	[CLUSNUM],dx
 19577 00004291 07                      	pop	es
 19578 00004292 89C1                    	mov	cx,ax
 19579                                  
 19580                                  	; MSDOS 6.0
 19581                                  ;M039: Optimized this section.
 19582                                          ;PUSH    CX                            ;SHR32 and DIV32 use CX.
 19583                                  	;call	DIV32			      ;DX:AX/BX = CX:AX + DX (rem)
 19584                                  	;MOV	[BYTSECPOS],DX
 19585                                  	;MOV	[SecPos],AX
 19586                                  	;MOV	[SecPos+2],CX
 19587                                  	;MOV	DX,CX
 19588                                  
 19589                                  	;MOV	BX,AX
 19590                                  	;;and	bl,[es:bp+4]
 19591                                  	;AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 19592                                  	;MOV	[SECCLUSPOS],BL
 19593                                  
 19594                                  	;call	SHR32			     ;(DX:AX SHR dpb_cluster_shift)
 19595                                  	;POP	CX			     ;CX = byte count.
 19596                                  	;JNZ	short EOFERR		     ;cluster number above 64k
 19597                                  	;CMP	AX,[ES:BP+DPB.MAX_CLUSTER]   ;>32mb    if > disk size ;AN000;
 19598                                  	;JA	short EOFERR		     ;>32mb    then EOF       ;AN000;
 19599                                  
 19600                                  	;MOV	[CLUSNUM],AX
 19601                                  	;POP	ES			     ; ES:DI point to SFT
 19602                                  ;M039
 19603                                  
 19604                                  NOSETSTUFF:
 19605 00004294 89C8                    	MOV	AX,CX		; AX = Byte count.
 19606 00004296 0306[DA02]              	ADD	AX,[DMAADD]	 ; See if it will fit in one segment
 19607 0000429A 730C                    	JNC	short setup_OK		; Must be less than 64K
 19608 0000429C A1[DA02]                	MOV	AX,[DMAADD]
 19609 0000429F F7D8                    	NEG	AX		; Amount of room left in segment (know
 19610                                  				;    less than 64K since max value of CX
 19611                                  				;    is FFFF).
 19612 000042A1 7501                    	JNZ	short NoDec
 19613 000042A3 48                      	DEC	AX
 19614                                  NoDec:
 19615 000042A4 89C1                    	MOV	CX,AX		; Can do this much
 19616 000042A6 E309                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 19617                                  setup_OK:
 19618 000042A8 C3                      	retn
 19619                                  
 19620                                  EOFERR:
 19621 000042A9 07                      	POP	ES		; ES:DI point to SFT
 19622 000042AA 31C9                    	XOR	CX,CX		; No bytes read
 19623                                  ;;;;;;;;;;; 7/18/86
 19624                                  	; MSDOS 3.3
 19625 000042AC C606[8C0F]01            	MOV	BYTE [DISK_FULL],1 ; set disk full flag
 19626                                  ;;;;;;;;;;;
 19627                                  NOROOM:
 19628 000042B1 5B                      	POP	BX		; Kill return address
 19629 000042B2 F8                      	CLC
 19630 000042B3 C3                      	retn			; RETURN TO CALLER OF CALLER
 19631                                  
 19632                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 19633                                  ;---------------------------------------------------------------------------
 19634                                  ;
 19635                                  ; Procedure Name : BREAKDOWN
 19636                                  ;
 19637                                  ; Inputs:
 19638                                  ;	CX = Length of disk transfer in bytes
 19639                                  ;	ES:BP = Base of drive parameters
 19640                                  ;	[BYTSECPOS] = Byte position within first sector
 19641                                  ;	DS = DOSDATA
 19642                                  ; Outputs:
 19643                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 19644                                  ;	[SECCNT] = No. of whole sectors to transfer
 19645                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 19646                                  ; AX, BX, DX destroyed. No other registers affected.
 19647                                  ;---------------------------------------------------------------------------
 19648                                  
 19649                                  BREAKDOWN:
 19650 000042B4 A1[5E05]                	MOV	AX,[BYTSECPOS]
 19651 000042B7 89CB                    	MOV	BX,CX
 19652 000042B9 09C0                    	OR	AX,AX
 19653 000042BB 740E                    	JZ	short SAVFIR	; Partial first sector?
 19654                                  	;sub	ax,[es:bp+2]
 19655 000042BD 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 19656 000042C1 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 19657 000042C3 29C3                    	SUB	BX,AX		; Subtract from total length
 19658 000042C5 7304                    	JAE	short SAVFIR
 19659 000042C7 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 19660 000042C9 31DB                    	XOR	BX,BX		; And no bytes are left
 19661                                  SAVFIR:
 19662 000042CB A3[6405]                	MOV	[BYTCNT1],AX
 19663 000042CE 89D8                    	MOV	AX,BX
 19664 000042D0 31D2                    	XOR	DX,DX
 19665                                  	;div	word [ES:BP+2]
 19666 000042D2 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 19667 000042D6 A3[6805]                	MOV	[SECCNT],AX
 19668 000042D9 8916[6605]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 19669                                  	; MSDOS 3.3
 19670                                  ;	OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 19671                                  ;	retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 19672                                  ;	CMP	AX,1
 19673                                  ;	retnz
 19674                                  ;	MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 19675                                  ;	MOV	[BYTCNT2],AX
 19676                                  ;	MOV	[SECCNT],DX	; DX = 0
 19677                                  _RET45:
 19678 000042DD C3                      	retn
 19679                                  
 19680                                  ;----------------------------------------------------------------------------
 19681                                  ;
 19682                                  ; Procedure Name : READ_LOCK_VIOLATION
 19683                                  ;
 19684                                  ; ES:DI points to SFT. This entry used by NET_READ
 19685                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 19686                                  ; Else do retrys.
 19687                                  ; ES:DI,DS,CX preserved
 19688                                  ;
 19689                                  ;----------------------------------------------------------------------------
 19690                                  
 19691                                  READ_LOCK_VIOLATION:
 19692 000042DE C606[1005]00            	MOV	byte [READOP],0
 19693                                  ERR_ON_CHECK:
 19694                                  	;test	word [es:di+2],8000h
 19695 000042E3 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 19696 000042E9 750E                    	JNZ	short HARD_ERR
 19697 000042EB 51                      	PUSH	CX
 19698 000042EC 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 19699                                  	;and	cl,0F0h
 19700 000042F0 80E1F0                  	AND	CL,SHARING_MASK
 19701                                  	;cmp	cl,0
 19702 000042F3 80F900                  	CMP	CL,SHARING_COMPAT
 19703 000042F6 59                      	POP	CX
 19704 000042F7 7505                    	JNE	short NO_HARD_ERR
 19705                                  HARD_ERR:
 19706 000042F9 E80130                  	call	LOCK_VIOLATION
 19707 000042FC 73DF                    	jnc	short _RET45		; User wants Retrys
 19708                                  NO_HARD_ERR:
 19709 000042FE 31C9                    	XOR	CX,CX			;No bytes transferred
 19710                                  	;mov	ax, 21h
 19711 00004300 B82100                  	MOV	AX,error_lock_violation
 19712 00004303 F9                      	STC
 19713 00004304 C3                      	retn
 19714                                  
 19715                                  ;----------------------------------------------------------------------------
 19716                                  ;
 19717                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 19718                                  ;
 19719                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 19720                                  ; This entry used by NET_WRITE
 19721                                  ;
 19722                                  ;----------------------------------------------------------------------------
 19723                                  
 19724                                  WRITE_LOCK_VIOLATION:
 19725 00004305 C606[1005]01            	MOV	byte [READOP],1
 19726 0000430A EBD7                    	JMP	short ERR_ON_CHECK
 19727                                  
 19728                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 19729                                  ;----------------------------------------------------------------------------
 19730                                  ;
 19731                                  ; Procedure Name : DISKREAD
 19732                                  ;
 19733                                  ; Inputs:
 19734                                  ;	Outputs of SETUP
 19735                                  ; Function:
 19736                                  ;	Perform disk read
 19737                                  ; Outputs:
 19738                                  ;    Carry clear
 19739                                  ;	CX = No. of bytes read
 19740                                  ;	ES:DI point to SFT
 19741                                  ;	SFT offset and cluster pointers updated
 19742                                  ;    Carry set
 19743                                  ;	CX = 0
 19744                                  ;	ES:DI point to SFT
 19745                                  ;	AX has error code
 19746                                  ;----------------------------------------------------------------------------
 19747                                  
 19748                                  ;hkn; called from disk.asm. DS already set up.
 19749                                  
 19750                                  DISKREAD:
 19751                                  	;mov	ax,[es:di+11h]
 19752 0000430C 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 19753                                  	;mov	bx,[es:di+13h]
 19754 00004310 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 19755 00004314 2B06[6005]              	SUB	AX,[BYTPOS]
 19756 00004318 1B1E[6205]              	SBB	BX,[BYTPOS+2]
 19757 0000431C 7226                    	JB	short RDERR		;Read starts past EOF
 19758 0000431E 750A                    	JNZ	short ENUF		;More than 64k to EOF
 19759 00004320 09C0                    	OR	AX,AX
 19760 00004322 7420                    	JZ	short RDERR		;Read starts at EOF
 19761 00004324 39C8                    	CMP	AX,CX
 19762 00004326 7302                    	JAE	short ENUF		;I/O fits
 19763 00004328 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 19764                                  ENUF:
 19765                                  	; MSDOS 3.3
 19766                                  	;test	byte [es:di+4],8
 19767                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 19768                                  	;jnz	short SET_ACC_ERR
 19769                                  	;call	LOCK_CHECK
 19770                                  	;jnb	short _READ_OK
 19771                                  	;call	READ_LOCK_VIOLATION
 19772                                  	;jnb	short ENUF
 19773                                  	;retn
 19774                                  
 19775                                  	; MSDOS 6.0
 19776 0000432A E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 19777 0000432D 7301                    	JNC	short _READ_OK 		; There are no locks
 19778 0000432F C3                      	retn
 19779                                  
 19780                                  _READ_OK:
 19781 00004330 C42E[2405]              	LES	BP,[THISDPB]
 19782 00004334 E87DFF                  	CALL	BREAKDOWN
 19783 00004337 8B0E[5405]              	MOV	CX,[CLUSNUM]
 19784 0000433B E8750F                  	call	FNDCLUS
 19785                                       	; MSDOS 6.0			;M022 conditional removed here
 19786 0000433E 720F                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 19787                                  					; migrated from 330a - HKN
 19788 00004340 09C9                    	OR	CX,CX
 19789 00004342 7414                    	JZ	short SKIPERR
 19790                                  RDERR:
 19791 00004344 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 19792 00004346 E9A101                  	jmp	WRTERR22
 19793                                  
 19794                                  ;RDLASTJ: 
 19795                                  	;JMP	RDLAST                  ;M039
 19796                                  
 19797                                  SETSFTJ2: 
 19798 00004349 E9E600                  	JMP	SETSFT
 19799                                  
 19800                                  CANOT_READ:
 19801                                  	; MSDOS 3.3
 19802 0000434C 59                      	POP	CX		;M039.
 19803                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19804 0000434D 59                      	POP	CX              ;Clean stack.
 19805 0000434E 5B                      	POP	BX
 19806                                  
 19807                                  	;entry	SET_ACC_ERR_DS
 19808                                  SET_ACC_ERR_DS:
 19809                                  ;hkn; SS is DOSDATA
 19810                                  	;Context DS
 19811 0000434F 16                      	push	ss
 19812 00004350 1F                      	pop	ds
 19813                                  
 19814                                  	;entry	SET_ACC_ERR
 19815                                  SET_ACC_ERR:
 19816 00004351 31C9                    	XOR	CX,CX
 19817                                  	;mov	ax,5
 19818 00004353 B80500                  	MOV	AX,error_access_denied
 19819 00004356 F9                      	STC
 19820 00004357 C3                      	retn
 19821                                  
 19822                                  SKIPERR:
 19823 00004358 8916[5205]              	MOV	[LASTPOS],DX
 19824 0000435C 891E[5405]              	MOV	[CLUSNUM],BX
 19825 00004360 833E[6405]00            	CMP	word [BYTCNT1],0
 19826 00004365 7405                    	JZ	short RDMID
 19827 00004367 E8BF0F                  	call	BUFRD
 19828 0000436A 72E3                    	JC	short SET_ACC_ERR_DS
 19829                                  RDMID:
 19830 0000436C 833E[6805]00            	CMP	word [SECCNT],0
 19831 00004371 0F84A000                	JZ	RDLAST ; 10/08/2018
 19832 00004375 E82D10                  	call	NEXTSEC
 19833 00004378 72CF                    	JC	short SETSFTJ2
 19834 0000437A C606[0F05]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 19835                                  ONSEC:
 19836 0000437F 8A16[0E05]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 19837 00004383 8B0E[6805]              	MOV	CX,[SECCNT]
 19838 00004387 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19839                                  RDLP:
 19840 0000438B E84810                  	call	OPTIMIZE
 19841 0000438E 72BF                    	JC	short SET_ACC_ERR_DS
 19842 00004390 57                      	PUSH	DI                      ;DI = Next physical cluster.
 19843 00004391 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 19844 00004392 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 19845                                  	;mov	byte [ALLOWED],38h
 19846 00004393 C606[F702]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 19847 00004398 8E1E[DC02]              	MOV	DS,[DMAADD+2]
 19848                                  
 19849 0000439C 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 19850 0000439D 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 19851                                  
 19852                                  	; MSDOS 6.0
 19853                                  	;call	SET_RQ_SC_PARMS 	 ;LB. do this for SC ;AN000;
 19854                                  
 19855                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19856 0000439E E8C9FD                  	call	DREAD
 19857                                  
 19858                                  	; MSDOS 3.3 
 19859 000043A1 5B                      	pop	bx
 19860 000043A2 5A                      	pop	dx
 19861 000043A3 72A7                    	jc	short CANOT_READ
 19862 000043A5 01D3                    	add	bx,dx	; (bx = Extent end)
 19863 000043A7 268A4600                	mov	al,[es:bp] ; mov al,[es:bp+0]
 19864                                  	;mov	al,[ES:BP+DPB.DRIVE] 
 19865 000043AB E8F819                  	call	SETVISIT
 19866                                  	; ->***
 19867                                  
 19868                                  ;M039
 19869                                  	; MSDOS 6.0 
 19870                                  	;pop	cx
 19871                                  	;pop	dx
 19872                                  	;pop	WORD [TEMP_VAR]
 19873                                  	;jc	short CANOT_READ
 19874                                  
 19875                                  	;mov	[TEMP_VAR2],ds
 19876                                  
 19877                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 19878                                  ;            sectors, also termed an "Extent".)
 19879                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 19880                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 19881                                  ;       ES:BP -> Drive Parameter Block (DPB).
 19882                                  ;
 19883                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 19884                                  ;	buffers must be "read" into the transfer memory block, so that the
 19885                                  ;       transfer memory reflects the most recent data.
 19886                                  
 19887                                  	;call    DskRdBufScan
 19888                                  
 19889                                  	;;Context DS
 19890                                  	;push	ss
 19891                                  	;pop	ds
 19892                                          
 19893                                  	;pop	cx
 19894                                          ;pop	bx
 19895                                  
 19896                                  ;       CX = # of sector remaining.
 19897                                  ;       BX = Next physical cluster.
 19898                                  ;M039
 19899                                  	; 25/07/2018 - Retro DOS v3.0
 19900                                  	; ***->
 19901                                  	; MSDOS 3.3
 19902                                  	; IBMDOS.COM (1987) - Offset 42BDh
 19903                                  bufq:
 19904                                  ;	DX = Extent start.
 19905                                  ;	BX = Extent end.
 19906                                  ;	 AL = Drive #.
 19907                                  ;     DS:DI-> 1st buffer in queue.
 19908                                  
 19909                                  	;or	byte [di+5],20h
 19910 000043AE 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 19911                                  	;cmp	al,[di+4]	
 19912 000043B2 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 19913 000043B5 7544                    	jnz	short bufq3
 19914                                  	;cmp	[di+6],dx
 19915 000043B7 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 19916 000043BA 723F                    	jb	short bufq3	; Jump if Extent start > buffer sector.
 19917                                  	;cmp	[di+6],bx
 19918 000043BC 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 19919 000043BF 733A                    	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 19920                                  	
 19921                                  	; Buffer sector is in the Extent (contiguous sectors to read)
 19922                                  
 19923                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 19924                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 19925                                  ;       as MRU (Most Recently Used).
 19926                                  
 19927                                  	;test	byte [di+5],40h
 19928 000043C1 F6450540                	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 19929 000043C5 7431                    	jz	short bufq2	; clear buffer, check the next buff sec
 19930 000043C7 58                      	pop	ax ; transfer address
 19931 000043C8 50                      	push	ax
 19932 000043C9 57                      	push	di
 19933 000043CA 52                      	push	dx
 19934                                  	;sub	dx,[di+6]
 19935 000043CB 2B5506                  	sub	dx,[DI+BUFFINFO.buf_sector]
 19936 000043CE F7DA                    	neg	dx
 19937                                  
 19938                                  ;       DX = offset (in sectors) of buffer sector within Transfer memory
 19939                                  ;            block.
 19940                                  
 19941 000043D0 89FE                    	mov	si,di
 19942 000043D2 89C7                    	mov	di,ax
 19943 000043D4 89D0                    	mov	ax,dx
 19944                                  	;mov	cx,[es:bp+6]	
 19945 000043D6 268B4E02                	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 19946 000043DA F7E1                    	mul	cx
 19947 000043DC 01C7                    	add	di,ax
 19948                                  
 19949 000043DE 8D7410                  	lea	si,[si+16]
 19950 000043E1 8D7410                  	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 19951 000043E4 D1E9                           	shr	cx,1
 19952 000043E6 06                      	push	es
 19953 000043E7 368E06[DC02]            	mov	es,[SS:DMAADD+2]
 19954                                  
 19955                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 19956                                  ;       DS:SI-> Buffer sector data.
 19957                                  ;       ES:DI-> Destination within Transfer memory block.
 19958                                  
 19959 000043EC F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 19960                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 19961                                  	;rep	movsb                   ;Copy last byte.
 19962 000043EE 7301                    	jnc	short bufq1
 19963 000043F0 A4                      	movsb
 19964                                  bufq1:
 19965 000043F1 07                      	pop	es
 19966 000043F2 5A                      	pop	dx
 19967 000043F3 5F                      	pop	di
 19968 000043F4 268A4600                	mov	al,[es:bp]  ; mov al,[es:bp+0]
 19969                                  	;mov	al,[ES:BP+DPB.DRIVE]
 19970                                  bufq2:
 19971 000043F8 E8D819                  	call	SCANPLACE
 19972                                  bufq3:
 19973 000043FB E8C119                  	call	SKIPVISIT
 19974 000043FE 75AE                    	jnz	short bufq
 19975                                  	
 19976 00004400 16                      	push	ss
 19977 00004401 1F                      	pop	ds
 19978 00004402 59                      	pop	cx
 19979 00004403 59                      	pop	cx
 19980 00004404 5B                      	pop	bx	
 19981                                  bufq4:
 19982 00004405 E30E                    	JCXZ	RDLAST
 19983 00004407 E83116                  	call	IsEOF			; test for eof on fat size
 19984 0000440A 7326                    	JAE	short SETSFT
 19985 0000440C B200                    	MOV	DL,0
 19986 0000440E FF06[5205]              	INC	word [LASTPOS]		; We'll be using next cluster
 19987 00004412 E976FF                  	JMP	RDLP
 19988                                  
 19989                                  RDLAST:
 19990 00004415 A1[6605]                	MOV	AX,[BYTCNT2]
 19991 00004418 09C0                    	OR	AX,AX
 19992 0000441A 7416                    	JZ	short SETSFT
 19993 0000441C A3[6405]                	MOV	[BYTCNT1],AX
 19994 0000441F E8830F                  	call	NEXTSEC
 19995 00004422 720E                    	JC	short SETSFT
 19996 00004424 C706[5E05]0000          	MOV	word [BYTSECPOS],0
 19997 0000442A E8FC0E                  	call	BUFRD
 19998                                  	; 10/08/2018
 19999 0000442D 7303                    	JNC	short SETSFT
 20000 0000442F E91DFF                  	JMP	SET_ACC_ERR_DS
 20001                                  
 20002                                  ;------------------------------------------------------------------------------
 20003                                  ;
 20004                                  ; Procedure Name : SETSFT
 20005                                  ; Inputs:
 20006                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 20007                                  ;		and set cluster fields
 20008                                  ; Function:
 20009                                  ;	Update [THISSFT] based on the transfer
 20010                                  ; Outputs:
 20011                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 20012                                  ;	ES:DI points to [THISSFT]
 20013                                  ;	CX No. of bytes transferred
 20014                                  ;	Carry clear
 20015                                  ;
 20016                                  ;----------------------------------------------------------------------------
 20017                                  
 20018                                  	;entry	SETSFT
 20019                                  
 20020                                  ; 26/07/2018 - Retro DOS v3.0
 20021                                  SETSFT:
 20022 00004432 C43E[3605]              	LES	DI,[THISSFT]
 20023                                  
 20024                                  ; Same as SETSFT except ES:DI already points to SFT
 20025                                  	;entry	SETCLUS
 20026                                  SETCLUS:	
 20027 00004436 8B0E[5005]              	MOV	CX,[NEXTADD]
 20028 0000443A 2B0E[DA02]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 20029                                  	;test	word [es:di+5],80h
 20030 0000443E 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20031 00004444 750E                    	JNZ	short ADDREC		; don't set clusters if device
 20032 00004446 A1[5405]                	MOV	AX,[CLUSNUM]
 20033                                  	;mov	[es:di+1Bh],ax
 20034 00004449 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 20035 0000444D A1[5205]                	MOV	AX,[LASTPOS]
 20036                                  	;mov	[es:di+19h],ax
 20037 00004450 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 20038                                  
 20039                                  ;----------------------------------------------------------------------------
 20040                                  ;
 20041                                  ; Procedure : AddRec
 20042                                  ; Inputs:
 20043                                  ;	ES:DI points to SFT
 20044                                  ;	CX is No. Bytes transferred
 20045                                  ; Function:
 20046                                  ;	Update the SFT offset based on the transfer
 20047                                  ; Outputs:
 20048                                  ;	sf_position updated to point to first byte after transfer
 20049                                  ;	ES:DI points to SFT
 20050                                  ;	CX No. of bytes transferred
 20051                                  ;	Carry clear
 20052                                  ;----------------------------------------------------------------------------
 20053                                  
 20054                                  	;entry	AddRec
 20055                                  ADDREC:
 20056 00004454 E309                    	JCXZ	RET28		; If no records read,  don't change position
 20057                                  	;add	[es:di+15h],cx
 20058 00004456 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 20059                                  	;adc	word [es:di+17h], 0
 20060 0000445A 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 20061                                  RET28:	
 20062 0000445F F8                      	CLC
 20063 00004460 C3                      	retn
 20064                                  
 20065                                  ; 25/07/2018
 20066                                  ; MSDOS 6.0
 20067                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 20068                                  ;----------------------------------------------------------------------------
 20069                                  ;
 20070                                  ; Procedure Name : DskRdBufScan
 20071                                  ;
 20072                                  ; Inputs:
 20073                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 20074                                  ;            sectors, also termed an "Extent".)
 20075                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20076                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 20077                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20078                                  ;
 20079                                  ; Function:
 20080                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 20081                                  ;	"read" into the transfer memory block, so that the transfer memory
 20082                                  ;	reflects the most recent data.
 20083                                  ;
 20084                                  ; Outputs:
 20085                                  ;       Transfer memory updated as required.
 20086                                  ;
 20087                                  ; Uses:
 20088                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 20089                                  ;       SS override for all global variables.
 20090                                  ;
 20091                                  ; Notes:
 20092                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 20093                                  ;	than the FIRST.
 20094                                  ;----------------------------------------------------------------------------
 20095                                  ;M039: Created
 20096                                  
 20097                                  ;procedure   DskRdBufScan,NEAR
 20098                                  ;
 20099                                  ;ASSUME  DS:NOTHING
 20100                                  ;
 20101                                  ;	cmp	[DirtyBufferCount],0	;Any dirty buffers?
 20102                                  ;	je	bufx			; -no, skip all work.
 20103                                  ;
 20104                                  ;       mov     bx,[HIGH_SECTOR]
 20105                                  ;       mov     si,bx
 20106                                  ;       add     cx,dx
 20107                                  ;       adc     si,0
 20108                                  ;
 20109                                  ;	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 20110                                  ;       mov     ax,[di].buf_prev
 20111                                  ;       mov     [FIRST_BUFF_ADDR],ax
 20112                                  ;
 20113                                  ;       Assert  ISDPB,<ES,BP>,"DISKREAD/bufchk"
 20114                                  ;	mov	al,es:[bp].dpb_drive
 20115                                  ;
 20116                                  ;;            BX:DX = Extent start.
 20117                                  ;;            SI:CX = Extent end + 1.
 20118                                  ;;               AL = Drive #.
 20119                                  ;;            DS:DI-> 1st buffer in queue.
 20120                                  ;;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 20121                                  ;
 20122                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20123                                  ;	jne     bufq1        		;  -no, jump.
 20124                                  ;
 20125                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20126                                  ;       ja	bufq1			;Jump if Extent start > buffer sector.
 20127                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20128                                  ;       ja	bufq2                   ;Jump if Extent end >= buffer sector.
 20129                                  ;
 20130                                  ;bufq1:	cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20131                                  ;       mov     di,[di].buf_next        ; Set-up for next buffer.
 20132                                  ;       jne     bufq                    ; -no, do next buffer
 20133                                  ;
 20134                                  ;bufx:   return                          ;Exit.
 20135                                  ;
 20136                                  ;;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 20137                                  ;;	transfer memory; otherwise, just re-position it in the buffer queue
 20138                                  ;;       as MRU (Most Recently Used).
 20139                                  ;
 20140                                  ;bufq2:	SaveReg <ax>
 20141                                  ;	testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20142                                  ;	jz      bufq3                    ; -no, jump.
 20143                                  ;
 20144                                  ;        SaveReg <cx,dx,si,di,es>
 20145                                  ;
 20146                                  ;	mov     ax,dx
 20147                                  ;	sub	ax, word ptr [di].buf_sector
 20148                                  ;	neg	ax
 20149                                  ;
 20150                                  ;;       AX = offset (in sectors) of buffer sector within Transfer memory
 20151                                  ;;            block.  (Note: the upper word of the sector # may be ignored
 20152                                  ;;	     since no more than 64k bytes will ever be read.  This 64k limit
 20153                                  ;;            is imposed by the input parameters of the disk read operation.)
 20154                                  ;
 20155                                  ;	lea	si,[di].BUFINSIZ	;DS:SI -> buffer data.
 20156                                  ;	mov     cx,es:[bp].dpb_sector_size ;CX = sector size (in bytes).
 20157                                  ;	mul     cx			;AX = offset (in bytes) of buf. sector
 20158                                  ;	mov     di,WORD PTR [TEMP_VAR]
 20159                                  ;	add	di,ax
 20160                                  ;	mov	es,WORD PTR [TEMP_VAR2]
 20161                                  ;	shr	cx,1
 20162                                  ;
 20163                                  ;;	   CX = sector size (in WORDs); CF=1 if odd # of bytes.
 20164                                  ;;       DS:SI-> Buffer sector data.
 20165                                  ;;       ES:DI-> Destination within Transfer memory block.
 20166                                  ;
 20167                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 20168                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 20169                                  ;	rep	movsb                   ;Copy last byte.
 20170                                  ;	RestoreReg <es,di,si,dx,cx>
 20171                                  ;
 20172                                  ;       DS:DI -> current buffer.
 20173                                  ;
 20174                                  ;bufq3:	mov     ax,di			;DS:AX -> Current buffer.
 20175                                  ;       invoke  SCANPLACE
 20176                                  ;       cmp	ax,[FIRST_BUFF_ADDR]    ;Last buffer?
 20177                                  ;       RestoreReg <ax>
 20178                                  ;       jnz    	bufq                   	; -no, jump.
 20179                                  ;       jmp     short bufx              ; -yes, exit.
 20180                                  ;
 20181                                  ;EndProc DskRdBufScan
 20182                                  
 20183                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 20184                                  ;----------------------------------------------------------------------------
 20185                                  ;
 20186                                  ; Procedure Name : DISKWRITE
 20187                                  ;
 20188                                  ; Inputs:
 20189                                  ;       Outputs of SETUP
 20190                                  ; Function:
 20191                                  ;       Perform disk write
 20192                                  ; Outputs:
 20193                                  ;    Carry clear
 20194                                  ;       CX = No. of bytes read
 20195                                  ;       ES:DI point to SFT
 20196                                  ;       SFT offset and cluster pointers updated
 20197                                  ;    Carry set
 20198                                  ;       CX = 0
 20199                                  ;       ES:DI point to SFT
 20200                                  ;       AX has error code
 20201                                  ;----------------------------------------------------------------------------
 20202                                  
 20203                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 20204                                  
 20205                                  DISKWRITE:
 20206                                  	; MSDOS 3.3
 20207                                  	; IBMDOS.COM - Offset 436Dh
 20208                                  	;;test	byte [es:di+4],8
 20209                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 20210                                  	;jz	short write_cont
 20211                                  	;jmp	SET_ACC_ERR_DS
 20212                                  ;write_cont:
 20213                                  	;push	cx
 20214                                  	;or	cx, cx
 20215                                  	;jnz	short Not_Truncate
 20216                                  	;;mov	cx,-1
 20217                                  	;dec	cx
 20218                                  ;Not_Truncate:
 20219                                  	;call	LOCK_CHECK
 20220                                  	;pop	cx
 20221                                  	;jnb	short _WRITE_OK
 20222                                  	;call	WRITE_LOCK_VIOLATION
 20223                                  	;jnb	short DISKWRITE
 20224                                  	;retn
 20225                                  
 20226                                  	; MSDOS 6.0
 20227 00004461 E821FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 20228                                  	; 19/08/2018
 20229 00004464 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 20230 00004466 C3                      	retn
 20231                                  
 20232                                  WRTEOFJ:
 20233 00004467 E99501                  	JMP     WRTEOF
 20234                                  
 20235                                  _WRITE_OK:
 20236                                   	; 27/07/2018
 20237                                  	; IBMDOS.COM - Offset 438Eh
 20238                                  	
 20239                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20240                                  	;and	word [es:di+5],0BFBFh
 20241 0000446A 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 20242                                  				; Mark file as dirty, clear no date on close
 20243                                  	; MSDOS 6.0
 20244                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 20245                                          ;MOV	[TEMP_VAR],AX                           ;M039
 20246                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 20247                                          ;MOV	[TEMP_VAR2],AX                          ;M039
 20248                                  
 20249                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 20250                                  
 20251                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20252 00004470 C42E[2405]              	LES     BP,[THISDPB]
 20253                                  
 20254 00004474 E83DFE                  	call	BREAKDOWN
 20255                                  
 20256 00004477 A1[6005]                	MOV     AX,[BYTPOS]
 20257 0000447A 8B16[6205]              	MOV     DX,[BYTPOS+2]
 20258 0000447E E3E7                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 20259 00004480 01C8                    	ADD     AX,CX
 20260 00004482 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 20261                                  
 20262                                  	;mov	bx,[es:bp+2]
 20263 00004485 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 20264                                  
 20265                                  	; MSDOS 6.0
 20266                                  	;CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 20267                                  	;MOV	SI,AX
 20268                                          ;MOV	[HIGH_SECTOR],CX
 20269                                  
 20270                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 20271                                  
 20272                                  	;OR	DX,DX
 20273                                  	;PUSH	DX			;M039: Free DX for use by SHR32
 20274                                  	;MOV	DX,CX			;M039
 20275                                  	;JNZ	short CALCLUS
 20276                                  	;SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 20277                                  	;SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 20278                                  
 20279                                  	; MSDOS 3.3
 20280 00004489 39DA                    	cmp	dx,bx
 20281 0000448B 7360                    	jnb	short WRTERR33
 20282 0000448D F7F3                    	div	bx
 20283 0000448F 89C3                    	mov	bx,ax
 20284 00004491 09D2                    	OR	DX,DX
 20285 00004493 7501                    	JNZ	short CALCLUS
 20286 00004495 48                      	dec	ax
 20287                                  
 20288                                  CALCLUS:
 20289                                  	; MSDOS 3.3
 20290                                  	;mov	cl,[es:bp+5]
 20291 00004496 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20292 0000449A D3E8                    	shr	ax,cl
 20293 0000449C 50                      	push	ax
 20294 0000449D 52                      	push	dx
 20295 0000449E 06                      	push	es
 20296 0000449F C43E[3605]              	les	di,[THISSFT]
 20297                                  	;mov	ax,[es:di+11h]
 20298                                  	;mov	dx,[es:di+13h]
 20299 000044A3 268B4511                	mov	ax,[ES:DI+SF_ENTRY.sf_size]
 20300 000044A7 268B5513                	mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 20301 000044AB 07                      	pop	es
 20302                                  	;DX:AX = current file size (in bytes).
 20303                                  	;div	word [es:bp+2]
 20304 000044AC 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20305 000044B0 89C1                    	mov	cx,ax
 20306 000044B2 09D2                    	or	dx,dx
 20307 000044B4 7401                    	jz	short NORND
 20308 000044B6 40                      	inc	ax
 20309                                  
 20310                                  	; MSDOS 6.0
 20311                                  	;CALL	SHR32                   ;F.C. >32mb			;AN000;
 20312                                  	;POP	DX
 20313                                  
 20314                                  ;       AX = Last cluster to write.
 20315                                  ;       DX = # of bytes in last sector to write (the "tail").
 20316                                  ;       BX = ES:[BP.dpb_sector_size]
 20317                                  
 20318                                  	;PUSH	AX
 20319                                  	;PUSH	DX
 20320                                  ;M039
 20321                                  	;mov	dx,[TEMP_VAR2]
 20322                                  	;mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 20323                                  	;call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 20324                                  	;mov	[TEMP_VAR2],cx
 20325                                  	;mov	[VALSEC+2],cx
 20326                                  	;mov	cx,ax
 20327                                  	;mov	bx,si
 20328                                  
 20329                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 20330                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 20331                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 20332                                  ;                     DX = # of bytes in last sector of current file.
 20333                                  ;M039
 20334                                  	;OR	DX,DX
 20335                                  	;JZ	short NORND
 20336                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 20337                                  	;ADC	word [VALSEC+2],0
 20338                                  NORND:	
 20339                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20340 000044B7 A3[5C05]                	MOV     [VALSEC],AX
 20341                                  
 20342                                  ;       [VALSEC] = Last sector of current file.
 20343                                  
 20344 000044BA 31C0                    	XOR     AX,AX
 20345 000044BC A3[7005]                	MOV     [GROWCNT],AX
 20346 000044BF A3[7205]                	MOV     [GROWCNT+2],AX
 20347 000044C2 58                      	POP     AX
 20348                                  
 20349                                  	; MSDOS 6.0
 20350                                  	;MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 20351                                  	;CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb			;AN000;
 20352                                  	;JB	short NOGROW		;F.C. >32mb                             ;AN000;
 20353                                  	;JZ	short lowsec		;F.C. >32mb                             ;AN000;
 20354                                  	;SUB	BX,CX                   ;F.C. >32mb                             ;AN000;
 20355                                  	;SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors	;AN000;
 20356                                  	;JMP	short yesgrow           ;F.C. >32mb                             ;AN000;
 20357                                  ;lowsec:
 20358                                  	;MOV	DI,0			;F.C. >32mb
 20359                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20360 000044C3 29CB                    	SUB	BX,CX			; Number of full sectors
 20361 000044C5 723D                    	JB	short NOGROW
 20362 000044C7 742E                    	JZ	short TESTTAIL
 20363                                  ;yesgrow:
 20364                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20365 000044C9 89D1                    	MOV     CX,DX
 20366 000044CB 93                      	XCHG    AX,BX
 20367                                  	;mul	word [es:bp+2]
 20368 000044CC 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 20369                                  	
 20370                                  	; MSDOS 6.0
 20371                                  	;MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 20372                                  	;MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 20373                                  	;MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 20374                                  	;;mul	word [es:bp+2]
 20375                                  	;MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 20376                                  	
 20377                                  	;ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 20378                                  	;MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 20379                                  	;MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 20380                                  
 20381                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20382 000044D0 29C8                    	SUB     AX,CX           ; Take off current "tail"
 20383 000044D2 83DA00                  	SBB     DX,0            ; 32-bit extension
 20384 000044D5 01D8                    	ADD     AX,BX           ; Add on new "tail"
 20385 000044D7 83D200                  	ADC     DX,0            ; ripple tim's head off
 20386 000044DA EB21                    	JMP     SHORT SETGRW
 20387                                  
 20388                                  HAVSTART:
 20389                                  	;int 3
 20390 000044DC 89C1                    	MOV     CX,AX
 20391 000044DE E8F20D                  	call	SKPCLP
 20392                                  	;JCXZ	DOWRTJ
 20393 000044E1 E357                    	jcxz	DOWRT
 20394                                  
 20395 000044E3 E8610F                  	call	ALLOCATE
 20396                                  	;JNC	short DOWRTJ
 20397 000044E6 7352                    	jnc	short DOWRT
 20398                                  
 20399                                  	;entry   WRTERR
 20400                                  WRTERR:
 20401 000044E8 B40F                    	MOV     AH,0FH                          ;MS. write/data/fail/abort      ;AN000;
 20402                                  
 20403                                  	;entry WRTERR22
 20404                                  WRTERR22:
 20405 000044EA A0[1105]                	MOV     AL,[THISDRV]                    ;MS.                            ;AN000;
 20406                                  
 20407                                  	; 27/07/2018
 20408                                  WRTERR33:
 20409                                  	;MOV	CX,0                    	;No bytes transferred
 20410 000044ED 31C9                    	XOR     CX,CX
 20411                                  					
 20412 000044EF C43E[3605]              	LES     DI,[THISSFT]
 20413                                  	;CLC	; 19/05/2019
 20414 000044F3 C3                      	retn
 20415                                  
 20416                                  ;DOWRTJ: 
 20417                                  ;	JMP     short DOWRT
 20418                                  
 20419                                  ACC_ERRWJ:
 20420                                  	; 10/08/2018
 20421                                  	;JMP	SET_ACC_ERRW
 20422 000044F4 E958FE                  	jmp	SET_ACC_ERR_DS
 20423                                  
 20424                                  TESTTAIL:
 20425 000044F7 29D0                    	SUB     AX,DX
 20426 000044F9 7609                    	JBE	short NOGROW
 20427 000044FB 31D2                    	XOR     DX,DX
 20428                                  SETGRW:
 20429 000044FD A3[7005]                	MOV	[GROWCNT],AX
 20430 00004500 8916[7205]              	MOV	[GROWCNT+2],DX
 20431                                  NOGROW:
 20432 00004504 58                      	POP     AX
 20433 00004505 8B0E[5405]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 20434 00004509 E8A70D                  	call	FNDCLUS
 20435 0000450C 72E6                    	JC	short ACC_ERRWJ
 20436 0000450E 891E[5405]              	MOV     [CLUSNUM],BX
 20437 00004512 8916[5205]              	MOV     [LASTPOS],DX
 20438                                  
 20439 00004516 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 20440 00004518 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 20441 0000451A E3C0                    	JCXZ    HAVSTART        ; See if no more data
 20442 0000451C 51                      	PUSH    CX              ; No. of clusters short of first
 20443 0000451D 89C1                    	MOV     CX,AX
 20444 0000451F E8250F                  	call	ALLOCATE
 20445 00004522 59                      	POP     CX
 20446 00004523 72C3                    	JC	short WRTERR
 20447 00004525 8B16[5205]              	MOV     DX,[LASTPOS]
 20448 00004529 42                      	INC     DX
 20449 0000452A 49                      	DEC     CX
 20450 0000452B 7405                    	JZ	short NOSKIP
 20451 0000452D E8A30D                  	call	SKPCLP
 20452 00004530 72C2                    	JC	short ACC_ERRWJ
 20453                                  NOSKIP:
 20454 00004532 891E[5405]              	MOV     [CLUSNUM],BX
 20455 00004536 8916[5205]              	MOV     [LASTPOS],DX
 20456                                  DOWRT:
 20457 0000453A 833E[6405]00            	CMP     word [BYTCNT1],0
 20458 0000453F 7409                    	JZ	short WRTMID
 20459 00004541 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20460 00004545 E8180E                  	call	BUFWRT
 20461 00004548 72AA                    	JC	short ACC_ERRWJ
 20462                                  	;JC	short SET_ACC_ERRW
 20463                                  WRTMID:
 20464 0000454A A1[6805]                	MOV     AX,[SECCNT]
 20465 0000454D 09C0                    	OR      AX,AX
 20466 0000454F 7471                    	JZ	short WRTLAST		;M039
 20467 00004551 0106[5A05]              	ADD     [SECPOS],AX
 20468                                  	; MSDOS 6.0
 20469                                  	;ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 20470 00004555 E84D0E                  	call	NEXTSEC
 20471 00004558 729A                    	JC	short ACC_ERRWJ
 20472                                  	;JC	short SET_ACC_ERRW	;M039
 20473 0000455A C606[0F05]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 20474 0000455F 8A16[0E05]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 20475 00004563 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20476 00004567 8B0E[6805]              	MOV     CX,[SECCNT]
 20477                                  WRTLP:
 20478 0000456B E8680E                  	call	OPTIMIZE
 20479 0000456E 7284                    	JC	short ACC_ERRWJ
 20480                                  	;JC	short SET_ACC_ERRW
 20481                                  
 20482                                  ;M039
 20483                                  ;       DI = Next physical cluster.
 20484                                  ;       AX = # sectors remaining.
 20485                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 20486                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20487                                  ;	     sectors, also termed an "Extent".)
 20488                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20489                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20490                                  ;
 20491                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20492                                  ;	are in Extent; they are being over-written.
 20493                                  
 20494 00004570 57                      	push    di
 20495 00004571 50                      	push    ax
 20496                                  
 20497                                          ; MSDOS 6.0
 20498                                  	;call	DskWrtBufPurge          ;DS trashed.
 20499                                  ;ASSUME DS:NOTHING
 20500                                  ;M039
 20501                                  	; MSDOS 3.3
 20502                                  	; IBMDOS.COM (1987) - Offset 4497h
 20503 00004572 52                      	push	dx
 20504 00004573 53                      	push	bx
 20505 00004574 268A4600                	mov	al,[es:bp]
 20506                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 20507 00004578 89CB                    	mov	bx,cx
 20508 0000457A 01D3                    	add	bx,dx	; (bx = Extent end)
 20509                                  
 20510                                  ;	DX = Extent start.
 20511                                  ;	BX = Extent end.
 20512                                  ;	 AL = Drive #.
 20513                                  
 20514 0000457C E82718                  	call	SETVISIT
 20515                                  
 20516                                  wbufq1:
 20517                                  	;or	byte [di+5],20h
 20518 0000457F 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 20519                                  	;cmp	al,[di+4]	
 20520 00004583 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 20521 00004586 7512                    	jnz	short wbufq2	; Jump if Extent start > buffer sector.
 20522                                  	;cmp	[di+6],dx
 20523 00004588 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 20524 0000458B 720D                    	jb	short wbufq2
 20525                                  	;cmp	[di+6],bx
 20526 0000458D 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 20527 00004590 7308                    	jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 20528                                  
 20529                                  	; Buffer sector is in the Extent
 20530                                  
 20531                                  	;mov	word [di+4],20FFh
 20532 00004592 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],20FFh
 20533                                  					; .buf_ID,    AL = FFh (Free buffer)
 20534                                  					; .buf_flags, AH = 0, reset/clear
 20535 00004597 E83918                  	call	SCANPLACE
 20536                                  wbufq2:
 20537 0000459A E82218                  	call	SKIPVISIT
 20538 0000459D 75E0                    	jnz	short wbufq1
 20539 0000459F 5B                      	pop	bx
 20540 000045A0 5A                      	pop	dx
 20541                                  	
 20542                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20543                                  ;hkn; SS override for DMAADD and ALLOWED
 20544 000045A1 368E1E[DC02]            	MOV     DS,[SS:DMAADD+2]
 20545                                  	;mov	byte [ss:ALLOWED],38h
 20546 000045A6 36C606[F702]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 20547                                  
 20548                                  ;	put logic from DWRITE in-line here so we can modify it
 20549                                  ;	for DISK FULL conditions.
 20550                                  
 20551                                  DWRITE_LUP:
 20552                                  	; MSDOS 6.0
 20553                                  	;call	DSKWRITE
 20554                                  	;jz	short DWRITE_OKAY
 20555                                  
 20556                                  ;;	int	3
 20557                                  	;cmp	al,error_handle_Disk_Full	; compressed volume full?
 20558                                  	;jz	short DWRITE_DISK_FULL
 20559                                  
 20560                                  ;;hkn; SS override
 20561                                  	;MOV	BYTE [SS:READOP],1
 20562                                  	;call	HARDERRRW
 20563                                  	;CMP	AL,1		; Check for retry
 20564                                  	;JZ	short DWRITE_LUP
 20565                                  	;CMP	AL,3		; Check for FAIL
 20566                                  	;CLC
 20567                                  	;JNZ	short DWRITE_OKAY ; Ignore
 20568                                  	;STC
 20569                                  
 20570                                  	; MSDOS 3.3
 20571 000045AC E81AFC                  	call	DWRITE
 20572                                  
 20573                                  DWRITE_OKAY:
 20574                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20575                                  
 20576 000045AF 59                      	POP     CX
 20577 000045B0 5B                      	POP     BX
 20578                                  
 20579                                  ;       CX = # sectors remaining.
 20580                                  ;       BX = Next physical cluster.
 20581                                  
 20582                                  ;hkn; SS override
 20583                                          ;Context DS
 20584 000045B1 16                      	push	ss
 20585 000045B2 1F                      	pop	ds
 20586                                  
 20587 000045B3 720A                    	JC      short SET_ACC_ERRW ; 16/12/2022
 20588 000045B5 E30B                    	JCXZ    WRTLAST
 20589 000045B7 B200                    	MOV     DL,0
 20590 000045B9 FF06[5205]              	INC     word [LASTPOS]	; We'll be using next cluster
 20591 000045BD EBAC                    	JMP     short WRTLP
 20592                                  
 20593                                  	; 09/08/2018
 20594                                  	; MSDOS 6.0
 20595                                  ;DWRITE_DISK_FULL:
 20596                                  	;;Context DS		;SQ 3-5-93 DS must be setup on return!
 20597                                  	;push	ss
 20598                                  	;pop	ds
 20599                                  	;pop	cx		; unjunk stack
 20600                                  	;pop	bx
 20601                                  	;mov	byte [DISK_FULL],1
 20602                                  	;stc
 20603                                  	;jmp	short WRTERR	; go to disk full exit
 20604                                  
 20605                                  SET_ACC_ERRW:
 20606 000045BF E98DFD                  	jmp	SET_ACC_ERR_DS
 20607                                  
 20608                                  WRTLAST:
 20609 000045C2 A1[6605]                	MOV     AX,[BYTCNT2]
 20610 000045C5 09C0                    	OR      AX,AX
 20611 000045C7 7413                    	JZ	short FINWRT
 20612 000045C9 A3[6405]                	MOV     [BYTCNT1],AX
 20613 000045CC E8D60D                  	call	NEXTSEC
 20614 000045CF 72EE                    	JC	short SET_ACC_ERRW
 20615 000045D1 C706[5E05]0000          	MOV     word [BYTSECPOS],0
 20616 000045D7 E8860D                  	call	BUFWRT
 20617 000045DA 72E3                    	JC	short SET_ACC_ERRW
 20618                                  FINWRT:
 20619 000045DC C43E[3605]              	LES     DI,[THISSFT]
 20620 000045E0 A1[7005]                	MOV     AX,[GROWCNT]
 20621 000045E3 8B0E[7205]              	MOV     CX,[GROWCNT+2]
 20622 000045E7 09C0                    	OR      AX,AX
 20623 000045E9 7502                    	JNZ	short UPDATE_size
 20624 000045EB E30F                    	JCXZ    SAMSIZ
 20625                                  UPDATE_size:
 20626                                  	;add	[es:di+11h],ax
 20627 000045ED 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 20628                                  	;adc	[es:di+13h],cx
 20629 000045F1 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 20630                                  ;
 20631                                  ; Make sure that all other SFT's see this growth also.
 20632                                  ;
 20633 000045F5 B80100                  	MOV     AX,1
 20634                                  ;if installed
 20635                                  	;Call	JShare + 14 * 4
 20636 000045F8 FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20637                                  ;else
 20638                                  ;	Call    ShSU
 20639                                  ;endif
 20640                                  
 20641                                  SAMSIZ:
 20642 000045FC E937FE                  	jmp	SETCLUS	; ES:DI already points to SFT
 20643                                  
 20644                                  WRTEOF:
 20645 000045FF 89C1                    	MOV     CX,AX
 20646 00004601 09D1                    	OR      CX,DX
 20647 00004603 7464                    	JZ	short KILLFIL
 20648 00004605 83E801                  	SUB     AX,1
 20649 00004608 83DA00                  	SBB     DX,0
 20650                                  
 20651                                  	; MSDOS 3.3
 20652                                  	;div	word [es:bp+2]
 20653 0000460B 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20654                                  	;mov	cl,[es:bp+5]
 20655 0000460F 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 20656 00004613 D3E8                    	shr     ax,cl
 20657                                  
 20658                                  	; MSDOS 6.0
 20659                                  	;PUSH	BX
 20660                                  	;MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 20661                                  	;CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 20662                                  	;POP	BX			      ;F.C. >32mb			;AN000;
 20663                                  	;MOV	DX,CX			      ;M039
 20664                                          ;MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 20665                                  	;CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 20666                                  
 20667 00004615 89C1                    	MOV     CX,AX
 20668 00004617 E8990C                  	call	FNDCLUS
 20669                                  SET_ACC_ERRWJ2:
 20670 0000461A 72A3                    	JC	short SET_ACC_ERRW
 20671                                  
 20672 0000461C E326                    	JCXZ    RELFILE
 20673 0000461E E8260E                  	call	ALLOCATE
 20674 00004621 721E                    	JC	short WRTERRJ              ;;;;;;;;; disk full
 20675                                  
 20676                                  UPDATE:
 20677 00004623 C43E[3605]              	LES	DI,[THISSFT]
 20678 00004627 A1[6005]                	MOV	AX,[BYTPOS]
 20679                                  	;mov	[es:di+11h],ax
 20680 0000462A 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 20681 0000462E A1[6205]                	MOV	AX,[BYTPOS+2]
 20682                                  	;mov	[es:di+13h],ax
 20683 00004631 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 20684                                  ;
 20685                                  ; Make sure that all other SFT's see this growth also.
 20686                                  ;
 20687 00004635 B80200                  	MOV     AX,2
 20688                                  ;if installed
 20689                                  	;Call	JShare + 14 * 4
 20690 00004638 FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20691                                  ;else
 20692                                  ;	Call    ShSU
 20693                                  ;endif
 20694 0000463C 31C9                    	XOR     CX,CX
 20695 0000463E E913FE                  	jmp	ADDREC
 20696                                  
 20697                                  WRTERRJ: 
 20698 00004641 E9A4FE                  	JMP     WRTERR
 20699                                  
 20700                                  ;;;;;;;;;;;;;;;; 7/18/86
 20701                                  ;;;;;;;;;;;;;;;;
 20702                                  
 20703                                  RELFILE:
 20704                                  	; MSDOS 6.0
 20705 00004644 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 20706 00004645 C43E[3605]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 20707 00004649 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 20708 0000464D 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 20709 0000464F 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 20710 00004655 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 20711 00004659 2689551B                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 20712                                  SKIPRESET:                            		;AN002; BL
 20713 0000465D 07                      	POP     ES                    		;AN002; BL
 20714                                  ;
 20715 0000465E BAFFFF                  	MOV     DX,0FFFFH
 20716 00004661 E88C0E                  	call	RELBLKS
 20717 00004664 73BD                    	jnc	short UPDATE
 20718                                  SET_ACC_ERRWJJ:
 20719                                  	;JC	short SET_ACC_ERRWJ2
 20720                                  	;JMP	SHORT UPDATE
 20721 00004666 E9E6FC                  	jmp	SET_ACC_ERR_DS
 20722                                  
 20723                                  KILLFIL:
 20724 00004669 31DB                    	XOR     BX,BX
 20725 0000466B 06                      	PUSH    ES
 20726 0000466C C43E[3605]              	LES     DI,[THISSFT]
 20727 00004670 26895D19                	mov	[es:di+19h],bx
 20728 00004674 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 20729                                  	;mov	[es:di+1Bh],bx
 20730 00004678 26895D1B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 20731                                  	;xchg	bx,[es:di+0Bh]
 20732 0000467C 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 20733 00004680 07                      	POP	ES
 20734                                  
 20735 00004681 09DB                    	OR	BX,BX
 20736                                  	;JZ	short UPDATEJ
 20737 00004683 749E                    	jz	short UPDATE
 20738                                  ;; 10/23/86 FastOpen update
 20739 00004685 06                      	PUSH	ES              ; since first cluster # is 0
 20740 00004686 55                      	PUSH	BP              ; we must delete the old cache entry
 20741 00004687 50                      	PUSH	AX
 20742 00004688 51                      	PUSH	CX
 20743 00004689 52                      	PUSH	DX
 20744 0000468A C42E[2405]              	LES	BP,[THISDPB]             ; get current DPB
 20745 0000468E 268A5600                	mov	dl,[ES:BP] ; mov al,[es:bp+0]
 20746                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 20747 00004692 89D9                    	MOV	CX,BX                    ; first cluster #
 20748 00004694 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 20749 00004696 E874ED                  	call	FastOpen_Update          ; call fastopen
 20750 00004699 5A                      	POP	DX
 20751 0000469A 59                      	POP	CX
 20752 0000469B 58                      	POP	AX
 20753 0000469C 5D                      	POP	BP
 20754 0000469D 07                      	POP	ES
 20755                                  ;; 10/23/86 FastOpen update
 20756                                  
 20757 0000469E E84D0E                  	call	RELEASE
 20758 000046A1 72C3                    	JC	short SET_ACC_ERRWJJ
 20759                                  UpDateJ:
 20760 000046A3 E97DFF                  	JMP	UPDATE ; 10/08/2018
 20761                                  
 20762                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 20763                                  ;----------------------------------------------------------------------------
 20764                                  ;
 20765                                  ; Procedure Name : DskWrtBufPurge
 20766                                  ;
 20767                                  ; Inputs:
 20768                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20769                                  ;	     sectors, also termed an "Extent".)
 20770                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20771                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20772                                  ;
 20773                                  ; Function:
 20774                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20775                                  ;	are in Extent; they are being over-written.
 20776                                  ;
 20777                                  ; Outputs:
 20778                                  ;       (Same as Input.)
 20779                                  ; Uses:
 20780                                  ;       All registers except DS,AX,SI,DI preserved.
 20781                                  ;       SS override for all global variables.
 20782                                  ;----------------------------------------------------------------------------
 20783                                  ;M039: Created
 20784                                  
 20785                                  ;procedure   DskWrtBufPurge,NEAR
 20786                                  ;
 20787                                  ;ASSUME  DS:NOTHING
 20788                                  ;
 20789                                  ;       SaveReg <bx,cx>
 20790                                  ;       mov	bx,[HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 20791                                  ;       mov     si,bx
 20792                                  ;       add     cx,dx
 20793                                  ;       adc     si,0                    ;SI:CX = Extent end + 1.
 20794                                  ;
 20795                                  ;	Assert  ISDPB,<ES,BP>,"DskWrtBufPurge"
 20796                                  ;	mov     al,es:[bp.dpb_drive]
 20797                                  ;
 20798                                  ;;      BX:DX = Extent start.
 20799                                  ;;      SI:CX = Extent end + 1.
 20800                                  ;;      AL = Drive #
 20801                                  ;
 20802                                  ;	cmp     [SC_CACHE_COUNT],0      ;Secondary cache in-use?
 20803                                  ;	je      nosc                    ; -no, jump.
 20804                                  ;
 20805                                  ;;      If any of the sectors to be written are in the secondary cache (SC),
 20806                                  ;;      invalidate the entire SC. (This is an optimization; we really only
 20807                                  ;;	need to invalidate those sectors which intersect, but that's slower.)
 20808                                  ;
 20809                                  ;       cmp     al,[CURSC_DRIVE]        ;Same drive?
 20810                                  ;       jne     nosc                    ; -no, jump.
 20811                                  ;
 20812                                  ;       push    ax
 20813                                  ;       mov     ax,[CURSC_SECTOR]
 20814                                  ;       mov     di,[CURSC_SECTOR+2]     ;DI:AX = SC start.
 20815                                  ;       Cmp32   si,cx,di,ax             ;Extent end < SC start?
 20816                                  ;       jbe     sc5                     ; -yes, jump.
 20817                                  ;       add     ax,[SC_CACHE_COUNT]
 20818                                  ;       adc     di,0                    ;DI:AX = SC end + 1.
 20819                                  ;       Cmp32   bx,dx,di,ax             ;Extent start > SC end?
 20820                                  ;       jae     sc5                     ; -yes, jump.
 20821                                  ;       mov     [SC_STATUS],0           ;Extent intersects SC: invalidate SC.
 20822                                  ;sc5:	pop     ax
 20823                                  ;
 20824                                  ;;	Free any buffered sectors which are in Extent; they are being over-
 20825                                  ;;	written.
 20826                                  ;
 20827                                  ;nosc:	invoke  GETCURHEAD              ;DS:DI -> first buffer in queue.
 20828                                  ;
 20829                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20830                                  ;	jne     bufq5                   ; -no, jump.
 20831                                  ;
 20832                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20833                                  ;       ja	bufq5			;Jump if Extent start > buffer sector.
 20834                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20835                                  ;       jbe	bufq5                   ;Jump if Extent end < buffer sector.
 20836                                  ;
 20837                                  ;;      Buffer's sector is in Extent, so free it; it is being over-written.
 20838                                  ;
 20839                                  ;       testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20840                                  ;       jz      bufq2                    ; -no, jump.
 20841                                  ;       invoke  DEC_DIRTY_COUNT          ; -yes, decrement dirty count.
 20842                                  ;bufq2: mov     WORD PTR [di.buf_ID],((buf_visit SHL 8) OR 0FFh)
 20843                                  ;
 20844                                  ;       invoke  SCANPLACE
 20845                                  ;       jmp     short bufq6
 20846                                  ;
 20847                                  ;bufq5: mov     di,[di.buf_next]
 20848                                  ;bufq6: cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20849                                  ;       jne     bufq	                ; --no, go do next buffer.
 20850                                  ;
 20851                                  ;       RestoreReg <cx,bx>
 20852                                  ;       return
 20853                                  ;
 20854                                  ;EndProc DskWrtBufPurge
 20855                                  
 20856                                  
 20857                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 20858                                  ;----------------------------------------------------------------------------
 20859                                  ;
 20860                                  ; Procedure Name : DIV32
 20861                                  ;
 20862                                  ; Inputs:
 20863                                  ;       DX:AX = 32 bit dividend   BX= divisor
 20864                                  ; Function:
 20865                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 20866                                  ; Outputs:
 20867                                  ;       CX:AX = quotient , DX= remainder
 20868                                  ; Uses:
 20869                                  ;       All registers except AX,CX,DX preserved.
 20870                                  ;----------------------------------------------------------------------------
 20871                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 20872                                  
 20873                                  ;DIV32:
 20874                                  ;
 20875                                  ;       cmp     bx,512
 20876                                  ;       jne    	short div5
 20877                                  ;
 20878                                  ;	mov     cx,dx
 20879                                  ;       mov     dx,ax           ; CX:AX = Dividend
 20880                                  ;       and     dx,(512-1)      ; DX = Remainder
 20881                                  ;       mov     al,ah
 20882                                  ;       mov     ah,cl
 20883                                  ;       mov     cl,ch
 20884                                  ;       xor     ch,ch
 20885                                  ;       shr     cx,1
 20886                                  ;       rcr     ax,1
 20887                                  ;       retn
 20888                                  ;
 20889                                  ;div5:	mov     cx,ax
 20890                                  ;       mov     ax,dx
 20891                                  ;       xor     dx,dx
 20892                                  ;       div     bx              ; 0:AX/BX
 20893                                  ;       xchg    cx,ax
 20894                                  ;       div     bx              ; DX:AX/BX
 20895                                  ;       retn
 20896                                  
 20897                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 20898                                  ;----------------------------------------------------------------------------
 20899                                  ;
 20900                                  ; Procedure Name : SHR32
 20901                                  ;
 20902                                  ; Inputs:
 20903                                  ;	DX:AX = 32 bit sector number
 20904                                  ; Function:
 20905                                  ;       Perform 32 bit shift right
 20906                                  ; Outputs:
 20907                                  ;	AX = cluster number
 20908                                  ;	ZF = 1 if no error
 20909                                  ;	   = 0 if error (cluster number > 64k)
 20910                                  ; Uses:
 20911                                  ;       DX,CX
 20912                                  ;---------------------------------------------------------------------------
 20913                                  ; M017	- SHR32 rewritten for better performance
 20914                                  ; M039	- Additional optimization
 20915                                  
 20916                                  ;SHR32:
 20917                                  ;
 20918                                  ;	mov     cl,[ES:BP+DPB.CLUSTER_SHIFT]
 20919                                  ;	xor	ch,ch	    ;ZF=1
 20920                                  ;	jcxz	norota
 20921                                  ;
 20922                                  ;rotashft2:
 20923                                  ;	shr	dx,1	    ;ZF reflects state of DX.
 20924                                  ;	rcr	ax,1	    ;ZF not affected.
 20925                                  ;	loop	rotashft2
 20926                                  ;
 20927                                  ;norota:
 20928                                  ;	retn
 20929                                  
 20930                                  ;============================================================================
 20931                                  ; DIR.ASM, MSDOS 6.0, 1991
 20932                                  ;============================================================================
 20933                                  ; 27/07/2018 - Retro DOS v3.0 
 20934                                  
 20935                                  ;	TITLE	DIR - Directory and path cracking
 20936                                  ;	NAME	Dir
 20937                                  
 20938                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 20939                                  ;---------------------------------------------------------------------------
 20940                                  ;
 20941                                  ; Procedure Name : FINDENTRY,SEARCH
 20942                                  ;
 20943                                  ; Inputs:
 20944                                  ;	[THISDPB] set
 20945                                  ;	[SECCLUSPOS] = 0
 20946                                  ;	[DIRSEC] = Starting directory sector number
 20947                                  ;	[CLUSNUM] = Next cluster of directory
 20948                                  ;	[CLUSFAC] = Sectors/Cluster
 20949                                  ;	[NAME1] = Name to look for
 20950                                  ; Function:
 20951                                  ;	Find file name in disk directory.
 20952                                  ;	"?" matches any character.
 20953                                  ; Outputs:
 20954                                  ;	Carry set if name not found
 20955                                  ;	ELSE
 20956                                  ;	Zero set if attributes match (always except when creating)
 20957                                  ;	AH = Device ID (bit 7 set if not disk)
 20958                                  ;	[THISDPB] = Base of drive parameters
 20959                                  ;	DS = DOSGROUP
 20960                                  ;	ES = DOSGROUP
 20961                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 20962                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 20963                                  ;	[CURBUF] has directory record with match
 20964                                  ;	[NAME1] has file name
 20965                                  ;	[LASTENT] is entry number of the entry
 20966                                  ; All other registers destroyed.
 20967                                  ;----------------------------------------------------------------------------
 20968                                  
 20969                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 20970                                  ;hkn; this point.
 20971                                  
 20972                                  SEARCH:
 20973                                  	; 27/07/2018 - Retro DOS v3.0
 20974                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 20975                                  	; 15/03/2018 - Retro DOS v2.0
 20976                                  
 20977                                  	;entry	FindEntry
 20978                                  FINDENTRY:
 20979 000046A6 E81704                  	call	STARTSRCH
 20980 000046A9 A0[0605]                	MOV	AL,[ATTRIB]
 20981                                  	;and	al,9Eh
 20982 000046AC 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 20983                                  	;cmp	al,8
 20984 000046AE 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 20985 000046B0 7503                    	JNZ	short NOTVOLSRCH	; No
 20986 000046B2 E86201                  	CALL	SETROOTSRCH		; Yes force search of root
 20987                                  NOTVOLSRCH:
 20988 000046B5 E8F800                  	CALL	GETENTRY
 20989 000046B8 7303                    	JNC	short SRCH
 20990 000046BA E99500                  	JMP	SETESRET
 20991                                  
 20992                                  	;entry	Srch
 20993                                  SRCH:
 20994 000046BD 1E                      	PUSH	DS
 20995 000046BE 8E1E[7605]              	MOV	DS,[CURBUF+2]
 20996                                  
 20997                                  ;	(DS:BX) = directory entry address
 20998                                  
 20999 000046C2 8A27                    	mov	ah,[BX]
 21000                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 21001 000046C4 08E4                    	OR	AH,AH			; End of directory?
 21002 000046C6 743A                    	JZ	short FREE
 21003                                  
 21004                                  ;hkn; SS override
 21005 000046C8 363A26[1905]            	CMP	AH,[SS:DELALL]		; Free entry?
 21006 000046CD 7433                    	JZ	short FREE
 21007                                  	;test	byte [bx+0Bh],8
 21008 000046CF F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 21009                                  					; Volume ID file?
 21010 000046D3 7405                    	JZ	short CHKFNAM 		; NO
 21011                                  
 21012                                  ;hkn; SS override
 21013 000046D5 36FE06[1605]            	INC	BYTE [SS:VOLID]
 21014                                  CHKFNAM:
 21015                                  ;	Context ES
 21016 000046DA 8CD6                    	MOV	SI,SS
 21017 000046DC 8EC6                    	MOV	ES,SI
 21018 000046DE 89DE                    	MOV	SI,BX
 21019                                  
 21020                                  ;hkn; NAME1 is in DOSDATA
 21021 000046E0 BF[E604]                	MOV	DI,NAME1
 21022                                  ;;;;; 7/29/86
 21023                                  
 21024                                  ;hkn; SS override for NAME1
 21025 000046E3 36803E[E604]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 21026 000046E9 7506                    	JNZ	short NO_E5
 21027 000046EB 36C606[E604]05          	MOV	BYTE [SS:NAME1],05H
 21028                                  NO_E5:
 21029                                  ;;;;; 7/29/86
 21030 000046F1 E86100                  	CALL	MetaCompare
 21031 000046F4 7428                    	JZ	short FOUND
 21032 000046F6 1F                      	POP	DS
 21033                                  
 21034                                  	;entry	NEXTENT
 21035                                  NEXTENT:
 21036 000046F7 C42E[2405]              	LES	BP,[THISDPB]
 21037 000046FB E86600                  	CALL	NEXTENTRY
 21038 000046FE 73BD                    	JNC	short SRCH
 21039 00004700 EB50                    	JMP	SHORT SETESRET
 21040                                  
 21041                                  FREE:
 21042 00004702 1F                      	POP	DS
 21043 00004703 8B0E[F402]              	MOV	CX,[LASTENT]
 21044 00004707 3B0E[6A05]              	CMP	CX,[ENTFREE]
 21045 0000470B 7304                    	JAE	short TSTALL
 21046 0000470D 890E[6A05]              	MOV	[ENTFREE],CX
 21047                                  TSTALL:
 21048 00004711 3A26[1905]              	CMP	AH,[DELALL]		; At end of directory?
 21049                                  NEXTENTJ:
 21050 00004715 74E0                    	je	short NEXTENT 		; No - continue search
 21051 00004717 890E[6C05]              	MOV	[ENTLAST],CX
 21052 0000471B F9                      	STC
 21053 0000471C EB34                    	JMP	SHORT SETESRET
 21054                                  
 21055                                  FOUND:
 21056                                  ;
 21057                                  ; We have a file with a matching name.	We must now consider the attributes:
 21058                                  ; ATTRIB	Action
 21059                                  ; ------	------
 21060                                  ; Volume_ID	Is Volume_ID in test?
 21061                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 21062                                  ;		If create then Is ATTRIB equal to test?
 21063                                  ;
 21064 0000471E 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 21065 00004720 1F                      	POP	DS
 21066 00004721 8A26[0605]              	MOV	AH,[ATTRIB]		; Attributes of search
 21067                                  	;and	ah,9Eh
 21068 00004725 80E4DE                  	AND	AH,~attr_ignore
 21069                                  	;lea	si,[si+15]
 21070 00004728 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 21071                                  					; point to first cluster field
 21072                                  	;test	ch,8
 21073 0000472B F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 21074 0000472E 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 21075                                  	;test	ah,8
 21076 00004730 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 21077                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 21078 00004733 74C2                    	jz	short NEXTENT ; 19/05/2019
 21079 00004735 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 21080 00004737 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 21081                                  check_one_volume_id:
 21082                                  	;CMP	ah,8
 21083 00004739 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 21084                                  	;JZ	short NEXTENTJ		; Yes, continue search
 21085 0000473C 74B9                    	je	short NEXTENT ; 19/05/2019
 21086 0000473E E89303                  	CALL	MatchAttributes
 21087 00004741 7407                    	JZ	SHORT RETFF
 21088 00004743 F606[1805]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 21089                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 21090 00004748 74AD                    	jz	short NEXTENT ; 19/05/2019
 21091                                  RETFF:
 21092 0000474A C42E[2405]              	LES	BP,[THISDPB]
 21093 0000474E 268A6600                	MOV	AH,[ES:BP]
 21094                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 21095                                  SETESRET:
 21096 00004752 16                      	PUSH	SS
 21097 00004753 07                      	POP	ES
 21098 00004754 C3                      	retn
 21099                                  
 21100                                  ;----------------------------------------------------------------------------
 21101                                  ;
 21102                                  ; Procedure Name : MetaCompare
 21103                                  ;
 21104                                  ; Inputs:
 21105                                  ;	DS:SI -> 11 character FCB style name NO '?'
 21106                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 21107                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 21108                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 21109                                  ; Function:
 21110                                  ;	Compare FCB style names allowing for ? match to any char
 21111                                  ; Outputs:
 21112                                  ;	Zero if match else NZ
 21113                                  ; Destroys CX,SI,DI all others preserved
 21114                                  ;----------------------------------------------------------------------------
 21115                                  
 21116                                  MetaCompare:
 21117 00004755 B90B00                  	MOV	CX,11
 21118                                  WILDCRD:
 21119 00004758 F3A6                    	REPE	CMPSB
 21120 0000475A 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 21121                                  CHECK_META:
 21122 0000475C 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 21123 00004761 74F5                    	JZ	short WILDCRD
 21124                                  MetaRet:
 21125 00004763 C3                       	retn				; Zero set, Match
 21126                                  
 21127                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 21128                                  ;----------------------------------------------------------------------------
 21129                                  ;
 21130                                  ; Procedure Name : NEXTENTRY
 21131                                  ;
 21132                                  ; Inputs:
 21133                                  ;	Same as outputs of GETENTRY, above
 21134                                  ; Function:
 21135                                  ;	Update BX, and [LASTENT] for next directory entry.
 21136                                  ;	Carry set if no more.
 21137                                  ;----------------------------------------------------------------------------
 21138                                  
 21139                                  NEXTENTRY:
 21140                                  	; 27/07/2018 - Retro DOS v3.0
 21141                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 21142                                  	; 15/03/2018 - Retro DOS v2.0
 21143                                  
 21144 00004764 A1[F402]                	MOV	AX,[LASTENT]
 21145 00004767 3B06[6C05]              	CMP	AX,[ENTLAST]
 21146 0000476B 7424                    	JZ	short NONE
 21147 0000476D 40                      	INC	AX
 21148                                  	;ADD	BX,32
 21149 0000476E 8D5F20                  	LEA	BX,[BX+32]
 21150 00004771 39D3                    	CMP	BX,DX
 21151 00004773 721E                    	JB	short HAVIT
 21152 00004775 8A1E[0E05]              	MOV	BL,[SECCLUSPOS]
 21153 00004779 FEC3                    	INC	BL
 21154 0000477B 3A1E[1205]              	CMP	BL,[CLUSFAC]
 21155 0000477F 7217                    	JB	short SAMECLUS
 21156 00004781 8B1E[6E05]              	MOV	BX,[NXTCLUSNUM]
 21157 00004785 E8B312                  	call	IsEOF
 21158 00004788 7307                    	JAE	short NONE
 21159 0000478A 83FB02                  	CMP	BX,2
 21160 0000478D 7202                    	JB	short NONE
 21161 0000478F EB22                    	JMP	short GETENT
 21162                                  NONE:
 21163 00004791 F9                      	STC
 21164 00004792 C3                      	retn
 21165                                  HAVIT:
 21166 00004793 A3[F402]                	MOV	[LASTENT],AX
 21167 00004796 F8                      	CLC
 21168                                  nextentry_retn:
 21169 00004797 C3                      	retn
 21170                                  SAMECLUS:
 21171 00004798 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21172 0000479C A3[F402]                	MOV	[LASTENT],AX
 21173 0000479F 1E                      	PUSH	DS
 21174 000047A0 C53E[7405]              	LDS	DI,[CURBUF]
 21175                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 21176                                  ;hkn; SS override
 21177                                  	;MOV	[HIGH_SECTOR],DX		;AN000; >32mb
 21178                                  	;mov	dx,[di+6]
 21179 000047A4 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 21180                                  	;ADD	DX,1				;AN000; >32mb
 21181                                  	;ADC	word [HIGH_SECTOR],0 		;AN000; >32mb
 21182 000047A7 42                      	inc	dx
 21183 000047A8 1F                      	POP	DS
 21184 000047A9 E87EF9                  	call	FIRSTCLUSTER
 21185 000047AC 31DB                    	XOR	BX,BX
 21186 000047AE EB23                    	JMP	short SETENTRY
 21187                                  
 21188                                  ;----------------------------------------------------------------------------
 21189                                  ;
 21190                                  ; Procedure Name : GETENTRY
 21191                                  ;
 21192                                  ; Inputs:
 21193                                  ;	[LASTENT] has directory entry
 21194                                  ;	ES:BP points to drive parameters
 21195                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 21196                                  ; Function:
 21197                                  ;	Locates directory entry in preparation for search
 21198                                  ;	GETENT provides entry for passing desired entry in AX
 21199                                  ; Outputs:
 21200                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 21201                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 21202                                  ;	[LASTENT] = New directory entry number
 21203                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 21204                                  ;	Carry set if error (currently user FAILed to I 24)
 21205                                  ;----------------------------------------------------------------------------
 21206                                  
 21207                                  GETENTRY:
 21208                                  	; 27/07/2018 - Retro DOS v3.0
 21209 000047B0 A1[F402]                	MOV	AX,[LASTENT]
 21210                                  
 21211                                  	;entry	GETENT
 21212                                  GETENT:
 21213 000047B3 A3[F402]                	MOV	[LASTENT],AX
 21214                                  ;
 21215                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 21216                                  ; directory.
 21217                                  ;
 21218 000047B6 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 21219 000047B8 D3C0                    	rol	ax,cl			; keep hight order bits
 21220 000047BA 89C2                    	mov	dx,ax
 21221                                  	;and	ax,0FFE0h
 21222                                  	;;and	ax,~(32-1)		; mask off high order bits
 21223 000047BC 24E0                    	and	al,0E0h ; ~31 ; 19/05/2019
 21224 000047BE 83E21F                  	and	dx,1Fh
 21225                                  	;and	dx,32-1			; mask off low order bits
 21226                                  ;
 21227                                  ; DX:AX contain the byte offset of the required directory entry from the
 21228                                  ; beginning of the directory. Convert this to a sector number. Round the
 21229                                  ; sector size down to a multiple of 32.
 21230                                  ;
 21231                                  	;mov	bx,[es:bp+2]
 21232 000047C1 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21233 000047C5 80E3E0                  	and	bl,0E0h
 21234                                  	;AND	BL,255-31		; Must be multiple of 32
 21235 000047C8 F7F3                    	DIV	BX
 21236 000047CA 89D3                    	MOV	BX,DX			; Position within sector
 21237 000047CC 53                      	PUSH	BX
 21238 000047CD E80EF9                  	call	DIRREAD
 21239 000047D0 5B                      	POP	BX
 21240                                  	;retc
 21241 000047D1 72C4                    	jc	short nextentry_retn	
 21242                                  SETENTRY:
 21243 000047D3 8B16[7405]              	MOV	DX,[CURBUF]
 21244                                  	;add	dx,16
 21245 000047D7 83C210                  	ADD	DX,BUFINSIZ
 21246 000047DA 01D3                    	ADD	BX,DX
 21247                                  	;add	dx,[es:bp+2]
 21248 000047DC 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 21249 000047E0 C3                      	retn
 21250                                  
 21251                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 21252                                  ;----------------------------------------------------------------------------
 21253                                  ;
 21254                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 21255                                  ;
 21256                                  ; Inputs:
 21257                                  ;	BX cluster number of start of directory
 21258                                  ;	ES:BP Points to DPB
 21259                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 21260                                  ; Function:
 21261                                  ;	Set up a directory search
 21262                                  ; Outputs:
 21263                                  ;	[DIRSTART] = BX
 21264                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 21265                                  ;	Carry set if error (currently user FAILed to I 24)
 21266                                  ; destroys AX,DX,BX
 21267                                  ;----------------------------------------------------------------------------
 21268                                  
 21269                                  SETDIRSRCH:
 21270 000047E1 09DB                    	OR	BX,BX
 21271 000047E3 7432                    	JZ	short SETROOTSRCH
 21272 000047E5 891E[5805]              	MOV	[DIRSTART],BX
 21273                                  	;mov	al,[es:bp+4]
 21274 000047E9 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 21275 000047ED FEC0                    	INC	AL
 21276 000047EF A2[1205]                	MOV	[CLUSFAC],AL
 21277                                  
 21278                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21279                                  	;SAVE	<SI>
 21280 000047F2 56                      	push	si
 21281                                  	;test	byte [FastOpenFlg],2
 21282 000047F3 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21283 000047F8 7507                    	JNZ	short UNP_OK
 21284                                  
 21285                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21286                                  	;invoke	UNPACK
 21287 000047FA E85512                  	call	UNPACK
 21288 000047FD 7302                    	JNC	short UNP_OK
 21289                                  	;RESTORE <SI>
 21290 000047FF 5E                      	pop	si
 21291                                  	;return
 21292 00004800 C3                      	retn
 21293                                  
 21294                                  UNP_OK:
 21295 00004801 893E[5405]              	MOV	[CLUSNUM],DI
 21296 00004805 89DA                    	MOV	DX,BX
 21297 00004807 30DB                    	XOR	BL,BL
 21298 00004809 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21299                                  	;invoke	FIGREC
 21300 0000480D E8260C                  	call	FIGREC
 21301                                  	;RESTORE <SI>
 21302 00004810 5E                      	pop	si
 21303                                  	
 21304                                  	; MSDOS 6.0
 21305                                  	;PUSH	DX			   ;AN000; >32mb
 21306                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 21307                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 21308                                  	;POP	DX			   ;AN000; >32mb
 21309                                  	
 21310 00004811 8916[5605]              	MOV	[DIRSEC],DX
 21311 00004815 F8                      	CLC
 21312 00004816 C3                      	retn
 21313                                  
 21314                                  	;entry	SETROOTSRCH
 21315                                  SETROOTSRCH:
 21316 00004817 31C0                    	XOR	AX,AX
 21317 00004819 A3[5805]                	MOV	[DIRSTART],AX
 21318 0000481C A2[0E05]                	MOV	[SECCLUSPOS],AL
 21319 0000481F 48                      	DEC	AX
 21320 00004820 A3[5405]                	MOV	[CLUSNUM],AX
 21321                                  	;mov	ax,[es:bp+0Bh]
 21322 00004823 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 21323                                  	;mov	dx,[es:bp+10h]
 21324 00004827 268B5610                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 21325 0000482B 29D0                    	SUB	AX,DX
 21326 0000482D A2[1205]                	MOV	[CLUSFAC],AL
 21327 00004830 8916[5605]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 21328                                  	; MSDOS 6.0
 21329                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 21330 00004834 F8                      	CLC
 21331 00004835 C3                      	retn
 21332                                  
 21333                                  ;============================================================================
 21334                                  ; DIR2.ASM, MSDOS 6.0, 1991
 21335                                  ;============================================================================
 21336                                  ; 27/07/2018 - Retro DOS v3.0 
 21337                                  
 21338                                  ;	TITLE	DIR2 - Directory and path cracking
 21339                                  ;	NAME	Dir2
 21340                                  
 21341                                  ;Break	<GETPATH -- PARSE A WFP>
 21342                                  ;----------------------------------------------------------------------------
 21343                                  ;
 21344                                  ; Procedure Name : GETPATH
 21345                                  ;
 21346                                  ; Inputs:
 21347                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 21348                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 21349                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21350                                  ;		( = -1 if current dir not involved, else
 21351                                  ;		 Points to first char after last "/" of current dir part)
 21352                                  ;	[THISCDS] Points to CDS being used
 21353                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 21354                                  ;	[NoSetDir] set
 21355                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 21356                                  ; Function:
 21357                                  ;	Crack the path
 21358                                  ; Outputs:
 21359                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 21360                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 21361                                  ;	ID1 field of [THISCDS] updated appropriately
 21362                                  ;	[ATTRIB] = [SATTRIB]
 21363                                  ;	ES:BP Points to DPB
 21364                                  ;	Carry set if bad path
 21365                                  ;	   SI Points to path element causing failure
 21366                                  ;	   Zero set
 21367                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21368                                  ;	      start a search on the last directory
 21369                                  ;	      CL is zero if there is a bad name in the path
 21370                                  ;	      CL is non-zero if the name was simply not found
 21371                                  ;		 [ENTFREE] may have free spot in directory
 21372                                  ;		 [NAME1] is the name.
 21373                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21374                                  ;	   Zero reset
 21375                                  ;	      File in middle of path or bad name in path or attribute mismatch
 21376                                  ;		or path too long or malformed path
 21377                                  ;	ELSE
 21378                                  ;	   [CurBuf] = -1 if root directory
 21379                                  ;	   [CURBUF] contains directory record with match
 21380                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21381                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 21382                                  ;	   AH = device ID
 21383                                  ;	      bit 7 of AH set if device SI and BX
 21384                                  ;	      will point DOSGROUP relative The firclus
 21385                                  ;	      field of the device entry contains the device pointer
 21386                                  ;	   [NAME1] Has name looked for
 21387                                  ;	   If last element is a directory zero is set and:
 21388                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21389                                  ;	      are set up to start a search on it.
 21390                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21391                                  ;	      like that for a file (except for zero flag)
 21392                                  ;	   If last element is a file zero is reset
 21393                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21394                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21395                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21396                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21397                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21398                                  ; DS preserved, Others destroyed
 21399                                  ;---------------------------------------------------------------------------
 21400                                  
 21401                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 21402                                  ;hkn; DS already set up at this point.
 21403                                  
 21404                                  GETPATH:
 21405                                  	;mov	word [CREATING],0E500h
 21406 00004836 C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 21407                                  
 21408                                  ; Same as GetPath only CREATING and DELALL already set
 21409                                  
 21410                                  	;entry	GetPathNoSet
 21411                                  GetPathNoSet:
 21412                                  	;mov	byte [EXTERR_LOCUS],2	
 21413 0000483C C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21414 00004841 C706[7405]FFFF          	MOV	word [CURBUF],-1	; initial setting
 21415                                  
 21416                                  ; See if the input indicates a device that has already been detected. If so,
 21417                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 21418                                  
 21419 00004847 8B3E[4A05]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 21420                                  	;cmp	word [DI+1],5C3Ah
 21421                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 21422 0000484B 817D013A5C              	cmp	word [DI+1],':\'
 21423 00004850 7438                    	JZ	short CrackIt
 21424                                  
 21425                                  ; Let ChkDev find it in the device list
 21426                                  
 21427 00004852 83C703                  	ADD	DI,3
 21428                                  	; 18/08/2018
 21429                                  	;MOV	SI,DI			; let CHKDEV see the original name
 21430 00004855 E8B000                  	CALL	CHKDEV
 21431 00004858 722E                    	JC	short InternalError
 21432                                  Build_devJ:
 21433                                  
 21434 0000485A A0[0805]                	MOV	AL,[SATTRIB]
 21435 0000485D A2[0605]                	MOV	[ATTRIB],AL
 21436                                  	;mov	byte [EXTERR_LOCUS],1
 21437 00004860 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 21438                                  					; "finding" a char device
 21439                                  					; set LOCUS to Unknown. This makes
 21440                                  					; certain idiotic problems reported
 21441                                  					; by a certain 3 letter OEM go away.
 21442                                  
 21443                                  ; Take name in name1 and pack it back into where wfp_start points. This
 21444                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 21445                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 21446                                  ; wfp into the share set.
 21447                                  ;
 21448                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 21449                                  ; non-space seen +1.  This position is kept in DX.
 21450                                  
 21451                                  ;hkn; SS is DOSDATA
 21452 00004865 16                      	push	ss
 21453 00004866 07                      	pop	es
 21454                                  
 21455                                  ;hkn; NAME1 is in DOSDATA
 21456 00004867 BE[E604]                	mov	si,NAME1
 21457 0000486A 8B3E[4A05]              	mov	di,[WFP_START]
 21458 0000486E 89FA                    	mov	dx,di
 21459 00004870 B90800                  	mov	cx,8			; 8 chars in device name
 21460                                  MoveLoop:
 21461 00004873 AC                      	lodsb
 21462 00004874 AA                      	stosb
 21463 00004875 3C20                    	cmp	al," "
 21464 00004877 7402                    	jz	short NoSave
 21465                                  
 21466 00004879 89FA                    	mov	dx,di
 21467                                  NoSave:
 21468 0000487B E2F6                    	loop	MoveLoop
 21469                                  ;
 21470                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 21471                                  ; at this point.
 21472                                  ;
 21473 0000487D 89D7                    	mov	di,dx
 21474 0000487F C60500                  	mov	byte [di],0		; end of string
 21475 00004882 E8BC02                  	call	Build_device_ent	; Clears carry sets zero
 21476 00004885 FEC0                    	INC	AL			; reset zero
 21477 00004887 C3                      	retn
 21478                                  
 21479                                  InternalError:
 21480                                  InternalError_loop:
 21481 00004888 EBFE                    	JMP	short InternalError_loop	; freeze
 21482                                  
 21483                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 21484                                  
 21485                                  CrackIt:
 21486 0000488A 8B36[4E05]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 21487 0000488E 83FEFF                  	CMP	SI,-1			; valid?
 21488 00004891 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 21489 00004893 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 21490                                  LOOK_SING:
 21491                                  	;mov	byte [ATTRIB],16h
 21492 00004896 C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 21493                                  					; Attributes to search through Dirs
 21494 0000489B C43E[3A05]              	LES	DI,[THISCDS]
 21495 0000489F B8FFFF                  	MOV	AX,-1
 21496                                  	;mov	bx,[es:di+73]
 21497 000048A2 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 21498 000048A6 8B36[4E05]              	MOV	SI,[CURR_DIR_END]
 21499                                  
 21500                                  ; AX = -1
 21501                                  ; BX = cluster number of current directory.  THis number is -1 if the media
 21502                                  ;      has been uncertainly changed.
 21503                                  ; SI = offset in DOSGroup into path to end of current directory text.  This
 21504                                  ;      may be -1 if no current directory part has been used.
 21505                                  
 21506 000048AA 39C6                    	CMP	SI,AX			; if Current directory is not part
 21507 000048AC 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 21508 000048AE 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 21509                                  
 21510                                  ; DOS 3.3  6/25/86
 21511 000048B0 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 21512                                  	;test	byte [FastOpenFlg],1
 21513 000048B2 F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 21514 000048B7 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 21515 000048B9 06                      	PUSH	ES			; save registers
 21516 000048BA 57                      	PUSH	DI
 21517 000048BB 51                      	PUSH	CX
 21518 000048BC FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 21519 000048BF 56                      	PUSH	SI
 21520 000048C0 53                      	PUSH	BX
 21521                                  
 21522 000048C1 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 21523 000048C5 8B36[4A05]              	MOV	SI,[WFP_START]
 21524                                  
 21525                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 21526 000048C9 BB[430F]                	MOV	BX,FastOpenTable
 21527 000048CC BF[4E0F]                	MOV	DI,Dir_Info_Buff
 21528 000048CF B9[490F]                	MOV	CX,FastOpen_Ext_Info
 21529                                  	;mov	al,1
 21530 000048D2 B001                    	MOV	AL,FONC_Look_up
 21531 000048D4 1E                      	PUSH	DS
 21532 000048D5 07                      	POP	ES
 21533                                  	;call	far [BX+2]
 21534 000048D6 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 21535 000048D9 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 21536                                  					; Go to Got_Srch_cluster
 21537 000048DB 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 21538 000048DE 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 21539 000048E0 F9                      	stc
 21540 000048E1 EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 21541                                  GO_Chk_end1:
 21542 000048E3 F8                      	clc
 21543                                  GO_Chk_end:				; restore registers
 21544 000048E4 5B                      	POP	BX
 21545 000048E5 5E                      	POP	SI
 21546 000048E6 8F44FF                  	POP	word [SI-1]
 21547 000048E9 59                      	POP	CX
 21548 000048EA 5F                      	POP	DI
 21549 000048EB 07                      	POP	ES
 21550 000048EC 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 21551                                  
 21552                                  ; DOS 3.3  6/25/86
 21553                                  ;
 21554                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 21555                                  ; of path and go crack from root.
 21556                                  
 21557                                  NO_CURR_D:
 21558 000048EE 8B36[4A05]              	MOV	SI,[WFP_START]
 21559 000048F2 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 21560 000048F5 C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21561 000048F9 EB3D                    	JMP	short ROOTPATH
 21562                                  
 21563                                  ; We are able to crack from the current directory part. Go set up for search
 21564                                  ; of specified cluster.
 21565                                  
 21566                                  GOT_SEARCH_CLUSTER:
 21567 000048FB C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21568 000048FF E8DFFE                  	call	SETDIRSRCH
 21569                                  	;JC	short SETFERR
 21570                                  	;JMP	short FINDPATH
 21571 00004902 7345                    	jnc	short FINDPATH ; 17/08/2018
 21572                                  SETFERR:
 21573 00004904 30C9                    	XOR	CL,CL			; set zero
 21574 00004906 F9                      	STC
 21575 00004907 C3                      	retn
 21576                                  
 21577                                  ;---------------------------------------------------------------------------
 21578                                  ;
 21579                                  ; Procedure Name : ChkDev
 21580                                  ;
 21581                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 21582                                  ;   device.
 21583                                  ; Blasts CX,SI,DI,AX,BX
 21584                                  ;---------------------------------------------------------------------------
 21585                                  
 21586                                  CHKDEV:
 21587 00004908 89FE                    	MOV	SI,DI
 21588 0000490A 8CD7                    	MOV	DI,SS
 21589 0000490C 8EC7                    	MOV	ES,DI
 21590                                  
 21591 0000490E BF[E604]                	MOV	DI,NAME1
 21592 00004911 B90900                  	MOV	CX,9
 21593                                  TESTLOOP:
 21594 00004914 E8F90C                  	call	GETLET
 21595                                  
 21596 00004917 3C2E                    	CMP	AL,'.'
 21597 00004919 740E                    	JZ	short TESTDEVICE
 21598 0000491B E82F0D                  	call	PATHCHRCMP
 21599 0000491E 7407                    	JZ	short NOTDEV
 21600 00004920 08C0                    	OR	AL,AL
 21601 00004922 7405                    	JZ	short TESTDEVICE
 21602                                  
 21603 00004924 AA                      	STOSB
 21604 00004925 E2ED                    	LOOP	TESTLOOP
 21605                                  NOTDEV:
 21606 00004927 F9                      	STC
 21607 00004928 C3                      	retn
 21608                                  
 21609                                  TESTDEVICE:
 21610 00004929 83C102                  	ADD	CX,2
 21611 0000492C B020                    	MOV	AL,' '
 21612 0000492E F3AA                    	REP	STOSB
 21613 00004930 8CD0                    	MOV	AX,SS
 21614 00004932 8ED8                    	MOV	DS,AX
 21615 00004934 E8AA01                  	call	DEVNAME
 21616 00004937 C3                      	retn
 21617                                  
 21618                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 21619                                  ;----------------------------------------------------------------------------
 21620                                  ;
 21621                                  ; Procedure Name : ROOTPATH,FINDPATH
 21622                                  ;
 21623                                  ; Inputs:
 21624                                  ;	Same as FINDPATH but,
 21625                                  ;	SI Points to asciz string of path which is assumed to start at
 21626                                  ;		the root (no leading '/').
 21627                                  ; Function:
 21628                                  ;	Search from root for path
 21629                                  ; Outputs:
 21630                                  ;	Same as FINDPATH but:
 21631                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 21632                                  ;	[NoSetDir] is ignored.
 21633                                  ;----------------------------------------------------------------------------
 21634                                  
 21635                                  ROOTPATH:
 21636 00004938 E8DCFE                  	call	SETROOTSRCH
 21637 0000493B 803C00                  	CMP	BYTE [SI],0
 21638 0000493E 7509                    	JNZ	short FINDPATH
 21639                                  
 21640                                  ; Root dir specified
 21641 00004940 A0[0805]                	MOV	AL,[SATTRIB]
 21642 00004943 A2[0605]                	MOV	[ATTRIB],AL
 21643 00004946 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 21644                                  					; (dir), clears carry.
 21645 00004948 C3                      	retn
 21646                                  
 21647                                  ; Inputs:
 21648                                  ;	[ATTRIB] Set to get through directories
 21649                                  ;	[SATTRIB] Set to find last element
 21650                                  ;	ES:BP Points to DPB
 21651                                  ;	SI Points to asciz string of path (no leading '/').
 21652                                  ;	[SECCLUSPOS] = 0
 21653                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 21654                                  ;	[CLUSNUM] = Cluster # of next cluster
 21655                                  ;	[CLUSFAC] = Sectors per cluster
 21656                                  ;	[NoSetDir] set
 21657                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21658                                  ;		( = -1 if current dir not involved, else
 21659                                  ;		 Points to first char after last "/" of current dir part)
 21660                                  ;	[THISCDS] Points to CDS being used
 21661                                  ;	[CREATING] and [DELALL] set
 21662                                  ; Function:
 21663                                  ;	Parse path name
 21664                                  ; Outputs:
 21665                                  ;	ID1 field of [THISCDS] updated appropriately
 21666                                  ;	[ATTRIB] = [SATTRIB]
 21667                                  ;	ES:BP Points to DPB
 21668                                  ;	[THISDPB] = ES:BP
 21669                                  ;	Carry set if bad path
 21670                                  ;	   SI Points to path element causing failure
 21671                                  ;	   Zero set
 21672                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21673                                  ;	      start a search on the last directory
 21674                                  ;	      CL is zero if there is a bad name in the path
 21675                                  ;	      CL is non-zero if the name was simply not found
 21676                                  ;		 [ENTFREE] may have free spot in directory
 21677                                  ;		 [NAME1] is the name.
 21678                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21679                                  ;	   Zero reset
 21680                                  ;	      File in middle of path or bad name in path
 21681                                  ;		or path too long or malformed path
 21682                                  ;	ELSE
 21683                                  ;	   [CURBUF] contains directory record with match
 21684                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21685                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 21686                                  ;	   [NAME1] Has name looked for
 21687                                  ;	   AH = device ID
 21688                                  ;	      bit 7 of AH set if device SI and BX
 21689                                  ;	      will point DOSGROUP relative The firclus
 21690                                  ;	      field of the device entry contains the device pointer
 21691                                  ;	   If last element is a directory zero is set and:
 21692                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21693                                  ;	      are set up to start a search on it,
 21694                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21695                                  ;	      like that for a file (except for zero flag)
 21696                                  ;	   If last element is a file zero is reset
 21697                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21698                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21699                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21700                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21701                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21702                                  ; Destroys all other registers
 21703                                  
 21704                                      	;entry	FINDPATH
 21705                                  FINDPATH:
 21706 00004949 06                      	PUSH	ES			; Save ES:BP
 21707 0000494A 56                      	PUSH	SI
 21708 0000494B 89F7                    	MOV	DI,SI
 21709 0000494D 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 21710 00004951 833E[4E05]FF            	CMP	word [CURR_DIR_END],-1
 21711 00004956 740E                    	JZ	short NOIDS		; No current dir part
 21712 00004958 3B3E[4E05]              	CMP	DI,[CURR_DIR_END]
 21713 0000495C 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 21714 0000495E C43E[3A05]              	LES	DI,[THISCDS]
 21715                                  	;mov	[es:di+73],cx
 21716 00004962 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 21717                                  NOIDS:
 21718                                  
 21719                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 21720                                  ; character in the string. CX,DI may be destroyed.
 21721                                  ;
 21722                                  ;	invoke	NAMETRANS
 21723                                  ;	MOV	CL,AL
 21724                                  ;
 21725                                  ; The above is the slow method. The name has *already* been munged by
 21726                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 21727                                  ; the name until ., \ or 0 is hit.
 21728                                  
 21729 00004966 8CD0                    	MOV	AX,SS
 21730 00004968 8EC0                    	MOV	ES,AX
 21731                                  
 21732                                  ;hkn; Name1 is in DOSDATA
 21733 0000496A BF[E604]                	MOV	DI,NAME1
 21734 0000496D B82020                  	MOV	AX,'  ' ; 2020h
 21735 00004970 AA                      	STOSB
 21736 00004971 AB                      	STOSW
 21737 00004972 AB                      	STOSW
 21738 00004973 AB                      	STOSW
 21739 00004974 AB                      	STOSW
 21740 00004975 AB                      	STOSW
 21741                                  
 21742                                  ;hkn; Name1 is in DOSDATA
 21743 00004976 BF[E604]                	MOV	DI,NAME1
 21744 00004979 30E4                    	XOR	AH,AH			; bits for CL
 21745                                  GetNam:
 21746                                  	;INC	CL			;AN000; KK incrment volid count
 21747 0000497B AC                      	LODSB
 21748 0000497C 3C2E                    	CMP	AL,'.'
 21749 0000497E 7412                    	JZ	short _SetExt
 21750 00004980 08C0                    	OR	AL,AL
 21751 00004982 7424                    	JZ	short _GetDone
 21752 00004984 3C5C                    	CMP	AL,'\'
 21753 00004986 7420                    	JZ	short _GetDone
 21754 00004988 3C3F                    	CMP	AL,'?'
 21755 0000498A 7503                    	JNZ	short StoNam
 21756 0000498C 80CC01                  	OR	AH,1
 21757                                  StoNam: 
 21758 0000498F AA                      	STOSB
 21759 00004990 EBE9                    	JMP	short GetNam
 21760                                  _SetExt:
 21761 00004992 BF[EE04]                	MOV	DI,NAME1+8
 21762                                  GetExt:
 21763 00004995 AC                      	LODSB
 21764 00004996 08C0                    	OR	AL,AL
 21765 00004998 740E                    	JZ	short _GetDone
 21766 0000499A 3C5C                    	CMP	AL,'\'
 21767 0000499C 740A                    	JZ	short _GetDone
 21768 0000499E 3C3F                    	CMP	AL,'?'
 21769 000049A0 7503                    	JNZ	short StoExt
 21770 000049A2 80CC01                  	OR	AH,1
 21771                                  StoExt: 
 21772 000049A5 AA                      	STOSB
 21773 000049A6 EBED                    	JMP	short GetExt
 21774                                  _GetDone:
 21775 000049A8 4E                      	DEC	SI
 21776 000049A9 88E1                    	MOV	CL,AH
 21777 000049AB 80C980                  	OR	CL,80H
 21778 000049AE 5F                      	POP	DI			; Start of this element
 21779 000049AF 07                      	POP	ES			; Restore ES:BP
 21780 000049B0 39FE                    	CMP	SI,DI
 21781 000049B2 7503                    	JNZ	short check_device
 21782 000049B4 E9D100                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 21783                                  check_device:
 21784 000049B7 56                      	PUSH	SI			; Start of next element
 21785 000049B8 8A04                    	MOV	AL,[SI]
 21786 000049BA 08C0                    	OR	AL,AL
 21787 000049BC 7508                    	JNZ	short NOT_LAST
 21788                                  
 21789                                  ; for last element of the path switch to the correct search attributes
 21790                                  
 21791 000049BE 8A3E[0805]              	MOV	BH,[SATTRIB]
 21792 000049C2 883E[0605]              	MOV	[ATTRIB],BH
 21793                                  
 21794                                  NOT_LAST:
 21795                                  
 21796                                  ; check name1 to see if we have a device...
 21797                                  
 21798 000049C6 06                      	PUSH	ES			; Save ES:BP
 21799                                  
 21800                                  ;hkn; SS is DOSDATA
 21801                                  	;context ES
 21802 000049C7 16                      	push	ss
 21803 000049C8 07                      	pop	es
 21804 000049C9 E81501                  	call	DEVNAME 		; blast BX
 21805 000049CC 07                      	POP	ES			; Restore ES:BP
 21806 000049CD 720B                    	JC	short FindFile		; Not a device
 21807 000049CF 08C0                    	OR	AL,AL			; Test next char again
 21808 000049D1 7403                    	JZ	short GO_BDEV
 21809 000049D3 E9B600                  	JMP	FILEINPATH		; Device name in middle of path
 21810                                  
 21811                                  GO_BDEV:
 21812 000049D6 5E                      	POP	SI			; Points to NUL at end of path
 21813 000049D7 E980FE                  	JMP	Build_devJ
 21814                                  
 21815                                  FindFile:
 21816                                  ;;;; 7/28/86
 21817 000049DA 803E[E604]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 21818 000049DF 7505                    	JNZ	short NOE5		; no
 21819 000049E1 C606[E604]05            	MOV	BYTE [NAME1],05H	; change it to 05
 21820                                  NOE5:
 21821                                  ;;;; 7/28/86
 21822 000049E6 57                      	PUSH	DI			; Start of this element
 21823 000049E7 06                      	PUSH	ES			; Save ES:BP
 21824 000049E8 51                      	PUSH	CX			; CL return from NameTrans
 21825                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21826                                  
 21827 000049E9 E87C02                  	CALL	LookupPath		; call fastopen to get dir entry
 21828 000049EC 7303                    	JNC	short DIR_FOUND		; found dir entry
 21829                                  
 21830                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21831 000049EE E8B5FC                  	call	FINDENTRY
 21832                                  DIR_FOUND:
 21833 000049F1 59                      	POP	CX
 21834 000049F2 07                      	POP	ES
 21835 000049F3 5F                      	POP	DI
 21836 000049F4 7303                    	JNC	short LOAD_BUF
 21837 000049F6 E9B800                  	JMP	BADPATHPOP
 21838                                  
 21839                                  LOAD_BUF:
 21840 000049F9 C53E[7405]              	LDS	DI,[CURBUF]
 21841                                  	;test	byte [bx+0Bh],10h
 21842 000049FD F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 21843 00004A01 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 21844 00004A03 E98600                  	JMP	FILEINPATH		; Error or end of path
 21845                                  
 21846                                  ; if we are not setting the directory, then check for end of string
 21847                                  
 21848                                  GO_NEXT:
 21849                                  ;hkn; SS override
 21850 00004A06 36803E[F802]00          	CMP	BYTE [SS:NoSetDir],0
 21851 00004A0C 7412                    	JZ	short SetDir
 21852 00004A0E 89FA                    	MOV	DX,DI			; Save pointer to entry
 21853 00004A10 8CD9                    	MOV	CX,DS
 21854                                  
 21855                                  ;hkn; SS is DOSDATA
 21856                                  	;context DS
 21857 00004A12 16                      	push	ss
 21858 00004A13 1F                      	pop	ds
 21859 00004A14 5F                      	POP	DI			; Start of next element
 21860                                  	; MSDOS 6.0
 21861                                  	;TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 21862                                  	;JZ	short nofast			; the FastOpen
 21863                                  	;TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 21864                                  	;JZ	short nofast			; no
 21865                                  	;MOV	DI,[Next_Element_Start]	; no need to insert it again
 21866                                  ;nofast:
 21867 00004A15 803D00                  	CMP	BYTE [DI],0
 21868 00004A18 7501                    	JNZ	short NEXT_ONE		; DOS 3.3
 21869                                  	;JMP	_SETRET			; Got it
 21870 00004A1A C3                      	retn	; 05/09/2018
 21871                                  NEXT_ONE:
 21872 00004A1B 57                      	PUSH	DI			; Put start of next element back on stack
 21873 00004A1C 89D7                    	MOV	DI,DX
 21874 00004A1E 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 21875                                  SetDir:
 21876 00004A20 8B14                    	MOV	DX,[SI] 		; Dir_first
 21877                                  
 21878                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21879 00004A22 1E                      	PUSH	DS		      ; save [curbuf+2]
 21880                                  ;hkn; SS is DOSDATA
 21881 00004A23 16                      	push	ss
 21882 00004A24 1F                      	pop	ds		      ; set DS Dosgroup
 21883                                  	;test	byte [FastOpenFlg],2
 21884 00004A25 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21885 00004A2A 7410                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 21886 00004A2C 89D3                    	MOV	BX,DX		      ; not found
 21887 00004A2E 8B3E[5405]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 21888 00004A32 50                      	PUSH	AX		      ; save device id (AH)
 21889 00004A33 E8ABFD                  	call	SETDIRSRCH
 21890 00004A36 58                      	POP	AX		      ; restore device id (AH)
 21891 00004A37 83C402                  	ADD	SP,2		      ; pop ds in stack
 21892 00004A3A EB36                    	JMP	short FAST_OPEN_SKIP
 21893                                  
 21894                                  DO_NORMAL:
 21895 00004A3C 1F                      	POP	DS			; DS = [curbuf + 2]
 21896                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21897                                  
 21898 00004A3D 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 21899 00004A3F 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 21900 00004A41 53                      	PUSH	BX
 21901 00004A42 50                      	PUSH	AX
 21902 00004A43 56                      	PUSH	SI
 21903 00004A44 51                      	PUSH	CX
 21904                                  	;push	word [di+6]
 21905 00004A45 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 21906                                  	; MSDOS 6.0
 21907                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 21908 00004A48 89D3                    	MOV	BX,DX
 21909                                  
 21910                                  ;hkn; SS is DOSDATA
 21911                                  	;context DS
 21912 00004A4A 16                      	push	ss
 21913 00004A4B 1F                      	pop	ds
 21914                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 21915 00004A4C E892FD                  	call	SETDIRSRCH		; the entry sector buffer
 21916                                  	; MSDOS 6.0
 21917                                  	;POP	word [HIGH_SECTOR]
 21918 00004A4F 5A                      	POP	DX
 21919 00004A50 720A                    	JC	short SKIP_GETB
 21920                                  	;mov	byte [ALLOWED],18h
 21921 00004A52 C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 21922 00004A57 30C0                    	XOR	AL,AL
 21923                                  	;invoke	GETBUFFR		; Get the entry buffer back
 21924 00004A59 E82E14                  	call	GETBUFFR
 21925                                  SKIP_GETB:
 21926 00004A5C 59                      	POP	CX
 21927 00004A5D 5E                      	POP	SI
 21928 00004A5E 58                      	POP	AX
 21929 00004A5F 5B                      	POP	BX
 21930 00004A60 7305                    	JNC	short SET_THE_BUF ; 19/05/2019
 21931 00004A62 5F                      	POP	DI			; Start of next element
 21932 00004A63 89FE                    	MOV	SI,DI			; Point with SI
 21933 00004A65 EB21                    	JMP	SHORT _BADPATH
 21934                                  
 21935                                  SET_THE_BUF:
 21936 00004A67 E8CCF6                  	call	SET_BUF_AS_DIR
 21937 00004A6A 8B3E[7405]              	MOV	DI,[CURBUF]
 21938 00004A6E 01FE                    	ADD	SI,DI			; Get the offsets back
 21939 00004A70 01FB                    	ADD	BX,DI
 21940                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21941                                  FAST_OPEN_SKIP:
 21942 00004A72 5F                      	POP	DI			; Start of next element
 21943 00004A73 E86802                  	CALL	InsertPath		; insert dir entry info
 21944                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21945 00004A76 8A05                    	MOV	AL,[DI]
 21946 00004A78 08C0                    	OR	AL,AL
 21947 00004A7A 7434                    	JZ	short _SETRET		; At end
 21948 00004A7C 47                      	INC	DI			; Skip over "/"
 21949 00004A7D 89FE                    	MOV	SI,DI			; Point with SI
 21950 00004A7F E8CB0B                  	call	PATHCHRCMP
 21951 00004A82 7503                    	JNZ	short find_bad_name	; oops
 21952 00004A84 E9C2FE                  	JMP	FINDPATH		; Next element
 21953                                  
 21954                                  find_bad_name:
 21955 00004A87 4E                      	DEC	SI			; Undo above INC to get failure point
 21956                                  _BADPATH:
 21957 00004A88 30C9                    	XOR	CL,CL			; Set zero
 21958 00004A8A EB2C                    	JMP	SHORT BADPRET
 21959                                  
 21960                                  FILEINPATH:
 21961 00004A8C 5F                      	POP	DI			; Start of next element
 21962                                  
 21963                                  ;hkn; SS is DOSDATA
 21964                                  	;context DS			; Got to from one place with DS gone
 21965 00004A8D 16                      	push	ss
 21966 00004A8E 1F                      	pop	ds
 21967                                  
 21968                                  ; DOS 3.3 FastOpen
 21969                                  	;test	byte [FastOpenFlg],1
 21970 00004A8F F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 21971 00004A94 740B                    	JZ	short NO_FAST		; device info to fastopen
 21972                                  	;test	byte [FastOpenFlg],2
 21973 00004A96 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21974 00004A9B 7404                    	JZ	short NO_FAST
 21975 00004A9D 8B3E[6F0F]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 21976                                  					 ; success
 21977                                  NO_FAST:
 21978                                  ; DOS 3.3 FastOpen
 21979                                  
 21980 00004AA1 8A05                    	MOV	AL,[DI]
 21981 00004AA3 08C0                    	OR	AL,AL
 21982 00004AA5 7404                    	JZ	short INCRET
 21983 00004AA7 89FE                    	MOV	SI,DI			; Path too long
 21984 00004AA9 EB0D                    	JMP	SHORT BADPRET
 21985                                  
 21986                                  INCRET:
 21987                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 21988                                  
 21989 00004AAB E83002                  	CALL   InsertPath		; insert dir entry info
 21990                                  
 21991                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 21992 00004AAE FEC0                    	INC	AL			; Reset zero
 21993                                  _SETRET:
 21994 00004AB0 C3                      	retn
 21995                                  
 21996                                  BADPATHPOP:
 21997 00004AB1 5E                      	POP	SI			; Start of next element
 21998 00004AB2 8A04                    	MOV	AL,[SI]
 21999 00004AB4 89FE                    	MOV	SI,DI			; Start of bad element
 22000 00004AB6 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 22001                                  BADPRET:
 22002 00004AB8 A0[0805]                	MOV	AL,[SATTRIB]
 22003 00004ABB A2[0605]                	MOV	[ATTRIB],AL		; Make sure return correct
 22004 00004ABE F9                      	STC
 22005 00004ABF C3                      	retn
 22006                                  
 22007                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 22008                                  ;---------------------------------------------------------------------------
 22009                                  ;
 22010                                  ; Procedure Name : STARTSRCH
 22011                                  ;
 22012                                  ; Inputs:
 22013                                  ;	[THISDPB] Set
 22014                                  ; Function:
 22015                                  ;	Set up a search for GETENTRY and NEXTENTRY
 22016                                  ; Outputs:
 22017                                  ;	ES:BP = Drive parameters
 22018                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 22019                                  ; Destroys ES,BP,AX
 22020                                  ;--------------------------------------------------------------------------
 22021                                  
 22022                                  STARTSRCH:
 22023 00004AC0 C42E[2405]              	LES	BP,[THISDPB]
 22024 00004AC4 31C0                    	XOR	AX,AX
 22025 00004AC6 A3[F402]                	MOV	[LASTENT],AX
 22026 00004AC9 A2[1605]                	MOV	[VOLID],AL		; No volume ID found
 22027 00004ACC 48                      	DEC	AX
 22028 00004ACD A3[6A05]                	MOV	[ENTFREE],AX
 22029 00004AD0 A3[6C05]                	MOV	[ENTLAST],AX
 22030 00004AD3 C3                      	retn
 22031                                  
 22032                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 22033                                  ;----------------------------------------------------------------------------
 22034                                  ; Procedure Name : MatchAttributes
 22035                                  ;
 22036                                  ; Input:    [Attrib] = attribute to search for
 22037                                  ;	    CH = found attribute
 22038                                  ; Output:   JZ <match>
 22039                                  ;	    JNZ <nomatch>
 22040                                  ; Registers modified: noneski
 22041                                  ;----------------------------------------------------------------------------
 22042                                  
 22043                                  MatchAttributes:
 22044 00004AD4 50                      	PUSH	AX
 22045                                  
 22046                                  ;hkn; SS override
 22047 00004AD5 36A0[0605]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 22048 00004AD9 F6D0                    	NOT	AL			; AL <- SearchSet'
 22049 00004ADB 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 22050                                  	;and	al,16h
 22051 00004ADD 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 22052                                  ;
 22053                                  ; the result is non-zero if an attribute is not in the search set
 22054                                  ; and in the found set and in the important set. This means that we do not
 22055                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 22056                                  ;
 22057 00004ADF 58                      	POP	AX
 22058 00004AE0 C3                      	retn
 22059                                  
 22060                                  ;Break <DevName - Look for name of device>
 22061                                  ;---------------------------------------------------------------------------
 22062                                  ;
 22063                                  ; Procedure Name : DevName
 22064                                  ;
 22065                                  ; Inputs:
 22066                                  ;	DS,ES:DOSDATA
 22067                                  ;	Filename in NAME1
 22068                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 22069                                  ; Function:
 22070                                  ;	Determine if file is in list of I/O drivers
 22071                                  ; Outputs:
 22072                                  ;	Carry set if not a device
 22073                                  ;	ELSE
 22074                                  ;	Zero flag set
 22075                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 22076                                  ;	     bits 0-4 set from low byte of attribute word
 22077                                  ;	DEVPT = DWORD pointer to Device header of device
 22078                                  ; BX destroyed, others preserved
 22079                                  ;---------------------------------------------------------------------------
 22080                                  
 22081                                  DEVNAME:
 22082                                  	; 28/07/2018 - Retro DOS v3.0
 22083                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 22084                                  
 22085 00004AE1 56                      	PUSH	SI
 22086 00004AE2 57                      	PUSH	DI
 22087 00004AE3 51                      	PUSH	CX
 22088 00004AE4 50                      	PUSH	AX
 22089                                  
 22090                                  ; E5 special code
 22091 00004AE5 FF36[E604]              	PUSH	WORD [NAME1]
 22092 00004AE9 803E[E604]05            	CMP	byte [NAME1],5
 22093 00004AEE 7505                    	JNZ	short NOKTR
 22094 00004AF0 C606[E604]E5            	MOV	byte [NAME1],0E5h
 22095                                  NOKTR:
 22096                                  	;test	byte [ATTRIB],8
 22097 00004AF5 F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 22098                                  					; If looking for VOL id don't find devs
 22099 00004AFA 7522                    	JNZ	short RET31
 22100                                  
 22101                                  ;hkn; NULDEV is in DOSDATA
 22102 00004AFC BE[4800]                	MOV	SI,NULDEV
 22103                                  LOOKIO:
 22104                                  	;test	word [si+4],8000h
 22105 00004AFF F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 22106 00004B04 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 22107 00004B06 89F0                    	MOV	AX,SI
 22108                                  	;add	si,10
 22109 00004B08 83C60A                  	ADD	SI,SYSDEV.NAME
 22110                                  
 22111                                  ;hkn; NAME1 is in DOSDATA
 22112 00004B0B BF[E604]                	MOV	DI,NAME1
 22113 00004B0E B90400                  	MOV	CX,4			; All devices are 8 letters
 22114 00004B11 F3A7                    	REPE	CMPSW			; Check for name in list
 22115 00004B13 89C6                    	MOV	SI,AX
 22116 00004B15 7415                    	JZ	short IOCHK		; Found it?
 22117                                  SKIPDEV:
 22118 00004B17 C534                    	LDS	SI,[SI]			; Get address of next device
 22119 00004B19 83FEFF                  	CMP	SI,-1			; At end of list?
 22120 00004B1C 75E1                    	JNZ	short LOOKIO
 22121                                  RET31:	
 22122 00004B1E F9                      	STC				; Not found
 22123                                  RETNV:	
 22124 00004B1F 8CD1                    	MOV	CX,SS
 22125 00004B21 8ED9                    	MOV	DS,CX
 22126                                  
 22127 00004B23 8F06[E604]              	POP	WORD [NAME1]
 22128 00004B27 58                      	POP	AX
 22129 00004B28 59                      	POP	CX
 22130 00004B29 5F                      	POP	DI
 22131 00004B2A 5E                      	POP	SI
 22132 00004B2B C3                      	RETN
 22133                                  
 22134                                  IOCHK:
 22135                                  ;hkn; SS override for DEVPT
 22136 00004B2C 368C1E[3405]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 22137                                  	;mov	bh,[si+4]
 22138 00004B31 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 22139 00004B34 80CFC0                  	OR	BH,0C0h
 22140 00004B37 80E7DF                  	and	bh,0DFh
 22141                                  	;AND	BH,~(020h)		; Clears Carry
 22142 00004B3A 368936[3205]            	MOV	[SS:DEVPT],SI
 22143 00004B3F EBDE                    	JMP	short RETNV
 22144                                  
 22145                                  ;BREAK <Build_device_ent - Make a Directory entry>
 22146                                  ;---------------------------------------------------------------------------
 22147                                  ; Procedure Name : Build_device_ent
 22148                                  ;
 22149                                  ; Inputs:
 22150                                  ;	[NAME1] has name
 22151                                  ;	BH is attribute field (supplied by DEVNAME)
 22152                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 22153                                  ; Function:
 22154                                  ;	Build a directory entry for a device at DEVFCB
 22155                                  ; Outputs:
 22156                                  ;	BX points to DEVFCB
 22157                                  ;	SI points to dir_first field
 22158                                  ;	AH = input BH
 22159                                  ;	AL = 0
 22160                                  ;	dir_first = DEVPT
 22161                                  ;	Zero Set, Carry Clear
 22162                                  ; DS,ES,BP preserved, others destroyed
 22163                                  ;--------------------------------------------------------------------------
 22164                                  
 22165                                  Build_device_ent:
 22166 00004B41 B82020                  	MOV	AX,"  " ; 2020h
 22167                                  
 22168                                  ;hkn; DEVFCB is in DOSDATA
 22169 00004B44 BF[EE04]                	MOV	DI,DEVFCB+8		; Point to extent field
 22170                                  
 22171                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 22172                                  
 22173 00004B47 AB                      	STOSW
 22174 00004B48 AA                      	STOSB				; Blank out extent field
 22175                                  	;mov	al,40h
 22176 00004B49 B040                    	MOV	AL,attr_device
 22177                                  
 22178                                  ;	Fill Dir_attr
 22179                                  
 22180 00004B4B AA                      	STOSB				; Set attribute field
 22181 00004B4C 31C0                    	XOR	AX,AX
 22182 00004B4E B90A00                  	MOV	CX,10
 22183                                  
 22184                                  ; Fill dir_pad
 22185                                  
 22186 00004B51 F3AB                    	REP	STOSW			; Fill rest with zeros
 22187 00004B53 E860CD                  	call	DATE16
 22188                                  
 22189                                  ;hkn; DEVFCB is in DOSDATA
 22190 00004B56 BF[FC04]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 22191 00004B59 92                      	XCHG	AX,DX
 22192                                  
 22193                                  ; Fill dir_time
 22194                                  
 22195 00004B5A AB                      	STOSW
 22196 00004B5B 92                      	XCHG	AX,DX
 22197                                  
 22198                                  ; Fill dir_date
 22199                                  
 22200 00004B5C AB                      	STOSW
 22201 00004B5D 89FE                    	MOV	SI,DI			; SI points to dir_first field
 22202 00004B5F A1[3205]                	MOV	AX,[DEVPT]
 22203                                  
 22204                                  ; Fill dir_first
 22205                                  
 22206 00004B62 AB                      	STOSW				; Dir_first points to device
 22207 00004B63 A1[3405]                	MOV	AX,[DEVPT+2]
 22208                                  ;
 22209                                  ; Fill dir_size_l
 22210                                  ;
 22211 00004B66 AB                      	STOSW
 22212 00004B67 88FC                    	MOV	AH,BH			; Put device atts in AH
 22213                                  
 22214                                  ;hkn; DEVFCB is in DOSDATA
 22215 00004B69 BB[E604]                	MOV	BX,DEVFCB
 22216 00004B6C 30C0                    	XOR	AL,AL			; Set zero, clear carry
 22217 00004B6E C3                      	retn
 22218                                  
 22219                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 22220                                  ;----------------------------------------------------------------------------
 22221                                  ;
 22222                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 22223                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 22224                                  ;   If invalid, reset original CDS to root.
 22225                                  ;
 22226                                  ;   Inputs:	ThisCDS points to CDS of interest
 22227                                  ;		SS:DI points to temp buffer
 22228                                  ;   Outputs:	The current directory string is validated on the appropriate
 22229                                  ;		    drive
 22230                                  ;		ThisDPB changed
 22231                                  ;		ES:DI point to CDS
 22232                                  ;		Carry set if error (currently user FAILed to I 24)
 22233                                  ;   Registers modified: all
 22234                                  ;----------------------------------------------------------------------------
 22235                                  
 22236                                  ValidateCDS:
 22237                                  	; 28/07/2018 - Retro DOS v3.0
 22238                                  
 22239                                     %define  Temp	[bp-2]	; word
 22240                                     %define  SaveCDS	[bp-6]	; dword
 22241                                     %define  SaveCDSL	[bp-6]	; word
 22242                                     %define  SaveCDSH	[bp-4]	; word
 22243                                  
 22244                                  	;Enter
 22245 00004B6F 55                      	push	bp
 22246 00004B70 89E5                    	mov	bp,sp
 22247 00004B72 83EC06                  	sub	sp,6
 22248                                  
 22249 00004B75 897EFE                  	MOV	Temp,DI
 22250                                  
 22251                                  ;hkn; SS override
 22252 00004B78 36C536[3A05]            	LDS	SI,[SS:THISCDS]
 22253 00004B7D 8976FA                  	MOV	SaveCDSL,SI
 22254 00004B80 8C5EFC                  	MOV	SaveCDSH,DS
 22255                                  	;EnterCrit critDisk
 22256 00004B83 E8DFD4                  	call	EcritDisk
 22257                                  	;test	word [si+67],8000h
 22258 00004B86 F744430080              	TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 22259 00004B8B 7403                    	JZ	short _DoSplice
 22260 00004B8D E98900                  	JMP	FatFail
 22261                                  _DoSplice:
 22262 00004B90 30D2                    	XOR	DL,DL
 22263 00004B92 368616[F802]            	XCHG	DL,[SS:NoSetDir]
 22264                                  
 22265                                  ;hkn; SS is DOSDATA
 22266                                  	;Context ES
 22267 00004B97 16                      	push	ss
 22268 00004B98 07                      	pop	es
 22269                                  	;Invoke	FStrcpy
 22270 00004B99 E8BED3                  	call	FStrCpy
 22271 00004B9C 8B76FE                  	MOV	SI,Temp
 22272                                  
 22273                                  ;hkn; SS is DOSDATA
 22274                                  	;Context DS
 22275 00004B9F 16                      	push	ss
 22276 00004BA0 1F                      	pop	ds	
 22277                                  	;Invoke	Splice
 22278 00004BA1 E83621                  	call	Splice
 22279                                  
 22280                                   ;hkn; SS is DOSDATA
 22281                                  	;Context DS			;   FatReadCDS (ThisCDS);
 22282 00004BA4 16                      	push	ss
 22283 00004BA5 1F                      	pop	ds
 22284 00004BA6 8816[F802]              	MOV	[NoSetDir],DL
 22285 00004BAA C43E[3A05]              	LES	DI,[THISCDS]
 22286                                  	;SAVE	<BP>
 22287 00004BAE 55                      	push	bp
 22288                                  	;Invoke	FATREAD_CDS
 22289 00004BAF E80E10                  	call	FATREAD_CDS	
 22290                                  	;RESTORE <BP>
 22291 00004BB2 5D                      	pop	bp
 22292 00004BB3 7264                    	JC	short FatFail
 22293                                  
 22294 00004BB5 C536[3A05]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 22295                                  	;cmp	word [si+73], -1
 22296 00004BB9 837C49FF                	CMP	word [SI+curdir.ID],-1
 22297 00004BBD 754C                    	JNZ	short RestoreCDS
 22298                                  
 22299                                  ;hkn; SS is DOSDATA
 22300                                  	;Context ES
 22301 00004BBF 16                      	push	ss
 22302 00004BC0 07                      	pop	es
 22303                                  
 22304                                  ;hkn; SS override
 22305                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 22306 00004BC1 36FF36[4A05]            	push	word [SS:WFP_START]
 22307                                  	;cmp	si,[bp-6]
 22308 00004BC6 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 22309 00004BC9 750B                    	JNZ	short DoChdir
 22310                                  	;mov	di,[bp-2]
 22311 00004BCB 8B7EFE                  	MOV	DI,Temp
 22312                                  
 22313                                  ;hkn; SS override
 22314 00004BCE 36893E[4A05]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 22315                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 22316 00004BD3 E884D3                  	call	FStrCpy
 22317                                  DoChdir:
 22318                                  ;hkn; SS is DOSDATA
 22319                                  	;Context DS
 22320 00004BD6 16                      	push	ss
 22321 00004BD7 1F                      	pop	ds
 22322                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 22323 00004BD8 FF36[0805]              	push	word [SATTRIB]
 22324 00004BDC 55                      	push	bp
 22325                                  	;Invoke	DOS_ChDir
 22326 00004BDD E808F1                  	call	DOS_CHDIR
 22327                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 22328 00004BE0 5D                      	pop	bp
 22329 00004BE1 5B                      	pop	bx
 22330 00004BE2 8F06[4A05]              	pop	word [WFP_START]
 22331 00004BE6 881E[0805]              	MOV	[SATTRIB],BL
 22332 00004BEA C576FA                  	LDS	SI,SaveCDS
 22333 00004BED 730F                    	JNC	short SetCluster	;	if (c == -1) {
 22334                                  
 22335                                  ;hkn; SS override for THISCDS
 22336 00004BEF 368936[3A05]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 22337 00004BF4 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS
 22338 00004BF9 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 22339 00004BFB 884C03                  	MOV	[SI+3],CL		;	    }
 22340                                  SetCluster:
 22341                                  	;mov	word [si+73],0FFFFh
 22342 00004BFE C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 22343 00004C03 36C536[3A05]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 22344                                  	; MSDOS 6.0
 22345                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 22346                                  	;JZ	short setdirclus		     ;AN000;;MS.
 22347                                  	;MOV	CX,-1				     ;AN000;;MS.
 22348                                  setdirclus:
 22349                                  	;mov	[si+73],cx
 22350 00004C08 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 22351                                  RestoreCDS:
 22352 00004C0B C47EFA                  	LES	DI,SaveCDS
 22353 00004C0E 36893E[3A05]            	MOV	[SS:THISCDS],DI
 22354 00004C13 368C06[3C05]            	MOV	[SS:THISCDS+2],ES
 22355 00004C18 F8                      	CLC
 22356                                  FatFail:
 22357                                  	;LeaveCrit critDisk
 22358 00004C19 E851D4                  	call	LcritDisk
 22359                                  
 22360                                  	;les	di,[bp-6]
 22361 00004C1C C47EFA                  	LES	DI,SaveCDS
 22362                                  	;Leave
 22363 00004C1F 89EC                    	mov	sp,bp
 22364 00004C21 5D                      	pop	bp
 22365 00004C22 C3                      	retn
 22366                                  
 22367                                  ; 28/07/2018 - Retro DOS v3.0
 22368                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 22369                                  
 22370                                  ;Break	<CheckThisDevice - Check for being a device>
 22371                                  ;---------------------------------------------------------------------------
 22372                                  ;
 22373                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 22374                                  ;   device specified. We will return carry if there is a device present. 
 22375                                  ;   The forms of devices we will recognize are:
 22376                                  ;
 22377                                  ;	[path]device
 22378                                  ;
 22379                                  ;   Note that the drive letter has *already* been removed. All other forms
 22380                                  ;   are not considered to be devices. If such a device is found we change
 22381                                  ;   the source pointer to point to the device component.
 22382                                  ;
 22383                                  ;   Inputs:	ES is DOSDATA
 22384                                  ;		DS:SI contains name
 22385                                  ;   Outputs:	ES is DOSDATA
 22386                                  ;		DS:SI point to name or device
 22387                                  ;		Carry flag set if device was found
 22388                                  ;		Carry flag reset otherwise
 22389                                  ;   Registers Modified: all except ES:DI, DS
 22390                                  ;----------------------------------------------------------------------------
 22391                                  
 22392                                  CheckThisDevice:
 22393 00004C23 57                      	push	di
 22394 00004C24 56                      	push	si
 22395 00004C25 89F7                    	MOV	DI,SI
 22396                                  ;
 22397                                  ; Check for presence of \dev\ (Dam multiplan!)
 22398                                  ;
 22399 00004C27 8A04                    	MOV	AL,[SI]
 22400 00004C29 E8210A                  	call	PATHCHRCMP		; is it a path char?
 22401 00004C2C 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 22402 00004C2E 46                      	INC	SI			; simulate LODSB
 22403                                  ;
 22404                                  ; We have the leading path separator. Look for DEV part.
 22405                                  ;
 22406 00004C2F AD                      	LODSW
 22407 00004C30 0D2020                  	OR	AX,2020h
 22408 00004C33 3D6465                  	cmp	ax,"de"
 22409                                  	;CMP	AX,"e"<< 8 + "d"
 22410 00004C36 752D                    	JNZ	short NotDevice		; not "de", assume not device
 22411 00004C38 AC                      	LODSB
 22412 00004C39 0C20                    	OR	AL,20h
 22413 00004C3B 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 22414 00004C3D 7526                    	JNZ	short NotDevice
 22415 00004C3F AC                      	LODSB
 22416 00004C40 E80A0A                  	call	PATHCHRCMP		; do we have the last path separator?
 22417 00004C43 7520                    	JNZ	short NotDevice		; no. go for it.
 22418                                  ;
 22419                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 22420                                  ; SI and DevName may destroy DS.
 22421                                  ;
 22422                                  ParseDev:
 22423 00004C45 1E                      	push	ds
 22424 00004C46 56                      	push	si			; preserve the source pointer
 22425 00004C47 E89909                  	call	NameTrans		; advance DS:SI
 22426 00004C4A 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 22427 00004C4D F9                      	STC				; simulate a Carry return from DevName
 22428 00004C4E 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 22429                                  
 22430                                  ;hkn; SS is DOSDATA
 22431 00004C50 16                      	push	ss
 22432 00004C51 1F                      	pop	ds
 22433                                  
 22434                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 22435                                  ;
 22436                                  ; SR;
 22437                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 22438                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 22439                                  ; old call set the volume attribute bit.
 22440                                  ;
 22441 00004C52 A0[0805]                	mov	al,[SATTRIB]
 22442 00004C55 A2[0605]                	mov	[ATTRIB],al		;set Attrib for DevName
 22443                                  
 22444                                  ; M026 - end
 22445                                  
 22446 00004C58 E886FE                  	call	DEVNAME
 22447                                  
 22448                                  SkipSearch:
 22449 00004C5B 5E                      	pop	si
 22450 00004C5C 1F                      	pop	ds
 22451                                  ;
 22452                                  ; SI points to the beginning of the potential device. If we have a device
 22453                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 22454                                  ; original value. At this point Carry set indicates FILE.
 22455                                  ;
 22456                                  CheckReturn:
 22457 00004C5D 5F                      	pop	di			; get original SI
 22458 00004C5E 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 22459 00004C60 89FE                    	MOV	SI,DI
 22460                                  Check_Done:
 22461 00004C62 5F                      	pop	di
 22462 00004C63 F5                      	CMC				; invert carry. Carry => device
 22463 00004C64 C3                      	retn
 22464                                  NotDevice:
 22465 00004C65 F9                      	STC
 22466 00004C66 EBF5                    	JMP	short CheckReturn
 22467                                  
 22468                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 22469                                  ;-----------------------------------------------------------------------------
 22470                                  ;
 22471                                  ; Procedure Name : LookupPath
 22472                                  ;
 22473                                  ; Output  DS:SI -> path name,
 22474                                  ;	  ES:DI -> dir entry info buffer
 22475                                  ;	  ES:CX -> extended dir info buffer
 22476                                  ;
 22477                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 22478                                  ;			     FastOpen, DS:SI points to char just one after
 22479                                  ;			     the last char of path name which is fully or
 22480                                  ;			     partially found in FastOPen
 22481                                  ;	  carry flag set : FastOpen not in memory or path name not found
 22482                                  ;
 22483                                  ;----------------------------------------------------------------------------
 22484                                  
 22485                                  LookupPath:
 22486                                  ;	PUSH	AX
 22487                                  
 22488                                  ;hkn; SS override
 22489                                  	;test	byte [ss:FastOpenFlg],1
 22490 00004C68 36F606[6E0F]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSPEN
 22491 00004C6E 7502                    	JNZ	short FASTINST			    ; and this routine is
 22492                                  NOLOOK:
 22493 00004C70 EB6A                    	JMP	NOLOOKUP			    ; executed once
 22494                                  
 22495                                  FASTINST:
 22496                                  ;hkn; SS override
 22497                                  	;test	byte [ss:FastOpenFlg],8
 22498 00004C72 36F606[6E0F]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 22499 00004C78 75F6                    	JNZ	short NOLOOK			    ; yes
 22500                                  
 22501 00004C7A BB[430F]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 22502                                  
 22503                                  ;hkn; SS override
 22504 00004C7D 368B36[4A05]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 22505 00004C82 BF[4E0F]                	MOV	DI,Dir_Info_Buff
 22506 00004C85 B9[490F]                	MOV	CX,FastOpen_Ext_Info
 22507 00004C88 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 22508 00004C8A 1E                      	PUSH	DS
 22509 00004C8B 07                      	POP	ES
 22510                                  
 22511                                  ;hkn; SS override
 22512                                  	;call	far [bx+2]
 22513 00004C8C FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 22514 00004C8F 723A                    	JC	short NOTFOUND			    ; fastopen not in memory
 22515                                  
 22516 00004C91 8D5CFE                  	LEA	BX,[SI-2]
 22517                                  
 22518                                  ;hkn; SS override
 22519 00004C94 363B1E[4A05]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 22520 00004C99 7430                    	JZ	short NOTFOUND			    ; no
 22521                                  
 22522                                  	; MSDOSD 6.0				    ; fully or partially found
 22523                                  	;CMP	BYTE [SI],0			    ;AN000;FO.
 22524                                  	;JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 22525                                  	;PUSH	CX				    ;AN000;FO.; is attribute matched ?
 22526                                  
 22527                                  ;hkn; SS override for attrib/sattrib
 22528                                  	;MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 22529                                  	;MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 22530                                  	;MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 22531                                  	;MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 22532                                  	;call	Matchattributes 		    ;AN000;FO.;
 22533                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 22534                                  	;POP	CX				    ;AN000;FO.;
 22535                                  	;JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 22536                                  ;parfnd:
 22537                                  
 22538                                  ;hkn; SS override
 22539 00004C9B 368936[6F0F]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 22540 00004CA0 89CB                    	MOV	BX,CX
 22541                                  	; MSDOS 6.0
 22542                                  	;MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 22543                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 22544                                  	;MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 22545                                  	;MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 22546                                  	;MOV	[SS:DIRSTART],AX			    ;AN001;;FO.
 22547                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22548                                  	;mov	ax,[bx+3] ; MSDOS 3.3
 22549 00004CA2 8B4703                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 22550 00004CA5 36A3[5405]              	MOV	[SS:CLUSNUM],AX			    ;
 22551                                  
 22552 00004CA9 06                      	PUSH	ES				    ; save ES
 22553                                  ;hkn; SS override
 22554 00004CAA 36C41E[2405]            	LES	BX,[SS:THISDPB]			    ; put drive id
 22555 00004CAF 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 22556                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 22557 00004CB2 07                      	POP	ES				    ; pop ES
 22558                                  ;SR;
 22559                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 22560                                  ;indicate it is not a root dir
 22561                                  ;
 22562 00004CB3 36C706[7405]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 22563                                  
 22564 00004CBA 368C06[7605]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 22565 00004CBF 89FB                    	MOV	BX,DI				    ; start of entry
 22566                                  	;lea	si,[di+1Ah]
 22567 00004CC1 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 22568                                  						    ; dir_first field in the
 22569                                  						    ; dir entry
 22570                                  ;hkn; SS override for FastOpenFlg
 22571                                  	;or	byte [ss:FastOpenFlg],2
 22572 00004CC4 36800E[6E0F]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 22573                                  ;	POP	AX
 22574 00004CCA C3                      	RETN
 22575                                  NOTFOUND:
 22576 00004CCB 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 22577 00004CCE 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 22578 00004CD0 36C606[6E0F]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 22579                                  Partial_Success:
 22580                                  	;and	byte [SS:FastOpenFlg],0FBh
 22581 00004CD6 368026[6E0F]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 22582                                  NOLOOKUP:
 22583                                  ;	POP	AX
 22584 00004CDC F9                      	STC
 22585 00004CDD C3                      	RETN
 22586                                  
 22587                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 22588                                  ;-----------------------------------------------------------------------------
 22589                                  ;
 22590                                  ; Procedure Name : InsertPath
 22591                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 22592                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 22593                                  ;	  DS = DOSDATA
 22594                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 22595                                  ;
 22596                                  ;-----------------------------------------------------------------------------
 22597                                  
 22598                                  InsertPath:
 22599 00004CDE 9C                      	PUSHF
 22600                                  ;hkn; SS override for FastOpenFlag
 22601                                  	;test	byte [SS:FastOpenFlg], 1
 22602 00004CDF 36F606[6E0F]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 22603 00004CE5 7469                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 22604                                  	;test	byte [ss:FastOpenFlg],2
 22605 00004CE7 36F606[6E0F]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 22606 00004CED 740D                    	JZ	short INSERT_DIR_INFO		; no
 22607                                  	;and	byte [ss:FastOpenFlg],0FDh
 22608 00004CEF 368026[6E0F]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 22609 00004CF5 368B3E[6F0F]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 22610 00004CFA EB4E                    	JMP	short GET_NEXT2
 22611                                  INSERT_DIR_INFO:				; save registers
 22612 00004CFC 1E                      	PUSH	DS
 22613 00004CFD 06                      	PUSH	ES
 22614 00004CFE 53                      	PUSH	BX
 22615 00004CFF 56                      	PUSH	SI
 22616 00004D00 57                      	PUSH	DI
 22617 00004D01 51                      	PUSH	CX
 22618 00004D02 50                      	PUSH	AX
 22619                                  
 22620                                  ;hkn; SS override
 22621 00004D03 36C53E[7405]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 22622 00004D08 BE[490F]                	MOV	SI,FastOpen_Ext_Info
 22623                                  	;mov	ax,[di+6]
 22624 00004D0B 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 22625                                  	; MSDOS 6.0
 22626 00004D0E 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 22627                                  	;MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 22628                                  
 22629                                  ;hkn; SS is DOSDATA
 22630 00004D12 16                      	push	ss
 22631 00004D13 1F                      	pop	ds
 22632                                  	; MSDOS6.0
 22633                                  	;MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 22634                                  	; MSDOS 3.3	
 22635                                  	;mov	[si+1],ax	
 22636 00004D14 894401                  	MOV	[SI+FEI.dirsec],AX
 22637                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22638 00004D17 A1[5405]                	MOV	AX,[CLUSNUM]		; save next cluster number
 22639                                  	;;mov	[si+5],ax ; MSDOS 6.0
 22640                                  	;mov	[si+3],ax ; MSDOS 3.3
 22641 00004D1A 894403                  	MOV	[SI+FEI.clusnum],AX
 22642                                  	;MSDOS 6.0
 22643                                  	;MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 22644                                  	;MOV	[SI+FEI.lastent],AX	;AN000;FO.
 22645                                  	;MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 22646                                  	;MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 22647                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22648 00004D1D 89D8                    	MOV	AX,BX
 22649                                  	;add	di,16
 22650 00004D1F 83C710                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 22651 00004D22 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 22652                                  	;mov	cl,32
 22653 00004D24 B120                    	MOV	CL,dir_entry.size
 22654 00004D26 F6F1                    	DIV	CL
 22655                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 22656 00004D28 8804                    	mov	[si],al
 22657                                  
 22658 00004D2A 1E                      	PUSH	DS
 22659 00004D2B 07                      	POP	ES
 22660                                  
 22661 00004D2C 8E1E[7605]              	MOV	DS,[CURBUF+2]
 22662 00004D30 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 22663                                  	;cmp	word [di+1Ah],0
 22664 00004D32 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 22665                                  					; never insert info when file is empty
 22666 00004D36 740B                    	JZ	short SKIP_INSERT	; e.g. newly created file
 22667                                  
 22668 00004D38 56                      	PUSH	SI			; ES:BX -> extended info
 22669 00004D39 5B                      	POP	BX
 22670                                  
 22671                                  	;mov	al,2
 22672 00004D3A B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 22673 00004D3C BE[430F]                	MOV	SI,FastOpenTable
 22674                                  	;call	far [es:si+2]
 22675 00004D3F FF5C02                  	CALL	far [SI+fastopen_entry.name_caching]
 22676                                  
 22677 00004D42 F8                      	CLC
 22678                                  SKIP_INSERT:
 22679 00004D43 58                      	POP	AX
 22680 00004D44 59                      	POP	CX			; restore registers
 22681 00004D45 5F                      	POP	DI
 22682 00004D46 5E                      	POP	SI
 22683 00004D47 5B                      	POP	BX
 22684 00004D48 07                      	POP	ES
 22685 00004D49 1F                      	POP	DS
 22686                                  GET_NEXT2:
 22687                                  	;or	[ss:FastOpenFlg],8
 22688 00004D4A 36800E[6E0F]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 22689                                  					; we got dir info from fastopen so
 22690                                  GET_NEXT_ELEMENT:
 22691 00004D50 9D                      	POPF
 22692 00004D51 C3                      	RETN
 22693                                  
 22694                                  
 22695                                  ;============================================================================
 22696                                  ; DEV.ASM, MSDOS 6.0, 1991
 22697                                  ;============================================================================
 22698                                  ; 28/07/2018 - Retro DOS v3.0
 22699                                  
 22700                                  ; DEV.ASM: Retro DOS v2.0 - 14/03/2018
 22701                                  
 22702                                  ;TITLE   DEV - Device call routines
 22703                                  ;NAME    Dev
 22704                                  
 22705                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 22706                                  ;----------------------------------------------------------------------------
 22707                                  ;
 22708                                  ; Procedure Name : IOFUNC
 22709                                  ;
 22710                                  ; Inputs:
 22711                                  ;	DS:SI Points to SFT
 22712                                  ;	AH is function code
 22713                                  ;		= 0 Input
 22714                                  ;		= 1 Input Status
 22715                                  ;		= 2 Output
 22716                                  ;		= 3 Output Status
 22717                                  ;		= 4 Flush
 22718                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 22719                                  ;				   present.
 22720                                  ;	AL = character if output
 22721                                  ; Function:
 22722                                  ;	Perform indicated I/O to device or file
 22723                                  ; Outputs:
 22724                                  ;	AL is character if input
 22725                                  ;	If a status call
 22726                                  ;		zero set if not ready
 22727                                  ;		zero reset if ready (character in AL for input status)
 22728                                  ; For regular files:
 22729                                  ;	Input Status
 22730                                  ;		Gets character but restores position
 22731                                  ;		Zero set on EOF
 22732                                  ;	Input
 22733                                  ;		Gets character advances position
 22734                                  ;		Returns ^Z on EOF
 22735                                  ;	Output Status
 22736                                  ;		Always ready
 22737                                  ; AX altered, all other registers preserved
 22738                                  ;----------------------------------------------------------------------------
 22739                                  
 22740                                  IOFUNC:
 22741 00004D52 368C16[3403]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 22742                                  					; DEVIOBUF
 22743 00004D57 36C706[3203][5E03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 22744 00004D5E 36C706[3603]0100        	MOV	WORD [SS:IOSCNT],1
 22745 00004D65 36A3[5E03]              	MOV	WORD [SS:DEVIOBUF],AX
 22746                                  	;test	word [si+5],8000h
 22747 00004D69 F744050080              	TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet
 22748 00004D6E 7403                    	JZ	short IOTO22		;AN000;
 22749 00004D70 E98500                  	JMP	IOTOFILE		;AN000;
 22750                                  IOTO22:
 22751                                  	;test	word [si+5],80h ; 17/05/2019
 22752 00004D73 F744058000              	TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 22753 00004D78 7502                    	JNZ	short IOTO33		;AN000;
 22754 00004D7A EB7C                    	JMP	IOTOFILE		;AN000;
 22755                                  IOTO33:
 22756 00004D7C E879C8                  	call	save_world
 22757 00004D7F 8CDA                    	MOV	DX,DS
 22758 00004D81 8CD3                    	MOV	BX,SS
 22759 00004D83 8EDB                    	MOV	DS,BX
 22760 00004D85 8EC3                    	MOV	ES,BX
 22761 00004D87 31DB                    	XOR	BX,BX
 22762 00004D89 80FC05                  	cmp	ah,5		    ; system wait enabled?
 22763 00004D8C 7504                    	jnz	short _no_sys_wait
 22764 00004D8E 81CB0004                	or	bx,0400H	    ; Set bit 10 in status word for driver
 22765                                  				    ; It is up to device driver to carry out
 22766                                  				    ; appropriate action.
 22767                                  _no_sys_wait:
 22768 00004D92 891E[2703]              	MOV	[IOCALL_REQSTAT],BX
 22769 00004D96 31DB                    	XOR	BX,BX
 22770 00004D98 881E[3103]              	MOV	[IOMED],BL
 22771                                  
 22772 00004D9C 88E3                    	MOV	BL,AH		 	; get function
 22773 00004D9E 8AA7[0413]              	MOV	AH,[BX+LenTab]
 22774 00004DA2 D1E3                    	SHL	BX,1
 22775 00004DA4 8B8F[0A13]              	MOV	CX,[BX+CmdTab]
 22776 00004DA8 BB[2403]                	MOV	BX,IOCALL
 22777 00004DAB 8826[2403]              	MOV	[IOCALL_REQLEN],AH
 22778 00004DAF 882E[2603]              	MOV	[IOCALL_REQFUNC],CH
 22779                                  
 22780 00004DB3 8EDA                    	MOV	DS,DX
 22781 00004DB5 E84401                  	CALL	DEVIOCALL
 22782 00004DB8 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 22783                                  	;test	di,8000h
 22784                                  	;jnz	short DevErr
 22785 00004DBD 21FF                    	and	di,di
 22786 00004DBF 7820                    	js	short DevErr
 22787                                  
 22788                                  OKDevIO:
 22789 00004DC1 8CD0                    	MOV	AX,SS
 22790 00004DC3 8ED8                    	MOV	DS,AX
 22791                                  
 22792                                  	;cmp	ch, 5
 22793 00004DC5 80FD05                  	CMP	CH,DEVRDND
 22794 00004DC8 7506                    	JNZ	short DNODRD
 22795 00004DCA A0[3103]                	MOV	AL,[IORCHR]
 22796 00004DCD A2[5E03]                	MOV	[DEVIOBUF],AL
 22797                                  
 22798                                  DNODRD: 
 22799 00004DD0 8A26[2803]              	MOV	AH,[IOCALL_REQSTAT+1]
 22800 00004DD4 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 22801                                  	;and	ah,2
 22802 00004DD6 80E402                  	AND	AH,STBUI>>8
 22803                                  
 22804                                  QuickReturn:				;AN000; 2/13/KK
 22805 00004DD9 E809C8                  	call	restore_world
 22806                                  
 22807                                  	; SR;
 22808                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 22809                                  	; IoStatFail = -1 (set after return from the I24)
 22810                                  	;
 22811                                  
 22812                                  	; MSDOS 6.0
 22813                                  	;pushf
 22814                                  	;mov	al,[ss:IoStatFail]	;assume fail error
 22815                                  	;cbw				;sign extend to word
 22816                                  	;cmp	ax,-1
 22817                                  	;jne	short not_fail_ret
 22818                                  	;inc	byte [ss:IoStatFail]
 22819                                  	;popf
 22820                                  	;retn
 22821                                  
 22822                                  ;not_fail_ret:
 22823 00004DDC 36A1[5E03]              	MOV	AX,[SS:DEVIOBUF]	;ss override
 22824                                  	;popf
 22825 00004DE0 C3                      	retn
 22826                                  
 22827                                  ;IOTOFILEJ:
 22828                                  ;	JMP	SHORT IOTOFILE
 22829                                  
 22830                                  DevErr:
 22831 00004DE1 88CC                    	MOV	AH,CL
 22832 00004DE3 E8490A                  	call	CHARHARD
 22833 00004DE6 3C01                    	CMP	AL,1
 22834 00004DE8 7506                    	JNZ	short NO_RETRY
 22835 00004DEA E8F8C7                  	call	restore_world		
 22836 00004DED E962FF                  	JMP	IOFUNC	; 10/08/2018
 22837                                  
 22838                                  NO_RETRY:
 22839                                  
 22840                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 22841                                  	; ready so that DOS doesn't get caught in a status loop when user 
 22842                                  	; simply wants to ignore the error.
 22843                                  	;
 22844                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 22845                                  	; should be checked by the caller on return
 22846                                  	;
 22847                                  
 22848                                  					; SS override
 22849 00004DF0 368026[2803]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 22850                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI >> 8)
 22851                                  
 22852                                  	; SR;
 22853                                  	; Check if user failed
 22854                                  	;
 22855                                  
 22856                                  	; MSDOS 6.0
 22857                                  	;cmp	al,3
 22858                                  	;jnz	short not_fail
 22859                                  	;dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 22860                                  ;not_fail:
 22861 00004DF6 EBC9                    	JMP	short OKDevIO
 22862                                  
 22863                                  IOTOFILE:
 22864 00004DF8 08E4                    	OR	AH,AH
 22865 00004DFA 7423                    	JZ	short IOIN
 22866 00004DFC FECC                    	DEC	AH
 22867 00004DFE 7405                    	JZ	short IOIST
 22868 00004E00 FECC                    	DEC	AH
 22869 00004E02 7411                    	JZ	short IOUT
 22870 00004E04 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 22871                                  
 22872                                  IOIST:
 22873                                  	;push	word [si+15h]
 22874 00004E05 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 22875                                  	;push	word [si+17h]
 22876 00004E08 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 22877 00004E0B E81100                  	CALL	IOIN
 22878                                  	;pop	word [si+17h]
 22879 00004E0E 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 22880                                  	;pop	word [si+15h]
 22881 00004E11 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 22882 00004E14 C3                      	retn
 22883                                  
 22884                                  IOUT:
 22885 00004E15 E81B00                  	CALL	SETXADDR
 22886 00004E18 E864F1                  	call	DOS_WRITE
 22887 00004E1B E84800                  	CALL	RESTXADDR	; If you change this into a jmp don't
 22888                                  IOUT_retn:
 22889 00004E1E C3                      	retn			; come crying to me when things don't
 22890                                  				; work ARR
 22891                                  IOIN:
 22892 00004E1F E81100                  	CALL	SETXADDR
 22893                                  					; SS override for DOS34_FLAG
 22894                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 22895 00004E22 E8D9EF                  	CALL	DOS_READ
 22896                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 22897 00004E25 09C9                    	OR	CX,CX			; Check EOF
 22898 00004E27 E83C00                  	CALL	RESTXADDR
 22899                                  					; SS override
 22900 00004E2A 36A0[5E03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 22901 00004E2E 75EE                    	jnz	short IOUT_retn	
 22902 00004E30 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 22903 00004E32 C3                      	retn
 22904                                  
 22905                                  SETXADDR:
 22906                                  					; SS override
 22907 00004E33 368F06[1803]            	POP	WORD [SS:CALLSCNT]	; Return address
 22908                                  
 22909 00004E38 E8BDC7                  	call	save_world
 22910                                  
 22911                                  					; SS override for DMAADD and THISSFT
 22912 00004E3B 36FF36[DA02]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 22913 00004E40 36FF36[DC02]            	PUSH	WORD [SS:DMAADD+2]
 22914 00004E45 368C1E[3805]            	MOV	[SS:THISSFT+2],DS
 22915                                  
 22916 00004E4A 16                      	push	ss
 22917 00004E4B 1F                      	pop	ds
 22918                                  
 22919 00004E4C 8936[3605]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 22920 00004E50 8B0E[3403]              	MOV	CX,[IOXAD+2]
 22921 00004E54 890E[DC02]              	MOV	[DMAADD+2],CX
 22922 00004E58 8B0E[3203]              	MOV	CX,[IOXAD]
 22923 00004E5C 890E[DA02]              	MOV	[DMAADD],CX		; Set byte trans addr
 22924 00004E60 8B0E[3603]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 22925 00004E64 EB0F                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 22926                                  
 22927                                  RESTXADDR:
 22928 00004E66 8F06[1803]              	POP	WORD [CALLSCNT]		; Return address
 22929 00004E6A 8F06[DC02]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 22930 00004E6E 8F06[DA02]              	POP	WORD [DMAADD]
 22931                                  
 22932 00004E72 E870C7                  	call	restore_world
 22933                                  					; SS override
 22934                                  RESTRET:
 22935 00004E75 36FF26[1803]            	JMP	WORD [SS:CALLSCNT]	; Return address
 22936                                  
 22937                                  
 22938                                  ; 29/07/2018 - Retro DOS v3.0
 22939                                  ; IBMDOS.COM (1987) - Offset 4D82h
 22940                                  
 22941                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 22942                                  
 22943                                  ;----------------------------------------------------------------------------
 22944                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 22945                                  ;
 22946                                  ;	Dev_Open_SFT issues an open call to the device associated with
 22947                                  ;	the SFT.
 22948                                  ;
 22949                                  ;	ENTRY	(ES:DI) = SFT
 22950                                  ;	EXIT	none
 22951                                  ;	USES	all
 22952                                  ;----------------------------------------------------------------------------
 22953                                  
 22954                                  DEV_OPEN_SFT:
 22955 00004E7A E87BC7                  	call	save_world
 22956                                  	;mov	al,0Dh	
 22957 00004E7D B00D                    	MOV	AL,DEVOPN
 22958 00004E7F EB05                    	JMP	SHORT DO_OPCLS
 22959                                  
 22960                                  ;----------------------------------------------------------------------------
 22961                                  ; Procedure Name : DEV_CLOSE_SFT
 22962                                  ;
 22963                                  ; Inputs:
 22964                                  ;	ES:DI Points to SFT
 22965                                  ; Function:
 22966                                  ;	Issue a CLOSE call to the correct device
 22967                                  ; Outputs:
 22968                                  ;	None
 22969                                  ; ALL preserved
 22970                                  ;----------------------------------------------------------------------------
 22971                                  
 22972                                  DEV_CLOSE_SFT:
 22973 00004E81 E874C7                  	call	save_world
 22974                                  	;mov	al,0Eh	
 22975 00004E84 B00E                    	MOV	AL,DEVCLS
 22976                                  
 22977                                  	; Main entry for device open and close. AL contains the function 
 22978                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 22979                                  	; open/close to block devices. This allows networks to function but 
 22980                                  	; does NOT hang up with bogus change-line code.
 22981                                  
 22982                                  	;entry	DO_OPCLS
 22983                                  DO_OPCLS:
 22984                                  	; Is the SFT for the net?  If so, no action necessary.
 22985                                  
 22986                                  	; MSDOS 3.3
 22987                                  	;call	IsSFTNet
 22988                                  	;jnz	short OPCLS_DONE
 22989                                  
 22990                                  	; MSDOS 6.0
 22991                                  	;test	word [es:di+5],8000h
 22992 00004E86 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 22993 00004E8C 756A                    	JNZ	short OPCLS_DONE	; NOP on net SFTs
 22994 00004E8E 30E4                    	XOR	AH,AH			; Unit
 22995                                  	;test	word [es:di+5],80h
 22996 00004E90 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22997                                  	;les	di,[es:di+7]
 22998 00004E96 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 22999 00004E9A 7513                    	JNZ	short GOT_DEV_ADDR
 23000                                  
 23001                                  	; We are about to call device open/close on a block driver. If no 
 23002                                  	; sharing then just short circuit to done.
 23003                                  	
 23004                                  ;;;;;	invoke	CheckShare
 23005                                  
 23006                                  	; MSDOS 3.3
 23007                                  	;call	CheckShare	; cmp byte [cs:fShare],0
 23008                                  	;jz	short OPCLS_DONE
 23009                                  
 23010                                  	; MSDOS 6.0
 23011                                  					; SS override
 23012 00004E9C 36803E[B102]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 23013 00004EA2 7654                    	JBE	short OPCLS_DONE	;AN010; yes
 23014                                  
 23015                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23016                                  	;mov	ah,[es:di+1]
 23017 00004EA4 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 23018 00004EA8 268A0D                  	mov	cl,[es:di]
 23019                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 23020                                  	;les	di,[es:di+12h]
 23021 00004EAB 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 23022                                  GOT_DEV_ADDR:				; ES:DI -> device
 23023                                  	;test	word [es:di+4],800h
 23024 00004EAF 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 23025 00004EB5 7441                    	JZ	short OPCLS_DONE	; Device can't
 23026 00004EB7 06                      	PUSH	ES
 23027 00004EB8 1F                      	POP	DS
 23028 00004EB9 89FE                    	MOV	SI,DI			; DS:SI -> device
 23029                                  OPCLS_RETRY:
 23030                                  	;Context ES
 23031 00004EBB 16                      	push	ss
 23032 00004EBC 07                      	pop	es
 23033                                  					; DEVCALL is in DOSDATA
 23034 00004EBD BF[0603]                	MOV	DI,DEVCALL
 23035                                  
 23036 00004EC0 89FB                    	MOV	BX,DI
 23037 00004EC2 50                      	PUSH	AX
 23038                                  	;mov	al,13
 23039 00004EC3 B00D                    	MOV	AL,DOPCLHL
 23040 00004EC5 AA                      	STOSB				; Length
 23041 00004EC6 58                      	POP	AX
 23042 00004EC7 86E0                    	XCHG	AH,AL
 23043 00004EC9 AA                      	STOSB				; Unit
 23044 00004ECA 86E0                    	XCHG	AH,AL
 23045 00004ECC AA                      	STOSB				; Command
 23046 00004ECD 26C7050000              	MOV	WORD [ES:DI],0		; Status
 23047 00004ED2 50                      	PUSH	AX			; Save Unit,Command
 23048                                  	;invoke	DEVIOCALL2
 23049 00004ED3 E82900                  	call	DEVIOCALL2
 23050                                  
 23051                                  	;mov	di,[es:bx+3]
 23052 00004ED6 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 23053                                  	;test	di,8000h
 23054                                  	;jz	short OPCLS_DONEP	
 23055 00004EDA 21FF                    	and	di,di
 23056 00004EDC 7919                    	jns	short OPCLS_DONEP	; No error
 23057                                  	;test	word [si+4],8000h
 23058                                  	; 22/11/2022 (BugFix)
 23059                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVTYP
 23060 00004EDE F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 23061 00004EE3 7404                    	JZ	short BLKDEV
 23062 00004EE5 B486                    	MOV	AH,86H			; Read error in data, Char dev
 23063 00004EE7 EB04                    	JMP	SHORT HRDERR
 23064                                  
 23065                                  BLKDEV:
 23066 00004EE9 88C8                    	MOV	AL,CL			; Drive # in AL
 23067 00004EEB B406                    	MOV	AH,6			; Read error in data, Blk dev
 23068                                  HRDERR:
 23069                                  	;invoke	CHARHARD
 23070 00004EED E83F09                  	call	CHARHARD
 23071 00004EF0 3C01                    	CMP	AL,1
 23072 00004EF2 7503                    	JNZ	short OPCLS_DONEP	; IGNORE or FAIL
 23073                                  					;  Note that FAIL is essentually IGNORED
 23074 00004EF4 58                      	POP	AX			; Get back Unit, Command
 23075 00004EF5 EBC4                    	JMP	short OPCLS_RETRY
 23076                                  
 23077                                  OPCLS_DONEP:
 23078 00004EF7 58                      	POP	AX			; Clean stack
 23079                                  OPCLS_DONE:
 23080 00004EF8 E8EAC6                  	call	restore_world
 23081 00004EFB C3                      	retn
 23082                                  
 23083                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 23084                                  ;----------------------------------------------------------------------------
 23085                                  ;**	DevIoCall  - Call Device
 23086                                  ;
 23087                                  ;	ENTRY	DS:SI Points to device SFT
 23088                                  ;		ES:BX Points to request data
 23089                                  ;	EXIT	DS:SI -> Device driver
 23090                                  ;	USES	DS:SI,AX
 23091                                  ;----------------------------------------------------------------------------
 23092                                  ;**	DevIoCall2 - Call Device
 23093                                  ;
 23094                                  ;	ENTRY	DS:SI Points to DPB
 23095                                  ;		ES:BX Points to request data
 23096                                  ;	EXIT	DS:SI -> Device driver
 23097                                  ;	USES	DS:SI,AX
 23098                                  ;----------------------------------------------------------------------------
 23099                                  
 23100                                  DEVIOCALL:
 23101                                  					; SS override for CALLSSEC, 
 23102                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 23103 00004EFC C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 23104                                  
 23105                                  	;entry	DEVIOCALL2
 23106                                  DEVIOCALL2:
 23107                                  	;EnterCrit critDevice
 23108 00004EFF E873D1                  	call	EcritDevice
 23109                                  
 23110                                  	; MSDOS 6.0
 23111                                  	;TEST	word [SI+SYSDEV.ATT],DevTyp ;AN000; >32mb   block device ?
 23112                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23113                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb   read ?
 23114                                  	;JZ	short chkext		;AN000; >32mb   yes
 23115                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb   write ?
 23116                                  	;JZ	short chkex		;AN000; >32mb   yes
 23117                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 23118                                  	;				;AN000; >32mb   write/verify ?
 23119                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23120                                  ;chkext:
 23121                                  	;CALL	RW_SC			;AN000;LB. use secondary cache if there
 23122                                  	;JC	short dev_exit		;AN000;LB. done
 23123                                  	;
 23124                                  	;TEST	word [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb   extended driver?
 23125                                  	;JZ	short chksector		;AN000;>32mb   no
 23126                                  	;ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 23127                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 23128                                  	;MOV	[SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 23129                                  	;MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 23130                                  	;MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 23131                                  	;MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 23132                                  	;JMP	short chardev2		;AN000; >32mb
 23133                                  ;chksector:				;AN000; >32mb
 23134                                  	;CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 23135                                  	;JZ	short chardev2		;AN000; >32mb   then fake error
 23136                                  	;MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+ERROR_I24_NOT_DOS_DISK 
 23137                                  	;				;AN000; >32mb
 23138                                  	;JMP	SHORT dev_exit		;AN000; >32mb
 23139                                  
 23140                                  ;chardev2:				;AN000;
 23141                                  
 23142                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 23143                                  	; preserved
 23144                                  
 23145                                  	;mov	ax,[si+6]
 23146 00004F02 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 23147 00004F05 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23148 00004F09 368C1E[2203]            	MOV	[SS:CALLDEVAD+2],DS
 23149 00004F0E 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23150                                  	;mov	ax,[si+8]
 23151 00004F13 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 23152 00004F16 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23153 00004F1A 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23154                                  	; MSDOS 6.0
 23155                                  	;CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 23156                                  	;JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 23157                                  dev_exit:
 23158                                  	;LeaveCrit critDevice
 23159 00004F1F E85BD1                  	call	LcritDevice
 23160 00004F22 C3                      	retn
 23161                                  
 23162                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 23163                                  ;---------------------------------------------------------------------------
 23164                                  ;
 23165                                  ; Procedure Name : SETREAD, SETWRITE
 23166                                  ;
 23167                                  ; Inputs:
 23168                                  ;	DS:BX = Transfer Address
 23169                                  ;	CX = Record Count
 23170                                  ;	DX = Starting Record
 23171                                  ;	AH = Media Byte
 23172                                  ;	AL = Unit Code
 23173                                  ; Function:
 23174                                  ;	Set up the device call header at DEVCALL
 23175                                  ; Output:
 23176                                  ;	ES:BX Points to DEVCALL
 23177                                  ; No other registers effected
 23178                                  ;
 23179                                  ;---------------------------------------------------------------------------
 23180                                  
 23181                                  SETREAD:
 23182 00004F23 57                      	PUSH	DI
 23183 00004F24 51                      	PUSH	CX
 23184 00004F25 50                      	PUSH	AX
 23185 00004F26 B104                    	MOV	CL,DEVRD ; mov cl,4
 23186                                  SETCALLHEAD:
 23187 00004F28 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 23188 00004F2A 16                      	PUSH	SS
 23189 00004F2B 07                      	POP	ES
 23190                                  					; DEVCALL is in DOSDATA
 23191 00004F2C BF[0603]                	MOV	DI,DEVCALL
 23192                                  
 23193 00004F2F AA                      	STOSB				; length
 23194 00004F30 58                      	POP	AX
 23195 00004F31 AA                      	STOSB				; Unit
 23196 00004F32 50                      	PUSH	AX
 23197 00004F33 88C8                    	MOV	AL,CL
 23198 00004F35 AA                      	STOSB				; Command code
 23199 00004F36 31C0                    	XOR	AX,AX
 23200 00004F38 AB                      	STOSW				; Status
 23201 00004F39 83C708                  	ADD	DI,8			; Skip link fields
 23202 00004F3C 58                      	POP	AX
 23203 00004F3D 86E0                    	XCHG	AH,AL
 23204 00004F3F AA                      	STOSB				; Media byte
 23205 00004F40 86C4                    	XCHG	AL,AH
 23206 00004F42 50                      	PUSH	AX
 23207 00004F43 89D8                    	MOV	AX,BX
 23208 00004F45 AB                      	STOSW
 23209 00004F46 8CD8                    	MOV	AX,DS
 23210 00004F48 AB                      	STOSW				; Transfer addr
 23211 00004F49 59                      	POP	CX			; Real AX
 23212 00004F4A 58                      	POP	AX			; Real CX
 23213 00004F4B AB                      	STOSW				; Count
 23214 00004F4C 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 23215 00004F4D AB                      	STOSW				; Start
 23216 00004F4E 91                      	XCHG	AX,CX
 23217 00004F4F 87D1                    	XCHG	DX,CX
 23218 00004F51 5F                      	POP	DI
 23219                                  					; DEVCALL is in DOSDATA
 23220 00004F52 BB[0603]                	MOV	BX,DEVCALL
 23221 00004F55 C3                      	retn
 23222                                  
 23223                                  	;entry	SETWRITE
 23224                                  SETWRITE:
 23225                                  
 23226                                  ; Inputs:
 23227                                  ;	DS:BX = Transfer Address
 23228                                  ;	CX = Record Count
 23229                                  ;	DX = Starting Record
 23230                                  ;	AH = Media Byte
 23231                                  ;	AL = Unit Code
 23232                                  ; Function:
 23233                                  ;	Set up the device call header at DEVCALL
 23234                                  ; Output:
 23235                                  ;	ES:BX Points to DEVCALL
 23236                                  ; No other registers effected
 23237                                  
 23238 00004F56 57                      	PUSH	DI
 23239 00004F57 51                      	PUSH	CX
 23240 00004F58 50                      	PUSH	AX
 23241 00004F59 B108                    	MOV	CL,DEVWRT ; mov cl,8
 23242 00004F5B 36020E[AD02]            	ADD	CL,[SS:VERFLG]		; SS override
 23243 00004F60 EBC6                    	JMP	SHORT SETCALLHEAD
 23244                                  
 23245                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 23246                                  ;---------------------------------------------------------------------------
 23247                                  ;
 23248                                  ; Procedure Name : RW_SC
 23249                                  ;
 23250                                  ; Inputs:
 23251                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 23252                                  ;	 [SC_STATUS]= SC validity status
 23253                                  ;	 [SEQ_SECTOR]= last sector read
 23254                                  ; Function:
 23255                                  ;	Read from or write through secondary cache
 23256                                  ; Output:
 23257                                  ;	ES:BX Points to DEVCALL
 23258                                  ;	carry clear, I/O is not done
 23259                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 23260                                  ;	carry set, I/O is done
 23261                                  ;
 23262                                  ;----------------------------------------------------------------------------
 23263                                  
 23264                                  ;procedure   RW_SC,NEAR		;AN000;
 23265                                  ;
 23266                                  ;	; SS override for all variables used.
 23267                                  ;
 23268                                  ;	CMP	[SC_CACHE_COUNT],0	;AN000;LB. secondary cache exists?
 23269                                  ;	JZ	scexit4 		;AN000;LB. no, do nothing
 23270                                  ;	CMP	[CALLSCNT],1		;AN000;LB. sector count = 1 (buffer I/O)
 23271                                  ;	JNZ	scexit4 		;AN000;LB. no, do nothing
 23272                                  ;	PUSH	CX			    ;AN000;;LB.
 23273                                  ;	PUSH	DX			    ;AN000;;LB. yes
 23274                                  ;	PUSH	DS			    ;AN000;;LB. save registers
 23275                                  ;	PUSH	SI			    ;AN000;;LB.
 23276                                  ;	PUSH	ES			    ;AN000;;LB.
 23277                                  ;	PUSH	DI			    ;AN000;;LB.
 23278                                  ;	MOV	DX,WORD PTR [CALLSSEC]	    ;AN000;;LB.  starting sector
 23279                                  ;	CMP	BYTE PTR [DEVCALL.REQFUNC],DEVRD ;AN000;LB. read ?
 23280                                  ;	JZ	doread			    ;AN000;LB. yes
 23281                                  ;	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 23282                                  ;	JMP	scexit2 		    ;AN000;LB. back to normal
 23283                                  ;scexit4:				    ;AN000;
 23284                                  ;	CLC				    ;AN000;LB. I/O not done yet
 23285                                  ;	return				    ;AN000;LB.
 23286                                  ;doread: 				    ;AN000;
 23287                                  ;	CALL	SC2BUF			    ;AN000;LB. check if in SC
 23288                                  ;	JC	readSC			    ;AN000;LB.
 23289                                  ;	MOV	[DEVCALL.REQSTAT],STDON     ;AN000;LB. fake done and ok
 23290                                  ;	STC				    ;AN000;LB. set carry
 23291                                  ;	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 23292                                  ;readSC: 				    ;AN000;
 23293                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23294                                  ;	MOV	CX,WORD PTR [CALLSSEC]	    ;AN000;;LB. saved sequential sector
 23295                                  ;	SUB	CX,WORD PTR [SEQ_SECTOR]    ;AN000;;LB. number
 23296                                  ;	SBB	AX,WORD PTR [SEQ_SECTOR+2]  ;AN000;;LB.
 23297                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23298                                  ;	JNZ	saveseq2		    ;AN000;;LB. yes,save seq. sector #
 23299                                  ;chklow: 						
 23300                                  ;	CMP	CX,1			    ;AN000;;LB. <= 1
 23301                                  ;	JA	saveseq2		    ;AN000;;LB. no, not sequential
 23302                                  ;	MOV	[SC_STATUS],-1		    ;AN000;;LB. prsume all SC valid
 23303                                  ;	MOV	AX,[SC_CACHE_COUNT]	    ;AN000;;LB. yes, sequential
 23304                                  ;	MOV	[CALLSCNT],AX		    ;AN000;;LB. read continuous sectors
 23305                                  ;readsr:
 23306                                  ;	MOV	AX,WORD PTR [CALLXAD+2]     ;AN000;;LB. save buffer addr
 23307                                  ;	MOV	[TEMP_VAR2],AX		    ;AN000;;LB. in temp vars
 23308                                  ;	MOV	AX,WORD PTR [CALLXAD]	    ;AN000;;LB.
 23309                                  ;	MOV	[TEMP_VAR],AX		    ;AN000;;LB.
 23310                                  ;						
 23311                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;LB. use SC cache addr as
 23312                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;LB. transfer addr
 23313                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR+2] ;AN000;LB.
 23314                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;LB.
 23315                                  ;	MOV	[SC_FLAG],1		    ;AN000;LB. flag it for later;
 23316                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23317                                  ;	MOV	[CURSC_DRIVE],AL	    ;AN000;;LB. set current drive
 23318                                  ;	MOV	AX,WORD PTR [CALLSSEC]	    ;AN000;;LB. current sector
 23319                                  ;	MOV	[CURSC_SECTOR],AX	    ;AN000;;LB. set current sector
 23320                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB.
 23321                                  ;	MOV	[CURSC_SECTOR+2],AX	    ;AN000;;LB.
 23322                                  ;saveseq2:				    ;AN000;
 23323                                  ;	CLC				    ;AN000;LB. clear carry
 23324                                  ;saveseq:				    ;AN000;	
 23325                                  ;	MOV	AX,[HIGH_SECTOR]	    ;AN000;LB. save current sector #
 23326                                  ;	MOV	WORD PTR [SEQ_SECTOR+2],AX  ;AN000;LB. for access mode ref.
 23327                                  ;	MOV	AX,[CALLSSEC]		    ;AN000;LB.	
 23328                                  ;	MOV	WORD PTR [SEQ_SECTOR],AX    ;AN000;LB.	
 23329                                  ;	JMP	short scexit 		    ;AN000;LB.	
 23330                                  ;						
 23331                                  ;scexit2:				    ;AN000;LB.
 23332                                  ;	CLC				    ;AN000;LB.	clear carry
 23333                                  ;scexit: 				    ;AN000;		
 23334                                  ;	POP	DI			    ;AN000;;LB.
 23335                                  ;	POP	ES			    ;AN000;;LB. restore registers
 23336                                  ;	POP	SI			    ;AN000;;LB.
 23337                                  ;	POP	DS			    ;AN000;;LB.
 23338                                  ;	POP	DX			    ;AN000;;LB.
 23339                                  ;	POP	CX			    ;AN000;;LB.
 23340                                  ;	return				    ;AN000;;LB.
 23341                                  ;							
 23342                                  ;EndProc RW_SC				    ;AN000;
 23343                                  
 23344                                  ;Break	<IN_SC -- check if in secondary cache>
 23345                                  ;--------------------------------------------------------------------------
 23346                                  ;
 23347                                  ; Procedure Name : IN_SC
 23348                                  ;
 23349                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23350                                  ;	   [CURSC_DRIVE]= current SC drive
 23351                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23352                                  ;	   [SC_CACHE_COUNT] = SC count
 23353                                  ;	   [HIGH_SECTOR]:DX= sector number
 23354                                  ; Function:
 23355                                  ;	Check if the sector is in secondary cache
 23356                                  ; Output:
 23357                                  ;	carry clear, in SC
 23358                                  ;	   CX= the index in the secondary cache
 23359                                  ;	carry set, not in SC
 23360                                  ;
 23361                                  ;---------------------------------------------------------------------------
 23362                                  
 23363                                  ;procedure   IN_SC,NEAR		    ;AN000;
 23364                                  ;
 23365                                  ;	; SS override for all variables used
 23366                                  ;
 23367                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23368                                  ;	CMP	AL,[CURSC_DRIVE]	    ;AN000;;LB. same as SC drive
 23369                                  ;	JNZ	outrange2		    ;AN000;;LB. no
 23370                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23371                                  ;	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 23372                                  ;	SUB	CX,WORD PTR [CURSC_SECTOR]    ;AN000;;LB. number
 23373                                  ;	SBB	AX,WORD PTR [CURSC_SECTOR+2]  ;AN000;;LB.
 23374                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23375                                  ;	JNZ	outrange2		    ;AN000;;LB. yes
 23376                                  ;	CMP	CX,[SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 23377                                  ;	JAE	outrange2		    ;AN000;;LB. yes
 23378                                  ;	CLC				    ;AN000;;LB. clear carry
 23379                                  ;	JMP	short inexit		    ;AN000;;LB. in SC
 23380                                  ;outrange2:				    ;AN000;;LB. set carry
 23381                                  ;	STC				    ;AN000;;LB.
 23382                                  ;inexit: 				    ;AN000;;LB.
 23383                                  ;	return				    ;AN000;;LB.
 23384                                  ;
 23385                                  ;EndProc IN_SC				    ;AN000;
 23386                                  
 23387                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 23388                                  ;---------------------------------------------------------------------------
 23389                                  ;
 23390                                  ; Procedure Name : Invalidate_Sc
 23391                                  ;
 23392                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23393                                  ;	   [CURSC_DRIVE]= current SC drive
 23394                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23395                                  ;	   [SC_CACHE_COUNT] = SC count
 23396                                  ;	   [SC_STAUS] = SC status word
 23397                                  ;	   [HIGH_SECTOR]:DX= sector number
 23398                                  ;
 23399                                  ; Function:
 23400                                  ;	invalidate secondary cache if in there
 23401                                  ; Output:
 23402                                  ;	[SC_STATUS] is updated
 23403                                  ;---------------------------------------------------------------------------
 23404                                  
 23405                                  ;procedure   INVALIDATE_SC,NEAR	    ;AN000;
 23406                                  ;
 23407                                  ;	; SS override for all variables used
 23408                                  ;
 23409                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23410                                  ;	JC	outrange		    ;AN000;;LB. no
 23411                                  ;	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 23412                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23413                                  ;	NOT	AX			    ;AN000;;LB.
 23414                                  ;	AND	[SC_STATUS],AX		    ;AN000;;LB. save the status
 23415                                  ;outrange:				    ;AN000;;LB.
 23416                                  ;	return				    ;AN000;;LB.
 23417                                  ;
 23418                                  ;EndProc INVALIDATE_SC			    ;AN000;
 23419                                  
 23420                                  
 23421                                  ;Break	<VIRREAD- virtually read data into buffer>
 23422                                  ;--------------------------------------------------------------------------
 23423                                  ;
 23424                                  ; Procedure Name : SC_FLAG
 23425                                  ;
 23426                                  ; Inputs:  SC_FLAG = 0 , no sectors were read into SC
 23427                                  ;		     1, continous sectors were read into SC
 23428                                  ; Function:
 23429                                  ;	   Move data from SC to buffer
 23430                                  ; Output:
 23431                                  ;	 carry clear, data is moved to buffer
 23432                                  ;	 carry set, bad sector or exceeds maximum sector
 23433                                  ;	   SC_FLAG =0
 23434                                  ;	   CALLSCNT=1
 23435                                  ;	   SC_STATUS= -1 if succeeded
 23436                                  ;     
 23437                                  ;		       0 if failed
 23438                                  ;--------------------------------------------------------------------------
 23439                                  
 23440                                  ;procedure   VIRREAD,NEAR	    ;AN000;
 23441                                  ;
 23442                                  ;	; SS override for all variables used
 23443                                  ;
 23444                                  ;	CMP	[SC_FLAG],0		    ;AN000;;LB.  from SC fill
 23445                                  ;	JZ	sc2end			    ;AN000;;LB.  no
 23446                                  ;	MOV	AX,[TEMP_VAR2]		    ;AN000;;LB. restore buffer addr
 23447                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;;LB.
 23448                                  ;	MOV	AX,[TEMP_VAR]		    ;AN000;;LB.
 23449                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;;LB.
 23450                                  ;	MOV	[SC_FLAG],0		    ;AN000;;LB.  reset sc_flag
 23451                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB.  one sector transferred
 23452                                  ;
 23453                                  ;	TESTB	[DEVCALL.REQSTAT],STERR     ;AN000;;LB.  error?
 23454                                  ;	JNZ	scerror 		    ;AN000;;LB. yes
 23455                                  ;	PUSH	DS			    ;AN000;;LB.
 23456                                  ;	PUSH	SI			    ;AN000;;LB.
 23457                                  ;	PUSH	ES			    ;AN000;;LB.
 23458                                  ;	PUSH	DI			    ;AN000;;LB.
 23459                                  ;	PUSH	DX			    ;AN000;;LB.
 23460                                  ;	PUSH	CX			    ;AN000;;LB.
 23461                                  ;	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 23462                                  ;	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buffer
 23463                                  ;	POP	CX			    ;AN000;;LB.
 23464                                  ;	POP	DX			    ;AN000;;LB.
 23465                                  ;	POP	DI			    ;AN000;;LB.
 23466                                  ;	POP	ES			    ;AN000;;LB.
 23467                                  ;	POP	SI			    ;AN000;;LB.
 23468                                  ;	POP	DS			    ;AN000;;LB.
 23469                                  ;	JMP	SHORT sc2end		    ;AN000;;LB. return
 23470                                  ;
 23471                                  ;scerror:				    ;AN000;
 23472                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB. reset sector count to 1
 23473                                  ;	MOV	[SC_STATUS],0		    ;AN000;;LB. invalidate all SC sectors
 23474                                  ;	MOV	[CURSC_DRIVE],-1	    ;AN000;;LB. invalidate drive
 23475                                  ;	STC				    ;AN000;;LB. carry set
 23476                                  ;	return				    ;AN000;;LB.
 23477                                  ;
 23478                                  ;sc2end: 				    ;AN000;
 23479                                  ;	CLC				    ;AN000;;LB. carry clear
 23480                                  ;	return				    ;AN000;;LB.
 23481                                  ;
 23482                                  ;EndProc VIRREAD 			    ;AN000;
 23483                                  
 23484                                  ;Break	<SC2BUF- move data from SC to buffer>
 23485                                  ;----------------------------------------------------------------------------
 23486                                  ;
 23487                                  ; Procedure Name : SC2BUF
 23488                                  ;
 23489                                  ; Inputs:  [SC_STATUS] = SC validity status
 23490                                  ;	   [SC_SECTOR_SIZE] = request sector size
 23491                                  ;	   [SC_CACHE_PTR] = pointer to SC
 23492                                  ; Function:
 23493                                  ;	   Move data from SC to buffer
 23494                                  ; Output:
 23495                                  ;	   carry clear, in SC  and data is moved
 23496                                  ;	   carry set, not in SC and data is not moved
 23497                                  ;---------------------------------------------------------------------------
 23498                                  
 23499                                  ;procedure   SC2BUF,NEAR 	    ;AN000;
 23500                                  ;
 23501                                  ;	; SS override for all variables used
 23502                                  ;
 23503                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23504                                  ;	JC	noSC			    ;AN000;;LB. no
 23505                                  ;	MOV	AX,1			    ;AN000;;LB. check if valid sector
 23506                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23507                                  ;	TEST	[SC_STATUS],AX		    ;AN000;;LB.
 23508                                  ;	JZ	noSC			    ;AN000;;LB. invalid
 23509                                  ;entry SC2BUF2				    ;AN000;
 23510                                  ;	MOV	AX,CX			    ;AN000;;LB. times index with
 23511                                  ;	MUL	[SC_SECTOR_SIZE]	    ;AN000;;LB. sector size
 23512                                  ;	ADD	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;;LB. add SC starting addr
 23513                                  ;	ADC	DX,WORD PTR [SC_CACHE_PTR+2];AN000;;LB.
 23514                                  ;	MOV	DS,DX			    ;AN000;    ;LB. DS:SI-> SC sector addr
 23515                                  ;	MOV	SI,AX			    ;AN000;    ;LB.
 23516                                  ;	MOV	ES,WORD PTR [CALLXAD+2]     ;AN000;    ;LB. ES:DI-> buffer addr
 23517                                  ;	MOV	DI,WORD PTR [CALLXAD]	    ;AN000;    ;LB.
 23518                                  ;	MOV	CX,[SC_SECTOR_SIZE]	    ;AN000;    ;LB. count= sector size
 23519                                  ;	SHR	CX,1			    ;AN000;    ;LB. may use DWORD move for 386
 23520                                  ;entry MOVWORDS				    ;AN000;
 23521                                  ;	CMP	[DDMOVE],0		    ;AN000;    ;LB. 386 ?
 23522                                  ;	JZ	nodd			    ;AN000;    ;LB. no
 23523                                  ;	SHR	CX,1			    ;AN000;    ;LB. words/2
 23524                                  ;	DB	66H			    ;AN000;    ;LB. use double word move
 23525                                  ;nodd:
 23526                                  ;	REP	MOVSW			    ;AN000;    ;LB. move to buffer
 23527                                  ;	CLC				    ;AN000;    ;LB. clear carry
 23528                                  ;	return				    ;AN000;    ;LB. exit
 23529                                  ;noSC:					    ;AN000;
 23530                                  ;	STC				    ;AN000;    ;LB. set carry
 23531                                  ;sexit:					    ;AN000;
 23532                                  ;	return				    ;AN000;    ;LB.
 23533                                  ;
 23534                                  ;EndProc SC2BUF
 23535                                  
 23536                                  
 23537                                  ;============================================================================
 23538                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 23539                                  ;============================================================================
 23540                                  ; 29/07/2018 - Retro DOS v3.0
 23541                                  
 23542                                  ;	TITLE	MKNODE - Node maker
 23543                                  ;	NAME	MKNODE
 23544                                  
 23545                                  ;**	MKNODE.ASM
 23546                                  ;
 23547                                  ;	Low level routines for making a new local file system node
 23548                                  ;	and filling in an SFT from a directory entry
 23549                                  ;
 23550                                  ;	BUILDDIR
 23551                                  ;	SETDOTENT
 23552                                  ;	MakeNode
 23553                                  ;	NEWENTRY
 23554                                  ;	FREEENT
 23555                                  ;	NEWDIR
 23556                                  ;	DOOPEN
 23557                                  ;	RENAME_MAKE
 23558                                  ;	CHECK_VIRT_OPEN
 23559                                  ;
 23560                                  ;	Revision history:
 23561                                  ;
 23562                                  ;	 AN000	version 4.0  Jan. 1988
 23563                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 23564                                  
 23565                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 23566                                  ;----------------------------------------------------------------------------
 23567                                  ;
 23568                                  ; Procedure Name : BUILDDIR,NEWDIR
 23569                                  ;
 23570                                  ; Inputs:
 23571                                  ;       ES:BP Points to DPB
 23572                                  ;       [THISSFT] Set if using NEWDIR entry point
 23573                                  ;               (used by ALLOCATE)
 23574                                  ;       [LASTENT] current last valid entry number in directory if no free
 23575                                  ;               entries
 23576                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 23577                                  ; Function:
 23578                                  ;       Grow directory if no free entries and not root
 23579                                  ; Outputs:
 23580                                  ;       CARRY SET IF FAILURE
 23581                                  ;       ELSE
 23582                                  ;          AX entry number of new entry
 23583                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 23584                                  ;               AX = first entry of new dir
 23585                                  ;       GETENT should be called to set [LASTENT]
 23586                                  ;
 23587                                  ;----------------------------------------------------------------------------
 23588                                  
 23589                                  BUILDDIR:
 23590                                  	; 29/07/2018 - Retro DOS v3.0
 23591                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 23592                                  
 23593 00004F62 A1[6A05]                        MOV     AX,[ENTFREE]
 23594 00004F65 83F8FF                          CMP     AX,-1
 23595 00004F68 7402                            JZ	short CHECK_IF_ROOT
 23596 00004F6A F8                              CLC
 23597 00004F6B C3                              retn
 23598                                  
 23599                                  CHECK_IF_ROOT:
 23600 00004F6C 833E[5805]00                    CMP     word [DIRSTART],0
 23601 00004F71 7502                            JNZ	short NEWDIR
 23602 00004F73 F9                              STC
 23603                                  builddir_retn:
 23604 00004F74 C3                              retn				; Can't grow root
 23605                                  
 23606                                  	;entry   NEWDIR
 23607                                  NEWDIR:        
 23608 00004F75 8B1E[5805]              	MOV     BX,[DIRSTART]
 23609 00004F79 09DB                            OR      BX,BX
 23610 00004F7B 7405                            JZ	short NULLDIR
 23611 00004F7D E89A05                  	call	GETEOF
 23612 00004F80 72F2                            jc	short builddir_retn	; Screw up
 23613                                  NULLDIR:
 23614 00004F82 B90100                          MOV     CX,1
 23615 00004F85 E8BF04                  	call	ALLOCATE
 23616 00004F88 72EA                            jc	short  builddir_retn
 23617 00004F8A 8B16[5805]                      MOV     DX,[DIRSTART]
 23618 00004F8E 09D2                            OR      DX,DX
 23619 00004F90 750D                            JNZ	short ADDINGDIR
 23620 00004F92 E84CF8                  	call	SETDIRSRCH
 23621 00004F95 72DD                            jc	short  builddir_retn
 23622 00004F97 C706[F402]FFFF                  MOV     word [LASTENT],-1
 23623 00004F9D EB2B                            JMP     SHORT GOTDIRREC
 23624                                  ADDINGDIR:
 23625 00004F9F 53                              PUSH    BX
 23626 00004FA0 8B1E[5405]                      MOV     BX,[CLUSNUM]
 23627 00004FA4 E8940A                          call	IsEOF
 23628 00004FA7 5B                              POP     BX
 23629 00004FA8 7219                            JB	short NOTFIRSTGROW
 23630                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23631 00004FAA 891E[5405]                      MOV     [CLUSNUM],BX
 23632 00004FAE 51                              PUSH    CX
 23633 00004FAF 50                              PUSH    AX
 23634 00004FB0 55                              PUSH    BP
 23635 00004FB1 B401                            MOV     AH,1			; CLUSNUM update
 23636                                  	;mov	dl,[es:bp+0]
 23637 00004FB3 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 23638                                          ;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 23639 00004FB7 8B0E[5805]                      MOV     CX,[DIRSTART]		; first cluster #
 23640 00004FBB 89DD                            MOV     BP,BX 			; CLUSNUM
 23641 00004FBD E84DE4                  	call	FastOpen_Update
 23642 00004FC0 5D                              POP     BP
 23643 00004FC1 58                              POP     AX
 23644 00004FC2 59                              POP     CX
 23645                                  
 23646                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23647                                  NOTFIRSTGROW:
 23648 00004FC3 89DA                            MOV     DX,BX
 23649 00004FC5 30DB                            XOR     BL,BL
 23650 00004FC7 E86C04                  	call	FIGREC
 23651                                  GOTDIRREC:
 23652                                  	;mov	cl,[es:bp+4]
 23653 00004FCA 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 23654 00004FCE FEC1                            INC     CL
 23655 00004FD0 30ED                            XOR     CH,CH
 23656                                  ZERODIR:
 23657 00004FD2 51                              PUSH    CX
 23658                                  	;mov	byte [ALLOWED],18h
 23659 00004FD3 C606[F702]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 23660 00004FD8 B0FF                            MOV     AL,0FFH
 23661 00004FDA E8AD0E                          call	GETBUFFR
 23662 00004FDD 7302                            JNC	short GET_SSIZE
 23663 00004FDF 59                              POP     CX
 23664 00004FE0 C3                              retn
 23665                                  
 23666                                  GET_SSIZE:
 23667                                  	;mov	cx,[es:bp+2]
 23668 00004FE1 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 23669 00004FE5 06                              PUSH    ES
 23670 00004FE6 C43E[7405]                      LES     DI,[CURBUF]
 23671                                  	;or	byte [es:di+5],4
 23672 00004FEA 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 23673 00004FEF 57                              PUSH    DI
 23674                                  	;add	di,16
 23675 00004FF0 83C710                          ADD     DI,BUFINSIZ
 23676 00004FF3 31C0                            XOR     AX,AX
 23677 00004FF5 D1E9                            SHR     CX,1
 23678 00004FF7 F3AB                            REP     STOSW
 23679 00004FF9 7301                            JNC	short EVENZ
 23680 00004FFB AA                              STOSB
 23681                                  EVENZ:
 23682 00004FFC 5F                              POP     DI
 23683                                  
 23684                                  	; MSDOS 6.0
 23685                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23686                                  	;				;LB. if already dirty		  ;AN000;
 23687                                          ;JNZ	short _yesdirty_	;LB.  don't increment dirty count ;AN000;
 23688                                          ;call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 23689                                          
 23690                                  	;or	byte [es:di+5],40h
 23691 00004FFD 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23692                                  ;_yesdirty_:
 23693 00005002 07                              POP	ES
 23694 00005003 59                              POP	CX
 23695                                  
 23696                                  	; MSDOS 6.0
 23697                                  	;add	dx, 1
 23698                                  	;adc	word [HIGH_SECTOR],0
 23699                                  
 23700 00005004 42                      	INC	DX
 23701 00005005 E2CB                            LOOP    ZERODIR
 23702                                  
 23703 00005007 A1[F402]                        MOV     AX,[LASTENT]
 23704 0000500A 40                              INC     AX
 23705 0000500B F8                              CLC
 23706 0000500C C3                              retn
 23707                                  
 23708                                  ;--------------------------------------------------------------------------
 23709                                  ;
 23710                                  ; Procedure Name : SETDOTENT
 23711                                  ;
 23712                                  ; set up a . or .. directory entry for a directory.
 23713                                  ;
 23714                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 23715                                  ;               AX contains ". " or ".."
 23716                                  ;               DX contains first cluster of entry
 23717                                  ;
 23718                                  ;----------------------------------------------------------------------------
 23719                                  
 23720                                  SETDOTENT:
 23721                                  ;	Fill in name field
 23722 0000500D AB                              STOSW
 23723 0000500E B90400                          MOV     CX,4
 23724 00005011 B82020                          MOV     AX,"  " ; 2020h
 23725 00005014 F3AB                            REP     STOSW
 23726 00005016 AA                              STOSB
 23727                                  
 23728                                  ;	Set up attribute
 23729                                  	;mov	al, 10h
 23730 00005017 B010                            MOV     AL,attr_directory
 23731 00005019 AA                              STOSB
 23732                                  
 23733                                  ;	Initialize time and date of creation
 23734 0000501A 83C70A                          ADD     DI,10
 23735 0000501D 8B36[3605]                      MOV     SI,[THISSFT]
 23736                                  	;mov	ax,[si+0Dh]
 23737 00005021 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 23738 00005024 AB                              STOSW
 23739                                  	;mov	ax,[si+0Fh]
 23740 00005025 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 23741 00005028 AB                      	STOSW
 23742                                  
 23743                                  ;	Set up first cluster field
 23744 00005029 89D0                            MOV     AX,DX
 23745 0000502B AB                              STOSW
 23746                                  
 23747                                  ;	0 file size
 23748 0000502C 31C0                            XOR     AX,AX
 23749 0000502E AB                              STOSW
 23750 0000502F AB                              STOSW
 23751 00005030 C3                              retn
 23752                                  
 23753                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 23754                                  ;---------------------------------------------------------------------------
 23755                                  ;
 23756                                  ; Procedure Name : MakeNode
 23757                                  ;
 23758                                  ; Inputs:
 23759                                  ;       AL - attribute to create
 23760                                  ;       AH = 0 if it is ok to truncate a file already by this name
 23761                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 23762                                  ;               (AH ignored on dirs and devices)
 23763                                  ;
 23764                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 23765                                  ;               a name already existant is ALWAYS an error in these cases.
 23766                                  ;
 23767                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 23768                                  ;               terminated)
 23769                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 23770                                  ;               ( = -1 if current dir not involved, else
 23771                                  ;                Points to first char after last "/" of current dir part)
 23772                                  ;       [THISCDS] Points to CDS being used
 23773                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 23774                                  ; Function:
 23775                                  ;       Make a new node
 23776                                  ; Outputs:
 23777                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 23778                                  ;       CARRY SET IF ERROR
 23779                                  ;          AX = 1 A node by this name exists and is a directory
 23780                                  ;          AX = 2 A new node could not be created
 23781                                  ;          AX = 3 A node by this name exists and is a disk file
 23782                                  ;               (AH was NZ on input)
 23783                                  ;          AX = 4 Bad Path
 23784                                  ;               SI return from GetPath maintained
 23785                                  ;          AX = 5 Attribute mismatch
 23786                                  ;          AX = 6 Sharing Violation
 23787                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 23788                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 23789                                  ;       ELSE
 23790                                  ;          AX = 0       Disk Node
 23791                                  ;          AX = 3       Device Node (error in some cases)
 23792                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 23793                                  ;               containing new node.
 23794                                  ;          [CURBUF+2]:BX Points to entry
 23795                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 23796                                  ;          [THISSFT] is filled in
 23797                                  ;               sf_mode = unchanged.
 23798                                  ;          Attribute byte in entry is input AL
 23799                                  ; DS preserved, others destroyed
 23800                                  ;
 23801                                  ;-------------------------------------------------------------------------
 23802                                  
 23803                                  MakeNode:
 23804                                  	;mov	word [CREATING],0E5FFh
 23805 00005031 C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 23806 00005037 50                              PUSH    AX              ; Save AH value
 23807 00005038 C606[F802]00            	MOV	byte [NoSetDir],0
 23808 0000503D A2[0805]                	MOV	[SATTRIB],AL
 23809 00005040 E8F9F7                  	call	GetPathNoSet
 23810 00005043 88CA                            MOV     DL,CL           ; Save CL info
 23811 00005045 89C1                            MOV     CX,AX           ; Device ID to CH
 23812 00005047 58                              POP     AX              ; Get back AH
 23813 00005048 7316                            JNC	short make_exists ; File existed
 23814 0000504A 7505                            JNZ	short make_err_4 ; Path bad
 23815 0000504C 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 23816 0000504F 7406                            JZ	short make_type	; Name simply not found, and no metas
 23817                                  make_err_4:
 23818 00005051 B004                            MOV     AL,4            ; case 1 bad path
 23819                                  make_err_ret:
 23820 00005053 30E4                            XOR     AH,AH
 23821 00005055 F9                              STC
 23822                                  make_retn:
 23823 00005056 C3                              retn
 23824                                  
 23825                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 23826                                  RENAME_MAKE:
 23827                                  make_type:
 23828                                  ;Extended Open hooks
 23829                                  	; MSDOS 6.0
 23830                                  	;TESTB	EXTOPEN_ON,ext_open_on	;FT. from extended open		;AN000;
 23831                                  	;JZ	make_type2		;FT. no				;AN000;
 23832                                  	;OR	EXTOPEN_ON,ext_file_not_exists ;FT. set for extended open ;AN000;
 23833                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 23834                                  	;JNZ    make_type2		;FT. no				;AN000;
 23835                                  	;STC				;FT. set carry			;AN000;
 23836                                  	;MOV    AX,7			;FT. file not found		;AN000;
 23837                                  	;return				;FT.				;AN000;
 23838                                  ;	Extended Open hooks
 23839                                  
 23840                                  make_type2:
 23841 00005057 C43E[3605]                      LES     DI,[THISSFT]
 23842 0000505B 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 23843 0000505D F9                              STC                     ; Not found
 23844 0000505E EB5A                            JMP     short make_new
 23845                                  
 23846                                  ; The node exists.  It may be either a device, directory or file:
 23847                                  ;   Zero set => directory
 23848                                  ;   High bit of CH on => device
 23849                                  ;   else => file
 23850                                  make_exists:
 23851 00005060 7448                            JZ	short make_exists_dir
 23852 00005062 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 23853                                  	;test	byte [ATTRIB],18h
 23854 00005064 F606[0605]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 23855 00005069 753B                            JNZ	short make_err_ret_5
 23856                                  				; Cannot already exist as Disk or Device Node
 23857                                                                  ;       if making DIR or Volume ID
 23858 0000506B 08ED                            OR      CH,CH
 23859 0000506D 781A                            JS	short make_share ; No further checks on attributes if device
 23860 0000506F 08E4                            OR      AH,AH
 23861 00005071 75E0                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 23862 00005073 51                              PUSH    CX              ; Save device ID
 23863 00005074 8E06[7605]                      MOV     ES,[CURBUF+2]
 23864                                  	;mov	ch,[es:bx+0Bh]
 23865 00005078 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 23866                                  	;test	ch,1
 23867 0000507C F6C501                  	test	CH,attr_read_only
 23868 0000507F 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 23869 00005081 E850FA                  	call	MatchAttributes
 23870 00005084 59                              POP     CX              ; Devid back in CH
 23871 00005085 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 23872 00005087 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 23873                                  make_share:
 23874 00005089 30E4                            XOR     AH,AH
 23875 0000508B 50                              PUSH    AX              ; Save Disk or Device node
 23876 0000508C 51                              PUSH    CX              ; Save Device ID
 23877 0000508D 88EC                            MOV     AH,CH           ; Device ID to AH
 23878 0000508F E83301                          CALL    DOOPEN          ; Fill in SFT for share check
 23879 00005092 C43E[3605]                      LES     DI,[THISSFT]
 23880 00005096 56                      	push	si
 23881 00005097 53                      	push	bx		; Save CURBUF pointers
 23882 00005098 E8BF22                  	call	ShareEnter
 23883 0000509B 7350                            jnc	short MakeEndShare
 23884                                  
 23885                                  ; User failed request.
 23886 0000509D 5B                      	pop	bx
 23887 0000509E 5E                      	pop	si
 23888 0000509F 59                      	pop	cx
 23889 000050A0 58                      	pop	ax
 23890                                  
 23891                                  Make_Share_ret:
 23892 000050A1 B006                            MOV     AL,6
 23893 000050A3 EBAE                            JMP	short make_err_ret
 23894                                  
 23895                                  make_err_ret_5P:
 23896 000050A5 59                              POP     CX              ; Get back device ID
 23897                                  make_err_ret_5:
 23898 000050A6 B005                            MOV     AL,5            ; Attribute mismatch
 23899 000050A8 EBA9                            JMP     make_err_ret
 23900                                  
 23901                                  make_exists_dir:
 23902 000050AA B001                            MOV     AL,1            ; exists as directory, always an error
 23903 000050AC EBA5                            JMP     make_err_ret
 23904                                  
 23905                                  make_save:
 23906 000050AE 50                              PUSH    AX              ; Save whether Disk or File
 23907 000050AF 89C8                            MOV     AX,CX           ; Device ID to AH
 23908 000050B1 E86A00                          CALL    NEWENTRY
 23909 000050B4 58                              POP     AX              ; 0 if Disk, 3 if File
 23910 000050B5 739F                            jnc	short make_retn
 23911 000050B7 B002                            MOV     AL,2            ; create failed case 2
 23912                                  make_save_retn:
 23913 000050B9 C3                              retn
 23914                                  
 23915                                  make_new:
 23916 000050BA E8F1FF                          call    make_save
 23917 000050BD 72FA                            jc	short make_save_retn	; case 2 fail
 23918 000050BF F606[0605]10            	test	BYTE [ATTRIB],attr_directory
 23919 000050C4 75F3                            jnz	short make_save_retn	; Don't "open" directories, so don't
 23920                                                                  ;   tell the sharer about them
 23921 000050C6 50                      	push	ax
 23922 000050C7 53                      	push	bx
 23923 000050C8 56                      	push	si		
 23924 000050C9 E88E22                          call	ShareEnter
 23925 000050CC 5E                      	pop	si
 23926 000050CD 5B                      	pop	bx
 23927 000050CE 58                      	pop	ax
 23928 000050CF 73E8                    	jnc	short make_save_retn
 23929                                  ;
 23930                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 23931                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 23932                                  ; possible: delete the newly created directory entry and return share_error.
 23933                                  ;
 23934 000050D1 50                              PUSH    AX
 23935 000050D2 C43E[7405]                      LES     DI,[CURBUF]
 23936                                  	;mov	byte [es:bx],0E5h
 23937 000050D6 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 23938                                  	
 23939                                  	; MSDOS 6.0
 23940                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 23941                                  	;				;LB. if already dirty		  ;AN000;
 23942                                          ;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 23943                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 23944                                  	;or	byte [es:di+5],40h
 23945 000050DA 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 23946                                  ;yesdirty3:
 23947 000050DF C42E[2405]                      LES     BP,[THISDPB]
 23948 000050E3 268A4600                        mov	al,[ES:BP]
 23949                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 23950 000050E7 E8480E                          call	FLUSHBUF		; write out buffer.
 23951 000050EA 58                              POP     AX
 23952 000050EB EBB4                            jmp	short Make_Share_ret
 23953                                  ;
 23954                                  ; We have found an existing file. We have also entered it into the share set.
 23955                                  ; At this point we need to call newentry to correctly address the problem of
 23956                                  ; getting rid of old data (create an existing file) or creating a new
 23957                                  ; directory entry (create a new file). Unfortunately, this operation may
 23958                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 23959                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 23960                                  ; the share set now, do the operation and then reassert the share access.
 23961                                  ;
 23962                                  ; We are allowed to do this! There is no window! After all, we are in
 23963                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 23964                                  ;
 23965                                  MakeEndShare:
 23966 000050ED C43E[3605]                      LES     DI,[THISSFT]		; grab SFT
 23967 000050F1 31C0                            XOR     AX,AX
 23968 000050F3 E86FCF                  	call	EcritSFT
 23969 000050F6 268705                  	xchg	AX,[ES:DI]
 23970                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 23971 000050F9 50                      	push	ax
 23972 000050FA 57                      	push	di
 23973 000050FB 06                      	push	es
 23974 000050FC 9C                              PUSHF
 23975 000050FD E85522                          call	ShareEnd                ; remove sharing
 23976 00005100 9D                              POPF
 23977 00005101 07                      	pop	es
 23978 00005102 5F                      	pop	di
 23979 00005103 268F05                          pop	word [ES:DI]	
 23980                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 23981 00005106 E864CF                  	call	LcritSFT
 23982 00005109 5B                      	pop	bx
 23983 0000510A 5E                      	pop	si
 23984 0000510B 59                      	pop	cx
 23985 0000510C 58                      	pop	ax
 23986 0000510D E89EFF                          CALL    make_save
 23987                                  
 23988                                  ; If the user failed, we do not reenter into the sharing set.
 23989                                  
 23990 00005110 72A7                            jc	short make_save_retn	; bye if error
 23991 00005112 50                      	push	ax
 23992 00005113 53                      	push	bx
 23993 00005114 56                      	push	si
 23994 00005115 9C                              PUSHF
 23995 00005116 E84122                          call	ShareEnter
 23996 00005119 9D                              POPF
 23997 0000511A 5E                      	pop	si
 23998 0000511B 5B                      	pop	bx
 23999 0000511C 58                      	pop	ax
 24000                                  
 24001                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 24002                                  
 24003                                  makeendshare_retn:
 24004 0000511D C3                              retn
 24005                                  
 24006                                  ;---------------------------------------------------------------------------
 24007                                  ;
 24008                                  ; Procedure Name : NEWENTRY
 24009                                  ;
 24010                                  ; Inputs:
 24011                                  ;       [THISSFT] set
 24012                                  ;       [THISDPB] set
 24013                                  ;       [LASTENT] current last valid entry number in directory if no free
 24014                                  ;               entries
 24015                                  ;       [VOLID] set if a volume ID was found during search
 24016                                  ;	Attrib Contains attributes for new file
 24017                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 24018                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 24019                                  ;               NC means file existed (device)
 24020                                  ;               C  means file did not exist
 24021                                  ;       AH = Device ID byte
 24022                                  ;       If FILE
 24023                                  ;           [CURBUF+2]:BX points to start of directory entry
 24024                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24025                                  ;       If device
 24026                                  ;           DS:BX points to start of "fake" directory entry
 24027                                  ;           DS:SI points to dir_first of "fake" directory entry
 24028                                  ;               (has DWORD pointer to device header)
 24029                                  ; Function:
 24030                                  ;       Make a new directory entry
 24031                                  ;       If an old one existed it is truncated first
 24032                                  ; Outputs:
 24033                                  ;       Carry set if error
 24034                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 24035                                  ;               vol ID, user FAILed to I 24
 24036                                  ;       else
 24037                                  ;               outputs of DOOPEN
 24038                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 24039                                  ;
 24040                                  ;----------------------------------------------------------------------------
 24041                                  
 24042                                  NEWENTRY:
 24043 0000511E C42E[2405]                      LES     BP,[THISDPB]
 24044 00005122 7316                            JNC	short EXISTENT	
 24045 00005124 803E[F602]00                    CMP     byte [FAILERR],0
 24046 00005129 F9                              STC
 24047 0000512A 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 24048 0000512C E833FE                          CALL    BUILDDIR        ; Try to build dir
 24049 0000512F 72EC                            jc	short makeendshare_retn	; Failed
 24050 00005131 E87FF6                          call	GETENT          ; Point at that free entry
 24051 00005134 72E7                            jc	short makeendshare_retn	; Failed
 24052 00005136 EB0E                            JMP     SHORT FREESPOT
 24053                                  
 24054                                  ERRRET3:
 24055 00005138 F9                              STC
 24056                                  newentry_retn:
 24057 00005139 C3                              retn
 24058                                  
 24059                                  EXISTENT:
 24060 0000513A 08E4                            OR      AH,AH           ; Check if file is I/O device
 24061 0000513C 7903                            JNS	short NOT_DEV1
 24062 0000513E E98400                          JMP     DOOPEN          ; If so, proceed with open
 24063                                  
 24064                                  NOT_DEV1:
 24065 00005141 E81401                          call	FREEENT		; Free cluster chain
 24066 00005144 72F3                            jc	short newentry_retn ; Failed
 24067                                  FREESPOT:
 24068                                  	;test	byte [ATTRIB],8
 24069 00005146 F606[0605]08            	test	BYTE [ATTRIB],attr_volume_id
 24070 0000514B 7407                            JZ	short NOTVOLID
 24071 0000514D 803E[1605]00                    CMP     BYTE [VOLID],0
 24072 00005152 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 24073                                  NOTVOLID:
 24074 00005154 8E06[7605]                      MOV     ES,[CURBUF+2]
 24075 00005158 89DF                            MOV     DI,BX
 24076                                  
 24077 0000515A BE[E604]                        MOV     SI,NAME1
 24078                                  
 24079 0000515D B90500                          MOV     CX,5
 24080 00005160 F3A5                            REP     MOVSW
 24081 00005162 A4                              MOVSB                   ; Move name into dir entry
 24082 00005163 A0[0605]                	MOV	AL,[ATTRIB]
 24083 00005166 AA                      	STOSB                   ; Attributes
 24084                                  
 24085                                  ;; File Tagging for Create DOS 4.00
 24086 00005167 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 24087                                  ;; File Tagging for Create DOS 4.00
 24088                                  
 24089 00005169 31C0                            XOR     AX,AX
 24090 0000516B F3AB                            REP     STOSW           ; Zero pad
 24091 0000516D E846C7                          call	DATE16
 24092 00005170 92                              XCHG    AX,DX
 24093 00005171 AB                              STOSW                   ; dir_time
 24094 00005172 92                              XCHG    AX,DX
 24095 00005173 AB                              STOSW                   ; dir_date
 24096 00005174 31C0                            XOR     AX,AX
 24097 00005176 57                              PUSH    DI              ; Correct SI input value
 24098                                  				; 	(recomputed for new buffer)
 24099 00005177 AB                              STOSW                   ; Zero dir_first and size
 24100 00005178 AB                              STOSW
 24101 00005179 AB                              STOSW
 24102                                  updnxt:
 24103 0000517A 8B36[7405]              	MOV	SI,[CURBUF]
 24104                                  
 24105                                  	; MSDOS 6.0
 24106                                  	;TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24107                                  	;			;LB. if already dirty		  ;AN000;
 24108                                          ;JNZ	short yesdirty4	;LB.  don't increment dirty count ;AN000;
 24109                                          ;call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 24110                                          
 24111                                  	;or	byte [es:si+5],40h
 24112 0000517E 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24113                                  ;yesdirty4:
 24114 00005183 C42E[2405]                      LES     BP,[THISDPB]
 24115 00005187 268A4600                	MOV	AL,[ES:BP]	; mov al,[es:bp+0] 
 24116                                          ;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 24117 0000518B 50                              PUSH    AX
 24118 0000518C 53                              PUSH    BX
 24119                                  ; If we have a file, we need to increment the open ref. count so that
 24120                                  ; we have some protection against invalid media changes if an Int 24
 24121                                  ; error occurs.
 24122                                  ; Do nothing for a device.
 24123 0000518D 06                      	push	es
 24124 0000518E 57                      	push	di
 24125 0000518F C43E[3605]                      LES     DI,[THISSFT]
 24126                                  	;test	word [es:di+5],80h
 24127 00005193 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 24128 00005199 751A                            jnz	short GotADevice
 24129 0000519B 1E                      	push	ds
 24130 0000519C 53                      	push	bx
 24131 0000519D C51E[2405]                      LDS     BX,[THISDPB]
 24132                                  	;mov	[es:di+7],bx
 24133 000051A1 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 24134 000051A5 8CDB                            MOV     BX,DS
 24135                                  	;mov	[es:di+9],bx
 24136 000051A7 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 24137 000051AB 5B                      	pop	bx
 24138 000051AC 1F                      	pop	ds ; need to use DS for segment later on
 24139 000051AD E8CAFC                  	call	DEV_OPEN_SFT    ; increment ref. count
 24140 000051B0 C606[080A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 24141                                  GotADevice:
 24142 000051B5 5F                      	pop	di
 24143 000051B6 07                      	pop	es
 24144                                  
 24145 000051B7 E8780D                          call	FLUSHBUF
 24146 000051BA E8DA00                          Call    CHECK_VIRT_OPEN ; decrement ref. count                          ;AN000;
 24147 000051BD 5B                              POP     BX
 24148 000051BE 58                              POP     AX
 24149 000051BF 5E                              POP     SI              ; Get SI input back
 24150 000051C0 88C4                            MOV     AH,AL           ; Get I/O driver number back
 24151 000051C2 7301                            jnc	short DOOPEN    ; Failed
 24152 000051C4 C3                      	retn
 24153                                  
 24154                                  ;NOTE FALL THROUGH
 24155                                  
 24156                                  ; Inputs:
 24157                                  ;       [THISDPB] points to DPB if file
 24158                                  ;       [THISSFT] points to SFT being used
 24159                                  ;       AH = Device ID byte
 24160                                  ;       If FILE
 24161                                  ;           [CURBUF+2]:BX points to start of directory entry
 24162                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24163                                  ;       If device
 24164                                  ;           DS:BX points to start of "fake" directory entry
 24165                                  ;           DS:SI points to dir_first of "fake" directory entry
 24166                                  ;               (has DWORD pointer to device header)
 24167                                  ; Function:
 24168                                  ;       Fill in SFT from dir entry
 24169                                  ; Outputs:
 24170                                  ;       CARRY CLEAR
 24171                                  ;       sf_ref_count and sf_mode fields not altered
 24172                                  ;       sf_flags high byte = 0
 24173                                  ;       sf_flags low byte = AH except
 24174                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 24175                                  ;       sf_attr sf_date sf_time sf_name set from entry
 24176                                  ;       sf_position = 0
 24177                                  ;       If device
 24178                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 24179                                  ;           sf_size = 0
 24180                                  ;       If file
 24181                                  ;           sf_firclus sf_size set from entry
 24182                                  ;           sf_devptr = [THISDPB]
 24183                                  ;           sf_cluspos = 0
 24184                                  ;           sf_lstclus = sf_firclus
 24185                                  ;           sf_dirsec sf_dirpos set
 24186                                  ; DS,SI,BX preserved, others destroyed
 24187                                  
 24188                                  	;entry	DOOPEN
 24189                                  DOOPEN:
 24190                                  ;	Generate and store attribute
 24191                                  
 24192 000051C5 88E6                            MOV     DH,AH           ; AH to different place
 24193 000051C7 C43E[3605]                      LES     DI,[THISSFT]
 24194                                  	;add	di,4
 24195 000051CB 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 24196 000051CE 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 24197                                                                  ;   attribute of 0 (for R/O testing etc).
 24198 000051D0 08F6                            OR      DH,DH           ; See if our assumption good.
 24199 000051D2 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 24200 000051D4 8E1E[7605]                      MOV     DS,[CURBUF+2]
 24201                                  	;mov	al,[BX+0Bh]
 24202 000051D8 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 24203                                  				; If file, get attrib from dir entry
 24204                                  DEV_SFT1:
 24205 000051DB AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 24206                                  
 24207                                  ;	Generate and store flags word
 24208                                  
 24209 000051DC 31C0                            XOR     AX,AX
 24210 000051DE 88F0                            MOV     AL,DH
 24211                                  	;or	al,40h
 24212 000051E0 0C40                            OR      AL,devid_file_clean
 24213 000051E2 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 24214                                  
 24215                                  ;	Generate and store device pointer
 24216                                  
 24217 000051E3 1E                              PUSH    DS
 24218                                  	;lds	ax,[bx+1Ah]
 24219 000051E4 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 24220 000051E7 08F6                            OR      DH,DH
 24221 000051E9 7805                            JS	short DEV_SFT2
 24222                                  
 24223                                  ;hkn; SS override
 24224 000051EB 36C506[2405]                    LDS     AX,[SS:THISDPB]	; Was file
 24225                                  DEV_SFT2:
 24226 000051F0 AB                              STOSW 			; store offset
 24227 000051F1 8CD8                            MOV     AX,DS
 24228 000051F3 1F                              POP     DS
 24229 000051F4 AB                      	STOSW			; store segment
 24230                                  				; ES:DI -> sf_firclus
 24231                                  
 24232                                  ;	Generate pointer to, generate and store first cluster 
 24233                                  ;	(irrelevant for devices)
 24234                                  
 24235 000051F5 56                              PUSH    SI              ; Save pointer to dir_first
 24236 000051F6 A5                              MOVSW                   ; dir_first -> sf_firclus
 24237                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 24238                                  
 24239                                  ;	Copy time/date of last modification
 24240                                  
 24241                                  	;sub	si,6
 24242 000051F7 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 24243                                  				; DS:SI->dir_time
 24244 000051FA A5                              MOVSW                   ; dir_time -> sf_time
 24245                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 24246 000051FB A5                              MOVSW                   ; dir_date -> sf_date
 24247                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 24248                                  
 24249                                  ;	Generate and store file size (0 for devices)
 24250                                  
 24251 000051FC AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 24252 000051FD AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 24253 000051FE 89C1                            MOV     CX,AX           ; dir_size_l in CX
 24254 00005200 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 24255 00005201 08F6                            OR      DH,DH
 24256 00005203 7904                            JNS	short FILE_SFT1
 24257 00005205 31C0                            XOR     AX,AX
 24258 00005207 89C1                            MOV     CX,AX           ; Devices are open ended
 24259                                  FILE_SFT1:
 24260 00005209 91                              XCHG    AX,CX
 24261 0000520A AB                              STOSW                   ; Low word of sf_size
 24262 0000520B 91                              XCHG    AX,CX
 24263 0000520C AB                              STOSW                   ; High word of sf_size
 24264                                                                  ; ES:DI -> sf_position
 24265                                  ; Initialize position to 0
 24266                                  
 24267 0000520D 31C0                            XOR     AX,AX
 24268 0000520F AB                              STOSW
 24269 00005210 AB                              STOSW                   ; sf_position
 24270                                                                  ; ES:DI -> sf_cluspos
 24271                                  
 24272                                  ; Generate cluster optimizations for files
 24273                                  
 24274 00005211 08F6                            OR      DH,DH
 24275 00005213 7834                            JS	short DEV_SFT3
 24276 00005215 AB                              STOSW                   ; sf_cluspos
 24277                                  	;mov	ax,[bx+1Ah]
 24278 00005216 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 24279                                  	; MSDOS 3.3
 24280 00005219 AB                      	STOSW                   ; sf_lstclus
 24281                                  	; MSDOS 6.0
 24282                                          ;PUSH	DI              ;AN004; save dirsec offset
 24283                                          ;SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 24284                                          ;MOV	[ES:DI.sf_lstclus],AX	;AN004; save it
 24285                                          ;POP	DI              ;AN004; restore dirsec offset
 24286                                  
 24287                                  ; DOS 3.3  FastOpen  6/13/86
 24288                                  
 24289 0000521A 1E                      	PUSH	DS
 24290                                  
 24291                                  ;hkn; SS is DOSDATA
 24292 0000521B 16                      	push	ss
 24293 0000521C 1F                      	pop	ds
 24294                                  	;test	byte [FastOpenFlg],4
 24295 0000521D F606[6E0F]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 24296 00005222 740D                    	JZ	short Not_FastOpen
 24297                                  
 24298                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 24299 00005224 BE[490F]                        MOV     SI,FastOpen_Ext_Info
 24300                                  
 24301 00005227 8B4401                          MOV     AX,[SI+FEI.dirsec]
 24302 0000522A AB                              STOSW                   ; sf_dirsec
 24303                                  	; MSDOS 6.0
 24304                                          ;MOV	AX,[SI+FEI.dirsec+2]
 24305                                  				;;; changed for >32mb
 24306                                          ;STOSW                   ; sf_dirsec
 24307                                  	; 19/08//2018
 24308 0000522B 8A04                    	mov	al,[SI]
 24309                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 24310 0000522D AA                              STOSB                   ; sf_dirpos
 24311 0000522E 1F                              POP	DS
 24312 0000522F EB16                            JMP     short Next_Name
 24313                                  
 24314                                  ; DOS 3.3  FastOpen  6/13/86
 24315                                  
 24316                                  Not_FastOpen:
 24317 00005231 1F                              POP     DS		; normal path
 24318                                  
 24319                                  ;hkn; SS override
 24320 00005232 368B36[7405]                    MOV     SI,[SS:CURBUF]	; DS:SI->buffer header
 24321                                  
 24322 00005237 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 24323 0000523A AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24324                                          ; MSDOS 6.0
 24325                                  	;MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 24326                                          ;STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24327                                          
 24328 0000523B 89D8                    	MOV     AX,BX
 24329                                  	;add	si,16
 24330 0000523D 83C610                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 24331 00005240 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 24332                                          ;mov	cl,32
 24333 00005242 B120                    	MOV     CL,dir_entry.size
 24334 00005244 F6F1                            DIV     CL
 24335 00005246 AA                              STOSB                   ; sf_dirpos
 24336                                  
 24337                                  Next_Name:
 24338 00005247 EB03                            JMP     SHORT FILE_SFT2
 24339                                  
 24340                                  DEV_SFT3:
 24341                                  	;add	di,7
 24342 00005249 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 24343                                  FILE_SFT2:
 24344                                  ;
 24345                                  ; Copy in the object's name
 24346                                  ;
 24347 0000524C 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 24348 0000524E B90B00                          MOV     CX,11
 24349 00005251 F3A4                            REP     MOVSB           ; sf_name
 24350 00005253 5E                              POP     SI              ; recover DS:SI -> dir_first
 24351                                  
 24352                                  ;hkn; SS is DOSDATA
 24353 00005254 16                              push	ss
 24354 00005255 1F                      	pop	ds
 24355 00005256 F8                              CLC
 24356 00005257 C3                              retn
 24357                                  
 24358                                  ;---------------------------------------------------------------------------
 24359                                  ;
 24360                                  ; Procedure Name : FREEENT
 24361                                  ;
 24362                                  ; Inputs:
 24363                                  ;       ES:BP -> DPB
 24364                                  ;       [CURBUF] Set
 24365                                  ;       [CURBUF+2]:BX points to directory entry
 24366                                  ;       [CURBUF+2]:SI points to above dir_first
 24367                                  ; Function:
 24368                                  ;       Free the cluster chain for the entry if present
 24369                                  ; Outputs:
 24370                                  ;       Carry set if error (currently user FAILed to I 24)
 24371                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 24372                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 24373                                  ;---------------------------------------------------------------------------
 24374                                  
 24375                                  FREEENT:
 24376 00005258 1E                              PUSH    DS
 24377 00005259 C53E[7405]                      LDS     DI,[CURBUF]
 24378 0000525D 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 24379                                  	; 19/05/2019
 24380                                  	; MSDOS 6.0
 24381                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 24382                                  ;hkn; SS override
 24383                                          ;MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 24384 0000525F 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 24385 00005262 1F                              POP     DS
 24386 00005263 83F902                  	CMP	CX,2
 24387 00005266 722D                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 24388                                  	;cmp	cx,[es:bp+0Dh]
 24389 00005268 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 24390 0000526C 7727                            JA	short RET1	; Treat like zero length file (firclus mucked)
 24391 0000526E 29FB                            SUB     BX,DI
 24392 00005270 53                              PUSH    BX              ; Save offset
 24393                                  	;PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24394 00005271 52                              PUSH    DX              ; Save sector number
 24395 00005272 89CB                            MOV     BX,CX
 24396 00005274 E87702                          call	RELEASE         ; Free any data allocated
 24397 00005277 5A                              POP     DX
 24398                                          ;POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24399 00005278 7302                            JNC	short GET_BUF_BACK
 24400 0000527A 5B                              POP     BX
 24401                                  freeent_retn:
 24402 0000527B C3                              retn			; Screw up
 24403                                  
 24404                                  GET_BUF_BACK:
 24405                                  	;mov	byte [ALLOWED],18h
 24406 0000527C C606[F702]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24407 00005281 30C0                            XOR     AL,AL
 24408 00005283 E8040C                  	call	GETBUFFR        ; Get sector back
 24409 00005286 5B                              POP     BX              ; Get offset back
 24410 00005287 72F2                            jc	short freeent_retn
 24411 00005289 E8AAEE                  	call	SET_BUF_AS_DIR
 24412 0000528C 031E[7405]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 24413 00005290 89DE                            MOV     SI,BX
 24414                                  	;add	si,1Ah
 24415 00005292 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 24416                                  RET1:
 24417 00005295 F8                              CLC
 24418 00005296 C3                              retn
 24419                                  
 24420                                  ;---------------------------------------------------------------------------
 24421                                  ;
 24422                                  ; Procedure Name : CHECK_VIRT_OPEN
 24423                                  ;
 24424                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 24425                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 24426                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 24427                                  ; flag [VIRTUAL_OPEN].
 24428                                  ; No registers affected (including flags).
 24429                                  ; On input, [THISSFT] points to current SFT.
 24430                                  ;
 24431                                  ;---------------------------------------------------------------------------
 24432                                  
 24433                                  CHECK_VIRT_OPEN:
 24434 00005297 50                      	        PUSH    AX
 24435 00005298 9F                              lahf                    ; preserve flags
 24436 00005299 803E[080A]00                    CMP     byte [VIRTUAL_OPEN],0
 24437 0000529E 7410                            JZ	short ALL_CLOSED
 24438 000052A0 C606[080A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 24439 000052A5 06                      	push	es
 24440 000052A6 57                      	push	di
 24441 000052A7 C43E[3605]                      LES     DI,[THISSFT]
 24442 000052AB E8D3FB                          call	DEV_CLOSE_SFT
 24443 000052AE 5F                      	pop	di
 24444 000052AF 07                      	pop	es
 24445                                  
 24446                                  ALL_CLOSED:
 24447 000052B0 9E                              sahf                    ; restore flags
 24448 000052B1 58                              POP     AX
 24449 000052B2 C3                              retn
 24450                                  
 24451                                  ;============================================================================
 24452                                  ; ROM.ASM, MSDOS 6.0, 1991
 24453                                  ;============================================================================
 24454                                  ; 29/07/2018 - Retro DOS v3.0
 24455                                  
 24456                                  ;	TITLE	ROM - Miscellaneous routines
 24457                                  ;	NAME	ROM
 24458                                  
 24459                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 24460                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 24461                                  ;
 24462                                  ;	SKPCLP
 24463                                  ;	FNDCLUS
 24464                                  ;	BUFSEC
 24465                                  ;	BUFRD
 24466                                  ;	BUFWRT
 24467                                  ;	NEXTSEC
 24468                                  ;	OPTIMIZE
 24469                                  ;	FIGREC
 24470                                  ;	ALLOCATE
 24471                                  ;	RESTFATBYT
 24472                                  ;	RELEASE
 24473                                  ;	RELBLKS
 24474                                  ;	GETEOF
 24475                                  ;
 24476                                  ;	Modification history:
 24477                                  ;
 24478                                  ;		Created: ARR 30 March 1983
 24479                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 24480                                  
 24481                                  ;Break   <FNDCLUS -- Skip over allocation units>
 24482                                  ;--------------------------------------------------------------------------
 24483                                  ;
 24484                                  ; Procedure Name : FNDCLUS
 24485                                  ;
 24486                                  ; Inputs:
 24487                                  ;       CX = No. of clusters to skip
 24488                                  ;       ES:BP = Base of drive parameters
 24489                                  ;       [THISSFT] point to SFT
 24490                                  ; Outputs:
 24491                                  ;       BX = Last cluster skipped to
 24492                                  ;       CX = No. of clusters remaining (0 unless EOF)
 24493                                  ;       DX = Position of last cluster
 24494                                  ;       Carry set if error (currently user FAILed to I 24)
 24495                                  ; DI destroyed. No other registers affected.
 24496                                  ;--------------------------------------------------------------------------
 24497                                  
 24498                                  FNDCLUS:
 24499 000052B3 06                      	PUSH	ES
 24500 000052B4 C43E[3605]                      LES     DI,[THISSFT]		; setup addressability to SFT
 24501                                  	;mov	bx,[es:di+1Bh]
 24502 000052B8 268B5D1B                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 24503                                  	;mov	dx,[es:di+19h]
 24504 000052BC 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 24505 000052C0 09DB                    	OR	BX,BX
 24506 000052C2 7424                    	JZ	short NOCLUS
 24507                                  
 24508 000052C4 29D1                            SUB     CX,DX
 24509 000052C6 7308                            JNB	short FINDIT
 24510                                  
 24511 000052C8 01D1                            ADD     CX,DX
 24512 000052CA 31D2                            XOR     DX,DX
 24513                                  	;mov	bx,[es:di+0Bh]
 24514 000052CC 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 24515                                  FINDIT:
 24516 000052D0 07                              POP	ES
 24517 000052D1 E313                    	JCXZ	RET9
 24518                                  
 24519                                  	;entry	SKPCLP
 24520                                  SKPCLP:
 24521 000052D3 E87C07                  	call	UNPACK
 24522 000052D6 7214                            jc	short fndclus_retn	; retc
 24523                                  	
 24524                                  	; 09/09/2018
 24525                                  
 24526                                  	; MSDOS 6.0
 24527                                  	;xchg	bx,di
 24528                                  	;call	IsEOF
 24529                                  	;pop	bx
 24530                                  	;xchg	bx,di
 24531                                  	;jae	short RET9
 24532                                  
 24533                                  	; MSDOS 3.3
 24534 000052D8 53                      	push	bx
 24535 000052D9 89FB                    	mov	bx,di
 24536 000052DB E85D07                  	call	IsEOF
 24537 000052DE 5B                      	pop	bx	
 24538 000052DF 7305                    	jae	short RET9
 24539                                  
 24540 000052E1 87DF                            XCHG    BX,DI
 24541 000052E3 42                              INC     DX
 24542 000052E4 E2ED                    	LOOP	SKPCLP			; RMFS
 24543                                  RET9:	
 24544 000052E6 F8                      	CLC
 24545 000052E7 C3                              retn
 24546                                  NOCLUS:
 24547 000052E8 07                              POP	ES
 24548 000052E9 41                              INC	CX
 24549 000052EA 4A                              DEC	DX
 24550 000052EB F8                              CLC
 24551                                  
 24552                                  fndclus_retn:
 24553 000052EC C3                              retn
 24554                                  
 24555                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 24556                                  ;--------------------------------------------------------------------------
 24557                                  ;
 24558                                  ; Procedure Name : BUFSEC
 24559                                  ;
 24560                                  ; Inputs:
 24561                                  ;       AH = priority of buffer
 24562                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 24563                                  ;       ES:BP = Base of drive parameters
 24564                                  ;       [CLUSNUM] = Physical cluster number
 24565                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 24566                                  ;       [BYTCNT1] = Size of transfer
 24567                                  ; Function:
 24568                                  ;       Insure specified sector is in buffer, flushing buffer before
 24569                                  ;       read if necessary.
 24570                                  ; Outputs:
 24571                                  ;       ES:DI = Pointer to buffer
 24572                                  ;       SI = Pointer to transfer address
 24573                                  ;       CX = Number of bytes
 24574                                  ;       [NEXTADD] updated
 24575                                  ;       [TRANS] set to indicate a transfer will occur
 24576                                  ;       Carry set if error (user FAILed to I 24)
 24577                                  ;--------------------------------------------------------------------------
 24578                                  
 24579                                  BUFSEC:
 24580 000052ED 8B16[5405]                      MOV     DX,[CLUSNUM]
 24581 000052F1 8A1E[0E05]                      MOV     BL,[SECCLUSPOS]
 24582                                  	;mov	byte [ALLOWED],38h
 24583 000052F5 C606[F702]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 24584 000052FA E83901                          CALL    FIGREC
 24585 000052FD E88A0B                  	call	GETBUFFR
 24586 00005300 72EA                            jc	short fndclus_retn
 24587                                  
 24588 00005302 C606[0F05]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 24589 00005307 8B36[5005]                      MOV     SI,[NEXTADD]
 24590 0000530B 89F7                            MOV     DI,SI
 24591 0000530D 8B0E[6405]                      MOV     CX,[BYTCNT1]
 24592 00005311 01CF                            ADD     DI,CX
 24593 00005313 893E[5005]                      MOV     [NEXTADD],DI
 24594 00005317 C43E[7405]                      LES     DI,[CURBUF]
 24595                                  	;or	byte [es:di+5],8
 24596 0000531B 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 24597                                  	;lea	di,[di+16]
 24598 00005320 8D7D10                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 24599 00005323 033E[5E05]                      ADD     DI,[BYTSECPOS]
 24600 00005327 F8                              CLC
 24601 00005328 C3                              retn
 24602                                  
 24603                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 24604                                  
 24605                                  ;---------------------------------------------------------------------------
 24606                                  ;
 24607                                  ; Procedure Name : BUFRD
 24608                                  ;
 24609                                  ; Do a partial sector read via one of the system buffers
 24610                                  ; ES:BP Points to DPB
 24611                                  ; Carry set if error (currently user FAILed to I 24)
 24612                                  ;
 24613                                  ; DS - set to DOSDATA
 24614                                  ;
 24615                                  ;----------------------------------------------------------------------------
 24616                                  
 24617                                  BUFRD:
 24618 00005329 06                              PUSH	ES
 24619 0000532A 31C0                            xor	ax, ax			; pre-read sector
 24620 0000532C E8BEFF                          CALL    BUFSEC
 24621 0000532F 7303                            JNC	short BUF_OK
 24622                                  
 24623                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 24624 00005331 07                              POP	ES
 24625 00005332 EB29                            JMP     SHORT RBUFPLACED
 24626                                  
 24627                                  BUF_OK:
 24628 00005334 8CC3                            MOV     BX,ES
 24629 00005336 8E06[DC02]                      MOV     ES,[DMAADD+2]
 24630 0000533A 8EDB                            MOV     DS,BX
 24631 0000533C 87FE                    	XCHG    DI,SI
 24632 0000533E D1E9                            SHR     CX,1
 24633                                  ;M039
 24634                                  	; MSDOS 3.3
 24635 00005340 7301                    	JNC	short EVENRD
 24636 00005342 A4                      	MOVSB
 24637                                  EVENRD:
 24638 00005343 F3A5                    	REP     MOVSW
 24639                                  
 24640                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24641                                  ;       DS:SI-> Source within Buffer.
 24642                                  ;       ES:DI-> Destination within Transfer memory block.
 24643                                  
 24644                                  	; MSDOS 6.0
 24645                                  ;	rep	movsw			;Copy Buffer to Transfer memory.
 24646                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24647                                  ;	rep	movsb                   ;Copy last byte.
 24648                                  ;M039
 24649                                  
 24650 00005345 07                              POP	ES
 24651                                  ;hkn; SS override
 24652 00005346 36C53E[7405]                    LDS     DI,[SS:CURBUF]
 24653                                  	;lea	bx,[di+16]
 24654 0000534B 8D5D10                  	LEA     BX,[DI+BUFINSIZ]
 24655 0000534E 29DE                            SUB     SI,BX                   ; Position in buffer
 24656 00005350 E88C0A                          call	PLACEBUF
 24657                                  	;cmp	si,[es:bp+2]
 24658 00005353 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 24659 00005357 7203                            JB	short RBUFPLACEDC	; No, leave buf where it is
 24660                                  
 24661                                  ;M039
 24662                                  	; MSDOS 3.3
 24663 00005359 E8E50A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24664                                                                          ;  even though it is MRU.
 24665                                          ; MSDOS 6.0
 24666                                  	;MOV	[BufferQueue],DI	; Make it prime candidate for
 24667                                  ;M039					; chucking even though it is MRU.
 24668                                  
 24669                                  RBUFPLACEDC:
 24670 0000535C F8                              CLC
 24671                                  RBUFPLACED:
 24672 0000535D 16                      	push	ss
 24673 0000535E 1F                      	pop	ds
 24674 0000535F C3                              retn
 24675                                  
 24676                                  ;----------------------------------------------------------------------------
 24677                                  ;
 24678                                  ; Procedure : BUFWRT
 24679                                  ;
 24680                                  ; Do a partial sector write via one of the system buffers
 24681                                  ; ES:BP Points to DPB
 24682                                  ; Carry set if error (currently user FAILed to I 24)
 24683                                  ;
 24684                                  ; DS - set to DOSDATA
 24685                                  ;
 24686                                  ;----------------------------------------------------------------------------
 24687                                  
 24688                                  BUFWRT:
 24689 00005360 A1[5A05]                        MOV     AX,[SECPOS]
 24690                                          ; MSDOS 6.0
 24691                                  	;ADD	AX,1            	; Set for next sector
 24692                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 24693                                          ;ADC	[SECPOS+2],0		;F.C. >32mb	;AN000;
 24694                                          ;MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 24695                                          ;CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 24696                                          ;MOV	AL,1			;F.C. >32mb	;AN000;
 24697                                          ;JA	short NOREAD		;F.C. >32mb	;AN000;
 24698                                          ;JB	short doread		;F.C. >32mb	;AN000;
 24699                                          ;MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 24700                                  	; MSDOS 3.3
 24701 00005363 40                      	INC	AX
 24702 00005364 A3[5A05]                	MOV	[SECPOS],AX ; 09/09/2018
 24703                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24704 00005367 3B06[5C05]                      CMP     AX,[VALSEC]		; Has sector been written before?
 24705 0000536B B001                            MOV     AL,1
 24706 0000536D 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 24707                                  ;doread:
 24708 0000536F 30C0                            XOR     AL,AL
 24709                                  NOREAD:
 24710 00005371 06                              PUSH	ES
 24711 00005372 E878FF                          CALL    BUFSEC
 24712 00005375 72BA                    	JC	short BUF_IO_FAIL
 24713 00005377 8E1E[DC02]                      MOV     DS,[DMAADD+2]
 24714 0000537B D1E9                            SHR     CX,1
 24715                                  
 24716                                  ;M039
 24717                                  	; MSDOS 3.3
 24718 0000537D 7301                    	JNC     short EVENWRT ; 09/09/2018
 24719 0000537F A4                      	MOVSB
 24720                                  EVENWRT:
 24721 00005380 F3A5                    	REP     MOVSW
 24722                                  
 24723                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24724                                  ;       DS:SI-> Source within Transfer memory block.
 24725                                  ;       ES:DI-> Destination within Buffer.
 24726                                  
 24727                                  	; MSDOS 6.0
 24728                                  	;rep	movsw			;Copy Transfer memory to Buffer.
 24729                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24730                                  	;rep	movsb                   ;Copy last byte.
 24731                                  ;M039
 24732 00005382 07                              POP	ES
 24733                                  
 24734                                  ;hkn; SS override
 24735 00005383 36C51E[7405]                    LDS     BX,[SS:CURBUF]
 24736                                  
 24737                                  	; MSDOS 6.0
 24738                                          ;TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24739                                  	;				;LB. if already dirty		  ;AN000;
 24740                                          ;JNZ	short yesdirty5		;LB.  don't increment dirty count ;AN000;
 24741                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 24742                                  	
 24743                                  	;or	byte [bx+5],40h
 24744 00005388 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24745                                  ;yesdirty5:
 24746                                  	;lea	si,[bx+16]
 24747 0000538C 8D7710                          LEA     SI,[BX+BUFINSIZ]
 24748 0000538F 29F7                            SUB     DI,SI                   ; Position in buffer
 24749                                  ;M039
 24750                                  	; MSDOS 3.3
 24751 00005391 89FE                    	MOV     SI,DI
 24752 00005393 89DF                    	MOV     DI,BX
 24753 00005395 E8470A                  	call	PLACEBUF
 24754                                  	;cmp	si,[es:bp+2]
 24755 00005398 263B7602                	CMP     SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24756 0000539C 7203                    	JB	short WBUFPLACED	; No, leave buf where it is
 24757 0000539E E8A00A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24758                                                                          ;  even though it is MRU.
 24759                                  	; MSDOS 6.0
 24760                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24761                                          ;JB	short WBUFPLACED	; No, leave buf where it is
 24762                                          ;MOV	[BufferQueue],BX	; Make it prime candidate for
 24763                                  					; chucking even though it is MRU.
 24764                                  ;M039
 24765                                  
 24766                                  WBUFPLACED:
 24767 000053A1 F8                              CLC
 24768 000053A2 16                      	push	ss
 24769 000053A3 1F                      	pop	ds
 24770 000053A4 C3                              retn
 24771                                  
 24772                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 24773                                  ;---------------------------------------------------------------------------
 24774                                  ;
 24775                                  ; Procedure Name : NEXTSEC
 24776                                  ;
 24777                                  ; Compute the next sector to read or write
 24778                                  ; ES:BP Points to DPB
 24779                                  ;
 24780                                  ;---------------------------------------------------------------------------
 24781                                  
 24782                                  NEXTSEC:
 24783 000053A5 F606[0F05]FF            	test	byte [TRANS],0FFh ; -1 
 24784 000053AA 7426                            JZ	short CLRET
 24785                                  
 24786 000053AC A0[0E05]                        MOV     AL,[SECCLUSPOS]
 24787 000053AF FEC0                            INC     AL
 24788                                  	;cmp	al,[es:bp+4]
 24789 000053B1 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 24790 000053B5 7618                            JBE	short SAVPOS
 24791                                  
 24792 000053B7 8B1E[5405]                      MOV     BX,[CLUSNUM]
 24793 000053BB E87D06                          call	IsEOF
 24794 000053BE 7314                            JAE	short NONEXT
 24795                                  
 24796 000053C0 E88F06                          call	UNPACK
 24797 000053C3 720F                            JC	short NONEXT
 24798                                  clusgot:
 24799 000053C5 893E[5405]                      MOV     [CLUSNUM],DI
 24800 000053C9 FF06[5205]                      INC     word [LASTPOS]
 24801 000053CD B000                            MOV     AL,0
 24802                                  SAVPOS:
 24803 000053CF A2[0E05]                        MOV     [SECCLUSPOS],AL
 24804                                  CLRET:
 24805 000053D2 F8                              CLC
 24806 000053D3 C3                              retn
 24807                                  NONEXT:
 24808 000053D4 F9                              STC
 24809 000053D5 C3                              retn
 24810                                  
 24811                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 24812                                  ;----------------------------------------------------------------------------
 24813                                  ;
 24814                                  ; Procedure Name : OPTIMIZE
 24815                                  ;
 24816                                  ; Inputs:
 24817                                  ;       BX = Physical cluster
 24818                                  ;       CX = No. of records
 24819                                  ;       DL = sector within cluster
 24820                                  ;       ES:BP = Base of drives parameters
 24821                                  ;       [NEXTADD] = transfer address
 24822                                  ; Outputs:
 24823                                  ;       AX = No. of records remaining
 24824                                  ;       BX = Transfer address
 24825                                  ;       CX = No. or records to be transferred
 24826                                  ;       DX = Physical sector address            (LOW)
 24827                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 24828                                  ;       DI = Next cluster
 24829                                  ;       [CLUSNUM] = Last cluster accessed
 24830                                  ;       [NEXTADD] updated
 24831                                  ;       Carry set if error (currently user FAILed to I 24)
 24832                                  ; ES:BP unchanged. Note that segment of transfer not set.
 24833                                  ;
 24834                                  ;---------------------------------------------------------------------------
 24835                                  
 24836                                  OPTIMIZE:
 24837 000053D6 52                      	PUSH    DX
 24838 000053D7 53                              PUSH    BX
 24839                                  	;mov	al,[es:bp+4]
 24840 000053D8 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 24841 000053DC FEC0                            INC     AL              ; Number of sectors per cluster
 24842 000053DE 88C4                            MOV     AH,AL
 24843 000053E0 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 24844 000053E2 89CA                            MOV     DX,CX
 24845 000053E4 B90000                          MOV     CX,0
 24846                                  OPTCLUS:
 24847                                  ; AL has number of sectors available in current cluster
 24848                                  ; AH has number of sectors available in next cluster
 24849                                  ; BX has current physical cluster
 24850                                  ; CX has number of sequential sectors found so far
 24851                                  ; DX has number of sectors left to transfer
 24852                                  ; ES:BP Points to DPB
 24853                                  ; ES:SI has FAT pointer
 24854                                  
 24855                                  do_norm3:
 24856 000053E7 E86806                          call	UNPACK
 24857 000053EA 7237                            JC	short OP_ERR
 24858                                  clusgot2:
 24859 000053EC 00C1                    	ADD	CL,AL
 24860 000053EE 80D500                          ADC     CH,0
 24861 000053F1 39D1                            CMP     CX,DX
 24862 000053F3 7333                            JAE	short BLKDON
 24863 000053F5 88E0                            MOV     AL,AH
 24864 000053F7 43                              INC     BX
 24865 000053F8 39DF                            CMP     DI,BX
 24866 000053FA 74EB                            JZ	short OPTCLUS
 24867 000053FC 4B                              DEC     BX
 24868                                  FINCLUS:
 24869 000053FD 891E[5405]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 24870 00005401 29CA                            SUB     DX,CX           ; Number of sectors still needed
 24871 00005403 52                              PUSH    DX
 24872 00005404 89C8                            MOV     AX,CX
 24873                                  	;mul	word[ES:BP+2]
 24874 00005406 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 24875                                  				; Number of sectors times sector size
 24876 0000540A 8B36[5005]                      MOV     SI,[NEXTADD]
 24877 0000540E 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 24878 00005410 A3[5005]                        MOV     [NEXTADD],AX
 24879 00005413 58                              POP     AX              ; Number of sectors still needed
 24880 00005414 5A                              POP     DX              ; Starting cluster
 24881 00005415 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 24882 00005417 011E[5205]                      ADD     [LASTPOS],BX
 24883 0000541B 5B                              POP     BX              ; BL = sector postion within cluster
 24884 0000541C E81700                  	call	FIGREC
 24885 0000541F 89F3                            MOV     BX,SI
 24886 00005421 F8                      	CLC
 24887 00005422 C3                              retn
 24888                                  
 24889                                  OP_ERR:
 24890 00005423 83C404                          ADD     SP,4
 24891 00005426 F9                      	STC
 24892 00005427 C3                              retn
 24893                                  
 24894                                  BLKDON:
 24895 00005428 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 24896 0000542A 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 24897 0000542C FECC                            DEC     AH              ; Adjust to mean position within cluster
 24898 0000542E 8826[0E05]                      MOV     [SECCLUSPOS],AH
 24899 00005432 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 24900 00005434 EBC7                            JMP     SHORT FINCLUS
 24901                                  
 24902                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 24903                                  ;---------------------------------------------------------------------------
 24904                                  ;
 24905                                  ; Procedure Name : FIGREC
 24906                                  ;
 24907                                  ; Inputs:
 24908                                  ;       DX = Physical cluster number
 24909                                  ;       BL = Sector position within cluster
 24910                                  ;       ES:BP = Base of drive parameters
 24911                                  ; Outputs:
 24912                                  ;       DX = physical sector number           (LOW)
 24913                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 24914                                  ; No other registers affected.
 24915                                  ;
 24916                                  ;---------------------------------------------------------------------------
 24917                                  
 24918                                  FIGREC:
 24919 00005436 51                              PUSH    CX
 24920                                  	;mov	cl,[es:bp+5]
 24921 00005437 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 24922 0000543B 4A                              DEC     DX
 24923 0000543C 4A                              DEC     DX
 24924                                  
 24925                                  ;hkn; SS override HIGH_SECTOR
 24926                                  	; MSDOS 6.0
 24927                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 24928                                  	;OR	CL,CL				;F.C. >32mb
 24929                                  	;JZ	short noshift			;F.C. >32mb
 24930                                  	;XOR	CH,CH 				;F.C. >32mb
 24931                                  ;rotleft:					;F.C. >32mb
 24932                                  	;CLC					;F.C. >32mb
 24933                                  	;RCL	DX,1				;F.C. >32mb
 24934                                  	;RCL	word [HIGH_SECTOR],1		;F.C. >32mb
 24935                                  	;LOOP	rotleft				;F.C. >32mb
 24936                                  ;noshift:
 24937                                  
 24938                                  	; MSDOS 3.3
 24939 0000543D D3E2                    	SHL     DX,CL
 24940                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24941 0000543F 08DA                            OR      DL,BL
 24942                                  	;add	dx,[es:bp+0Bh]
 24943 00005441 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 24944                                  	; MSDOS 6.0
 24945                                          ;ADC	word [HIGH_SECTOR],0		;F.C. >32mb
 24946                                  	; MSDOS 3.3 (& MSDOS 6.0)        
 24947 00005445 59                      	POP     CX
 24948                                  figrec_retn:
 24949 00005446 C3                              retn
 24950                                  
 24951                                  ; 30/07/2018 - Retro DOS v3.0
 24952                                  ; IBMDOS.COM (MSDOS3.3, 1987) - Offset 
 24953                                  
 24954                                  ;Break   <ALLOCATE -- Assign disk space>
 24955                                  ;---------------------------------------------------------------------------
 24956                                  ;
 24957                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 24958                                  ;
 24959                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 24960                                  ;   FAT-chained onto the end of the existing file.
 24961                                  ;
 24962                                  ;   The DPB contains the cluster # of the last free cluster allocated
 24963                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 24964                                  ;   numbered clusters, looking for the necessary free blocks.
 24965                                  ;
 24966                                  ;   Once again, fancy terminology gets in the way of corrct coding. When
 24967                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 24968                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 24969                                  ;
 24970                                  ;       If we get to the end of the disk without satisfaction:
 24971                                  ;
 24972                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 24973                                  ;               return (insufficient_disk_space)
 24974                                  ;           ELSE
 24975                                  ;               dpb_next_free = 2; start scan over from the beginning.
 24976                                  ;
 24977                                  ;   Note that there is no multitasking interlock. There is no race when
 24978                                  ;   examining the entrys in an in-core FAT block since there will be no
 24979                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 24980                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 24981                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 24982                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 24983                                  ;   satisfied. We can't allow another activation to think this cluster is
 24984                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 24985                                  ;   allocated.
 24986                                  ;
 24987                                  ;   Note that when we run out of space this algorithem will scan from
 24988                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 24989                                  ;   redundantly scanning the later part of the disk. This only happens when
 24990                                  ;   we run out of space, so sue me.
 24991                                  ;
 24992                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 24993                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 24994                                  ;                                                                          ;
 24995                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 24996                                  ;   explanation:
 24997                                  ;
 24998                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 24999                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 25000                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 25001                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 25002                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 25003                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 25004                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 25005                                  ;   the
 25006                                  ;           LOOP   findfre         ; alloc more if needed
 25007                                  ;   instruction when the first cluster is allocated to the nul file. The
 25008                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 25009                                  ;
 25010                                  ;   This method is obviously useless (because it is non-reentrant) for
 25011                                  ;   multitasking, and will have to be changed. Storing the required value on
 25012                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 25013                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 25014                                  ;   problems with INT 24 well.
 25015                                  ;
 25016                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 25017                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 25018                                  ;                                                                          ;
 25019                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 25020                                  ;               CX = No. of clusters to allocate
 25021                                  ;               ES:BP = Base of drive parameters
 25022                                  ;               [THISSFT] = Points to SFT
 25023                                  ;
 25024                                  ;       EXIT    'C' set if insufficient space
 25025                                  ;                 [FAILERR] can be tested to see the reason for failure
 25026                                  ;                 CX = max. no. of clusters that could be added to file
 25027                                  ;               'C' clear if space allocated
 25028                                  ;                 BX = First cluster allocated
 25029                                  ;                 FAT is fully updated
 25030                                  ;                 sf_FIRCLUS field of SFT set if file was null
 25031                                  ;
 25032                                  ;       USES    ALL but SI, BP
 25033                                  
 25034                                  ;callmagic  proc near
 25035                                  ;       push    ds                             ;push segment of routine 
 25036                                  ;       push    Offset MagicPatch              ;push offset for routine
 25037                                  ;       retf                                   ;simulate jmp far
 25038                                  ;                                              ;far return address is on
 25039                                  ;                                              ;stack, so far return from
 25040                                  ;                                              ;call will return this routine
 25041                                  ;callmagic  endp
 25042                                  
 25043                                  ALLOCATE:
 25044                                  	; 10/09/2018
 25045                                  ;BEGIN MAGICDRV MODIFICATIONS
 25046                                  ;
 25047                                  ;7/5/92 scottq
 25048                                  ;
 25049                                  ;This is the disk compression patch location which allows
 25050                                  ;the disk compression software to fail allocations if the
 25051                                  ;FAT would allows allocation, but the free space for compressed
 25052                                  ;data would not.
 25053                                  ;        
 25054                                  ;;;	call    far ptr MAGICPATCH
 25055                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 25056                                  ;;; but we do know the segment and offset of the routine
 25057                                  ;;; so simulate a far call to dosdata:magicpatch
 25058                                  ;;; note dosassume above, so DS -> dosdata
 25059                                  
 25060                                  	; MSDOS 6.0
 25061                                          ;clc				;clear carry so we fall through
 25062                                  	;				;if no patch is present
 25063                                  	;push	cs			;push segment for far return
 25064                                          ;call	callmagic		;this is a near call
 25065                                          ;jnc	short Regular_Allocate_Path
 25066                                  	;jmp	Disk_Full_Return
 25067                                  
 25068                                  	; MSDOS 6.0
 25069                                          ;clc				;clear carry so we fall through
 25070                                  	;				;if no patch is present
 25071                                  	;push	cs			;push segment for far return
 25072                                          ;call	callmagic		;this is a near call
 25073                                          ;jnc	short Regular_Allocate_Path
 25074                                  	;jmp	Disk_Full_Return ; 10/09/2018 !
 25075                                  
 25076                                  ;Regular_Allocate_Path:
 25077                                  ;END MAGICDRV MODIFICATIONS
 25078                                  
 25079 00005447 53                              PUSH    BX                      ; save (bx)
 25080 00005448 31DB                            XOR     BX,BX
 25081 0000544A E80506                  	call	UNPACK
 25082 0000544D 893E[2E05]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 25083 00005451 5B                              POP     BX
 25084 00005452 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 25085                                  
 25086 00005454 51                              PUSH    CX
 25087 00005455 53                              PUSH    BX
 25088                                  
 25089 00005456 89DA                            MOV     DX,BX
 25090                                  	;mov	bx,[es:bp+1Ch]
 25091 00005458 268B5E1C                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 25092 0000545C 83FB02                          cmp     bx,2
 25093 0000545F 7709                            ja	short FINDFRE
 25094                                  
 25095                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 25096                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 25097                                  
 25098                                  ads1:
 25099                                  	;mov	word [es:bp+1Ch],2
 25100 00005461 26C7461C0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 25101 00005467 BB0100                          mov     bx,1                    ; Counter next instruction so first
 25102                                                                          ;       cluster examined is 2
 25103                                  
 25104                                  ;   Scanning both forwards and backwards for a free cluster
 25105                                  ;
 25106                                  ;       (BX) = forwards scan pointer
 25107                                  ;       (CX) = clusters remaining to be allocated
 25108                                  ;       (DX) = current last cluster in file
 25109                                  ;       (TOS) = last cluster of file
 25110                                  
 25111                                  FINDFRE:
 25112 0000546A 43                              INC     BX
 25113                                  	;cmp	bx,[es:bp+0Dh]
 25114 0000546B 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 25115 0000546F 7757                    	ja	short ads7	; at end of disk
 25116 00005471 E8DE05                          call	UNPACK          ; check out this cluster
 25117 00005474 722F                            jc	short ads4	; FAT error             [INTERR?]
 25118 00005476 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 25119                                  
 25120                                  ;   Have found a free cluster. Chain it to the file
 25121                                  ;
 25122                                  ;       (BX) = found free cluster #
 25123                                  ;       (DX) = current last cluster in file
 25124                                  
 25125                                  	;mov	[es:bp+1Ch],bx
 25126 00005478 26895E1C                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 25127 0000547C 92                              xchg    ax,dx           ; save (dx) in ax
 25128 0000547D BA0100                          mov     dx,1            ; mark this free guy as "1"
 25129 00005480 E81806                  	call	PACK            ; set special "temporary" mark
 25130 00005483 7220                            jc	short ads4	; FAT error             [INTERR?]
 25131                                  	;cmp	word [es:bp+1Eh],-1
 25132 00005485 26837E1EFF                      CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25133 0000548A 7404                            JZ	short NO_ALLOC	; No
 25134                                  	;dec	word [es:bp+1Eh]
 25135 0000548C 26FF4E1E                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 25136                                  NO_ALLOC:
 25137 00005490 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 25138 00005491 87DA                            XCHG    BX,DX
 25139 00005493 89D0                            MOV     AX,DX
 25140 00005495 E80306                  	call	PACK            ; link free cluster onto file
 25141                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 25142                                                                  ;    cluster 0 with FIRCLUS value.
 25143 00005498 720B                            jc	short ads4	; FAT error [INTERR?]
 25144 0000549A 93                              xchg    BX,AX           ; (BX) = last one we looked at
 25145 0000549B 89DA                            mov     dx,bx           ; (dx) = current end of file
 25146 0000549D E2CB                            LOOP    FINDFRE         ; alloc more if needed
 25147                                  
 25148                                  ;   We've successfully extended the file. Clean up and exit
 25149                                  ;
 25150                                  ;       (BX) = last cluster in file
 25151                                  
 25152 0000549F BAFFFF                          MOV     DX,0FFFFH
 25153 000054A2 E8F605                  	call	PACK            ; mark last cluster EOF
 25154                                  
 25155                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 25156                                  ;   2 whole bytes.  Hope its worth it...
 25157                                  ;
 25158                                  ;       'C' set iff error
 25159                                  ;       calling (BX) and (CX) pushed on stack
 25160                                  
 25161                                  ads4:   
 25162 000054A5 5B                      	POP     BX
 25163 000054A6 59                              POP     CX              ; Don't need this stuff since we're successful
 25164 000054A7 729D                            jc	short figrec_retn
 25165 000054A9 E8A605                          call	UNPACK          ; Get first cluster allocated for return
 25166                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 25167 000054AC 7298                            jc	short figrec_retn
 25168 000054AE E82D00                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 25169 000054B1 7293                            jc	short figrec_retn
 25170 000054B3 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 25171 000054B5 09FF                            OR      DI,DI           ; clear 'C'
 25172 000054B7 758D                    	jnz	short figrec_retn ; we were extending an existing file
 25173                                  
 25174                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 25175                                  ;   info
 25176                                  dofastk:
 25177 000054B9 06                              PUSH	ES
 25178 000054BA C43E[3605]                      LES     DI,[THISSFT]
 25179                                  	;mov	[es:di+0Bh],bx
 25180 000054BE 26895D0B                        MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 25181                                  	;mov	[es:di+1Bh],bx
 25182 000054C2 26895D1B                        MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 25183 000054C6 07                              POP	ES
 25184 000054C7 C3                              retn
 25185                                  
 25186                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 25187                                  ;   of the disk...
 25188                                  
 25189                                  ads7:   
 25190 000054C8 26837E1C02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 25191 000054CD 7592                    	jnz	short ads1	; start scan from front of disk
 25192                                  
 25193                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 25194                                  ;   the space back to the free list and tell the caller how much he could have
 25195                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 25196                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 25197                                  ;
 25198                                  ;       (CX) = clusters remaining to be allocated
 25199                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 25200                                  ;       (TOS+1) = # of clusters wanted to allocate
 25201                                  
 25202 000054CF 5B                              POP     BX              ; (BX) = last cluster of file
 25203 000054D0 BAFFFF                          MOV     DX,0FFFFH
 25204 000054D3 E81A00                  	call	RELBLKS         ; give back any clusters just alloced
 25205 000054D6 58                              POP     AX              ; No. of clusters requested
 25206                                                                  ; Don't "retc". We are setting Carry anyway,
 25207                                                                  ;   Alloc failed, so proceed with return CX
 25208                                                                  ;   setup.
 25209 000054D7 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 25210 000054D9 E80200                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 25211                                                                  ;   Alloc failed.
 25212                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 25213                                          ; MSDOS 6.0
 25214                                  	;MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 25215 000054DC F9                              STC
 25216 000054DD C3                              retn
 25217                                  
 25218                                  ;-----------------------------------------------------------------------
 25219                                  ;
 25220                                  ; Procedure Name : RESTFATBYT
 25221                                  ;
 25222                                  ; SEE ALLOCATE CAVEAT
 25223                                  ;       Carry set if error (currently user FAILed to I 24)
 25224                                  ;-----------------------------------------------------------------------
 25225                                  
 25226                                  RESTFATBYT:
 25227 000054DE 53                              PUSH    BX
 25228 000054DF 52                              PUSH    DX
 25229 000054E0 57                              PUSH    DI
 25230 000054E1 31DB                            XOR     BX,BX
 25231 000054E3 8B16[2E05]                      MOV     DX,[FATBYT]
 25232 000054E7 E8B105                  	call	PACK
 25233 000054EA 5F                              POP     DI
 25234 000054EB 5A                              POP     DX
 25235 000054EC 5B                              POP     BX
 25236                                  RELEASE_flush:
 25237 000054ED C3                      	retn
 25238                                  
 25239                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 25240                                  ;---------------------------------------------------------------------------
 25241                                  ;
 25242                                  ; Procedure Name : RELEASE
 25243                                  ;
 25244                                  ; Inputs:
 25245                                  ;       BX = Cluster in file
 25246                                  ;       ES:BP = Base of drive parameters
 25247                                  ; Function:
 25248                                  ;       Frees cluster chain starting with [BX]
 25249                                  ;       Carry set if error (currently user FAILed to I 24)
 25250                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 25251                                  ;
 25252                                  ;-----------------------------------------------------------------------------
 25253                                  
 25254                                  RELEASE:
 25255 000054EE 31D2                            XOR     DX,DX
 25256                                  
 25257                                  	;entry	RELBLKS
 25258                                  RELBLKS:
 25259                                  
 25260                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 25261                                  ;   and free the rest in the chain.
 25262                                  
 25263 000054F0 E85F05                  	call	UNPACK
 25264 000054F3 72F8                    	jc	short RELEASE_flush
 25265 000054F5 74F6                    	jz	short RELEASE_flush
 25266 000054F7 89F8                            MOV     AX,DI
 25267 000054F9 52                              PUSH    DX
 25268 000054FA E89E05                  	call	PACK
 25269 000054FD 5A                              POP     DX
 25270 000054FE 72ED                    	jc	short RELEASE_flush
 25271 00005500 09D2                            OR      DX,DX
 25272 00005502 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 25273                                  	;cmp	word [es:bp+1Eh],-1
 25274 00005504 26837E1EFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25275 00005509 7404                            JZ	short NO_DEALLOC	; No
 25276 0000550B 26FF461E                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 25277                                  NO_DEALLOC:
 25278 0000550F 89C3                            MOV     BX,AX
 25279 00005511 48                              dec     ax              ; check for "1"
 25280 00005512 74D9                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 25281 00005514 E82405                  	call	IsEOF
 25282 00005517 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 25283                                  
 25284                                  ;RELEASE_flush:
 25285                                  	; MSDOS 6.0
 25286                                  	;mov	al,[es:bp]
 25287                                  	;;MOV	AL,[ES:BP+DPB.DRIVE]
 25288                                  	;push	si		; FLUSHBUF may trash these and we guarantee
 25289                                  	;push	cx		;  them to be preserved.
 25290                                  	;push	es
 25291                                  	;push	bp
 25292                                  	;call	FLUSHBUF	; commit buffers for this drive
 25293                                  	;pop	bp
 25294                                  	;pop	es
 25295                                  	;pop	cx
 25296                                  	;pop	si
 25297                                  RET12:
 25298 00005519 C3                      	retn
 25299                                  
 25300                                  ;Break	<GETEOF -- Find the end of a file>
 25301                                  ;------------------------------------------------------------------------
 25302                                  ;
 25303                                  ; Procedure Name : GETEOF
 25304                                  ;
 25305                                  ; Inputs:
 25306                                  ;       ES:BP Points to DPB
 25307                                  ;       BX = Cluster in a file
 25308                                  ;       DS = CS
 25309                                  ; Outputs:
 25310                                  ;       BX = Last cluster in the file
 25311                                  ;       Carry set if error (currently user FAILed to I 24)
 25312                                  ; DI destroyed. No other registers affected.
 25313                                  ;
 25314                                  ;--------------------------------------------------------------------------
 25315                                  
 25316                                  GETEOF:
 25317 0000551A E83505                  	call	UNPACK
 25318 0000551D 72FA                            jc	short RET12
 25319 0000551F 53                              PUSH    BX
 25320 00005520 89FB                            MOV     BX,DI
 25321 00005522 E81605                  	call	IsEOF
 25322 00005525 5B                              POP     BX
 25323 00005526 73F1                            JAE     short RET12
 25324 00005528 89FB                            MOV     BX,DI
 25325 0000552A EBEE                            JMP     short GETEOF
 25326                                  
 25327                                  ;============================================================================
 25328                                  ; FCB.ASM, MSDOS 6.0, 1991
 25329                                  ;============================================================================
 25330                                  ; 30/07/2018 - Retro DOS v3.0
 25331                                  
 25332                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 25333                                  ;	NAME	FCB
 25334                                  
 25335                                  ;**	FCB.ASM -  Low level routines for parsing names into FCBs and analyzing
 25336                                  ;		   filename characters
 25337                                  ;
 25338                                  ;	MakeFcb
 25339                                  ;	NameTrans
 25340                                  ;	PATHCHRCMP
 25341                                  ;	GetLet
 25342                                  ;	UCase
 25343                                  ;	GetLet3
 25344                                  ;	GetCharType
 25345                                  ;	TESTKANJ
 25346                                  ;	NORMSCAN
 25347                                  ;	DELIM
 25348                                  ;
 25349                                  ;	Revision history:
 25350                                  ;
 25351                                  ;		A000  version 4.00  Jan. 1988
 25352                                  ;	
 25353                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 25354                                  
 25355                                  TableLook	EQU -1
 25356                                  
 25357                                  SCANSEPARATOR	EQU	1
 25358                                  DRVBIT		EQU	2
 25359                                  NAMBIT		EQU	4
 25360                                  EXTBIT		EQU	8
 25361                                  
 25362                                  ;
 25363                                  ;----------------------------------------------------------------------------
 25364                                  ;
 25365                                  ; Procedure : MakeFcb
 25366                                  ;
 25367                                  ;----------------------------------------------------------------------------
 25368                                  ;
 25369                                  
 25370                                  MAKEFCB:
 25371                                  ;hkn; SS override
 25372 0000552C 36C606[FA02]00          	MOV	BYTE [SS:SpaceFlag],0
 25373 00005532 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 25374                                  	;test	al,2
 25375 00005534 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 25376 00005536 7504                    	JNZ	short DEFDRV
 25377 00005538 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 25378                                  DEFDRV:
 25379 0000553C 47                      	INC	DI
 25380 0000553D B90800                  	MOV	CX,8
 25381                                  	;test	al,4
 25382 00005540 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 25383 00005542 93                      	XCHG	AX,BX		; Save bits in BX
 25384 00005543 B020                    	MOV	AL," "
 25385 00005545 7404                    	JZ	short FILLB	; If not, go fill with blanks
 25386 00005547 01CF                    	ADD	DI,CX
 25387 00005549 31C9                    	XOR	CX,CX		; Don't fill any
 25388                                  FILLB:
 25389 0000554B F3AA                    	REP	STOSB
 25390 0000554D B103                    	MOV	CL,3
 25391 0000554F F6C308                  	test	BL,EXTBIT	; Use current extension as default
 25392 00005552 7404                    	JZ	short FILLB2
 25393 00005554 01CF                    	ADD	DI,CX
 25394 00005556 31C9                    	XOR	CX,CX
 25395                                  FILLB2:
 25396 00005558 F3AA                    	REP	STOSB
 25397 0000555A 91                      	XCHG	AX,CX		; Put zero in AX
 25398 0000555B AB                      	STOSW
 25399 0000555C AB                      	STOSW			; Initialize two words after to zero
 25400 0000555D 83EF10                  	SUB	DI,16		; Point back at start
 25401                                  	;test	bl,1
 25402 00005560 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 25403 00005563 7409                    	JZ	short SKPSPC
 25404 00005565 E87300                  	CALL	SCANB		; Peel off blanks and tabs
 25405 00005568 E8CA00                  	CALL	DELIM		; Is it a one-time-only delimiter?
 25406 0000556B 7504                    	JNZ	short NOSCAN
 25407 0000556D 46                      	INC	SI		; Skip over the delimiter
 25408                                  SKPSPC:
 25409 0000556E E86A00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 25410                                  NOSCAN:
 25411 00005571 E89C00                  	CALL	GETLET
 25412 00005574 7616                    	JBE	short NODRV	; Quit if termination character
 25413 00005576 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 25414 00005579 7511                    	JNZ	short NODRV
 25415 0000557B 46                      	INC	SI		; Skip over colon
 25416 0000557C 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 25417 0000557E 7607                    	JBE	short BADDRV	; Drive letter out of range
 25418                                  
 25419 00005580 50                      	PUSH	AX
 25420 00005581 E8DB13                  	call	GetVisDrv
 25421 00005584 58                      	POP	AX
 25422 00005585 7302                    	JNC	short HAVDRV
 25423                                  
 25424                                  	; MSDOS 6.0
 25425                                  ;hkn; SS override
 25426                                  	;CMP	byte [SS:DrvErr],error_not_DOS_disk
 25427                                  	;				; if not FAT drive ;AN000;
 25428                                  	;JZ	short HAVDRV		; assume ok	   ;AN000;
 25429                                  BADDRV:
 25430 00005587 B2FF                    	MOV	DL,-1
 25431                                  HAVDRV:
 25432 00005589 AA                      	STOSB			; Put drive specifier in first byte
 25433 0000558A 46                      	INC	SI
 25434 0000558B 4F                      	DEC	DI		; Counteract next two instructions
 25435                                  NODRV:
 25436 0000558C 4E                      	DEC	SI		; Back up
 25437 0000558D 47                      	INC	DI		; Skip drive byte
 25438                                  
 25439                                  	;entry	NORMSCAN
 25440                                  NORMSCAN:
 25441 0000558E B90800                  	MOV	CX,8
 25442 00005591 E81300                  	CALL	GETWORD 	; Get 8-letter file name
 25443 00005594 803C2E                  	CMP	BYTE [SI],"."
 25444 00005597 7507                    	JNZ	short NODOT
 25445 00005599 46                      	INC	SI		; Skip over dot if present
 25446                                  
 25447                                  	; MSDOS6.0
 25448                                  ;hkn; SS override
 25449                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2	;AN000;
 25450                                  	;JZ	short VOLOK				;AN000;
 25451                                  	;MOVSB			; 2nd byte of DBCS	;AN000;
 25452                                  	;MOV	CX,2					;AN000;
 25453                                  	;JMP	SHORT contvol				;AN000;
 25454                                  ;VOLOK:
 25455 0000559A B90300                  	MOV	CX,3		; Get 3-letter extension
 25456                                  contvol:
 25457 0000559D E80D00                  	CALL	MUSTGETWORD
 25458                                  NODOT:
 25459 000055A0 88D0                    	MOV	AL,DL
 25460                                  
 25461                                  	; MSDOS 6.0
 25462                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 25463                                  
 25464 000055A2 C3                      	retn
 25465                                  
 25466                                  NONAM:
 25467 000055A3 01CF                    	ADD	DI,CX
 25468 000055A5 4E                      	DEC	SI
 25469 000055A6 C3                      	retn
 25470                                  
 25471                                  GETWORD:
 25472 000055A7 E86600                  	CALL	GETLET		
 25473 000055AA 76F7                    	JBE	short NONAM	; Exit if invalid character
 25474 000055AC 4E                      	DEC	SI
 25475                                  
 25476                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 25477                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 25478                                  
 25479                                  MUSTGETWORD:
 25480 000055AD E86000                  	CALL	GETLET
 25481                                  
 25482                                  ;	If spaceFlag is set then we allow spaces in a pathname
 25483                                  
 25484                                  ;IF NOT TABLELOOK
 25485 000055B0 7223                    	JB	short FILLNAM
 25486                                  ;ENDIF
 25487 000055B2 750C                    	JNZ	short MustCheckCX
 25488                                  
 25489                                  ;hkn; SS override
 25490 000055B4 36F606[FA02]FF          	test	BYTE [SS:SpaceFlag],0FFh
 25491 000055BA 7419                    	JZ	short FILLNAM
 25492 000055BC 3C20                    	CMP	AL," "
 25493 000055BE 7515                    	JNZ	short FILLNAM
 25494                                  
 25495                                  MustCheckCX:
 25496 000055C0 E3EB                    	JCXZ	MUSTGETWORD
 25497 000055C2 49                      	DEC	CX
 25498 000055C3 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 25499 000055C5 7504                    	JNZ	short NOSTAR
 25500 000055C7 B03F                    	MOV	AL,"?"
 25501 000055C9 F3AA                    	REP	STOSB
 25502                                  NOSTAR:
 25503 000055CB AA                      	STOSB
 25504 000055CC 3C3F                    	CMP	AL,"?"
 25505 000055CE 75DD                    	JNZ	short MUSTGETWORD
 25506 000055D0 80CA01                  	OR	DL,1		; Flag ambiguous file name
 25507 000055D3 EBD8                    	JMP	short MUSTGETWORD
 25508                                  FILLNAM:
 25509 000055D5 B020                    	MOV	AL," "
 25510 000055D7 F3AA                    	REP	STOSB
 25511 000055D9 4E                      	DEC	SI
 25512 000055DA C3                      	retn
 25513                                  
 25514                                  SCANB:
 25515 000055DB AC                      	LODSB
 25516 000055DC E86200                  	CALL	SPCHK
 25517 000055DF 74FA                    	JZ	short SCANB
 25518 000055E1 4E                      	DEC	SI
 25519                                  scanb_retn:
 25520 000055E2 C3                      	retn
 25521                                  
 25522                                  ;----------------------------------------------------------------------------
 25523                                  ;
 25524                                  ; Procedure Name : NameTrans
 25525                                  ;
 25526                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 25527                                  ; allow spaces in pathnames
 25528                                  ;
 25529                                  ;   Inputs:	DS:SI points to start of path element
 25530                                  ;   Outputs:	Name1 has unpacked name, uppercased
 25531                                  ;		ES = DOSGroup
 25532                                  ;		DS:SI advanced after name
 25533                                  ;   Registers modified: DI,AX,DX,CX
 25534                                  ;
 25535                                  ;----------------------------------------------------------------------------
 25536                                  
 25537                                  NameTrans:
 25538                                  ;hkn; SS override
 25539 000055E3 36C606[FA02]01          	MOV	BYTE [SS:SpaceFlag],1
 25540 000055E9 16                      	push	ss
 25541 000055EA 07                      	pop	es
 25542                                  
 25543                                  ;hkn; NAME1 is in DOSDATA
 25544 000055EB BF[E604]                	MOV	DI,NAME1
 25545 000055EE 57                      	PUSH	DI
 25546 000055EF B82020                  	MOV	AX,'  '
 25547 000055F2 B90500                  	MOV	CX,5
 25548 000055F5 AA                      	STOSB
 25549 000055F6 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 25550 000055F8 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 25551 000055FA 88C2                    	MOV	DL,AL
 25552 000055FC AA                      	STOSB
 25553 000055FD 5F                      	POP	DI
 25554                                  
 25555 000055FE E88DFF                  	CALL	NORMSCAN
 25556                                  
 25557                                  ;hkn; SS override for NAME1
 25558 00005601 36803E[E604]E5          	CMP	byte [SS:NAME1],0E5H
 25559 00005607 75D9                    	jnz	short scanb_retn
 25560 00005609 36C606[E604]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 25561 0000560F C3                      	retn
 25562                                  
 25563                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 25564                                  
 25565                                  ;----------------------------------------------------------------------------
 25566                                  ;
 25567                                  ; Procedure Names : GetLet, UCase, GetLet3
 25568                                  ;
 25569                                  ; These routines take a character, convert it to upper case, and check
 25570                                  ; for delimiters.  Three different entry points:
 25571                                  ;	GetLet -  DS:[SI] = character to convert
 25572                                  ;	UCase  -  AL = character to convert
 25573                                  ;	GetLet3 - AL = character
 25574                                  ;		  [BX] = translation table to use
 25575                                  ;
 25576                                  ;	Exit (in all cases) : AL = upper case character
 25577                                  ;			      CY set if char is control char other than TAB
 25578                                  ;			      ZF set if char is a delimiter
 25579                                  ;	Uses : AX, flags
 25580                                  ;
 25581                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 25582                                  ; inline version.  Return with carry set is only possible in the inline
 25583                                  ; version.  The table lookup version is the one in use.
 25584                                  ;
 25585                                  ;----------------------------------------------------------------------------
 25586                                  
 25587                                  
 25588                                  ; This entry point has character at [SI]
 25589                                  
 25590                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 25591                                  GETLET:	
 25592 00005610 AC                      	LODSB
 25593                                  
 25594                                  ; This entry point has character in AL
 25595                                  
 25596                                  	;entry	UCase
 25597                                  UCase:	
 25598                                  	; 09/08/2018
 25599                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 25600                                  _UCase:
 25601 00005611 53                      	PUSH	BX
 25602 00005612 BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2
 25603                                  
 25604                                  ; Convert the character in AL to upper case
 25605                                  
 25606                                  gl_0:
 25607 00005615 3C61                    	CMP	AL,"a"
 25608 00005617 720E                    	JB	short gl_2	; Already upper case, go check type
 25609 00005619 3C7A                    	CMP	AL,"z"
 25610 0000561B 7702                    	JA	short gl_1
 25611 0000561D 2C20                    	SUB	AL,20H		; Convert to upper case
 25612                                  
 25613                                  ; Map European character to upper case
 25614                                  
 25615                                  gl_1:
 25616 0000561F 3C80                    	CMP	AL,80H
 25617 00005621 7204                    	JB	short gl_2	; Not EuroChar, go check type
 25618 00005623 2C80                    	SUB	AL,80H		; translate to upper case with this index
 25619                                  
 25620                                  	; M048 - Start 
 25621                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 25622                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 25623                                  	; preserve it.
 25624                                  	;
 25625                                  
 25626                                  	;push	ds
 25627                                  	;push	cs
 25628                                  	;pop	ds
 25629                                  
 25630                                  	; 09/08/2018
 25631                                  	;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 25632 00005625 2ED7                    	CS	XLAT
 25633                                  
 25634                                  	;pop	ds
 25635                                  
 25636                                  	; M048 - End
 25637                                  
 25638                                  ; Now check the type
 25639                                  
 25640                                  ;If TableLook
 25641                                  
 25642                                  gl_2:
 25643 00005627 50                      	PUSH	AX
 25644                                  	
 25645                                  	; MSDOS 6.0
 25646                                  	;CALL	GetCharType	; returns type flags in AL
 25647                                  	
 25648                                  	; MSDOS 3.3
 25649 00005628 BB[1613]                	mov	bx,CharType
 25650                                  	; 09/08/2018
 25651                                  	;xlat	byte [cs:bx]
 25652 0000562B 2ED7                    	cs	xlat	
 25653                                  
 25654                                  	;test	al,1	
 25655 0000562D A801                    	TEST	AL,FCHK 	; test for normal character
 25656 0000562F 58                      	POP	AX
 25657 00005630 5B                      	POP	BX
 25658 00005631 C3                      	RETN
 25659                                  
 25660                                  ; This entry has character in AL and lookup table in BX
 25661                                  
 25662                                  	; MSDOS 6.0
 25663                                  ;	;entry GetLet3
 25664                                  GETLET3: ; 10/08/2018
 25665 00005632 53                      	PUSH	BX
 25666 00005633 EBE0                    	JMP	short gl_0
 25667                                  
 25668                                  ;ELSE
 25669                                  ;
 25670                                  ;gl_2:
 25671                                  ;	POP	BX
 25672                                  ;	CMP	AL,"."
 25673                                  ;	retz
 25674                                  ;	CMP	AL,'"'
 25675                                  ;	retz
 25676                                  ;	CALL	PATHCHRCMP
 25677                                  ;	retz
 25678                                  ;	CMP	AL,"["
 25679                                  ;	retz
 25680                                  ;	CMP	AL,"]"
 25681                                  ;	retz
 25682                                  ;ENDIF
 25683                                  
 25684                                  ;---------------------------------------------------------------------
 25685                                  ;
 25686                                  ; DELIM - check if character is a delimiter
 25687                                  ;	Entry : AX = character to check
 25688                                  ;	Exit  : ZF set if character is not a delimiter
 25689                                  ;	Uses  : Flags
 25690                                  ;
 25691                                  ;--------------------------------------------------------------------
 25692                                  
 25693                                  	;entry	DELIM
 25694                                  DELIM:
 25695                                  ;IF TableLook
 25696 00005635 50                      	PUSH	AX
 25697                                  
 25698                                  	; MSDOS 6.0
 25699                                  	;CALL	GetCharType
 25700                                  	
 25701                                  	; MSDOS 3.3
 25702 00005636 53                      	push	bx
 25703 00005637 BB[1613]                	mov	bx,CharType
 25704                                  	;09/08/2018
 25705                                  	;xlat	byte [cs:bx]
 25706 0000563A 2ED7                    	cs	xlat
 25707 0000563C 5B                      	pop	bx
 25708                                  
 25709                                  	;test	al,2
 25710 0000563D A802                    	TEST	AL,FDELIM
 25711 0000563F 58                      	POP	AX
 25712 00005640 C3                      	RETN
 25713                                  ;ELSE
 25714                                  ;	CMP	AL,":"
 25715                                  ;	retz
 25716                                  ;
 25717                                  ;	CMP	AL,"<"
 25718                                  ;	retz
 25719                                  ;	CMP	AL,"|"
 25720                                  ;	retz
 25721                                  ;	CMP	AL,">"
 25722                                  ;	retz
 25723                                  ;
 25724                                  ;	CMP	AL,"+"
 25725                                  ;	retz
 25726                                  ;	CMP	AL,"="
 25727                                  ;	retz
 25728                                  ;	CMP	AL,";"
 25729                                  ;	retz
 25730                                  ;	CMP	AL,","
 25731                                  ;	retz
 25732                                  ;ENDIF
 25733                                  
 25734                                  ;-------------------------------------------------------------------------
 25735                                  ;
 25736                                  ;  SPCHK - checks to see if a character is a space or equivalent
 25737                                  ;	Entry : AL = character to check
 25738                                  ;	Exit  : ZF set if character is a space
 25739                                  ;	Uses  : flags
 25740                                  ;
 25741                                  ;-------------------------------------------------------------------------
 25742                                  
 25743                                  	;entry SPCHK
 25744                                  SPCHK:
 25745                                  ;IF TableLook
 25746 00005641 50                      	PUSH	AX
 25747                                  
 25748                                  	; MSDOS 6.0
 25749                                  	;CALL	GetCharType
 25750                                  	
 25751                                  	; MSDOS 3.3
 25752 00005642 53                      	push	bx
 25753 00005643 BB[1613]                	mov	bx,CharType
 25754                                  	; 09/08/2018
 25755                                  	;xlat	byte [cs:bx]
 25756 00005646 2ED7                    	cs	xlat
 25757 00005648 5B                      	pop	bx
 25758                                  
 25759                                  	;test	al,4
 25760 00005649 A804                    	TEST	AL,FSPCHK
 25761 0000564B 58                      	POP	AX
 25762 0000564C C3                      	RETN
 25763                                  ;ELSE
 25764                                  ;	CMP	AL,9		; Filter out tabs too
 25765                                  ;	retz
 25766                                  ;; WARNING! " " MUST be the last compare
 25767                                  ;	CMP	AL," "
 25768                                  ;	return
 25769                                  ;ENDIF
 25770                                  
 25771                                  ; MSDOS 6.0
 25772                                  ;-------------------------------------------------------------------------
 25773                                  ;
 25774                                  ;  GetCharType - return flag bits indicating character type
 25775                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 25776                                  ;	defined above at label CharType.
 25777                                  ;
 25778                                  ;	Entry : AL = character to return type flags for
 25779                                  ;	Exit  : AL = type flags
 25780                                  ;	Uses  : AL, flags
 25781                                  ;
 25782                                  ;-------------------------------------------------------------------------
 25783                                  ;
 25784                                  ;GetCharType:
 25785                                  ;	cmp	al,CharType_last	; beyond end of table?
 25786                                  ;	jae	short gct_90		; return standard value
 25787                                  ;
 25788                                  ;	push	bx
 25789                                  ;	mov	bx,CharType		; load lookup table
 25790                                  ;	shr	al,1			; adjust for half-byte table entry size
 25791                                  ;	;xlat	cs:[bx] 		; get flags
 25792                                  ;	cs	xlat	
 25793                                  ;	pop	bx
 25794                                  ;
 25795                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 25796                                  ; we have to shift the flags down to the low nibble
 25797                                  ;
 25798                                  ;	jnc	short gct_80		; carry clear, no shift needed
 25799                                  ;
 25800                                  ;	shr	al,1			; we want high nibble, shift it down
 25801                                  ;	shr	al,1
 25802                                  ;	shr	al,1
 25803                                  ;	shr	al,1
 25804                                  ;
 25805                                  ;gct_80:
 25806                                  ;	and	al,0Fh			; clear the unused nibble
 25807                                  ;	retn
 25808                                  ;
 25809                                  ;gct_90:
 25810                                  ;	mov	al,0Fh			; set all flags
 25811                                  ;	retn
 25812                                  
 25813                                  ;----------------------------------------------------------------------------
 25814                                  ;
 25815                                  ; Procedure : PATHCHRCMP
 25816                                  ;
 25817                                  ;----------------------------------------------------------------------------
 25818                                  
 25819                                  PATHCHRCMP:
 25820 0000564D 3C2F                    	CMP	AL,'/'
 25821 0000564F 7606                    	JBE	short PathRet
 25822 00005651 3C5C                    	CMP	AL,'\'
 25823 00005653 C3                      	retn
 25824                                  GotFor:
 25825 00005654 B05C                    	MOV	AL,'\'
 25826 00005656 C3                      	retn
 25827                                  PathRet:
 25828 00005657 74FB                    	JZ	short GotFor
 25829 00005659 C3                      	retn
 25830                                  
 25831                                  
 25832                                  ;============================================================================
 25833                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 25834                                  ;============================================================================
 25835                                  ; 30/07/2018 - Retro DOS v3.0
 25836                                  
 25837                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 25838                                  
 25839                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 25840                                  
 25841                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 25842                                  ;	NAME	IBMCTRLC
 25843                                  
 25844                                  ;**	Low level routines for detecting special characters on CON input,
 25845                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 25846                                  ;	process termination code, and the INT 0 divide overflow handler.
 25847                                  ;
 25848                                  ;	FATAL
 25849                                  ;	FATAL1
 25850                                  ;	reset_environment
 25851                                  ;	DSKSTATCHK
 25852                                  ;	SPOOLINT
 25853                                  ;	STATCHK
 25854                                  ;	CNTCHAND
 25855                                  ;	DIVOV
 25856                                  ;	CHARHARD
 25857                                  ;	HardErr
 25858                                  ;
 25859                                  ;	Revision history:
 25860                                  ;
 25861                                  ;	    AN000	version 4.0   Jan 1988
 25862                                  ;	    A002	PTM    -- dir >lpt3 hangs
 25863                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 25864                                  ;
 25865                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 25866                                  ;	      flags register. In order to return to user normally DOS used to
 25867                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 25868                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 25869                                  ;
 25870                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 25871                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 25872                                  ;	      charhard.
 25873                                  
 25874                                  
 25875                                  	; MSDOS 6.0
 25876                                  ;		public	LowInt23Addr		
 25877                                  ;LowInt23Addr	LABEL	DWORD
 25878                                  ;	DW	offset DOSDATA:LowInt23, 0
 25879                                  ;
 25880                                  ;		public	LowInt24Addr
 25881                                  ;LowInt24Addr	LABEL	DWORD
 25882                                  ;	DW	offset DOSDATA:LowInt24, 0
 25883                                  ;
 25884                                  ;		public	LowInt28Addr
 25885                                  ;LowInt28Addr	LABEL	DWORD
 25886                                  ;	DW	offset DOSDATA:LowInt28, 0
 25887                                  
 25888                                  ;Break	<Checks for ^C in CON I/O>
 25889                                  
 25890                                  ;---------------------------------------------------------------------------
 25891                                  ;
 25892                                  ; Procedure Name : DSKSTATCHK
 25893                                  ;
 25894                                  ; Check for ^C if only one level in
 25895                                  ;
 25896                                  ;---------------------------------------------------------------------------
 25897                                  
 25898                                          ;procedure   DSKSTATCHK,NEAR ; Check for ^C if only one level in
 25899                                  
 25900                                  DSKSTATCHK:        
 25901                                  	;CMP	BYTE [INDOS],1
 25902 0000565A 36803E[CF02]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 25903                                  	;retnz			; Do NOTHING
 25904 00005660 7535                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 25905                                  
 25906 00005662 51                      	PUSH    CX
 25907 00005663 06                              PUSH    ES
 25908 00005664 53                              PUSH    BX
 25909 00005665 1E                              PUSH    DS
 25910 00005666 56                              PUSH    SI
 25911                                          
 25912                                  	;PUSH	CS
 25913                                          ;POP	ES
 25914                                          ;PUSH	CS
 25915                                          ;POP	DS
 25916                                  
 25917 00005667 8CD3                    	MOV	BX, SS		; SS is DOSDATA. ES:BX must be set up
 25918 00005669 8EC3                    	MOV	ES, BX		; for deviocall2
 25919 0000566B 8EDB                    	MOV	DS, BX
 25920                                  
 25921                                  	; 09/09/2018
 25922 0000566D C606[3C03]05                    MOV     BYTE [DSKSTCOM],DEVRDND
 25923 00005672 C606[3A03]0E                    MOV     BYTE [DSKSTCALL],DRDNDHL
 25924 00005677 C706[3D03]0000          	mov	word [DSKSTST],0
 25925                                  
 25926 0000567D BB[3A03]                        MOV     BX,DSKSTCALL
 25927 00005680 C536[3200]                      LDS     SI,[BCON]
 25928 00005684 E878F8                          CALL	DEVIOCALL2
 25929                                   	; 15/03/2018
 25930                                  	;test	word [ss:DSKSTST],200h
 25931 00005687 36F706[3D03]0002                TEST    WORD [SS:DSKSTST],STBUI
 25932                                  	;JNZ	SHORT ZRET		; No characters available
 25933                                  	; 30/07/2018
 25934 0000568E 7408                    	jz	short _GotCh
 25935                                  ;ZRET:
 25936 00005690 30C0                            XOR     AL,AL                   ; Set zero
 25937                                  RET36:
 25938 00005692 5E                              POP     SI
 25939 00005693 1F                              POP     DS
 25940 00005694 5B                              POP     BX
 25941 00005695 07                              POP     ES
 25942 00005696 59                              POP     CX
 25943                                  _RET37:
 25944 00005697 C3                              RETN
 25945                                  
 25946                                  _GotCh:
 25947 00005698 36A0[4703]                      MOV     AL,[SS:DSKCHRET]	; SS override
 25948                                  
 25949 0000569C 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 25950 0000569E 75F2                            JNZ     SHORT RET36
 25951 000056A0 36C606[3C03]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 25952 000056A6 36C606[3A03]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 25953 000056AC 36880E[4703]                    MOV     [SS:DSKCHRET],CL
 25954                                  	; 09/09/2018
 25955 000056B1 36C706[3D03]0000        	MOV	word [SS:DSKSTST],0
 25956 000056B8 36C706[4C03]0100        	MOV	word [SS:DSKSTCNT],1
 25957 000056BF E83DF8                  	CALL	DEVIOCALL2              ; Eat the ^C
 25958 000056C2 5E                              POP     SI
 25959 000056C3 1F                              POP     DS
 25960 000056C4 5B                              POP     BX                      ; Clean stack
 25961 000056C5 07                              POP     ES
 25962 000056C6 59                              POP     CX
 25963 000056C7 E9BF00                          JMP	CNTCHAND ; 10/08/2018
 25964                                  
 25965                                  NOSTOP:
 25966                                  	; MSDOS 6.0
 25967                                  	;CMP	AL,"P"-"@"
 25968                                  	;JNZ	short check_next
 25969                                  				    	; SS override
 25970                                  	;CMP	BYTE [SS:Scan_Flag],0	; ALT_Q ?
 25971                                  	;JZ	short INCHKJ		; no
 25972                                  	;retn
 25973                                  ;check_next:
 25974                                  	;;IF	NOT TOGLPRN
 25975                                  	;CMP	AL,"N"-"@"
 25976                                  	;JZ	short INCHKJ
 25977                                  	;;ENDIF
 25978                                  
 25979                                  	;CMP	AL,"C"-"@"
 25980                                  	;JZ	short INCHKJ
 25981                                  ;check_end:
 25982                                  	;retn
 25983                                  
 25984                                  	; MSDOS 3.3
 25985 000056CA 3C10                            CMP     AL,"P"-"@"  ; cmp al,16	
 25986 000056CC 7405                            JZ	short INCHKJ
 25987                                  
 25988                                  	; 15/04/2018
 25989                                          ;;IF	NOT TOGLPRN
 25990                                          ;CMP	AL,"N"-"@"
 25991                                          ;JZ	SHORT INCHKJ
 25992                                          ;;ENDIF
 25993                                  
 25994 000056CE 3C03                            CMP     AL,"C"-"@"  ; cmp al,3	
 25995 000056D0 7401                            JZ	short INCHKJ
 25996 000056D2 C3                      	RETN
 25997                                  
 25998                                  	; 08/09/2018
 25999                                  INCHKJ:	; 10/08/2018
 26000 000056D3 E98F00                  	JMP	INCHK
 26001                                  
 26002                                  ;----------------------------------------------------------------------------
 26003                                  ;
 26004                                  ; Procedure Name : SpoolInt
 26005                                  ;
 26006                                  ; SpoolInt - signal processes that the DOS is truly idle.  We are allowed to
 26007                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 26008                                  ; the middle of an INT 24.
 26009                                  ;
 26010                                  ;----------------------------------------------------------------------------
 26011                                  
 26012                                  SPOOLINT:
 26013 000056D6 9C                              PUSHF
 26014                                  	; 15/03/2018
 26015 000056D7 36803E[0403]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 26016 000056DD 7414                            JZ      SHORT POPFRET
 26017 000056DF 36803E[CE02]00                  CMP     BYTE [SS:ERRORMODE],0
 26018 000056E5 750C                            JNZ     SHORT POPFRET		;No spool ints in error mode
 26019                                  
 26020                                  	; 30/07/2018
 26021                                  
 26022                                  	; Note that we are going to allow an external program to issue system 
 26023                                  	; calls at this time.  We MUST preserve IdleInt across this.
 26024                                  
 26025                                  
 26026 000056E7 36FF36[0403]            	PUSH	WORD [SS:IDLEINT]
 26027                                   
 26028                                  	; MSDOS 6.0
 26029                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 26030                                  	;jne	short do_low_int28	; Y: the int must be done from low mem
 26031                                  	;INT	int_spooler		; N: Execute user int 28 handler
 26032                                  	;jmp	short spool_ret_addr
 26033                                  
 26034                                  ;do_low_int28:
 26035                                  	;call	far [SS:LowInt28Addr]
 26036                                  
 26037                                  ;spool_ret_addr:
 26038                                  
 26039 000056EC CD28                            INT     int_spooler		; INT 28h
 26040                                  
 26041 000056EE 368F06[0403]            	POP	WORD [SS:IDLEINT]
 26042                                  
 26043                                  POPFRET:
 26044 000056F3 9D                              POPF
 26045                                  _RET18:  
 26046 000056F4 C3                      	RETN
 26047                                  
 26048                                  ;----------------------------------------------------------------------------
 26049                                  ;
 26050                                  ; Procedure Name : STATCHK
 26051                                  ;
 26052                                  ;----------------------------------------------------------------------------
 26053                                  
 26054                                  STATCHK:
 26055 000056F5 E862FF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 26056                                                                          ; input redirection
 26057 000056F8 53                              PUSH    BX
 26058 000056F9 31DB                            XOR     BX,BX
 26059 000056FB E8BAE9                          CALL	GET_IO_SFT
 26060 000056FE 5B                              POP     BX
 26061 000056FF 72F3                            JC      SHORT _RET18
 26062 00005701 B401                            MOV     AH,1
 26063 00005703 E84CF6                          CALL	IOFUNC
 26064 00005706 74CE                            JZ      SHORT SPOOLINT
 26065 00005708 3C13                            CMP     AL,'S'-'@'
 26066 0000570A 75BE                            JNZ     SHORT NOSTOP
 26067                                  
 26068                                  	; MSDOS 6.0			; SS override
 26069                                  	;CMP	BYTE [SS:Scan_Flag],0	; AN000; ALT_R ?
 26070                                  	;JNZ	short check_end		; AN000; yes
 26071                                  
 26072 0000570C 30E4                            XOR     AH,AH
 26073 0000570E E841F6                          CALL	IOFUNC                  ; Eat Cntrl-S
 26074 00005711 EB4B                            JMP     SHORT PAUSOSTRT
 26075                                  
 26076                                  PRINTOFF:
 26077                                  PRINTON:
 26078 00005713 36F616[AC02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 26079                                  
 26080                                  	; 30/07/2018 - Retro DOS v3.0
 26081 00005718 53                      	PUSH	BX
 26082 00005719 BB0400                  	MOV	BX,4
 26083 0000571C E899E9                  	call	GET_IO_SFT
 26084 0000571F 5B                      	POP	BX
 26085 00005720 72D2                    	jc	short _RET18
 26086 00005722 06                      	PUSH	ES
 26087 00005723 57                      	PUSH	DI
 26088 00005724 1E                      	PUSH	DS
 26089 00005725 07                      	POP	ES
 26090 00005726 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 26091                                  	;test	word [es:di+5],800h
 26092 00005728 26F745050008            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 26093 0000572E 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 26094                                  
 26095                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 26096                                  					; See if allowed
 26097 00005730 50                      	push	ax
 26098 00005731 B82611                  	mov	ax, 1126h
 26099 00005734 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26100                                  			; Return: CF set on error, AX = error code
 26101                                  			; STACK unchanged
 26102 00005736 58                      	pop	ax
 26103                                  
 26104 00005737 730F                    	JNC	short NORM_PR 		; Echo is OK
 26105                                  
 26106                                  					; SS override
 26107 00005739 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 26108                                  
 26109                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 26110                                  
 26111 0000573F 50                      	push    ax
 26112 00005740 B82411                  	mov     ax, 1124h
 26113 00005743 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26114                                  			; ES:DI -> SFT, SS = DOS CS
 26115 00005745 58                      	pop     ax
 26116                                  
 26117 00005746 EB10                    	JMP	SHORT RETP6
 26118                                  
 26119                                  NORM_PR:
 26120 00005748 36803E[AC02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 26121 0000574E 7505                    	JNZ	short PRNOPN
 26122 00005750 E82EF7                  	call	DEV_CLOSE_SFT
 26123 00005753 EB03                    	JMP	SHORT RETP6
 26124                                  
 26125                                  PRNOPN:
 26126 00005755 E822F7                  	call	DEV_OPEN_SFT
 26127                                  RETP6:
 26128 00005758 5F                      	POP	DI
 26129 00005759 07                      	POP	ES
 26130                                  
 26131                                  STATCHK_RETN:
 26132 0000575A C3                              RETN
 26133                                  
 26134                                  PAUSOLP:
 26135 0000575B E878FF                          CALL    SPOOLINT
 26136                                  PAUSOSTRT:
 26137 0000575E B401                            MOV     AH,1
 26138 00005760 E8EFF5                          CALL	IOFUNC
 26139 00005763 74F6                            JZ      SHORT PAUSOLP
 26140                                  INCHK:
 26141 00005765 53                              PUSH    BX
 26142 00005766 31DB                            XOR     BX,BX
 26143 00005768 E84DE9                          CALL	GET_IO_SFT
 26144 0000576B 5B                              POP     BX
 26145 0000576C 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 26146 0000576E 30E4                            XOR     AH,AH
 26147 00005770 E8DFF5                          CALL	IOFUNC
 26148                                  	; 30/07/2018
 26149                                  	; MSDOS 3.3
 26150 00005773 3C10                            CMP     AL,'P'-'@' ;cmp al,16
 26151 00005775 750E                            JNZ	SHORT NOPRINT
 26152                                  
 26153 00005777 36803E[8B0F]00          	cmp	byte [SS:SCAN_FLAG],0
 26154 0000577D 7494                    	JZ	SHORT PRINTON	
 26155 0000577F 36C606[8B0F]00          	mov	byte [ss:SCAN_FLAG],0
 26156                                  
 26157                                  	; MSDOS 6.0
 26158                                  	;CMP	AL,"P"-"@"
 26159                                  	;;;;;  7/14/86	ALT_Q key fix
 26160                                  	;JZ	short PRINTON		; no! must be CTRL_P
 26161                                  
 26162                                  NOPRINT:	
 26163                                  	;IF	NOT TOGLPRN
 26164                                  	;CMP	AL,"N"-"@"
 26165                                  	;JZ	short PRINTOFF
 26166                                  	;ENDIF
 26167 00005785 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 26168                                  	;retnz
 26169 00005787 75D1                    	jnz	short STATCHK_RETN
 26170                                  
 26171                                  ;	!! NOTE: FALL THROUGH !!
 26172                                  
 26173                                  ;---------------------------------------------------------------------------
 26174                                  ;
 26175                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 26176                                  ;
 26177                                  ; "^C" and CR/LF is printed.  Then the user registers are restored and the
 26178                                  ; user CTRL-C handler is executed.  At this point the top of the stack has 1)
 26179                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 26180                                  ; processing to continue; 2) the original interrupt return address to the code
 26181                                  ; that performed the function call in the first place.	If the user CTRL-C
 26182                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 26183                                  ; (not IRET) with carry CLEAR.	If carry is SET then an terminate system call
 26184                                  ; is simulated.
 26185                                  ;
 26186                                  ;---------------------------------------------------------------------------
 26187                                  
 26188                                  CNTCHAND:
 26189                                  	; MSDOS 6.0			; SS override
 26190                                  					; AN002; from RAWOUT
 26191                                  	;TEST	word [SS:Dos34_Flag],CTRL_BREAK_FLAG  
 26192                                  	;JNZ	short around_deadlock 	; AN002;
 26193                                  
 26194 00005789 B003                            MOV     AL,3			; Display "^C"
 26195 0000578B E889CC                          CALL	BUFOUT
 26196 0000578E E829CB                          CALL	CRLF
 26197                                  ;around_deadlock:
 26198 00005791 16                              PUSH    SS
 26199 00005792 1F                              POP     DS
 26200 00005793 803E[0303]00                    CMP     BYTE [CONSWAP],0
 26201 00005798 7403                            JZ      SHORT NOSWAP
 26202 0000579A E847E6                          CALL	SWAPBACK
 26203                                  NOSWAP:
 26204 0000579D FA                      	CLI				; Prepare to play with stack
 26205 0000579E 8E16[2005]              	MOV	SS,[USER_SS]		; User stack now restored
 26206 000057A2 8B26[1E05]              	MOV	SP,[USER_SP]
 26207 000057A6 E83CBE                          CALL	restore_world       ; User registers now restored
 26208                                  
 26209                                  	; 30/07/2018 - Retro DOS v3.0 
 26210                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 26211                                          ; 14/03/2018 - Retro DOS v2.0
 26212 000057A9 2EC606[CF02]00          	MOV     BYTE [CS:INDOS],0	
 26213 000057AF 2EC606[CE02]00                  MOV     BYTE [CS:ERRORMODE],0
 26214 000057B5 2E8926[E002]                    MOV     [CS:ConC_Spsave],SP
 26215 000057BA F8                      	clc	;30/07/2018
 26216 000057BB CD23                            INT     int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 26217                                  	;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 26218                                  			; Return: return via RETF 2 with CF set
 26219                                  			; DOS will abort program with errorlevel 0
 26220                                  			; else
 26221                                  			; interrupted DOS call continues
 26222                                  
 26223                                  	; 30/07/2018 
 26224                                  
 26225                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 26226                                  
 26227                                  ; The user has returned to us.	The circumstances we allow are:
 26228                                  ;
 26229                                  ;   IRET	We retry the operation by redispatching the system call
 26230                                  ;   CLC/RETF	POP the stack and retry
 26231                                  ;   ... 	Exit the current process with ^C exit
 26232                                  ;
 26233                                  ; User's may RETURN to us and leave interrupts on. 
 26234                                  ; Turn 'em off just to be sure
 26235                                  
 26236 000057BD FA                      	CLI
 26237                                  
 26238 000057BE 2EA3[E602]              	MOV	[CS:USER_IN_AX],ax	; save the AX
 26239 000057C2 9C                      	PUSHF				; and the flags (maybe new call)
 26240 000057C3 58                      	POP	AX
 26241                                  
 26242                                  ; See if the input stack is identical to the output stack
 26243                                  
 26244 000057C4 2E3B26[E002]                    CMP	SP,[CS:ConC_Spsave]
 26245 000057C9 7507                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 26246                                  
 26247                                  ; Repeat the operation by redispatching the system call.
 26248                                  
 26249                                  ctrlc_repeat:
 26250 000057CB 2EA1[E602]                      MOV     AX,[CS:USER_IN_AX]
 26251                                  	;transfer COMMAND           ; Repeat command otherwise
 26252                                  COMMANDJ:
 26253 000057CF E9D8BC                  	JMP	COMMAND
 26254                                  
 26255                                  ; The current SP is NOT the same as the input SP. Presume that he 
 26256                                  ; RETF'd leaving some flags on the stack and examine the input
 26257                                  
 26258                                  ctrlc_try_new:
 26259 000057D2 83C402                  	ADD	SP,2			; pop those flags
 26260                                  	;test	ax,1
 26261 000057D5 A90100                  	TEST	AX,f_Carry		; did he return with carry?
 26262 000057D8 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 26263                                  
 26264                                  	; Well...  time to abort the user.  
 26265                                  	; Signal a ^C exit and use the EXIT system call..
 26266                                  
 26267                                  ctrlc_abort:
 26268                                          ;MOV	AX,(EXIT SHL 8) + 0
 26269 000057DA B8004C                          MOV	AX, (EXIT*256) + 0  ; 4C00h
 26270 000057DD 2EC606[F902]FF          	mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 26271                                          ;transfer COMMAND	    ; give up by faking $EXIT
 26272                                  	;JMP	SHORT COMMANDJ
 26273 000057E3 E9C4BC                  	JMP	COMMAND
 26274                                  
 26275                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 26276                                  ;----------------------------------------------------------------------------
 26277                                  ;
 26278                                  ; Procedure Name : DIVOV
 26279                                  ;
 26280                                  ; Default handler for division overflow trap
 26281                                  ;
 26282                                  ;----------------------------------------------------------------------------
 26283                                  
 26284                                  DIVOV: 
 26285                                  	; 30/07/2018
 26286                                  	; 07/07/2018 - Retro DOS v3.0
 26287 000057E6 BE[BC12]                	mov	si,DIVMES
 26288 000057E9 2E8B1E[CF12]            	mov	bx,[cs:DivMesLen]
 26289 000057EE 8CC8                    	mov     ax,cs
 26290 000057F0 8ED0                    	mov	ss,ax
 26291 000057F2 BC[0607]                	mov     sp,AUXSTACK
 26292 000057F5 E80200                  	call	RealDivOv
 26293                                  	;call	_outmes ; MSDOS 6.0
 26294 000057F8 EBE0                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 26295                                  
 26296                                  ; 30/07/2018
 26297                                  
 26298                                  ; MSDOS 6.0
 26299                                  ;---------------------------------------------------------------------------
 26300                                  ;
 26301                                  ; Procedure Name : OutMes
 26302                                  ;
 26303                                  ;
 26304                                  ; OutMes: perform message output
 26305                                  ; Inputs:   SS:SI points to message
 26306                                  ;	    BX has message length
 26307                                  ; Outputs:  message to BCON
 26308                                  ;
 26309                                  ;Actually, cs:si points to the message now. The segment address is filled in
 26310                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 26311                                  ;NB. This procedure is called only from DIVOV. -SR
 26312                                  ;
 26313                                  ;---------------------------------------------------------------------------
 26314                                  
 26315                                  ;MSDOS 3.3
 26316                                  ;---------------------------------------------------------------------------
 26317                                  ; RealDivOv: perform actual divide overflow stuff.
 26318                                  ; Inputs:   none
 26319                                  ; Outputs:  message to BCON
 26320                                  ;---------------------------------------------------------------------------
 26321                                  
 26322                                  	; 30/07/2018
 26323                                  	; MSDOS 6.0
 26324                                  ;_OUTMES:
 26325                                  	;MSDOS 3.3
 26326                                  RealDivOv:
 26327                                  	 
 26328                                  	; 07/07/2018 - Retro DOS v3.0
 26329                                          ;Context ES
 26330                                          ;push	ss ; 30/07/2018
 26331 000057FA 0E                      	PUSH	CS			; get ES addressability
 26332 000057FB 07                      	POP	ES
 26333                                          ;Context DS
 26334                                  	;push	ss ; 30/07/2018
 26335 000057FC 0E                      	PUSH	CS			; get DS addressability
 26336 000057FD 1F                      	POP	DS
 26337 000057FE C606[3C03]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 26338 00005803 C606[3A03]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 26339 00005808 C706[3D03]0000                  MOV     WORD [DSKSTST],0
 26340                                  	; BX = [DivMesLen] = 19
 26341 0000580E 891E[4C03]                      MOV     [DSKSTCNT],BX
 26342 00005812 BB[3A03]                        MOV     BX,DSKSTCALL
 26343                                          ;MOV     [DSKCHRET+1],SI	; transfer address (need an EQU)
 26344                                  	; 08/09/2018
 26345 00005815 8936[4803]              	mov	[DEVIOBUF_PTR],si
 26346                                  	; MSDOS 6.0
 26347                                  					; CS is used for string, fill in 
 26348                                  					; segment address 
 26349                                  	;MOV	[DskChRet+3],CS
 26350                                  
 26351 00005819 C536[3200]                      LDS     SI,[BCON]
 26352 0000581D E8DFF6                          CALL	DEVIOCALL2
 26353                                  	; 14/03/2018
 26354                                          ;MOV     WORD [CS:DSKCHRET+1],DEVIOBUF
 26355                                  	; 08/09/2018
 26356 00005820 2EC706[4803][5E03]      	mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 26357 00005827 2EC706[4C03]0100                MOV     WORD [CS:DSKSTCNT],1
 26358 0000582E C3                              RETN
 26359                                  
 26360                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 26361                                  ;---------------------------------------------------------------------------
 26362                                  ;
 26363                                  ; Procedure Name : CHARHARD
 26364                                  ;
 26365                                  ;
 26366                                  ; Character device error handler
 26367                                  ; Same function as HARDERR
 26368                                  ;
 26369                                  ;---------------------------------------------------------------------------
 26370                                  
 26371                                  CHARHARD:
 26372                                  	; 30/07/2018
 26373                                  	; 08/07/2018 - Retro DOS v3.0
 26374                                  
 26375                                  	; MSDOS 6.0
 26376                                  ;		   			; M024 - start
 26377                                  ;	cmp	byte ptr [ERRORMODE], 0	; Q: are we in the middle of int 24
 26378                                  ;	jne	@f			; Y: allow fail
 26379                                  ;
 26380                                  ;	OR	AH, Allowed_RETRY	; assume ctrl p
 26381                                  ;
 26382                                  ;	test	byte ptr [PFLAG], -1	; Q: has ctrl p been pressed
 26383                                  ;	jnz	ctrlp			; Y: 
 26384                                  ;@@:					; M024 - end
 26385                                  
 26386                                  ; Character device error handler
 26387                                  ; Same function as HARDERR
 26388                                  
 26389                                  	;or	ah,38h
 26390 0000582F 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 26391                                  ;ctrlp:			; SS override for Allowed and EXITHOLD
 26392 00005832 368826[F702]            	mov	[SS:ALLOWED],ah
 26393                                  
 26394                                  	; 15/03/2018
 26395 00005837 368C06[1C05]                    MOV     [SS:EXITHOLD+2],ES
 26396 0000583C 36892E[1A05]                    MOV     [SS:EXITHOLD],BP
 26397 00005841 56                              PUSH    SI
 26398                                  	;and	di,0FFh
 26399 00005842 81E7FF00                        AND     DI,STECODE
 26400 00005846 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 26401 00005848 E86400                          CALL    FATALC
 26402 0000584B 5E                              POP     SI
 26403                                  	;return
 26404 0000584C C3                              RETN
 26405                                  
 26406                                  ;---------------------------------------------------------------------------
 26407                                  ;
 26408                                  ; Procedure Name : HardErr
 26409                                  ;
 26410                                  ; Hard disk error handler. Entry conditions:
 26411                                  ;	DS:BX = Original disk transfer address
 26412                                  ;	DX = Original logical sector number
 26413                                  ;	CX = Number of sectors to go (first one gave the error)
 26414                                  ;	AX = Hardware error code
 26415                                  ;	DI = Original sector transfer count	
 26416                                  ;	ES:BP = Base of drive parameters
 26417                                  ;	[READOP] = 0 for read, 1 for write
 26418                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 26419                                  ; Output:
 26420                                  ;	[FAILERR] will be set if user responded FAIL
 26421                                  ;
 26422                                  ;--------------------------------------------------------------------------
 26423                                  
 26424                                  HARDERR:
 26425                                  	; 30/07/2018
 26426                                  	; 08/07/2018 - Retro DOS v3.0
 26427 0000584D 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 26428                                          ;and	di,0FFh
 26429 0000584E 81E7FF00                	AND     DI,STECODE              ; And off status bits
 26430                                          ;CMP	DI,WRECODE		; Write Protect Error?
 26431                                  	;cmp	di,0
 26432 00005852 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 26433 00005855 750A                            JNZ     short NOSETWRPERR
 26434 00005857 50                              PUSH    AX
 26435                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26436                                          ;MOV	AL,[ES:BP+0]
 26437 00005858 268A4600                	mov	al,[ES:BP]
 26438                                          	; 15/03/2018
 26439 0000585C 36A2[D002]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 26440 00005860 58                              POP     AX
 26441                                  NOSETWRPERR:
 26442 00005861 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 26443 00005863 01C2                            ADD     DX,AX                   ; First sector number to retry
 26444 00005865 52                              PUSH    DX
 26445                                  	; 08/07/2018
 26446                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 26447 00005866 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 26448 0000586A 5A                              POP     DX
 26449 0000586B 01C3                            ADD     BX,AX                   ; First address for retry
 26450 0000586D 30E4                            XOR     AH,AH                   ; Flag disk section in error
 26451                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 26452 0000586F 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 26453 00005873 721A                            JB      SHORT ERRINT
 26454 00005875 FEC4                            INC     AH                      ; Flag for FAT
 26455                                          ;CMP	DX,[ES:BP+10H] 		; In FAT?
 26456 00005877 263B5610                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]   
 26457 0000587B 7308                    	JAE	short TESTDIR 		; No
 26458                                  		 ; Err in FAT must force recomp of freespace
 26459                                  	;mov	word[ES:BP+1Eh],-1
 26460 0000587D 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 26461 00005883 EB0A                    	JMP	SHORT ERRINT
 26462                                  TESTDIR:
 26463 00005885 FEC4                            INC     AH
 26464                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 26465 00005887 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 26466 0000588B 7202                            JB      SHORT ERRINT
 26467 0000588D FEC4                            INC     AH                      ; Must be in data area
 26468                                  ERRINT:
 26469 0000588F D0E4                            SHL     AH,1                    ; Make room for read/write bit
 26470 00005891 360A26[1005]                    OR      AH,[SS:READOP] ; 15/03/2018
 26471                                  
 26472                                  	; 15/08/2018
 26473                                  					; SS override for allowed and EXITHOLD
 26474 00005896 360A26[F702]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 26475                                  
 26476                                          ;entry   FATAL
 26477                                  FATAL:
 26478                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26479                                          ;MOV	AL,[ES:BP+0]		; Get drive number
 26480 0000589B 268A4600                	MOV	AL,[ES:BP]        
 26481                                  
 26482                                  	;entry   FATAL1
 26483                                  FATAL1:  
 26484                                  	; 15/03/2018      
 26485 0000589F 368C06[1C05]            	MOV     [SS:EXITHOLD+2],ES
 26486 000058A4 36892E[1A05]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 26487                                  	;LES	SI,[ES:BP+12H]
 26488 000058A9 26C47612                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 26489 000058AD 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 26490                                  
 26491                                  	; DI has the INT-24-style extended error. We now map the error code 
 26492                                  	; for this into the normalized get extended error set by using the 
 26493                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 26494                                  	; the device returned codes and leave all others beyond the look up 
 26495                                  	; table alone.
 26496                                  
 26497                                  	; 08/07/2018 - Retro DOS v3.0
 26498                                  FATALC:
 26499 000058AF E86701                  	call	SET_I24_EXTENDED_ERROR
 26500                                  	;cmp	di,0Ch
 26501 000058B2 83FF0C                  	CMP	DI,error_I24_gen_failure
 26502 000058B5 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 26503 000058B7 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 26504                                  					;  Only come via GetExtendedError
 26505                                  ;**
 26506                                  ;
 26507                                  ; Entry point used by REDIRector on Network I 24 errors.
 26508                                  ;
 26509                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 26510                                  ;
 26511                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 26512                                  ;     EXITHOLD set for restore of ES:BP.
 26513                                  ;
 26514                                  	;entry	NET_I24_ENTRY
 26515                                  NET_I24_ENTRY:
 26516                                  GOT_RIGHT_CODE:
 26517 000058BA 36803E[CE02]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 26518 000058C0 7404                            JZ	SHORT NoSetFail
 26519 000058C2 B003                    	MOV	AL,3
 26520 000058C4 EB51                    	JMP	short FailRet
 26521                                  NoSetFail:
 26522 000058C6 368926[2205]                    MOV     [SS:CONTSTK],SP		; SS override
 26523 000058CB 16                              PUSH	SS
 26524 000058CC 07                              POP	ES
 26525                                      
 26526                                  	; Wango!!! We may need to free some user state info... In 
 26527                                  	; particular, we may have locked down a JFN for a user and he may 
 26528                                  	; NEVER return to us. Thus,we need to free it here and then 
 26529                                  	; reallocate it when we come back.
 26530                                  
 26531 000058CD 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26532 000058D3 740C                    	JZ	short _NoFree
 26533 000058D5 1E                      	push	ds
 26534 000058D6 56                      	push	si
 26535 000058D7 36C536[4605]            	LDS	SI,[SS:PJFN]
 26536 000058DC C604FF                  	MOV	BYTE [SI],0FFH
 26537 000058DF 5E                      	pop	si
 26538 000058E0 1F                      	pop	ds
 26539                                  
 26540                                  _NoFree:
 26541 000058E1 FA                      	CLI
 26542                                  					; Prepare to play with stack
 26543 000058E2 36FE06[CE02]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 26544 000058E7 36FE0E[CF02]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 26545 000058EC 368E16[2005]                    MOV     SS,[SS:USER_SS]
 26546 000058F1 268B26[1E05]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 26547                                  	;int	24h	
 26548 000058F6 CD24                            INT     int_fatal_abort         ; Fatal error interrupt vector, must preserve ES
 26549 000058F8 268926[1E05]                    MOV     [ES:USER_SP],SP         ; restore our stack
 26550 000058FD 268C16[2005]                    MOV     [ES:USER_SS],SS
 26551 00005902 8CC5                            MOV     BP,ES
 26552 00005904 8ED5                            MOV     SS,BP
 26553 00005906 368B26[2205]                    MOV     SP,[SS:CONTSTK]
 26554 0000590B 36FE06[CF02]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 26555 00005910 36C606[CE02]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 26556 00005916 FB                              STI
 26557                                  FailRet:
 26558 00005917 36C42E[1A05]                    LES     BP,[SS:EXITHOLD]
 26559                                  	
 26560                                  	; 08/07/2018
 26561                                  
 26562                                  	; Triage the user's reply.
 26563                                  
 26564 0000591C 3C01                    	CMP	AL,1
 26565 0000591E 7235                    	JB	short CheckIgnore	; 0 => ignore
 26566 00005920 743D                    	JZ	short CheckRetry	; 1 => retry
 26567 00005922 3C03                    	CMP	AL,3			; 3 => fail
 26568 00005924 7543                    	JNZ	short DoAbort 		; 2, invalid => abort
 26569                                  
 26570                                  	; The reply was fail.  See if we are allowed to fail.
 26571                                  
 26572                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 26573                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 26574                                  	;test	byte [ss:ALLOWED],8
 26575 00005926 36F606[F702]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 26576 0000592C 743B                    	jz	short DoAbort	; No, do abort
 26577                                  DoFail:
 26578 0000592E B003                    	MOV	AL,3		; just in case...
 26579                                  				; AN000;EO. I24 error disabled
 26580                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 26581                                  	;test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 26582                                  	;jnz	short Cleanup 		; AN000;EO. no
 26583                                  	
 26584 00005930 36FE06[F602]            	inc	byte [SS:FAILERR]	; Tell everybody
 26585                                  
 26586                                  CleanUp:
 26587 00005935 36C606[D002]FF          	MOV	byte [SS:WPERR],-1
 26588 0000593B 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26589                                  	;jnz	short CleanUp2
 26590                                  	;retn
 26591 00005941 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 26592                                  ;CleanUp2:
 26593 00005943 1E                      	push	ds
 26594 00005944 56                      	push	si
 26595 00005945 50                      	push	ax
 26596 00005946 36A1[4205]              	MOV	AX,[ss:SFN]
 26597 0000594A 36C536[4605]            	LDS	SI,[ss:PJFN]
 26598 0000594F 8804                    	MOV	[SI],AL
 26599 00005951 58                      	pop	ax
 26600 00005952 5E                      	pop	si
 26601 00005953 1F                      	pop	ds
 26602                                  Cleanup_retn:
 26603 00005954 C3                      	retn
 26604                                  
 26605                                  	; The reply was IGNORE. See if we are allowed to ignore.
 26606                                  
 26607                                  CheckIgnore:
 26608                                  	;test	byte [ss:ALLOWED],20h
 26609 00005955 36F606[F702]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 26610 0000595B 74D1                    	jz	short DoFail			 ; No, do fail
 26611 0000595D EBD6                    	jmp	short CleanUp
 26612                                  
 26613                                  	; The reply was RETRY. See if we are allowed to retry.
 26614                                  
 26615                                  CheckRetry:
 26616                                  	;test	byte [ss:ALLOWED],10h
 26617 0000595F 36F606[F702]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 26618 00005965 74C7                    	jz	short DoFail			; No, do fail
 26619 00005967 EBCC                    	JMP	short CleanUp
 26620                                  
 26621                                  	; The reply was ABORT.
 26622                                  
 26623                                  DoAbort:
 26624 00005969 16                      	push	ss
 26625 0000596A 1F                      	pop	ds
 26626                                  
 26627 0000596B 803E[0303]00            	CMP	byte [CONSWAP],0
 26628 00005970 7403                    	JZ	short NOSWAP2
 26629 00005972 E86FE4                  	call	SWAPBACK
 26630                                  NOSWAP2:
 26631                                  	; See if we are to truly abort. If we are in the process of aborting, 
 26632                                  	; turn this abort into a fail.
 26633                                  
 26634                                  	;test	byte [fAborting],0FFh
 26635                                  	;jnz	short DoFail
 26636                                  
 26637 00005975 803E[0503]00            	cmp	byte [fAborting],0
 26638 0000597A 75B2                    	JNZ	short DoFail
 26639                                  
 26640                                  	; Set return code
 26641                                  
 26642 0000597C C606[1705]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR
 26643 00005981 30C0                    	XOR	AL,AL
 26644                                  
 26645                                  	; we are truly aborting the process. Go restore information from 
 26646                                  	; the PDB as necessary.
 26647                                  
 26648 00005983 E93B0B                  	jmp	exit_inner
 26649                                  
 26650                                  ;**
 26651                                  ;
 26652                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 26653                                  ; different, then an old-style return is performed. If they are the same,
 26654                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 26655                                  ; the source of the terminate addresses.
 26656                                  ;
 26657                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 26658                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 26659                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 26660                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 26661                                  ; flag that will indicate that if any abort code is seen, we just continue the
 26662                                  ; operation. In essence, we dis-allow the abort response.
 26663                                  ;
 26664                                  ; output:   none.
 26665                                  ;
 26666                                  	;entry	reset_environment
 26667                                  	
 26668                                  reset_environment:
 26669                                  	; 30/07/2018 - Retro DOS v3.0
 26670                                  	; IBMDOS.COM (MSDOS3.3) - Offset 588Ah 
 26671                                  
 26672                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 26673                                  
 26674 00005986 1E                      	PUSH	DS			; save PDB of process
 26675                                  
 26676                                  	; There are no critical sections in force. Although we may enter 
 26677                                  	; here with critical sections locked down, they are no longer 
 26678                                  	; relevant. We may safely free all allocated resources.
 26679                                  
 26680 00005987 B482                    	MOV	AH,82h
 26681                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 26682                                  	;int	2Ah 	
 26683 00005989 CD2A                    	INT	int_IBM
 26684                                  
 26685                                  					; SS override
 26686 0000598B 36C606[0503]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 26687                                  
 26688                                  					; DOS 4.00 doesn't need it
 26689                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 26690                                  					; Allow REDIR to clear some stuff
 26691                                  					; On process exit.
 26692 00005991 B82211                  	mov     ax, 1122h
 26693 00005994 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 26694                                  			; SS = DOS CS
 26695                                  	;mov	al,22h	
 26696 00005996 B022                    	MOV	AL,int_terminate
 26697 00005998 E8C5C2                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 26698                                  
 26699 0000599B 59                      	POP	CX			; get ThisPDB
 26700 0000599C 06                      	push	es
 26701 0000599D 53                      	push	bx			; save return address
 26702                                  
 26703 0000599E 368B1E[DE02]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 26704 000059A3 8EDB                    	MOV	DS,BX
 26705 000059A5 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 26706                                  
 26707                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 26708                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 26709                                  	; is not Exit_keep_process
 26710                                  	
 26711 000059A8 39D8                    	CMP	AX,BX
 26712 000059AA 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 26713 000059AC 39CB                    	CMP	BX,CX
 26714 000059AE 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 26715 000059B0 50                      	PUSH	AX			; save parent
 26716                                  
 26717                                  					; SS override
 26718                                  	;cmp	byte [SS:EXIT_TYPE],3
 26719 000059B1 36803E[1705]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 26720 000059B7 7406                    	JZ	short reset_to_parent 	; keeping this process
 26721                                  
 26722                                  	; We are truly removing a process. Free all allocation blocks 
 26723                                  	; belonging to this PDB
 26724                                  
 26725                                  	;invoke	arena_free_process
 26726 000059B9 E83C0B                  	call	arena_free_process
 26727                                  
 26728                                  	; Kill off remainder of this process. Close file handles and signal 
 26729                                  	; to relevant network folks that this process is dead. Remember that 
 26730                                  	; CurrentPDB is STILL the current process!
 26731                                  
 26732                                  	;invoke	DOS_ABORT
 26733 000059BC E890E0                  	call	DOS_ABORT
 26734                                  
 26735                                  reset_to_parent:
 26736                                  					; SS override
 26737 000059BF 368F06[DE02]            	POP	word [SS:CurrentPDB]	; set up process as parent
 26738                                  
 26739                                  reset_return:				; come here for normal return
 26740                                  	;Context DS			; DS is used to refer to DOSDATA  
 26741 000059C4 16                      	push	ss
 26742 000059C5 1F                      	pop	ds	
 26743                                  
 26744 000059C6 B0FF                    	MOV	AL,-1
 26745                                  
 26746                                  	; make sure that everything is clean In this case ignore any errors, 
 26747                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 26748                                  
 26749                                  	;EnterCrit critDisk
 26750 000059C8 E89AC6                  	call	EcritDisk
 26751                                  	;invoke	FLUSHBUF
 26752 000059CB E86405                  	call	FLUSHBUF
 26753                                  	;LeaveCrit critDisk
 26754 000059CE E89CC6                  	call	LcritDisk
 26755                                  
 26756                                  	; Decrement open ref. count if we had done a virtual open earlier.
 26757                                  
 26758 000059D1 E8C3F8                  	call	CHECK_VIRT_OPEN
 26759 000059D4 FA                      	CLI
 26760 000059D5 C606[CF02]00            	MOV	BYTE [INDOS],0		; Go to known state
 26761 000059DA C606[D002]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 26762 000059DF C606[0503]00            	MOV	byte [fAborting],0	; let aborts occur
 26763 000059E4 8F06[1A05]              	POP	WORD [EXITHOLD]
 26764 000059E8 8F06[1C05]              	POP	WORD [EXITHOLD+2]
 26765                                  
 26766                                  	; Snake into multitasking... Get stack from CurrentPDB person
 26767                                  
 26768 000059EC 8E1E[DE02]              	MOV	DS,[CurrentPDB]
 26769 000059F0 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 26770 000059F4 8B262E00                	MOV	SP,[PDB.USER_STACK]
 26771                                  
 26772 000059F8 E8EABB                  	call	restore_world
 26773                                  
 26774                                  	; MSDOS 6.0
 26775                                  	;push	ax			; set up ds, but save ds in TEMPSEG 
 26776                                  	;mov	ax, ds			; and not on stack.
 26777                                  	;getdseg <ds>			; ds -> dosdata
 26778                                  	;mov	TempSeg, ax
 26779                                  	;pop	ax
 26780                                  					; set up ds to DOSDATA
 26781 000059FB 2EA3[1E05]              	MOV	[CS:USER_SP],AX
 26782                                  
 26783 000059FF 58                      	POP	AX			; suck off CS:IP of interrupt...
 26784 00005A00 58                      	POP	AX
 26785 00005A01 58                      	POP	AX
 26786                                  
 26787                                  ; M011 : BEGIN
 26788                                  
 26789                                  	; MSDOS 3.3
 26790                                  ;	MOV	AX,0F202h	; STI
 26791                                  
 26792                                  	; MSDOS 6.0
 26793 00005A02 9F                      	LAHF
 26794 00005A03 86E0                    	XCHG	AH, AL
 26795 00005A05 2402                    	AND	AL, 02
 26796 00005A07 B4F2                    	MOV	AH, 0F2h
 26797                                  
 26798                                  ; M011 : END
 26799                                  
 26800                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26801 00005A09 50                      	PUSH	AX
 26802                                   
 26803 00005A0A 2EFF36[1C05]            	PUSH	word [CS:EXITHOLD+2]
 26804 00005A0F 2EFF36[1A05]            	PUSH	word [CS:EXITHOLD]
 26805                                  
 26806 00005A14 2EA1[1E05]              	MOV	AX,[CS:USER_SP]
 26807                                  
 26808                                  	; MSDOS 6.0
 26809                                  	;mov	ds,TempSeg	; restore ds
 26810                                  
 26811 00005A18 CF                      	IRET			; Long return back to user terminate address
 26812                                  
 26813                                  ;---------------------------------------------------------------------------
 26814                                  ;
 26815                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 26816                                  ;
 26817                                  ; This routine handles extended error codes.
 26818                                  ; Input : DI = error code from device
 26819                                  ; Output: All EXTERR fields are set
 26820                                  ;
 26821                                  ;--------------------------------------------------------------------------
 26822                                  
 26823                                  SET_I24_EXTENDED_ERROR:
 26824 00005A19 50                      	PUSH	AX
 26825                                  					; ErrMap24End is in DOSDATA
 26826 00005A1A B8[030E]                	MOV	AX,ErrMap24End
 26827 00005A1D 2D[F30D]                	SUB	AX,ErrMap24
 26828                                  					; Change to dosdata to access 
 26829                                  					; ErrMap24 and EXTERR -SR
 26830                                  	; MSDOS 6.0
 26831                                  	;push	ds
 26832                                  	;getdseg <ds>			; ds ->dosdata
 26833                                  
 26834                                  	; AX is the index of the first unavailable error. Do not translate 
 26835                                  	; if greater or equal to AX.
 26836                                  
 26837 00005A20 39C7                    	CMP	DI,AX
 26838 00005A22 89F8                    	MOV	AX,DI
 26839 00005A24 7307                    	JAE	short NoTrans
 26840                                  
 26841 00005A26 2E8A85[F30D]            	MOV	AL,[CS:DI+ErrMap24]
 26842 00005A2B 30E4                    	XOR	AH,AH
 26843                                  NoTrans:
 26844 00005A2D 2EA3[D202]              	MOV	[CS:EXTERR],AX
 26845                                  	;pop	ds
 26846                                  	;assume	ds:nothing
 26847 00005A31 58                      	POP	AX
 26848                                  
 26849                                  	; Now Extended error is set correctly. Translate it to get correct 
 26850                                  	; error locus class and recommended action.
 26851                                  
 26852 00005A32 56                      	PUSH	SI
 26853                                  					; ERR_TABLE_24 is in DOSCODE 
 26854 00005A33 BE[A30D]                	MOV	SI,ERR_TABLE_24
 26855 00005A36 E807BD                  	call	CAL_LK			; Set other extended error fields
 26856 00005A39 5E                      	POP	SI
 26857 00005A3A C3                      	retn
 26858                                  
 26859                                  ;============================================================================
 26860                                  ; FAT.ASM, MSDOS 6.0, 1991
 26861                                  ;============================================================================
 26862                                  ; 30/07/2018 - Retro DOS v3.0
 26863                                  
 26864                                  ;	TITLE	FAT - FAT maintenance routines
 26865                                  ;	NAME	FAT
 26866                                  
 26867                                  ;**	FAT.ASM
 26868                                  ;
 26869                                  ;	Low level local device routines for performing disk change sequence,
 26870                                  ;	setting cluster validity, and manipulating the FAT
 26871                                  ;
 26872                                  ;	IsEof
 26873                                  ;	UNPACK
 26874                                  ;	PACK
 26875                                  ;	MAPCLUSTER
 26876                                  ;	FATREAD_SFT
 26877                                  ;	FATREAD_CDS
 26878                                  ;	FAT_operation
 26879                                  ;
 26880                                  ;	Revision history:
 26881                                  ;
 26882                                  ;	  AN000  version Jan. 1988
 26883                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 26884                                  ;
 26885                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 26886                                  ;	       from CL0FATENTRY rather than disk.
 26887                                  ;
 26888                                  
 26889                                  ;Break <IsEOF - check the quantity in BX for EOF>
 26890                                  ;----------------------------------------------------------------------------
 26891                                  ;
 26892                                  ; Procedure Name : IsEOF
 26893                                  ;
 26894                                  ; IsEOF - check the fat value in BX for eof.
 26895                                  ;
 26896                                  ;   Inputs:	ES:BP point to DPB
 26897                                  ;		BX has fat value
 26898                                  ;   Outputs:	JAE eof
 26899                                  ;   Registers modified: none
 26900                                  ;
 26901                                  ;---------------------------------------------------------------------------
 26902                                  
 26903                                  IsEOF:
 26904                                  	;cmp	word [es:bp+0Dh],0FF6h
 26905 00005A3B 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 26906 00005A41 730B                    	JAE	short EOF16			; yes, check for eof there
 26907                                  
 26908                                  ;J.K. 8/27/86
 26909                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 26910                                  ;of any media that has "F0"(Other) as a MediaByte.
 26911                                  ;Hopely, this does not create any side effect for those who may use any value
 26912                                  ;other than "FF8-FFF" as an EOF for their own file.
 26913                                  
 26914 00005A43 81FBF00F                	cmp	bx,0FF0h
 26915 00005A47 7404                    	je	short IsEOF_other
 26916                                  
 26917 00005A49 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 26918                                  IsEOF_other:
 26919 00005A4D C3                      	retn
 26920                                  EOF16:
 26921 00005A4E 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 26922 00005A51 C3                      	retn
 26923                                  
 26924                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 26925                                  ;---------------------------------------------------------------------------
 26926                                  ;
 26927                                  ; Procedur Name : UNPACK
 26928                                  ;
 26929                                  ; Inputs:
 26930                                  ;	BX = Cluster number (may be full 16-bit quantity)
 26931                                  ;	ES:BP = Base of drive parameters
 26932                                  ; Outputs:
 26933                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 26934                                  ;	Zero set means DI=0 (free cluster)
 26935                                  ;	Carry set means error (currently user FAILed to I 24)
 26936                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 26937                                  ;
 26938                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 26939                                  ;
 26940                                  ;----------------------------------------------------------------------------
 26941                                  
 26942                                  UNPACK:
 26943                                  	; MSDOS 6.0			; M014 - Start
 26944                                  	;or	bx, bx			; Q: are we unpacking cluster 0
 26945                                  	;jnz	short up_cont		; N: proceed with normal unpack
 26946                                  	;mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 26947                                  	;or	di,di 			; return z if di=0
 26948                                  	;retn				; done
 26949                                  ;up_cont:				; M014 - End
 26950                                  	;cmp	bx,[es:bp+0Dh]
 26951 00005A52 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 26952 00005A56 7726                    	JA	short HURTFAT
 26953 00005A58 E8B900                  	CALL	MAPCLUSTER
 26954 00005A5B 721E                    	jc	short _DoContext
 26955 00005A5D 8B3D                    	MOV	DI,[DI]
 26956 00005A5F 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 26957 00005A61 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 26958 00005A65 81FEF60F                	CMP	SI,4096-10
 26959 00005A69 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 26960 00005A6B 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 26961 00005A6D EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 26962                                  
 26963                                  High12:
 26964 00005A6F D1EF                    	SHR	DI,1
 26965 00005A71 D1EF                    	SHR	DI,1
 26966 00005A73 D1EF                    	SHR	DI,1
 26967 00005A75 D1EF                    	SHR	DI,1
 26968                                  Unpack12:
 26969 00005A77 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 26970                                  _DoContext:
 26971 00005A7B 16                      	PUSH	SS
 26972 00005A7C 1F                      	POP	DS
 26973 00005A7D C3                      	retn
 26974                                  
 26975                                  HURTFAT:
 26976                                  	;mov	word [es:bp+1Eh],0FFFFh
 26977 00005A7E 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 26978 00005A84 50                      	PUSH	AX
 26979 00005A85 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 26980                                  
 26981                                  ;hkn; SS override
 26982 00005A87 36C606[F702]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 26983                                  ;
 26984                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 26985                                  ;
 26986 00005A8D BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 26987 00005A90 E808FE                  	call	FATAL
 26988 00005A93 3C03                    	CMP	AL,3
 26989 00005A95 F8                      	CLC
 26990 00005A96 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 26991 00005A98 F9                      	STC				; User said FAIL
 26992                                  OKU_RET:
 26993 00005A99 58                      	POP	AX
 26994                                  hurtfat_retn:
 26995 00005A9A C3                      	retn
 26996                                  
 26997                                  ;Break	<PACK -- PACK FAT ENTRIES>
 26998                                  ;----------------------------------------------------------------------------
 26999                                  ;
 27000                                  ; Procedure Name : PACK
 27001                                  ;
 27002                                  ; Inputs:
 27003                                  ;	BX = Cluster number
 27004                                  ;	DX = Data
 27005                                  ;	ES:BP = Pointer to drive DPB
 27006                                  ; Outputs:
 27007                                  ;	The data is stored in the FAT at the given cluster.
 27008                                  ;	SI,DX,DI all destroyed
 27009                                  ;	Carry set means error (currently user FAILed to I 24)
 27010                                  ;	No other registers affected
 27011                                  ;
 27012                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 27013                                  ;
 27014                                  ;---------------------------------------------------------------------------
 27015                                  
 27016                                  PACK:
 27017                                  	; MSDOS 6.0			; M014 - start
 27018                                  	;or	bx, bx			; Q: are we packing cluster 0
 27019                                  	;jnz	short p_cont		; N: proceed with normal pack
 27020                                  	;mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 27021                                  	;retn				; done
 27022                                  ;p_cont:				; M014 - end
 27023 00005A9B E87600                  	CALL	MAPCLUSTER
 27024 00005A9E 72DB                    	JC	short _DoContext
 27025 00005AA0 8B35                    	MOV	SI,[DI]
 27026 00005AA2 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 27027 00005AA4 51                      	PUSH	CX			; move data to upper 12 bits
 27028 00005AA5 B104                    	MOV	CL,4
 27029 00005AA7 D3E2                    	SHL	DX,CL
 27030 00005AA9 59                      	POP	CX
 27031 00005AAA 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 27032 00005AAD EB14                    	JMP	SHORT PACKIN
 27033                                  ALIGNED:
 27034                                  	;cmp	word [es:bp+0Dh],0FF6h
 27035 00005AAF 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 27036 00005AB5 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 27037 00005AB7 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 27038 00005ABB 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 27039 00005ABF EB02                    	JMP	SHORT PACKIN		; MZ go store
 27040                                  Pack16:
 27041 00005AC1 31F6                    	XOR	SI,SI			; MZ no original data
 27042                                  PACKIN:
 27043 00005AC3 09D6                    	OR	SI,DX
 27044 00005AC5 8935                    	MOV	[DI],SI
 27045                                  
 27046                                  ;hkn; SS override
 27047 00005AC7 36C536[7405]            	LDS	SI,[SS:CURBUF]
 27048                                  	; MSDOS 6.0
 27049                                  	;TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27050                                  					;LB. if already dirty		  ;AN000;
 27051                                  	;JNZ	short yesdirty6		;LB.  don't increment dirty count ;AN000;
 27052                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27053                                  	
 27054                                  	;or	byte [si+5],40h
 27055 00005ACC 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27056                                  ;yesdirty6:				;LB.				  ;AN000;
 27057                                  ;hkn; SS override
 27058 00005AD0 36803E[1305]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 27059                                  ;hkn; SS is DOSDATA
 27060 00005AD6 16                      	push	ss
 27061 00005AD7 1F                      	pop	ds
 27062 00005AD8 74C0                    	jz	short hurtfat_retn	; Carry clear
 27063 00005ADA 50                      	PUSH	AX
 27064 00005ADB 53                      	PUSH	BX
 27065 00005ADC 51                      	PUSH	CX
 27066 00005ADD A1[2805]                	MOV	AX,[CLUSSAVE]
 27067 00005AE0 8E1E[7605]              	MOV	DS,[CURBUF+2]
 27068 00005AE4 83C610                  	ADD	SI,BUFINSIZ  ; add si,16
 27069 00005AE7 8824                    	MOV	[SI],AH
 27070                                  ;hkn; SS is DOSDATA
 27071                                  	;Context DS
 27072 00005AE9 16                      	push	ss
 27073 00005AEA 1F                      	pop	ds	
 27074 00005AEB 50                      	PUSH	AX
 27075                                  	; MSDOS 6.0
 27076                                  	;MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 27077                                  	;MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 27078                                  
 27079 00005AEC 8B16[2A05]              	MOV	DX,[CLUSSEC]
 27080 00005AF0 BE0100                  	MOV	SI,1
 27081 00005AF3 30C0                    	XOR	AL,AL
 27082 00005AF5 E89403                  	call	GETBUFFRB
 27083 00005AF8 58                      	POP	AX
 27084 00005AF9 7213                    	JC	short POPP_RET
 27085 00005AFB C53E[7405]              	LDS	DI,[CURBUF]
 27086                                  	; MSDOS 6.0
 27087                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 27088                                  	;				;LB. if already dirty		  ;AN000;
 27089                                  	;JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27090                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 27091                                  	
 27092                                  	;or	byte [di+5],40h
 27093 00005AFF 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 27094                                  yesdirty7:
 27095 00005B03 83C710                  	ADD	DI,BUFINSIZ ; add di,16
 27096 00005B06 4F                      	DEC	DI
 27097                                  	;add	di,[es:bp+2]
 27098 00005B07 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 27099 00005B0B 8805                    	MOV	[DI],AL
 27100 00005B0D F8                      	CLC
 27101                                  POPP_RET:
 27102 00005B0E 16                      	PUSH	SS
 27103 00005B0F 1F                      	POP	DS
 27104 00005B10 59                      	POP	CX
 27105 00005B11 5B                      	POP	BX
 27106 00005B12 58                      	POP	AX
 27107 00005B13 C3                      	retn
 27108                                  
 27109                                  ; 31/07/2018 - Retro DOS v3.0
 27110                                  
 27111                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 27112                                  ;---------------------------------------------------------------------------
 27113                                  ;
 27114                                  ; Procedure Name : MAPCLUSTER
 27115                                  ;
 27116                                  ; Inputs:
 27117                                  ;	ES:BP Points to DPB
 27118                                  ;	BX Is cluster number
 27119                                  ; Function:
 27120                                  ;	Get a pointer to the cluster
 27121                                  ; Outputs:
 27122                                  ;	DS:DI Points to contents of FAT for given cluster
 27123                                  ;	DS:SI Points to start of buffer
 27124                                  ;	Zero Not set if cluster data is in high 12 bits of word
 27125                                  ;	Zero set if cluster data is in low 12 or 16 bits
 27126                                  ;	Carry set if failed.
 27127                                  ; SI is destroyed.
 27128                                  ;
 27129                                  ;---------------------------------------------------------------------------
 27130                                  
 27131                                  MAPCLUSTER:
 27132                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 27133 00005B14 C606[1305]00            	MOV	BYTE [CLUSSPLIT],0
 27134                                  	;SAVE	<AX,BX,CX,DX>
 27135 00005B19 50                      	push	ax
 27136 00005B1A 53                      	push	bx
 27137 00005B1B 51                      	push	cx
 27138 00005B1C 52                      	push	dx
 27139 00005B1D 89D8                    	MOV	AX,BX			; AX = BX
 27140 00005B1F 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 27141 00005B25 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 27142 00005B27 D1E8                    	SHR	AX,1			; AX = BX/2
 27143                                  Map16:	
 27144                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 27145                                  	;XOR	DI,DI			; >32mb fat ;AN000;
 27146                                  	
 27147 00005B29 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 27148                                  	;ADC	DI,DI			; >32mb fat ;DI is zero before op;AN000;
 27149 00005B2B 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 27150                                  
 27151                                  ;IF FastDiv
 27152                                  ;
 27153                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 27154                                  ; case and apply a really fast algorithm to get the desired results
 27155                                  ;
 27156                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 27157                                  ; Fast method takes 39+20*4=119
 27158                                  ;
 27159                                  ; This saves a bunch.
 27160                                  ;
 27161 00005B2F 81F90002                	CMP	CX,512			; 4	Is this 512 byte sector?
 27162 00005B33 750E                    	jne	short _DoDiv		; 4     for no jump
 27163 00005B35 89C2                    	MOV	DX,AX			; 2	get set for remainder
 27164 00005B37 81E2FF01                	AND	DX,512-1		; 4	Form remainder
 27165 00005B3B 88E0                    	MOV	AL,AH			; 2     Quotient in formation in AL
 27166                                  	; MDOS 6.0
 27167                                  	;shr	di,1			; 2
 27168                                  	;rcr	al,1			; 2
 27169                                  	; MDOS 3.3
 27170 00005B3D D0E8                    	shr	al,1	
 27171                                  	; MDOS 3.3 (& MSDOS 6.0)
 27172 00005B3F 30E4                    	xor	ah,ah			; 3
 27173 00005B41 EB04                    	jmp	short DivDone		; 16
 27174                                  _DoDiv:
 27175                                  ;ENDIF
 27176                                  	; MSDOS 6.0
 27177                                  	;mov	dx,di			; 2
 27178                                  	; MSDOS 3.3
 27179 00005B43 31D2                    	xor	dx,dx
 27180                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 27181 00005B45 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 27182                                  ;IF FastDiv
 27183                                  DivDone:
 27184                                  ;ENDIF
 27185 00005B47 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 27186 00005B4B 49                      	DEC	CX			; CX is sector size - 1
 27187                                  	;SAVE	<AX,DX,CX>
 27188 00005B4C 50                      	push	ax
 27189 00005B4D 52                      	push	dx
 27190 00005B4E 51                      	push	cx
 27191 00005B4F 89C2                    	MOV	DX,AX
 27192                                  	; MSDOS 6.0
 27193                                  	;MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 27194 00005B51 30C0                    	XOR	AL,AL
 27195 00005B53 BE0100                  	MOV	SI,1
 27196                                  	;invoke	GETBUFFRB
 27197 00005B56 E83303                  	call	GETBUFFRB
 27198                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 27199 00005B59 59                      	pop	cx
 27200 00005B5A 58                      	pop	ax
 27201 00005B5B 5A                      	pop	dx
 27202 00005B5C 724B                    	JC	short MAP_POP
 27203 00005B5E C536[7405]              	LDS	SI,[CURBUF]
 27204 00005B62 8D7C10                  	LEA	DI,[SI+BUFINSIZ]  ; [si+16]
 27205 00005B65 01C7                    	ADD	DI,AX
 27206 00005B67 39C8                    	CMP	AX,CX
 27207 00005B69 752B                    	JNZ	short MAPRET
 27208 00005B6B 8A05                    	MOV	AL,[DI]
 27209                                  	;Context DS		 	;hkn; SS is DOSDATA
 27210 00005B6D 16                      	push	ss
 27211 00005B6E 1F                      	pop	ds	
 27212 00005B6F FE06[1305]              	INC	BYTE [CLUSSPLIT]
 27213 00005B73 A2[2805]                	MOV	[CLUSSAVE],AL
 27214 00005B76 8916[2A05]              	MOV	[CLUSSEC],DX
 27215                                  	; MSDOS 6.0
 27216                                  	;MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 27217 00005B7A 42                      	INC	DX
 27218                                  	;MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 27219 00005B7B 30C0                    	XOR	AL,AL
 27220 00005B7D BE0100                  	MOV	SI,1
 27221                                  	;invoke	GETBUFFRB
 27222 00005B80 E80903                  	call	GETBUFFRB
 27223 00005B83 7224                    	JC	short MAP_POP
 27224 00005B85 C536[7405]              	LDS	SI,[CURBUF]
 27225 00005B89 8D7C10                  	LEA	DI,[SI+BUFINSIZ]
 27226 00005B8C 8A05                    	MOV	AL,[DI]
 27227                                  	;Context DS			;hkn; SS is DOSDATA
 27228 00005B8E 16                      	push	ss
 27229 00005B8F 1F                      	pop	ds
 27230 00005B90 A2[2905]                	MOV	[CLUSSAVE+1],AL
 27231                                  
 27232                                  ;hkn; CLUSSAVE is in DOSDATA
 27233 00005B93 BF[2805]                	MOV	DI,CLUSSAVE
 27234                                  MAPRET:
 27235                                  	;RESTORE <DX,CX,BX>
 27236 00005B96 5A                      	pop	dx
 27237 00005B97 59                      	pop	cx
 27238 00005B98 5B                      	pop	bx
 27239 00005B99 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 27240 00005B9B 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 27241 00005BA1 7302                    	JAE	short MapSet		; MZ no, set flags
 27242 00005BA3 89D8                    	MOV	AX,BX
 27243                                  MapSet:
 27244 00005BA5 A801                    	TEST	AL,1			; set zero flag if not on boundary
 27245                                  	;RESTORE <AX>
 27246 00005BA7 58                      	pop	ax
 27247 00005BA8 C3                      	retn
 27248                                  
 27249                                  MAP_POP:
 27250                                  	;RESTORE <DX,CX,BX,AX>
 27251 00005BA9 5A                      	pop	dx
 27252 00005BAA 59                      	pop	cx
 27253 00005BAB 5B                      	pop	bx
 27254 00005BAC 58                      	pop	ax
 27255 00005BAD C3                      	retn
 27256                                  
 27257                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 27258                                  ;----------------------------------------------------------------------------
 27259                                  ;
 27260                                  ; Procedure Name : FATREAD_SFT
 27261                                  ;
 27262                                  ; Inputs:
 27263                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 27264                                  ;		giving a NET SFT will produce system crashing results).
 27265                                  ;	DS DOSDATA
 27266                                  ; Function:
 27267                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 27268                                  ;	if disk changed.
 27269                                  ;	In other respects, same as FATREAD_CDS.
 27270                                  ;	(note ES:DI destroyed!)
 27271                                  ; Outputs:
 27272                                  ;	Carry set if error (currently user FAILed to I 24)
 27273                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 27274                                  ;	as far as invalidating curdir_ID is concerned.
 27275                                  ;	Since getting a true disk changed on this call is a screw up
 27276                                  ;	anyway, that's the way it goes.
 27277                                  ;
 27278                                  ;---------------------------------------------------------------------------
 27279                                  
 27280                                  FATREAD_SFT:
 27281 00005BAE 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 27282                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27283 00005BB2 268A4600                	mov	AL,[ES:BP]
 27284 00005BB6 A2[1105]                	MOV	[THISDRV],AL
 27285 00005BB9 E838BB                  	call	GOTDPB			;Set THISDPB
 27286 00005BBC E87A00                  	CALL	FAT_GOT_DPB
 27287                                  fatread_sft_retn:
 27288 00005BBF C3                      	retn
 27289                                  
 27290                                  ;----------------------------------------------------------------------------
 27291                                  ;
 27292                                  ; Procedure Name : FATREAD_CDS
 27293                                  ;
 27294                                  ; Inputs:
 27295                                  ;	DS:DOSDATA
 27296                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 27297                                  ;		giving a NET or NUL CDS will produce system crashing results).
 27298                                  ; Function:
 27299                                  ;	If disk may have been changed, media is determined and buffers are
 27300                                  ;	flagged invalid. If not, no action is taken.
 27301                                  ; Outputs:
 27302                                  ;	ES:BP = Drive parameter block
 27303                                  ;	THISDPB = ES:BP
 27304                                  ;	THISDRV set
 27305                                  ;	Carry set if error (currently user FAILed to I 24)
 27306                                  ; DS preserved , all other registers destroyed
 27307                                  ;
 27308                                  ;---------------------------------------------------------------------------
 27309                                  
 27310                                  FATREAD_CDS:
 27311 00005BC0 06                      	PUSH	ES
 27312 00005BC1 57                      	PUSH	DI
 27313                                  	;les	bp,[es:di+45h]
 27314 00005BC2 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 27315                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27316 00005BC6 268A4600                	mov	AL,[ES:BP]
 27317 00005BCA A2[1105]                	MOV	[THISDRV],AL
 27318 00005BCD E824BB                  	call	GOTDPB			;Set THISDPB
 27319 00005BD0 E86600                  	CALL	FAT_GOT_DPB
 27320 00005BD3 5F                      	POP	DI			;Get back CDS pointer
 27321 00005BD4 07                      	POP	ES
 27322 00005BD5 72E8                    	jc	short fatread_sft_retn
 27323 00005BD7 7539                    	JNZ	short NO_CHANGE		;Media NOT changed
 27324                                  
 27325                                  ;	Media changed. We now need to find all CDS structures which use this
 27326                                  ;	DPB and invalidate their ID pointers.
 27327                                  
 27328                                  MED_CHANGE:
 27329 00005BD9 31C0                    	XOR	AX,AX
 27330 00005BDB 48                      	DEC	AX			; AX = -1
 27331 00005BDC 1E                      	PUSH	DS
 27332 00005BDD 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 27333 00005BE1 30ED                    	XOR	CH,CH			; CX is number of structures
 27334                                  	;lds	si,[es:di+45h]
 27335 00005BE3 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 27336                                  
 27337                                  ;hkn; SS override
 27338                                  
 27339                                  ;	Find all CDSs with this DevPtr
 27340                                  ;
 27341                                  ;	(ax) = -1
 27342                                  ;	(ds:si) = DevPtr
 27343                                  
 27344 00005BE7 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 27345                                  frcd20: 
 27346                                  	;test	word [es:di+43h],8000h
 27347 00005BEC 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 27348 00005BF2 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 27349                                  
 27350                                  	; MSDOS 3.3
 27351                                  	;push	es
 27352                                  	;push	di
 27353                                  	;les	di,[es:di+45h]
 27354                                  	;;les	di,[ES:DI+curdir.devptr]
 27355                                  	;call	POINTCOMP
 27356                                  	;pop	di
 27357                                  	;pop	es
 27358                                  	;jnz	short frcd25
 27359                                  
 27360                                  	; MSDOS 6.0
 27361 00005BF4 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 27362 00005BF8 7512                    	jne	short frcd25		; no match
 27363 00005BFA 8CDB                    	mov	bx,ds
 27364 00005BFC 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 27365 00005C00 750A                    	jne	short frcd25		; CDS not for this drive
 27366                                  
 27367                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27368                                  	;test	[es:di+49h],ax
 27369 00005C02 26854549                	test	[ES:DI+curdir.ID],AX
 27370 00005C06 7404                    	JZ	short frcd25		; If root (0), leave root
 27371                                  	;mov	[es:di+49h],ax
 27372 00005C08 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 27373                                  frcd25:	
 27374                                  	;add	di,81
 27375 00005C0C 83C751                  	ADD	DI,curdir.size		; Point to next CDS
 27376 00005C0F E2DB                    	LOOP	frcd20
 27377 00005C11 1F                      	POP	DS
 27378                                  NO_CHANGE:
 27379 00005C12 C42E[2405]              	LES	BP,[THISDPB]
 27380 00005C16 F8                      	CLC
 27381 00005C17 C3                      	retn
 27382                                  
 27383                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 27384                                  ;----------------------------------------------------------------------------
 27385                                  ;
 27386                                  ; Procedure Name : FAT_operation
 27387                                  ;
 27388                                  ;----------------------------------------------------------------------------
 27389                                  FAT_operation:
 27390                                  	; 31/07/2018 - Retro DOS v3.0
 27391                                  FATERR:
 27392                                  	;mov	word [es:bp+1Eh],-1
 27393 00005C18 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 27394                                  					; Err in FAT must force recomp of freespace
 27395                                  	;and	di,0FFh
 27396 00005C1E 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 27397                                  	;mov	byte [ALLOWED],18h
 27398 00005C22 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27399                                  	;mov	ah,1Ah
 27400 00005C27 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 27401 00005C29 A0[1105]                	MOV	AL,[THISDRV]		; Tell which drive
 27402 00005C2C E870FC                  	call	FATAL1
 27403 00005C2F C42E[2405]              	LES	BP,[THISDPB]
 27404 00005C33 3C03                    	CMP	AL,3
 27405 00005C35 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 27406 00005C37 F9                      	STC				; User said FAIL
 27407 00005C38 C3                      	retn
 27408                                  
 27409                                  FAT_GOT_DPB:
 27410                                  	;Context DS			;hkn; SS is DOSDATA
 27411 00005C39 16                      	push	ss			
 27412 00005C3A 1F                      	pop	ds
 27413                                  	;mov	al,0Fh
 27414 00005C3B B00F                    	MOV	AL,DMEDHL
 27415                                  	;mov	al,[es:bp+1]
 27416 00005C3D 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 27417 00005C41 A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 27418 00005C44 C606[0803]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 27419 00005C49 C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27420                                  	;mov	al,[es:bp+16h]
 27421 00005C4F 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27422 00005C53 A2[1303]                	MOV	[CALLMED],AL
 27423 00005C56 06                      	PUSH	ES
 27424 00005C57 1E                      	PUSH	DS
 27425                                  
 27426                                  ;hkn; DEVCALL is in DOSDATA
 27427 00005C58 BB[0603]                	MOV	BX,DEVCALL
 27428                                  	;lds	si,[es:bp+12h]
 27429 00005C5B 26C57612                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 27430 00005C5F 07                      	POP	ES			; ES:BX Points to call header
 27431 00005C60 E89CF2                  	call	DEVIOCALL2
 27432                                  	;Context DS		 	;hkn; SS is DOSDATA
 27433 00005C63 16                      	push	ss
 27434 00005C64 1F                      	pop	ds
 27435 00005C65 07                      	POP	ES			; Restore ES:BP
 27436 00005C66 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27437                                  	;test	di,8000h
 27438                                  	;jnz	short FATERR
 27439 00005C6A 09FF                    	or	di,di
 27440 00005C6C 78AA                    	js	short FATERR		; have error
 27441 00005C6E 30E4                    	XOR	AH,AH
 27442                                  	;xchg	ah,[es:bp+17h]
 27443 00005C70 26866617                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 27444 00005C74 A0[1105]                	MOV	AL,[THISDRV]		; Use physical unit number
 27445                                  ; See if we had changed volume id by creating one on the diskette
 27446 00005C77 3806[070A]              	cmp	[VOLCHNG_FLAG],AL
 27447 00005C7B 7508                    	jnz	short CHECK_BYT
 27448 00005C7D C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1
 27449 00005C82 E98800                  	jmp	GOGETBPB		; Need to get device driver to read in
 27450                                  					; new volume label.
 27451                                  CHECK_BYT:
 27452 00005C85 0A26[1403]              	OR	AH,[CALLRBYT]
 27453                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 27454                                  	;JMP	short NEWDSK
 27455 00005C89 785D                    	js	short NEWDSK
 27456                                  
 27457                                  CHECK_ZR:
 27458 00005C8B 743D                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 27459 00005C8D F8                      	CLC
 27460 00005C8E C3                      	retn				; If Media not changed (NZ)
 27461                                  
 27462                                  DISK_CHNG_ERR:
 27463 00005C8F 06                      	PUSH	ES
 27464 00005C90 55                      	PUSH	BP
 27465                                  	;les	bp,[es:bp+12h]
 27466 00005C91 26C46E12                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 27467                                  	;test	word [es:bp+4],800h
 27468 00005C95 26F746040008            	TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 27469 00005C9B 5D                      	POP	BP
 27470 00005C9C 07                      	POP	ES
 27471 00005C9D 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 27472 00005C9F 1E                      	PUSH	DS			; Save buffer pointer for ignore
 27473 00005CA0 57                      	PUSH	DI
 27474 00005CA1 16                      	push	ss			;hkn; SS is DOSDATA
 27475 00005CA2 1F                      	pop	ds
 27476                                  	;mov	byte [ALLOWED],18h
 27477 00005CA3 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27478 00005CA8 06                      	PUSH	ES
 27479 00005CA9 C43E[1503]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 27480 00005CAD 8C06[D802]              	MOV	[EXTERRPT+2],ES
 27481 00005CB1 07                      	POP	ES
 27482 00005CB2 893E[D602]              	MOV	[EXTERRPT],DI
 27483                                  	;mov	ax,0Fh
 27484 00005CB6 B80F00                  	MOV	AX,error_I24_wrong_disk
 27485 00005CB9 C606[1005]01            	MOV	byte [READOP],1		; Write
 27486                                  	;invoke	HARDERR
 27487 00005CBE E88CFB                  	call	HARDERR
 27488 00005CC1 5F                      	POP	DI			; Get back buffer for ignore
 27489 00005CC2 1F                      	POP	DS
 27490 00005CC3 3C03                    	CMP	AL,3
 27491                                  FAIL_OPJ2:
 27492 00005CC5 7416                    	JZ	short FAIL_OP
 27493 00005CC7 E96FFF                  	JMP	FAT_GOT_DPB		; Retry
 27494                                  
 27495                                  CHKBUFFDIRT:
 27496                                  	; MSDOS 6.0
 27497                                  	;cmp	word [DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 27498                                  	;je	short NEWDSK			; no, skip the check
 27499                                  	;call	GetCurHead			; get pointer to first buffer
 27500                                  
 27501                                  	; MSDOS 3.3
 27502 00005CCA C53E[3800]              	lds	di,[BUFFHEAD]
 27503                                  nbuffer:
 27504                                  	;cmp	al,[di+4]
 27505 00005CCE 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 27506 00005CD1 750E                    	jne	short lfnxt			; no, go for next buffer
 27507                                  	;test   byte [di+5],40h
 27508 00005CD3 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 27509 00005CD7 7408                    	jz	short lfnxt			; no, go for next buffer
 27510                                  	;Context DS
 27511 00005CD9 16                      	push	ss
 27512 00005CDA 1F                      	pop	ds
 27513 00005CDB F8                      	clc
 27514 00005CDC C3                      	retn
 27515                                  
 27516                                  FAIL_OP:					; This label & code is here
 27517                                  	;Context DS				;  for reachability
 27518 00005CDD 16                      	push	ss
 27519 00005CDE 1F                      	pop	ds
 27520 00005CDF F9                      	STC
 27521 00005CE0 C3                      	retn
 27522                                  
 27523                                  lfnxt:
 27524                                  	; 15/08/2018
 27525                                  	;mov	di,[di]
 27526                                  	;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 27527                                  	;
 27528 00005CE1 C53D                    	lds	di,[di]
 27529                                  	;
 27530                                  	; MSDOS 6.0
 27531                                  	;cmp	[FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 27532                                  	;jne	short nbuffer			; no, check this guy also
 27533                                  	; MSDOS 3.3
 27534 00005CE3 83FFFF                  	cmp	di,-1
 27535 00005CE6 75E6                    	jne	short nbuffer
 27536                                  
 27537                                  ; If no dirty buffers, assume Media changed
 27538                                  NEWDSK:
 27539                                  	;mov	word [es:bp+1Eh],0FFFFh
 27540 00005CE8 26C7461EFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 27541                                  	; MSDOS 6.0				;  recompute
 27542                                  	;call	GetCurHead
 27543                                  	; MSDOS 3.3
 27544 00005CEE E8B500                  	call	SETVISIT
 27545                                  nxbuffer:
 27546                                  	; MSDOS 3.3
 27547 00005CF1 804D0520                	or 	byte [di+5],20h
 27548                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27549                                  	;cmp	[di+4],al
 27550 00005CF5 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 27551 00005CF8 750E                    	jne	short lfnxt2
 27552                                  	;test	byte [di+5],40h
 27553 00005CFA F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 27554 00005CFE 758F                    	jnz	short DISK_CHNG_ERR
 27555                                  	;mov	word [di+4],20FFh
 27556 00005D00 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 27557 00005D05 E8CB00                  	call	SCANPLACE
 27558                                  	; MSDOS 6.0
 27559                                  	;jmp	short skpbuff
 27560                                  ;lfnxt2:
 27561                                  	;;mov	di,[di+BUFFINFO.buf_next]
 27562                                  	;mov	di,[di]
 27563                                  ;skpbuff:
 27564                                  	;cmp	di,[FIRST_BUFF_ADDR]					;hkn;
 27565                                  	;jne	short nxbuffer
 27566                                  
 27567                                  	;CMP	word [SC_CACHE_COUNT],0	;LB.  look ahead buffers ?	;AN001;
 27568                                  	;JZ	short GOGETBPB		;LB.  no			;AN001;
 27569                                  	;CMP	AL,[CURSC_DRIVE]	;LB.  same as changed drive	;AN001;
 27570                                  	;JNZ	short GOGETBPB		;LB.  no			;AN001;
 27571                                  	;MOV	byte [CURSC_DRIVE],-1	;LB.  invalidate look ahead buffers ;AN000;
 27572                                  lfnxt2:
 27573                                  	; MSDOS 3.3
 27574 00005D08 E8B400                  	call	SKIPVISIT
 27575 00005D0B 75E4                    	jnz	short nxbuffer
 27576                                  GOGETBPB:
 27577                                  	;lds	di,[es:bp+12h]
 27578 00005D0D 26C57E12                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 27579                                  	;test	word [di+4],2000h
 27580 00005D11 F745040020              	TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 27581 00005D16 7510                    	JNZ	short GETFREEBUF
 27582                                  	;context DS	    		;hkn; SS is DOSDATA
 27583 00005D18 16                      	push	ss
 27584 00005D19 1F                      	pop	ds
 27585 00005D1A BB0200                  	MOV	BX,2
 27586 00005D1D E832FD                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 27587                                  FAIL_OPJ:
 27588 00005D20 72BB                    	JC	short FAIL_OP
 27589 00005D22 C53E[7405]              	LDS	DI,[CURBUF]
 27590 00005D26 EB0E                    	JMP	SHORT GOTGETBUF
 27591                                  
 27592                                  GETFREEBUF:
 27593 00005D28 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 27594 00005D29 55                      	PUSH	BP
 27595                                  	; MSDOS 3.3
 27596 00005D2A 36C53E[3800]            	LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 27597                                  	; MSDOS 6.0
 27598                                  	;XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 27599                                  ;hkn; SS override
 27600                                  	;MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 27601                                  	;call	GETCURHEAD		;LB.			  ;AN000;
 27602                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27603 00005D2F E84F02                  	call	BUFWRITE
 27604 00005D32 5D                      	POP	BP
 27605 00005D33 07                      	POP	ES
 27606                                  	;JC	short FAIL_OPJ
 27607 00005D34 72A7                    	jc	short FAIL_OP
 27608                                  GOTGETBUF:
 27609                                  	;add	di,16
 27610 00005D36 83C710                  	ADD	DI,BUFINSIZ
 27611                                  
 27612                                  ;hkn; SS override
 27613 00005D39 368C1E[1603]            	MOV	[SS:CALLXAD+2],DS
 27614                                  	;Context DS			;hkn; SS is DOSDATA
 27615 00005D3E 16                      	push	ss
 27616 00005D3F 1F                      	pop	ds
 27617 00005D40 893E[1403]              	MOV	[CALLXAD],DI
 27618                                  	;mov	al,16h
 27619 00005D44 B016                    	MOV	AL,DBPBHL
 27620                                  	;mov	ah,[es:bp+1]
 27621 00005D46 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 27622 00005D4A A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 27623 00005D4D C606[0803]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 27624 00005D52 C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27625                                  	;mov	al,[es:bp+16h]
 27626 00005D58 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27627 00005D5C A2[1303]                	MOV	[CALLMED],AL
 27628 00005D5F 06                      	PUSH	ES
 27629 00005D60 1E                      	PUSH	DS
 27630                                  	;push	word [es:bp+14h]
 27631 00005D61 26FF7614                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 27632                                  	;push	word [es:bp+12h]
 27633 00005D65 26FF7612                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 27634                                  
 27635                                  ;hkn; DEVCALL is in DOSDATA
 27636 00005D69 BB[0603]                	MOV	BX,DEVCALL
 27637 00005D6C 5E                      	POP	SI
 27638 00005D6D 1F                      	POP	DS			; DS:SI Points to device header
 27639 00005D6E 07                      	POP	ES			; ES:BX Points to call header
 27640                                  	;invoke	DEVIOCALL2
 27641 00005D6F E88DF1                  	call	DEVIOCALL2
 27642 00005D72 07                      	POP	ES			; Restore ES:BP
 27643                                  	;Context DS
 27644 00005D73 16                      	push	ss		 	;hkn; SS is DOSDATA
 27645 00005D74 1F                      	pop	ds
 27646 00005D75 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27647                                  	; MSDOS 3.3
 27648                                  	;test	di,8000h
 27649                                  	;jnz	short FATERRJ
 27650                                  	; MSDOS 6.0
 27651 00005D79 09FF                    	or	di,di
 27652 00005D7B 7826                    	js	short FATERRJ 		; have error
 27653                                  	;;mov	al,[es:bp+16h]
 27654 00005D7D 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27655 00005D81 C536[1803]              	LDS	SI,[CALLBPB]
 27656                                  	;mov	word [es:bp+1Ch],0
 27657 00005D85 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 27658                                  	;invoke	$SETDPB
 27659 00005D8B E8F4BF                  	call	_$SETDPB
 27660                                  
 27661                                  ;hkn; SS override
 27662 00005D8E 36C53E[1403]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 27663                                  	;mov	al,[es:bp+8]
 27664 00005D93 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 27665                                  
 27666                                  	; MSDOS 6.0
 27667                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL ;>32mb		  ;AN000;
 27668                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb			  ;AC000;
 27669                                  	;MOV	[DI.buf_wrtcntinc-BUFINSIZ],AX ;>32mb Correct buffer info ;AC000;
 27670                                  
 27671                                  	; MSDOS 3.3
 27672                                  	;mov	ah,[es:bp+0Fh]
 27673 00005D97 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 27674                                  	;mov	[DI-8],ax
 27675 00005D9B 8945F8                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 27676                                  
 27677                                  	;Context DS			;hkn; SS is DOSDATA
 27678 00005D9E 16                      	push	ss
 27679 00005D9F 1F                      	pop	ds
 27680 00005DA0 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 27681 00005DA2 C3                      	retn
 27682                                  
 27683                                  FATERRJ: 
 27684 00005DA3 E972FE                  	JMP	FATERR
 27685                                  
 27686                                  
 27687                                  ;============================================================================
 27688                                  ; STDBUF.ASM
 27689                                  ;============================================================================
 27690                                  ; Retro DOS v2.0 - 12/03/2018
 27691                                  
 27692                                  ;
 27693                                  ; Standard buffer management for MSDOS
 27694                                  ;
 27695                                  
 27696                                  ;.xlist
 27697                                  ;.xcref
 27698                                  ;INCLUDE STDSW.ASM
 27699                                  ;.cref
 27700                                  ;.list
 27701                                  
 27702                                  ;TITLE	STDBUF - MSDOS buffer management
 27703                                  ;NAME	STDBUF
 27704                                  
 27705                                  ;INCLUDE BUF.ASM
 27706                                  
 27707                                  ;============================================================================
 27708                                  ; BUF.ASM
 27709                                  ;============================================================================
 27710                                  ; 31/07/2018 - Retro DOS v3.0
 27711                                  ; Retro DOS v2.0 - 12/03/2018
 27712                                  
 27713                                  ;
 27714                                  ; buffer management for MSDOS
 27715                                  ;
 27716                                  
 27717                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 27718                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 27719                                  
 27720                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 27721                                  
 27722                                  SETVISIT:
 27723                                  	; 31/07/2018 - Retro DOS v3.0
 27724                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 27725                                  ; Inputs:
 27726                                  ;       None
 27727                                  ; Function:
 27728                                  ;       Set up a scan of I/O buffers
 27729                                  ; Outputs:
 27730                                  ;       All visit flags = 0
 27731                                  ;               NOTE: This pre-scan is needed because a hard disk error
 27732                                  ;                     may cause a scan to stop in the middle leaving some
 27733                                  ;                     visit flags set, and some not set.
 27734                                  ;       DS:DI Points to [BUFFHEAD]
 27735                                  ; No other registers altered
 27736                                  
 27737 00005DA6 36C53E[3800]                    LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27738 00005DAB 50                      	PUSH    AX
 27739                                          ;;XOR	AX,AX	  ;; MSDOS 2.11
 27740                                  	;mov	al,0DFh
 27741 00005DAC B0DF                    	mov	al,~buf_visit
 27742                                  SETLOOP:
 27743                                          ;;MOV	[DI+7],AL ;; MSDOS 2.11
 27744                                  	;and	[DI+5],al
 27745 00005DAE 204505                  	AND	[DI+BUFFINFO.buf_flags],AL
 27746 00005DB1 C53D                            LDS     DI,[DI]
 27747 00005DB3 83FFFF                          CMP     DI,-1
 27748 00005DB6 75F6                            JNZ     SHORT SETLOOP
 27749 00005DB8 58                              POP     AX ; 09/09/2018
 27750 00005DB9 36C53E[3800]            	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27751                                  SVISIT_RETN:
 27752 00005DBE C3                              RETN
 27753                                  
 27754                                  SKIPVISIT:
 27755                                  	; 31/07/2018 - Retro DOS v3.0
 27756                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 27757                                  
 27758                                  ; Inputs:
 27759                                  ;       DS:DI Points to a buffer
 27760                                  ; Function:
 27761                                  ;       Skip visited buffers
 27762                                  ; Outputs:
 27763                                  ;       DS:DI Points to next unvisited buffer
 27764                                  ;       Zero is set if skip to LAST buffer
 27765                                  ; No other registers altered
 27766                                  
 27767 00005DBF 83FFFF                          CMP     DI,-1
 27768                                          ;retz
 27769 00005DC2 74FA                            JZ	SHORT SVISIT_RETN
 27770                                  
 27771                                  	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 27772                                          ;;;retnz
 27773                                          ;;JNZ	SHORT SVISIT_RETN
 27774                                  
 27775                                  	;test	byte [di+5],20h
 27776 00005DC4 F6450520                	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 27777 00005DC8 7505                    	JNZ	short SKIPLOOP
 27778                                  	
 27779 00005DCA 50                      	push	ax
 27780 00005DCB 0C01                    	or	al,1
 27781 00005DCD 58                      	pop	ax
 27782 00005DCE C3                      	retn	
 27783                                  
 27784                                  SKIPLOOP:
 27785 00005DCF C53D                    	LDS     DI,[DI]
 27786 00005DD1 EBEC                            JMP     SHORT SKIPVISIT
 27787                                  
 27788                                  ;============================================================================
 27789                                  ; BUF.ASM, MSDOS 6.0, 1991
 27790                                  ;============================================================================
 27791                                  ; 31/07/2018 - Retro DOS v3.0
 27792                                  
 27793                                  ;	TITLE	BUF - MSDOS buffer management
 27794                                  ;	NAME	BUF
 27795                                  
 27796                                  ;**	BUF.ASM - Low level routines for buffer cache management
 27797                                  ;
 27798                                  ;	GETCURHEAD
 27799                                  ;	ScanPlace
 27800                                  ;	PLACEBUF
 27801                                  ;	PLACEHEAD
 27802                                  ;	PointComp
 27803                                  ;	GETBUFFR
 27804                                  ;	GETBUFFRB
 27805                                  ;	FlushBuf
 27806                                  ;	BufWrite
 27807                                  ;	SET_RQ_SC_PARMS
 27808                                  ;
 27809                                  ;	Revision history:
 27810                                  ;
 27811                                  ;		AN000  version 4.00  Jan. 1988
 27812                                  ;		A004   PTM 3765 -- Disk reset failed
 27813                                  ;		M039 DB 10/17/90 - Disk write optimization
 27814                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 27815                                  
 27816                                  ;Break	<GETCURHEAD -- Get current buffer header>
 27817                                  ;----------------------------------------------------------------------------
 27818                                  ; Procedure Name : GetCurHead
 27819                                  ; Inputs:
 27820                                  ;	 No Inputs
 27821                                  ; Function:
 27822                                  ;	Returns the pointer to the first buffer in Queue
 27823                                  ;	and updates FIRST_BUFF_ADDR
 27824                                  ;       and invalidates LASTBUFFER (recency pointer)
 27825                                  ; Outputs:
 27826                                  ;	DS:DI = pointer to the first buffer in Queue
 27827                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 27828                                  ;       LASTBUFFER = -1
 27829                                  ; No other registers altered
 27830                                  ;----------------------------------------------------------------------------
 27831                                  
 27832                                  ;procedure   GETCURHEAD,NEAR
 27833                                  ;
 27834                                  ;	lds	di, BufferQueue		; Pointer to the first buffer;smr;SS Override
 27835                                  ;	mov	word ptr [LastBuffer],-1; invalidate last buffer;smr;SS Override
 27836                                  ;	mov	[FIRST_BUFF_ADDR],di	;save first buffer addr;smr;SS Override
 27837                                  ;	ret
 27838                                  ;
 27839                                  ;EndProc GETCURHEAD
 27840                                  
 27841                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 27842                                  ;----------------------------------------------------------------------------
 27843                                  ; Procedure Name : ScanPlace
 27844                                  ; Inputs:
 27845                                  ;	Same as PLACEBUF
 27846                                  ; Function:
 27847                                  ;	Save scan location and call PLACEBUF
 27848                                  ; Outputs:
 27849                                  ;	DS:DI Points to saved scan location
 27850                                  ; All registers, except DS:DI, preserved.
 27851                                  ;----------------------------------------------------------------------------
 27852                                  ;M039: Rewritten to preserve registers.
 27853                                  
 27854                                  SCANPLACE:
 27855                                  	; 31/07/2018 - Retro DOS v3.0
 27856                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27857 00005DD3 06                      	push	es
 27858 00005DD4 C435                    	les	si,[di]
 27859                                  	;les	si,[DI+BUFFINFO.buf_link]
 27860 00005DD6 E80600                  	call	PLACEBUF
 27861 00005DD9 06                      	push	es
 27862 00005DDA 1F                      	pop	ds
 27863 00005DDB 89F7                    	mov	di,si
 27864 00005DDD 07                      	pop	es
 27865                                  scanplace_retn:
 27866 00005DDE C3                      	retn	
 27867                                  	
 27868                                  	; MSDOS 6.0
 27869                                  ;ScanPlace:
 27870                                  	;push	[di].buf_next		;Save scan location
 27871                                  	;call	PLACEBUF
 27872                                  	;pop	di
 27873                                  	;retn
 27874                                  
 27875                                  ;----------------------------------------------------------------------------
 27876                                  ; Procedure Name : PlaceBuf
 27877                                  ; Input:
 27878                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 27879                                  ; Function:
 27880                                  ;	Remove buffer from queue and re-insert it in proper place.
 27881                                  ; NO registers altered
 27882                                  ;----------------------------------------------------------------------------
 27883                                  
 27884                                  ;procedure   PLACEBUF,NEAR
 27885                                  
 27886                                  ;PLACEBUF:
 27887                                  	; 31/07/2018 - Retro DOS v3.0
 27888                                  
 27889                                  	; MSDOS 6.0
 27890                                  	;push	AX			;Save only regs we modify	;AN000;
 27891                                  	;push	BX							;AN000;
 27892                                  	;push	SI							;AN000;
 27893                                  	;mov	ax, [di].BUF_NEXT
 27894                                  	;mov	bx, word ptr[BufferQueue]	; bx = offset of head of list;smr;SS Override
 27895                                  	;
 27896                                  	;cmp	ax,bx				;Buf = last?		;AN000;
 27897                                  	;je	nret				;Yes, special case	;AN000;
 27898                                  	;cmp	di,bx				;Buf = first?		;AN000;
 27899                                  	;jne	not_first 			;Yes, special case	;AN000;
 27900                                  	;mov	word ptr [BufferQueue],ax	;smr;SS Override
 27901                                  	;jmp	short nret 			;Continue with repositioning;AN000;
 27902                                  ;not_first:
 27903                                  	;mov	SI,[DI].BUF_PREV		;No, SI = prior Buf	;AN000;
 27904                                  	;mov	[SI].BUF_NEXT,AX		; ax has di->buf_next	;AN000;
 27905                                  	;xchg	si, ax
 27906                                  	;mov	[SI].BUF_PREV,AX		;			;AN000;
 27907                                  	;
 27908                                  	;mov	SI,[BX].BUF_PREV		;SI-> last buffer	;AN000;
 27909                                  	;mov	[SI].BUF_NEXT,DI		;Add Buf to end of list ;AN000;
 27910                                  	;mov	[BX].BUF_PREV,DI					;AN000;
 27911                                  	;mov	[DI].BUF_PREV,SI		;Update link in Buf too	;AN000;
 27912                                  	;mov	[DI].BUF_NEXT,BX					;AN000;
 27913                                  ;nret:									;AN000;
 27914                                  	;pop	SI							;AN000;
 27915                                  	;pop	BX							;AN000;
 27916                                  	;pop	AX							;AN000;
 27917                                  	;								;AN000;
 27918                                  	;cmp	[di.buf_ID],-1			; Buffer FREE?		;AN000;
 27919                                          ;jne	pbx                             ; M039: -no, jump.
 27920                                  	;mov	WORD PTR [BufferQueue],di	; M039: -yes, make it LRU.
 27921                                  ;pbx:	
 27922                                  ;	ret								;AN000;
 27923                                  
 27924                                  	; 31/07/2018 - Retro DOS v3.0
 27925                                  
 27926                                  	; MSDOS 3.3
 27927                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27928                                  
 27929                                  PLACEBUF:
 27930                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 27931                                  	
 27932 00005DDF E816B8                          CALL	save_world
 27933 00005DE2 C40D                            LES     CX,[DI]
 27934 00005DE4 83F9FF                          CMP     CX,-1           	; Buf is LAST?
 27935 00005DE7 744B                            JZ      SHORT NRET		; Buffer already last
 27936 00005DE9 8CC5                            MOV     BP,ES           	; Pointsave = Buf.nextbuf
 27937 00005DEB 1E                              PUSH    DS
 27938 00005DEC 07                              POP     ES              	; Buf is ES:DI
 27939                                  	; 15/03/2018
 27940 00005DED 36C536[3800]                    LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 27941 00005DF2 E88600                          CALL    POINTCOMP       	; Buf == HEAD?
 27942 00005DF5 750C                            JNZ     SHORT BUFLOOP
 27943 00005DF7 36890E[3800]                    MOV     [SS:BUFFHEAD],CX
 27944 00005DFC 36892E[3A00]                    MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 27945 00005E01 EB14                            JMP     SHORT LOOKEND
 27946                                  
 27947                                  BUFLOOP:
 27948                                  	; 31/07/2018
 27949 00005E03 8CD8                    	mov	ax,ds
 27950 00005E05 89F3                    	mov	bx,si
 27951                                  	;lds	si,[SI+BUFFINFO.buf_link]
 27952 00005E07 C534                            LDS     SI,[SI]
 27953 00005E09 E86F00                          CALL    POINTCOMP
 27954 00005E0C 75F5                            jnz	short BUFLOOP
 27955                                  	;
 27956 00005E0E 8ED8                    	mov	ds,ax
 27957 00005E10 89DE                    	mov	si,bx
 27958 00005E12 890C                    	mov	[SI],cx
 27959                                  	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 27960 00005E14 896C02                  	mov	[SI+2],bp
 27961                                  	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 27962                                  LOOKEND:
 27963 00005E17 8CD8                    	mov	ax,ds
 27964 00005E19 89F3                    	mov	bx,si
 27965 00005E1B C534                            LDS     SI,[SI]
 27966 00005E1D 83FEFF                          CMP     SI,-1
 27967 00005E20 75F5                            jnz     short LOOKEND
 27968                                  
 27969                                  GOTHEEND:
 27970 00005E22 8ED8                            mov	ds,ax
 27971 00005E24 893F                    	mov	[BX],di
 27972 00005E26 8C4702                          MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 27973 00005E29 26C705FFFF                      MOV     WORD [ES:DI],-1
 27974                                  	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 27975 00005E2E 26C74502FFFF                    MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 27976                                  	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 27977                                  NRET:
 27978 00005E34 E8AEB7                          CALL	restore_world
 27979                                  	
 27980                                  	;cmp	byte [di+4],-1
 27981 00005E37 807D04FF                	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 27982 00005E3B 75A1                    	jnz     short scanplace_retn
 27983 00005E3D E80100                  	call    PLACEHEAD
 27984 00005E40 C3                      	retn
 27985                                  
 27986                                  ;EndProc PLACEBUF
 27987                                  
 27988                                  ;M039 - Removed PLACEHEAD.
 27989                                  ;----------------------------------------------------------------------------
 27990                                  ; places buffer at head
 27991                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 27992                                  ;	ONE IN THE LIST!!!!!!!
 27993                                  ; BUGBUG ---- this routine can be removed because it has only
 27994                                  ; BUGBUG ---- one instruction. This routine is called from
 27995                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 27996                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 27997                                  ; BUGBUG ---- But kept as it is for modularity
 27998                                  ;----------------------------------------------------------------------------
 27999                                  ;procedure   PLACEHEAD,NEAR
 28000                                  ;	mov	word ptr [BufferQueue], di
 28001                                  ;	ret
 28002                                  ;EndProc PLACEHEAD
 28003                                  ;M039
 28004                                  
 28005                                  ;----------------------------------------------------------------------------
 28006                                  ; Procedure Name : PLACEHEAD
 28007                                  ;
 28008                                  ; SAME AS PLACEBUF except places buffer at head
 28009                                  ;----------------------------------------------------------------------------
 28010                                  
 28011                                  	; MSDOS 3.3 (Retro DOS v3.0)
 28012                                  	; 05/09/2018
 28013                                  	; MSDOS 2.11 (Retro DOS v2.0)
 28014                                  PLACEHEAD:
 28015                                  	; 31/07/2018 - Retro DOS v3.0
 28016                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 28017                                  
 28018 00005E41 E8B4B7                          CALL	save_world
 28019 00005E44 1E                              PUSH	DS
 28020 00005E45 07                              POP	ES
 28021                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 28022 00005E46 36C536[3800]                    LDS     SI,[SS:BUFFHEAD]
 28023                                  	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 28024 00005E4B E82D00                  	CALL    POINTCOMP
 28025 00005E4E 7427                            JZ      SHORT GOTHEEND2
 28026 00005E50 268935                  	MOV	[ES:DI],SI
 28027                                  	;mov	[ES:DI+BUFFINFO.buf_link],si
 28028 00005E53 268C5D02                        MOV	[ES:DI+2],DS
 28029                                  	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 28030 00005E57 36893E[3800]                    MOV	[SS:BUFFHEAD],DI
 28031 00005E5C 368C06[3A00]                    MOV	[SS:BUFFHEAD+2],ES
 28032                                  LOOKEND2:
 28033 00005E61 8CD8                            mov	ax,ds
 28034 00005E63 89F3                    	mov	bx,si
 28035                                  	;lds	si,[SI+BUFFINFO.buf_link]
 28036 00005E65 C534                            LDS     SI,[SI]
 28037 00005E67 E81100                          CALL    POINTCOMP
 28038 00005E6A 75F5                            JNZ	SHORT LOOKEND2 ; 05/09/2018
 28039 00005E6C 8ED8                            mov	ds,ax
 28040 00005E6E C707FFFF                	mov	word [bx],-1
 28041                                  	;mov	word [BX+BUFFINFO.buf_link],-1
 28042 00005E72 C74702FFFF              	mov	word [bx+2],-1
 28043                                  	;mov	word [BX+BUFFINFO.buf_link+2],-1
 28044                                  GOTHEEND2:
 28045 00005E77 E86BB7                         	call	restore_world
 28046                                  placehead_retn:
 28047 00005E7A C3                      	retn
 28048                                  
 28049                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 28050                                  ;----------------------------------------------------------------------------
 28051                                  ;
 28052                                  ; Procedure Name : PointComp
 28053                                  ; Inputs:
 28054                                  ;         DS:SI & ES:DI
 28055                                  ; Function:
 28056                                  ;          Checks for ((SI==DI) && (ES==DS))
 28057                                  ;	   Assumes that pointers are normalized for the
 28058                                  ;	   same segment
 28059                                  ;
 28060                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 28061                                  ; DO NOT USE FOR < or >
 28062                                  ; No Registers altered
 28063                                  ;
 28064                                  ;----------------------------------------------------------------------------
 28065                                  
 28066                                  POINTCOMP:
 28067                                  	; 31/07/2018 - Retro DOS v3.0
 28068                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 28069 00005E7B 39FE                    	CMP	SI,DI
 28070                                  	;jnz	short _ret_label	; return if nz
 28071 00005E7D 75FB                    	jnz	short placehead_retn 
 28072 00005E7F 51                      	PUSH	CX
 28073 00005E80 52                      	PUSH	DX
 28074 00005E81 8CD9                    	MOV	CX,DS
 28075 00005E83 8CC2                    	MOV	DX,ES
 28076 00005E85 39D1                    	CMP	CX,DX
 28077 00005E87 5A                      	POP	DX
 28078 00005E88 59                      	POP	CX
 28079                                  ;_ret_label:
 28080 00005E89 C3                      	retn
 28081                                  
 28082                                  
 28083                                  ; 01/08/2018 - Retro DOS v3.0
 28084                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 28085                                  
 28086                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 28087                                  
 28088                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 28089                                  ;----------------------------------------------------------------------------
 28090                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 28091                                  ;	It gets the specified local sector into one of the I/O buffers
 28092                                  ;	and shuffles the queue
 28093                                  ; 
 28094                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28095                                  ;		       ELSE no pre-read
 28096                                  ;		(DX) = Desired physical sector number	      (LOW)
 28097                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28098                                  ;		(ES:BP) = Pointer to drive parameters
 28099                                  ;		ALLOWED set in case of INT 24
 28100                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28101                                  ;		'C' clear if OK
 28102                                  ;		CURBUF Points to the Buffer for the sector
 28103                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28104                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28105                                  ;----------------------------------------------------------------------------
 28106                                  
 28107                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 28108                                  ;----------------------------------------------------------------------------
 28109                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 28110                                  ;	It gets the specified sector into one of the I/O buffers
 28111                                  ;	and shuffles the queue. We need a special entry point so that
 28112                                  ;	we can read the alternate FAT sector if the first read fails, also
 28113                                  ;	so we can mark the buffer as a FAT sector.
 28114                                  ; 
 28115                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28116                                  ;		       ELSE no pre-read
 28117                                  ;		(DX) = Desired physical sector number	      (LOW)
 28118                                  ;		(SI) != 0
 28119                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28120                                  ;		(ES:BP) = Pointer to drive parameters
 28121                                  ;		ALLOWED set in case of INT 24
 28122                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28123                                  ;		'C' clear if OK
 28124                                  ;		CUR ddBUF Points to the Buffer for the sector
 28125                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28126                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28127                                  ;----------------------------------------------------------------------------
 28128                                  
 28129                                  GETBUFFR:
 28130 00005E8A 31F6                    	XOR	SI,SI
 28131                                  
 28132                                  ;	This entry point is called for FAT buffering with SI != 0
 28133                                  
 28134                                  GETBUFFRB:
 28135 00005E8C A3[2C05]                	MOV	[PREREAD],AX			; save pre-read flag
 28136 00005E8F 268A4600                	mov	al,[ES:BP]
 28137                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 28138 00005E93 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 28139                                  	; MSDOS 6.0
 28140                                  ;hkn; SS override
 28141                                  	;MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 28142                                  
 28143                                  ;	See if this is the buffer that was most recently returned.
 28144                                  ;	A big performance win if it is.
 28145                                  
 28146 00005E97 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 28147 00005E9A 740A                    	je	short getb5			; No
 28148                                  	;cmp	dx,[di+6]
 28149 00005E9C 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28150 00005E9F 7505                    	JNZ	short getb5			; Wrong sector
 28151                                  	
 28152                                  	; MSDOS 6.0
 28153                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 28154                                  	;JNZ	short getb5			; F.C. >32mb		;AN000;
 28155                                  	
 28156                                  	;cmp	al,[di+4]
 28157 00005EA1 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28158 00005EA4 7474                    	JZ	getb35				; Just asked for same buffer
 28159                                  
 28160                                  ;	It's not the buffer most recently returned.  See if it's in the
 28161                                  ;	cache.
 28162                                  ;
 28163                                  ;	(cx:dx) = sector #
 28164                                  ;	(al) = drive #
 28165                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28166                                  ;	??? list may be incomplete ???
 28167                                  
 28168                                  getb5:	
 28169                                  	; MSDOS 6.0
 28170                                  	;CALL	GETCURHEAD			; get Q Head
 28171                                  	; MSDOS 3.3
 28172 00005EA6 36C53E[3800]            	lds	di,[SS:BUFFHEAD]
 28173                                  getb10:	
 28174                                  	;cmp	dx,[di+6]
 28175 00005EAB 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28176 00005EAE 7505                    	jne	short getb12			; wrong sector lo
 28177                                  	
 28178                                  	; MSDOS 6.0
 28179                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]
 28180                                  	;jne	short getb12			; wrong sector hi
 28181                                  	
 28182                                  	;cmp	al,[di+4]
 28183 00005EB0 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28184 00005EB3 7450                    	je	short getb25 ; 05/09/2018	; Found the requested sector
 28185                                  getb12:	
 28186                                  	; MSDOS 6.0
 28187                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 28188                                  	;cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 28189                                  	;jne	short getb10			; no, continue looking
 28190                                  
 28191                                  	; MSDOS 3.3
 28192                                  	;mov	di,[DI]
 28193                                  	;mov	di,[DI+BUFFINFO.buf_link]
 28194                                  	;
 28195                                  	; 15/08/2018
 28196 00005EB5 C53D                    	lds	di,[di]
 28197                                  	;
 28198 00005EB7 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28199 00005EBA 75EF                    	jne	short getb10
 28200 00005EBC 36C53E[3800]            	lds	di,[SS:BUFFHEAD]		
 28201                                  
 28202                                  ;	The requested sector is not available in the buffers. DS:DI now points
 28203                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 28204                                  ;	new sector into it.
 28205                                  ;
 28206                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 28207                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 28208                                  ;	him, we should take LRU. And the above lookup shouldn't be
 28209                                  ;	down a chain, but should be hashed.
 28210                                  ;
 28211                                  ;	(DS:DI) = first buffer in the queue
 28212                                  ;	(CX:DX) = sector # we want
 28213                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28214                                  
 28215                                  ;hkn; SS override
 28216                                  	;PUSH	cx
 28217 00005EC1 56                      	push	si
 28218 00005EC2 52                      	push	dx
 28219 00005EC3 55                      	push	bp
 28220 00005EC4 06                      	push	es
 28221 00005EC5 E8B900                  	CALL	BUFWRITE			; Write out the dirty buffer
 28222 00005EC8 07                      	pop	es
 28223 00005EC9 5D                      	pop	bp
 28224 00005ECA 5A                      	pop	dx
 28225 00005ECB 5E                      	pop	si
 28226                                  	;POP	word [SS:HIGH_SECTOR]
 28227 00005ECC 7261                    	jc	short getbx			; if got hard error
 28228                                  
 28229                                  	; MSDOS 6.0
 28230                                  	;CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 28231                                  
 28232                                  ;	We're ready to read in the buffer, if need be. If the caller
 28233                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 28234                                  
 28235 00005ECE 30E4                    	XOR	AH,AH				; initial flags
 28236                                  ;hkn; SS override
 28237                                  	;test	byte [ss:PREREAD],0FFh
 28238                                  	;jnz	short getb20
 28239 00005ED0 363826[2C05]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 28240 00005ED5 751E                    	JNZ	short getb20			; no, we're done
 28241 00005ED7 8D5D10                  	LEA	BX,[DI+BUFINSIZ] ; [DI+16]	; (ds:bx) = data address
 28242 00005EDA B90100                  	MOV	CX,1
 28243 00005EDD 56                      	push	si
 28244 00005EDE 57                      	push	di
 28245 00005EDF 52                      	push	dx
 28246                                  	; MSDOS 6.0
 28247                                  	;push	es
 28248                                  ; Note:  As far as I can tell, all disk reads into buffers go through
 28249                                  ;	 this point.  -mrw 10/88
 28250                                  	;cmp	BuffInHMA, 0		; is buffers in HMA?
 28251                                  	;jz	@f
 28252                                  	;push	ds
 28253                                  	;push	bx
 28254                                  	;lds	bx, dword ptr LoMemBuff	; Then let's read it into scratch buff
 28255                                  ;@@:
 28256                                  ;M039: Eliminated redundant HMA code.
 28257                                  
 28258                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28259 00005EE0 09F6                    	OR	SI,SI			; FAT sector ?
 28260 00005EE2 7407                    	JZ	short getb15		
 28261                                  
 28262 00005EE4 E85CE2                  	call	FATSECRD
 28263                                  	;mov	ah,2
 28264 00005EE7 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 28265                                  
 28266 00005EE9 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 28267                                  
 28268                                  getb15:
 28269 00005EEB E87CE2                  	call	DREAD			; Buffer is marked free if read barfs
 28270 00005EEE B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 28271                                  getb17:	
 28272                                  	; MSDOS 6.0							  ;I001
 28273                                  	;pushf								  ;I001
 28274                                  	;cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 28275                                  	;jz	short not_in_hma	; no				  ;I001
 28276                                  	;mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 28277                                  	;shr	cx,1							  ;I001
 28278                                  	;popf				; Retreive possible CY from DREAD ;I001
 28279                                  	;mov	si,bx							  ;I001
 28280                                  	;pop	di							  ;I001
 28281                                  	;pop	es							  ;I001
 28282                                  	;cld								  ;I001
 28283                                  	;pushf				; Preserve possible CY from DREAD ;I001
 28284                                  	;rep	movsw			; move the contents of scratch buf;I001
 28285                                  	;push	es							  ;I001
 28286                                  	;pop	ds							  ;I001
 28287                                  ;not_in_hma:								  ;I001
 28288                                  	;popf							 	  ;I001
 28289                                  	;pop	es
 28290                                  	;
 28291 00005EF0 5A                      	pop	dx
 28292 00005EF1 5F                      	pop	di
 28293 00005EF2 5E                      	pop	si
 28294 00005EF3 723A                    	JC	short getbx
 28295                                  
 28296                                  ;	The buffer has the data setup in it (if we were to read)
 28297                                  ;	Setup the various buffer fields
 28298                                  ;
 28299                                  ;	(ds:di) = buffer address
 28300                                  ;	(es:bp) = DPB address
 28301                                  ;	(HIGH_SECTOR:DX) = sector #
 28302                                  ;	(ah) = BUF_FLAGS value
 28303                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 28304                                  
 28305                                  ;hkn; SS override
 28306                                  getb20:	; MSDOS 6.0
 28307                                  	;MOV	CX,[SS:HIGH_SECTOR]
 28308                                  	;MOV	WORD [DI+BUFFINFO.buf_sector+2],CX
 28309                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 28310                                   	;mov	[di+6],dx
 28311 00005EF5 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 28312                                  	;mov	[di+0Ah],bp
 28313 00005EF8 896D0A                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 28314                                  	;mov	[di+0Ch], es
 28315 00005EFB 8C450C                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 28316 00005EFE 268A4600                	mov	al,[es:bp]
 28317                                  	;mov	al,[es:bp+0]
 28318                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28319                                  	;mov	[di+4],ax
 28320 00005F02 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 28321                                  getb25:	
 28322                                  	; MSDOS 6.0
 28323                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 28324                                  	;XOR	AX,AX
 28325                                  
 28326                                  	; MSDOS 3.3
 28327 00005F05 B80100                  	mov     ax,1
 28328                                  
 28329 00005F08 09F6                    	OR	SI,SI				; FAT sector ?
 28330 00005F0A 7408                    	JZ	short getb30
 28331                                  
 28332                                  	;mov	al,[es:bp+8]
 28333 00005F0C 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 28334                                  	; MSDOS 6.0
 28335                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 28336                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 28337                                  						;  sectors
 28338                                  	; MSDOS 3.3
 28339                                  	;mov	ah,[es:bp+0Fh]
 28340 00005F10 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 28341                                  
 28342                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 28343                                  ;		is set
 28344                                  
 28345                                  getb30:	
 28346                                  	; MSDOS 6.0
 28347                                  	;MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 28348                                  
 28349                                  	; MSDOS 3.3
 28350                                  	;mov	[di+8],ax ; 15/08/2018	
 28351 00005F14 894508                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 28352                                  
 28353 00005F17 E8C5FE                  	CALL	PLACEBUF
 28354                                  
 28355                                  ;hkn; SS override for next 4
 28356                                  getb35: 
 28357 00005F1A 368C1E[7605]            	MOV	[SS:CURBUF+2],DS
 28358 00005F1F 368C1E[2000]            	MOV	[SS:LastBuffer+2],DS
 28359 00005F24 36893E[7405]            	MOV	[SS:CURBUF],DI
 28360 00005F29 36893E[1E00]            	MOV	[SS:LastBuffer],DI
 28361 00005F2E F8                      	CLC
 28362                                  
 28363                                  ;	Return with 'C' set appropriately
 28364                                  ;
 28365                                  ;	(dx) = caller's original value
 28366                                  
 28367                                  getbx:	
 28368 00005F2F 16                      	push	ss
 28369 00005F30 1F                      	pop	ds
 28370 00005F31 C3                      	retn
 28371                                  
 28372                                  
 28373                                  
 28374                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 28375                                  ;----------------------------------------------------------------------------
 28376                                  ; Input:
 28377                                  ;	DS = DOSGROUP
 28378                                  ;	AL = Physical unit number local buffers only
 28379                                  ;	   = -1 for all units and all remote buffers
 28380                                  ; Function:
 28381                                  ;	Write out all dirty buffers for unit, and flag them as clean
 28382                                  ;	Carry set if error (user FAILed to I 24)
 28383                                  ;	    Flush operation completed.
 28384                                  ; DS Preserved, all others destroyed (ES too)
 28385                                  ;----------------------------------------------------------------------------
 28386                                  
 28387                                  FLUSHBUF:
 28388                                  	; MSDOS 6.0
 28389                                  	;call	GetCurHead
 28390                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28391                                  	;jnz	short scan_buf_queue
 28392                                  	;cmp	word [DirtyBufferCount], 0			;hkn;
 28393                                  	;je	short end_scan
 28394                                  	
 28395                                  	; MSDOS 3.3
 28396                                  	;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 28397 00005F32 C53E[3800]              	lds	di,[BUFFHEAD]
 28398                                  scan_buf_queue:
 28399 00005F36 E81F00                  	call	CHECKFLUSH
 28400                                  	;push	ax  ; MSDOS 3.3
 28401                                  	; MSDOS 6.0
 28402 00005F39 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 28403 00005F3C 363826[D002]            	cmp	[SS:WPERR],ah					;hkn;
 28404                                  	;je	short free_the_buf
 28405                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28406                                  	;jz	short dont_free_the_buf
 28407                                  	; MSDOS 3.3
 28408                                  	;mov	al,[di+4]
 28409                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 28410                                  	;cmp	[SS:WPERR],al					;hkn;
 28411                                  	; 15/08/2018
 28412 00005F41 7505                    	jne	short dont_free_the_buf	
 28413                                  free_the_buf:
 28414                                  	; MSDOS 6.0 (& MSDOS 3.3)
 28415 00005F43 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 28416                                  dont_free_the_buf:
 28417                                  	;pop	ax  ; MSDOS 3.3 	   	
 28418                                  	
 28419                                  	; MSDOS 6.0
 28420                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 28421                                  	;cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 28422                                  	;jne	short scan_buf_queue
 28423                                  
 28424                                  	; MSDOS 3.3
 28425                                  	;mov	di,[DI]
 28426                                  	;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 28427                                  	;
 28428                                  	; 15/08/2018
 28429 00005F48 C53D                    	lds	di,[di]
 28430                                  	;
 28431 00005F4A 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28432 00005F4D 75E7                    	jnz	short scan_buf_queue 
 28433                                  
 28434                                  end_scan:
 28435 00005F4F 16                      	push	ss
 28436 00005F50 1F                      	pop	ds
 28437                                  	; 01/08/2018 - Retro DOS v3.0
 28438                                  	;cmp	byte [FAILERR],0
 28439                                  	;jne	short bad_flush
 28440                                  	;retn
 28441                                  ;bad_flush:
 28442                                  	;stc
 28443                                  	;retn
 28444                                  	; 01/08/2018 - Retro DOS v3.0
 28445 00005F51 803E[F602]01            	cmp	byte [FAILERR],1
 28446 00005F56 F5                      	cmc
 28447                                  flushbuf_retn:
 28448 00005F57 C3                      	retn
 28449                                  
 28450                                  ;----------------------------------------------------------------------------
 28451                                  ;
 28452                                  ; Procedure Name : CHECKFLUSH
 28453                                  ;
 28454                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 28455                                  ;	   DS:DI - pointer to buffer
 28456                                  ;
 28457                                  ; Function : Write out a buffer if it is dirty
 28458                                  ;
 28459                                  ; Carry set if problem (currently user FAILed to I 24)
 28460                                  ;
 28461                                  ;----------------------------------------------------------------------------
 28462                                  
 28463                                  CHECKFLUSH:
 28464                                  	; MSDOS 6.0
 28465 00005F58 B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 28466                                  	;cmp	[di+4],ah
 28467 00005F5A 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 28468 00005F5D 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 28469 00005F5F 38C4                    	CMP	AH,AL			; 
 28470 00005F61 7406                    	JZ	short DOBUFFER		; do this buffer
 28471                                  	;cmp	al,[di+4]
 28472 00005F63 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28473 00005F66 F8                      	CLC
 28474 00005F67 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 28475                                  DOBUFFER:
 28476                                  	;test	byte [di+5],40h
 28477 00005F69 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 28478 00005F6D 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 28479 00005F6F 50                      	PUSH	AX
 28480                                  	;push	word [di+4]
 28481 00005F70 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 28482 00005F73 E80B00                  	CALL	BUFWRITE
 28483 00005F76 58                      	POP	AX
 28484 00005F77 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 28485                                  	;and	ah,0BFh
 28486 00005F79 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 28487                                  	;mov	[di+4],ax
 28488 00005F7C 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 28489                                  LEAVE_BUF:
 28490 00005F7F 58                      	POP	AX			; Search info
 28491                                  checkflush_retn:
 28492 00005F80 C3                      	retn
 28493                                  
 28494                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 28495                                  ;----------------------------------------------------------------------------
 28496                                  ;
 28497                                  ;	BufWrite writes a buffer to the disk, iff it's dirty.
 28498                                  ;
 28499                                  ;	ENTRY	DS:DI Points to the buffer
 28500                                  ;
 28501                                  ;	EXIT	Buffer marked free
 28502                                  ;		Carry set if error (currently user FAILed to I 24)
 28503                                  ;
 28504                                  ;	USES	All buf DS:DI
 28505                                  ;		HIGH_SECTOR
 28506                                  ;----------------------------------------------------------------------------
 28507                                  
 28508                                  BUFWRITE:
 28509                                  	; 10/09/2018
 28510                                  	; 01/08/2018 - Retro DOS v3.0
 28511                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 28512 00005F81 B8FF00                  	MOV	AX,00FFH
 28513                                  	;xchg	ax,[di+4]
 28514 00005F84 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 28515 00005F87 3CFF                    	CMP	AL,0FFH
 28516 00005F89 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 28517                                  	;test	ah,40h
 28518 00005F8B F6C440                  	test	AH,buf_dirty
 28519 00005F8E 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 28520                                  	; MSDOS 6.0
 28521                                  	;call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 28522                                  
 28523                                  ;hkn; SS override
 28524 00005F90 363A06[D002]            	CMP	AL,[SS:WPERR]
 28525 00005F95 74E9                    	jz      short checkflush_retn	; If in WP error zap buffer
 28526                                  
 28527                                  ;hkn; SS override
 28528                                  	; MSDOS 6.0
 28529                                  	;MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 28530                                  	
 28531                                  	;les	bp,[di+10]
 28532 00005F97 C46D0A                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 28533                                  	;lea	bx,[di+16]
 28534 00005F9A 8D5D10                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 28535                                  	;mov	dx,[di+6]
 28536 00005F9D 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 28537                                  	; MSDOS 6.0
 28538                                  	;MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 28539                                  
 28540                                  ;hkn; SS override
 28541                                  	;MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 28542                                  	;MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 28543                                  	; MSDOS 3.3
 28544                                  	; mov	cx,[DI+8]
 28545 00005FA0 8B4D08                  	mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 28546 00005FA3 88E8                    	MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 28547 00005FA5 30ED                    	XOR	CH,CH
 28548                                  	;mov	ah,ch ; MSDOS 3.3
 28549                                  
 28550                                  ;hkn; SS override for ALLOWED
 28551                                  	;mov	byte [SS:ALLOWED],18h
 28552 00005FA7 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 28553                                  	;test	byte [di+5],8
 28554                                  	;test	ah,8
 28555 00005FAD F6C408                  	test	AH,buf_isDATA
 28556 00005FB0 7406                    	JZ	short NO_IGNORE
 28557                                  	;or	byte [SS:ALLOWED],20h
 28558 00005FB2 36800E[F702]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 28559                                  NO_IGNORE:
 28560 00005FB8 30E4                    	xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 28561                                  	; MSDOS 6.0
 28562                                  	;MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 28563                                  
 28564 00005FBA 57                      	PUSH	DI		; Save buffer pointer
 28565 00005FBB 31FF                    	XOR	DI,DI		; Indicate failure
 28566                                  
 28567                                  	;push	ds
 28568                                  	;push	bx
 28569                                  WRTAGAIN:
 28570 00005FBD 57                      	push	di
 28571 00005FBE 51                      	push	cx
 28572 00005FBF 50                      	push	ax
 28573 00005FC0 B90100                  	MOV	CX,1
 28574 00005FC3 53                      	push	bx
 28575 00005FC4 52                      	push	dx
 28576 00005FC5 1E                      	push	ds
 28577                                  
 28578                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point.  -mrw 10/88
 28579                                  
 28580                                  	; MSDOS 6.0
 28581                                  	;cmp	byte [BuffInHMA], 0
 28582                                  	;jz	short NBUFFINHMA
 28583                                  	;push	cx
 28584                                  	;push	es
 28585                                  	;mov	si,bx
 28586                                  	;mov	cx,[es:bp+DPB.SECTOR_SIZE]
 28587                                  	;shr	cx,1
 28588                                  	;les	di,[LoMemBuff]
 28589                                  	;mov	bx,di
 28590                                  	;cld
 28591                                  	;rep	movsw
 28592                                  	;push	es
 28593                                  	;pop	ds
 28594                                  	;pop	es
 28595                                  	;pop	cx
 28596                                  ;NBUFFINHMA:
 28597 00005FC6 E800E2                  	call	DWRITE		; Write out the dirty buffer
 28598 00005FC9 1F                      	pop	ds
 28599 00005FCA 5A                      	pop	dx
 28600 00005FCB 5B                      	pop	bx
 28601 00005FCC 58                      	pop	ax
 28602 00005FCD 59                      	pop	cx
 28603 00005FCE 5F                      	pop	di
 28604 00005FCF 7201                    	JC	short NOSET
 28605 00005FD1 47                      	INC	DI		; If at least ONE write succeedes, the operation
 28606                                  NOSET:				;	succeedes.
 28607 00005FD2 01C2                    	ADD	DX,AX
 28608 00005FD4 E2E7                    	LOOP	WRTAGAIN
 28609                                  	;pop	bx
 28610                                  	;pop	ds
 28611 00005FD6 09FF                    	OR	DI,DI		; Clears carry
 28612 00005FD8 7501                    	JNZ	short BWROK	; At least one write worked
 28613 00005FDA F9                      	STC			; DI never got INCed, all writes failed.
 28614                                  BWROK:	
 28615 00005FDB 5F                      	POP	DI
 28616 00005FDC C3                      	retn
 28617                                  
 28618                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 28619                                  ;----------------------------------------------------------------------------
 28620                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 28621                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 28622                                  ;	SC_DRIVE even if SC is disabled to save the testing
 28623                                  ;	code and time
 28624                                  ;
 28625                                  ;	ENTRY	ES:BP = drive parameter block
 28626                                  ;
 28627                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 28628                                  ;		[SC_DRIVE]= drive #
 28629                                  ;
 28630                                  ;	USES	Flags
 28631                                  ;----------------------------------------------------------------------------
 28632                                  
 28633                                  ;procedure   SET_RQ_SC_PARMS,NEAR
 28634                                  ;
 28635                                  ;;hkn; SS override for all variables used in this procedure.
 28636                                  ;
 28637                                  ;	SAVE	<ax>
 28638                                  ;
 28639                                  ;	MOV	ax,ES:[BP].DPB_SECTOR_SIZE	; save sector size
 28640                                  ;	MOV	SC_SECTOR_SIZE,ax
 28641                                  ;
 28642                                  ;	MOV	al,ES:[BP].DPB_DRIVE		; save drive #
 28643                                  ;	MOV	SC_DRIVE,al
 28644                                  ;
 28645                                  ;	RESTORE <ax>
 28646                                  ;
 28647                                  ;srspx:	return
 28648                                  ;
 28649                                  ;EndProc SET_RQ_SC_PARMS 			;LB. return
 28650                                  
 28651                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 28652                                  ;----------------------------------------------------------------------------
 28653                                  ; Input:
 28654                                  ;	none
 28655                                  ; Function:
 28656                                  ;	increment dirty buffers count
 28657                                  ; Output:
 28658                                  ;	dirty buffers count is incremented
 28659                                  ;
 28660                                  ; All registers preserved
 28661                                  ;----------------------------------------------------------------------------
 28662                                  
 28663                                  ;procedure   INC_DIRTY_COUNT,NEAR
 28664                                  ;
 28665                                  ;; BUGBUG  ---- remove this routine
 28666                                  ;; BUGBUG ---- only one instruction is needed   (speed win, space loose)
 28667                                  ;	inc	[DirtyBufferCount]			;hkn;
 28668                                  ;	ret
 28669                                  ;EndProc INC_DIRTY_COUNT
 28670                                  
 28671                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 28672                                  ;----------------------------------------------------------------------------
 28673                                  ; Input:
 28674                                  ;	none
 28675                                  ; Function:
 28676                                  ;	decrement dirty buffers count
 28677                                  ; Output:
 28678                                  ;	dirty buffers count is decremented
 28679                                  ;
 28680                                  ; All registers preserved
 28681                                  ;----------------------------------------------------------------------------
 28682                                  
 28683                                  ;procedure   DEC_DIRTY_COUNT,NEAR
 28684                                  ;	cmp	[DirtyBufferCount], 0	;hkn;
 28685                                  ;	jz	ddcx			; BUGBUG - shouldn't it be an
 28686                                  ;	dec	[DirtyBufferCount]	; error condition to underflow here? ;hkn;
 28687                                  ;ddcx:	ret
 28688                                  ;
 28689                                  ;EndProc DEC_DIRTY_COUNT
 28690                                  
 28691                                  ;============================================================================
 28692                                  ; MSPROC.ASM, MSDOS 6.0, 1991
 28693                                  ;============================================================================
 28694                                  ; 02/08/2018 - Retro DOS v3.0
 28695                                  
 28696                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 28697                                  
 28698                                  ; Pseudo EXEC system call for DOS
 28699                                  
 28700                                  ;	TITLE	MSPROC - process maintenance
 28701                                  ;	NAME	MSPROC
 28702                                  
 28703                                  ; =========================================================================
 28704                                  ;**	Process related system calls and low level routines for DOS 2.X.
 28705                                  ;	I/O specs are defined in DISPATCH.
 28706                                  ;
 28707                                  ;	$WAIT
 28708                                  ;	$EXEC
 28709                                  ;	$Keep_process
 28710                                  ;	Stay_resident
 28711                                  ;	$EXIT
 28712                                  ;	$ABORT
 28713                                  ;	abort_inner
 28714                                  ;
 28715                                  ;	Modification history:
 28716                                  ;
 28717                                  ;		Created: ARR 30 March 1983
 28718                                  ;		AN000	version 4.0 jan. 1988
 28719                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 28720                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 28721                                  ;
 28722                                  ;		M000	added support for loading programs into UMBs 7/9/90
 28723                                  ;
 28724                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 28725                                  ;		       dossym.inc. 7/30/90
 28726                                  ;		M005 - Support for EXE programs with out STACK segment and 
 28727                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 28728                                  ;		       stack is provided at the end of the program. Note that
 28729                                  ;		       only SP is changed.
 28730                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 28731                                  ;
 28732                                  ;		M028 - 4b04 implementation
 28733                                  ;
 28734                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 28735                                  ;			in memory block >= 64K, sp = 0. If memory block
 28736                                  ;			obtained is <64K, point sp at the end of the memory
 28737                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 28738                                  ;			added for a stack segment which may be needed if it
 28739                                  ;			is loaded in low memory situations.
 28740                                  ;
 28741                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 28742                                  ;
 28743                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 28744                                  ;			a bad environment if it reached 32767 bytes. Changed
 28745                                  ;			to allow 32768 bytes of environment.
 28746                                  ;
 28747                                  ;		M047 - Release the allocated UMB when we failed to load a 
 28748                                  ;		       COM file high. Also ensure that if the biggest block
 28749                                  ;		       into which we load the com file is less than 64K then
 28750                                  ;		       we provide atleast 256 bytes of stack to the user.
 28751                                  ;
 28752                                  ;		M050 - Made Lie table search CASE insensitive
 28753                                  ;
 28754                                  ;		M060 - Removed special version table from the kernal and
 28755                                  ;                      put it in a device drive which puts the address
 28756                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 28757                                  ;		       as a DWORD.
 28758                                  ;
 28759                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 28760                                  ;		       entry do not try to load low if there is no space in
 28761                                  ;		       UMBs.
 28762                                  ;
 28763                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 28764                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 28765                                  ;		       change return address to LeaveDos if AL=5.
 28766                                  ;
 28767                                  ;               20-Jul-1992 bens    Added ifdef RESTRICTED_BUILD code that
 28768                                  ;                      controls building a version of MSDOS.SYS that only
 28769                                  ;                      runs programs from a fixed list (defined in the
 28770                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 28771                                  ;                      for details.  This feature is used to build a
 28772                                  ;                      "special" version of DOS that can be handed out to
 28773                                  ;                      OEM/ISV customers as part of a "service" disk.
 28774                                  ;
 28775                                  ; =========================================================================
 28776                                  
 28777                                  ;SAVEXIT 	EQU	10
 28778                                  
 28779                                  ;BREAK	<$WAIT - return previous process error code>
 28780                                  ; =========================================================================
 28781                                  ;	$WAIT - Return previous process error code.
 28782                                  ;
 28783                                  ;	Assembler usage:
 28784                                  ;
 28785                                  ;	    MOV     AH, WaitProcess
 28786                                  ;	    INT     int_command
 28787                                  ;
 28788                                  ;	ENTRY	none
 28789                                  ;	EXIT	(ax) = exit code
 28790                                  ;	USES	all
 28791                                  ; =========================================================================
 28792                                  
 28793                                  _$WAIT:
 28794                                  	; 02/08/2018 - Retro DOS v3.0
 28795                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 28796                                  
 28797 00005FDD 31C0                    	xor	AX,AX
 28798 00005FDF 368706[E202]            	xchg	AX,[ss:exit_code]
 28799 00005FE4 E916B7                  	jmp	SYS_RET_OK
 28800                                  
 28801                                  ; =========================================================================
 28802                                  ;BREAK <$exec - load/go a program>
 28803                                  ;	EXEC.ASM - EXEC System Call
 28804                                  ;
 28805                                  ;
 28806                                  ; Assembler usage:
 28807                                  ;	    lds     DX, Name
 28808                                  ;	    les     BX, Blk
 28809                                  ;	    mov     AH, Exec
 28810                                  ;	    mov     AL, FUNC
 28811                                  ;	    int     INT_COMMAND
 28812                                  ;
 28813                                  ;	AL  Function
 28814                                  ;	--  --------
 28815                                  ;	 0  Load and execute the program.
 28816                                  ;	 1  Load, create  the  program	header	but  do  not
 28817                                  ;	    begin execution.
 28818                                  ;	 3  Load overlay. No header created.
 28819                                  ;
 28820                                  ;	    AL = 0 -> load/execute program
 28821                                  ;
 28822                                  ;	    +---------------------------+
 28823                                  ;	    | WORD segment address of	|
 28824                                  ;	    | environment.		|
 28825                                  ;	    +---------------------------+
 28826                                  ;	    | DWORD pointer to ASCIZ	|
 28827                                  ;	    | command line at 80h	|
 28828                                  ;	    +---------------------------+
 28829                                  ;	    | DWORD pointer to default	|
 28830                                  ;	    | FCB to be passed at 5Ch	|
 28831                                  ;	    +---------------------------+
 28832                                  ;	    | DWORD pointer to default	|
 28833                                  ;	    | FCB to be passed at 6Ch	|
 28834                                  ;	    +---------------------------+
 28835                                  ;
 28836                                  ;	    AL = 1 -> load program
 28837                                  ;
 28838                                  ;	    +---------------------------+
 28839                                  ;	    | WORD segment address of	|
 28840                                  ;	    | environment.		|
 28841                                  ;	    +---------------------------+
 28842                                  ;	    | DWORD pointer to ASCIZ	|
 28843                                  ;	    | command line at 80h	|
 28844                                  ;	    +---------------------------+
 28845                                  ;	    | DWORD pointer to default	|
 28846                                  ;	    | FCB to be passed at 5Ch	|
 28847                                  ;	    +---------------------------+
 28848                                  ;	    | DWORD pointer to default	|
 28849                                  ;	    | FCB to be passed at 6Ch	|
 28850                                  ;	    +---------------------------+
 28851                                  ;	    | DWORD returned value of	|
 28852                                  ;	    | CS:IP			|
 28853                                  ;	    +---------------------------+
 28854                                  ;	    | DWORD returned value of	|
 28855                                  ;	    | SS:IP			|
 28856                                  ;	    +---------------------------+
 28857                                  ;
 28858                                  ;	    AL = 3 -> load overlay
 28859                                  ;
 28860                                  ;	    +---------------------------+
 28861                                  ;	    | WORD segment address where|
 28862                                  ;	    | file will be loaded.	|
 28863                                  ;	    +---------------------------+
 28864                                  ;	    | WORD relocation factor to |
 28865                                  ;	    | be applied to the image.	|
 28866                                  ;	    +---------------------------+
 28867                                  ;
 28868                                  ; Returns:
 28869                                  ;	    AX = error_invalid_function
 28870                                  ;	       = error_bad_format
 28871                                  ;	       = error_bad_environment
 28872                                  ;	       = error_not_enough_memory
 28873                                  ;	       = error_file_not_found
 28874                                  ; =========================================================================
 28875                                  ;
 28876                                  ;   Revision history:
 28877                                  ;
 28878                                  ;	 A000	version 4.00  Jan. 1988
 28879                                  ;
 28880                                  ; =========================================================================
 28881                                  
 28882                                  Exec_Internal_Buffer		EQU	OPENBUF
 28883                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 28884                                  
 28885                                  ; =========================================================================
 28886                                  
 28887                                  ;IF1		; warning message on buffers
 28888                                  ;%out	Please make sure that the following are contiguous and of the
 28889                                  ;%out	following sizes:
 28890                                  ;%out
 28891                                  ;%out	OpenBuf     128
 28892                                  ;%out	RenBuf	    128
 28893                                  ;%out	SearchBuf    53
 28894                                  ;%out	DummyCDS    curdirLen
 28895                                  ;ENDIF
 28896                                  
 28897                                  ; =========================================================================
 28898                                  
 28899                                  ; =========================================================================
 28900                                  ;
 28901                                  ; =========================================================================
 28902                                  
 28903                                  _$EXEC:
 28904                                  	; 02/08/2018 - Retro DOS v3.0
 28905                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 28906                                  
 28907                                  EXEC001S:
 28908                                  
 28909                                  	;LocalVar    Exec_Blk		,DWORD
 28910                                  	;LocalVar    Exec_Func		,BYTE
 28911                                  	;LocalVar    Exec_Load_High	,BYTE
 28912                                  	;LocalVar    Exec_FH		,WORD
 28913                                  	;LocalVar    Exec_Rel_Fac	,WORD
 28914                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 28915                                  	;LocalVar    Exec_Environ	,WORD
 28916                                  	;LocalVar    Exec_Size		,WORD
 28917                                  	;LocalVar    Exec_Load_Block	,WORD
 28918                                  	;LocalVar    Exec_DMA		,WORD
 28919                                  	;LocalVar    ExecNameLen 	,WORD
 28920                                  	;LocalVar    ExecName		,DWORD
 28921                                  	;
 28922                                  	;LocalVar    Exec_DMA_Save	,WORD
 28923                                  	;LocalVar    Exec_NoStack	,BYTE
 28924                                  
 28925                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28926                                  	;%define	Exec_Blk	dword [bp-4]
 28927                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 28928                                  	%define		Exec_BlkL	word [bp-4]	
 28929                                  	%define		Exec_BlkH	word [bp-2]
 28930                                  	%define		Exec_Func	byte [bp-5]
 28931                                  	%define		Exec_Load_High	byte [bp-6]
 28932                                  	%define		Exec_FH		word [bp-8]
 28933                                  	%define		Exec_Rel_Fac	word [bp-10]
 28934                                  	%define		Exec_Res_Len_Para word [bp-12]
 28935                                  	%define		Exec_Environ	word [bp-14]
 28936                                  	%define		Exec_Size	word [bp-16]
 28937                                  	%define		Exec_Load_Block	word [bp-18]
 28938                                  	%define		Exec_DMA	word [bp-20]
 28939                                  	%define		ExecNameLen	word [bp-22]
 28940                                  	;%define	ExecName	dword [bp-26]
 28941                                  	%define		ExecName	[bp-26] ; 09/08/2018
 28942                                  	%define		ExecNameL	word [bp-26]	
 28943                                  	%define		ExecNameH	word [bp-24]
 28944                                  	; MSDOS 6.0
 28945                                  	%define		Exec_DMA_Save	word [bp-28]
 28946                                  	%define		Exec_NoStack	byte [bp-29]
 28947                                  	
 28948                                  	; ==================================================================
 28949                                  	; validate function
 28950                                  	; ==================================================================
 28951                                  		      	
 28952                                  	;
 28953                                  	; M068 - Start
 28954                                  	;
 28955                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 28956                                  	; possibility that the count may not be decremented all the way to
 28957                                  	; 0. A typical case is if the program for which we intended to keep 
 28958                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 28959                                  	; calls), exits pre-maturely due to error conditions.
 28960                                  	;
 28961                                  
 28962                                  	; MSDOS 6.0
 28963                                  	;mov	byte [SS:A20OFF_COUNT], 0
 28964                                  
 28965                                  	;
 28966                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 28967                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 28968                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 28969                                  	;
 28970                                  	
 28971                                  	;cmp	al, 5			; Q: is this ExecReady call
 28972                                  	;jne	@f			; N: continue
 28973                                  					; Y: change ret addr. to LeaveDos.
 28974                                  	;pop	cx			; Note CX is not input to ExecReady
 28975                                  	;mov	cx, offset DOSCODE:LeaveDos
 28976                                  	;push	cx
 28977                                  ;@@:
 28978                                  	;
 28979                                  	; M068 - End
 28980                                  	;
 28981                                  
 28982                                  	;Enter
 28983                                  
 28984 00005FE7 55                      	push	bp
 28985 00005FE8 89E5                    	mov	bp,sp
 28986 00005FEA 83EC1E                  	sub	sp,30 ; MSDOS 6.0
 28987                                  	;sub	sp,26 ; MSDOS 3.3
 28988                                  
 28989                                  	; MSDOS 6.0
 28990                                  	;cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 28991                                  					; M030
 28992                                  	;jna	short Exec_Check_2
 28993                                  
 28994                                  	; MSDOS 3.3
 28995 00005FED 3C03                    	cmp	AL,3
 28996 00005FEF 760E                    	jna	short Exec_Check_2
 28997                                  
 28998                                  Exec_Bad_Fun:
 28999 00005FF1 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk 
 29000                                  					; Extended Error Locus	;smr;SS Override
 29001                                  	;mov	al,1
 29002 00005FF7 B001                    	mov	al,error_invalid_function
 29003                                  
 29004                                  Exec_Ret_Err:
 29005                                  	;Leave
 29006 00005FF9 89EC                    	mov	sp,bp
 29007 00005FFB 5D                      	pop	bp
 29008                                  	;transfer SYS_RET_ERR
 29009 00005FFC E907B7                  	jmp	SYS_RET_ERR
 29010                                  
 29011                                  	; MSDOS 6.0
 29012                                  ;ExecReadyJ:
 29013                                  	;call	ExecReady		; M028
 29014                                  	;jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 29015                                  
 29016                                  Exec_Check_2:
 29017 00005FFF 3C02                    	cmp	AL,2			
 29018 00006001 74EE                    	jz	short Exec_Bad_Fun
 29019                                  
 29020                                  	; MSDOS 6.0
 29021                                  	;cmp	al,4			; 2 & 4 are not allowed
 29022                                  	;je	short Exec_Bad_Fun
 29023                                  	;
 29024                                  	;cmp	al,5			; M028 ; M030
 29025                                  	;je	short ExecReadyJ		; M028
 29026                                  
 29027                                  	;mov	[bp-4],bx
 29028 00006003 895EFC                  	mov	Exec_BlkL,BX		; stash args
 29029                                  	;mov	[bp-2],es
 29030 00006006 8C46FE                  	mov	Exec_BlkH,ES
 29031                                  	;mov	[bp-5],al
 29032 00006009 8846FB                  	mov	Exec_Func,AL
 29033                                  	;mov	byte [bp-6],0
 29034 0000600C C646FA00                	mov	Exec_Load_High,0
 29035                                  
 29036                                  	;mov	[bp-26],dx
 29037 00006010 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 29038                                  	;mov	[bp-24],ds
 29039 00006013 8C5EE8                  	mov	ExecNameH,DS
 29040 00006016 89D6                    	mov	SI,DX			; move pointer to convenient place
 29041                                  	;invoke	DStrLen
 29042 00006018 E856BF                  	call	DStrLen
 29043                                  	;mov	[bp-22],cx
 29044 0000601B 894EEA                  	mov	ExecNameLen,CX		; save length
 29045                                  
 29046                                  	; MSDOS 6.0
 29047                                  	;mov	al, [AllocMethod]	; M063: save alloc method in 
 29048                                  	;mov	[AllocMsave], al	; M063: AllocMsave
 29049                                  
 29050 0000601E 30C0                    	xor	AL,AL			; open for reading
 29051 00006020 55                      	push	BP
 29052                                  
 29053                                  	; MSDOS 6.0
 29054                                  	;or	byte [DOS_FLAG], EXECOPEN ; this flag is set to indicate to 
 29055                                  					; the redir that this open call is
 29056                                  					; due to an exec.
 29057                                  
 29058                                  	;invoke	$OPEN			; is the file there?
 29059 00006021 E81510                  	call	_$OPEN
 29060                                  
 29061                                  	; MSDOS 6.0
 29062                                  	;pushf
 29063                                  	;and	byte [DOS_FLAG],~EXECOPEN; reset flag
 29064                                  	;popf
 29065                                  
 29066 00006024 5D                      	pop	BP
 29067                                  	;MSDOS 3.3
 29068 00006025 72D2                    	jc	short Exec_Ret_Err
 29069                                  
 29070                                  	;mov	[bp-8],ax
 29071 00006027 8946F8                  	mov	Exec_FH,AX
 29072 0000602A 89C3                    	mov	BX,AX
 29073 0000602C 30C0                    	xor	AL,AL
 29074                                  	;invoke	$Ioctl
 29075 0000602E E880CF                  	call	_$IOCTL
 29076 00006031 7207                    	jc	short Exec_BombJ
 29077                                  
 29078                                  	;test	dl,80h
 29079 00006033 F6C280                  	test	DL,devid_ISDEV
 29080 00006036 740A                    	jz	short Exec_Check_Environ
 29081                                  
 29082                                  	;mov	al,2
 29083 00006038 B002                    	mov	AL,error_file_not_found
 29084                                  Exec_BombJ:
 29085 0000603A E9CC00                  	jmp	Exec_Bomb
 29086                                  
 29087                                  BadEnv:
 29088                                  	;mov	al,0Ah
 29089 0000603D B00A                    	mov	AL,error_bad_environment
 29090 0000603F E9C700                  	jmp	Exec_Bomb
 29091                                  
 29092                                  Exec_Check_Environ:
 29093                                  	;mov	word [bp-18],0
 29094 00006042 C746EE0000              	mov	Exec_Load_Block,0
 29095                                  	;mov	word [bp-14],0
 29096 00006047 C746F20000              	mov	Exec_Environ,0
 29097                                  					; overlays... no environment
 29098                                  	;test	byte [bp-5],2
 29099 0000604C F646FB02                	test	Exec_Func,exec_func_overlay
 29100 00006050 7554                    	jnz	short Exec_Read_Header
 29101                                  
 29102                                  	;lds	si,[bp-4]
 29103 00006052 C576FC                  	lds	SI,Exec_Blk		; get block
 29104 00006055 8B04                    	mov	ax,[SI]
 29105                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 29106 00006057 09C0                    	or	AX,AX
 29107 00006059 750C                    	jnz	short Exec_Scan_Env
 29108                                  
 29109 0000605B 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 29110                                  	;mov	ax,[44]
 29111 00006060 A12C00                  	mov	AX,[PDB.ENVIRON]
 29112                                  
 29113                                  ; MSDOS 6.0
 29114                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 29115                                  ;
 29116                                  ; Exec_environ is being correctly initialized after the environment has been
 29117                                  ; allocated and copied form the parent's env. It must not be initialized here.
 29118                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 29119                                  ; parent's environment.
 29120                                  ;	mov	Exec_Environ,AX
 29121                                  ;
 29122                                  ;----------------------------------------------------------------------------
 29123                                  
 29124                                  	;mov	[bp-14],ax
 29125                                  	;mov	Exec_Environ,ax
 29126                                  
 29127 00006063 09C0                    	or	AX,AX
 29128 00006065 743F                    	jz	short Exec_Read_Header
 29129                                  
 29130                                  Exec_Scan_Env:
 29131 00006067 8EC0                    	mov	ES,AX
 29132 00006069 31FF                    	xor	DI,DI
 29133                                  	;mov	cx,7FFFh ; MSDOS 3.3
 29134 0000606B B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 29135 0000606E 30C0                    	xor	AL,AL
 29136                                  
 29137                                  Exec_Get_Environ_Len:
 29138 00006070 F2AE                    	repnz	scasb			; find that nul byte
 29139 00006072 75C9                    	jnz	short BadEnv
 29140                                  
 29141 00006074 49                      	dec	CX			; Dec CX for the next nul byte test
 29142 00006075 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 29143                                  
 29144 00006077 AE                      	scasb				; is there another nul byte?
 29145 00006078 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 29146                                  
 29147 0000607A 57                      	push	DI
 29148                                  	;lea	bx,[DI+11h]
 29149 0000607B 8D5D11                  	lea	BX,[DI+0Fh+2]
 29150                                  	;add	bx,[bp-22]
 29151 0000607E 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 29152                                  					; remember argv[0] length
 29153                                  					; round up and remember argc
 29154 00006081 B104                    	mov	CL,4
 29155 00006083 D3EB                    	shr	BX,CL			; number of paragraphs needed
 29156 00006085 06                      	push	ES
 29157                                  	;invoke	$Alloc			; can we get the space?
 29158 00006086 E8CA04                  	call	_$ALLOC
 29159 00006089 1F                      	pop	DS
 29160 0000608A 59                      	pop	CX
 29161 0000608B 7302                    	jnc	short Exec_Save_Environ
 29162                                  
 29163 0000608D EB74                    	jmp	SHORT Exec_No_Mem	; nope... cry and sob
 29164                                  
 29165                                  Exec_Save_Environ:
 29166 0000608F 8EC0                    	mov	ES,AX
 29167                                  	;mov	[bp-14],ax
 29168 00006091 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 29169 00006094 31F6                    	xor	SI,SI
 29170 00006096 89F7                    	mov	DI,SI
 29171 00006098 F3A4                    	rep	movsb			; copy the environment
 29172 0000609A B80100                  	mov	AX,1
 29173 0000609D AB                      	stosw
 29174                                  	;lds	si,[bp-26]
 29175 0000609E C576E6                  	lds	SI,ExecName
 29176                                  	;mov	cx,[bp-22]
 29177 000060A1 8B4EEA                  	mov	CX,ExecNameLen
 29178 000060A4 F3A4                    	rep	movsb
 29179                                  
 29180                                  Exec_Read_Header:
 29181                                  	; We read in the program header into the above data area and
 29182                                  	; determine where in this memory the image will be located.
 29183                                  
 29184                                  	;Context DS
 29185 000060A6 16                      	push	ss
 29186 000060A7 1F                      	pop	ds
 29187                                  	;mov	cx,26
 29188 000060A8 B91A00                  	mov	CX,Exec_Header_Len	; header size
 29189 000060AB BA[1E14]                	mov	DX,exec_signature
 29190 000060AE 06                      	push	ES
 29191 000060AF 1E                      	push	DS
 29192 000060B0 E87803                  	call	ExecRead
 29193 000060B3 1F                      	pop	DS
 29194 000060B4 07                      	pop	ES
 29195 000060B5 7250                    	jc	short Exec_Bad_File
 29196                                  
 29197 000060B7 09C0                    	or	AX,AX
 29198 000060B9 744C                    	jz	short Exec_Bad_File
 29199                                  	;cmp	ax,26
 29200 000060BB 83F81A                  	cmp	AX,Exec_Header_Len	; did we read the right number?
 29201 000060BE 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 29202                                  
 29203 000060C0 F706[2A14]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 29204 000060C6 7504                    	jnz	short Exec_Check_Sig
 29205                                  
 29206                                  	;mov	byte [bp-6],0FFh
 29207 000060C8 C646FAFF                	mov	Exec_Load_High,-1
 29208                                  
 29209                                  Exec_Check_Sig:
 29210 000060CC A1[1E14]                	mov	AX,[exec_signature]	; rms;NSS
 29211                                  	;cmp	ax,5A4Dh ; 'MZ'
 29212 000060CF 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 29213 000060D2 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29214                                  
 29215                                  	;cmp	ax,4D5Ah ; 'ZM'
 29216 000060D4 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 29217 000060D7 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29218                                  
 29219                                  Exec_Com_Filej:
 29220 000060D9 E9A201                  	jmp	Exec_Com_File
 29221                                  
 29222                                  	; We have the program header... determine memory requirements
 29223                                  
 29224                                  Exec_Save_Start:
 29225 000060DC A1[2214]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 29226 000060DF B105                    	mov	CL,5			; convert to paragraphs
 29227 000060E1 D3E0                    	shl	AX,CL
 29228 000060E3 2B06[2614]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs;rms;NSS
 29229                                  	;mov	[bp-12],ax
 29230 000060E7 8946F4                  	mov	Exec_Res_Len_Para,AX
 29231                                  
 29232                                  		; Do we need to allocate memory?
 29233                                  		; Yes if function is not load-overlay
 29234                                  
 29235                                  	;test	byte [bp-5],2
 29236 000060EA F646FB02                	test	Exec_Func,exec_func_overlay
 29237 000060EE 742C                    	jz	short Exec_Allocate	; allocation of space
 29238                                  
 29239                                  		; get load address from block
 29240                                  
 29241                                  	;les	di,[bp-4]
 29242 000060F0 C47EFC                  	les	DI,Exec_Blk
 29243 000060F3 268B05                  	mov	ax,[es:di]
 29244                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 29245                                  	;mov	[bp-20],ax
 29246 000060F6 8946EC                  	mov	Exec_DMA,AX
 29247 000060F9 268B4502                	mov	AX,[ES:DI+EXEC3.reloc_fac]
 29248                                  	;mov	[bp-10],ax
 29249 000060FD 8946F6                  	mov	Exec_Rel_Fac,AX
 29250                                  	; 10/08/2018
 29251 00006100 E9AB00                  	jmp	Exec_Find_Res		; M000
 29252                                  
 29253                                  Exec_No_Mem:
 29254                                  	;mov	al,8
 29255 00006103 B008                    	mov	AL,error_not_enough_memory
 29256 00006105 EB02                    	jmp	short Exec_Bomb
 29257                                  
 29258                                  Exec_Bad_File:
 29259                                  	;mov	al,0Bh
 29260 00006107 B00B                    	mov	AL,error_bad_format
 29261                                  
 29262                                  Exec_Bomb:
 29263                                  	;mov	bx,[bp-8]
 29264 00006109 8B5EF8                  	mov	BX,Exec_FH
 29265 0000610C E82B03                  	call	Exec_Dealloc
 29266                                  	;LeaveCrit CritMem
 29267 0000610F E85BBF                  	call	LcritMem
 29268                                  	;save	<AX,BP>
 29269 00006112 50                      	push	ax
 29270 00006113 55                      	push	bp
 29271                                  	;invoke	$CLOSE
 29272 00006114 E8B10C                  	call	_$CLOSE
 29273                                  	;restore <BP,AX>
 29274 00006117 5D                      	pop	bp
 29275 00006118 58                      	pop	ax
 29276 00006119 E9DDFE                  	jmp	Exec_Ret_Err
 29277                                  
 29278                                  Exec_Chk_Mem: 
 29279                                  	; MSDOS 6.0    			; M063 - Start
 29280                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29281                                  	;mov	bl,[AllocMsave]
 29282                                  	;mov	[AllocMethod], bl	; restore original allocmethod
 29283                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29284                                  	;jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 29285                                  	;				; N: continue
 29286                                  	;
 29287                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29288                                  	;jz	short Exec_No_Mem	; N: no memory 
 29289                                  	;mov	ax,[save_AX]		; Y: restore ax and
 29290                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 29291                                  	;				; M063 - End
 29292                                  
 29293                                  Exec_Allocate:
 29294                                  	; 09/09/2018
 29295                                  
 29296                                  	; M005 - START
 29297                                  	; If there is no STACK segment for this exe file and if this
 29298                                  	; not an overlay and the resident size is less than 64K - 
 29299                                  	; 256 bytes we shall add 256bytes bytes to the programs 
 29300                                  	; resident memory requirement and set Exec_SP to this value.
 29301                                  
 29302                                  	; MSDOS 6.0
 29303 0000611C C646E300                	mov	Exec_NoStack,0
 29304 00006120 833E[2C14]00            	cmp	word [exec_SS],0	; Q: is there a stack seg
 29305 00006125 7512                    	jne	short ea1		; Y: continue normal processing
 29306 00006127 833E[2E14]00            	cmp	word [exec_SP],0	; Q: is there a stack ptr
 29307 0000612C 750B                    	jne	short ea1		; Y: continue normal processing
 29308                                  
 29309 0000612E FE46E3                  	inc	Exec_NoStack
 29310 00006131 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 29311 00006134 7303                    	jae	short ea1		; Y: don't set Exec_SP
 29312                                  
 29313 00006136 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 29314                                  ea1:
 29315                                  	; M005 - END
 29316                                  
 29317                                  	; MSDOS 6.0			; M000 - start
 29318                                  	;test	byte [AllocMethod],HIGH_FIRST
 29319                                  	;				; Q: is the alloc strat high_first
 29320                                  	;jz	short Exec_Norm_Alloc	; N: normal allocate
 29321                                  	;				; Y: set high_only bit
 29322                                  	;or	byte [AllocMethod],HIGH_ONLY
 29323                                  	;				; M000 - end
 29324                                  
 29325                                  ;Exec_Norm_Alloc:
 29326                                  	;mov	[save_ax],ax		; M000: save ax for possible 2nd  
 29327                                  					; M000: attempt at allocating memory
 29328                                  	;;push	ax			; M000
 29329                                  
 29330                                  	; MSDOS 3.3
 29331 00006139 50                      	push	ax	
 29332                                  
 29333 0000613A BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 29334 0000613D 1E                      	push	DS
 29335                                  	;invoke	$Alloc			; should have carry set and BX has max
 29336 0000613E E81204                  	call	_$ALLOC
 29337 00006141 1F                      	pop	DS
 29338                                  
 29339                                  	; MSDOS 6.0
 29340                                  	;mov	ax,[save_ax]		; M000
 29341                                  	;;pop	AX			; M000
 29342                                  
 29343                                  	; MSDOS 3.3
 29344 00006142 58                      	pop	ax
 29345                                  
 29346 00006143 83C010                  	add	AX,10h			; room for header
 29347 00006146 83FB11                  	cmp	BX,11h			; enough room for a header
 29348                                  	; MSDOS 6.0
 29349                                  	;jb	short Exec_Chk_Mem	; M000
 29350                                  	; MSDOS 3.3	
 29351 00006149 72B8                    	jb	short Exec_No_Mem
 29352                                  
 29353 0000614B 39D8                    	cmp	AX,BX			; is there enough for bare image?
 29354                                  	; MSDOS 6.0
 29355                                  	;ja	short Exec_Chk_Mem	; M000
 29356                                  	; MSDOS 3.3
 29357 0000614D 77B4                    	ja	short Exec_No_Mem
 29358                                  
 29359                                  	;test	byte [bp-6],0FFh
 29360 0000614F F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 29361 00006153 7518                    	jnz	short Exec_BX_Max	; use max
 29362                                  
 29363                                  	; 09/09/2018
 29364                                  
 29365 00006155 0306[2814]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 29366                                  	; MSDOS 6.0
 29367                                  	;jc	short Exec_Chk_Mem		; M000
 29368                                  	; MSDOS 3.3
 29369 00006159 72A8                    	jc	short Exec_No_Mem
 29370                                  
 29371 0000615B 39D8                    	cmp	AX,BX			; enough space?
 29372                                  	; MSDOS 6.0
 29373                                  	;ja	short Exec_Chk_Mem	; M000: nope...	
 29374                                  	; MSDOS 3.3
 29375 0000615D 77A4                    	ja	short Exec_No_Mem
 29376                                  
 29377 0000615F 2B06[2814]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 29378 00006163 0306[2A14]              	add	AX,[exec_max_BSS] 	; go for the MAX
 29379 00006167 7204                    	jc	short Exec_BX_Max
 29380                                  
 29381 00006169 39D8                    	cmp	AX,BX
 29382 0000616B 7602                    	jbe	short Exec_Got_Block
 29383                                  
 29384                                  Exec_BX_Max:
 29385 0000616D 89D8                    	mov	AX,BX
 29386                                  
 29387                                  Exec_Got_Block:
 29388                                  	; 03/08/2018 - Retro DOS v3.0
 29389                                  
 29390 0000616F 1E                      	push	DS
 29391 00006170 89C3                    	mov	BX,AX
 29392                                  	;mov	[bp-16],bx
 29393 00006172 895EF0                  	mov	Exec_Size,BX
 29394                                  	;invoke	$Alloc			; get the space
 29395 00006175 E8DB03                  	call	_$ALLOC
 29396 00006178 1F                      	pop	DS
 29397                                  	; MSDOS 6.0
 29398                                  	;jc	short Exec_Chk_Mem	; M000
 29399                                  	; MSDOS 3.3
 29400 00006179 7288                    	jc	short Exec_No_Mem
 29401                                  
 29402                                  	; MSDOS 6.0
 29403                                  	;mov	cl,[AllocMsave]		; M063: 
 29404                                  	;mov	[AllocMethod],cl	; M063: restore allocmethod
 29405                                  
 29406                                  ;M029; Begin changes
 29407                                  ; This code does special handling for programs with no stack segment. If so,
 29408                                  ;check if the current block is larger than 64K. If so, we do not modify
 29409                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 29410                                  ;case Exec_SS is not changed.
 29411                                  ;
 29412                                  	; MSDOS 6.0
 29413 0000617B 807EE300                	cmp	Exec_NoStack,0
 29414                                  	;je	@f
 29415 0000617F 7412                    	je	short ea2
 29416                                  
 29417 00006181 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 29418                                  	;jae	@f			; Y: Exec_SP = 0
 29419 00006185 730C                    	jae	short ea2
 29420                                  ;
 29421                                  ;Make Exec_SP point at the top of the memory block
 29422                                  ;
 29423 00006187 B104                    	mov	cl,4
 29424 00006189 D3E3                    	shl	bx,cl			; get byte offset
 29425 0000618B 81EB0001                	sub	bx,100h			; take care of PSP
 29426 0000618F 891E[2E14]              	mov	[exec_SP],bx		; Exec_SP = top of block
 29427                                  ea2:
 29428                                  ;@@:
 29429                                  ;
 29430                                  ;M029; end changes
 29431                                  ;
 29432                                  	;mov	[bp-18],ax
 29433 00006193 8946EE                  	mov	Exec_Load_Block,AX
 29434 00006196 83C010                  	add	AX,10h
 29435                                  	;test	byte [bp-6],0FFh
 29436 00006199 F646FAFF                	test	Exec_Load_High,-1
 29437 0000619D 7409                    	jz	short Exec_Use_AX	; use ax for load info
 29438                                  
 29439                                  	;add	ax,[bp-16]
 29440 0000619F 0346F0                  	add	AX,Exec_Size		; go to end
 29441                                  	;sub	ax,[bp-12]
 29442 000061A2 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 29443 000061A5 83E810                  	sub	AX,10h			; drop off pdb
 29444                                  
 29445                                  Exec_Use_AX:
 29446                                  	;mov	[bp-10],ax
 29447 000061A8 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 29448                                  	;mov	[bp-20],ax
 29449 000061AB 8946EC                  	mov	Exec_DMA,AX		; beginning of dma
 29450                                  
 29451                                  	; Determine the location in the file of the beginning of
 29452                                  	; the resident
 29453                                  
 29454                                  Exec_Find_Res:
 29455                                  	; MSDOS 6.0
 29456                                  	;mov	dx,[bp-20]
 29457 000061AE 8B56EC                  	mov	DX,Exec_DMA
 29458                                  	;mov	[bp-28],dx
 29459 000061B1 8956E4                  	mov	Exec_DMA_Save,DX
 29460                                  
 29461                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29462 000061B4 8B16[2614]              	mov	DX,[exec_par_dir]
 29463 000061B8 52                      	push	DX
 29464 000061B9 B104                    	mov	CL,4
 29465 000061BB D3E2                    	shl	DX,CL			; low word of location
 29466 000061BD 58                      	pop	AX
 29467 000061BE B10C                    	mov	CL,12
 29468 000061C0 D3E8                    	shr	AX,CL			; high word of location
 29469 000061C2 89C1                    	mov	CX,AX			; CX <- high
 29470                                  
 29471                                  		; Read in the resident image (first, seek to it)
 29472                                  	;mov	bx,[bp-8]
 29473 000061C4 8B5EF8                  	mov	BX,Exec_FH
 29474 000061C7 1E                      	push	DS
 29475 000061C8 30C0                    	xor	AL,AL
 29476                                  	;invoke	$Lseek			; Seek to resident
 29477 000061CA E86D0D                  	call	_$LSEEK
 29478 000061CD 1F                      	pop	DS
 29479 000061CE 7303                    	jnc	short Exec_Big_Read
 29480                                  
 29481 000061D0 E936FF                  	jmp	Exec_Bomb
 29482                                  
 29483                                  Exec_Big_Read:				; Read resident into memory
 29484                                  	;mov	bx,[bp-12]
 29485 000061D3 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 29486 000061D6 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 29487 000061DA 7203                    	jb	short Exec_Read_OK
 29488                                  
 29489 000061DC BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 29490                                  
 29491                                  Exec_Read_OK:
 29492                                  	;sub	[bp-12],bx
 29493 000061DF 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 29494 000061E2 53                      	push	BX
 29495 000061E3 B104                    	mov	CL,4
 29496 000061E5 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 29497 000061E7 89D9                    	mov	CX,BX			; Count in correct register
 29498 000061E9 1E                      	push	DS
 29499                                  	;mov	ds,[bp-20]
 29500 000061EA 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 29501                                  
 29502 000061ED 31D2                    	xor	DX,DX
 29503 000061EF 51                      	push	CX			; Save our count
 29504 000061F0 E83802                  	call	ExecRead
 29505 000061F3 59                      	pop	CX			; Get old count to verify
 29506 000061F4 1F                      	pop	DS
 29507 000061F5 7248                    	jc	short Exec_Bad_FileJ
 29508                                  
 29509 000061F7 39C1                    	cmp	CX,AX			; Did we read enough?
 29510 000061F9 5B                      	pop	BX			; Get paragraph count back
 29511 000061FA 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 29512                                  
 29513                                  	; The read did not match the request. If we are off by 512
 29514                                  	; bytes or more then the header lied and we have an error.
 29515                                  
 29516 000061FC 29C1                    	sub	CX,AX
 29517 000061FE 81F90002                	cmp	CX,512
 29518 00006202 733B                    	jae	short Exec_Bad_FileJ
 29519                                  
 29520                                  	; We've read in CX bytes... bump DTA location
 29521                                  
 29522                                  ExecCheckEnd:
 29523                                  	;add	[bp-20],bx
 29524 00006204 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 29525                                  	;test	word [bp-12],0FFFFh
 29526 00006207 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 29527 0000620C 75C5                    	jnz	short Exec_Big_Read
 29528                                  
 29529                                  	; The image has now been read in. We must perform relocation
 29530                                  	; to the current location.
 29531                                  
 29532                                  exec_do_reloc:
 29533                                  	;mov	cx,[bp-10]
 29534 0000620E 8B4EF6                  	mov	CX,Exec_Rel_Fac
 29535 00006211 A1[2C14]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 29536 00006214 01C8                    	add	AX,CX			; and relocate him
 29537 00006216 A3[1814]                	mov	[exec_init_SS],AX 	; rms;NSS
 29538                                  
 29539 00006219 A1[2E14]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 29540 0000621C A3[1614]                	mov	[exec_init_SP],AX 	; rms;NSS
 29541                                  
 29542 0000621F C406[3214]              	les	AX,[exec_IP]		; rms;NSS
 29543 00006223 A3[1A14]                	mov	[exec_init_IP],AX 	; rms;NSS
 29544 00006226 8CC0                    	mov	AX,ES			; rms;NSS
 29545 00006228 01C8                    	add	AX,CX			; relocated...
 29546 0000622A A3[1C14]                	mov	[exec_init_CS],AX 	; rms;NSS
 29547                                  
 29548 0000622D 31C9                    	xor	CX,CX
 29549 0000622F 8B16[3614]              	mov	DX,[exec_rle_table]	; rms;NSS
 29550                                  	;mov	bx,[bp-8]
 29551 00006233 8B5EF8                  	mov	BX,Exec_FH
 29552 00006236 1E                      	push	DS
 29553 00006237 31C0                    	xor	AX,AX
 29554                                  	;invoke	$Lseek
 29555 00006239 E8FE0C                  	call	_$LSEEK
 29556 0000623C 1F                      	pop	DS
 29557 0000623D 7303                    	jnc	short exec_get_entries
 29558                                  
 29559                                  Exec_Bad_FileJ:
 29560 0000623F E9C5FE                  	jmp	Exec_Bad_File
 29561                                  
 29562                                  exec_get_entries:
 29563 00006242 8B16[2414]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 29564                                  
 29565                                  exec_read_reloc:
 29566 00006246 52                      	push	DX
 29567                                  	;mov	dx,OPENBUF
 29568 00006247 BA[6003]                	mov	DX,Exec_Internal_Buffer
 29569                                  	;mov	cx,388
 29570 0000624A B98401                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (390>>2)<<2
 29571 0000624D 1E                      	push	DS
 29572 0000624E E8DA01                  	call	ExecRead
 29573 00006251 07                      	pop	ES
 29574 00006252 5A                      	pop	DX
 29575 00006253 72EA                    	jc	short Exec_Bad_FileJ
 29576                                  
 29577                                  	;mov	cx,97
 29578 00006255 B96100                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (390>>2)
 29579                                  					; Pointer to byte location in header
 29580                                  	;mov	di,OPENBUF
 29581 00006258 BF[6003]                	mov	DI,Exec_Internal_Buffer
 29582                                  	;mov	si,[bp-10]
 29583 0000625B 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 29584                                  
 29585                                  exec_reloc_one:
 29586 0000625E 09D2                    	or	DX,DX			; Any more entries?
 29587 00006260 7416                    	jz	short Exec_Set_PDBJ
 29588                                  
 29589                                  exec_get_addr:
 29590 00006262 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 29591 00006265 8CD8                    	mov	AX,DS			; Relocate address of item
 29592                                  
 29593                                  	; MSDOS 6.0
 29594                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 29595                                  	;add	ax,[bp-28]
 29596 00006267 0346E4                  	add	AX,Exec_DMA_Save
 29597                                  
 29598 0000626A 8ED8                    	mov	DS,AX
 29599 0000626C 0137                    	add	[BX],SI
 29600 0000626E 83C704                  	add	DI,4
 29601 00006271 4A                      	dec	DX
 29602 00006272 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 29603                                  
 29604                                  	; We've exhausted a single buffer's worth. Read in the next
 29605                                  	; piece of the relocation table.
 29606                                  
 29607 00006274 06                      	push	ES
 29608 00006275 1F                      	pop	DS
 29609 00006276 EBCE                    	jmp	short exec_read_reloc
 29610                                  
 29611                                  Exec_Set_PDBJ:
 29612                                  
 29613                                  	; MSDOS 6.0
 29614                                  	;
 29615                                  	; We now determine if this is a buggy exe packed file and if 
 29616                                  	; so we patch in the right code. Note that fixexepatch will
 29617                                  	; point to a ret if dos loads low. The load segment as 
 29618                                  	; determined above will be in exec_dma_save
 29619                                  	;
 29620                                  	;push	es
 29621                                  	;push	ax			; M030
 29622                                  	;push	cx			; M030
 29623                                  	;mov	es,Exec_DMA_Save
 29624                                  	;mov	ax,[exec_init_CS]	; M030
 29625                                  	;mov	cx,[exec_init_IP]	; M030
 29626                                  	;call	word [fixexepatch]
 29627                                  	;call	word [Rational386PatchPtr]
 29628                                  	;pop	cx			; M030
 29629                                  	;pop	ax			; M030
 29630                                  	;pop	es
 29631                                  
 29632 00006278 E99D00                  	jmp	Exec_Set_PDB
 29633                                  
 29634                                  Exec_No_Memj:
 29635 0000627B E985FE                  	jmp	Exec_No_Mem
 29636                                  
 29637                                  	; we have a .COM file.	First, determine if we are merely
 29638                                  	; loading an overlay.
 29639                                  
 29640                                  Exec_Com_File:
 29641                                  	;test	byte [bp-5],2
 29642 0000627E F646FB02                	test	Exec_Func,exec_func_overlay
 29643 00006282 740C                    	jz	short Exec_Alloc_Com_File
 29644                                  	;lds	si,[bp-4]
 29645 00006284 C576FC                  	lds	SI,Exec_Blk		; get arg block
 29646 00006287 AD                      	lodsw				; get load address
 29647                                  	;mov	[bp-20],ax
 29648 00006288 8946EC                  	mov	Exec_DMA,AX
 29649 0000628B B8FFFF                  	mov	AX,0FFFFh
 29650 0000628E EB34                    	jmp	SHORT Exec_Read_Block	; read it all!
 29651                                  
 29652                                  Exec_Chk_Com_Mem:			
 29653                                  	; MSDOS 6.0	     		; M063 - Start
 29654                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29655                                  	;mov	bl,[AllocMsave]
 29656                                  	;mov	[AllocMethod],bl	; restore original allocmethod
 29657                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29658                                  	;jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 29659                                  	;				; N: continue
 29660                                  	;
 29661                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29662                                  	;jz	short Exec_No_Memj	; N: no memory 
 29663                                  	;
 29664                                  	;mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 29665                                  	;xor	bx,bx			; M047: bx => free arena
 29666                                  	;call	ChangeOwner		; M047: free this block
 29667                                  	;
 29668                                  	;jmp	short Exec_Norm_Com_Alloc
 29669                                  	;				; M063 - End
 29670                                  	
 29671                                  	; We must allocate the max possible size block (ick!)
 29672                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 29673                                  	; size of block.
 29674                                  
 29675                                  Exec_Alloc_Com_File:
 29676                                  
 29677                                  	; MSDOS 6.0			; M000 -start
 29678                                  	;test	byte [AllocMethod],HIGH_FIRST
 29679                                  	;				; Q: is the alloc strat high_first
 29680                                  	;jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 29681                                  	;				; Y: set high_only bit
 29682                                  	;or	byte [AllocMethod],HIGH_ONLY
 29683                                  	;				; M000 - end
 29684                                  ;Exec_Norm_Com_Alloc:			; M000
 29685                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29686 00006290 BBFFFF                  	mov	BX,0FFFFh
 29687                                  	;invoke	$Alloc			; largest piece available as error
 29688 00006293 E8BD02                  	call	_$ALLOC
 29689 00006296 09DB                    	or	BX,BX
 29690                                  	; MSDOS 6.0
 29691                                  	;jz	short Exec_Chk_Com_Mem	; M000
 29692                                  	; MSDOS 3.3
 29693 00006298 74E1                    	jz	short Exec_No_Memj
 29694                                  
 29695                                  	;mov	[bp-16],bx
 29696 0000629A 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 29697 0000629D 53                      	push	BX
 29698                                  	;invoke	$ALLOC			; largest piece available as error
 29699 0000629E E8B202                  	call	_$ALLOC
 29700 000062A1 5B                      	pop	BX			; get size of block...
 29701                                  	;mov	[bp-18],ax
 29702 000062A2 8946EE                  	mov	Exec_Load_Block,AX
 29703 000062A5 83C010                  	add	AX,10h			; increment for header
 29704                                  	;mov	[bp-20],ax
 29705 000062A8 8946EC                  	mov	Exec_DMA,AX
 29706 000062AB 31C0                    	xor	AX,AX			; presume 64K read...
 29707 000062AD 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 29708 000062B1 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 29709                                  
 29710 000062B3 89D8                    	mov	AX,BX			; convert size to bytes
 29711 000062B5 B104                    	mov	CL,4
 29712 000062B7 D3E0                    	shl	AX,CL
 29713                                  	; MSDOS 6.0
 29714 000062B9 3D0002                          cmp     AX,200h                 ; enough memory for PSP and stack?
 29715                                  ;	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29716                                  ;	;jbe	short Exec_No_Memj	; M000: jump if not
 29717                                  	; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 29718                                  	;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29719 000062BC 76BD                    	jbe	short Exec_No_Memj	; M000: jump if not
 29720                                  
 29721                                  					; M047: size of the block is < 64K
 29722 000062BE 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 29723                                  
 29724                                  Exec_Read_Com:
 29725                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29726 000062C1 2D0001                  	sub	AX,100h 		; remember size of psp
 29727                                  
 29728                                  Exec_Read_Block:
 29729 000062C4 50                      	push	AX			; save number to read
 29730                                  	;mov	bx,[bp-8]
 29731 000062C5 8B5EF8                  	mov	BX,Exec_FH		; of com file
 29732 000062C8 31C9                    	xor	CX,CX			; but seek to 0:0
 29733 000062CA 89CA                    	mov	DX,CX
 29734 000062CC 31C0                    	xor	AX,AX			; seek relative to beginning
 29735                                  	;invoke	$Lseek			; back to beginning of file
 29736 000062CE E8690C                  	call	_$LSEEK
 29737 000062D1 59                      	pop	CX			; number to read
 29738                                  	;mov	ds,[bp-20]
 29739 000062D2 8E5EEC                  	mov	DS,Exec_DMA
 29740 000062D5 31D2                    	xor	DX,DX
 29741 000062D7 51                      	push	CX
 29742 000062D8 E85001                  	call	ExecRead
 29743 000062DB 5E                      	pop	SI			; get number of bytes to read
 29744 000062DC 7303                    	jnc	short OkRead
 29745                                  
 29746 000062DE E926FE                  	jmp	Exec_Bad_File
 29747                                  
 29748                                  	; 10/09/2018
 29749                                  OkRead:
 29750 000062E1 39F0                    	cmp	AX,SI			; did we read them all?
 29751                                  	; MSDOS 6.0
 29752                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 29753                                  	; MSDOS 3.3
 29754 000062E3 7496                    	jz	short Exec_No_Memj	; M00: exactly the wrong number...
 29755                                  	
 29756                                  	; MSDOS 6.0
 29757                                  	;mov	bl,[AllocMsave]		; M063
 29758                                  	;mov	[AllocMethod],bl	; M063: restore allocmethod
 29759                                  
 29760                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29761                                  	;test	byte [bp-5],2
 29762 000062E5 F646FB02                	test	Exec_Func,exec_func_overlay
 29763 000062E9 752D                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 29764                                  
 29765                                  	;mov	ax,[bp-20]
 29766 000062EB 8B46EC                  	mov	AX,Exec_DMA
 29767 000062EE 83E810                  	sub	AX,10h
 29768 000062F1 36A3[1C14]              	mov	[SS:exec_init_CS],AX
 29769 000062F5 36C706[1A14]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 29770                                  
 29771                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 29772                                  	; of 0 on stack.
 29773                                  
 29774 000062FC 81C6FE00                	add	SI,0FEh 		; make room for stack
 29775                                  
 29776                                  	; MSDOS 6.0
 29777 00006300 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 29778 00006303 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 29779 00006305 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 29780                                  
 29781                                  Exec_St_Ok:
 29782                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29783 00006309 368936[1614]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 29784 0000630E 36A3[1814]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 29785 00006312 8ED8                    	mov	DS,AX
 29786 00006314 C7040000                	mov	WORD [SI],0		; 0 for return
 29787                                  
 29788                                  	; MSDOS 6.0
 29789                                  	;
 29790                                  	; M068
 29791                                  	;
 29792                                  	; We now determine if this is a Copy Protected App. If so the 
 29793                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 29794                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 29795                                  
 29796                                  	;call	word ptr [ChkCopyProt]	
 29797                                  
 29798                                  Exec_Set_PDB:
 29799                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29800                                  	;mov	bx,[bp-8]
 29801 00006318 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 29802 0000631B E81C01                  	call	Exec_Dealloc
 29803 0000631E 55                      	push	BP
 29804                                  	;invoke	$Close			; release the jfn
 29805 0000631F E8A60A                  	call	_$CLOSE
 29806 00006322 5D                      	pop	BP
 29807 00006323 E81F01                  	call	Exec_Alloc
 29808                                  	;test	byte [bp-5],2
 29809 00006326 F646FB02                	test	Exec_Func,exec_func_overlay
 29810 0000632A 7406                    	jz	short Exec_Build_Header
 29811                                  
 29812                                  	; MSDOS 6.0
 29813                                  	;call	Scan_Execname
 29814                                  	;call	Scan_Special_Entries
 29815                                  	;
 29816                                  ;SR;
 29817                                  ;The current lie strategy uses the PSP to store the lie version. However,
 29818                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 29819                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 29820                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 29821                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 29822                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 29823                                  ;issues the version check, it gets the lie version until the next overlay
 29824                                  ;call is issued.
 29825                                  ;
 29826                                  	;cmp	DriverLoad,0		;was Sysinit processing done?
 29827                                  	;je	norm_ovl		;yes, no special handling
 29828                                  	;push	si
 29829                                  	;push	es
 29830                                  	;les	si,BiosDataPtr		;get ptr to BIOS data block
 29831                                  	;cmp	byte ptr es:[si],0		;in Sysinit?
 29832                                  	;je	sysinit_done		;no, Sysinit is finished
 29833                                  	;
 29834                                  	;mov	es,CurrentPDB		;es = current PSP (Sysinit PSP)
 29835                                  	;push	Special_Version
 29836                                  	;pop	es:PDB_Version		;store lie version in Sysinit PSP
 29837                                  		;;; PDB.VERSION
 29838                                  	;jmp	short setver_done
 29839                                  ;sysinit_done:
 29840                                  	;mov	DriverLoad,0		;Sysinit done,special handling off
 29841                                  ;setver_done:
 29842                                  	;pop	es
 29843                                  	;pop	si
 29844                                  ;norm_ovl:
 29845                                  
 29846                                  	;leave
 29847 0000632C 89EC                    	mov	sp,bp		
 29848 0000632E 5D                      	pop	bp
 29849                                  
 29850                                  	;transfer SYS_RET_OK		; overlay load -> done
 29851 0000632F E9CBB3                  	jmp	SYS_RET_OK
 29852                                  
 29853                                  Exec_Build_Header:
 29854                                  	;mov	dx,[bp-18]
 29855 00006332 8B56EE                  	mov	DX,Exec_Load_Block
 29856                                  					; assign the space to the process
 29857                                  	;mov	si,1
 29858 00006335 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 29859                                  	;mov	ax,[bp-14]
 29860 00006338 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 29861 0000633B 09C0                    	or	AX,AX
 29862 0000633D 7405                    	jz	short No_Owner		; no environment
 29863                                  
 29864 0000633F 48                      	dec	AX			; point to header
 29865 00006340 8ED8                    	mov	DS,AX
 29866 00006342 8914                    	mov	[SI],DX 		; assign ownership
 29867                                  
 29868                                  No_Owner:
 29869                                  	;mov	ax,[bp-18]
 29870 00006344 8B46EE                  	mov	AX,Exec_Load_Block	; get load block pointer
 29871 00006347 48                      	dec	AX
 29872 00006348 8ED8                    	mov	DS,AX			; point to header
 29873 0000634A 8914                    	mov	[SI],DX 		; assign ownership
 29874                                  
 29875                                  	; MSDOS 6.0
 29876                                  	;push	DS			;AN000;MS. make ES=DS
 29877                                  	;pop	ES			;AN000;MS.
 29878                                  	;mov	DI,Arena_Name		;AN000;MS. ES:DI points to destination
 29879                                  	;call	Scan_Execname		;AN007;MS. parse execname
 29880                                  	;				;	   ds:si->name, cx=name length
 29881                                  	;push	CX			;AN007;;MS. save for fake version
 29882                                  	;push	SI			;AN007;;MS. save for fake version
 29883                                  	;
 29884                                  ;MoveName:				;AN000;
 29885                                  	;lodsb				;AN000;;MS. get char
 29886                                  	;cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 29887                                  	;jz	Mem_Done		;AN000;;MS. no, move to header
 29888                                  	;				;AN000;
 29889                                  	;stosb				;AN000;;MS. move char
 29890                                  	;				; MSKK bug fix - limit length copied
 29891                                  	;cmp	di,16			; end of memory arena block?
 29892                                  	;jae	mem_done		; jump if so
 29893                                  	;
 29894                                  	;loop	movename		;AN000;;MS. continue
 29895                                  ;Mem_Done:				;AN000;
 29896                                  	;xor	AL,AL			;AN000;;MS. make ASCIIZ
 29897                                  	;cmp	DI,SIZE ARENA		;AN000;MS. if not all filled
 29898                                  	;jae	Fill8			;AN000;MS.
 29899                                  	;
 29900                                  	;stosb				;AN000;MS.
 29901                                  	;
 29902                                  ;Fill8:					;AN000;
 29903                                  	;pop	SI			;AN007;MS. ds:si -> file name
 29904                                  	;pop	CX			;AN007;MS.
 29905                                  	;
 29906                                  	;call	Scan_Special_Entries	;AN007;MS.
 29907                                  
 29908                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29909 0000634C 52                      	push	DX
 29910                                  	;mov	si,[bp-16]
 29911 0000634D 8B76F0                  	mov	SI,Exec_Size
 29912 00006350 01D6                    	add	SI,DX
 29913                                  	;Invoke	$Dup_PDB		; ES is now PDB
 29914 00006352 E8D7BA                  	call	_$DUP_PDB
 29915 00006355 5A                      	pop	DX
 29916                                  
 29917                                  	;push	word [bp-14]
 29918 00006356 FF76F2                  	push	Exec_Environ
 29919                                  	;pop	WORD [ES:2Ch]
 29920 00006359 268F062C00              	pop	word [ES:PDB.ENVIRON]
 29921                                  
 29922                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 29923                                  					; version number in PSP
 29924                                   	;push	word [Special_Version]	; Set the DOS version number to
 29925                                  	;pop	word [ES:PDB_Version]	; to be used for this application
 29926                                  		; PDB.VERSION
 29927                                  
 29928                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 29929                                  	;lds	si,[bp-4]
 29930 0000635E C576FC                  	lds	SI,Exec_Blk		; get the block
 29931 00006361 1E                      	push	DS			; save its location
 29932 00006362 56                      	push	SI
 29933                                  	;lds	si, [si+6]
 29934 00006363 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 29935                                  
 29936                                  	; DS points to user space 5C FCB
 29937                                  
 29938 00006366 B90C00                  	mov	CX,12			; copy drive, name and ext
 29939 00006369 51                      	push	CX
 29940 0000636A BF5C00                  	mov	DI,5Ch
 29941 0000636D 8A1C                    	mov	BL,[SI]
 29942 0000636F F3A4                    	rep	movsb
 29943                                  
 29944                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 29945                                  
 29946 00006371 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 29947 00006373 AB                      	stosw
 29948 00006374 AB                      	stosw
 29949                                  
 29950                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 29951                                  
 29952 00006375 59                      	pop	CX
 29953 00006376 5E                      	pop	SI			; get block
 29954 00006377 1F                      	pop	DS
 29955 00006378 1E                      	push	DS			; save (again)
 29956 00006379 56                      	push	SI
 29957                                  	;lds	si,[si+0Ah]
 29958 0000637A C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 29959                                  
 29960                                  	; DS points to user space 6C FCB
 29961                                  
 29962 0000637D 8A3C                    	mov	BH,[SI] 		; do same as above
 29963 0000637F F3A4                    	rep	movsb
 29964 00006381 AB                      	stosw
 29965 00006382 AB                      	stosw
 29966 00006383 5E                      	pop	SI			; get block (last time)
 29967 00006384 1F                      	pop	DS
 29968                                  	;ld	si,[si+2]
 29969 00006385 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 29970                                  
 29971                                  	; DS points to user space 80 command line
 29972                                  
 29973 00006388 80C980                  	or	CL,80h
 29974 0000638B 89CF                    	mov	DI,CX
 29975 0000638D F3A4                    	rep	movsb			; Wham!
 29976                                  
 29977                                  	; Process BX into default AX (validity of drive specs on args).
 29978                                  	; We no longer care about DS:SI.
 29979                                  
 29980 0000638F FEC9                    	dec	CL			; get 0FFh in CL
 29981 00006391 88F8                    	mov	AL,BH
 29982 00006393 30FF                    	xor	BH,BH
 29983                                  	;invoke	GetVisDrv
 29984 00006395 E8C705                  	call	GetVisDrv
 29985 00006398 7302                    	jnc	short Exec_BL
 29986                                  
 29987 0000639A 88CF                    	mov	BH,CL
 29988                                  
 29989                                  Exec_BL:
 29990 0000639C 88D8                    	mov	AL,BL
 29991 0000639E 30DB                    	xor	BL,BL
 29992                                  	;invoke	GetVisDrv
 29993 000063A0 E8BC05                  	call	GetVisDrv
 29994 000063A3 7302                    	jnc	short Exec_Set_Return
 29995                                  
 29996 000063A5 88CB                    	mov	BL,CL
 29997                                  
 29998                                  Exec_Set_Return:
 29999                                  	;invoke	Get_User_Stack			; get his return address
 30000 000063A7 E861B2                  	call	Get_User_Stack
 30001                                  
 30002                                  	;push	word [si+14h]
 30003 000063AA FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30004                                  	;push	word [si+12h]
 30005 000063AD FF7412                  	push	word [SI+user_env.user_IP]
 30006                                  	;push	word [si+14h]
 30007 000063B0 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30008                                  	;push	word [si+12h]
 30009 000063B3 FF7412                  	push	word [SI+user_env.user_IP]
 30010                                  	;pop	word [ES:0Ah]
 30011 000063B6 268F060A00              	pop	WORD [ES:PDB.EXIT]
 30012                                  	;pop	word [ES:0Ch]
 30013 000063BB 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 30014                                  
 30015 000063C0 31C0                    	xor	AX,AX
 30016 000063C2 8ED8                    	mov	DS,AX
 30017                                  					; save them where we can get them
 30018                                  					; later when the child exits.
 30019                                  	;pop	word [88h]
 30020 000063C4 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 30021                                  	;pop	word [90h]
 30022 000063C8 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 30023                                  
 30024 000063CC 36C706[DA02]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 30025 000063D3 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	; SS Override
 30026 000063D8 368C1E[DC02]            	mov	[SS:DMAADD+2],DS	; SS Override
 30027                                  
 30028                                  	;test	byte [bp-5],1
 30029 000063DD F646FB01                	test	Exec_Func,exec_func_no_execute
 30030 000063E1 7427                    	jz	short exec_go
 30031                                  
 30032 000063E3 36C536[1614]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 30033                                  	;les	di,[bp-4]
 30034 000063E8 C47EFC                  	les	DI,Exec_Blk		; and block for return
 30035                                  	;mov	[es:di+10h],ds
 30036 000063EB 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 30037                                  
 30038 000063EF 4E                      	dec	SI			; 'push' default AX
 30039 000063F0 4E                      	dec	SI
 30040 000063F1 891C                    	mov	[SI],BX 		; save default AX reg
 30041                                  	;mov	[es:di+0Eh], si
 30042 000063F3 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 30043                                  
 30044 000063F7 36C506[1A14]            	lds	AX,[SS:exec_init_IP]	; SS Override
 30045                                  	;mov	[es:di+14h],ds
 30046 000063FC 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 30047                                  	;mov	[es:di+12h],ax
 30048 00006400 26894512                	mov	[ES:DI+EXEC1.IP],AX
 30049                                  	
 30050                                  	;leave
 30051 00006404 89EC                    	mov	sp,bp
 30052 00006406 5D                      	pop	bp	
 30053                                  
 30054                                  	;transfer SYS_RET_OK
 30055 00006407 E9F3B2                  	jmp	SYS_RET_OK
 30056                                  
 30057                                  exec_go:
 30058 0000640A 36C536[1A14]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 30059 0000640F 36C43E[1614]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 30060 00006414 8CC0                    	mov	AX,ES
 30061                                  
 30062                                  	; MSDOS 6.0
 30063                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 30064                                  	;je	short Xfer_To_User	; N: transfer control to user
 30065                                  
 30066                                  	;push	ds			; Y: control must go to low mem stub
 30067                                  	;	
 30068                                  	;push	cs			;    where we disable a20 and Xfer 
 30069                                  	;pop	ds			;    control to user 
 30070                                  	;
 30071                                  	;or	byte [DOS_FLAG],EXECA20OFF ; M068:
 30072                                  	;				; M004: Set bit to signal int 21
 30073                                  	;				; ah = 25 & ah= 49. See dossym.inc 
 30074                                  	;				; under TAG M003 & M009 for 
 30075                                  	;				; explanation
 30076                                  	;mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 30077                                  	;				; M068: going to be turned OFF.
 30078                                  	;
 30079                                  	;mov	ax,ds			; ax = segment of low mem stub
 30080                                  	;pop	ds
 30081                                  	;
 30082                                  	;push	ax			; ret far into the low mem stub
 30083                                  	;mov	ax,Disa20_Xfer
 30084                                  	;push	ax
 30085                                  	;mov	AX,ES			; restore ax
 30086                                  	;retf
 30087                                  
 30088                                  Xfer_To_User:
 30089                                  	; DS:SI points to entry point
 30090                                  	; AX:DI points to initial stack
 30091                                  	; DX has PDB pointer
 30092                                  	; BX has initial AX value
 30093                                  
 30094 00006416 FA                      	cli
 30095                                  	; 15/08/2018
 30096 00006417 36C606[CF02]00          	mov	BYTE [SS:INDOS],0	; SS Override
 30097                                  
 30098 0000641D 8ED0                    	mov	SS,AX			; set up user's stack
 30099 0000641F 89FC                    	mov	SP,DI			; and SP
 30100 00006421 FB                      	sti
 30101                                  
 30102 00006422 1E                      	push	DS			; fake long call to entry
 30103 00006423 56                      	push	SI
 30104 00006424 8EC2                    	mov	ES,DX			; set up proper seg registers
 30105 00006426 8EDA                    	mov	DS,DX
 30106 00006428 89D8                    	mov	AX,BX			; set up proper AX
 30107                                  
 30108 0000642A CB                      	retf
 30109                                  
 30110                                  ; 04/08/2018 - Retro DOS v3.0
 30111                                  
 30112                                  ;----------------------------------------------------------------------------
 30113                                  ;
 30114                                  ;----------------------------------------------------------------------------
 30115                                  
 30116                                  ExecRead:
 30117 0000642B E80C00                  	CALL	Exec_Dealloc
 30118                                  	;mov	bx,[bp-8]
 30119 0000642E 8B5EF8                  	MOV	bx,Exec_FH
 30120 00006431 55                      	PUSH	BP
 30121 00006432 E8AB0A                  	call	_$READ
 30122 00006435 5D                      	POP	BP
 30123 00006436 E80C00                  	CALL	Exec_Alloc
 30124 00006439 C3                      	retn
 30125                                  
 30126                                  ;----------------------------------------------------------------------------
 30127                                  ;
 30128                                  ;----------------------------------------------------------------------------
 30129                                  
 30130                                  Exec_Dealloc:
 30131 0000643A 53                      	push	BX
 30132                                  	;mov	bx,0
 30133 0000643B 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 30134 0000643D E825BC                  	call	EcritMem
 30135 00006440 E81000                  	call	ChangeOwners
 30136 00006443 5B                      	pop	BX
 30137 00006444 C3                      	retn
 30138                                  
 30139                                  ;----------------------------------------------------------------------------
 30140                                  ;
 30141                                  ;----------------------------------------------------------------------------
 30142                                  
 30143                                  Exec_Alloc:
 30144 00006445 53                      	push	BX
 30145                                  	;mov	bx,[SS:CurrentPDB]	; SS Override
 30146 00006446 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 30147 0000644B E80500                  	call	ChangeOwners
 30148 0000644E E81CBC                  	call	LcritMem
 30149 00006451 5B                      	pop	BX
 30150 00006452 C3                      	retn
 30151                                  
 30152                                  ;----------------------------------------------------------------------------
 30153                                  ;
 30154                                  ;----------------------------------------------------------------------------
 30155                                  
 30156                                  ChangeOwners:
 30157 00006453 9C                      	pushf
 30158 00006454 50                      	push	AX
 30159                                  	;mov	ax,[bp-14]
 30160 00006455 8B46F2                  	mov	AX,Exec_Environ
 30161 00006458 E80900                  	call	ChangeOwner
 30162                                  	;mov	ax,[bp-18]
 30163 0000645B 8B46EE                  	mov	AX,Exec_Load_Block
 30164 0000645E E80300                  	call	ChangeOwner
 30165 00006461 58                      	pop	AX
 30166 00006462 9D                      	popf
 30167                                  chgown_retn:
 30168 00006463 C3                      	retn
 30169                                  
 30170                                  ;----------------------------------------------------------------------------
 30171                                  ;
 30172                                  ;----------------------------------------------------------------------------
 30173                                  
 30174                                  ChangeOwner:
 30175 00006464 09C0                    	or	AX,AX			; is area allocated?
 30176 00006466 74FB                    	jz	short chgown_retn	; no, do nothing
 30177 00006468 48                      	dec	AX
 30178 00006469 1E                      	push	DS
 30179 0000646A 8ED8                    	mov	DS,AX
 30180 0000646C 891E0100                	mov	[ARENA.OWNER],BX
 30181 00006470 1F                      	pop	DS
 30182 00006471 C3                      	retn
 30183                                  
 30184                                  
 30185                                  ; MSDOS 6.0
 30186                                  ;----------------------------------------------------------------------------
 30187                                  ;
 30188                                  ;----------------------------------------------------------------------------
 30189                                  
 30190                                  ;Procedure	Scan_Execname,near
 30191                                  ;	ASSUME	SS:DosData
 30192                                  ;
 30193                                  ;	lds	SI,ExecName		; DS:SI points to name
 30194                                  ;Entry	Scan_Execname1			; M028
 30195                                  ;Save_Begin:				;
 30196                                  ;	mov	CX,SI			; CX= starting addr
 30197                                  ;Scan0:					;
 30198                                  ;	lodsb				; get char
 30199                                  ;
 30200                                  ;	cmp	AL,':'			; is ':' , may be A:name
 30201                                  ;	jz	save_begin		; yes, save si
 30202                                  ;	cmp	AL,'\'                  ; is '\', may be A:\name
 30203                                  ;	jz	save_begin		; yes, save si
 30204                                  ;	cmp	AL,0			; is end of name
 30205                                  ;	jnz	scan0			; no, continue scanning
 30206                                  ;	sub	SI,CX			; get name's length
 30207                                  ;	xchg	SI,CX			; cx= length, si= starting addr
 30208                                  ;
 30209                                  ;	return
 30210                                  ;
 30211                                  ;EndProc Scan_Execname
 30212                                  
 30213                                  ; MSDOS 6.0
 30214                                  ;----------------------------------------------------------------------------
 30215                                  ;
 30216                                  ;----------------------------------------------------------------------------
 30217                                  
 30218                                  ;Procedure    Scan_Special_Entries,near
 30219                                  ;	assume	SS:DOSDATA
 30220                                  ;
 30221                                  ;	dec	CX			; cx= name length
 30222                                  ;;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 30223                                  ;					;reset to current version
 30224                                  ;	mov    [Special_Version],(Minor_Version SHL 8) + Major_Version
 30225                                  ;;***	call	Reset_Version
 30226                                  ;
 30227                                  ;;M060	push	SS
 30228                                  ;;M060	pop	ES
 30229                                  ;
 30230                                  ;	les	DI,SS:UU_IFS_DOS_CALL	;M060; ES:DI --> Table in SETVER.SYS
 30231                                  ;	mov	AX,ES			;M060; First do a NULL ptr check to
 30232                                  ;	or	AX,DI			;M060; be sure the table exists
 30233                                  ;	jz	End_List		;M060; If ZR then no table
 30234                                  ;
 30235                                  ;GetEntries:
 30236                                  ;	mov	AL,ES:[DI]		; end of list
 30237                                  ;	or	AL,AL
 30238                                  ;	jz	End_List		; yes
 30239                                  ;
 30240                                  ;	mov	[Temp_Var2],DI		; save di
 30241                                  ;	cmp	AL,CL			; same length ?
 30242                                  ;	jnz	SkipOne 		; no
 30243                                  ;
 30244                                  ;	inc	DI			; es:di -> special name
 30245                                  ;	push	CX			; save length and name addr
 30246                                  ;	push	SI
 30247                                  ;
 30248                                  ;;
 30249                                  ;; M050 - BEGIN
 30250                                  ;;
 30251                                  ;	push	ax			; save len
 30252                                  ;sse_next_char:
 30253                                  ;	lodsb
 30254                                  ;	call	UCase
 30255                                  ;	scasb
 30256                                  ;	jne	Not_Matched
 30257                                  ;	loop	sse_next_char
 30258                                  ;	
 30259                                  ;;
 30260                                  ;;	repz	cmpsb			; same name ?
 30261                                  ;;
 30262                                  ;;	jnz	Not_Matched		; no
 30263                                  ;;
 30264                                  ;	pop	ax			; take len off the stack
 30265                                  ;;
 30266                                  ;; M050 - END
 30267                                  ;;
 30268                                  ;	mov	AX,ES:[DI]		; get special version
 30269                                  ;	mov	[Special_Version],AX	; save it
 30270                                  ;
 30271                                  ;;***	mov	AL,ES:[DI+2]		; get fake count
 30272                                  ;;***	mov	[Fake_Count],AL 	; save it
 30273                                  ;
 30274                                  ;	pop	SI
 30275                                  ;	pop	CX
 30276                                  ;	jmp	SHORT end_list
 30277                                  ;
 30278                                  ;Not_Matched:
 30279                                  ;	pop	ax			; get len from stack ; M050
 30280                                  ;	pop	SI			; restore si,cx
 30281                                  ;	pop	CX
 30282                                  ;
 30283                                  ;SkipOne:
 30284                                  ;	mov	DI,[Temp_Var2]		; restore old di use SS Override
 30285                                  ;	xor	AH,AH			; position to next entry
 30286                                  ;	add	DI,AX
 30287                                  ;
 30288                                  ;	add	DI,3			; DI -> next entry length
 30289                                  ;;***	add	DI,4			; DI -> next entry length
 30290                                  ;
 30291                                  ;	jmp	Getentries
 30292                                  ;
 30293                                  ;End_List:
 30294                                  ;	return
 30295                                  ;
 30296                                  ;EndProc Scan_Special_Entries
 30297                                  
 30298                                  
 30299                                  ; 04/08/2018 - Retro DOS v3.0
 30300                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 30301                                  
 30302                                  ;----------------------------------------------------------------------------
 30303                                  ;SUBTTL Terminate and stay resident handler
 30304                                  ;
 30305                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 30306                                  ;	    truncate the current block.
 30307                                  ;
 30308                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 30309                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 30310                                  ;	    and restoring the vectors.
 30311                                  ;
 30312                                  ;----------------------------------------------------------------------------
 30313                                  
 30314                                  _$KEEP_PROCESS:
 30315 00006472 50                      	push	AX			; keep exit code around
 30316                                  	;mov	byte [SS:EXIT_TYPE],3
 30317 00006473 36C606[1705]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 30318 00006479 368E06[DE02]            	mov	ES,[SS:CurrentPDB]
 30319 0000647E 83FA06                  	cmp	DX,6h			; keep enough space around for system
 30320 00006481 7303                    	jae	short Keep_Shrink	; info
 30321                                  
 30322 00006483 BA0600                  	mov	DX,6h
 30323                                  
 30324                                  Keep_Shrink:
 30325 00006486 89D3                    	mov	BX,DX
 30326 00006488 53                      	push	BX
 30327 00006489 06                      	push	ES
 30328 0000648A E8BF01                  	call	_$SETBLOCK		; ignore return codes.
 30329 0000648D 1F                      	pop	DS
 30330 0000648E 5B                      	pop	BX
 30331 0000648F 7207                    	jc	short Keep_Done		; failed on modification
 30332                                  
 30333 00006491 8CD8                    	mov	AX,DS
 30334 00006493 01D8                    	add	AX,BX
 30335                                  	;mov	[2],ax
 30336 00006495 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 30337                                  
 30338                                  Keep_Done:
 30339 00006498 58                      	pop	AX
 30340 00006499 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 30341                                  
 30342                                  ;----------------------------------------------------------------------------
 30343                                  ;
 30344                                  ;----------------------------------------------------------------------------
 30345                                  
 30346                                  STAY_RESIDENT:
 30347                                  	;mov	ax,3100h
 30348 0000649B B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 30349 0000649E 83C20F                  	add	DX,15
 30350 000064A1 D1DA                    	rcr	DX,1
 30351 000064A3 B103                    	mov	CL,3
 30352 000064A5 D3EA                    	shr	DX,CL
 30353                                  
 30354 000064A7 E900B0                  	jmp	COMMAND
 30355                                  
 30356                                  ;----------------------------------------------------------------------------
 30357                                  ;SUBTTL $EXIT - return to parent process
 30358                                  ;   Assembler usage:
 30359                                  ;	    MOV     AL, code
 30360                                  ;	    MOV     AH, Exit
 30361                                  ;	    INT     int_command
 30362                                  ;   Error return:
 30363                                  ;	    None.
 30364                                  ;
 30365                                  ;----------------------------------------------------------------------------
 30366                                  
 30367                                  _$EXIT:
 30368                                  	; 04/08/2018 - Retro DOS v3.0
 30369                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 30370 000064AA 30E4                    	xor	AH,AH
 30371 000064AC 368626[F902]            	xchg	AH,[SS:DidCTRLC]
 30372 000064B1 08E4                    	or	AH,AH
 30373                                  	;mov	BYTE [SS:EXIT_TYPE],0
 30374 000064B3 36C606[1705]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 30375 000064B9 7406                    	jz	short exit_inner
 30376                                  	;mov	BYTE [SS:EXIT_TYPE],1
 30377 000064BB 36C606[1705]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 30378                                  
 30379                                  	;entry	Exit_inner
 30380                                  exit_inner:
 30381 000064C1 E847B1                  	call	Get_User_Stack		;PBUGBUG
 30382                                  
 30383 000064C4 36FF36[DE02]            	push	word [ss:CurrentPDB]
 30384                                  	;pop	word [si+14h]
 30385 000064C9 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 30386 000064CC EB08                    	jmp	short abort_inner
 30387                                  
 30388                                  ;BREAK <$ABORT -- Terminate a process>
 30389                                  ;----------------------------------------------------------------------------
 30390                                  ; Inputs:
 30391                                  ;	user_CS:00 must point to valid program header block
 30392                                  ; Function:
 30393                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 30394                                  ;	to the terminate address
 30395                                  ; Returns:
 30396                                  ;	TO THE TERMINATE ADDRESS
 30397                                  ;----------------------------------------------------------------------------
 30398                                  
 30399                                  _$ABORT:
 30400 000064CE 30C0                    	xor	AL,AL
 30401                                  	;mov	byte [SS:EXIT_TYPE],0
 30402                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 30403 000064D0 36C606[1705]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 30404                                  
 30405                                  	; abort_inner must have AL set as the exit code! The exit type
 30406                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 30407                                  	; to be correct as the one that is terminating.
 30408                                  
 30409                                  abort_inner:
 30410 000064D6 368A26[1705]            	mov	AH,[SS:EXIT_TYPE]
 30411 000064DB 36A3[E202]              	mov	[SS:exit_code],AX
 30412 000064DF E829B1                  	call	Get_User_Stack
 30413                                  
 30414                                  	;mov	ds,[si+14h]
 30415 000064E2 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 30416 000064E5 31C0                    	xor	AX,AX
 30417 000064E7 8EC0                    	mov	ES,AX
 30418                                  	;mov	si,10
 30419 000064E9 BE0A00                  	mov	SI,SAVEXIT
 30420                                  	;mov	di,88h
 30421 000064EC BF8800                  	mov	DI,addr_int_terminate
 30422 000064EF A5                      	movsw
 30423 000064F0 A5                      	movsw
 30424 000064F1 A5                      	movsw
 30425 000064F2 A5                      	movsw
 30426 000064F3 A5                      	movsw
 30427 000064F4 A5                      	movsw
 30428 000064F5 E98EF4                  	jmp	reset_environment
 30429                                  
 30430                                  ; MSDOS 6.0
 30431                                  ;----------------------------------------------------------------------------
 30432                                  ;
 30433                                  ; fixexepatch will point to this is DOS loads low. 
 30434                                  ;
 30435                                  ;----------------------------------------------------------------------------
 30436                                  
 30437                                  ;retexepatch	proc	near
 30438                                  ;	
 30439                                  ;	ret
 30440                                  ;
 30441                                  ;retexepatch 	endp
 30442                                  
 30443                                  
 30444                                  ;============================================================================
 30445                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 30446                                  ;============================================================================
 30447                                  ; 04/08/2018 - Retro DOS v3.0
 30448                                  
 30449                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 30450                                  
 30451                                  ;**
 30452                                  ;	Microsoft Confidential
 30453                                  ;	Copyright (C) Microsoft Corporation 1991
 30454                                  ;	All Rights Reserved.
 30455                                  ;
 30456                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 30457                                  ;	I/O specs are defined in DISPATCH.
 30458                                  ;
 30459                                  ;	$ALLOC
 30460                                  ;	$SETBLOCK
 30461                                  ;	$DEALLOC
 30462                                  ;	$AllocOper
 30463                                  ;	arena_free_process
 30464                                  ;	arena_next
 30465                                  ;	check_signature
 30466                                  ;	Coalesce
 30467                                  ;
 30468                                  ;	Modification history:
 30469                                  ;
 30470                                  ;	    Created: ARR 30 March 1983
 30471                                  ;
 30472                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 30473                                  ;		      M003 - added support for link/unlink UMBs from
 30474                                  ;			     DOS arena chain. 7/18/90
 30475                                  ;		      M009 - Added error returns invalid function and 
 30476                                  ;			     arena trashed in set link state call.
 30477                                  ;		      M010 - Release UMB arenas allocated to current PDB
 30478                                  ;			     if UMB_HEAD is initialized.
 30479                                  ;
 30480                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 30481                                  ;			     support. Please see under M009 in 
 30482                                  ;			     ..\inc\dossym.inc. 8/31/90.
 30483                                  ;
 30484                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 30485                                  ;			     sure that umb_head arena is valid and also make
 30486                                  ;			     sure that the previous arena is pointing to 
 30487                                  ;			     umb_head.
 30488                                  ;
 30489                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 30490                                  ;			     set allloc strategy.
 30491                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 30492                                  ;			     bx in AllocSetStrat.
 30493                                  ;
 30494                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 30495                                  ;			     a bit to indicate to dos dispatcher to turn
 30496                                  ;			     a20 off before iret. See M016.
 30497                                  ;
 30498                                  
 30499                                  ;	BREAK	<memory allocation utility routines>
 30500                                  
 30501                                  
 30502                                  ; 15/04/2018 - Retro DOS v2.0
 30503                                  ;----------------------------------------------------------------------------
 30504                                  ; xenix memory calls for MSDOS
 30505                                  ;
 30506                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 30507                                  ; arena_owner_system are all equal to zero and are contained in DI.
 30508                                  ;
 30509                                  ;INCLUDE DOSSEG.ASM
 30510                                  
 30511                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30512                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30513                                  
 30514                                  ;.xlist
 30515                                  ;.xcref
 30516                                  ;INCLUDE DOSSYM.ASM
 30517                                  ;INCLUDE DEVSYM.ASM
 30518                                  ;.cref
 30519                                  ;.list
 30520                                  
 30521                                  ;TITLE ALLOC.ASM - memory arena manager
 30522                                  ;NAME Alloc
 30523                                  
 30524                                  ;SUBTTL memory allocation utility routines
 30525                                  ;PAGE
 30526                                  ;
 30527                                  ; arena data
 30528                                  ;
 30529                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 30530                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 30531                                  ;       i_need  FirstArena,WORD         ; first free block found
 30532                                  ;       i_need  BestArena,WORD          ; best free block found
 30533                                  ;       i_need  LastArena,WORD          ; last free block found
 30534                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 30535                                  
 30536                                  ;**	Arena_Free_Process
 30537                                  ;----------------------------------------------------------------------------
 30538                                  ;	Free all arena blocks allocated to a prOcess
 30539                                  ;
 30540                                  ;	ENTRY	(bx) = PID of process
 30541                                  ;	EXIT	none
 30542                                  ;	USES	????? BUGBUG
 30543                                  ;----------------------------------------------------------------------------
 30544                                  
 30545                                  arena_free_process:
 30546                                  	; 04/08/2018 - Retro DOS v3.0
 30547 000064F8 36A1[2400]                      MOV	AX,[SS:arena_head]
 30548                                  arena_free_process_start:
 30549 000064FC BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 30550                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 30551 000064FF E81F00                          CALL    check_signature         ; ES <- AX, check for valid block
 30552                                  
 30553                                  arena_free_process_loop:
 30554                                          ;retc
 30555 00006502 722C                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 30556 00006504 06                      	PUSH    ES
 30557 00006505 1F                              POP     DS
 30558                                  	;cmp	[1],bx 
 30559 00006506 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 30560 0000650A 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 30561                                  	; 20/05/2019
 30562                                  	;mov	[1],di
 30563 0000650C 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 30564                                  
 30565                                  arena_free_next:
 30566                                  	;cmp	byte [di],5Ah ;'Z'
 30567 00006510 803D5A                          CMP     BYTE [DI],arena_signature_end
 30568                                                                          ; end of road, Jack?
 30569                                          ;retz				; never come back no more
 30570 00006513 741B                    	JZ	SHORT AFP_RETN  ;msdos 3.3 (& MSDOS 2.11)
 30571                                  	; MSDOS 6.0
 30572                                  	;jz	short arena_chk_umbs
 30573                                          
 30574 00006515 E80200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 30575 00006518 EBE8                            JMP     SHORT arena_free_process_loop
 30576                                  
 30577                                  	; MSDOS 6.0
 30578                                  ;arena_chk_umbs:			; M010 - Start
 30579                                  	;mov	ax,[umb_head]		; ax = umb_head
 30580                                  	;cmp	ax,0FFFFh		; Q: is umb_head initialized
 30581                                  	;je	short ret_label		; N: we're done
 30582                                  	;
 30583                                  	;mov	di,ds			; di = last arena
 30584                                  	;cmp	di,ax			; Q: is last arena above umb_head
 30585                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 30586                                  	;jmp	short arena_free_process_start
 30587                                  					; M010 - End
 30588                                  
 30589                                  ;AFP_RETN:
 30590                                  ;	RETN
 30591                                  
 30592                                  ;	BREAK	<Arena Helper Routines>
 30593                                  
 30594                                  ;**	Arena_Next - Find Next item in Arena
 30595                                  ;----------------------------------------------------------------------------
 30596                                  ;	ENTRY	DS - pointer to block head
 30597                                  ;		(di) = 0
 30598                                  ;	EXIT	AX,ES - pointers to next head
 30599                                  ;		'C' set iff arena damaged
 30600                                  ;----------------------------------------------------------------------------
 30601                                  
 30602                                  arena_next:
 30603 0000651A 8CD8                            MOV     AX,DS                   ; AX <- current block
 30604 0000651C 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 30605 00006520 40                              INC     AX                      ; remember that header!
 30606                                  ;
 30607                                  ;       fall into check_signature and return
 30608                                  ;
 30609                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 30610                                  ;       RET
 30611                                  
 30612                                  ;**	Check_Signature - Check Memory Block Signature
 30613                                  ;----------------------------------------------------------------------------
 30614                                  ;	ENTRY	(AX) = address of block header
 30615                                  ;		(di) = 0
 30616                                  ;	EXIT	 ES = AX
 30617                                  ;		'C' clear if signature good
 30618                                  ;		'C' set if signature bad
 30619                                  ;	USES	ES, Flags
 30620                                  ;----------------------------------------------------------------------------
 30621                                  
 30622                                  check_signature:        
 30623                                  
 30624 00006521 8EC0                    	MOV     ES,AX                   ; ES <- AX
 30625                                  	;cmp	byte [es:di],4Dh ; 'M'
 30626 00006523 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 30627                                                                          ; IF next signature = not_end THEN
 30628 00006527 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 30629                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 30630 00006529 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 30631                                                                          ; IF next signature = end then
 30632 0000652D 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 30633 0000652F F9                              STC                             ; set error
 30634                                  ;ret_label: ; MSDOS 6.0
 30635                                  AFP_RETN:
 30636                                   	;  Retro DOS v.20 - 05/03/2018
 30637                                  check_signature_ok:
 30638                                  COALESCE_RETN:
 30639 00006530 C3                      	RETN
 30640                                  
 30641                                  ;**	Coalesce - Combine free blocks ahead with current block
 30642                                  ;----------------------------------------------------------------------------
 30643                                  ;	Coalesce adds the block following the argument to the argument block,
 30644                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 30645                                  ;	some callers (such as $setblock) use it to join a free block to it's
 30646                                  ;	preceeding allocated block.
 30647                                  ;
 30648                                  ;	ENTRY	(ds) = pointer to the head of a free block
 30649                                  ;		(di) = 0
 30650                                  ;	EXIT	'C' clear if OK
 30651                                  ;		  (ds) unchanged, this block updated
 30652                                  ;		  (ax) = address of next block, IFF not at end
 30653                                  ;		'C' set if arena trashed
 30654                                  ;	USES	(cx)
 30655                                  ;----------------------------------------------------------------------------
 30656                                          
 30657                                  Coalesce:
 30658                                  	;cmp	byte [di],5Ah ; 'Z'
 30659 00006531 803D5A                  	CMP     BYTE [DI],arena_signature_end
 30660                                                                          ; IF current signature = END THEN
 30661                                          ;retz				;   GOTO ok
 30662 00006534 74FA                            jz	short COALESCE_RETN
 30663 00006536 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 30664                                          ;retc				; IF no error THEN GOTO check
 30665 00006539 72F5                    	jc	short COALESCE_RETN
 30666                                  
 30667                                  coalesce_check:
 30668                                  	;cmp	[es:1],di
 30669 0000653B 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 30670                                          ;retnz				; IF next block isnt free THEN return
 30671 00006540 75EE                            JNZ	SHORT COALESCE_RETN
 30672                                  	;mov	cx,[ES:3]
 30673 00006542 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 30674 00006547 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 30675                                          ;ADD	[3],CX
 30676 00006548 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 30677 0000654C 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 30678 0000654F 880D                            MOV     [DI],CL
 30679 00006551 EBDE                            JMP     SHORT Coalesce		; try again
 30680                                  
 30681                                  ; 04/08/2018 - Retro DOS v3.0
 30682                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 30683                                  
 30684                                  ;	BREAK  <$Alloc - allocate space in memory>
 30685                                  
 30686                                  ; MSDOS 6.0
 30687                                  ;----------------------------------------------------------------------------
 30688                                  ;**	$Alloc - Allocate Memory Space
 30689                                  ;
 30690                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 30691                                  ;	Alloc returns a pointer to a free block of memory that
 30692                                  ;	has the requested size in paragraphs.
 30693                                  ;
 30694                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 30695                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 30696                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 30697                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 30698                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 30699                                  ;
 30700                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 30701                                  ;	starts from arena_head.
 30702                                  ;
 30703                                  ;	Assembler usage:
 30704                                  ;           MOV     BX,size
 30705                                  ;           MOV     AH,Alloc
 30706                                  ;           INT     21h
 30707                                  ;
 30708                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 30709                                  ;	so that we start searching the arena at it's first non-trivial free
 30710                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 30711                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 30712                                  ;	doesn't have too many memory objects in it beyond the first free one.
 30713                                  ;	verify that this is true; if so, this can stay as is
 30714                                  ;
 30715                                  ;	ENTRY	(bx) = requested size, in bytes
 30716                                  ;		(DS) = (ES) = DOSGROUP
 30717                                  ;	EXIT	'C' clear if memory allocated
 30718                                  ;		  (ax:0) = address of requested memory
 30719                                  ;		'C' set if request failed
 30720                                  ;		  (AX) = error_not_enough_memory
 30721                                  ;		    (bx) = max size we could have allocated
 30722                                  ;		  (ax) = error_arena_trashed
 30723                                  ;	USES	All
 30724                                  ;----------------------------------------------------------------------------
 30725                                  
 30726                                  ; MSDOS 2.11 (& MSDOS 3.3)
 30727                                  ;----------------------------------------------------------------------------
 30728                                  ;SUBTTL $Alloc - allocate space in memory
 30729                                  ;
 30730                                  ;   Assembler usage:
 30731                                  ;           MOV     BX,size
 30732                                  ;           MOV     AH,Alloc
 30733                                  ;           INT     21h
 30734                                  ;         AX:0 is pointer to allocated memory
 30735                                  ;         BX is max size if not enough memory
 30736                                  ;
 30737                                  ;   Description:
 30738                                  ;           Alloc returns  a  pointer  to  a  free  block of
 30739                                  ;       memory that has the requested  size  in  paragraphs.
 30740                                  ;
 30741                                  ;   Error return:
 30742                                  ;           AX = error_not_enough_memory
 30743                                  ;              = error_arena_trashed
 30744                                  ;----------------------------------------------------------------------------
 30745                                  
 30746                                  _$ALLOC:
 30747                                  	; 04/08/2018 - Retro DOS v3.0
 30748                                  	;EnterCrit critMem
 30749 00006553 E80FBB                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 30750                                  
 30751                                  	; MSDOS 6.0
 30752                                  	;mov	ax,[arena_head]
 30753                                  	;mov	[start_arena],ax	; assume LOW_FIRST
 30754                                  	;			
 30755                                  	;test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 30756                                  	;				; Q: should we start scanning from 
 30757                                  	;				;    UMB's
 30758                                  	;jz	short norm_alloc	; N: scan from arena_head
 30759                                  	;	
 30760                                  	;;cmp	word [umb_head],-1	; Q: Has umb_head been initialized
 30761                                  	;;je	short norm_alloc	; N: scan from arena_head
 30762                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30763                                  	;jz	short norm_alloc	; N: scan from arena_head
 30764                                  	;
 30765                                  	;mov	ax,[umb_head]
 30766                                  	;mov	[start_arena],ax	; start_arena = umb_head
 30767                                  	;
 30768                                  					; M000 - end
 30769                                  ;norm_alloc:
 30770 00006556 31C0                            XOR     AX,AX
 30771 00006558 89C7                            MOV     DI,AX
 30772                                  	; 15/03/2018
 30773 0000655A 36A3[EC02]                      MOV     [SS:FirstArena],AX	; init the options
 30774 0000655E 36A3[EE02]                      MOV     [SS:BestArena],AX
 30775 00006562 36A3[F002]                      MOV     [SS:LastArena],AX
 30776 00006566 50                              PUSH    AX                      ; alloc_max <- 0
 30777                                  	; 04/08/2018
 30778                                  start_scan:
 30779                                  	; MSDOS 6.0
 30780                                  	;mov	ax,[SS:start_arena]	; M000: AX <- beginning of arena
 30781                                  	;
 30782 00006567 36A1[2400]              	MOV     AX,[SS:arena_head]	; AX <- beginning of arena
 30783 0000656B E8B3FF                  	CALL    check_signature         ; ES <- AX, carry set if error
 30784 0000656E 7212                            JC      SHORT alloc_err		; IF error THEN GOTO err
 30785                                  
 30786                                  alloc_scan:
 30787 00006570 06                              PUSH    ES
 30788 00006571 1F                              POP     DS                      ; DS <- ES
 30789 00006572 393E0100                        CMP     [ARENA.OWNER],DI
 30790 00006576 742A                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 30791                                  
 30792                                  alloc_next:
 30793                                  	; MSDOS 6.0			; M000 - start 
 30794                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30795                                  	;jz	short norm_strat	; N: see if we reached last arena
 30796                                  	;
 30797                                  	;test	byte [AllocMethod],HIGH_FIRST
 30798                                  	;				; Q: is alloc strategy high_first
 30799                                  	;jz	short norm_strat	; N: see if we reached last arena
 30800                                  	;mov	ax,[start_arena]
 30801                                  	;cmp	ax,[arena_head]		; Q: did we start scan from 
 30802                                  					;    arena_head
 30803                                  	;jne	short norm_strat	; N: see if we reached last arena
 30804                                  	;mov	ax,ds			; ax = current block
 30805                                  	;cmp	ax,[umb_head]		; Q: check against umb_head 
 30806                                  	;jmp	short alloc_chk_end
 30807                                  
 30808                                  ;norm_strat:
 30809                                  	;cmp	byte [di],5Ah ; 'Z'
 30810 00006578 803D5A                          CMP     BYTE [DI],arena_signature_end
 30811                                                                          ; IF current block is last THEN
 30812 0000657B 740E                            JZ      SHORT alloc_end		;   GOTO end
 30813 0000657D E89AFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 30814 00006580 73EE                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 30815                                  
 30816                                  alloc_err:
 30817 00006582 58                              POP     AX
 30818                                  
 30819                                  alloc_trashed:
 30820                                  	;LeaveCrit critMem
 30821 00006583 E8E7BA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0	
 30822                                          ;error	error_arena_trashed
 30823                                  	;mov	al,7
 30824 00006586 B007                    	MOV	AL,error_arena_trashed
 30825                                  alloc_errj:
 30826 00006588 E97BB1                  	JMP	SYS_RET_ERR
 30827                                  
 30828                                  alloc_end:
 30829 0000658B 36833E[EC02]00                  CMP	WORD [SS:FirstArena],0	; 15/03/2018
 30830 00006591 756B                    	JNZ     SHORT alloc_do_split
 30831                                  
 30832                                  	; MSDOS 6.0
 30833                                  	;mov	ax,[arena_head]
 30834                                  	;cmp	ax,[start_arena]	; Q: started scanning from arena_head
 30835                                  	;je	short alloc_fail	; Y: not enough memory
 30836                                  	;				; N:
 30837                                  	;				; Q: is the alloc strat HIGH_ONLY
 30838                                  	;test 	byte [AllocMethod],HIGH_ONLY
 30839                                  	;jnz	short alloc_fail	; Y: return size of largest UMB
 30840                                  	;
 30841                                  	;mov	[start_arena],ax	; N: start scanning from arena_head
 30842                                  	;jmp	short start_scan
 30843                                  	;				; M000 - end
 30844                                  
 30845                                  alloc_fail:
 30846                                          ;invoke Get_User_Stack
 30847 00006593 E875B0                          CALL	Get_User_Stack
 30848 00006596 5B                      	POP     BX
 30849                                          ;MOV	[SI].user_BX,BX
 30850                                  	;MOV	[SI+2],BX
 30851 00006597 895C02                  	mov	[SI+user_env.user_BX],bx
 30852                                  	;LeaveCrit critMem
 30853 0000659A E8D0BA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30854                                  	;error	error_not_enough_memory
 30855                                  	;mov	al,8
 30856 0000659D B008                    	MOV	AL,error_not_enough_memory
 30857                                  	;jmp	short alloc_errj
 30858 0000659F E964B1                  	JMP	SYS_RET_ERR
 30859                                  
 30860                                  alloc_free:
 30861 000065A2 E88CFF                          CALL    Coalesce		; add following free block to current
 30862 000065A5 72DB                            JC	SHORT alloc_err		; IF error THEN GOTO err
 30863 000065A7 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30864 000065AB 5A                              POP     DX                      ; check for max found size
 30865 000065AC 39D1                            CMP     CX,DX
 30866 000065AE 7602                            JNA     SHORT alloc_test
 30867 000065B0 89CA                            MOV     DX,CX
 30868                                  
 30869                                  alloc_test:
 30870 000065B2 52                              PUSH    DX
 30871 000065B3 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 30872 000065B5 77C1                            JA      SHORT alloc_next	;   GOTO next
 30873                                  
 30874                                  	; 15/03/2018
 30875 000065B7 36833E[EC02]00                  CMP     WORD [SS:FirstArena],0
 30876 000065BD 7505                    	JNZ	SHORT alloc_best
 30877 000065BF 368C1E[EC02]                    MOV     [SS:FirstArena],DS	; save first one found	
 30878                                  alloc_best:
 30879 000065C4 36833E[EE02]00                  CMP     WORD [SS:BestArena],0
 30880 000065CA 740E                            JZ      SHORT alloc_make_best	; initial best
 30881 000065CC 06                              PUSH	ES
 30882 000065CD 368E06[EE02]                    MOV     ES,[SS:BestArena]
 30883 000065D2 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 30884 000065D7 07                              POP	ES
 30885 000065D8 7605                            JBE     SHORT alloc_last
 30886                                  alloc_make_best:
 30887 000065DA 368C1E[EE02]                    MOV     [SS:BestArena],DS	; assign best
 30888                                  alloc_last:
 30889 000065DF 368C1E[F002]                    MOV     [SS:LastArena],DS 	; assign last
 30890 000065E4 EB92                            JMP     SHORT alloc_next
 30891                                  ;
 30892                                  ; split the block high
 30893                                  ;
 30894                                  alloc_do_split_high:
 30895 000065E6 368E1E[F002]                    MOV     DS,[SS:LastArena]
 30896 000065EB 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30897 000065EF 29D9                            SUB     CX,BX
 30898 000065F1 8CDA                            MOV     DX,DS
 30899 000065F3 7444                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 30900 000065F5 01CA                            ADD     DX,CX                   ; point to next block
 30901 000065F7 8EC2                            MOV     ES,DX                   ; no decrement!
 30902 000065F9 49                              DEC     CX
 30903 000065FA 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 30904 000065FC EB26                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 30905                                  ;
 30906                                  ; we have scanned memory and have found all appropriate blocks
 30907                                  ; check for the type of allocation desired; first and best are identical
 30908                                  ; last must be split high
 30909                                  ;
 30910                                  alloc_do_split:
 30911                                  	; 04/08/2018
 30912                                  	; MSDOS 6.0			; M000 - start
 30913                                  	;xor	cx,cx
 30914                                  	;mov	cl,[AllocMethod]
 30915                                  	;and	cx,STRAT_MASK		; mask off bit 7
 30916                                  	;cmp	cx,BEST_FIT		; Q; is the alloc strategy best_fit
 30917                                  
 30918                                  	; 15/03/2018
 30919                                          ;CMP     BYTE [SS:AllocMethod], 1
 30920                                  	; 04/08/2018
 30921 000065FE 36803E[B002]01          	CMP     BYTE [SS:AllocMethod],BEST_FIT
 30922 00006604 77E0                            JA      SHORT alloc_do_split_high
 30923 00006606 368E1E[EC02]                    MOV     DS,[SS:FirstArena]        
 30924 0000660B 7205                    	JB      SHORT alloc_get_size
 30925 0000660D 368E1E[EE02]            	MOV     DS,[SS:BestArena]
 30926                                  
 30927                                  alloc_get_size:
 30928 00006612 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30929 00006616 29D9                            SUB     CX,BX                   ; get room left over
 30930 00006618 8CD8                            MOV     AX,DS
 30931 0000661A 89C2                            MOV     DX,AX                   ; save for owner setting
 30932 0000661C 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 30933 0000661E 01D8                            ADD     AX,BX
 30934 00006620 40                              INC     AX                      ; remember the header
 30935 00006621 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 30936 00006623 49                              DEC     CX                      ; CX <- size of split block
 30937                                  alloc_set_sizes:
 30938 00006624 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 30939 00006628 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 30940                                  	;mov	bl,4Dh ; 'M'
 30941 0000662D B34D                            MOV     BL,arena_signature_normal
 30942 0000662F 861D                            XCHG    BL,[DI]			; current signature <- 4D
 30943 00006631 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 30944 00006634 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 30945                                  
 30946                                  alloc_set_owner:
 30947 00006639 8EDA                            MOV     DS,DX
 30948 0000663B 36A1[DE02]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 30949 0000663F A30100                          MOV     [ARENA.OWNER],AX
 30950 00006642 8CD8                            MOV     AX,DS
 30951 00006644 40                              INC     AX
 30952 00006645 5B                              POP     BX
 30953                                  	;LeaveCrit critMem
 30954 00006646 E824BA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30955                                          ;transfer SYS_RET_OK
 30956 00006649 E9B1B0                  	JMP	SYS_RET_OK
 30957                                  
 30958                                  
 30959                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 30960                                  
 30961                                  ; MSDOS 6.0
 30962                                  ;----------------------------------------------------------------------------
 30963                                  ;**	$SETBLOCK - Change size of an Alocated Block
 30964                                  ;
 30965                                  ;	Setblock changes the size of an allocated block.  First, we coalesce
 30966                                  ;	any following free space onto this block; then we try to trim the
 30967                                  ;	block down to the size requested.
 30968                                  ;
 30969                                  ;	Note that if the guy wants to grow the block but that growth fails,
 30970                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 30971                                  ;	Thus the maximum-size-possible value that we return has already
 30972                                  ;	been allocated!  This is a bug, dare we fix it?  BUGBUG
 30973                                  ;
 30974                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 30975                                  ;		finish it's work.  FOr this reason we build the allocsf
 30976                                  ;		structure on the frame, to make us compatible with $ALLOCs
 30977                                  ;		code.
 30978                                  ;
 30979                                  ;	ENTRY	(es) = segment of old block
 30980                                  ;		(bx) = newsize
 30981                                  ;		(ah) = SETBLOCK
 30982                                  ;
 30983                                  ;	EXIT	'C' clear if OK
 30984                                  ;		'C' set if error
 30985                                  ;		  (ax) = error_invalid_block
 30986                                  ;		       = error_arena_trashed
 30987                                  ;		       = error_not_enough_memory
 30988                                  ;		       = error_invalid_function
 30989                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 30990                                  ;	USES	???? BUGBUG
 30991                                  ;----------------------------------------------------------------------------
 30992                                  
 30993                                  ; MSDOS 2.11 (& MSDOS 3.3)
 30994                                  ;----------------------------------------------------------------------------
 30995                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 30996                                  ;
 30997                                  ;   Assembler usage:
 30998                                  ;           MOV     ES,block
 30999                                  ;           MOV     BX,newsize
 31000                                  ;           MOV     AH,setblock
 31001                                  ;           INT     21h
 31002                                  ;         if setblock fails for growing, BX will have the maximum
 31003                                  ;         size possible
 31004                                  ;   Error return:
 31005                                  ;           AX = error_invalid_block
 31006                                  ;              = error_arena_trashed
 31007                                  ;              = error_not_enough_memory
 31008                                  ;              = error_invalid_function
 31009                                  ;----------------------------------------------------------------------------
 31010                                  
 31011                                  _$SETBLOCK:        
 31012                                  	; 04/08/2018 - Retro DOS v3.0
 31013                                  	;EnterCrit   critMem
 31014 0000664C E816BA                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31015                                  
 31016 0000664F BF0000                  	MOV     DI,ARENA.SIGNATURE
 31017 00006652 8CC0                            MOV     AX,ES
 31018 00006654 48                              DEC     AX
 31019 00006655 E8C9FE                          CALL    check_signature
 31020 00006658 7303                            JNC     SHORT setblock_grab
 31021                                  
 31022                                  setblock_bad:
 31023 0000665A E926FF                          JMP     alloc_trashed
 31024                                  
 31025                                  setblock_grab:
 31026 0000665D 8ED8                            MOV     DS,AX
 31027 0000665F E8CFFE                          CALL    Coalesce
 31028 00006662 72F6                            JC      SHORT setblock_bad
 31029 00006664 8B0E0300                        MOV     CX,[ARENA.SIZE]
 31030 00006668 51                              PUSH    CX
 31031 00006669 39CB                            CMP     BX,CX
 31032 0000666B 76A5                            JBE     SHORT alloc_get_size
 31033 0000666D E923FF                          JMP     alloc_fail
 31034                                  
 31035                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 31036                                  
 31037                                  ; MSDOS 6.0
 31038                                  ;----------------------------------------------------------------------------
 31039                                  ;**	$DEALLOC - Free Heap Memory
 31040                                  ;
 31041                                  ;	ENTRY	(es) = address of item
 31042                                  ;
 31043                                  ;	EXIT	'C' clear of OK
 31044                                  ;		'C' set if error
 31045                                  ;		  (AX) = error_invalid_block
 31046                                  ;	USES	???? BUGBUG
 31047                                  
 31048                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31049                                  ;----------------------------------------------------------------------------
 31050                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 31051                                  ;
 31052                                  ;   Assembler usage:
 31053                                  ;           MOV     ES,block
 31054                                  ;           MOV     AH,dealloc
 31055                                  ;           INT     21h
 31056                                  ;
 31057                                  ;   Error return:
 31058                                  ;           AX = error_invalid_block
 31059                                  ;              = error_arena_trashed
 31060                                  ;---------------------------------------------------------------------------- 
 31061                                  
 31062                                  _$DEALLOC:    
 31063                                  	; 04/08/2018 - Retro DOS v3.0
 31064                                  	;EnterCrit   critMem
 31065 00006670 E8F2B9                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31066                                  
 31067                                  	; MSDOS 6.0			; M016, M068 - Start
 31068                                  	;test	byte [DOS_FLAG],EXECA20OFF
 31069                                  					; Q: was the previous call an int 21
 31070                                  					;    exec call
 31071                                  	;jz	short deallocate	; N: continue
 31072                                  	;cmp	byte [A20OFF_COUNT], 0	; Q: is count 0
 31073                                  	;jne	short deallocate	; N: continue
 31074                                  	;mov	byte [A20OFF_COUNT], 1	; Y: set count to 1
 31075                                  ;deallocate:				; M016, M068 - End
 31076                                      
 31077 00006673 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 31078 00006676 8CC0                            MOV     AX,ES
 31079 00006678 48                              DEC     AX
 31080 00006679 E8A5FE                          CALL    check_signature
 31081 0000667C 720B                            JC      SHORT dealloc_err
 31082 0000667E 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 31083                                  	;LeaveCrit critMem
 31084 00006683 E8E7B9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31085                                          ;transfer SYS_RET_OK
 31086 00006686 E974B0                  	JMP	SYS_RET_OK
 31087                                  
 31088                                  dealloc_err:
 31089                                  	;LeaveCrit critMem
 31090 00006689 E8E1B9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31091                                          ;error	error_invalid_block
 31092                                  	;mov	al,9
 31093 0000668C B009                    	MOV	AL,error_invalid_block
 31094 0000668E E975B0                  	JMP	SYS_RET_ERR
 31095                                  
 31096                                  ;	BREAK $AllocOper - get/set allocation mechanism
 31097                                  
 31098                                  ; MSDOS 6.0
 31099                                  ;----------------------------------------------------------------------------
 31100                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 31101                                  ;
 31102                                  ;	Assembler usage:
 31103                                  ;           MOV     AH,AllocOper
 31104                                  ;           MOV     BX,method
 31105                                  ;           MOV     AL,func
 31106                                  ;           INT     21h
 31107                                  ;
 31108                                  ;	ENTRY	
 31109                                  ;		(al) = 0
 31110                                  ;		  Get allocation Strategy in (ax)
 31111                                  ;
 31112                                  ;		(al) = 1, (bx) = method = zw0000xy
 31113                                  ;		  Set allocation strategy.
 31114                                  ;		   w  = 1  => HIGH_ONLY
 31115                                  ;		   z  = 1  => HIGH_FIRST
 31116                                  ;		   xy = 00 => FIRST_FIT
 31117                                  ;		      = 01 => BEST_FIT
 31118                                  ;		      = 10 => LAST_FIT
 31119                                  ;
 31120                                  ;		(al) = 2
 31121                                  ;		  Get UMB link state in (al)
 31122                                  ;
 31123                                  ;		(al) = 3
 31124                                  ;		  Set UMB link state
 31125                                  ;		   (bx) = 0 => Unlink UMBs
 31126                                  ;		   (bx) = 1 => Link UMBs
 31127                                  ;
 31128                                  ;
 31129                                  ;	EXIT	'C' clear if OK
 31130                                  ;
 31131                                  ;		 if (al) = 0
 31132                                  ;		  (ax) = existing method
 31133                                  ;		 if (al) = 1
 31134                                  ;		  Sets allocation strategy
 31135                                  ;		 if (al) = 2
 31136                                  ;		  (al) = 0 => UMBs not linked
 31137                                  ;		  (al) = 1 => UMBs linked in
 31138                                  ;		 if (al) = 3
 31139                                  ;		  Links/Unlinks the UMBs into DOS chain
 31140                                  ;
 31141                                  ;		'C' set if error
 31142                                  ;		  AX = error_invalid_function
 31143                                  ;
 31144                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 31145                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 31146                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 31147                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 31148                                  ;		    arena' if an arena sig is damaged.
 31149                                  ;----------------------------------------------------------------------------
 31150                                  
 31151                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31152                                  ;----------------------------------------------------------------------------
 31153                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 31154                                  ;
 31155                                  ;   Assembler usage:
 31156                                  ;           MOV     AH,AllocOper
 31157                                  ;           MOV     BX,method
 31158                                  ;           MOV     AL,func
 31159                                  ;           INT     21h
 31160                                  ;
 31161                                  ;   Error return:
 31162                                  ;           AX = error_invalid_function
 31163                                  ;----------------------------------------------------------------------------
 31164                                  
 31165                                  _$ALLOCOPER:
 31166                                  	; MSDOS 6.0
 31167                                  	;or	al, al
 31168                                  	;jz	short AllocGetStrat
 31169                                  	;cmp	al, 1
 31170                                  	;jz	short AllocSetStrat
 31171                                  	;cmp	al, 2
 31172                                  	;jz	short AllocGetLink
 31173                                  	;cmp	al, 3
 31174                                  	;jz	short AllocSetLink
 31175                                  
 31176                                  	; 15/04/2018
 31177 00006691 3C01                    	CMP     AL,1
 31178 00006693 720D                            JB      SHORT AllocOperGet
 31179 00006695 7414                            JZ      SHORT AllocOperSet
 31180                                  
 31181                                  AllocOperError:
 31182                                  	; 04/08/2018 - Retro DOS v3.0
 31183                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 31184                                  	;mov	byte [ss:EXTERR_LOCUS],5
 31185 00006697 36C606[D102]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31186                                  	;error	error_invalid_function
 31187                                  	;mov	al,1
 31188 0000669D B001                    	MOV	AL,error_invalid_function
 31189                                  AllocOperErrj:
 31190 0000669F E964B0                  	JMP	SYS_RET_ERR
 31191                                  
 31192                                  ;AllocArenaError:
 31193                                  	; MSDOS 6.0
 31194                                  	;MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31195                                  	;				; M009: Extended Error Locus
 31196                                  	;;error   error_arena_trashed	; M009:
 31197                                  	;MOV	AL,error_arena_trashed
 31198                                  	;;JMP	SYS_RET_ERR
 31199                                  	;jmp	short AllocOperErrj
 31200                                  
 31201                                  ;AllocGetStrat: 
 31202                                  	; MSDOS 6.0
 31203                                  AllocOperGet:
 31204 000066A2 36A0[B002]                      MOV     AL,[SS:AllocMethod]
 31205 000066A6 30E4                            XOR     AH,AH
 31206                                          ;transfer SYS_RET_OK
 31207 000066A8 E952B0                  	JMP	SYS_RET_OK
 31208                                  
 31209                                  ;AllocSetStrat: 
 31210                                  	; MSDOS 6.0
 31211                                  	;push	bx			; M000 - start
 31212                                  	;and	bx,STRAT_MASK 		; M064: mask off bit 6 & 7
 31213                                  	;cmp	bx,2			; BX must be 0-2
 31214                                  	;pop	bx			; M000 - end
 31215                                  	;ja	short AllocOperError
 31216                                  
 31217                                  AllocOperSet:
 31218 000066AB 36881E[B002]                    MOV     [SS:AllocMethod],BL
 31219                                          ;transfer SYS_RET_OK
 31220 000066B0 E94AB0                  	JMP	SYS_RET_OK
 31221                                  
 31222                                  ;AllocGetLink:
 31223                                  	; MSDOS 6.0
 31224                                  	;mov	al,[UmbFlag]		; return link state in al
 31225                                  	;and 	al,LINKSTATE		
 31226                                  	;;transfer SYS_RET_OK
 31227                                  	;jmp	SYS_RET_OK
 31228                                  
 31229                                  ;AllocSetLink:
 31230                                  	; MSDOS 6.0			; M009 - start
 31231                                  	;mov	cx,[umb_head]		; cx = umb_head
 31232                                  	;cmp	cx,0FFFFh		; Q: has umb_head been initialized
 31233                                  	;je	short AllocOperError	; N: error
 31234                                  	;				; Y: continue
 31235                                  	;				; M009 - end
 31236                                  	;cmp	bx,1			
 31237                                  	;jb	short UnlinkUmbs
 31238                                  	;jz	short LinkUmbs
 31239                                  	;
 31240                                  	;jmp	short AllocOperError
 31241                                  	;
 31242                                  ;UnlinkUmbs:
 31243                                  	;test	byte[UmbFlag],LINKSTATE	; Q: umbs unlinked?
 31244                                  	;jz	short unlinked		; Y: return 
 31245                                  	;
 31246                                  	;call	GetLastArena		; get arena before umb_head in DS
 31247                                  	;jc	short AllocArenaError	; M009: arena trashed
 31248                                  	;
 31249                                  	;				; make it last
 31250                                  	;mov	byte [0],arena_signature_end
 31251                                  	;
 31252                                  	;and	byte [UmbFlag],~LINKSTATE ; indicate unlink'd state in umbflag
 31253                                  	;
 31254                                  ;unlinked:
 31255                                  	;;transfer SYS_RET_OK
 31256                                  	;jmp	SYS_RET_OK
 31257                                  
 31258                                  ;LinkUmbs:
 31259                                  	;test	byte [UmbFlag],LINKSTATE ; Q: umbs linked?
 31260                                  	;jnz	short linked		; Y: return
 31261                                  	;
 31262                                  	;call	GetLastArena		; get arena before umb_head
 31263                                  	;jc	short AllocArenaError	; M009: arena trashed
 31264                                  	;
 31265                                  	;				; make it normal. M061: ds points to
 31266                                  	;				; arena before umb_head
 31267                                  	;mov	byte [0],arena_signature_normal
 31268                                  	;
 31269                                  	;or	byte [UmbFlag],LINKSTATE ; indicate link'd state in umbflag
 31270                                  ;linked:
 31271                                  	;;transfer SYS_RET_OK
 31272                                  	;jmp	SYS_RET_OK
 31273                                  
 31274                                  ; MSDOS 6.0
 31275                                  ;--------------------------------------------------------------------------
 31276                                  ; Procedure Name : GetLastArena		-  M003
 31277                                  ;
 31278                                  ; Inputs	 : cx = umb_head
 31279                                  ;
 31280                                  ;
 31281                                  ; Outputs	 : If UMBs are linked
 31282                                  ;			ES = umb_head
 31283                                  ;			DS = arena before umb_head
 31284                                  ;		   else
 31285                                  ;			DS = last arena
 31286                                  ;			ES = next arena. will be umb_head if NC.
 31287                                  ;
 31288                                  ;		   CY if error
 31289                                  ;
 31290                                  ; Uses		 : DS, ES, DI, BX
 31291                                  ;--------------------------------------------------------------------------
 31292                                  	
 31293                                  ;Procedure	GetLastArena, NEAR
 31294                                  ;
 31295                                  ;	push	ax			; save ax
 31296                                  ;
 31297                                  ;	mov	ax, [arena_head]
 31298                                  ;	mov	es, ax			; es = arena_head
 31299                                  ;	xor	di, di
 31300                                  ;
 31301                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31302                                  ;					; Q: is this the last arena
 31303                                  ;	je	GLA_done		; Y: return last arena in ES		
 31304                                  ;					
 31305                                  ;
 31306                                  ;GLA_next:
 31307                                  ;	mov	ds, ax
 31308                                  ;	call	arena_next		; ax, es -> next arena
 31309                                  ;	jc	GLA_err
 31310                                  ;
 31311                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31312                                  ;	jnz	GLA_chkumb		; Y: terminating condition is 
 31313                                  ;					;    umb_head
 31314                                  ;					; N: terminating condition is 05Ah
 31315                                  ;
 31316                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31317                                  ;					; Q: is this the last arena
 31318                                  ;	jmp	short @f
 31319                                  ;GLA_chkumb:
 31320                                  ;	cmp	ax, cx			; Q: is this umb_head
 31321                                  ;@@:
 31322                                  ;	jne	GLA_next		; N: get next arena
 31323                                  ;
 31324                                  ;GLA_done:
 31325                                  ;					; M061 - Start
 31326                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31327                                  ;	jnz	GLA_ret			; Y: we're done
 31328                                  ;					; N: let us confirm that the next 
 31329                                  ;					;    arena is umb_head
 31330                                  ;	mov	ds, ax
 31331                                  ;	call	arena_next		; ax, es -> next arena
 31332                                  ;	jc	GLA_err
 31333                                  ;	cmp	ax, cx			; Q: is this umb_head
 31334                                  ;	jne	GLA_err			; N: error
 31335                                  ;					; M061 - End
 31336                                  ;
 31337                                  ;GLA_ret:				
 31338                                  ;	clc
 31339                                  ;	pop	ax			; M061
 31340                                  ;	ret				; M061
 31341                                  ;
 31342                                  ;GLA_err:
 31343                                  ;	stc				; M061
 31344                                  ;	pop	ax
 31345                                  ;	ret
 31346                                  ;
 31347                                  ;EndProc GetLastArena
 31348                                  
 31349                                  ;============================================================================
 31350                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 31351                                  ;============================================================================
 31352                                  ; 04/08/2018 - Retro DOS v3.0
 31353                                  
 31354                                  ;	TITLE SRVCALL - Server DOS call
 31355                                  ;	NAME  SRVCALL
 31356                                  
 31357                                  ;**	SRVCALL.ASM - Server DOS call functions
 31358                                  ;
 31359                                  ;
 31360                                  ;	$ServerCall
 31361                                  ;
 31362                                  ;	Modification history:
 31363                                  ;
 31364                                  ;	    Created: ARR 08 August 1983
 31365                                  
 31366                                  ;AsmVars <Installed>
 31367                                  
 31368                                  ;include dpl.asm
 31369                                  
 31370                                  ;Installed = TRUE
 31371                                  
 31372                                  ;BREAK <ServerCall -- Server DOS call>
 31373                                  ;----------------------------------------------------------------------------
 31374                                  ;
 31375                                  ; Procedure Name : $ServerCall
 31376                                  ;
 31377                                  ; Inputs:
 31378                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 31379                                  ; Function:
 31380                                  ;	AL=0	Server DOS call
 31381                                  ;	AL=1	Commit All files
 31382                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 31383                                  ;	AL=3	Close all files for DPL_UID
 31384                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 31385                                  ;	AL=5	Get open file list entry
 31386                                  ;		    IN: BX File Index
 31387                                  ;			CX User Index
 31388                                  ;		    OUT:ES:DI -> Name
 31389                                  ;			BX = UID
 31390                                  ;		    CX = # locked blocks held by this UID
 31391                                  ;	AL=6	Get DOS data area
 31392                                  ;		    OUT: DS:SI -> Start
 31393                                  ;			CX size in bytes of swap if indos
 31394                                  ;			DX size in bytes of swap always
 31395                                  ;	AL=7	Get truncate flag
 31396                                  ;	AL=8	Set truncate flag
 31397                                  ;	AL=9	Close all spool files
 31398                                  ;	AL=10	SetExtendedError
 31399                                  ;
 31400                                  ;----------------------------------------------------------------------------
 31401                                  
 31402                                  _$ServerCall:
 31403                                  	; 05/08/2018 - Retro DOS v3.0
 31404                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 31405 000066B3 3C07                    	CMP	AL,7
 31406 000066B5 7204                    	JB	short SET_STUFF
 31407 000066B7 3C09                    	CMP	AL,9
 31408 000066B9 7612                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 31409                                  SET_STUFF:
 31410 000066BB 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 31411                                  	;mov	bx,[si+12h]
 31412 000066BD 8B5C12                  	MOV	BX,[SI+DPL.UID]
 31413                                  
 31414                                  	; MSDOS 6.0
 31415                                  ;SR;
 31416                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 31417                                  ; of USER_ID
 31418                                  ;
 31419                                  	;test	byte [SS:IsWin386],1
 31420                                  	;jnz	short skip_win386
 31421                                  
 31422                                  ;hkn; SS override for user_id and proc_id
 31423                                  	; 15/08/2018
 31424 000066C0 36891E[EA02]            	MOV	[SS:USER_ID],BX		; Set UID
 31425                                  
 31426                                  ;skip_win386:
 31427                                  
 31428 000066C5 8B5C14                  	MOV	BX,[SI+DPL.PID]
 31429 000066C8 36891E[E802]            	MOV	[SS:PROC_ID],BX		; Set process ID
 31430                                  NO_SET_ID:
 31431 000066CD 36FF36[3A14]            	PUSH	word [SS:SERVERLEAVE]	; push return address
 31432 000066D2 36FF36[3814]            	PUSH	word [SS:SERVERTAB]	; push table address
 31433 000066D7 50                      	PUSH	AX
 31434 000066D8 E8C1B8                  	call	TableDispatch
 31435                                  
 31436                                  ;hkn; SS override
 31437                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 31438 000066DB 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 31439                                  	;error	error_invalid_function
 31440                                  	;mov	al,1
 31441 000066E1 B001                    	MOV	AL,error_invalid_function
 31442                                  servercall_error:
 31443 000066E3 E920B0                  	JMP	SYS_RET_ERR
 31444                                  
 31445                                  SERVERRETURN:
 31446 000066E6 C3                      	retn
 31447                                  
 31448                                  ; Commit - iterate through the open file list and make sure that the
 31449                                  ; directory entries are correctly updated.
 31450                                  
 31451                                  COMMIT_ALL:
 31452 000066E7 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 31453 000066E9 16                      	push	ss
 31454 000066EA 1F                      	pop	ds
 31455 000066EB E877B9                  	call	EcritSFT		; Gonna scan SFT cache, lock it down
 31456                                  CommitLoop:
 31457 000066EE 53                      	push	bx
 31458 000066EF E82501                  	call	SFFromSFN
 31459 000066F2 7223                    	JC	short CommitDone
 31460 000066F4 26833D00                	cmp	word [es:di],0
 31461                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 31462                                  					; if (ThisSFT->refcount != 0)
 31463 000066F8 7419                    	JZ	short CommitNext
 31464                                  	;cmp	word [es:di],0FFFFh ; -1
 31465 000066FA 26833DFF                	cmp	word [ES:DI],sf_busy
 31466                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 31467                                  					; BUSY SFTs have god knows what
 31468 000066FE 7413                    	JZ	short CommitNext	;   in them.
 31469 00006700 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 31470 00006706 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 31471                                  					;	doesn't deadlock
 31472 00006708 893E[3605]              	MOV	[THISSFT],DI
 31473 0000670C 8C06[3805]              	MOV	[THISSFT+2],ES
 31474 00006710 E8AAD4                  	call	DOS_COMMIT		;	DOSCommit ();
 31475                                  CommitNext:
 31476 00006713 5B                      	pop	bx
 31477 00006714 43                      	INC	BX
 31478 00006715 EBD7                    	JMP	short CommitLoop
 31479                                  CommitDone:
 31480 00006717 E853B9                  	call	LcritSFT
 31481 0000671A 5B                      	pop	bx
 31482 0000671B E9DFAF                  	jmp	SYS_RET_OK
 31483                                  
 31484                                  CLOSE_NAME:
 31485                                  
 31486                                  ;if installed
 31487                                  
 31488                                  ;hkn; SS override
 31489 0000671E 36FF1E[7000]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 31490                                  ;else
 31491                                  ;	Call	MFTcloN
 31492                                  ;endif
 31493                                  
 31494                                  CheckReturns:
 31495 00006723 7203                    	JC	short func_err
 31496 00006725 E9D5AF                  	jmp	SYS_RET_OK
 31497                                  func_err:
 31498                                  	;transfer SYS_RET_ERR
 31499                                  	;jmp	SYS_RET_ERR
 31500 00006728 EBB9                    	jmp	short servercall_error
 31501                                  
 31502                                  CLOSE_UID:
 31503                                  
 31504                                  ;if installed
 31505                                  ;hkn; SS override
 31506 0000672A 36FF1E[6800]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 31507                                  ;else
 31508                                  ;	Call	MFTclU
 31509                                  ;endif
 31510 0000672F EBF2                    	JMP	short CheckReturns
 31511                                  
 31512                                  CLOSE_UID_PID:
 31513                                  
 31514                                  ;if installed
 31515                                  ;hkn; SS override
 31516 00006731 36FF1E[6C00]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 31517                                  ;else
 31518                                  ;	Call	MFTCloseP
 31519                                  ;endif
 31520 00006736 EBEB                    	JMP	CheckReturns
 31521                                  
 31522                                  GET_LIST:
 31523                                  
 31524                                  ;if installed
 31525                                  ;hkn; SS override
 31526 00006738 36FF1E[8000]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 31527                                  ;else
 31528                                  ;	Call	MFT_get
 31529                                  ;endif
 31530 0000673D 72E9                    	JC	short func_err
 31531 0000673F E8C9AE                  	call	Get_User_Stack
 31532                                  	;mov	[si+2],bx
 31533 00006742 895C02                  	MOV	[SI+user_env.user_BX],BX
 31534                                  	;mov	[si+10],di
 31535 00006745 897C0A                  	MOV	[SI+user_env.user_DI],DI
 31536                                  	;mov	[si+16],es
 31537 00006748 8C4410                  	MOV	[SI+user_env.user_ES],ES
 31538                                  SetCXOK:
 31539                                  	;mov	[si+4],cx
 31540 0000674B 894C04                  	MOV	[SI+user_env.user_CX],CX
 31541 0000674E E9ACAF                  	jmp	SYS_RET_OK
 31542                                  
 31543                                  SRV_CALL:
 31544 00006751 58                      	POP	AX			; get rid of call to $srvcall
 31545 00006752 1E                      	push	ds
 31546 00006753 56                      	push	si
 31547 00006754 E8B4AE                  	call	Get_User_Stack
 31548 00006757 5F                      	pop	di
 31549 00006758 07                      	pop	es
 31550                                  ;
 31551                                  ; DS:SI point to stack
 31552                                  ; ES:DI point to DPL
 31553                                  ;
 31554 00006759 E81FB8                  	call	XCHGP
 31555                                  ;
 31556                                  ; DS:SI point to DPL
 31557                                  ; ES:DI point to stack
 31558                                  ;
 31559                                  ; We now copy the registers from DPL to save stack
 31560                                  ;
 31561 0000675C 56                      	push	si
 31562 0000675D B90600                  	MOV	CX,6
 31563 00006760 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 31564 00006762 47                      	INC	DI
 31565 00006763 47                      	INC	DI			; Skip user_BP
 31566 00006764 A5                      	MOVSW				; DS
 31567 00006765 A5                      	MOVSW				; ES
 31568 00006766 5E                      	pop	si			; DS:SI -> DPL
 31569 00006767 8B04                    	mov	ax,[SI]
 31570                                  	;MOV	AX,[SI+DPL.AX]
 31571                                  	;mov	bx,[si+2]
 31572 00006769 8B5C02                  	MOV	BX,[SI+DPL.BX]
 31573                                  	;mov	cx,[si+4]
 31574 0000676C 8B4C04                  	MOV	CX,[SI+DPL.CX]
 31575                                  	;mov	dx,[si+6]
 31576 0000676F 8B5406                  	MOV	DX,[SI+DPL.DX]
 31577                                  	;mov	di,[si+10]
 31578 00006772 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 31579                                  	;mov	es,[si+14]
 31580 00006775 8E440E                  	MOV	ES,[SI+DPL.ES]
 31581                                  	;push	word [si+8]
 31582 00006778 FF7408                  	PUSH	word [SI+DPL.SI]
 31583                                  	;mov	ds,[si+12]
 31584 0000677B 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 31585 0000677E 5E                      	POP	SI
 31586                                  
 31587                                  ;hkn; SS override for next 3
 31588 0000677F 368C1E[7E05]            	MOV	[SS:SAVEDS],DS
 31589 00006784 36891E[7C05]            	MOV	[SS:SAVEBX],BX
 31590 00006789 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 31591 0000678F E9B3AD                  	jmp	REDISP
 31592                                  
 31593                                  GET_DOS_DATA:
 31594 00006792 16                      	push	ss
 31595 00006793 07                      	pop	es
 31596 00006794 BF[CE02]                	MOV     DI,SWAP_START
 31597 00006797 B9[090A]                	MOV     CX,SWAP_END
 31598 0000679A BA[E602]                	MOV     DX,SWAP_ALWAYS
 31599 0000679D 29F9                    	SUB     CX,DI
 31600 0000679F 29FA                    	SUB     DX,DI
 31601 000067A1 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 31602 000067A3 83D100                  	ADC     CX,0                    ; div by 2 + round up
 31603 000067A6 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 31604 000067A8 E860AE                  	call	Get_User_Stack
 31605                                  	;mov	[si+14],es
 31606 000067AB 8C440E                  	MOV     [SI+user_env.user_DS],ES
 31607                                  	;mov	[si+8],di
 31608 000067AE 897C08                  	MOV     [SI+user_env.user_SI],DI
 31609                                  	;mov	[si+6],dx
 31610 000067B1 895406                  	MOV     [SI+user_env.user_DX],DX
 31611 000067B4 EB95                    	JMP	short SetCXOK
 31612                                  
 31613                                  SPOOL_OPER:
 31614                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 31615                                  
 31616 000067B6 50                      	push    ax
 31617 000067B7 B82511                  	mov     ax, 1125h
 31618 000067BA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 31619                                  			; STACK: WORD subfunction
 31620                                  			; Return: CF set on error, AX = error code
 31621                                  			; STACK unchanged
 31622 000067BC 5B                      	pop	bx
 31623 000067BD 7203                    	JC	short func_err2
 31624 000067BF E93BAF                  	jmp	SYS_RET_OK
 31625                                  func_err2:
 31626 000067C2 E941AF                  	jmp	SYS_RET_ERR
 31627                                  
 31628                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 31629                                  ;--------------------------------------------------------------------------
 31630                                  ;
 31631                                  ; Procedure Name : $SetExtendedError
 31632                                  ;
 31633                                  ; $SetExtendedError takes extended error information and loads it up for the
 31634                                  ; next extended error call.  This is used by interrupt-level proccessors to
 31635                                  ; mask their actions.
 31636                                  ;
 31637                                  ;   Inputs: DS:SI points to DPL which contains all registers
 31638                                  ;   Outputs: none
 31639                                  ;
 31640                                  ;---------------------------------------------------------------------------
 31641                                  
 31642                                  _$SetExtendedError:
 31643                                  
 31644                                  ;hkn; SS override for all variables used
 31645                                  
 31646 000067C5 8B04                    	mov	ax,[si]
 31647                                  	;MOV	AX,[SI+DPL.AX]
 31648 000067C7 36A3[D202]              	MOV	[SS:EXTERR],AX
 31649                                  	;mov	ax,[si+10]
 31650 000067CB 8B440A                  	MOV	AX,[SI+DPL.DI]
 31651 000067CE 36A3[D602]              	MOV	[SS:EXTERRPT],AX
 31652                                  	;mov	ax,[si+14]
 31653 000067D2 8B440E                  	MOV	AX,[SI+DPL.ES]
 31654 000067D5 36A3[D802]              	MOV	[SS:EXTERRPT+2],AX
 31655                                  	;mov	ax,[si+2]
 31656 000067D9 8B4402                  	MOV	AX,[SI+DPL.BX]
 31657 000067DC 36A3[D402]              	MOV	[SS:EXTERR_ACTION],AX
 31658                                  	;mov	ax,[si+4]
 31659 000067E0 8B4404                  	MOV	AX,[SI+DPL.CX]
 31660 000067E3 368826[D102]            	MOV	[SS:EXTERR_LOCUS],AH
 31661 000067E8 C3                      	retn
 31662                                  
 31663                                  ;============================================================================
 31664                                  ; UTIL.ASM, MSDOS 6.0, 1991
 31665                                  ;============================================================================
 31666                                  ; 05/08/2018 - Retro DOS v3.0
 31667                                  
 31668                                  ;**	Handle related utilities for MSDOS 2.X.
 31669                                  ;
 31670                                  ;	pJFNFromHandle	written
 31671                                  ;	SFFromHandle	written
 31672                                  ;	SFFromSFN	written
 31673                                  ;	JFNFree 	written
 31674                                  ;	SFNFree 	written
 31675                                  ;
 31676                                  ;	Modification history:
 31677                                  ;
 31678                                  ;	    Created: MZ 1 April 1983
 31679                                  
 31680                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 31681                                  
 31682                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 31683                                  ;----------------------------------------------------------------------------
 31684                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 31685                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 31686                                  ;
 31687                                  ;	NOTE:
 31688                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31689                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 31690                                  ;
 31691                                  ;	ENTRY	(bx) = handle
 31692                                  ;	EXIT	'C' clear if ok
 31693                                  ;		  (es:di) = address of JFN value
 31694                                  ;		'C' set if error
 31695                                  ;		  (ax) = error code
 31696                                  ;	USES	AX, DI, ES, Flags
 31697                                  ;----------------------------------------------------------------------------
 31698                                  
 31699                                  pJFNFromHandle:
 31700                                  
 31701 000067E9 2E8E06[DE02]            	MOV	ES,[cs:CurrentPDB]	; get user process data block
 31702                                  	;cmp	bx,[ES:32h]
 31703 000067EE 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 31704 000067F3 7204                    	JB	short pjfn10		; no, get offset
 31705                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 31706                                  	;mov	al,6
 31707 000067F5 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 31708                                  ReturnCarry:
 31709 000067F7 F9                      	STC                             ; signal error
 31710 000067F8 C3                      	retn				; go back
 31711                                  pjfn10: 
 31712                                  	;les	di,[es:34h]
 31713 000067F9 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 31714 000067FE 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 31715                                  	;clc
 31716                                  pJFNFromHandle_error:
 31717 00006800 C3                      	retn
 31718                                  
 31719                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 31720                                  ;----------------------------------------------------------------------------
 31721                                  ;
 31722                                  ; Procedure Name : SFFromHandle
 31723                                  ;
 31724                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 31725                                  ;
 31726                                  ;   Input:      BX has handle
 31727                                  ;   Output:     Carry Set
 31728                                  ;                   AX has error code
 31729                                  ;               Carry Reset
 31730                                  ;                   ES:DI has pointer to SF entry
 31731                                  ;   Registers modified: If error, AX,ES, else ES:DI
 31732                                  ; NOTE:
 31733                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31734                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31735                                  ;
 31736                                  ;----------------------------------------------------------------------------
 31737                                  
 31738                                  SFFromHandle:
 31739 00006801 E8E5FF                  	CALL    pJFNFromHandle          ; get jfn pointer
 31740                                  	;retc				; return if error
 31741 00006804 72FA                    	jc	short pJFNFromHandle_error
 31742 00006806 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 31743                                  	;JNZ	short GetSF		; nope, suck out SF
 31744                                  	;;mov	al,6
 31745                                  	;MOV	AL,error_invalid_handle ; appropriate error
 31746                                  	;jmp	short ReturnCarry	; signal it
 31747 0000680A 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 31748                                  GetSF:
 31749 0000680C 53                      	push	bx			; save handle
 31750 0000680D 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 31751 00006810 30FF                    	XOR     BH,BH                   ; ignore upper half
 31752 00006812 E80200                  	CALL    SFFromSFN               ; get real sf spot
 31753 00006815 5B                      	pop	bx			; restore
 31754 00006816 C3                      	retn                          ; say goodbye
 31755                                  
 31756                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 31757                                  
 31758                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 31759                                  ;----------------------------------------------------------------------------
 31760                                  ;	SFFromSfn uses an SFN to index an entry into the SF table.  This
 31761                                  ;	is more than just a simple index instruction because the SF table
 31762                                  ;	can be made up of multiple pieces chained together. We follow the
 31763                                  ;	chain to the right piece and then do the index operation.
 31764                                  ;
 31765                                  ;   NOTE:
 31766                                  ;	This routine is called from SFFromHandle which is called
 31767                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31768                                  ;
 31769                                  ;	ENTRY	BX has SF index
 31770                                  ;	EXIT	'C' clear if OK
 31771                                  ;		  ES:DI points to SF entry
 31772                                  ;		'C' set if index too large
 31773                                  ;	USES	BX, DI, ES
 31774                                  ;----------------------------------------------------------------------------
 31775                                  
 31776                                  SFFromSFN:
 31777 00006817 2EC43E[2A00]            	LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 31778                                  sfsfn5:	
 31779                                  	;cmp	bx,[es:di+4]
 31780 0000681C 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 31781 00006820 720E                    	JB	short sfsfn7		; yes, go grab it
 31782                                  	;sub	bx,[es:di+4]
 31783 00006822 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 31784 00006826 26C43D                  	les	di,[es:di] ; 14/08/2018
 31785                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 31786 00006829 83FFFF                  	CMP     DI,-1                   ; end of tables?
 31787 0000682C 75EE                    	JNZ	short sfsfn5		; no, try again
 31788 0000682E F9                      	STC
 31789 0000682F C3                      	retn				; return with error, not found
 31790                                  
 31791                                  sfsfn7:
 31792 00006830 50                      	push	ax
 31793                                  	;mov	ax,53
 31794 00006831 B83500                  	MOV     AX,SF_ENTRY.size	; put it in a nice place
 31795 00006834 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 31796 00006836 01C7                    	ADD	DI,AX			; add base of SF block
 31797 00006838 58                      	pop	ax
 31798                                  	;add	di,6
 31799 00006839 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 31800 0000683C C3                      	retn				; return with 'C' clear
 31801                                  
 31802                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 31803                                  
 31804                                  ;**	JFNFree - Find a Free JFN Slot
 31805                                  ;----------------------------------------------------------------------------
 31806                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 31807                                  ;
 31808                                  ;	ENTRY	(ss) = DOSDATA
 31809                                  ;	EXIT	'C' clear if OK
 31810                                  ;		  (bx) = new handle
 31811                                  ;		  (es:di) = pointer to JFN slot
 31812                                  ;		'C' set if error
 31813                                  ;		  (al) = error code
 31814                                  ;	USES	bx, di, es, flags
 31815                                  ;----------------------------------------------------------------------------
 31816                                  
 31817                                  JFNFree:
 31818 0000683D 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 31819                                  jfnf1:	
 31820 0000683F E8A7FF                  	CALL	pJFNFromHandle		; get the appropriate handle
 31821 00006842 7209                    	JC	short jfnf5		; no more handles
 31822 00006844 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 31823 00006848 7405                    	je	short jfnfx		; yes, carry is clear
 31824 0000684A 43                      	INC     BX                      ; no, next handle
 31825 0000684B EBF2                    	JMP	short jfnf1		; and try again
 31826                                  
 31827                                  ;	Error.	'C' set
 31828                                  jfnf5:	
 31829                                  	;mov	al,4
 31830 0000684D B004                    	MOV	AL,error_too_many_open_files
 31831                                  jfnfx:	
 31832 0000684F C3                      	retn				; bye
 31833                                  
 31834                                  ;	BREAK <SFNFree - Allocate a free SFN>
 31835                                  
 31836                                  ;**	SFNFree - Allocate a Free SFN/SFT
 31837                                  ;----------------------------------------------------------------------------
 31838                                  ;	SFNFree scans through the sf table looking for a free entry
 31839                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 31840                                  ;
 31841                                  ;	The problem is that we want to mark the SFT busy so that other threads
 31842                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 31843                                  ;	we can't just mark it busy because we may get blown out of our open
 31844                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 31845                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 31846                                  ;	an SFT with this value we look to see if it belongs to this user
 31847                                  ;	and process.  If it does belong to us then it must be an orphan
 31848                                  ;	and we reclaim it.
 31849                                  ;
 31850                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 31851                                  ;		over and over, but we could at least set a high water mark...
 31852                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 31853                                  ;		even though this is not a frequently called routine - jgl
 31854                                  ;
 31855                                  ;	ENTRY	(ss) = DOSDATA
 31856                                  ;	EXIT	'C' clear if no error
 31857                                  ;		  (bx) = SFN
 31858                                  ;		  (es:di) = pointer to SFT
 31859                                  ;		  es:[di].SFT_REF_COUNT = -1
 31860                                  ;		'C' set if error
 31861                                  ;		  (al) = error code
 31862                                  ;	USES	bx, di, es, Flags
 31863                                  ;----------------------------------------------------------------------------
 31864                                  
 31865                                  SFNFree:
 31866                                  	;12/08/2018
 31867                                  	;05/08/2018 - Retro DOS v3.0
 31868                                  	; MSDOS 6.0
 31869 00006850 50                      	push	ax
 31870 00006851 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 31871                                  sfnf5:	
 31872 00006853 53                      	push	bx
 31873 00006854 E8C0FF                  	call	SFFromSFN		; get the potential handle
 31874 00006857 5B                      	pop	bx
 31875 00006858 723A                    	jc	short sfnf95		; no more free SFNs
 31876 0000685A 26833D00                	cmp	word [ES:DI],0
 31877                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 31878 0000685E 741D                    	je	short sfnf20			; yep, got one
 31879                                  	
 31880                                  	;cmp	word [es:di],0FFFFh ; -1
 31881 00006860 26833DFF                	cmp	word [ES:DI],sf_busy
 31882                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31883 00006864 7403                    	je	short sfnf10		; special busy mark
 31884                                  sfnf7:	
 31885 00006866 43                      	inc	bx			; try the next one
 31886 00006867 EBEA                    	jmp	short sfnf5
 31887                                  
 31888                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 31889                                  ;	it was abandoned during a earlier call and we can use it.
 31890                                  ;
 31891                                  ;	(bx)	= SFN
 31892                                  ;	(es:di) = pointer to SFT
 31893                                  ;	(TOS)	= caller's (ax)
 31894                                  
 31895                                  sfnf10:	
 31896 00006869 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31897                                  	;cmp	[es:di+2Fh],ax
 31898 0000686D 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 31899 00006871 75F3                    	jnz	short sfnf7		; not ours
 31900 00006873 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31901                                  	;cmp	[es:di+31h],ax
 31902 00006877 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 31903 0000687B 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 31904                                  
 31905                                  ;	We have an SFT to allocate
 31906                                  ;
 31907                                  ;	(bx)	= SFN
 31908                                  ;	(es:di) = pointer to SFT
 31909                                  ;	(TOS)	= caller's (ax)
 31910                                  
 31911                                  sfnf20:
 31912                                  	; cf = 0 ;; Retro DOS v3.0
 31913                                  
 31914                                  	;mov	word [es:di],0FFFFh
 31915 0000687D 26C705FFFF              	mov	word [ES:DI],sf_busy
 31916                                  					; make sure that this is allocated
 31917                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31918                                  
 31919 00006882 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31920                                  	;mov	[es:di+2Fh],ax
 31921 00006886 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 31922 0000688A 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31923                                  	;mov	[es:di+31h],ax
 31924 0000688E 26894531                	mov	[es:DI+SF_ENTRY.sf_PID],ax
 31925                                  sfnf21: ;; Retro DOS v3.0
 31926 00006892 58                      	pop	ax
 31927                                  	;clc
 31928 00006893 C3                      	retn				; return with no error
 31929                                  
 31930                                  ;**	Error - no more free SFNs
 31931                                  ;
 31932                                  ;	'C' set
 31933                                  ;	(TOS) = saved ax
 31934                                  
 31935                                  sfnf95: 
 31936 00006894 58                      	pop	ax
 31937                                  	;mov	al,4
 31938 00006895 B004                    	mov	al,error_too_many_open_files
 31939 00006897 C3                      	retn				; return with 'C' and error
 31940                                  
 31941                                  ;============================================================================
 31942                                  ; MACRO.ASM, MSDOS 6.0, 1991
 31943                                  ;============================================================================
 31944                                  ; Retro	DOS v3.0 - 11/07/2018
 31945                                  
 31946                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 31947                                  ;	NAME	MACRO
 31948                                  
 31949                                  ;	Microsoft Confidential
 31950                                  ;	Copyright (C) Microsoft Corporation 1991
 31951                                  ;	All Rights Reserved.
 31952                                  
 31953                                  ;**	MACRO.ASM
 31954                                  ;
 31955                                  ;	$AssignOper
 31956                                  ;	FIND_DPB
 31957                                  ;	InitCDS
 31958                                  ;	$UserOper
 31959                                  ;	GetVisDrv
 31960                                  ;	GetThisDrv
 31961                                  ;	GetCDSFromDrv
 31962                                  ;
 31963                                  ;   Revision history:
 31964                                  ;
 31965                                  ;	Created: MZ 4 April 1983
 31966                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 31967                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 31968                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 31969                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 31970                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 31971                                  ;				    aliasing.
 31972                                  ;
 31973                                  ;   MSDOS performs several types of name translation. First, we maintain for
 31974                                  ;   each valid drive letter the text of the current directory on that drive.
 31975                                  ;   For invalid drive letters, there is no current directory so we pretend to
 31976                                  ;   be at the root. A current directory is either the raw local directory
 31977                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 31978                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 31979                                  ;
 31980                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 31981                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 31982                                  ;   this and all * are expanded into ?'s.
 31983                                  ;
 31984                                  ;   The second part of name translation involves subtree aliasing. A list of
 31985                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 31986                                  ;   the previous 'canonicalization' are then examined to see if any of the
 31987                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 31988                                  ;   replaced with the other subtree in the pair.
 31989                                  ;
 31990                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 31991                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 31992                                  ;   The output of the previous translation is examined to see if any of the
 31993                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 31994                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 31995                                  ;   'mount' one device under another.
 31996                                  ;
 31997                                  ;   The final form of name translation involves the mapping of a user's
 31998                                  ;   logical drive number into the internal physical drive. This is
 31999                                  ;   accomplished by converting the drive number into letter:CON, performing
 32000                                  ;   the above translation and then converting the character back into a drive
 32001                                  ;   number.
 32002                                  ;
 32003                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 32004                                  ;   take a path and form the real text of the pathname with all . and ..
 32005                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 32006                                  ;   TransPath.
 32007                                  ;
 32008                                  ;	A000	version 4.00  Jan. 1988
 32009                                  
 32010                                  ;Installed = TRUE
 32011                                  
 32012                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 32013                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 32014                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 32015                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 32016                                  ;					; current drive)
 32017                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 32018                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 32019                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 32020                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 32021                                  ;	I_need	MYNAME,16		; machine name
 32022                                  ;	I_need	MYNUM,WORD		; machine number
 32023                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 32024                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 32025                                  ;	I_need	DrvErr,BYTE		; drive error
 32026                                  
 32027                                  ;BREAK <$AssignOper -- Set up a Macro>
 32028                                  ;----------------------------------------------------------------------------
 32029                                  ; Inputs:
 32030                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 32031                                  ;	AL = 01 set assign mode 		    (SetMode)
 32032                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 32033                                  ;	AL = 03 Define Macro (attch start)
 32034                                  ;	    BL = Macro type
 32035                                  ;	       = 0 alias
 32036                                  ;	       = 1 file/device
 32037                                  ;	       = 2 drive
 32038                                  ;	       = 3 Char device -> network
 32039                                  ;	       = 4 File device -> network
 32040                                  ;	    DS:SI -> ASCIZ source name
 32041                                  ;	    ES:DI -> ASCIZ destination name
 32042                                  ;	AL = 04 Cancel Macro
 32043                                  ;	    DS:SI -> ASCIZ source name
 32044                                  ;	AL = 05 Modified get attach list entry
 32045                                  ;	AL = 06 Get ifsfunc item
 32046                                  ;	AL = 07 set in_use of a drive's CDS
 32047                                  ;	     DL = drive number, 0=default  0=A,,
 32048                                  ;	AL = 08 reset in_use of a drive's CDS
 32049                                  ;	     DL = drive number, 0=A, 1=B,,,
 32050                                  ; Function:
 32051                                  ;	Do macro stuff
 32052                                  ; Returns:
 32053                                  ;	Std Xenix style error return
 32054                                  ;----------------------------------------------------------------------------
 32055                                  
 32056                                  _$AssignOper:
 32057                                  	; MSDOS 6.0
 32058                                  	;CMP	AL,7			      ; set in_use ?		;AN000;
 32059                                  	;JNZ	short chk08		      ; no			;AN000;
 32060                                  ;srinuse:								;AN000;
 32061                                  	;PUSH	AX			      ; save al 		;AN000;
 32062                                  	;MOV	AL,DL			      ; AL= drive id		;AN000;
 32063                                  	;CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 32064                                  	;POP	AX			      ; 			;AN000;
 32065                                  	;JC	short baddrv		      ; bad drive		;AN000;
 32066                                  	;CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 32067                                  	;JZ	short baddrv		      ;     no			;AN000;
 32068                                  	;CMP	AL,7			      ; set ?			;AN000;
 32069                                  	;JNZ	short resetdrv		      ; no			;AN000;
 32070                                  	;OR	word [SI+curdir.flags],curdir_inuse; set in_use		;AN000;
 32071                                  	;JMP	SHORT okdone		      ; 			;AN000;
 32072                                  ;resetdrv:								;AN000;
 32073                                  	;AND	word [SI+curdir_flags],~curdir_inuse ; reset in_use	;AN000;
 32074                                  	;JMP	SHORT okdone			; 			;AN000;
 32075                                  ;baddrv: 								;AN000;
 32076                                  	;MOV	AX,error_invalid_drive	      ; error			;AN000;
 32077                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 32078                                  ;chk08:									;AN000;
 32079                                  	;CMP	AL,8			      ; reset inuse ?		;AN000;
 32080                                  	;JZ	short srinuse 		      ; yes			;AN000;
 32081                                  
 32082                                  	;IF	NOT INSTALLED
 32083                                  	;transfer NET_ASSOPER
 32084                                  	;ELSE
 32085                                  
 32086                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32087 00006898 50                      	PUSH	AX
 32088                                  	;mov	ax,111Eh
 32089                                  	;MOV	AX,(MultNET SHL 8) OR 30
 32090 00006899 B81E11                  	mov	ax,(MultNET*256)+30
 32091 0000689C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 32092                                  			; SS = DOS CS
 32093                                  			; STACK: WORD function to execute
 32094                                  			; Return: CF set on error, AX = error code
 32095                                  			; STACK unchanged
 32096 0000689E 5B                      	POP	BX			; Don't zap error code in AX
 32097 0000689F 7203                    	JC	short ASS_ERR
 32098                                  okdone:
 32099 000068A1 E959AE                  	jmp	SYS_RET_OK
 32100                                  
 32101                                  ASS_ERR:
 32102 000068A4 E95FAE                  	jmp	SYS_RET_ERR
 32103                                  
 32104                                  	;ENDIF
 32105                                  
 32106                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 32107                                  ;----------------------------------------------------------------------------
 32108                                  ;**	FIND_DPB - Find a DPB from a Drive #
 32109                                  ;
 32110                                  ;	ENTRY	AL has drive number A = 0
 32111                                  ;	EXIT	'C' set
 32112                                  ;		    No DPB for this drive number
 32113                                  ;		'C' clear
 32114                                  ;		    DS:SI points to DPB for drive
 32115                                  ;	USES	SI, DS, Flags
 32116                                  ;----------------------------------------------------------------------------
 32117                                  
 32118                                  FIND_DPB:
 32119 000068A7 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 32120                                  fdpb5:	
 32121 000068AC 83FEFF                  	CMP	SI,-1
 32122 000068AF 7409                    	JZ	short fdpb10
 32123 000068B1 3A04                    	cmp	al,[si]
 32124                                  	;CMP	AL,[SI+DPB.DRIVE]
 32125 000068B3 7406                    	jz	short ret_label15	; Carry clear (retz)
 32126                                  	;lds	si,[si+18h]
 32127 000068B5 C57418                  	LDS	SI,[SI+DPB.NEXT_DPB]
 32128 000068B8 EBF2                    	JMP	short fdpb5
 32129                                  
 32130                                  fdpb10:	
 32131 000068BA F9                      	STC
 32132                                  
 32133                                  ret_label15:
 32134 000068BB C3                      	retn
 32135                                  
 32136                                  ;	Break <InitCDS - set up an empty CDS>
 32137                                  ;----------------------------------------------------------------------------
 32138                                  ;**	InitCDS - Setup an Empty CDS
 32139                                  ;
 32140                                  ;	ENTRY	ThisCDS points to CDS
 32141                                  ;		AL has uppercase drive letter
 32142                                  ;	EXIT	ThisCDS is now empty
 32143                                  ;		(ES:DI) = CDS
 32144                                  ;		'C' set if no DPB associated with drive
 32145                                  ;	USES	AH,ES,DI, Flags
 32146                                  ;----------------------------------------------------------------------------
 32147                                  
 32148                                  InitCDS:
 32149                                  	; 19/08/2018
 32150                                  	; 05/08/2018 - Retro DOS v3.0
 32151                                  	; MSDOS 6.0
 32152 000068BC 50                      	push	ax			; save (AL) for caller
 32153 000068BD 36C43E[3A05]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 32154                                  	;mov	word [es:di+67],0
 32155 000068C2 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 32156 000068C8 2C40                    	SUB	AL,"A"-1                ; A = 1
 32157 000068CA 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 32158 000068CF 7236                    	JC	short icdsx		; Drive does not map a physical drive
 32159 000068D1 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 32160 000068D2 50                      	PUSH	AX			; save drive number for later
 32161 000068D3 0441                    	add	al,"A"
 32162 000068D5 B43A                    	MOV	AH,':'
 32163 000068D7 268905                  	mov	[ES:DI],ax
 32164                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 32165                                  	;mov	ax,"\"
 32166                                  	;mov	[es:di+2],ax
 32167                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 32168 000068DA 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 32169                                  	;or	word [es:di+67],4000h
 32170                                  	;or	byte [es:di+68],40h
 32171 000068E0 26804D4440              	OR	byte [ES:DI+curdir.flags+1],curdir_inuse>>8
 32172 000068E5 29C0                    	sub	ax,ax
 32173                                  	;MOV	[es:di+73],ax ; 0
 32174 000068E7 26894549                	MOV	[ES:DI+curdir.ID],ax
 32175                                  	;mov	[es:di+75],ax ; 0
 32176 000068EB 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 32177 000068EF B002                    	mov	al,2
 32178                                  	;mov	[es:di+79],aX ; 2
 32179 000068F1 2689454F                	MOV	[ES:DI+curdir.end],ax
 32180 000068F5 58                      	POP	AX			; (al) = drive number
 32181 000068F6 1E                      	push	ds
 32182 000068F7 56                      	push	si
 32183 000068F8 E8ACFF                  	call	FIND_DPB
 32184 000068FB 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 32185                                  	;mov	[es:di+69],si
 32186 000068FD 26897545                	MOV	[ES:DI+curdir.devptr],SI
 32187                                  	;mov	[es:di+71],ds
 32188 00006901 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 32189                                  icds5:	
 32190 00006905 5E                      	pop	si
 32191 00006906 1F                      	pop	ds
 32192                                  icdsx:	
 32193 00006907 58                      	pop	ax
 32194                                  RET45:
 32195 00006908 C3                      	retn
 32196                                  
 32197                                  ;Break <$UserOper - get/set current user ID (for net)>
 32198                                  ;----------------------------------------------------------------------------
 32199                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 32200                                  ;	maintain this string and do no verifications.
 32201                                  ;
 32202                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 32203                                  ;				      4-printer-set-flags,5-printer-get-flags)
 32204                                  ;		DS:DX is user string pointer (calls 1,2)
 32205                                  ;		ES:DI is user buffer (call 3)
 32206                                  ;		BX is assign index (calls 2,3,4,5)
 32207                                  ;		CX is user number (call 1)
 32208                                  ;		DX is flag word (call 4)
 32209                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 32210                                  ;			and user CX is set to the user number
 32211                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 32212                                  ;		If AL = 5 then DX is flag word
 32213                                  ;----------------------------------------------------------------------------
 32214                                  
 32215                                  _$UserOper:
 32216                                  	; 05/08/2018 - Retro DOS v3.0
 32217                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32218 00006909 50                      	PUSH	AX
 32219 0000690A 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 32220 0000690C 58                      	POP	AX
 32221 0000690D 7211                    	JB	short UserGet 		; return to user the string
 32222 0000690F 742E                    	JZ	short UserSet 		; set the current user
 32223 00006911 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 32224 00006913 763D                    	JBE	short UserPrint		; yep
 32225                                  	;mov	byte [ss:EXTERR_LOCUS],1
 32226 00006915 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 32227                                  					; Extended Error Locus
 32228                                  	;error	error_invalid_function	; not 0,1,2,3
 32229                                  	;mov	al,1
 32230 0000691B B001                    	MOV	AL,error_invalid_function
 32231                                  useroper_error:
 32232 0000691D E9E6AD                  	JMP	SYS_RET_ERR
 32233                                  
 32234                                  UserGet:
 32235                                  ; Transfer MYNAME to DS:DX
 32236                                  ; Set Return CX to MYNUM
 32237 00006920 1E                      	PUSH	DS			; switch registers
 32238 00006921 07                      	POP	ES
 32239 00006922 89D7                    	MOV	DI,DX			; destination
 32240 00006924 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 32241 00006929 E8DFAC                  	call	Get_User_Stack
 32242 0000692C 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 32243 0000692F 16                      	push	ss			; point to DOSDATA
 32244 00006930 1F                      	pop	ds
 32245 00006931 BE[B302]                	MOV	SI,MYNAME		; point source to user string
 32246                                  UserMove:
 32247 00006934 B90F00                  	MOV	CX,15
 32248 00006937 F3A4                    	REP	MOVSB			; blam.
 32249 00006939 31C0                    	XOR	AX,AX			; 16th byte is 0
 32250 0000693B AA                      	STOSB
 32251                                  UserBye:
 32252 0000693C E9BEAD                  	jmp	SYS_RET_OK		; no errors here
 32253                                  
 32254                                  UserSet:
 32255                                  ; Transfer DS:DX to MYNAME
 32256                                  ; CX to MYNUM
 32257 0000693F 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 32258 00006944 89D6                    	MOV	SI,DX			; user space has source
 32259 00006946 16                      	push	ss
 32260 00006947 07                      	pop	es
 32261 00006948 BF[B302]                	MOV	DI,MYNAME		; point dest to user string
 32262 0000694B 36FE06[B202]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 32263 00006950 EBE2                    	JMP	short UserMove
 32264                                  
 32265                                  UserPrint:
 32266                                  
 32267                                  ;IF NOT Installed
 32268                                  ;	transfer PRINTER_GETSET_STRING
 32269                                  ;ELSE
 32270 00006952 50                      	PUSH	AX
 32271                                  	;mov	ax,111Fh
 32272                                  	;MOV	AX,(MultNET SHL 8) OR 31
 32273 00006953 B81F11                  	mov	ax,(MultNET<<8)|31
 32274 00006956 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 32275                                  			; STACK: WORD function
 32276                                  			; Return: CF set on error, AX = error code
 32277                                  			; STACK unchanged
 32278 00006958 5A                      	POP	DX			; Clean stack
 32279 00006959 7302                    	JNC	short OKPA
 32280 0000695B EBC0                    	jmp	short useroper_error
 32281                                  OKPA:
 32282 0000695D EBDD                    	jmp	short UserBye
 32283                                  ;ENDIF
 32284                                  
 32285                                  
 32286                                  ;Break	<GetVisDrv - return visible drive>
 32287                                  ;----------------------------------------------------------------------------
 32288                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 32289                                  ;
 32290                                  ;   Inputs:	AL has drive identifier (0=default)
 32291                                  ;   Outputs:	Carry Set - invalid drive/macro
 32292                                  ;		Carry Clear - AL has physical drive (0=A)
 32293                                  ;		    ThisCDS points to CDS
 32294                                  ;   Registers modified: AL
 32295                                  ;----------------------------------------------------------------------------
 32296                                  
 32297                                  GetVisDrv:
 32298                                  	; 05/08/2018 - Retro DOS v3.0
 32299                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 32300 0000695F E81400                  	CALL	GETTHISDRV		; get inuse drive
 32301 00006962 72A4                    	jc	short RET45
 32302 00006964 1E                      	push	ds
 32303 00006965 56                      	push	si
 32304 00006966 36C536[3A05]            	LDS	SI,[SS:THISCDS]			;smr;SS Override
 32305                                  	;test	word [si+67],2000h
 32306 0000696B F744430020              	TEST	word [SI+curdir.flags],curdir_splice
 32307 00006970 5E                      	pop	si
 32308 00006971 1F                      	pop	ds
 32309 00006972 7494                    	jz	short RET45		; if not spliced, return OK
 32310                                  	; MSDOS 6.0
 32311                                  	;MOV	[SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 32312                                  	;
 32313 00006974 F9                      	STC				; signal error
 32314 00006975 C3                      	retn
 32315                                  
 32316                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 32317                                  ;----------------------------------------------------------------------------
 32318                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 32319                                  ;	macro pointer
 32320                                  ;
 32321                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 32322                                  ;   Outputs:
 32323                                  ;		Carry Set - invalid drive/macro
 32324                                  ;		Carry Clear - AL has physical drive (0=A)
 32325                                  ;		   ThisCDS points to macro
 32326                                  ;   Registers modified: AL
 32327                                  ;----------------------------------------------------------------------------
 32328                                  
 32329                                  GETTHISDRV:
 32330                                  	; 05/08/2018
 32331                                  	; 12/07/2018 - Retro DOS v3.0
 32332                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 32333                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32334 00006976 08C0                    	OR	AL,AL			; are we using default drive?
 32335 00006978 7506                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 32336 0000697A 36A0[E402]              	MOV	AL,[SS:CURDRV]		; get the current drive
 32337                                  	;INC	ax			; Counteract next instruction
 32338                                  	; 04/09/2018
 32339 0000697E FEC0                    	inc	al
 32340                                  GTD10:	
 32341                                  	;DEC	ax			; 0 = A
 32342 00006980 FEC8                    	dec	al
 32343 00006982 1E                      	PUSH	DS			; save world
 32344 00006983 56                      	PUSH	SI
 32345                                  	;mov	byte [ss:EXTERR_LOCUS],2
 32346 00006984 36C606[D102]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 32347 0000698A 36F606[0D05]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 32348 00006990 7421                    	JZ	SHORT GTD20		; Logical
 32349 00006992 50                      	PUSH	AX
 32350 00006993 06                      	PUSH	ES
 32351 00006994 57                      	PUSH	DI
 32352 00006995 36C706[3A05][9504]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 32353 0000699C 368C0E[3C05]            	mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 32354                                  	;MOV	[SS:THISCDS+2],SS	;ThisCDS = &DummyCDS;smr;
 32355 000069A1 0441                    	ADD	AL,'A'
 32356 000069A3 E816FF                  	CALL	InitCDS			;	InitCDS(c);
 32357                                  	;test	word [es:di+67],4000h
 32358 000069A6 26F745430040            	TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 32359 000069AC 5F                      	POP	DI
 32360 000069AD 07                      	POP	ES
 32361 000069AE 58                      	POP	AX
 32362 000069AF 740E                    	JZ	SHORT GTD30		; Not a physical drive.
 32363 000069B1 EB13                    	JMP	SHORT GTDX		; carry clear
 32364                                  GTD20:
 32365 000069B3 E81300                  	CALL	GetCDSFromDrv
 32366 000069B6 7207                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 32367                                  	;test	word [si+43h],4000h
 32368 000069B8 F744430040              	TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 32369 000069BD 7507                    	JNZ	SHORT GTDX		; carry clear
 32370                                  GTD30:	
 32371                                  	; 14/08/2018
 32372                                  	;MOV	AL,error_invalid_drive	; invalid FAT drive
 32373                                  	;MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 32374 000069BF 36C606[D102]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 32375 000069C5 F9                      	STC
 32376                                  GTDX:	
 32377 000069C6 5E                      	POP	SI			; restore world
 32378 000069C7 1F                      	POP	DS
 32379 000069C8 C3                      	RETN
 32380                                   
 32381                                  
 32382                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 32383                                  ;----------------------------------------------------------------------------
 32384                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 32385                                  ;	pointer, returning an error if the drive number is greater than the
 32386                                  ;	number of CDS's
 32387                                  ;
 32388                                  ;   Inputs:	AL is physical unit # A=0...
 32389                                  ;   Outputs:	Carry Set if Bad Drive
 32390                                  ;		Carry Clear
 32391                                  ;		    DS:SI -> CDS
 32392                                  ;		    [THISCDS] = DS:SI
 32393                                  ;   Registers modified: DS,SI
 32394                                  ;----------------------------------------------------------------------------
 32395                                  
 32396                                  GetCDSFromDrv:
 32397 000069C9 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 32398 000069CE 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 32399 000069D0 F9                      	STC				; signal error
 32400 000069D1 C3                      	RETN				; bye
 32401                                  GetCDS:
 32402 000069D2 53                      	PUSH	BX
 32403 000069D3 50                      	PUSH	AX
 32404 000069D4 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 32405                                  	;mov	bl,81
 32406 000069D9 B351                    	MOV	BL,curdir.size		; size in convenient spot
 32407 000069DB F6E3                    	MUL	BL			; get net offset
 32408 000069DD 01C6                    	ADD	SI,AX			; convert to true pointer
 32409 000069DF 368936[3A05]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 32410 000069E4 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 32411 000069E9 58                      	POP	AX
 32412 000069EA 5B                      	POP	BX
 32413 000069EB F8                      	CLC				; no error
 32414 000069EC C3                      	RETN				; bye!
 32415                                  
 32416                                  ;============================================================================
 32417                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 32418                                  ;============================================================================
 32419                                  ; Retro	DOS v3.0 - 12/07/2018
 32420                                  
 32421                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 32422                                  ;----------------------------------------------------------------------------
 32423                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 32424                                  ;       gritty substitution.
 32425                                  ;
 32426                                  ;   Inputs:     DS:DX - pointer to FCB
 32427                                  ;               ES:DI - point to destination
 32428                                  ;   Outputs:    Carry Set - invalid path in final map
 32429                                  ;               Carry Clear - FCB has been mapped into ES:DI
 32430                                  ;                   Sattrib is set from possibly extended FCB
 32431                                  ;                   ExtFCB set if extended FCB found
 32432                                  ;   Registers modified: most
 32433                                  ;----------------------------------------------------------------------------
 32434                                  
 32435                                  TransFCB:
 32436                                  	; 12/07/2018 - Retro DOS v3.0
 32437                                  	;LocalVar FCBTmp,16
 32438                                  	;ENTER
 32439 000069ED 55                      	push	bp
 32440 000069EE 89E5                    	mov	bp,sp
 32441                                  	;sub	sp,15	; MSDOS 3.3
 32442 000069F0 83EC10                  	sub	sp,16	; MSDOS 6.0
 32443 000069F3 16                      	push	ss
 32444 000069F4 07                      	pop	es
 32445 000069F5 06                      	push	es
 32446 000069F6 57                      	push	di
 32447                                  	;lea	di,[bp-15] ; MSDOS 3.3
 32448                                  	;LEA	DI,FCBTmp 
 32449 000069F7 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 32450 000069FA 36C606[0705]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 32451 00006A00 36C606[0805]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 32452 00006A06 E8B9BF                  	call	GetExtended             ; get FCB, extended or not
 32453 00006A09 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 32454 00006A0B 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 32455 00006A0E 36A2[0805]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 32456 00006A12 36C606[0705]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 32457                                  GetDrive:
 32458 00006A18 AC                      	lodsb				; get drive byte
 32459 00006A19 E85AFF                  	call	GETTHISDRV
 32460 00006A1C 722C                    	jc	short BadPack
 32461 00006A1E E87C03                  	call	TextFromDrive           ; convert 0-based drive to text
 32462                                  ;
 32463                                  ; Scan the source to see if there are any illegal chars
 32464                                  ;
 32465 00006A21 BB[1613]                	mov	bx,CharType		; load lookup table
 32466 00006A24 B90B00                  	mov	cx,11
 32467 00006A27 56                      	push	si			; back over name, ext
 32468                                  FCBScan:
 32469 00006A28 AC                      	lodsb				; get a byte
 32470                                  	; 09/08/2018
 32471                                  	;xlat	byte [es:bx]
 32472 00006A29 26D7                    	es	xlat			; get flags
 32473                                  	;test	al,8	
 32474 00006A2B A808                    	test	al,FFCB
 32475 00006A2D 741B                    	jz	short BadPack
 32476                                  NextCh: 
 32477 00006A2F E2F7                    	loop	FCBScan
 32478 00006A31 5E                      	pop	si
 32479 00006A32 89FB                    	mov	bx,di
 32480 00006A34 E8DDC3                  	call	PackName                ; crunch the path
 32481 00006A37 5F                      	pop	di			; get original destination
 32482 00006A38 07                      	pop	es
 32483 00006A39 16                      	push	ss			; get DS addressability
 32484 00006A3A 1F                      	pop	ds
 32485                                  	;lea	si,[bp-15] ; MSDOS 3.3
 32486                                  	;LEA	SI,FCBTmp		; point at new pathname
 32487 00006A3B 8D76F0                  	lea	si,[bp-16]
 32488 00006A3E 803F00                  	cmp	byte [bx],0
 32489 00006A41 7407                    	jz	short BadPack
 32490 00006A43 55                      	push	bp
 32491 00006A44 E80E00                  	call	TransPathSet            ; convert the path
 32492 00006A47 5D                      	pop	bp
 32493 00006A48 7303                    	jnc	short FCBRet		; bye with transPath error code
 32494                                  BadPack:
 32495 00006A4A F9                      	STC
 32496                                  	;mov	al,3
 32497 00006A4B B003                    	MOV     AL,error_path_not_found
 32498                                  FCBRet: 
 32499                                  	;LEAVE
 32500 00006A4D 89EC                    	mov	sp,bp
 32501 00006A4F 5D                      	pop	bp
 32502                                  TransPath_retn:
 32503 00006A50 C3                      	retn
 32504                                  
 32505                                  ; 12/07/2018 - Retro DOS v3.0
 32506                                  
 32507                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 32508                                  ;----------------------------------------------------------------------------
 32509                                  ;
 32510                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 32511                                  ;       substitution, insertion of current directory and fixing . and ..
 32512                                  ;       entries. Perform splicing. Allow input string to match splice
 32513                                  ;       exactly.
 32514                                  ;
 32515                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 32516                                  ;       matches splice.
 32517                                  ;
 32518                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 32519                                  ;
 32520                                  ;   The following anomalous behaviour is required:
 32521                                  ;
 32522                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 32523                                  ;       Paths on devices are ignored. (truncate to 0-length)
 32524                                  ;       Raw net I/O sets ThisCDS => NULL.
 32525                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 32526                                  ;
 32527                                  ;   Other behaviour:
 32528                                  ;
 32529                                  ;       ThisCDS set up.
 32530                                  ;       FatRead done on local CDS.
 32531                                  ;       ValidateCDS done on local CDS.
 32532                                  ;
 32533                                  ;   Brief flowchart:
 32534                                  ;
 32535                                  ;       if fSharing then
 32536                                  ;           set up DummyCDS (ThisCDS)
 32537                                  ;           canonicalize (sets cMeta)
 32538                                  ;           splice
 32539                                  ;           fatRead
 32540                                  ;           return
 32541                                  ;       if \\ or d:\\ lead then
 32542                                  ;           set up null CDS (ThisCDS)
 32543                                  ;           canonicalize (sets cMeta)
 32544                                  ;           return
 32545                                  ;       if device then
 32546                                  ;           set up dummyCDS (ThisCDS)
 32547                                  ;           canonicalize (sets cMeta)
 32548                                  ;           return
 32549                                  ;       if file then
 32550                                  ;           getCDS (sets (ThisCDS) from name)
 32551                                  ;           validateCDS (may reset current dir)
 32552                                  ;           Copy current dir
 32553                                  ;           canonicalize (set cMeta)
 32554                                  ;           splice
 32555                                  ;           generate correct CDS (ThisCDS)
 32556                                  ;           if local then
 32557                                  ;               fatread
 32558                                  ;           return
 32559                                  ;
 32560                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32561                                  ;               DI - point to buffer in DOSDATA
 32562                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32563                                  ;                   syntax, etc. or user FAILed to I 24.
 32564                                  ;               WFP_Start - points to beginning of buffer
 32565                                  ;               Curr_Dir_End - points to end of current dir in path
 32566                                  ;               DS - DOSDATA
 32567                                  ;   Registers modified: most
 32568                                  ;
 32569                                  ;----------------------------------------------------------------------------
 32570                                  
 32571                                  TransPath:
 32572 00006A51 30C0                    	XOR     AL,AL
 32573 00006A53 EB02                    	JMP     SHORT SetSplice
 32574                                  TransPathSet:
 32575 00006A55 B0FF                    	MOV     AL,-1
 32576                                  SetSplice:
 32577 00006A57 36A2[F802]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 32578 00006A5B B0FF                    	MOV     AL,-1
 32579                                  TransPathNoSet:
 32580 00006A5D 36A2[0C05]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 32581 00006A61 36C606[1505]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 32582 00006A67 36893E[4A05]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 32583 00006A6C 36C706[4E05]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 32584 00006A73 16                      	push	ss
 32585 00006A74 07                      	pop	es
 32586                                  	;lea	bp,[di+134]
 32587 00006A75 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 32588                                  ;
 32589                                  ; if this is through the server dos call, fsharing is set. We set up a
 32590                                  ; dummy cds and let the operation go.
 32591                                  ;
 32592 00006A79 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 32593 00006A7F 7435                    	JZ	short CheckUNC		; skip to UNC check
 32594                                  ;
 32595                                  ; ES:DI point to buffer
 32596                                  ;
 32597 00006A81 E80203                  	CALL	DriveFromText           ; get drive and advance DS:SI
 32598 00006A84 E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 32599 00006A87 722A                    	jc	short NoPath
 32600 00006A89 E81103                  	CALL	TextFromDrive		; drop in new
 32601 00006A8C 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 32602 00006A8F E83801                  	CALL	Canonicalize            ; copy and canonicalize
 32603 00006A92 72BC                    	jc	short TransPath_retn	; errors
 32604                                  ;
 32605                                  ; Perform splices for net guys.
 32606                                  ;
 32607 00006A94 16                      	push	ss
 32608 00006A95 1F                      	pop	ds
 32609 00006A96 8B36[4A05]              	MOV     SI,[WFP_START] 		; point to name
 32610 00006A9A F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32611 00006A9F 7403                    	JZ	short NoServerSplice
 32612 00006AA1 E83602                  	CALL    Splice
 32613                                  NoServerSplice:
 32614 00006AA4 16                      	push	ss
 32615 00006AA5 1F                      	pop	ds                      ; for FATREAD
 32616 00006AA6 C43E[3A05]              	LES     DI,[THISCDS]		; for fatread
 32617 00006AAA E8B8B5                  	call	EcritDisk
 32618 00006AAD E810F1                  	call	FATREAD_CDS
 32619 00006AB0 E8BAB5                  	call	LcritDisk
 32620                                  NoPath:
 32621                                  	;mov	al,3
 32622 00006AB3 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32623 00006AB5 C3                      	retn				; any errors are in Carry flag
 32624                                  
 32625                                  ;
 32626                                  ; Let the network decide if the name is for a spooled device. It will map
 32627                                  ; the name if so.
 32628                                  ;
 32629                                  CheckUNC:
 32630 00006AB6 36C706[3A05]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 32631                                  	;CallInstall NetSpoolCheck,MultNET,35
 32632 00006ABD B82311                  	mov	ax,1123h
 32633 00006AC0 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 32634                                  			; DS:SI -> ASCIZ filename to canonicalize
 32635                                  			; ES:DI -> 128-byte buffer for qualified name
 32636                                  			; Return: CF set if not resolved
 32637 00006AC2 7329                    	JNC	short UNCDone
 32638                                  ;
 32639                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 32640                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 32641                                  ; input, then the name has been changed to the remote spooler by the above net
 32642                                  ; call. Also, there may be a drive in front of the \\.
 32643                                  ;
 32644                                  NO_CHECK:
 32645 00006AC4 E8BF02                  	CALL    DriveFromText		; eat drive letter
 32646 00006AC7 50                      	PUSH    AX                      ; save it
 32647 00006AC8 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 32648 00006ACA E880EB                  	call    PATHCHRCMP              ; convert to normal form
 32649 00006ACD 86E0                    	XCHG    AH,AL                   ; swap for second byte
 32650 00006ACF E87BEB                  	call    PATHCHRCMP              ; convert to normal form
 32651 00006AD2 751F                    	JNZ	short CheckDevice	; not a path char
 32652 00006AD4 38C4                    	CMP     AH,AL                   ; are they same?
 32653 00006AD6 751B                    	JNZ	short CheckDevice	; nope
 32654                                  ;
 32655                                  ; We have a UNC request. We must copy the string up to the beginning of the
 32656                                  ; local machine root path
 32657                                  ;
 32658                                  
 32659 00006AD8 58                      	POP     AX
 32660 00006AD9 A5                      	MOVSW                           ; get the lead \\.
 32661                                  UNCCpy:
 32662 00006ADA AC                      	LODSB                           ; get a byte
 32663 00006ADB E833EB                   	call	UCase                   ;AN000;; convert the char
 32664 00006ADE 08C0                    	OR      AL,AL
 32665 00006AE0 740E                    	JZ	short UNCTerm		; end of string. All done.
 32666 00006AE2 E868EB                  	call    PATHCHRCMP              ; is it a path char?
 32667 00006AE5 89FB                    	MOV     BX,DI                   ; backup position
 32668 00006AE7 AA                      	STOSB
 32669 00006AE8 75F0                    	JNZ	short UNCCpy		; no, go copy
 32670 00006AEA E8DD00                  	CALL    Canonicalize            ; wham (and set cMeta)
 32671                                  UNCDone:
 32672 00006AED 16                      	push	ss
 32673 00006AEE 1F                      	pop	ds
 32674 00006AEF C3                       	retn				; return error code
 32675                                  UNCTerm:
 32676 00006AF0 AA                      	STOSB                           ;AN000;
 32677 00006AF1 EBFA                    	JMP	short UNCDone		;AN000;
 32678                                  
 32679                                  CheckDevice:
 32680                                  ;
 32681                                  ; Check DS:SI for device. First eat any path stuff
 32682                                  ;
 32683 00006AF3 58                      	POP     AX                      ; retrieve drive info
 32684 00006AF4 803C00                  	CMP     BYTE [SI],0		; check for null file
 32685 00006AF7 7504                    	JNZ	short CheckPath
 32686                                  	;mov	al,2 
 32687 00006AF9 B002                    	MOV     AL,error_file_not_found ; bad file error
 32688 00006AFB F9                      	STC                             ; signal error on null input
 32689 00006AFC C3                      	RETN				; bye!
 32690                                  CheckPath:
 32691 00006AFD 50                      	push	ax
 32692 00006AFE 55                      	push	bp			; save drive number
 32693                                  
 32694                                  	; MSDOS 6.0
 32695                                  ;;;BUGBUG BUG 10-26-1992 scottq
 32696                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 32697                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 32698                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 32699                                  ;;;end up having a 5D in the opcode's displacement field. The
 32700                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 32701                                  ;;;
 32702                                  ;;;What we do here is do a call to a function that is less than 5Dh
 32703                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 32704                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 32705                                  ;;;
 32706                                  ;;;More info:
 32707                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 32708                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 32709                                  ;;;
 32710 00006AFF E82000                  	call	no5Dshere
 32711                                  start5Dhack:
 32712                                  ;following is replaced with 5Dhack code--Invoke  CheckThisDevice         
 32713                                  backfrom5Dhack:
 32714 00006B02 5D                      	pop	bp
 32715 00006B03 58                      	pop	ax			; get drive letter back
 32716 00006B04 731F                    	JNC	short DoFile		; yes we have a file.
 32717                                  ;
 32718                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 32719                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 32720                                  ; call.
 32721                                  ;
 32722 00006B06 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 32723 00006B0C E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 32724 00006B0F 36C606[0D05]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 32725                                  ;
 32726                                  ; Now that we have noted that we have a device, we put it into a form that
 32727                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 32728                                  ; string. We relax this to state that if the d:\ is present then the path
 32729                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 32730                                  ; a device.
 32731                                  ;
 32732 00006B15 E88502                  	CALL    TextFromDrive
 32733 00006B18 B02F                    	MOV     AL,'/'                  ; path sep.
 32734 00006B1A AA                      	STOSB
 32735 00006B1B E82DB4                  	call	StrCpy			; move remainder of string
 32736                                  
 32737 00006B1E F8                      	CLC                             ; everything OK.
 32738 00006B1F 16                      	push	ss
 32739 00006B20 1F                      	pop	ds                      ; remainder of OK stuff
 32740                                  DoFile_retn:
 32741 00006B21 C3                      	retn
 32742                                  
 32743                                  no5Dshere:
 32744                                  	; 10/08/2018
 32745 00006B22 E9FEE0                  	jmp	CheckThisDevice		; snoop for device
 32746                                  
 32747                                  ;.erre (no5Dshere - start5Dhack - 5D)
 32748                                  
 32749                                  ;
 32750                                  ; We have a file. Get the raw CDS.
 32751                                  ;
 32752                                  
 32753                                  DoFile:
 32754                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32755                                  
 32756 00006B25 E837FE                  	call	GetVisDrv               ; get proper CDS
 32757                                  	;mov	al,3 
 32758 00006B28 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 32759 00006B2A 72F5                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 32760                                  ;
 32761                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 32762                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 32763                                  ; Use the one that we are going to use (ES:DI).
 32764                                  ;
 32765                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 32766 00006B2C 1E                      	push	ds
 32767 00006B2D 56                      	push	si
 32768 00006B2E 06                      	push	es
 32769 00006B2F 57                      	push	di
 32770 00006B30 E83CE0                  	call	ValidateCDS             ; poke CDS and make everything OK
 32771                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 32772 00006B33 5F                      	pop	di
 32773 00006B34 07                      	pop	es
 32774 00006B35 5E                      	pop	si
 32775 00006B36 1F                      	pop	ds
 32776                                  	;mov	al,3
 32777 00006B37 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32778                                  	;retc				; someone failed an operation
 32779 00006B39 72E6                    	jc	short DoFile_retn
 32780                                  ;
 32781                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 32782                                  ; current directory. Copy it in.
 32783                                  ;
 32784 00006B3B 1E                      	push	ds
 32785 00006B3C 56                      	push	si
 32786 00006B3D 36C536[3A05]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 32787 00006B42 89FB                    	MOV     BX,DI                   ; point to destination
 32788 00006B44 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 32789                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32790                                  	;lea	bp,[di+134]
 32791 00006B47 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 32792                                  					;AN000;
 32793 00006B4B E80CB4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 32794 00006B4E 4F                      	DEC     DI                      ; point to NUL byte
 32795                                  
 32796                                  ;
 32797                                  ; Make sure that there is a path char at end.
 32798                                  ;
 32799 00006B4F B05C                    	MOV     AL,'\'
 32800 00006B51 263845FF                	CMP     [ES:DI-1],AL
 32801 00006B55 7401                    	JZ	short GetOrig
 32802 00006B57 AA                      	STOSB
 32803                                  ;
 32804                                  ; Now get original string.
 32805                                  ;
 32806                                  GetOrig:
 32807 00006B58 4F                      	DEC     DI                      ; point to path char
 32808 00006B59 5E                      	pop	si
 32809 00006B5A 1F                      	pop	ds
 32810                                  ;
 32811                                  ; BX points to the end of the root part of the CDS (at where a path char
 32812                                  ; should be). Now, we decide whether we use this root or extend it with the
 32813                                  ; current directory.  See if the input string begins with a leading ;
 32815 00006B5B E8D100                  	CALL    PathSep                 ; is DS:SI a path sep?
 32816 00006B5E 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 32817 00006B60 08C0                    	OR      AL,AL                   ; end of string?
 32818 00006B62 7410                    	JZ	short DoCanon		; yes, skip.
 32819                                  ;
 32820                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 32821                                  ; to this root. Make sure that there is a path char there and advance the
 32822                                  ; source string over all leading \'s.
 32823                                  ;
 32824 00006B64 89DF                    	MOV     DI,BX                   ; back up to root point.
 32825                                  SkipPath:
 32826 00006B66 AC                      	LODSB
 32827 00006B67 E8E3EA                  	call    PATHCHRCMP
 32828 00006B6A 74FA                    	JZ	short SkipPath
 32829 00006B6C 4E                      	DEC     SI
 32830 00006B6D 08C0                    	OR      AL,AL
 32831 00006B6F 7403                    	JZ	short DoCanon
 32832                                  ;
 32833                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 32834                                  ; for yucks.
 32835                                  ;
 32836                                  PathAssure:
 32837 00006B71 B05C                    	MOV     AL,'\'
 32838 00006B73 AA                      	STOSB
 32839                                  ;
 32840                                  ; ES:DI point to the correct spot for canonicalization to begin.
 32841                                  ; BP is the max extent to advance DI
 32842                                  ; BX is the backup limit for ..
 32843                                  ;
 32844                                  DoCanon:
 32845 00006B74 E85300                  	CALL    Canonicalize            ; wham.
 32846                                  	;retc				; badly formatted path.
 32847 00006B77 72A8                    	jc	short DoFile_retn
 32848                                  
 32849                                  ;
 32850                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 32851                                  ; to wfp_start and do string substitution. BP is still the max position in
 32852                                  ; buffer.
 32853                                  ;
 32854 00006B79 16                      	push	ss
 32855 00006B7A 1F                      	pop	ds
 32856 00006B7B 8B3E[4A05]              	MOV     DI,[WFP_START]		; DS:SI point to string
 32857 00006B7F C536[3A05]              	LDS     SI,[THISCDS]		; point to CDS
 32858                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32859 00006B83 E81F02                  	CALL    PathPref                ; is there a prefix?
 32860 00006B86 7514                    	JNZ	short DoSplice		; no, do splice
 32861                                  ;
 32862                                  ; We have a match. Check to see if we ended in a path char.
 32863                                  ;
 32864 00006B88 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 32865 00006B8B E8BFEA                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 32866 00006B8E 740C                    	JZ	short DoSplice		; yes, no current dir here.
 32867                                  Pathline:                               ; 2/13/KK
 32868 00006B90 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 32869 00006B94 7406                    	JZ	short DoSplice
 32870 00006B96 47                      	INC     DI                      ; point to after current path char
 32871 00006B97 36893E[4E05]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 32872                                  ;
 32873                                  ; Splice the result.
 32874                                  ;
 32875                                  DoSplice:
 32876 00006B9C 16                      	push	ss
 32877 00006B9D 1F                      	pop	ds			; back to DOSDATA
 32878 00006B9E 8B36[4A05]              	MOV     SI,[WFP_START]		; point to beginning of string
 32879 00006BA2 31C9                    	XOR     CX,CX
 32880 00006BA4 F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32881 00006BA9 7403                    	JZ	short SkipSplice
 32882 00006BAB E82C01                  	CALL    Splice                  ; replaces in place.
 32883                                  SkipSplice:
 32884                                  ;
 32885                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 32886                                  ; device.
 32887                                  ;
 32888 00006BAE 16                      	push	ss
 32889 00006BAF 1F                      	pop	ds
 32890 00006BB0 C43E[3A05]              	LES     DI,[THISCDS]		; point to correct drive
 32891                                  	;test	word [es:di+67],8000h
 32892 00006BB4 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 32893 00006BBA 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 32894 00006BBC E30B                    	JCXZ    Done
 32895 00006BBE E8A4B4                  	call	EcritDisk
 32896 00006BC1 E8FCEF                  	call	FATREAD_CDS
 32897 00006BC4 E8A6B4                  	call	LcritDisk
 32898                                  	;mov	al, 3
 32899 00006BC7 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32900                                  Done:   
 32901 00006BC9 C3                      	retn                         ; any errors in carry flag.
 32902                                  
 32903                                  ; 13/07/2018
 32904                                  
 32905                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 32906                                  ;----------------------------------------------------------------------------
 32907                                  ;   Canonicalize - copy path removing . and .. entries.
 32908                                  ;
 32909                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32910                                  ;               ES:DI - point to buffer
 32911                                  ;               BX - backup limit (offset from ES) points to slash
 32912                                  ;               BP - end of buffer
 32913                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32914                                  ;                   syntax, etc.
 32915                                  ;               Carry Clear -
 32916                                  ;                   DS:DI - advanced to end of string
 32917                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 32918                                  ;   Registers modified: AX CX DX (in addition to those above)
 32919                                  ;----------------------------------------------------------------------------
 32920                                  
 32921                                  Canonicalize:
 32922                                  ;
 32923                                  ; We copy all leading path separators.
 32924                                  ;
 32925 00006BCA AC                      	LODSB                           ;   while (PathChr (*s))
 32926 00006BCB E87FEA                  	call    PATHCHRCMP
 32927 00006BCE 7507                    	JNZ	short CanonDec
 32928 00006BD0 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 32929 00006BD2 7319                    	JAE	short CanonBad		;           goto error;
 32930 00006BD4 AA                      	STOSB
 32931 00006BD5 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 32932                                  CanonDec:
 32933 00006BD7 4E                      	DEC     SI
 32934                                  ;
 32935                                  ; Main canonicalization loop.  We come here with DS:SI pointing to a textual
 32936                                  ; component (no leading path separators) and ES:DI being the destination
 32937                                  ; buffer.
 32938                                  ;
 32939                                  CanonLoop:
 32940                                  ;
 32941                                  ; If we are at the end of the source string, then we need to check to see that
 32942                                  ; a potential drive specifier is correctly terminated with a path sep char.
 32943                                  ; Otherwise, do nothing
 32944                                  ;
 32945 00006BD8 31C0                    	XOR     AX,AX
 32946 00006BDA 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 32947 00006BDC 751A                    	JNZ	short DoComponent
 32948 00006BDE 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 32949 00006BE3 7505                    	JNZ	short DoTerminate
 32950 00006BE5 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 32951 00006BE7 AA                      	STOSB
 32952 00006BE8 88E0                    	MOV     AL,AH
 32953                                  DoTerminate:
 32954 00006BEA AA                      	STOSB                           ;           *d++ = 0;
 32955 00006BEB F8                      	CLC                             ;           return (0);
 32956 00006BEC C3                      	retn
 32957                                  
 32958                                  CanonBad:
 32959 00006BED E8CE01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 32960                                  	;mov	al,3
 32961 00006BF0 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 32962 00006BF2 7402                    	JZ	short PathEnc		; path character encountered in string
 32963                                  	;mov	al,2
 32964 00006BF4 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 32965                                  PathEnc:
 32966 00006BF6 F9                      	STC
 32967                                  CanonBad_retn:
 32968 00006BF7 C3                      	retn
 32969                                  ;
 32970                                  ; We have a textual component that we must copy.  We uppercase it and truncate
 32971                                  ; it to 8.3
 32972                                  ;
 32973                                  DoComponent:                            ;           }
 32974 00006BF8 E85100                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 32975 00006BFB 72FA                    	jc	short CanonBad_retn	;           return (-1);
 32976                                  ;
 32977                                  ; We special case the . and .. cases.  These will be backed up.
 32978                                  ;
 32979                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 32980 00006BFD 26833D2E                	CMP	WORD [ES:DI],002Eh
 32981 00006C01 7408                    	JZ	short Skip1
 32982                                  	;CMP	WORD PTR ES:[DI],'..'
 32983 00006C03 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 32984 00006C08 750A                    	JNZ	short CanonNormal
 32985 00006C0A 4F                      	DEC     DI                      ;           d--;
 32986                                  Skip1:  
 32987 00006C0B E82B00                  	CALL    SkipBack                ;           SkipBack ();
 32988                                  	;mov	al,3
 32989 00006C0E B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32990 00006C10 72E5                    	jc	short CanonBad_retn
 32991 00006C12 EB02                    	JMP     short CanonPath         ;           }
 32992                                  ;
 32993                                  ; We have a normal path.  Advance destination pointer over it.
 32994                                  ;
 32995                                  CanonNormal:                            ;       else
 32996 00006C14 01CF                    	ADD     DI,CX                   ;           d += ct;
 32997                                  ;
 32998                                  ; We have successfully copied a component.  We are now pointing at a path
 32999                                  ; sep char or are pointing at a nul or are pointing at something else.
 33000                                  ; If we point at something else, then we have an error.
 33001                                  ;
 33002                                  CanonPath:
 33003 00006C16 E81600                  	CALL    PathSep
 33004 00006C19 75D2                    	JNZ	short CanonBad		; something else...
 33005                                  ;
 33006                                  ; Copy the first path char we see.
 33007                                  ;
 33008 00006C1B AC                      	LODSB                           ; get the char
 33009 00006C1C E82EEA                  	call    PATHCHRCMP              ; is it path char?
 33010 00006C1F 75B6                    	JNZ	short CanonDec		; no, go test for nul
 33011 00006C21 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 33012 00006C23 73C8                    	JAE	short CanonBad		; yep, error.
 33013 00006C25 AA                      	STOSB                           ; copy the one byte
 33014                                  ;
 33015                                  ; Skip all remaining path chars
 33016                                  ;
 33017                                  CanonPathLoop:
 33018 00006C26 AC                      	LODSB                           ; get next byte
 33019 00006C27 E823EA                  	call    PATHCHRCMP              ; path char again?
 33020 00006C2A 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 33021 00006C2C 4E                      	DEC     SI                      ; back up
 33022 00006C2D EBA9                    	JMP	short  CanonLoop	; go copy component
 33023                                  
 33024                                  ;BREAK <PathSep - determine if char is a path separator>
 33025                                  ;----------------------------------------------------------------------------
 33026                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 33027                                  ;   Inputs:     DS:SI - point to a char
 33028                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 33029                                  ;               Zero set if AL is / \ or NUL
 33030                                  ;               Zero reset otherwise
 33031                                  ;   Registers modified: AL
 33032                                  ;----------------------------------------------------------------------------
 33033                                  
 33034                                  PathSep:
 33035 00006C2F 8A04                    	MOV     AL,[SI]                 ; get the character
 33036                                  PathSepGotCh:				; already have character
 33037 00006C31 08C0                    	OR      AL,AL                   ; test for zero
 33038 00006C33 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 33039 00006C35 E815EA                  	call    PATHCHRCMP              ; check for path character
 33040 00006C38 C3                      	retn				; and return HIS determination
 33041                                  
 33042                                  ;BREAK <SkipBack - move backwards to a path separator>
 33043                                  ;----------------------------------------------------------------------------
 33044                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 33046                                  ;               BX has current directory back up limit (point to a / \)
 33047                                  ;   Outputs:    ES:DI backed up to point to a path char
 33048                                  ;               AL has char from output ES:DI (path sep if carry clear)
 33049                                  ;               Carry set if illegal backup
 33050                                  ;               Carry Clear if ok
 33051                                  ;   Registers modified: DI,AL
 33052                                  ;----------------------------------------------------------------------------
 33053                                  
 33054                                  SkipBack:
 33055 00006C39 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 33056 00006C3B 720B                    	JB	short SkipBad		;       if (d < dlim)
 33057 00006C3D 4F                      	DEC     DI                      ;           goto err;
 33058 00006C3E 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 33059 00006C41 E809EA                  	call    PATHCHRCMP              ;           break;
 33060 00006C44 75F3                    	JNZ	short SkipBack		;       }
 33061 00006C46 F8                      	CLC                             ;   return (0);
 33062 00006C47 C3                      	retn				;
 33063                                  SkipBad:                                ;err:
 33064                                  	;mov	al,3
 33065 00006C48 B003                    	MOV     AL,error_path_not_found ; bad path error
 33066 00006C4A F9                      	STC                             ;   return (-1);
 33067 00006C4B C3                      	retn                          ;
 33068                                  
 33069                                  ;Break <CopyComponent - copy out a file path component>
 33070                                  ;----------------------------------------------------------------------------
 33071                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 33072                                  ;
 33073                                  ;   Inputs:     DS:SI - source path
 33074                                  ;               ES:DI - destination
 33075                                  ;               ES:BP - end of buffer
 33076                                  ;   Outputs:    Carry Set - too long
 33077                                  ;               Carry Clear - DS:SI moved past component
 33078                                  ;                   CX has length of destination
 33079                                  ;   Registers modified: AX,CX,DX
 33080                                  ;----------------------------------------------------------------------------
 33081                                  
 33082                                  CopyComponent:
 33083                                  
 33084                                  %define CopyBP	 [BP]		; word
 33085                                  %define CopyD	 [BP+2]		; dword
 33086                                  %define CopyDoff [BP+2]		; word
 33087                                  %define CopyS	 [BP+6]		; dword
 33088                                  %define CopySoff [BP+6]		; word
 33089                                  %define CopyTemp [BP+10]	; byte
 33090                                  
 33091 00006C4C 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 33092 00006C4F 1E                      	push	ds
 33093 00006C50 56                      	push	si
 33094 00006C51 06                      	push	es
 33095 00006C52 57                      	push	di
 33096 00006C53 55                      	push	bp
 33097 00006C54 89E5                    	MOV     BP,SP
 33098 00006C56 B42E                    	MOV     AH,'.'
 33099 00006C58 AC                      	LODSB
 33100 00006C59 AA                      	STOSB
 33101 00006C5A 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 33102 00006C5C 7518                    	JNZ	short NormalComp
 33103 00006C5E E8CEFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 33104 00006C61 740B                    	JZ	short NulTerm
 33105                                  TryTwoDot:
 33106 00006C63 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 33107 00006C64 AA                      	STOSB
 33108 00006C65 38E0                    	CMP     AL,AH
 33109 00006C67 7557                    	JNZ	short CopyBad
 33110 00006C69 E8C3FF                  	CALL    PathSep
 33111 00006C6C 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 33112                                  NulTerm:                                ;               return -1;
 33113 00006C6E 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 33114 00006C70 AA                      	STOSB
 33115 00006C71 897606                  	MOV     CopySoff,SI
 33116 00006C74 EB47                    	JMP     SHORT _GoodRet		;       }
 33117                                  NormalComp:                             ;   else {
 33118 00006C76 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 33119 00006C79 E867E9                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 33120 00006C7C 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 33121 00006C7F 743F                    	JZ	short CopyBad		;           return (-1);
 33122 00006C81 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 33123 00006C87 7510                    	JNZ	short DoPack
 33124 00006C89 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 33125 00006C8C 360016[1505]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 33126 00006C91 7F2D                    	JG	short CopyBad		;               return (-1);
 33127 00006C93 7504                    	JNZ	short DoPack		;           else
 33128 00006C95 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 33129 00006C97 742F                    	JZ	short CopyBadPath	;               return (-1);
 33130                                  DoPack:                                 ;           }
 33131 00006C99 897606                  	MOV     CopySoff,SI ; [bp+6]
 33132 00006C9C 16                      	push	ss
 33133 00006C9D 1F                      	pop	ds
 33134 00006C9E BE[E604]                	MOV     SI,NAME1
 33135 00006CA1 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 33136 00006CA4 57                      	push	di
 33137 00006CA5 E86CC1                  	call	PackName                ;       PackName (Name1, temp);
 33138 00006CA8 5F                      	pop	di
 33139 00006CA9 E8B7B2                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 33140 00006CAC 49                      	DEC     CX
 33141 00006CAD 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 33142 00006CB0 3B4E00                  	CMP     CX,CopyBP   ; [bp+0]
 33143 00006CB3 730B                    	JAE	short CopyBad		;           return (-1);
 33144 00006CB5 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 33145 00006CB7 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 33146 00006CBA E89DB2                  	call	FStrCpy
 33147                                  _GoodRet:				;       }
 33148 00006CBD F8                      	CLC
 33149 00006CBE EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 33150                                  CopyBad:
 33151 00006CC0 F9                      	STC
 33152 00006CC1 E8FA00                  	CALL    ScanPathChar            ; check for path chars in rest of string
 33153                                  	;mov	al,2
 33154 00006CC4 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 33155 00006CC6 7503                    	JNZ	short CopyEnd
 33156                                  CopyBadPath:
 33157 00006CC8 F9                      	STC
 33158                                  	;mov	al,3
 33159 00006CC9 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 33160                                  CopyEnd:
 33161 00006CCB 5D                      	pop	bp
 33162 00006CCC 5F                      	pop	di
 33163 00006CCD 07                      	pop	es
 33164 00006CCE 5E                      	pop	si
 33165 00006CCF 1F                      	pop	ds
 33166 00006CD0 9F                      	LAHF
 33167 00006CD1 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 33168 00006CD4 E88CB2                  	call	StrLen
 33169 00006CD7 49                      	DEC     CX
 33170 00006CD8 9E                      	SAHF
 33171 00006CD9 C3                      	retn
 33172                                  
 33173                                  ;Break <Splice - pseudo mount by string substitution>
 33174                                  ;----------------------------------------------------------------------------
 33175                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 33176                                  ;       ThisCDS to point to physical drive CDS.
 33177                                  ;   Inputs:     DS:SI point to string
 33178                                  ;               NoSetDir = TRUE => exact matches with splice fail
 33179                                  ;   Outputs:    DS:SI points to thisCDS
 33180                                  ;               ES:DI points to DPB
 33181                                  ;               String at DS:SI may be reduced in length by removing prefix
 33182                                  ;               and substituting drive letter.
 33183                                  ;               CX = 0 If no splice done
 33184                                  ;               CX <> 0 otherwise
 33185                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 33186                                  ;                   left alone
 33187                                  ;               ThisDPB points to proper DPB
 33188                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 33189                                  ;----------------------------------------------------------------------------
 33190                                  
 33191                                  Splice:
 33192 00006CDA 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 33193 00006CE0 746A                    	JZ	short AllDone
 33194 00006CE2 36FF36[3A05]            	push	word [SS:THISCDS]
 33195 00006CE7 36FF36[3C05]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 33196 00006CEC 1E                      	push	ds
 33197 00006CED 56                      	push	si
 33198 00006CEE 5F                      	pop	di
 33199 00006CEF 07                      	pop	es
 33200 00006CF0 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 33201                                  SpliceScan:
 33202 00006CF2 E8D4FC                  	call	GetCDSFromDrv
 33203 00006CF5 724B                    	JC	short SpliceDone
 33204 00006CF7 FEC0                    	INC     AL
 33205                                  	;test	word [si+67],2000h
 33206 00006CF9 F744430020              	TEST    word [SI+curdir.flags],curdir_splice
 33207 00006CFE 74F2                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 33208 00006D00 57                      	push	di
 33209 00006D01 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 33210 00006D04 7403                    	JZ	short SpliceFound	;
 33211                                  SpliceSkip:
 33212 00006D06 5F                      	pop	di
 33213 00006D07 EBE9                    	JMP	short SpliceScan	;               continue;
 33214                                  SpliceFound:
 33215 00006D09 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 33216 00006D0D 7508                    	JNZ	short SpliceDo
 33217 00006D0F 36F606[F802]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 33218 00006D15 75EF                    	JNZ	short SpliceSkip
 33219                                  SpliceDo:
 33220 00006D17 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 33221 00006D19 06                      	push	es
 33222 00006D1A 1F                      	pop	ds
 33223 00006D1B 5F                      	pop	di
 33224 00006D1C E88000                  	CALL    TextFromDrive1          ;               src = TextFromDrive1(src,i);
 33225 00006D1F 36A1[4E05]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 33226 00006D23 09C0                    	OR      AX,AX
 33227 00006D25 7808                    	JS	short NoPoke
 33228 00006D27 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 33229 00006D29 29F0                    	SUB     AX,SI
 33230 00006D2B 36A3[4E05]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 33231                                  NoPoke:
 33232 00006D2F 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 33233 00006D32 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 33234 00006D34 B05C                    	MOV     AL,"\"
 33235 00006D36 AA                      	STOSB
 33236                                  SpliceCopy:                             ;               strcpy (src, p);
 33237 00006D37 E820B2                  	call	FStrCpy
 33238 00006D3A 83C404                  	ADD     SP,4                    ; throw away saved stuff
 33239 00006D3D 80C901                  	OR      CL,1                    ; signal splice done.
 33240 00006D40 EB0C                    	JMP     SHORT DoSet             ;               return;
 33241                                  SpliceDone:                             ;               }
 33242 00006D42 368F06[3C05]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 33243 00006D47 368F06[3A05]            	pop	word [SS:THISCDS]			;smr;SS Override
 33244                                  AllDone:
 33245 00006D4C 31C9                    	XOR     CX,CX
 33246                                  DoSet:
 33247 00006D4E 36C536[3A05]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 33248                                  	;les	di,[si+69]
 33249 00006D53 C47C45                  	LES     DI,[SI+curdir.devptr]	
 33250 00006D56 36893E[2405]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 33251 00006D5B 368C06[2605]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 33252                                  Splice_retn:
 33253 00006D60 C3                      	retn
 33254                                  
 33255                                  ;Break <$NameTrans - partially process a name>
 33256                                  ;----------------------------------------------------------------------------
 33257                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 33258                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 33259                                  ;   to Transpath playing games with devices, we need to insure that the output
 33260                                  ;   has drive letter and : in it.
 33261                                  ;
 33262                                  ;   Inputs:     DS:SI - source string for translation
 33263                                  ;               ES:DI - pointer to buffer
 33264                                  ;   Outputs:
 33265                                  ;       Carry Clear
 33266                                  ;               Buffer at ES:DI is filled in with data
 33267                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 33268                                  ;       Carry Set
 33269                                  ;               AX = error_path_not_found
 33270                                  ;   Registers modified: all
 33271                                  ;----------------------------------------------------------------------------
 33272                                  
 33273                                  _$NameTrans:
 33274 00006D61 1E                      	push	ds
 33275 00006D62 56                      	push	si
 33276 00006D63 06                      	push	es
 33277 00006D64 57                      	push	di
 33278 00006D65 51                      	push	cx ; MSDOS 6.0
 33279                                  	
 33280                                  	; MSDOS 6.0	
 33281                                  ; M027 - Start
 33282                                  ;
 33283                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 33284                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 33285                                  ; device if the old call set the volume attribute bit. Note that devname in
 33286                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 33287                                  ; and restore CX.
 33288                                  ;
 33289 00006D66 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 33290 00006D68 E81A05                  	call	SetAttrib
 33291                                  
 33292                                  ; M027 - End
 33293                                  
 33294                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33295 00006D6B BF[6003]                	MOV     DI,OPENBUF
 33296 00006D6E E8E0FC                  	CALL    TransPath               ; to translation (everything)
 33297 00006D71 59                      	pop	cx ; MSDOS 6.0
 33298 00006D72 5F                      	pop     di
 33299 00006D73 07                      	pop	es
 33300 00006D74 5E                      	pop     si
 33301 00006D75 1F                      	pop     ds
 33302 00006D76 7303                    	JNC	short TransOK
 33303 00006D78 E98BA9                  	jmp	SYS_RET_ERR
 33304                                  TransOK:
 33305 00006D7B BE[6003]                	MOV     SI,OPENBUF
 33306 00006D7E 16                      	push	ss
 33307 00006D7F 1F                      	pop	ds
 33308                                  GotText:
 33309 00006D80 E8D7B1                  	call	FStrCpy
 33310 00006D83 E977A9                  	jmp	SYS_RET_OK
 33311                                  
 33312                                  ;Break   <DriveFromText - return drive number from a text string>
 33313                                  ;----------------------------------------------------------------------------
 33314                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 33315                                  ;   pointer.
 33316                                  ;
 33317                                  ;   Inputs:     DS:SI point to a text string
 33318                                  ;   Outputs:    AL has drive number
 33319                                  ;               DS:SI advanced
 33320                                  ;   Registers modified: AX,SI.
 33321                                  ;----------------------------------------------------------------------------
 33322                                  
 33323                                  DriveFromText:
 33324 00006D86 30C0                    	XOR     AL,AL                   ;       drive = 0;
 33325 00006D88 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 33326 00006D8B 74D3                    	jz	short Splice_retn
 33327 00006D8D 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 33328 00006D91 75CD                    	jnz	short Splice_retn
 33329 00006D93 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 33330 00006D94 0C20                    	OR      AL,20h
 33331                                  	;sub	al,60h
 33332 00006D96 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 33333 00006D98 75C6                    	jnz	short Splice_retn
 33334 00006D9A B0FF                    	MOV     AL,-1                   ; nuke AL...
 33335 00006D9C C3                      	retn				;           }
 33336                                  
 33337                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 33338                                  ;----------------------------------------------------------------------------
 33339                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 33340                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 33341                                  ;
 33342                                  ;   Inputs:     AL has 0-based drive number
 33343                                  ;   Outputs:    ES:DI advanced
 33344                                  ;   Registers modified: AX
 33345                                  ;----------------------------------------------------------------------------
 33346                                  
 33347                                  TextFromDrive:
 33348 00006D9D FEC0                    	INC     AL
 33349                                  TextFromDrive1:
 33350                                  	;add	al,40h
 33351 00006D9F 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 33352 00006DA1 B43A                    	MOV     AH,":"                  ;   strcat (d, ":");
 33353 00006DA3 AB                      	STOSW
 33354                                  PathPref_retn:
 33355 00006DA4 C3                      	retn
 33356                                  
 33357                                  ;Break   <PathPref - see if one path is a prefix of another>
 33358                                  ;----------------------------------------------------------------------------
 33359                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 33360                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 33361                                  ;   prefix: A:\ and A:\FOO
 33362                                  ;
 33363                                  ;   Inputs:     DS:SI potential prefix
 33364                                  ;               ES:DI string
 33365                                  ;   Outputs:    Zero set => prefix found
 33366                                  ;                   DI/SI advanced past matching part
 33367                                  ;               Zero reset => no prefix, DS/SI garbage
 33368                                  ;   Registers modified: CX
 33369                                  ;----------------------------------------------------------------------------
 33370                                  
 33371                                  PathPref:
 33372 00006DA5 E8C9B1                  	call	DStrLen                 ; get length
 33373 00006DA8 49                      	DEC     CX                      ; do not include nul byte
 33374 00006DA9 F3A6                    	REPZ    CMPSB                   ; compare
 33375 00006DAB 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 33376 00006DAD 50                      	push	ax			; save char register
 33377 00006DAE 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 33378 00006DB1 E899E8                  	call    PATHCHRCMP              ; is it a path char (Root!)
 33379 00006DB4 7406                    	JZ	short Prefix		; yes, match root (I hope)
 33380                                  NotSep:                                 ; 2/13/KK
 33381 00006DB6 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 33382 00006DB9 E875FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 33383                                  Prefix:
 33384 00006DBC 58                      	pop	ax			; get back original
 33385 00006DBD C3                      	retn
 33386                                  
 33387                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 33388                                  ;----------------------------------------------------------------------------
 33389                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 33390                                  ;     a path separator.
 33391                                  ;
 33392                                  ;     Input:    DS:SI target string (null terminated)
 33393                                  ;     Output:   Zero set => path separator encountered in string
 33394                                  ;               Zero clear => null encountered
 33395                                  ;     Registers modified: SI
 33396                                  ;----------------------------------------------------------------------------
 33397                                  
 33398                                  ScanPathChar:
 33399 00006DBE AC                      	LODSB                           ; fetch a character
 33400 00006DBF E86FFE                  	call    PathSepGotCh
 33401 00006DC2 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 33402 00006DC4 E886E8                  	call    PATHCHRCMP              ; path separator?
 33403 00006DC7 C3                      	retn
 33404                                  
 33405                                  ;============================================================================
 33406                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 33407                                  ;============================================================================
 33408                                  ; 13/07/2018 - Retro DOS v3.0
 33409                                  
 33410                                  ;	BREAK <$Close - return a handle to the system>
 33411                                  ;----------------------------------------------------------------------------
 33412                                  ;
 33413                                  ;**	$Close - Close a file Handle
 33414                                  ;
 33415                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 33416                                  ;		path
 33417                                  ;
 33418                                  ;	Assembler usage:
 33419                                  ;	    MOV     BX, handle
 33420                                  ;	    MOV     AH, Close
 33421                                  ;	    INT     int_command
 33422                                  ;
 33423                                  ;	ENTRY	(bx) = handle
 33424                                  ;	EXIT	<normal INT21 return convention>
 33425                                  ;	USES	all
 33426                                  ;
 33427                                  ;----------------------------------------------------------------------------
 33428                                  
 33429                                  _$CLOSE:
 33430                                  ;	Grab the SFT pointer from the JFN.
 33431                                  
 33432 00006DC8 E85902                  	call	CheckOwner		; get system file entry
 33433 00006DCB 722B                    	jc	short CloseError	; error return
 33434 00006DCD 16                      	push	ss
 33435 00006DCE 1F                      	pop	ds			; For DOS_CLOSE
 33436 00006DCF 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33437 00006DD3 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33438                                  
 33439                                  ; DS:SI point to JFN table entry.
 33440                                  ; ES:DI point to SFT
 33441                                  ;
 33442                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 33443                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 33444                                  ; If the file was not a net FCB, we free the JFN too.
 33445                                  
 33446                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 33447 00006DD7 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 33448 00006DDB 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 33449                                  	;mov	al,[ES:DI+2]
 33450 00006DDD 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 33451                                  	;and	al,0F0h
 33452 00006DE1 24F0                    	AND	AL,SHARING_MASK
 33453                                  	;cmp	al,70h
 33454 00006DE3 3C70                    	CMP	AL,SHARING_NET_FCB
 33455 00006DE5 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 33456                                  
 33457                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 33458                                  ; -1.
 33459                                  
 33460                                  FreeJFN:
 33461 00006DE7 E8FFF9                  	call	pJFNFromHandle		;   d = pJFN (handle);
 33462 00006DEA 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 33463                                  PostFree:
 33464                                  
 33465                                  ; ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_CLOSE!
 33466                                  
 33467 00006DEE E8CBCC                  	call	DOS_CLOSE
 33468                                  
 33469                                  ; DOS_Close may return an error.  If we see such an error, we report it but
 33470                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 33471                                  
 33472 00006DF1 7205                    	JC	short CloseError
 33473                                  	;mov	ah,3Eh
 33474 00006DF3 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 33475 00006DF5 E905A9                  	jmp	SYS_RET_OK
 33476                                  CloseError:
 33477 00006DF8 E90BA9                  	jmp	SYS_RET_ERR
 33478                                  
 33479                                  
 33480                                  ;	BREAK <$Commit - commit the file>
 33481                                  ;----------------------------------------------------------------------------
 33482                                  ;
 33483                                  ;**	$Commit - Commit a File
 33484                                  ;
 33485                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 33486                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 33487                                  ;	the directory entry, etc., so this commit is pretty useless. check
 33488                                  ;	and fix this!! jgl
 33489                                  ;
 33490                                  ;	Assembler usage:
 33491                                  ;	    MOV     BX, handle
 33492                                  ;	    MOV     AH, Commit
 33493                                  ;	    INT     int_command
 33494                                  ;
 33495                                  ;	ENTRY	(bx) = handle
 33496                                  ;	EXIT	none
 33497                                  ;	USES	all
 33498                                  ;;----------------------------------------------------------------------------
 33499                                  
 33500                                  _$COMMIT:
 33501                                  ;	Grab the SFT pointer from the JFN.
 33502                                  
 33503 00006DFB E82602                  	call	CheckOwner		; get system file entry
 33504 00006DFE 7214                    	JC	short CommitError	; error return
 33505 00006E00 16                      	push	ss
 33506 00006E01 1F                      	pop	ds			; For DOS_COMMIT
 33507 00006E02 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33508 00006E06 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33509                                  
 33510                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 33511                                  ;
 33512                                  ;	ES:DI point to SFT
 33513                                  
 33514 00006E0A E8B0CD                  	call	DOS_COMMIT
 33515 00006E0D 7205                    	JC	short CommitError
 33516                                  	;mov	ah,68h
 33517 00006E0F B468                    	MOV	AH,COMMIT		;
 33518 00006E11 E9E9A8                  	jmp	SYS_RET_OK
 33519                                  CommitError:
 33520 00006E14 E9EFA8                  	jmp	SYS_RET_ERR
 33521                                  
 33522                                  ;	BREAK <$ExtHandle - extend handle count>
 33523                                  
 33524                                  ;**	$ExtHandle - Extend Handle Count
 33525                                  ;----------------------------------------------------------------------------
 33526                                  ;	Assembler usage:
 33527                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 33528                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 33529                                  ;	    INT     int_command 		 busy )
 33530                                  ;
 33531                                  ;	ENTRY	(bx) = new number of handles
 33532                                  ;	EXIT	'C' clear if OK
 33533                                  ;		'C' set iff err
 33534                                  ;		  (ax) = error code
 33535                                  ;			 AX = error_not_enough_memory
 33536                                  ;			      error_too_many_open_files
 33537                                  ;	USES	all
 33538                                  ;----------------------------------------------------------------------------
 33539                                  
 33540                                  _$ExtHandle:
 33541 00006E17 31ED                    	XOR	BP,BP			; 0: enlarge  1: shrink  2:psp
 33542                                  	;cmp	bx,20
 33543 00006E19 83FB14                  	CMP	BX,FILPERPROC
 33544 00006E1C 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 33545 00006E1E BB1400                  	MOV	BX,FILPERPROC
 33546                                  exth2:	
 33547 00006E21 368E06[DE02]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 33548                                  	;mov	cx,[ES:32h]
 33549 00006E26 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 33550 00006E2B 39CB                    	CMP	BX,CX			; the requested == current
 33551 00006E2D 7452                    	JE	short ok_done 		; yes and exit
 33552 00006E2F 7722                    	JA	short larger		; go allocate new table
 33553                                  
 33554                                  ;	We're going to shrink the # of handles available
 33555                                  
 33556 00006E31 BD0100                  	MOV	BP,1			; shrink
 33557                                  	;mov	ds,[ES:36h]
 33558 00006E34 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 33559 00006E39 89DE                    	MOV	SI,BX			;
 33560 00006E3B 29D9                    	SUB	CX,BX			; get difference
 33561                                  
 33562                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 33563                                  chck_handles:
 33564 00006E3D 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 33565 00006E40 7542                    	JNZ	short too_many_files	; status
 33566 00006E42 46                      	INC	SI
 33567 00006E43 E2F8                    	LOOP	chck_handles
 33568 00006E45 83FB14                  	CMP	BX,FILPERPROC		; = 20
 33569 00006E48 7709                    	JA	short larger		; no
 33570                                  
 33571 00006E4A BD0200                  	MOV	BP,2			; psp
 33572                                  	;mov	di,24
 33573 00006E4D BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 33574 00006E50 53                      	PUSH	BX
 33575 00006E51 EB1F                    	JMP	short movhandl
 33576                                  
 33577                                  larger:
 33578 00006E53 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 33579 00006E56 0F848100                	JZ	invalid_func ; 10/08/2018
 33580 00006E5A F8                      	CLC
 33581 00006E5B 53                      	PUSH	BX			; save requested number
 33582 00006E5C 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 33583 00006E5F B104                    	MOV	CL,4
 33584                                  	;ror	bx,cl			; MSDOS 3.3
 33585 00006E61 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 33586 00006E63 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 33587                                  
 33588 00006E67 55                      	PUSH	BP
 33589 00006E68 E8E8F6                  	call	_$ALLOC			; allocate memory
 33590 00006E6B 5D                      	POP	BP
 33591 00006E6C 7267                    	JC	short no_memory		; not enough meory
 33592                                  
 33593 00006E6E 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 33594 00006E70 31FF                    	XOR	DI,DI
 33595                                  movhandl:
 33596 00006E72 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 33597                                  
 33598 00006E77 F7C50300                	test	BP,3			; enlarge ?
 33599 00006E7B 740C                    	JZ	short enlarge 		; yes
 33600 00006E7D 59                      	POP	CX			; cx = the amount you shrink
 33601 00006E7E 51                      	PUSH	CX
 33602 00006E7F EB0C                    	JMP	short copy_hand
 33603                                  
 33604                                  ;	Done.  'C' clear
 33605                                  
 33606                                  ok_done:
 33607 00006E81 E979A8                  	jmp	SYS_RET_OK
 33608                                  
 33609                                  too_many_files:
 33610                                  	;mov	al,4
 33611 00006E84 B004                    	MOV	AL,error_too_many_open_files
 33612 00006E86 E97DA8                  	jmp	SYS_RET_ERR
 33613                                  
 33614                                  enlarge:
 33615                                  	;mov	cx,[32h]
 33616 00006E89 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 33617                                  copy_hand:
 33618 00006E8D 89CA                    	MOV	DX,CX
 33619                                  	;lds	si,[34h]
 33620 00006E8F C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 33621 00006E93 F3A4                    	REP	MOVSB			; copy information to new table
 33622 00006E95 59                      	POP	CX			; get new number of handles
 33623 00006E96 51                      	PUSH	CX			; save it again
 33624 00006E97 29D1                    	SUB	CX,DX			; get the difference
 33625 00006E99 B0FF                    	MOV	AL,-1			; set availability to handles
 33626 00006E9B F3AA                    	REP	STOSB
 33627 00006E9D 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 33628                                  	;cmp	word [34h],0
 33629 00006EA2 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 33630 00006EA7 750D                    	JNZ	short update_info	; yes, go update PDB entries
 33631 00006EA9 55                      	PUSH	BP
 33632 00006EAA 1E                      	PUSH	DS			; save old table segment
 33633 00006EAB 06                      	PUSH	ES			; save new table segment
 33634 00006EAC 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 33635 00006EB0 E8BDF7                  	call	_$DEALLOC		; deallocate old table meomory
 33636 00006EB3 07                      	POP	ES			; restore new table segment
 33637 00006EB4 1F                      	POP	DS			; restore old table segment
 33638 00006EB5 5D                      	POP	BP
 33639                                  
 33640                                  update_info:
 33641 00006EB6 F7C50200                	test	BP,2			; psp?
 33642 00006EBA 7408                    	JZ	short non_psp 		; no
 33643                                  	;mov	word [34h],18h ; 24
 33644 00006EBC C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 33645 00006EC2 EB06                    	JMP	short final
 33646                                  non_psp:
 33647                                  	;mov	word [34h],0
 33648 00006EC4 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 33649                                  final:
 33650                                  	;mov	word [36h],es	
 33651 00006ECA 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 33652                                  	;pop	word [32h]
 33653 00006ECE 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 33654 00006ED2 E928A8                  	jmp	SYS_RET_OK
 33655                                  
 33656                                  no_memory:
 33657 00006ED5 5B                      	POP	BX			; clean stack
 33658                                  	;mov	al,8
 33659 00006ED6 B008                    	MOV	AL,error_not_enough_memory
 33660 00006ED8 E92BA8                  	jmp	SYS_RET_ERR
 33661                                  invalid_func:
 33662                                  	;mov	al,1
 33663 00006EDB B001                    	MOV	AL,error_invalid_function
 33664 00006EDD E926A8                  	jmp	SYS_RET_ERR
 33665                                  
 33666                                  
 33667                                  ;	BREAK <$READ - Read from a file handle>
 33668                                  ;----------------------------------------------------------------------------
 33669                                  ;
 33670                                  ;**	$Read - Read from a File Handle
 33671                                  ;
 33672                                  ;   Assembler usage:
 33673                                  ;
 33674                                  ;	LDS	DX, buf
 33675                                  ;	MOV	CX, count
 33676                                  ;	MOV	BX, handle
 33677                                  ;	MOV	AH, Read
 33678                                  ;	INT	int_command
 33679                                  ;	  AX has number of bytes read
 33680                                  ;
 33681                                  ;	ENTRY	(bx) = file handle
 33682                                  ;		(cx) = byte count
 33683                                  ;		(ds:dx) = buffer address
 33684                                  ;	EXIT	Through system call return so that to user:
 33685                                  ;		  'C' clear if OK
 33686                                  ;		    (ax) = bytes read
 33687                                  ;		  'C' set if error
 33688                                  ;		    (ax) = error code
 33689                                  ;
 33690                                  ;----------------------------------------------------------------------------
 33691                                  
 33692                                  _$READ:
 33693 00006EE0 BE[FE3D]                	MOV	SI,DOS_READ
 33694                                  ReadDo:
 33695 00006EE3 E803F9                  	call	pJFNFromHandle
 33696 00006EE6 7208                    	JC	short ReadError
 33697 00006EE8 268A05                  	MOV	AL,[ES:DI]
 33698 00006EEB E83601                  	call	CheckOwner		; get the handle
 33699 00006EEE 7303                    	JNC	short ReadSetup		; no errors do the operation
 33700                                  
 33701                                  ;	Have an error.	'C' set
 33702                                  
 33703                                  ReadError:
 33704 00006EF0 E913A8                  	jmp	SYS_RET_ERR		; go to error traps
 33705                                  
 33706                                  ReadSetup:
 33707 00006EF3 36893E[3605]            	MOV	[SS:THISSFT],DI		; save offset of pointer;smr;SS Override
 33708 00006EF8 368C06[3805]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 33709                                  	;;; MSDOS 6.0 
 33710                                  ;; Extended Open
 33711                                  	;;;testb [ES:DI+SF_ENTRY.sf_mode],INT_24_ERROR  ;AN000;;EO. need i24
 33712                                  	;;;JZ	short needi24 		      ;AN000;;EO. yes
 33713                                  	;;;OR	byte [EXTOPEN_ON],EXT_OPEN_I24_OFF 
 33714                                  					;AN000;;EO. set it off;smr;SS Override
 33715                                  needi24:				;AN000;
 33716                                  ;; Extended Open
 33717 00006EFD 36FF36[DA02]            	push	word [SS:DMAADD]
 33718 00006F02 36FF36[DC02]            	push	word [SS:DMAADD+2]	;smr;SS Override
 33719                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33720                                  	;;; MSDOS 6.0
 33721                                  	;;; CALL Align_Buffer		;AN000;MS. align user's buffer
 33722                                  	; MSDOS 3.3
 33723 00006F07 89D3                    	MOV	BX,DX			; copy offset
 33724 00006F09 51                      	push	cx			; don't stomp on count
 33725 00006F0A B104                    	MOV	CL,4			; bits to shift bytes->para
 33726 00006F0C D3EB                    	SHR	BX,CL			; get number of paragraphs
 33727 00006F0E 59                      	pop	cx			; get count back
 33728 00006F0F 8CD8                    	MOV	AX,DS			; get original segment
 33729 00006F11 01D8                    	ADD	AX,BX			; get new segment
 33730 00006F13 8ED8                    	MOV	DS,AX			; in seg register
 33731 00006F15 83E20F                  	AND	DX,0Fh			; normalize offset
 33732 00006F18 368916[DA02]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33733 00006F1D 368C1E[DC02]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33734                                  						;smr;SS Override
 33735                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33736 00006F22 16                      	push	ss			; go for DOS addressability
 33737 00006F23 1F                      	pop	ds
 33738 00006F24 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 33739 00006F26 8F06[DC02]              	pop	word [DMAADD+2]
 33740 00006F2A 8F06[DA02]              	pop	word [DMAADD]
 33741                                  	;JNC	short READ_OK		;AN002;
 33742                                  	;JMP	ReadError		;AN002; if error, say bye bye
 33743 00006F2E 72C0                    	jc	short ReadError
 33744                                  READ_OK:
 33745 00006F30 89C8                    	MOV	AX,CX			; get correct return in correct reg
 33746 00006F32 E9C8A7                  	jmp	SYS_RET_OK		; successful return
 33747                                  
 33748                                  
 33749                                  
 33750                                  ; 13/07/2018 - Retro DOS v3.0
 33751                                  
 33752                                  ;
 33753                                  ;   Input: DS:DX points to user's buffer addr
 33754                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 33755                                  ;   Output: [DMAADD] set
 33756                                  ;
 33757                                  
 33758                                  ;Align_Buffer:
 33759                                  ;	MOV	BX,DX			; copy offset
 33760                                  ;	push	cx			; don't stomp on count
 33761                                  ;	MOV	CL,4			; bits to shift bytes->para
 33762                                  ;	SHR	BX,CL			; get number of paragraphs
 33763                                  ;	pop	cx			; get count back
 33764                                  ;	MOV	AX,DS			; get original segment
 33765                                  ;	ADD	AX,BX			; get new segment
 33766                                  ;	MOV	DS,AX			; in seg register
 33767                                  ;	AND	DX,0Fh			; normalize offset
 33768                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33769                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33770                                  ;						;smr;SS Override
 33771                                  ;	retn
 33772                                  
 33773                                  ;BREAK <$WRITE - write to a file handle>
 33774                                  ;----------------------------------------------------------------------------
 33775                                  ;
 33776                                  ;   Assembler usage:
 33777                                  ;	    LDS     DX, buf
 33778                                  ;	    MOV     CX, count
 33779                                  ;	    MOV     BX, handle
 33780                                  ;	    MOV     AH, Write
 33781                                  ;	    INT     int_command
 33782                                  ;	  AX has number of bytes written
 33783                                  ;   Errors:
 33784                                  ;	    AX = write_invalid_handle
 33785                                  ;	       = write_access_denied
 33786                                  ;
 33787                                  ;   Returns in register AX
 33788                                  ;
 33789                                  ;----------------------------------------------------------------------------
 33790                                  
 33791                                  _$WRITE:
 33792 00006F35 BE[7F3F]                	MOV	SI,DOS_WRITE
 33793 00006F38 EBA9                    	JMP	short ReadDo
 33794                                  
 33795                                  ;BREAK <$LSEEK - move r/w pointer>
 33796                                  ;----------------------------------------------------------------------------
 33797                                  ;
 33798                                  ;   Assembler usage:
 33799                                  ;	    MOV     DX, offsetlow
 33800                                  ;	    MOV     CX, offsethigh
 33801                                  ;	    MOV     BX, handle
 33802                                  ;	    MOV     AL, method
 33803                                  ;	    MOV     AH, LSeek
 33804                                  ;	    INT     int_command
 33805                                  ;	  DX:AX has the new location of the pointer
 33806                                  ;   Error returns:
 33807                                  ;	    AX = error_invalid_handle
 33808                                  ;	       = error_invalid_function
 33809                                  ;   Returns in registers DX:AX
 33810                                  ;
 33811                                  ;----------------------------------------------------------------------------
 33812                                  
 33813                                  _$LSEEK:
 33814 00006F3A E8E700                  	call	CheckOwner		; get system file entry
 33815                                  LSeekError:
 33816                                  	;JNC	short CHKOWN_OK		;AN002;
 33817                                  	;JMP	short ReadError		;AN002; error return
 33818 00006F3D 72B1                    	jc	short ReadError ; 24/07/2019
 33819                                  CHKOWN_OK:				;AN002;
 33820 00006F3F 3C02                    	CMP	AL,2			; is the seek value correct?
 33821 00006F41 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 33822                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 33823 00006F43 36C606[D102]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33824                                  					;smr;SS Override
 33825                                  	;mov	al,1
 33826 00006F49 B001                    	mov	al, error_invalid_function ; invalid method
 33827 00006F4B EBA3                    	jmp	short ReadError
 33828                                  LSeekDisp:
 33829 00006F4D 3C01                    	CMP	AL,1			; best way to dispatch ; check middle
 33830 00006F4F 720A                    	JB	short LSeekStore	; just store CX:DX
 33831 00006F51 771C                    	JA	short LSeekEOF		; seek from end of file
 33832                                  	;add	dx,[es:di+21]
 33833 00006F53 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 33834                                  	;adc	cx,[es:di+23]
 33835 00006F57 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 33836                                  LSeekStore:
 33837 00006F5B 89C8                    	MOV	AX,CX			; AX:DX
 33838 00006F5D 92                      	XCHG	AX,DX			; DX:AX is the correct value
 33839                                  LSeekSetpos:
 33840                                  	;mov	[es:di+21],ax
 33841 00006F5E 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 33842                                  	;mov	[es:di+23],dx
 33843 00006F62 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 33844 00006F66 E8A2A6                  	call	Get_User_Stack
 33845                                  	;mov	[si+6],dx
 33846 00006F69 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 33847                                  	;jmp	SYS_RET_OK		; successful return
 33848                                  	; 26/07/2019
 33849 00006F6C E991A7                  	jmp	SYS_RET_OK_clc
 33850                                  
 33851                                  LSeekEOF:
 33852                                  	;test	word [es:di+5],8000h
 33853 00006F6F 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 33854 00006F75 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 33855                                  LOCAL_LSeek:
 33856                                  	;add	dx,[es:di+17]
 33857 00006F77 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 33858                                  	;adc	cx,[es:di+19]
 33859 00006F7B 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 33860 00006F7F EBDA                    	JMP	short LSeekStore	; go and set the position
 33861                                  
 33862                                  Check_LSeek_Mode:
 33863                                  	;test	word [es:di+2],8000h
 33864 00006F81 26F745020080            	test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 33865 00006F87 75EE                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 33866                                  	;mov	ax,[es:di+2]
 33867 00006F89 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 33868                                  	;and	ax, 0F0h
 33869 00006F8D 25F000                  	AND	AX,SHARING_MASK
 33870                                  	;cmp	ax,40h
 33871 00006F90 83F840                  	CMP	AX,SHARING_DENY_NONE
 33872 00006F93 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 33873                                  	;cmp	ax,30h
 33874 00006F95 83F830                  	CMP	AX,SHARING_DENY_READ
 33875 00006F98 75DD                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 33876                                  NET_LSEEK:
 33877                                  ;	JMP	short LOCAL_LSeek
 33878                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 33879                                  	;CallInstall Net_Lseek,MultNET,33
 33880                                  	;JNC	short LSeekSetPos
 33881                                  
 33882 00006F9A B82111                  	mov     ax, 1121h
 33883 00006F9D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 33884                                  			; CX:DX = offset (in bytes) from end
 33885                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 33886                                  			; SS = DOS CS
 33887                                  			; Return: CF set on error
 33888                                  			; CF clear if successful, DX:AX = new file position
 33889 00006F9F 73BD                    	jnb     short LSeekSetpos
 33890 00006FA1 E962A7                  	jmp	SYS_RET_ERR
 33891                                  
 33892                                  ;BREAK <FileTimes - modify write times on a handle>
 33893                                  ;----------------------------------------------------------------------------
 33894                                  ;
 33895                                  ;   Assembler usage:
 33896                                  ;	    MOV AH, FileTimes (57H)
 33897                                  ;	    MOV AL, func
 33898                                  ;	    MOV BX, handle
 33899                                  ;	; if AL = 1 then then next two are mandatory
 33900                                  ;	    MOV CX, time
 33901                                  ;	    MOV DX, date
 33902                                  ;	    INT 21h
 33903                                  ;	; if AL = 0 then CX/DX has the last write time/date
 33904                                  ;	; for the handle.
 33905                                  ;
 33906                                  ;	AL=02		 get extended attributes
 33907                                  ;	   BX=handle
 33908                                  ;	   CX=size of buffer (0, return max size )
 33909                                  ;	   DS:SI query list (si=-1, selects all EA)
 33910                                  ;	   ES:DI buffer to hold EA list
 33911                                  ;
 33912                                  ;	AL=03		 get EA name list
 33913                                  ;	   BX=handle
 33914                                  ;	   CX=size of buffer (0, return max size )
 33915                                  ;	   ES:DI buffer to hold name list
 33916                                  ;
 33917                                  ;	AL=04		 set extended attributes
 33918                                  ;	   BX=handle
 33919                                  ;	   ES:DI buffer of EA list
 33920                                  ;
 33921                                  ;
 33922                                  ;   Error returns:
 33923                                  ;	    AX = error_invalid_function
 33924                                  ;	       = error_invalid_handle
 33925                                  ;
 33926                                  ;----------------------------------------------------------------------------
 33927                                  
 33928                                  _$FILE_TIMES:
 33929                                  	; 13/07/2018 - Retro DOS v3.0
 33930                                  
 33931                                  	; MSDOS 3.3
 33932 00006FA4 3C02                    	cmp	al,2			; correct subfunction ?
 33933 00006FA6 720B                    	jb	short ft1
 33934                                  
 33935                                          ;mov	byte [ss:EXTERR_LOCUS], 1
 33936 00006FA8 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33937                                  						;SS Overr
 33938                                  	;mov	al,1
 33939 00006FAE B001                    	mov	al,error_invalid_function ; give bad return
 33940 00006FB0 E953A7                  	jmp     SYS_RET_ERR
 33941                                  
 33942                                  	; MSDOS 6.0
 33943                                  	;cmp	al,2			; correct subfunction ?
 33944                                  	;jae	short inval_func
 33945                                  ft1:
 33946 00006FB3 E86E00                  	call	CheckOwner		; get sft
 33947 00006FB6 7285                    	jc	short LSeekError	; bad handle
 33948                                  
 33949 00006FB8 08C0                    	or	al,al			; get time/date ?
 33950 00006FBA 7515                    	jnz	short ft_set_time
 33951                                  
 33952                                  ;------ here we get the time & date from the sft for the user
 33953                                  
 33954 00006FBC FA                      	cli				; is this cli/sti reqd ? BUGBUG
 33955                                  	;mov	cx,[es:di+13]
 33956 00006FBD 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 33957                                  	;mov	dx,[es:di+15]
 33958 00006FC1 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 33959 00006FC5 FB                      	sti
 33960 00006FC6 E842A6                  	call	Get_User_Stack
 33961                                  	;mov	[si+4],cx
 33962 00006FC9 894C04                  	mov	[si+user_env.user_CX],cx
 33963                                  	;mov	[si+6],dx
 33964 00006FCC 895406                  	mov	[si+user_env.user_DX],dx
 33965 00006FCF EB20                    	jmp	short ok_ret
 33966                                  
 33967                                  ;------ here we set the time in sft
 33968                                  
 33969                                  ft_set_time:
 33970 00006FD1 E891B0                  	call    EcritSFT
 33971                                  	;mov	[es:di+13],cx
 33972 00006FD4 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 33973                                  	;mov	[es:di+15],dx
 33974 00006FD8 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 33975                                  
 33976 00006FDC 31C0                    	xor	ax, ax
 33977 00006FDE 36FF1E[9400]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 33978                                  
 33979                                  ;------ set the flags in SFT entry
 33980                                  	;and	word [es:di+5],0FFBFh
 33981 00006FE3 26836505BF              	and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 33982                                  							; mark file as dirty
 33983                                  	;or	word [es:di+5],4000h
 33984 00006FE8 26814D050040            	or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 33985                                  							; ask close not to
 33986                                  							;   bother about date
 33987                                  							;   and time
 33988 00006FEE E87CB0                  	call	LcritSFT
 33989                                  ok_ret:
 33990 00006FF1 E909A7                  	jmp	SYS_RET_OK
 33991                                  
 33992                                  ;inval_func:
 33993                                  ;	mov	byte [ss:EXTERR_LOCUS], 1
 33994                                  ;	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33995                                  ;						;SS Overr
 33996                                  ;	;mov	al,1
 33997                                  ;	mov	al,error_invalid_function ; give bad return
 33998                                  ;	jmp     SYS_RET_ERR
 33999                                  
 34000                                  ;BREAK <$DUP - duplicate a jfn>
 34001                                  ;----------------------------------------------------------------------------
 34002                                  ;
 34003                                  ;   Assembler usage:
 34004                                  ;	    MOV     BX, fh
 34005                                  ;	    MOV     AH, Dup
 34006                                  ;	    INT     int_command
 34007                                  ;	  AX has the returned handle
 34008                                  ;   Errors:
 34009                                  ;	    AX = dup_invalid_handle
 34010                                  ;	       = dup_too_many_open_files
 34011                                  ;
 34012                                  ;----------------------------------------------------------------------------
 34013                                  
 34014                                  _$DUP:
 34015 00006FF4 89D8                    	MOV	AX,BX			; save away old handle in AX
 34016 00006FF6 E844F8                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 34017                                  DupErrorCheck:
 34018 00006FF9 7218                    	JC	short DupErr		; nope, bye
 34019 00006FFB 06                      	push	es
 34020 00006FFC 57                      	push	di			; save away SFT
 34021 00006FFD 5E                      	pop	si			; into convenient place DS:SI
 34022 00006FFE 1F                      	pop	ds
 34023 00006FFF 93                      	XCHG	AX,BX			; get back old handle
 34024 00007000 E82100                  	call	CheckOwner		; get sft in ES:DI
 34025 00007003 720E                    	JC	short DupErr		; errors go home
 34026 00007005 E8D2C6                  	call	DOS_Dup_Direct
 34027 00007008 E8DEF7                  	call	pJFNFromHandle		; get pointer
 34028 0000700B 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 34029 0000700E 881C                    	MOV	[SI],BL			; stuff in new SFT
 34030 00007010 E9EAA6                  	jmp	SYS_RET_OK		; and go home
 34031                                  DupErr:
 34032 00007013 E9F0A6                  	jmp	SYS_RET_ERR
 34033                                  
 34034                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 34035                                  ;----------------------------------------------------------------------------
 34036                                  ;
 34037                                  ;   Assembler usage:
 34038                                  ;	    MOV     BX, fh
 34039                                  ;	    MOV     CX, newfh
 34040                                  ;	    MOV     AH, Dup2
 34041                                  ;	    INT     int_command
 34042                                  ;   Error returns:
 34043                                  ;	    AX = error_invalid_handle
 34044                                  ;
 34045                                  ;----------------------------------------------------------------------------
 34046                                  
 34047                                  _$DUP2:
 34048 00007016 53                      	push	bx
 34049 00007017 51                      	push	cx			; save source
 34050 00007018 89CB                    	MOV	BX,CX			; get one to close
 34051 0000701A E8ABFD                  	call	_$CLOSE			; close destination handle
 34052 0000701D 5B                      	pop	bx
 34053 0000701E 58                      	pop	ax			; old in AX, new in BX
 34054 0000701F E8C7F7                  	call	pJFNFromHandle		; get pointer
 34055 00007022 EBD5                    	JMP	short DupErrorCheck	; check error and do dup
 34056                                  
 34057                                  ;Break	<CheckOwner - verify ownership of handles from server>
 34058                                  ;----------------------------------------------------------------------------
 34059                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 34060                                  ;   process without the process knowing it (delete/rename of open files, for
 34061                                  ;   example), it is possible for the redirector to issue a call to a handle
 34062                                  ;   that it soes not rightfully own.  We check here to make sure that the
 34063                                  ;   issuing process is the owner of the SFT.  At the same time, we do a
 34064                                  ;   SFFromHandle to really make sure that the SFT is good.
 34065                                  ;
 34066                                  ;	ENTRY	BX has the handle
 34067                                  ;		User_ID is the current user
 34068                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 34069                                  ;		Carry Set => AX has error code
 34070                                  ;	USES	none
 34071                                  ;----------------------------------------------------------------------------
 34072                                  
 34073                                  CheckOwner:
 34074                                  	; 13/07/2018 - Retro DOS v3.0
 34075                                  
 34076 00007024 E8DAF7                  	call	SFFromHandle
 34077 00007027 720F                    	jc	short co_ret_label	; retc
 34078                                  
 34079 00007029 50                      	push	ax
 34080                                  
 34081                                  	; MSDOS 6.0
 34082                                  ;SR;
 34083                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 34084                                  ;SR; are shared across multiple VMs in win386.
 34085                                  ;SR;
 34086                                  	;test	byte [IsWin386],1
 34087                                  	;jz	short no_win386		;win386 is not present
 34088                                  	;xor	ax,ax			;set the zero flag
 34089                                  	;jmp	short skip_win386	
 34090                                  
 34091                                  ;no_win386:
 34092 0000702A 36A1[EA02]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 34093                                  	;cmp	ax,[es:di+47]
 34094 0000702E 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 34095                                  
 34096                                  ;skip_win386:
 34097 00007032 58                      	pop	ax
 34098                                  	
 34099 00007033 7403                    	jz	short co_ret_label
 34100                                  	
 34101                                  	;mov	al,6
 34102 00007035 B006                    	mov	al,error_invalid_handle
 34103 00007037 F9                      	stc
 34104                                  
 34105                                  co_ret_label:
 34106 00007038 C3                      	retn
 34107                                  
 34108                                  ;============================================================================
 34109                                  ; FILE.ASM, MSDOS 6.0, 1991
 34110                                  ;============================================================================
 34111                                  ; 14/07/2018 - Retro DOS v3.0
 34112                                  
 34113                                  ; MSDOS 2.11
 34114                                  ;BREAK <$Open - open a file handle>
 34115                                  ;----------------------------------------------------------------------------
 34116                                  ;   Assembler usage:
 34117                                  ;           LDS     DX, Name
 34118                                  ;           MOV     AH, Open
 34119                                  ;           MOV     AL, access
 34120                                  ;           INT     int_command
 34121                                  ;
 34122                                  ;       ACCESS          Function
 34123                                  ;       ------          --------
 34124                                  ;       open_for_read   file is opened for reading
 34125                                  ;       open_for_write  file is opened for writing
 34126                                  ;       open_for_both   file is opened for both reading and writing.
 34127                                  ;
 34128                                  ;   Error returns:
 34129                                  ;           AX = error_invalid_access
 34130                                  ;              = error_file_not_found
 34131                                  ;              = error_access_denied
 34132                                  ;              = error_too_many_open_files
 34133                                  ;----------------------------------------------------------------------------
 34134                                  
 34135                                  ; MSDOS 6.0
 34136                                  ;	BREAK <$Open - open a file from a path string>
 34137                                  ;----------------------------------------------------------------------------
 34138                                  ;
 34139                                  ;**	$OPen - Open a File
 34140                                  ;
 34141                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 34142                                  ;	file and and returns a handle
 34143                                  ;
 34144                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 34145                                  ;		(AL) = open mode
 34146                                  ;	EXIT	'C' clear if OK
 34147                                  ;		  (ax) = file handle
 34148                                  ;		'C' set if error
 34149                                  ;		  (ax) = error code
 34150                                  ;	USES	all
 34151                                  ;
 34152                                  ;----------------------------------------------------------------------------
 34153                                  
 34154                                  _$OPEN:       
 34155 00007039 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 34156                                  _$Open2:
 34157                                  	;mov	ch,16h
 34158 0000703B B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 34159 0000703D E84502                  	call	SetAttrib
 34160 00007040 B9[7C37]                	mov	cx,DOS_OPEN
 34161                                  
 34162                                  	;xor	ah,ah  ; MSDOS 3.3
 34163                                  
 34164 00007043 50                      	push	ax
 34165                                  
 34166                                  ;*	General file open/create code. The $CREATE call and the various
 34167                                  ;	$OPEN calls all come here.
 34168                                  ;
 34169                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 34170                                  ;	path names, etc., and then dispatch to our individual handlers.
 34171                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 34172                                  ;
 34173                                  ;	(TOS) = create mode
 34174                                  ;	(CX) = address of routine to call to do actual function
 34175                                  ;	(DS:DX) = ASCIZ name
 34176                                  ;	SAttrib = Attribute mask
 34177                                  
 34178                                  ;	Get a free SFT and mark it "being allocated"
 34179                                  
 34180                                  AccessFile:
 34181 00007044 E81EB0                  	call	EcritSFT
 34182 00007047 E806F8                  	call	SFNFree			; get a free sfn
 34183 0000704A E820B0                  	call	LcritSFT
 34184 0000704D 7214                    	jc	short OpenFailJ		; oops, no free sft's
 34185 0000704F 36891E[4205]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 34186 00007054 36893E[3605]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 34187 00007059 368C06[3805]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 34188                                  
 34189                                  ;	Find a free area in the user's JFN table.
 34190                                  
 34191 0000705E E8DCF7                  	call	JFNFree			; get a free jfn
 34192 00007061 7303                    	jnc	short SaveJFN
 34193                                  OpenFailJ:
 34194 00007063 E98100                  	JMP	OpenFail		; there were free JFNs... try SFN
 34195                                  
 34196                                  SaveJFN:
 34197 00007066 36893E[4605]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 34198 0000706B 368C06[4805]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 34199 00007070 36891E[4405]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 34200                                  
 34201                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 34202                                  ;	reusing the same JFN.
 34203                                  
 34204 00007075 368B1E[4205]            	MOV	BX,[ss:SFN]					;smr;SS Override
 34205 0000707A 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 34206 0000707D 89D6                    	MOV	SI,DX			; get name in appropriate place
 34207 0000707F BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34208 00007082 51                      	push	cx			; save routine to call
 34209 00007083 E8CBF9                  	call	TransPath		; convert the path
 34210 00007086 5B                      	pop	bx			; (bx) = routine to call
 34211                                  
 34212 00007087 36C536[3605]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 34213 0000708C 720A                    	JC	short OpenCleanJ	; no error, go and open file
 34214 0000708E 36803E[1505]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 34215 00007094 7404                    	JZ	short SetSearch
 34216                                  	;mov	al,2
 34217 00007096 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 34218                                  OpenCleanJ:
 34219 00007098 EB3E                    	JMP	short OpenClean
 34220                                  
 34221                                  SetSearch:
 34222 0000709A 58                      	pop	ax			; Mode (Open), Attributes (Create)
 34223                                  
 34224                                  ;	We need to get the new inheritance bits.
 34225                                  
 34226 0000709B 31C9                    	xor	cx,cx
 34227                                  	; MSDOS 6.0
 34228                                  	;mov	[si+2],cx ; 0
 34229 0000709D 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 34230                                  	;mov    [si+51],cx ; 0
 34231 000070A0 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 34232                                  	;
 34233 000070A3 81FB[7C37]              	CMP	BX,DOS_OPEN
 34234 000070A7 7509                    	JNZ	short _DoOper
 34235                                  	;test   al,80h
 34236 000070A9 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 34237 000070AB 7405                    	JZ	short _DoOper ; 10/08/2018
 34238 000070AD 247F                    	AND	AL,7Fh			; mask off inherit bit
 34239                                  	;mov	cx,1000h
 34240 000070AF B90010                  	MOV	CX,sf_no_inherit
 34241                                  _DoOper:
 34242                                  	;; MSDOS 3.3
 34243                                  	;;mov	word [si+2], 0
 34244                                  	;;mov	word [si+33h], 0
 34245                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 34246                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 34247                                  
 34248                                  	; MSDOS 6.0
 34249                                  ;**	Check if this is an extended open. If so you must set the
 34250                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 34251                                  ;	Set_EXT_mode in creat.asm
 34252                                  
 34253                                  	; MSDOS 6.0
 34254                                  	;;SAVE	<di, es>                ;M022 conditional removed here
 34255                                  	;push	di
 34256                                  	;push	es
 34257                                  	;push	ds
 34258                                  	;pop	es
 34259                                  	;push	si
 34260                                  	;pop	di			; (es:di) = SFT address
 34261                                  	;call	Set_EXT_mode
 34262                                  	;;RESTORE <es, di>
 34263                                  	;pop	es
 34264                                  	;pop	di
 34265                                  
 34266                                  	;Context DS
 34267 000070B2 16                      	push	ss
 34268 000070B3 1F                      	pop	ds	
 34269                                  
 34270 000070B4 51                      	push	cx
 34271 000070B5 FFD3                    	CALL	BX			; blam!
 34272 000070B7 59                      	pop	cx
 34273 000070B8 C536[3605]              	LDS	SI,[THISSFT]
 34274                                  	;JC	short OpenE2		;AN000;FT. chek extended open hooks first
 34275 000070BC 721B                    	jc	short OpenE ; MSDOS 3.3
 34276                                  
 34277                                  ;	The SFT was successfully opened. Remove busy mark.
 34278                                  
 34279                                  OpenOK:
 34280                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 34281 000070BE C7040100                	mov	word [SI],1
 34282                                  	;or	[SI+5],cx
 34283 000070C2 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 34284                                  
 34285                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 34286                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 34287                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 34288                                  ;
 34289                                  ; Since this is only relevant on sharer systems, we stick this code into the
 34290                                  ; sharer.
 34291                                  
 34292 000070C5 36A1[4405]              	MOV	AX,[ss:JFN]				;smr;SS Override
 34293 000070C9 36FF1E[8C00]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 34294                                  
 34295 000070CE 36C706[4205]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 34296 000070D5 E925A6                  	jmp	SYS_RET_OK		; bye with no errors
 34297                                  
 34298                                  	; MSDOS 6.0
 34299                                  ;Extended Open hooks check
 34300                                  ;OpenE2:					;AN000;;EO.
 34301                                  ;	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 34302                                  ;	JNZ	short OpenE		;AN000;;EO. no.
 34303                                  ;	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 34304                                  
 34305                                  ;	Extended Open hooks check
 34306                                  ;
 34307                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 34308                                  
 34309                                  OpenClean:
 34310 000070D8 5B                      	pop	bx			; clean off stack
 34311                                  OpenE:
 34312                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 34313 000070D9 C7040000                	mov	word [SI],0
 34314 000070DD 36C536[4605]            	LDS	SI,[ss:PJFN]				;smr;SS Override
 34315 000070E2 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 34316 000070E5 EB02                    	JMP	SHORT OpenCritLeave
 34317                                  
 34318                                  OpenFail:
 34319 000070E7 FB                      	STI
 34320 000070E8 59                      	pop	cx			; Clean stack
 34321                                  OpenCritLeave:
 34322 000070E9 36C706[4205]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 34323                                  
 34324                                  	; MSDOS 6.0
 34325                                  ;; File Tagging DOS 4.00
 34326                                  ;	CMP	[SS:EXTERR],error_Code_Page_Mismatched 
 34327                                  ;				;AN000;;FT. code page mismatch;smr;SS Override
 34328                                  ;	JNZ	short NORERR	  	;AN000;;FT. no
 34329                                  ;	jmp	From_GetSet		;AN000;;FT. yes
 34330                                  ;NORERR: 				;AN000;
 34331                                  ;; File Tagging DOS 4.00
 34332                                  
 34333 000070F0 E913A6                  	jmp	SYS_RET_ERR		; no free, return error
 34334                                  
 34335                                  ; MSDOS 2.11
 34336                                  ;BREAK <$CREAT - creat a new file and open him for input>
 34337                                  ;----------------------------------------------------------------------------
 34338                                  ;   Assembler usage:
 34339                                  ;           LDS     DX, name
 34340                                  ;           MOV     AH, Creat
 34341                                  ;           MOV     CX, access
 34342                                  ;           INT     21h
 34343                                  ;       ; AX now has the handle
 34344                                  ;
 34345                                  ;   Error returns:
 34346                                  ;           AX = error_access_denied
 34347                                  ;              = error_path_not_found
 34348                                  ;              = error_too_many_open_files
 34349                                  ;----------------------------------------------------------------------------
 34350                                  
 34351                                  ; MSDOS 6.0
 34352                                  ;	BREAK <$Creat - create a brand-new file>
 34353                                  ;----------------------------------------------------------------------------
 34354                                  ;
 34355                                  ;**	$Creat - Create a File
 34356                                  ;
 34357                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 34358                                  ;	initial attributes contained in CX
 34359                                  ;
 34360                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 34361                                  ;		(CX) = initial attributes
 34362                                  ;	EXIT	'C' set if error
 34363                                  ;		  (ax) = error code
 34364                                  ;		'C' clear if OK
 34365                                  ;		  (ax) = file handle
 34366                                  ;	USES	all
 34367                                  ;
 34368                                  ;----------------------------------------------------------------------------
 34369                                  
 34370                                  _$CREAT:
 34371 000070F3 51                      	push	cx			; Save attributes on stack
 34372 000070F4 B9[E636]                	mov	CX,DOS_CREATE		; routine to call
 34373                                  AccessSet:
 34374                                  	;mov	byte [ss:SATTRIB],6
 34375 000070F7 36C606[0805]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 34376                                  	; 10/08/2018
 34377 000070FD E944FF                  	JMP	AccessFile		; use good ol' open
 34378                                  
 34379                                  
 34380                                  ; MSDOS 6.0 (MSDOS 3.3)
 34381                                  ;	BREAK <$CHMOD - change file attributes>
 34382                                  ;----------------------------------------------------------------------------
 34383                                  ;
 34384                                  ;**	$CHMOD - Change File Attributes
 34385                                  ;
 34386                                  ;   Assembler usage:
 34387                                  ;	    LDS     DX, name
 34388                                  ;	    MOV     CX, attributes
 34389                                  ;	    MOV     AL,func (0=get, 1=set)
 34390                                  ;	    INT     21h
 34391                                  ;   Error returns:
 34392                                  ;	    AX = error_path_not_found
 34393                                  ;	    AX = error_access_denied
 34394                                  ;
 34395                                  ;----------------------------------------------------------------------------
 34396                                  
 34397                                  _$CHMOD:
 34398                                  	; 05/08/2018 - Retro DOS v3.0
 34399                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 34400 00007100 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34401 00007103 50                      	push	ax
 34402 00007104 51                      	push	cx			; save function and attributes
 34403 00007105 89D6                    	MOV	SI,DX			; get things in appropriate places
 34404 00007107 E84BF9                  	call	TransPathSet		; get correct path
 34405 0000710A 59                      	pop	cx
 34406 0000710B 58                      	pop	ax			; and get function and attrs back
 34407 0000710C 7235                    	JC	short ChModErr		; errors get mapped to path not found
 34408 0000710E 16                      	push	ss			; set up for later possible calls
 34409 0000710F 1F                      	pop	ds
 34410 00007110 803E[1505]FF            	CMP	byte [CMETA],-1
 34411 00007115 752C                    	JNZ	short ChModErr
 34412                                  	;mov	byte [SATTRIB],16h
 34413 00007117 C606[0805]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 34414 0000711C 2C01                    	SUB	AL,1			; fast way to discriminate
 34415 0000711E 720B                    	JB	short ChModGet		; 0 -> go get value
 34416 00007120 7417                    	JZ	short ChModSet		; 1 -> go set value
 34417                                  	;mov	byte [EXTERR_LOCUS],1
 34418 00007122 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34419                                  	;mov	al,1
 34420 00007127 B001                    	mov	al,error_invalid_function ; bad value
 34421                                  	;jmp	SYS_RET_ERR
 34422 00007129 EB1A                    	jmp	short ChModE	
 34423                                  ChModGet:
 34424 0000712B E8BFC4                  	call	GET_FILE_INFO		; suck out the ol' info
 34425 0000712E 7215                    	JC	short ChModE		; error codes are already set for ret
 34426 00007130 E8D8A4                  	call	Get_User_Stack		; point to user saved vaiables
 34427                                  	;mov	[SI+4],ax
 34428 00007133 894404                  	MOV	[SI+user_env.user_CX],AX  ; return the attributes
 34429                                  	;jmp	SYS_RET_OK		; say sayonara
 34430                                  	; 26/07/2019
 34431 00007136 E9C7A5                  	jmp	SYS_RET_OK_clc
 34432                                  ChModSet:
 34433 00007139 89C8                    	MOV	AX,CX			; get attrs in position
 34434 0000713B E810C5                  	call	SET_FILE_ATTRIBUTE	; go set
 34435 0000713E 7205                    	JC	short ChModE		; errors are set
 34436 00007140 E9BAA5                  	jmp	SYS_RET_OK
 34437                                  ChModErr:
 34438                                  	;mov	al, 3
 34439 00007143 B003                    	mov	al,error_path_not_found
 34440                                  ChModE:
 34441 00007145 E9BEA5                  	jmp	SYS_RET_ERR
 34442                                  
 34443                                  ;	BREAK <$UNLINK - delete a file entry>
 34444                                  ;----------------------------------------------------------------------------
 34445                                  ;
 34446                                  ;**	$UNLINK - Delete a File
 34447                                  ;
 34448                                  ;
 34449                                  ;	Assembler usage:
 34450                                  ;	    LDS     DX, name
 34451                                  ;	    IF VIA SERVER DOS CALL
 34452                                  ;	     MOV     CX,SEARCH_ATTRIB
 34453                                  ;	    MOV     AH, Unlink
 34454                                  ;	    INT     21h
 34455                                  ;
 34456                                  ;	ENTRY	(ds:dx) = path name
 34457                                  ;		(cx) = search_attribute, if via server_dos
 34458                                  ;	EXIT	'C' clear if no error
 34459                                  ;		'C' set if error
 34460                                  ;		  (ax) = error code
 34461                                  ;			= error_file_not_found
 34462                                  ;			= error_access_denied
 34463                                  ;
 34464                                  ;----------------------------------------------------------------------------
 34465                                  
 34466                                  _$UNLINK:
 34467 00007148 51                      	push	cx			; Save possible CX input parm
 34468 00007149 89D6                    	MOV	SI,DX			; Point at input string
 34469 0000714B BF[6003]                	MOV	DI,OPENBUF		; temp spot for path
 34470 0000714E E804F9                  	call	TransPathSet		; go get normalized path
 34471 00007151 59                      	pop	cx
 34472 00007152 72EF                    	JC	short ChModErr		; badly formed path
 34473 00007154 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 34474 0000715A 750F                    	JNZ	short NotFound
 34475 0000715C 16                      	push	ss
 34476 0000715D 1F                      	pop	ds
 34477                                  	;mov	ch,6
 34478 0000715E B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 34479 00007160 E82201                  	call	SetAttrib
 34480 00007163 E804C1                  	call	DOS_DELETE		; remove that file
 34481 00007166 7205                    	JC	short UnlinkE 		; error is there
 34482 00007168 E992A5                  	jmp	SYS_RET_OK		; okey doksy
 34483                                  NotFound:
 34484                                  	;mov	al, 3
 34485 0000716B B003                    	MOV	AL,error_path_not_found
 34486                                  UnlinkE:
 34487 0000716D E996A5                  	jmp	SYS_RET_ERR		; bye
 34488                                  
 34489                                  ;BREAK <$RENAME - move directory entries around>
 34490                                  ;----------------------------------------------------------------------------
 34491                                  ;
 34492                                  ;   Assembler usage:
 34493                                  ;	    LDS     DX, source
 34494                                  ;	    LES     DI, dest
 34495                                  ;	    IF VIA SERVER DOS CALL
 34496                                  ;	     MOV     CX,SEARCH_ATTRIB
 34497                                  ;	    MOV     AH, Rename
 34498                                  ;	    INT     21h
 34499                                  ;
 34500                                  ;   Error returns:
 34501                                  ;	    AX = error_file_not_found
 34502                                  ;	       = error_not_same_device
 34503                                  ;	       = error_access_denied
 34504                                  ;
 34505                                  ;----------------------------------------------------------------------------
 34506                                  
 34507                                  _$RENAME:
 34508                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34509 00007170 51                      	push	cx
 34510 00007171 1E                      	push	ds
 34511 00007172 52                      	push	dx			; save source and possible CX arg
 34512 00007173 06                      	PUSH	ES
 34513 00007174 1F                      	POP	DS			; move dest to source
 34514 00007175 89FE                    	MOV	SI,DI			; save for offsets
 34515 00007177 BF[E003]                	MOV	DI,RENBUF
 34516 0000717A E8D8F8                  	call	TransPathSet		; munge the paths
 34517 0000717D 36FF36[4A05]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 34518 00007182 368F06[4C05]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 34519 00007187 5E                      	pop	si
 34520 00007188 1F                      	pop	ds
 34521 00007189 59                      	pop	cx			; get back source and possible CX arg
 34522                                  epjc2:	
 34523 0000718A 72B7                    	JC	short ChModErr		; get old error
 34524 0000718C 36803E[1505]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 34525 00007192 75D7                    	JNZ	short NotFound
 34526 00007194 51                      	push	cx			; Save possible CX arg
 34527 00007195 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34528 00007198 E8BAF8                  	call	TransPathSet		; wham
 34529 0000719B 59                      	pop	cx
 34530 0000719C 72EC                    	JC	short epjc2
 34531 0000719E 16                      	push	ss
 34532 0000719F 1F                      	pop	ds
 34533 000071A0 803E[1505]FF            	CMP	byte [CMETA],-1
 34534 000071A5 72C4                    	JB	short NotFound
 34535                                  
 34536                                  	; MSDOS 6.0
 34537 000071A7 FF36[3A05]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 34538 000071AB FF36[3C05]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 34539 000071AF BF[6003]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 34540 000071B2 16                      	PUSH	SS			   ;AN000;;MS.
 34541 000071B3 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 34542 000071B4 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 34543                                  rnloop: 				   ;AN000;
 34544 000071B6 E810F8                  	call	GetCDSFromDrv		   ;AN000;;MS.
 34545 000071B9 7211                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 34546 000071BB E86FAD                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 34547 000071BE 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 34548 000071C0 FEC0                    	INC	AL			   ;AN000;;MS.	next
 34549 000071C2 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 34550                                  rnerr:					   ;AN000;
 34551 000071C4 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 34552                                  	;error	error_current_directory    ;AN000;;MS.
 34553 000071C7 B010                    	mov	al,error_current_directory 
 34554 000071C9 E93AA5                  	jmp	SYS_RET_ERR
 34555                                  dorn:					   ;AN000;
 34556 000071CC 368F06[3C05]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34557 000071D1 368F06[3A05]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34558                                  
 34559 000071D6 16                      	push	ss
 34560 000071D7 1F                      	pop	ds
 34561                                  
 34562                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34563                                  	;mov	ch,16h
 34564 000071D8 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 34565                                  					; rename appropriate files
 34566 000071DA E8A800                  	call	SetAttrib
 34567 000071DD E835C2                  	call	DOS_RENAME		; do the deed
 34568 000071E0 728B                    	JC	short UnlinkE 		; errors
 34569                                  
 34570 000071E2 E918A5                  	jmp	SYS_RET_OK
 34571                                  
 34572                                  
 34573                                  ; 14/07/2018 - Retro DOS v3.0
 34574                                  ; MSDOS 3.3 (& MSDOS 6.0)
 34575                                  
 34576                                  ;Break <$CreateNewFile - Create a new directory entry>
 34577                                  ;----------------------------------------------------------------------------
 34578                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 34579                                  ;	was no previous directory entry, and fail if a directory entry with
 34580                                  ;	the same name existed previously.
 34581                                  ;
 34582                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 34583                                  ;		CX contains default file attributes
 34584                                  ;   Outputs:	Carry Clear:
 34585                                  ;		    AX has file handle opened for read/write
 34586                                  ;		Carry Set:
 34587                                  ;		    AX has error code
 34588                                  ;   Registers modified: All
 34589                                  ;----------------------------------------------------------------------------
 34590                                  
 34591                                  _$CreateNewFile:
 34592 000071E5 51                      	push	cx			; Save attributes on stack
 34593 000071E6 B9[7737]                	MOV	CX,DOS_Create_New	; routine to call
 34594 000071E9 E90BFF                  	JMP	AccessSet		; use good ol' open
 34595                                  
 34596                                  ;**	BinToAscii - convert a number to a string.
 34597                                  ;----------------------------------------------------------------------------
 34598                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 34599                                  ;	This routine is used to generate temp file names so we don't spend
 34600                                  ;	the time and code needed for a true hex number, we just use
 34601                                  ;	A thorugh O.
 34602                                  ;
 34603                                  ;	ENTRY	(ax) = value
 34604                                  ;		(es:di) = destination
 34605                                  ;	EXIT	(es:di) updated by 4
 34606                                  ;	USES	cx, di, flags
 34607                                  ;----------------------------------------------------------------------------
 34608                                  
 34609                                  ; MSDOS 3.3
 34610                                  ;BinToAscii:
 34611                                  ;	mov     cx,4
 34612                                  ;bta5:
 34613                                  ;	push    cx
 34614                                  ;	mov     cl,4
 34615                                  ;	rol     ax,cl
 34616                                  ;	push    ax
 34617                                  ;	and     al,0Fh
 34618                                  ;	add     al,'0'
 34619                                  ;	cmp     al,'9'
 34620                                  ;	jbe     short bta6
 34621                                  ;	add     al,7
 34622                                  ;bta6: 
 34623                                  ;	stosb
 34624                                  ;	pop     ax
 34625                                  ;	pop     cx
 34626                                  ;	loop    bta5
 34627                                  ;	retn
 34628                                  
 34629                                  ; MSDOS 6.0
 34630                                  BinToAscii:
 34631 000071EC B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 34632                                  bta5:	
 34633 000071EF D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 34634 000071F1 50                      	push	ax			; preserve remainder of digits
 34635 000071F2 240F                    	AND	AL,0Fh			; grab low nibble
 34636 000071F4 0441                    	ADD	AL,'A'			; turn into ascii
 34637 000071F6 AA                      	STOSB				; drop in the character
 34638 000071F7 58                      	pop	ax			; (ax) = shifted number
 34639 000071F8 FECD                    	dec	ch
 34640 000071FA 75F3                    	jnz	short bta5		; process 4 digits
 34641 000071FC C3                      	retn
 34642                                  
 34643                                  ;Break	<$CreateTempFile - create a unique name>
 34644                                  ;----------------------------------------------------------------------------
 34645                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 34646                                  ;	Method used is to get the current time, convert to a name and attempt
 34647                                  ;	a create new.  Repeat until create new succeeds.
 34648                                  ;
 34649                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 34650                                  ;		CX  contains default attributes
 34651                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 34652                                  ;		AX has handle
 34653                                  ;   Registers modified: all
 34654                                  ;----------------------------------------------------------------------------
 34655                                  
 34656                                  _$CreateTempFile:
 34657                                  	;Enter
 34658 000071FD 55                      	push	bp
 34659 000071FE 89E5                    	mov	bp,sp
 34660                                  
 34661                                  	;LocalVar    EndPtr,DWORD
 34662                                  	;LocalVar    FilPtr,DWORD
 34663                                  	;LocalVar    Attr,WORD
 34664                                  
 34665 00007200 83EC0A                  	sub	sp,10
 34666                                  
 34667                                  	;test	cx,0FFD8h
 34668 00007203 F7C1D8FF                	test	CX,~attr_changeable
 34669 00007207 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 34670                                  ;
 34671                                  ; We need this "hook" here to detect these cases (like user sets one both of
 34672                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 34673                                  ; below.  The code loops on error_access_denied, but if one of the non
 34674                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 34675                                  ; infinite because CreateNewFile will fail with access_denied always.  Thus we
 34676                                  ; need to detect these cases before getting to the loop.
 34677                                  ;
 34678                                  	;mov	ax, 5
 34679 00007209 B80500                  	MOV	AX,error_access_denied
 34680 0000720C EB6B                    	JMP	SHORT SETTMPERR
 34681                                  
 34682                                  OKatts:
 34683                                  	;MOV	attr,CX 		; save attribute
 34684 0000720E 894EF6                  	mov     [bp-10],cx
 34685                                  	;MOV	FilPtrL,DX		; pointer to file
 34686 00007211 8956F8                  	mov	[bp-8],dx
 34687                                  	;MOV	FilPtrH,DS
 34688 00007214 8C5EFA                  	mov	[bp-6],ds
 34689                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 34690 00007217 8C5EFE                  	mov	[bp-2],ds
 34691 0000721A 1E                      	PUSH	DS
 34692 0000721B 07                      	POP	ES			; destination for nul search
 34693 0000721C 89D7                    	MOV	DI,DX
 34694 0000721E 89F9                    	MOV	CX,DI
 34695 00007220 F7D9                    	NEG	CX			; number of bytes remaining in segment
 34696                                  	; MSDOS 6.0
 34697 00007222 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 34698 00007224 7501                    	JNZ	short okok		;AN000;MS. no
 34699                                  	;MOV	CX,-1			;AN000;MS.
 34700 00007226 49                      	dec	cx  ; mov cx,-1
 34701                                  	;
 34702                                  okok:					;AN000;
 34703 00007227 31C0                    	XOR	AX,AX			;AN000;
 34704 00007229 F2AE                    	REPNZ	SCASB			;AN000;
 34705                                  					;AN000;
 34706 0000722B 4F                      	DEC	DI			; point back to the null
 34707 0000722C 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 34708 00007230 E81AE4                  	call	PATHCHRCMP		; Is it a path separator?
 34709 00007233 7403                    	JZ	short SETENDPTR		; Yes
 34710                                  STOREPTH:
 34711 00007235 B05C                    	MOV	AL,'\'
 34712 00007237 AA                      	STOSB				; Add a path separator (and INC DI)
 34713                                  SETENDPTR:
 34714                                  	;MOV	EndPtrL,DI		; pointer to the tail
 34715 00007238 8856FC                  	mov	[bp-4],dl
 34716                                  CreateLoop:
 34717 0000723B 16                      	push	ss			; let ReadTime see variables
 34718 0000723C 1F                      	pop	ds
 34719 0000723D 55                      	push	bp
 34720 0000723E E89CA6                  	call	READTIME		; go get time
 34721 00007241 5D                      	pop	bp
 34722                                  ;
 34723                                  ; Time is in CX:DX.  Go drop it into the string.
 34724                                  ;
 34725                                  	;les	di,EndPtr		; point to the string
 34726 00007242 C47EFC                  	les	di,[BP-4]
 34727 00007245 89C8                    	mov	ax,cx
 34728 00007247 E8A2FF                  	call	BinToAscii		; store upper word
 34729 0000724A 89D0                    	mov	ax,dx
 34730 0000724C E89DFF                  	call	BinToAscii		; store lower word
 34731 0000724F 30C0                    	xor	al,al
 34732 00007251 AA                      	STOSB				; nul terminate
 34733                                  	;LDS	DX,FilPtr		; get name
 34734 00007252 C556F8                  	lds	dx,[bp-8]
 34735                                  	;MOV	CX,Attr 		; get attr
 34736 00007255 8B4EF6                  	mov	cx,[bp-10]
 34737 00007258 55                      	push	bp
 34738 00007259 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 34739 0000725C 5D                      	pop	bp
 34740 0000725D 731B                    	JNC	short CreateDone	; failed, go try again
 34741                                  ;
 34742                                  ; The operation failed and the error has been mapped in AX.  Grab the extended
 34743                                  ; error and figure out what to do.
 34744                                  ;
 34745                                  	;; MSDOS 3.3			; M049 - start
 34746                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 34747                                  ;;	cmp	al,error_file_exists
 34748                                  ;;	jz	short CreateLoop	; file existed => try with new name
 34749                                  ;;	cmp	al,error_access_denied
 34750                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 34751                                  
 34752                                  	; MSDOS 6.0
 34753                                  	;cmp	al,50h
 34754 0000725F 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 34755 00007261 74D8                    	JZ	short CreateLoop	; Y: try again
 34756                                  	;cmp	al,5
 34757 00007263 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 34758 00007265 7512                    	JNZ	short SETTMPERR		; N: Error out
 34759                                  					; Y: Check to see if we got this due
 34760                                  					;    to the network drive. Note that
 34761                                  					;    the redir will set the exterr
 34762                                  					;    to error_cannot_make if this is 
 34763                                  					;    so. 
 34764 00007267 36803E[D202]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 34765                                  					; See if it's REALLY an att mismatch
 34766 0000726D 740A                    	je	short SETTMPERR		; no, network error, stop
 34767                                  ;M070
 34768                                  ; If the user failed on an I24, we do not want to try again
 34769                                  ;
 34770 0000726F 36803E[D202]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 34771 00007275 7402                    	je	short SETTMPERR		;yes, do not try again ;M070
 34772                                  
 34773 00007277 EBC2                    	jmp	short CreateLoop	;attr mismatch, try again ;M070
 34774                                  
 34775                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 34776                                  					; M049 - end
 34777                                  SETTMPERR:
 34778 00007279 F9                      	STC
 34779                                  CreateDone:
 34780                                  	;Leave
 34781 0000727A 89EC                    	mov	sp,bp
 34782 0000727C 5D                      	pop	bp
 34783 0000727D 7203                    	JC	short CreateFail
 34784 0000727F E97BA4                  	jmp	SYS_RET_OK		; success!
 34785                                  CreateFail:
 34786 00007282 E981A4                  	jmp	SYS_RET_ERR
 34787                                  
 34788                                  ;
 34789                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 34790                                  ;   (CH) or to the value in CL if the current system call is through
 34791                                  ;   serverdoscall.
 34792                                  ;
 34793                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 34794                                  ;		fSharing == TRUE => set sattrib to CL
 34795                                  ;   Outputs:	none
 34796                                  ;   Registers changed:	CX
 34797                                  
 34798                                  SetAttrib:
 34799 00007285 36F606[0D05]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 34800 0000728B 7502                    	jnz	short Set
 34801 0000728D 88E9                    	mov	cl,ch
 34802                                  Set:
 34803 0000728F 36880E[0805]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 34804 00007294 C3                      	retn
 34805                                  
 34806                                  ; 14/07/2018 - Retro DOS v3.0
 34807                                  ; MSDOS 6.0
 34808                                  
 34809                                  ;Break	<Extended_Open- Extended open the file>
 34810                                  ;----------------------------------------------------------------------------
 34811                                  ; Input: AL= 0 reserved  AH=6CH
 34812                                  ;	 BX= mode
 34813                                  ;	 CL= create attribute  CH=search attribute (from server)
 34814                                  ;	 DX= flag
 34815                                  ;	 DS:SI = file name
 34816                                  ;	 ES:DI = parm list
 34817                                  ;			   DD  SET EA list (-1) null
 34818                                  ;			   DW  n  parameters
 34819                                  ;			   DB  type (TTTTTTLL)
 34820                                  ;			   DW  IOMODE
 34821                                  ; Function: Extended Open
 34822                                  ; Output: carry clear
 34823                                  ;		     AX= handle
 34824                                  ;		     CX=1 file opened
 34825                                  ;			2 file created/opened
 34826                                  ;			3 file replaced/opened
 34827                                  ;	  carry set: AX has error code
 34828                                  ;----------------------------------------------------------------------------
 34829                                  
 34830                                  ;_$Extended_Open:			  ;AN000;
 34831                                  ;	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 34832                                  ;	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 34833                                  ;	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 34834                                  ;	TEST	DX,reserved_bits_mask	  ;AN000;EO. reserved bits 0  ?
 34835                                  ;	JNZ	short ext_inval2	  ;AN000;EO. no
 34836                                  ;	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 34837                                  ;	CMP	DL,0			  ;AN000;EO. all fail ?
 34838                                  ;	JZ	short ext_inval2	  ;AN000;EO. yes, error
 34839                                  ;	AND	DL,exists_mask		  ;AN000;EO. get exists action byte
 34840                                  ;	CMP	DL,2			  ;AN000;EO, > 02
 34841                                  ;	JA	short ext_inval2	  ;AN000;EO. yes ,error
 34842                                  ;	AND	AH,not_exists_mask	  ;AN000;EO. get no exists action byte
 34843                                  ;	CMP	AH,10H			  ;AN000;EO. > 10
 34844                                  ;	JA	short ext_inval2	  ;AN000;EO. yes error
 34845                                  ;
 34846                                  ;	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 34847                                  ;	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 34848                                  ;	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 34849                                  ;	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 34850                                  ;	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 34851                                  ;	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 34852                                  ;	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 34853                                  ;	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 34854                                  ;	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 34855                                  ;	MOV	AX,BX			  ;AN000;EO. ax= mode
 34856                                  ;	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 34857                                  ;ext_inval2:				  ;AN000;;EO.
 34858                                  ;	mov	al,error_invalid_function ;AN000;EO.. invalid function
 34859                                  ;	jmp	SYS_RET_ERR
 34860                                  ;error_return:				  ;AN000;EO.
 34861                                  ;	retn				  ;AN000;EO.. return with error
 34862                                  ;goopen2:				  ;AN000;
 34863                                  ;	TEST	BX,int_24_error 	  ;AN000;EO.. disable INT 24 error ?
 34864                                  ;	JZ	short goopen		  ;AN000;EO.. no
 34865                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 34866                                  ;goopen:					  ;AN000;
 34867                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 34868                                  ;	AND	word [SS:EXTOPEN_FLAG],0FFH  ;AN000;EO.create new ?;smr;SS Override
 34869                                  ;	CMP	word [SS:EXTOPEN_FLAG],ext_exists_fail + ext_nexists_create ;AN000;FT.;smr;SS Override
 34870                                  ;	JNZ	short chknext 		  ;AN000;;EO. no
 34871                                  ;	call	_$CreateNewFile		  ;AN000;;EO. yes
 34872                                  ;	JC	short error_return	  ;AN000;;EO. error
 34873                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34874                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34875                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. creted/opened;smr;SS Override
 34876                                  ;	JMP	short setXAttr		  ;AN000;;EO. set XAs
 34877                                  ;ok_return2:
 34878                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34879                                  ;chknext:
 34880                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_exists_open ;AN000;;EO. exists open;smr;SS Override
 34881                                  ;	JNZ	short exist_open	  ;AN000;;EO. yes
 34882                                  ;	call	_$CREAT			  ;AN000;;EO. must be replace open
 34883                                  ;	JC	short error_return	  ;AN000;;EO. return with error
 34884                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34885                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34886                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. prsume create/open;smr;SS Override
 34887                                  ;	TEST	byte [SS:EXTOPEN_ON],ext_file_not_exists ;AN000;;EO. file not exists ?;smr;SS Override
 34888                                  ;	JNZ	short setXAttr		  ;AN000;;EO. no
 34889                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_replaced_opened ;AN000;;EO. replaced/opened;smr;SS Override
 34890                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34891                                  ;error_return2:
 34892                                  ;	STC 				  ; Set Carry again to flag error ;AN001;
 34893                                  ;	retn				  ;AN000;;EO. return with error
 34894                                  ;					  ;AN000;
 34895                                  ;exist_open:				  ;AN000;
 34896                                  ;	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 34897                                  ;	jz	short noserver		  ;AN000;;EO. no
 34898                                  ;	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 34899                                  ;noserver:
 34900                                  ;	call	_$Open2			  ;AN000;;EO. do open
 34901                                  ;	JNC	short ext_ok		  ;AN000;;EO.
 34902                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 34903                                  ;	JZ	short error_return2	  ;AN000;;EO. return with error
 34904                                  ;local_extopen:
 34905                                  ;	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 34906                                  ;	JNZ	short error_return2	  ;AN000;;EO. no,
 34907                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_nexists_create;AN000;;EO. want to fail;smr;SS Override
 34908                                  ;	JNZ	short do_creat		  ;AN000;;EO. yes
 34909                                  ;	JMP	short extexit 		  ;AN000;;EO. yes
 34910                                  ;do_creat:
 34911                                  ;	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 34912                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 34913                                  ;	MOV	DX,SI			  ;AN000;;EO.
 34914                                  ;	call	_$CREAT			  ;AN000;;EO. do create
 34915                                  ;	JC	short extexit 		  ;AN000;;EO. error
 34916                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened 
 34917                                  ;					  ;AN000;;EO. is created/opened;smr;SS Override
 34918                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34919                                  ;
 34920                                  ;ext_ok:
 34921                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 34922                                  ;	JZ	short ok_return		  ;AN000;;EO. yes
 34923                                  ;	MOV	[SS:EXTOPEN_FLAG],action_opened ;AN000;;EO.  opened;smr;SS Override
 34924                                  ;setXAttr:
 34925                                  ;	call	Get_User_Stack		  ;AN000;;EO.
 34926                                  ;	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 34927                                  ;	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 34928                                  ;	POP	AX			  ;AN000;;EO.
 34929                                  ;	MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 34930                                  ;
 34931                                  ;ok_return:				  ;AN000;
 34932                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34933                                  ;
 34934                                  ;extexit2:				  ;AN000; ERROR RECOVERY
 34935                                  ;	POP	BX			  ;AN000;EO. close the handle
 34936                                  ;	PUSH	AX			  ;AN000;EO. save error code from set XA
 34937                                  ;	CMP	word [SS:EXTOPEN_FLAG],action_created_opened 
 34938                                  ;					  ;AN000;EO. from create;smr;SS Override
 34939                                  ;	JNZ	short justopen		  ;AN000;EO.
 34940                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 34941                                  ;	LDS	DX,[SI]			  ;AN000;EO.
 34942                                  ;	call	_$UNLINK 		  ;AN000;EO. delete the file
 34943                                  ;	JMP	SHORT reserror		  ;AN000;EO.
 34944                                  ;
 34945                                  ;justopen:				  ;AN000;
 34946                                  ;	call	$CLOSE			  ;AN000;EO. pretend never happend
 34947                                  ;reserror:				  ;AN000;
 34948                                  ;	POP	AX			  ;AN000;EO. restore error code from set XA
 34949                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34950                                  ;
 34951                                  ;ext_file_unfound:			  ;AN000;
 34952                                  ;	MOV	AX,error_file_not_found   ;AN000;EO.
 34953                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34954                                  ;ext_inval:				  ;AN000;
 34955                                  ;	MOV	AX,error_invalid_function ;AN000;EO.
 34956                                  ;extexit:
 34957                                  ;	jmp	SYS_RET_ERR		  ;AN000;EO.
 34958                                  
 34959                                  ;============================================================================
 34960                                  ; LOCK.ASM, MSDOS 6.0, 1991
 34961                                  ;============================================================================
 34962                                  ; 14/07/2018 - Retro DOS v3.0
 34963                                  
 34964                                  ;BREAK <$LockOper - Lock Calls>
 34965                                  
 34966                                  ;
 34967                                  ;   Assembler usage:
 34968                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 34969                                  ;	    MOV     CX, OffsetHigh
 34970                                  ;	    MOV     DX, OffsetLow
 34971                                  ;	    MOV     SI, LengthHigh
 34972                                  ;	    MOV     DI, LengthLow
 34973                                  ;	    MOV     AH, LockOper
 34974                                  ;	    MOV     AL, Request
 34975                                  ;	    INT     21h
 34976                                  ;
 34977                                  ;   Error returns:
 34978                                  ;	    AX = error_invalid_handle
 34979                                  ;	       = error_invalid_function
 34980                                  ;	       = error_lock_violation
 34981                                  ;
 34982                                  ;   Assembler usage:
 34983                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 34984                                  ;
 34985                                  ;				    0? lock all
 34986                                  ;				    8? lock write
 34987                                  ;				    ?2 lock multiple
 34988                                  ;				    ?3 unlock multiple
 34989                                  ;				    ?4 lock/read
 34990                                  ;				    ?5 write/unlock
 34991                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 34992                                  ;	    MOV     BX, Handle
 34993                                  ;	    MOV     CX, count or size
 34994                                  ;	    LDS     DX, buffer
 34995                                  ;	    INT     21h
 34996                                  ;
 34997                                  ;   Error returns:
 34998                                  ;	    AX = error_invalid_handle
 34999                                  ;	       = error_invalid_function
 35000                                  ;	       = error_lock_violation
 35001                                  
 35002                                  _$LockOper:
 35003 00007295 3C01                    	CMP	AL,1
 35004 00007297 770C                    	JA	short lock_bad_func
 35005                                  
 35006 00007299 57                      	PUSH	DI			       ; Save LengthLow
 35007 0000729A E864F5                  	call	SFFromHandle		       ; ES:DI -> SFT
 35008 0000729D 7311                    	JNC	short lock_do 		       ; have valid handle
 35009 0000729F 5F                      	POP	DI			       ; Clean stack
 35010                                  	;mov	al,6
 35011 000072A0 B006                    	mov	al,error_invalid_handle
 35012 000072A2 E961A4                  	jmp	SYS_RET_ERR
 35013                                  
 35014                                  lock_bad_func:
 35015                                  	;mov	byte [ss:EXTERR_LOCUS],1
 35016 000072A5 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 35017                                  	;mov	al,1
 35018 000072AB B001                    	mov	al,error_invalid_function
 35019 000072AD E956A4                  	jmp	SYS_RET_ERR
 35020                                  
 35021                                  	; MSDOS 6.0 
 35022                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 35023                                  ; Dead code deleted, MD, 23 Mar 90
 35024                                  
 35025                                  lock_do:
 35026                                  	; MSDOS 3.3
 35027 000072B0 08C0                    	or	al,al
 35028 000072B2 58                      	pop	ax
 35029 000072B3 741E                    	jz	short DOS_Lock
 35030                                  DOS_Unlock:
 35031                                   	;test	word [es:di+5],8000h
 35032 000072B5 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35033 000072BB 7409                    	JZ	short LOCAL_UNLOCK
 35034 000072BD 50                      	push    ax
 35035 000072BE B80B11                  	mov     ax,110Bh
 35036 000072C1 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35037                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35038                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 35039                                  			; SFT DPB field -> DPB of drive containing file
 35040                                  			; Return: CF set error
 35041 000072C3 5B                      	pop     bx
 35042 000072C4 EB05                    	jmp     short ValChk
 35043                                  
 35044                                  LOCAL_UNLOCK:
 35045 000072C6 36FF1E[7800]            	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35046                                  ValChk:
 35047 000072CB 7303                    	JNC	short Lock_OK
 35048                                  lockerror:
 35049 000072CD E936A4                  	jmp	SYS_RET_ERR
 35050                                  Lock_OK:
 35051                                  	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35052 000072D0 E92AA4                  	jmp	SYS_RET_OK
 35053                                  DOS_Lock:
 35054                                  	;test	word [es:di+5],8000h
 35055 000072D3 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35056 000072D9 7407                    	JZ	short LOCAL_LOCK
 35057                                  	;CallInstall NET_XLock,MultNET,10
 35058 000072DB B80A11                  	mov     ax, 110Ah
 35059 000072DE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35060                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35061                                  			; STACK: WORD low word of size, ES:DI -> SFT
 35062                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35063                                  			; Return: CF set error
 35064 000072E0 EBE9                    	JMP	short ValChk
 35065                                  
 35066                                  LOCAL_LOCK:
 35067 000072E2 36FF1E[7400]            	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35068 000072E7 EBE2                    	JMP	short ValChk
 35069                                  
 35070                                  ;lock_do:
 35071                                  ;	; MSDOS 6.0
 35072                                  ;	MOV	BX,AX				; save AX
 35073                                  ;	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 35074                                  ;	MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 35075                                  ;	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 35076                                  ;	POP	CX				; get low length
 35077                                  ;	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 35078                                  ;	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 35079                                  ;	MOV	CX,1				; one range
 35080                                  ;
 35081                                  ;;	PUSH	CS				;
 35082                                  ;;	POP	DS				; DS:DX points to
 35083                                  ;
 35084                                  ;	push	ss
 35085                                  ;	pop	ds
 35086                                  ;
 35087                                  ;	MOV	DX,BP				;   Lock_Buffer
 35088                                  ;	TEST	AL,Unlock_all			; function 1
 35089                                  ;	JNZ	short DOS_Unlock		; yes
 35090                                  ;	JMP	short DOS_Lock			; function 0
 35091                                  ;
 35092                                  ;DOS_Unlock:
 35093                                  ;	;test	word [es:di+5],8000h
 35094                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35095                                  ;	JZ	short LOCAL_UNLOCK
 35096                                  ;	;CallInstall Net_Xlock,MultNET,10
 35097                                  ;	mov     ax, 110Bh
 35098                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35099                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35100                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 35101                                  ;			; SFT DPB field -> DPB of drive containing file
 35102                                  ;			; Return: CF set error
 35103                                  ;
 35104                                  ;	JMP	SHORT ValChk
 35105                                  ;LOCAL_UNLOCK:
 35106                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35107                                  ;ValChk:
 35108                                  ;	JNC	short Lock_OK
 35109                                  ;lockerror:
 35110                                  ;	jmp	SYS_RET_ERR
 35111                                  ;Lock_OK:
 35112                                  ;	MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35113                                  ;	jmp	SYS_RET_OK
 35114                                  ;DOS_Lock:
 35115                                  ;	;test	word [es:di+5],8000h
 35116                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35117                                  ;	JZ	short LOCAL_LOCK
 35118                                  ;	;CallInstall NET_XLock,MultNET,10
 35119                                  ;	mov     ax,110Ah
 35120                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35121                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35122                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 35123                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35124                                  ;			; Return: CF set error
 35125                                  ;	JMP	short ValChk
 35126                                  ;
 35127                                  ;LOCAL_LOCK:
 35128                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35129                                  ;	JMP	short ValChk
 35130                                  
 35131                                  ; 14/07/2018 - Retro DOS v3.0
 35132                                  ; LOC_CHECK
 35133                                  ;MSDOS6.0 (& MSDOS3.3)
 35134                                  
 35135                                  ; Inputs:
 35136                                  ;	Outputs of SETUP
 35137                                  ;	[USER_ID] Set
 35138                                  ;	[PROC_ID] Set
 35139                                  ; Function:
 35140                                  ;	Check for lock violations on local I/O
 35141                                  ;	Retries are attempted with sleeps in between
 35142                                  ; Outputs:
 35143                                  ;    Carry clear
 35144                                  ;	Operation is OK
 35145                                  ;    Carry set
 35146                                  ;	A lock violation detected
 35147                                  ; Outputs of SETUP preserved
 35148                                  
 35149                                  LOCK_CHECK:
 35150 000072E9 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 35151                                  LockRetry:
 35152                                  	; 26/07/2019
 35153 000072ED 53                      	push	bx		; save regs
 35154                                  	;push	ax ; MSDOS 6.0
 35155                                  	; MSDOS 3.3 (& msdos 6.0)
 35156 000072EE FF1E[7C00]              	Call	far [JShare+(8*4)] ; 8 = chk_block
 35157                                  	;pop	ax ; MSDOS 6.0
 35158 000072F2 5B                      	pop	bx		; restrore regs
 35159 000072F3 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 35160                                  LockN:
 35161 000072F5 E88AAC                  	call	Idle		; wait a while
 35162 000072F8 4B                      	DEC	BX		; remember a retry
 35163 000072F9 75F2                    	JNZ	short LockRetry	; more retries left...
 35164 000072FB F9                      	STC
 35165                                  lc_ret_label:
 35166 000072FC C3                      	retn
 35167                                  
 35168                                  ; 14/07/2018 - Retro DOS v3.0
 35169                                  ; LOCK_VIOLATION
 35170                                  ;MSDOS6.0 (& MSDOS3.3)
 35171                                  
 35172                                  ; Inputs:
 35173                                  ;	[THISDPB] set
 35174                                  ;	[READOP] indicates whether error on read or write
 35175                                  ; Function:
 35176                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 35177                                  ; Outputs:
 35178                                  ;	Carry set if user says FAIL, causes error_lock_violation
 35179                                  ;	Carry clear if user wants a retry
 35180                                  ;
 35181                                  ; DS, ES, DI, CX preserved, others destroyed
 35182                                  
 35183                                  LOCK_VIOLATION:
 35184 000072FD 1E                      	PUSH	DS
 35185 000072FE 06                      	PUSH	ES
 35186 000072FF 57                      	PUSH	DI
 35187 00007300 51                      	PUSH	CX
 35188                                  	;mov	ax,21h
 35189 00007301 B82100                  	MOV	AX,error_lock_violation
 35190                                  	;mov	byte [ALLOWED],18h
 35191 00007304 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35192 00007309 C42E[2405]              	LES	BP,[THISDPB]
 35193 0000730D BF0100                  	MOV	DI,1		; Fake some registers
 35194 00007310 89F9                    	MOV	CX,DI
 35195                                  	;mov	dx,[es:bp+11]
 35196 00007312 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 35197 00007316 E834E5                  	call	HARDERR
 35198 00007319 59                      	POP	CX
 35199 0000731A 5F                      	POP	DI
 35200 0000731B 07                      	POP	ES
 35201 0000731C 1F                      	POP	DS
 35202 0000731D 3C01                    	CMP	AL,1
 35203 0000731F 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 35204 00007321 F9                      	STC
 35205 00007322 C3                      	retn
 35206                                  
 35207                                  ; 14/07/2018 - Retro DOS v3.0
 35208                                  
 35209                                  ;	do a retz to return error
 35210                                  
 35211                                  CheckShare:
 35212                                  	; MSDOS 6.0
 35213                                  	;push	ds			;smr;
 35214                                  	;;getdseg <ds>			; ds -> dosdata
 35215                                  	;push	cs
 35216                                  	;pop	ds
 35217                                  	;CMP	byte [fShare],0
 35218                                  	;pop	ds			;smr;
 35219                                  	;retn
 35220                                  	
 35221                                  	; MSDOS 3.3
 35222 00007323 2E803E[B102]00          	cmp	byte [cs:fShare],0
 35223 00007329 C3                      	retn
 35224                                  
 35225                                  ;============================================================================
 35226                                  ; SHARE.ASM, MSDOS 6.0, 1991
 35227                                  ;============================================================================
 35228                                  ; 14/07/2018 - Retro DOS v3.0
 35229                                  
 35230                                  ; SHARE_CHECK
 35231                                  
 35232                                  ; Inputs:
 35233                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 35234                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 35235                                  ;       [WFP_START] has full path of name
 35236                                  ;       [USER_ID] Set
 35237                                  ;       [PROC_ID] Set
 35238                                  ; Function:
 35239                                  ;       Check for sharing violations on local file/device access
 35240                                  ; Outputs:
 35241                                  ;    Carry clear
 35242                                  ;       Sharing approved
 35243                                  ;    Carry set
 35244                                  ;       A sharing violation detected
 35245                                  ;           AX is error code
 35246                                  ; USES    ALL but DS
 35247                                  
 35248                                  SHARE_CHECK:
 35249                                  	; 26/07/2019
 35250 0000732A FF1E[6000]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 35251                                  shchk_retn:
 35252 0000732E C3                      	retn
 35253                                  
 35254                                  ; SHARE_VIOLATION
 35255                                  
 35256                                  ; Inputs:
 35257                                  ;       [THISDPB] Set
 35258                                  ;       AX has error code
 35259                                  ; Function:
 35260                                  ;       Handle Sharing errors
 35261                                  ; Outputs:
 35262                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 35263                                  ;       Carry clear if user wants a retry
 35264                                  ;
 35265                                  ; DS, ES, DI preserved, others destroyed
 35266                                  
 35267                                  SHARE_VIOLATION:
 35268 0000732F 1E                      	PUSH    DS
 35269 00007330 06                      	PUSH	ES
 35270 00007331 57                      	PUSH    DI
 35271 00007332 C606[1005]00            	MOV     byte [READOP],0		; All share errors are reading
 35272                                  	;mov	byte [ALLOWED],18h
 35273 00007337 C606[F702]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35274 0000733C C42E[2405]              	LES     BP,[THISDPB]
 35275 00007340 BF0100                  	MOV     DI,1			; Fake some registers
 35276 00007343 89F9                    	MOV     CX,DI
 35277                                  	;mov	dx,[es:bp+16]
 35278 00007345 268B5610                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 35279 00007349 E801E5                  	call	HARDERR
 35280 0000734C 5F                      	POP     DI
 35281 0000734D 07                      	POP	ES
 35282 0000734E 1F                      	POP     DS
 35283 0000734F 3C01                    	CMP     AL,1
 35284 00007351 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 35285 00007353 F9                      	STC
 35286 00007354 C3                      	retn
 35287                                  
 35288                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID.  This does
 35289                                  ;       NOT perform a close, it merely asserts that the sharing information
 35290                                  ;       for the SFT/UID/PID may be safely released.
 35291                                  ;
 35292                                  ;   Inputs:     ES:DI points to an SFT
 35293                                  ;   Outputs:    None
 35294                                  ;   Registers modified: all except DS,ES,DI
 35295                                  
 35296                                  ShareEnd:
 35297                                  	; 26/07/2019
 35298 00007355 FF1E[6400]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 35299 00007359 C3                      	retn
 35300                                  
 35301                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 35302                                  
 35303                                  ;
 35304                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set.  If
 35305                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 35306                                  ;
 35307                                  ;   Inputs:     ThisSFT points to the SFT
 35308                                  ;               WFP_Start points to the WFP
 35309                                  ;   Outputs:    Carry clear => successful entry
 35310                                  ;               Carry set => failed system call
 35311                                  ;   Registers modified: all
 35312                                  
 35313                                  ShareEnter:
 35314 0000735A 51                      	push	cx
 35315                                  retry:
 35316 0000735B 8B0E[1A00]              	mov     cx,[RetryCount]
 35317                                  attempt:
 35318 0000735F C43E[3605]              	les     di,[THISSFT]		; grab sft
 35319 00007363 31C0                    	XOR     AX,AX
 35320                                   	;mov	[es:di+51],ax
 35321 00007365 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 35322 00007369 51                      	push	cx
 35323 0000736A E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 35324 0000736D 59                      	pop	cx
 35325 0000736E 730A                    	jnc	short done		; success, let the user see this
 35326 00007370 E80FAC                  	call	Idle                    ; wait a while
 35327 00007373 E2EA                    	loop    attempt                 ; go back for another attempt
 35328 00007375 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 35329 00007378 73E1                    	jnc	short retry		; user said to retry, go do it
 35330                                  done:
 35331 0000737A 59                      	pop	cx
 35332 0000737B C3                      	retn
 35333                                  
 35334                                  ;----------------------------------------------------------------------------
 35335                                  
 35336                                  ;align 2 ; 05/09/2018 (Error!)
 35337                                  
 35338 0000737C 90<rep 4h>              align 16 ; 08/09/2018 (OK.)
 35339                                  
 35340                                  ; 06/08/2018 - Retro DOS v3.0
 35341                                  
 35342                                  ;============================================================================
 35343                                  ; MSINIT.ASM
 35344                                  ;============================================================================
 35345                                  ;
 35346                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 35347                                  ;
 35348                                  	; 15/07/2018 - RetroDOS v3.0
 35349                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 35350                                  
 35351                                  SYSBUF:
 35352                                  IRETT:
 35353 00007380 CF                      	iret
 35354                                  
 35355                                  	; 07/07/2018 - Retro DOS v3.0
 35356                                  	; Retro DOS v2.0 - 03/03/2018
 35357                                  DOSINIT:
 35358                                  	; Far call from SYSINIT
 35359                                  	; DX = Memory size in paragraphs
 35360                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 35361                                  	;	  (Retro DOS v2.0, 16/03/2018)
 35362 00007381 FA                              CLI
 35363 00007382 FC                              CLD
 35364 00007383 2E8916[F202]                    MOV     [CS:ENDMEM],DX
 35365 00007388 2E8926[6804]                    MOV     [CS:INITSP],SP
 35366 0000738D 2E8C16[6A04]                    MOV     [CS:INITSS],SS
 35367 00007392 8CC8                            MOV     AX,CS
 35368 00007394 8ED0                            MOV     SS,AX
 35369 00007396 BC[9476]                        MOV     SP,INITSTACK
 35370                                  	; 08/08/2018
 35371 00007399 368C1E[4A00]            	MOV     [SS:NULDEV+2],DS
 35372 0000739E 368936[4800]                    MOV     [SS:NULDEV],SI	; DS:SI Points to CONSOLE Device
 35373                                  	; 15/07/2018
 35374                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35375                                  	; (Set INT 2Ah handler address to an 'IRET')
 35376 000073A3 1E                      	push    ds
 35377 000073A4 31C0                    	xor     ax,ax
 35378 000073A6 8ED8                    	mov     ds,ax
 35379 000073A8 B8[8073]                	mov     ax,IRETT
 35380 000073AB A3A800                  	mov     [2Ah*4],ax ; 00A8h
 35381 000073AE 8CC8                    	mov     ax,cs
 35382 000073B0 A3AA00                  	mov     [(2Ah*4)+2],ax ; 00AAh
 35383 000073B3 1F                      	pop     ds
 35384                                  	;
 35385 000073B4 E82C02                          CALL    CHARINIT	; initialize console driver
 35386                                  
 35387 000073B7 56                              PUSH	SI		; save pointer to header	
 35388 000073B8 0E                      	PUSH	CS
 35389 000073B9 07                              POP	ES
 35390                                          ; 07/07/2018
 35391 000073BA BF[9E00]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 35392 000073BD B80300                          MOV     AX,3
 35393 000073C0 AB                              STOSW           	; Refcount
 35394 000073C1 FEC8                            DEC     AL
 35395 000073C3 AB                              STOSW           	; Access rd/wr, compatibility
 35396 000073C4 30C0                            XOR     AL,AL
 35397 000073C6 AA                              STOSB           	; attribute
 35398                                  	;mov	al,0C3h
 35399 000073C7 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 35400 000073C9 AB                      	STOSw			; flags
 35401 000073CA 89F0                            mov	ax,si
 35402 000073CC AB                              stosw			; device pointer in devptr	
 35403 000073CD 8CD8                            mov	ax,ds
 35404 000073CF AB                      	stosw
 35405 000073D0 31C0                    	xor	ax,ax	; 0
 35406 000073D2 AB                      	stosw			; firclus
 35407 000073D3 AB                      	stosw			; time
 35408 000073D4 AB                      	stosw			; date
 35409 000073D5 48                      	dec	ax	; -1
 35410 000073D6 AB                      	stosw			; size
 35411 000073D7 AB                      	stosw
 35412 000073D8 40                      	inc	ax	; 0
 35413 000073D9 AB                      	stosw			; position
 35414 000073DA AB                      	stosw
 35415                                  	;add	di,7
 35416 000073DB 83C707                  	add	di,SF_ENTRY.sf_name - SF_ENTRY.sf_cluspos
 35417                                  				; point at name
 35418                                  	;add	si,10
 35419 000073DE 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 35420                                  				; point to name
 35421 000073E1 B90400                  	mov	cx,4
 35422 000073E4 F3A5                    	rep	movsw		; name
 35423 000073E6 B103                    	mov	cl,3
 35424 000073E8 B020                    	mov	al," "
 35425 000073EA F3AA                    	rep	stosb		; extension
 35426 000073EC 5E                      	POP	SI		; get back pointer to header
 35427                                  
 35428                                  				; mark device as CON I/O
 35429                                  	; 15/07/2018
 35430                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 35431 000073ED 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 35432                                  	; 12/03/2018
 35433 000073F1 368936[3200]            	MOV     [SS:BCON],SI
 35434 000073F6 368C1E[3400]                    MOV     [SS:BCON+2],DS
 35435                                  
 35436                                  CHAR_INIT_LOOP:
 35437 000073FB C534                            LDS     SI,[SI]				; AUX device
 35438 000073FD E8E301                          CALL    CHARINIT
 35439                                         	;15/07/2018
 35440                                  	;test	byte [SI+4],8
 35441 00007400 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 35442 00007404 74F5                            JZ      SHORT CHAR_INIT_LOOP
 35443                                  	; 12/03/2018
 35444 00007406 368936[2E00]                    MOV     [SS:BCLOCK],SI
 35445 0000740B 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 35446 00007410 BD[9676]                        MOV     BP,MEMSTRT			; ES:BP points to DPB
 35447                                  PERDRV:
 35448                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 35449 00007413 C534                            LDS     SI,[SI]				; Next device
 35450 00007415 83FEFF                          CMP     SI,-1
 35451 00007418 7468                    	JZ      SHORT CONTINIT
 35452                                  
 35453 0000741A E8C601                          CALL    CHARINIT
 35454                                  
 35455                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 35456                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 35457                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 35458                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 35459                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 35460                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 35461                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 35462                                  
 35463                                          ; 15/07/2018
 35464                                  	;test	word [SI+4],8000h		; DEVTYP
 35465 0000741D F744040080                      TEST    word [SI+SYSDEV.ATT],DEVTYP
 35466 00007422 75EF                    	JNZ     SHORT PERDRV			; Skip any other character devs
 35467                                  
 35468 00007424 368A0E[1303]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 35469 00007429 30ED                    	XOR     CH,CH
 35470                                          ; 07/07/2018
 35471                                  	;MOV	[SI+10],CL		; Number of units in name field
 35472 0000742B 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 35473 0000742E 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 35474 00007433 30F6                    	XOR     DH,DH
 35475 00007435 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 35476 0000743A 1E                      	PUSH    DS
 35477 0000743B 56                              PUSH    SI
 35478 0000743C 36C51E[1803]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 35479                                  PERUNIT:
 35480 00007441 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 35481 00007443 43                              INC     BX
 35482 00007444 43                              INC     BX                      ; On to next BPB
 35483                                  	;07/07/2018
 35484                                          ;mov	[ES:BP+DPB.DRIVE],dl
 35485 00007445 26885600                	MOV     [ES:BP],DL
 35486                                  	;MOV	[ES:BP+1],DH
 35487 00007449 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 35488 0000744D 53                              PUSH    BX
 35489 0000744E 51                              PUSH    CX
 35490 0000744F 52                              PUSH    DX
 35491                                  
 35492                                          ;invoke	$SETDPB
 35493 00007450 E82FA9                          CALL	_$SETDPB
 35494                                  
 35495                                  	; 07/07/2018
 35496                                  	;MOV	AX,[ES:BP+2]
 35497 00007453 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 35498                                          ; 12/03/2018
 35499 00007457 363B06[3600]            	CMP	AX,[SS:MAXSEC]
 35500 0000745C 7604                    	JBE     SHORT NOTMAX
 35501 0000745E 36A3[3600]              	MOV	[SS:MAXSEC],AX
 35502                                  NOTMAX:
 35503 00007462 5A                              POP     DX
 35504 00007463 59                              POP     CX
 35505 00007464 5B                              POP     BX
 35506 00007465 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 35507 00007467 5E                              POP     SI
 35508 00007468 1F                              POP     DS
 35509                                  					; ds:si -> device header
 35510                                  					; store it in the corresponding dpb
 35511                                  	; 07/07/2018
 35512                                          ;MOV	[ES:BP+18],SI
 35513 00007469 26897612                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 35514                                          ;MOV	[ES:BP+20],DS
 35515 0000746D 268C5E14                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 35516                                  
 35517 00007471 1E                              PUSH    DS			; save pointer to device header
 35518 00007472 56                              PUSH    SI
 35519 00007473 FEC6                            INC     DH			; inc unit #
 35520 00007475 FEC2                            INC     DL			; inc drive #
 35521 00007477 8ED8                            MOV     DS,AX			; restore segment of BPB array
 35522                                          ;add	bp,32 ;15/07/2018
 35523 00007479 83C520                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 35524 0000747C E2C3                    	LOOP    PERUNIT			; process all units in each driver
 35525                                          
 35526 0000747E 5E                      	POP     SI			; restore pointer to device header
 35527 0000747F 1F                              POP     DS
 35528 00007480 EB91                    	JMP	SHORT PERDRV		; process all drivers in chain
 35529                                  
 35530                                  CONTINIT:
 35531 00007482 0E                              PUSH    CS
 35532 00007483 1F                              POP     DS
 35533                                  ; Calculate true address of buffers, FATs, free space
 35534 00007484 89EF                            MOV     DI,BP           ; First byte after current DPBs
 35535 00007486 8B2E[3600]                      MOV     BP,[MAXSEC]
 35536 0000748A B8[8073]                        MOV     AX,SYSBUF	; = IRETT (15/07/2018)
 35537                                          ; 07/07/2018
 35538                                  	;MOV	[BUFFSTRT],AX
 35539 0000748D 01E8                            ADD     AX,BP           ; One I/O buffer
 35540 0000748F 83C010                          ADD     AX,BUFINSIZ ; = 16
 35541 00007492 A3[2600]                        MOV     [DPBHEAD],AX	; True start of DPBs
 35542 00007495 89C2                            MOV     DX,AX
 35543 00007497 81EA[8073]                      SUB     DX,SYSBUF	; = IRETT (15/07/2018)
 35544 0000749B 89D5                            MOV     BP,DX
 35545 0000749D 01FD                            ADD     BP,DI           ; Allocate buffer space
 35546                                  	;sub	bp,918 ; = ADJFAC for current DOSINIT (07/07/2018)
 35547 0000749F 81ED1603                        SUB     BP,ADJFAC       ; True address of free memory
 35548 000074A3 55                              PUSH    BP ; ###		
 35549 000074A4 BF[9676]                        MOV     DI,MEMSTRT	; Current start of DPBs
 35550                                  	;add	di,24
 35551 000074A7 83C718                          ADD     DI,DPB.NEXT_DPB	; Point at dpb.next_dpb field
 35552 000074AA 8A0E[4600]                      MOV     CL,[NUMIO]
 35553 000074AE 30ED                            XOR     CH,CH
 35554                                  TRUEDPBAD:
 35555                                  	;add	ax,32
 35556 000074B0 83C020                          ADD     AX,DPBSIZ       ; Compute address of next DPB
 35557 000074B3 AB                              STOSW                   ; Set the link to next DPB
 35558 000074B4 83C71E                          ADD     DI,DPBSIZ-2     ; Point at next address
 35559 000074B7 E2F7                            LOOP    TRUEDPBAD
 35560 000074B9 83EF20                          SUB     DI,DPBSIZ       ; Point at last dpb.next_dpb field
 35561 000074BC B8FFFF                          MOV     AX,-1
 35562 000074BF AB                              STOSW                   ; End of list
 35563 000074C0 83C50F                          ADD     BP,15           ; True start of free space (round up to segment)
 35564                                  	; 15/07/2018
 35565                                  	;MOV	CL,4
 35566                                          ;SHR	BP,CL           ; Number of segments for DOS resources
 35567 000074C3 D1DD                            rcr	bp,1
 35568 000074C5 B103                    	mov	cl,3
 35569 000074C7 D3ED                    	shr	bp,cl
 35570                                  	;
 35571 000074C9 8CCA                    	MOV     DX,CS
 35572 000074CB 01EA                            ADD     DX,BP           ; First free segment
 35573 000074CD BB0F00                  	MOV	BX,15 ; 0Fh
 35574 000074D0 8B0E[F202]              	MOV	CX,[ENDMEM]
 35575 000074D4 8CCD                            MOV     BP,CS
 35576                                  
 35577                                  ; BP has segment of DOS (whether to load high or run in place)
 35578                                  ; DX has program segment (whether after DOS or overlaying DOS)
 35579                                  ; CX has size of memory in paragraphs (reduced by DOS size if HIGHMEM)
 35580 000074D6 890E[F202]                      MOV	[ENDMEM],CX
 35581 000074DA 8EC5                            MOV     ES,BP
 35582 000074DC 268C06[4A03]                    MOV     [ES:DSKCHRET+3],ES ; mov [ES:DOSEG_INIT],es
 35583 000074E1 31C0                            XOR     AX,AX
 35584 000074E3 8ED8                            MOV     DS,AX
 35585 000074E5 8EC0                            MOV     ES,AX
 35586                                  	;mov	di,82h 
 35587 000074E7 BF8200                          MOV     DI,INTBASE+2
 35588                                  	; 15/07/2018
 35589 000074EA 89E8                            MOV     AX,BP
 35590                                  	; Set INT 0 (divide by zero) handler
 35591 000074EC C7060000[E657]          	mov     word [0],DIVOV
 35592 000074F2 A30200                  	mov     word [2],ax  ; = cs
 35593                                  	; Set INT 20h to INT 28h handler segments 
 35594 000074F5 B91100                  	mov	cx,17
 35595 000074F8 F3AB                    	rep	stosw
 35596                                  	; DI points to INT 29h vector, offset
 35597 000074FA 83C706                  	add	di,6 
 35598                                  	; DI points to INT 2Ah vector, segment
 35599                                  	;Set  INT 2Ah to INT 3Fh handler segments		
 35600 000074FD B92B00                  	mov	cx,43
 35601 00007500 F3AB                    	rep	stosw
 35602                                  	; DI points to INT 40h vector, segment
 35603 00007502 BF8000                  	mov	di,80h
 35604                                  	; Set INT 20h to INT 28h vectors to their default handler offsets
 35605 00007505 B8[9114]                	mov	ax,_IRET
 35606 00007508 B90900                  	mov	cx,9
 35607                                  iset1:
 35608 0000750B AB                      	stosw
 35609 0000750C 83C702                  	add	di,2
 35610 0000750F E2FA                    	loop	iset1
 35611 00007511 83C704                  	add	di,4
 35612                                  	; Set INT 2Ah to INT 3Fh vectors to their default handler offsets
 35613 00007514 B91600                  	mov	cx,22
 35614                                  iset2:
 35615 00007517 AB                      	stosw
 35616 00007518 83C702                  	add	di,2
 35617 0000751B E2FA                    	loop	iset2
 35618                                  	
 35619 0000751D 89E8                    	mov	ax,bp
 35620                                  	; Set	INT 2Fh handler offset to INT2F
 35621 0000751F C706BC00[BE17]          	mov	word [2Fh*4],INT2F  ; 00BCh
 35622                                  
 35623                                  	; set up entry point call at vectors 30-31h
 35624                                  
 35625 00007525 C606C000EA                      MOV     BYTE [ENTRYPOINT],mi_Long_JMP
 35626 0000752A C706C100[9214]                  MOV     WORD [ENTRYPOINT+1],CALL_ENTRY
 35627 00007530 A3C300                          MOV    [ENTRYPOINT+3],AX
 35628                                  
 35629                                  	; Set	INT 20h, 21h, 22h, 23h handler offsets
 35630 00007533 C7068000[8B14]                  MOV     WORD [addr_int_abort],QUIT
 35631 00007539 C7068400[AA14]                  MOV     WORD [addr_int_command],COMMAND
 35632 0000753F C70688000001                    MOV     WORD [addr_int_terminate],100H
 35633 00007545 89168A00                        MOV     [addr_int_terminate+2],DX
 35634                                  	; 15/07/2018 - Retro DOS v3.0
 35635 00007549 C7069400[7316]                  MOV     WORD [addr_int_disk_read],ABSDRD   ; INT 25h
 35636 0000754F C7069800[B616]                  MOV     WORD [addr_int_disk_write],ABSDWRT ; INT 26h
 35637 00007555 C7069C00[9B64]                  MOV     WORD [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 35638                                  
 35639                                  	; 15/07/2018
 35640                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35641 0000755B 0E                      	push	cs
 35642 0000755C 1F                      	pop	ds
 35643 0000755D 0E                      	push	cs
 35644 0000755E 07                      	pop	es
 35645                                  	; initialize the jump table for the sharer..
 35646                                  	;	(MSDOS 6.0, MSINIT.ASM, 1991, "patch_misc_segments")
 35647                                  	; MSDOS 3.3
 35648                                  	; (set JSharer jump table segments)
 35649 0000755F BF[5C00]                	mov	di,JShare
 35650 00007562 8CC8                    	mov	ax,cs
 35651 00007564 B90F00                  	mov	cx,15
 35652                                  iset3:
 35653 00007567 83C702                  	add	di,2
 35654 0000756A AB                      	stosw
 35655 0000756B E2FA                    	loop	iset3
 35656                                  
 35657                                  	; MSDOS 2.11, MSDOS 3.3
 35658 0000756D B8[5803]                        MOV     AX,INITBLOCK
 35659 00007570 83C00F                          ADD	AX,0Fh		; round to a paragraph
 35660 00007573 B104                            MOV     CL,4
 35661 00007575 D3E8                            SHR     AX,CL
 35662 00007577 8CDF                            MOV     DI,DS
 35663 00007579 01C7                            ADD     DI,AX
 35664 0000757B 47                              INC     DI
 35665 0000757C 893E[DE02]                      MOV     [CurrentPDB],DI
 35666 00007580 55                              PUSH    BP ; ##
 35667 00007581 52                              PUSH    DX ; #		; Save COMMAND address
 35668 00007582 A1[F202]                        MOV     AX,[ENDMEM]
 35669 00007585 89FA                            MOV     DX,DI
 35670                                  
 35671                                          ;invoke	SETMEM          ; Basic Header
 35672 00007587 E82DA9                  	CALL	SETMEM
 35673 0000758A 0E                              PUSH	CS
 35674 0000758B 1F                              POP	DS
 35675                                  	;mov	di,24
 35676 0000758C BF1800                          MOV     DI,PDB.JFN_TABLE
 35677 0000758F 31C0                            XOR     AX,AX
 35678 00007591 AB                              STOSW
 35679 00007592 AA                              STOSB                   ; 0,1 and 2 are CON device
 35680 00007593 B0FF                            MOV     AL,0FFH
 35681                                  	;mov	cx,17
 35682 00007595 B91100                          MOV     CX,FILPERPROC - 3 ; 17
 35683 00007598 F3AA                            REP     STOSB           ; Rest are unused
 35684 0000759A 0E                              PUSH	CS
 35685 0000759B 07                              POP	ES
 35686 0000759C 8C1E[2C00]                      MOV     [SFT_ADDR+2],DS	; Must be set to print messages
 35687                                  
 35688                                  	; 15/07/2018 - Retro DOS v3.0
 35689                                  	; MSDOS 3.3
 35690                                  	; (set country cdpg table segments)
 35691 000075A0 BE[FD0F]                	mov	si,COUNTRY_CDPG ; country_tab
 35692                                  	;mov	[es:si+79],es	; Ucase table segment
 35693                                  	;mov	[es:si+84],es	; File ucase table segment
 35694                                  	;mov	[es:si+89],es	; File char list segment
 35695                                  	;mov	[es:si+94],es	; Collate table segment
 35696                                  	;mov	[es:si+123],es	; Monocase routine segment
 35697 000075A3 8C444F                  	mov	[si+79],es
 35698 000075A6 8C4454                  	mov	[si+84],es
 35699 000075A9 8C4459                  	mov	[Si+89],es
 35700 000075AC 8C445E                  	mov	[si+94],es
 35701 000075AF 8C447B                  	mov	[si+123],es
 35702                                  	; (set SysInitTable -sysinitvars and country_cdpg- segments)
 35703 000075B2 BE[3B0F]                	mov     si,SysInitTable
 35704                                  	;;mov	[es:si+6], es
 35705                                  	;;mov	[es:si+2], es
 35706                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 35707                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 35708 000075B5 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 35709 000075B8 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 35710                                  
 35711                                  	; (set FastOpen table FastRet segment)
 35712 000075BB BE[430F]                	mov     si,FastTable
 35713                                  	;mov	[es:si+4],es
 35714                                  	;;mov	[es:si+8],es
 35715 000075BE 8C4404                  	mov     [si+4],es
 35716                                  	;mov	[si+8],es
 35717                                  	; IBMDOS.COM (Offset 7259h), IBM PC DOS 3.30
 35718 000075C1 C706[8F0F]7258          	mov	word [FETCHI_TAG],5872h ; ? ('Xr')
 35719                                  
 35720                                  	; 10/08/2018 - Retro DOS v3.0
 35721                                  
 35722                                  	; MSDOS 2.11 (Retro DOS v2.0), MSDOS 3.3
 35723                                  
 35724                                  ; After this points the char device functions for CON will work for
 35725                                  ; printing messages
 35726                                  
 35727                                  	;;IF	NOT IBM
 35728                                  	;;IF	NOT ALTVECT
 35729                                  	;MOV	SI,HEADER
 35730                                  	;;invoke OUTMES
 35731                                  	;CALL	OUTMES
 35732                                  	;;PUSH	CS		; Outmes stomps on segments
 35733                                  	;;POP	DS
 35734                                  	;;PUSH	CS
 35735                                  	;;POP	ES
 35736                                  	;;ENDIF
 35737                                  	;;ENDIF
 35738                                  
 35739                                  ; Move the FATs into position
 35740 000075C7 5A                              POP     DX ; #			; Restore COMMAND address
 35741 000075C8 5D                              POP     BP ; ##
 35742 000075C9 59                              POP     CX ; ###		; True address of free memory
 35743 000075CA BE[9676]                        MOV     SI,MEMSTRT		; Place to move DPBs from
 35744 000075CD 8B3E[2600]                      MOV     DI,[DPBHEAD]		; Place to move DPBs to
 35745 000075D1 29F9                            SUB     CX,DI                   ; Total length of DPBs
 35746 000075D3 39F7                            CMP     DI,SI
 35747 000075D5 7607                            JBE     SHORT MOVJMP		; Are we moving to higher or 
 35748                                  					; lower memory?
 35749 000075D7 49                              DEC     CX                      ; Move backwards to higher memory
 35750 000075D8 01CF                            ADD     DI,CX
 35751 000075DA 01CE                            ADD     SI,CX
 35752 000075DC 41                              INC     CX
 35753 000075DD FD                              STD
 35754                                  MOVJMP:
 35755 000075DE 8EC5                            MOV     ES,BP
 35756 000075E0 E9898E                          JMP     MOVDPB
 35757                                  
 35758                                  CHARINIT:
 35759                                  	; 07/07/2018 - Retro DOS v3.0
 35760 000075E3 36C606[0603]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 35761 000075E9 36C606[0703]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 35762 000075EF 36C606[0803]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 35763 000075F5 36C706[0903]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 35764 000075FC 06                              PUSH	ES
 35765 000075FD 53                              PUSH	BX
 35766 000075FE 50                              PUSH	AX
 35767 000075FF BB[0603]                        MOV	BX,DEVCALL
 35768 00007602 0E                              PUSH	CS
 35769 00007603 07                              POP	ES
 35770 00007604 E8F8D8                          CALL	DEVIOCALL2	
 35771 00007607 58                      	POP	AX
 35772 00007608 5B                              POP	BX
 35773 00007609 07                              POP	ES
 35774 0000760A C3                              RETN
 35775                                  
 35776 0000760B 90                      align 2
 35777                                          ;;DB	80H DUP(?)
 35778                                  	;TIMES 	64 dw 0 ; 05/09/2018
 35779                                  	; 10/08/2018
 35780                                  	;times	128 dw 0
 35781                                  	; 12/08/2018
 35782                                  	;times	132 dW 0 ; ADJFAC = 918 ; 08/09/2018 (OK.)
 35783                                  	; 08/09/2018 
 35784 0000760C 00<rep 88h>             	times	136 db 0 ; ADJFAC = 790	; 08/09/2018 (OK.) 
 35785                                  
 35786                                  INITSTACK:	; INITSTACK LABEL BYTE
 35787 00007694 0000                    	DW	0 ; DW ?
 35788                                  
 35789                                  ;MEMSTRT LABEL	WORD
 35790                                  MEMSTRT EQU	$
 35791                                  
 35792                                  ADJFAC  EQU     MEMSTRT-SYSBUF
 35793                                  
 35794 00007696 00                      	db 0
 35795 00007697 00                      	db 0
 35796 00007698 00                      	db 0
 35797 00007699 00                      	db 0
 35798 0000769A 00                      	db 0
 35799 0000769B 00                      	db 0
 35800 0000769C 00                      	db 0
 35801 0000769D 00                      	db 0
 35802 0000769E 00                      	db 0
 35803 0000769F 00                      	db 0
 35804                                  PcDosVersion:
 35805 000076A0 1A4040402323232050-     	db 1Ah,'@@@### PC-DOS Version 3.30',0Dh,0Ah
 35805 000076A9 432D444F5320566572-
 35805 000076B2 73696F6E20332E3330-
 35805 000076BB 0D0A               
 35806 000076BD 1A00                    	db 1Ah,0
 35807                                  
 35808                                          ;do_ext
 35809                                  ;LAST	ENDS
