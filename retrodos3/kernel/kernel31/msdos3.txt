     1                                  ; ****************************************************************************
     2                                  ; MSDOS3.BIN (MSDOS 3.3 Kernel) - RETRO DOS v3.1 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 22/01/2024 (BugFix) - (Previous: 16/12/2022)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2019 (Retro DOS 3.0), 29/06/2019 (Retro DOS 3.1)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.14 (2.15)  
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	    ((nasm msdos3.asm -l msdos3.txt -o MSDOS3.BIN)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    15                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    16                                  ; ****************************************************************************
    17                                  ; main file: 'retrodos3.s'
    18                                  ; incbin 'MSDOS3.BIN' ; (DOSGROUP CODE SEGMENT)
    19                                  ; ----------------------------------------------------------------------------
    20                                  ; 07/07/2018 - Erdogan Tan
    21                                  ; (Note: I have not got MSDOS 3.3 kernel source files; so, I need to continue
    22                                  ; by using disassembled MSDOS.SYS -v3.3- and MSDOS 6.0 kernel source files.)
    23                                  ; ----------------------------------------------------------------------------
    24                                  ; MSDOS 6.0 Kernel source files:
    25                                  ;	MSDATA.ASM, 
    26                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    27                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC)
    28                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    29                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    30                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    31                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    32                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    33                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    34                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    35                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    36                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    37                                  ;
    38                                  ; MSDOS 2.0 Kernel source files:
    39                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    40                                  ;	MSCODE.ASM
    41                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    42                                  
    43                                  ; ----------------------------------------
    44                                  ; 20/05/2019 - MSDOS3.S - Retro DOS v3.0
    45                                  ; 29/06/2019 - MSDOS3.ASM - Retro DOS v3.1
    46                                  ; ----------------------------------------
    47                                  
    48                                  ;============================================================================
    49                                  ; DOSLINK
    50                                  ;============================================================================
    51                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    52                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    53                                  ;stdio time xenix xenix2
    54                                  
    55                                  ;============================================================================
    56                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    57                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    58                                  ;============================================================================
    59                                  ;
    60                                  ; ###########################################################################
    61                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    62                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    63                                  ; #			 Licensed to: Freeware version			    #
    64                                  ; ###########################################################################
    65                                  ;
    66                                  ; Input	MD5   :	EF2ADCA1CB3882118FD247DD4C672C81
    67                                  
    68                                  ; ---------------------------------------------------------------------------
    69                                  ; File Name   :	D:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS33.BIN
    70                                  ; Format      :	Binary file
    71                                  ; Base Address:	0000h Range: 0000h - 75CFh Loaded length: 75CFh
    72                                  ;============================================================================
    73                                  ; MSDOS33.BIN = IBMDOS.COM, 17/03/1987, 30159 bytes (IBM PC DOS 3.30 kernel)
    74                                  
    75                                  ;============================================================================
    76                                  ; MSDOS.ASM
    77                                  ;============================================================================
    78                                  
    79                                  ;TITLE   Standard MSDOS
    80                                  ;NAME    MSDOS_2
    81                                  
    82                                  ; Number of disk I/O buffers
    83                                  
    84                                  ;	INCLUDE STDSW.ASM
    85                                  ;       INCLUDE MSHEAD.ASM
    86                                  ;       INCLUDE MSDATA.ASM
    87                                  
    88                                  ;	END
    89                                  
    90                                  ;============================================================================
    91                                  ; STDSW.ASM
    92                                  ;============================================================================
    93                                  
    94                                  TRUE    EQU     0FFFFH
    95                                  FALSE   EQU     ~TRUE ; NOT TRUE
    96                                  
    97                                  ; Use the switches below to produce the standard Microsoft version or the IBM
    98                                  ; version of the operating system
    99                                  ;MSVER   EQU     false
   100                                  ;IBM     EQU     true
   101                                  ;WANG    EQU     FALSE
   102                                  ;ALTVECT EQU     FALSE
   103                                  
   104                                  ; Set this switch to cause DOS to move itself to the end of memory
   105                                  ;HIGHMEM EQU     FALSE
   106                                  
   107                                  ;	IF      IBM
   108                                  ESCCH   EQU     0			; character to begin escape seq.
   109                                  CANCEL  EQU     27			;Cancel with escape
   110                                  TOGLINS EQU     TRUE			;One key toggles insert mode
   111                                  TOGLPRN EQU     TRUE			;One key toggles printer echo
   112                                  ZEROEXT EQU     TRUE
   113                                  ;       ELSE
   114                                  ;       IF      WANG			;Are we assembling for WANG?
   115                                  ;ESCCH   EQU     1FH			;Yes. Use 1FH for escape character
   116                                  ;       ELSE
   117                                  ;ESCCH   EQU     1BH
   118                                  ;       ENDIF
   119                                  ;CANCEL  EQU     "X"-"@"		;Cancel with Ctrl-X
   120                                  ;TOGLINS EQU     WANG			;Separate keys for insert mode on
   121                                  					;and off if not WANG
   122                                  ;TOGLPRN EQU     FALSE			;Separate keys for printer echo on
   123                                  					;and off
   124                                  ;ZEROEXT EQU     TRUE
   125                                  ;        ENDIF
   126                                  
   127                                  ;============================================================================
   128                                  ; MSHEAD.ASM
   129                                  ;============================================================================
   130                                  
   131                                  ;--------------------------------------------------------------
   132                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   133                                  ;--------------------------------------------------------------
   134                                  
   135                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   136                                  ;        by Microsoft MSDOS development group:
   137                                  ;           Tim Paterson (Ret.)
   138                                  ;           Aaron Reynolds
   139                                  ;           Nancy Panners (Parenting)
   140                                  ;           Mark Zbikowski
   141                                  ;           Chris Peters (BIOS) (ret.)
   142                                  
   143                                  ; ****************** Revision History *************************
   144                                  ;          >> EVERY change must noted below!! <<
   145                                  ;
   146                                  ; 0.34 12/29/80 General release, updating all past customers
   147                                  ; 0.42 02/25/81 32-byte directory entries added
   148                                  ; 0.56 03/23/81 Variable record and sector sizes
   149                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   150                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   151                                  ; 0.75 04/17/81 Improve and correct buffer handling
   152                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   153                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   154                                  ; 1.00 04/28/81 Renumber for general release
   155                                  ; 1.01 05/12/81 Fix bug in `STORE'
   156                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   157                                  ;               RENAME fix, general cleanup
   158                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   159                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   160                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   161                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   162                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   163                                  ;               of smaller improvements
   164                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   165                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   166                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   167                                  ;               zero extent field in IBM version (back to 1.01!)
   168                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   169                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   170                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   171                                  ;               is searched first when possible to minimize I/O
   172                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   173                                  ;               full sector write when file is growing
   174                                  ;      03/09/82 Multiple I/O buffers
   175                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   176                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   177                                  ;               must invalidate all buffers (disk and directory).
   178                                  ; 1.27 03/31/82 Installable device drivers
   179                                  ;                 Function call 47 - Get pointer to device table list
   180                                  ;                 Function call 48 - Assign CON AUX LIST
   181                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   182                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   183                                  ;               call entries.  Most CS relative references changed to SS
   184                                  ;               relative with an eye toward putting a portion of the DOS in
   185                                  ;               ROM.  DOS source also broken into header, data and code pieces
   186                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   187                                  ;               return the current values.
   188                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   189                                  ;               call to return flag location (call 29)
   190                                  ;      04/15/82 Volume ID attribute added
   191                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   192                                  ;               avoid a CS relative reference.
   193                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   194                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   195                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   196                                  ;               call 49.
   197                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   198                                  ;               address of DPB
   199                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   200                                  ;               writting to console device via file I/O.  Added a console
   201                                  ;               output attribute to devices.
   202                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   203                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   204                                  ;               as devices....  pipes, redirection now possible
   205                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   206                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   207                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   208                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   209                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   210                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   211                                  ;               out back about 1.27 or so (oops).  ARR
   212                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   213                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   214                                  ;               RMDIR Xenix calls
   215                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   216                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   217                                  ;               Frees up lots of memory.
   218                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   219                                  ;               system buffers
   220                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   221                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   222                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   223                                  ;               changed to set file handle environment.
   224                                  ; 2.00 08/01/82 Number for IBM release
   225                                  ;      01/19/83 No environ bug in EXEC
   226                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   227                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   228                                  ;      01/27/83 Growcnt fixed for 32-bits
   229                                  ;      01/27/83 Find-first problem after create
   230                                  ; 2.01 02/17/83 International DOS
   231                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   232                                  ;               an IBM PC
   233                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   234                                  ; (MSHEAD.ASM, MSDOS6.0, 1991) - mshead.asm 1.1 85/04/10 -
   235                                  ; 2.10 03/09/83 Start of NETWORK support
   236                                  ;		New Buffer structure
   237                                  ;		New Sytem file table structure
   238                                  ;		FCB moved to internal representation
   239                                  ;		DOS re-organized
   240                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   241                                  ;		device interface.
   242                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   243                                  ;               an IBM PC
   244                                  ; 2.50 09/12/83 More network stuff
   245                                  ;
   246                                  ; *************************************************************
   247                                  
   248                                  ; ----------------------------------------------------------------------------
   249                                  ; EQUATES
   250                                  
   251                                  ; Interrupt Entry Points:
   252                                  
   253                                  ; INTBASE:      ABORT
   254                                  ; INTBASE+4:    COMMAND
   255                                  ; INTBASE+8:    BASE EXIT ADDRESS
   256                                  ; INTBASE+C:    CONTROL-C ABORT
   257                                  ; INTBASE+10H:  FATAL ERROR ABORT
   258                                  ; INTBASE+14H:  BIOS DISK READ
   259                                  ; INTBASE+18H:  BIOS DISK WRITE
   260                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   261                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   262                                  ; INTBASE+40H:  Long jump to CALL entry point
   263                                  
   264                                  ENTRYPOINTSEG   EQU     0CH
   265                                  MAXDIF          EQU     0FFFH
   266                                  SAVEXIT         EQU     10
   267                                  ;08/07/2018 - Retro DOS v3.0
   268                                  ;WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   269                                  
   270                                         ; INCLUDE DOSSYM.ASM
   271                                         ; INCLUDE DEVSYM.ASM
   272                                  
   273                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   274                                  ; PAGE
   275                                  ; There are three kinds of context resets that can occur during normal DOS
   276                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   277                                  ; be handles in a clean fashion that allows nested executions along with the
   278                                  ; ability to trap one's own errors.
   279                                  ;
   280                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   281                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   282                                  ;           follows:
   283                                  ;
   284                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   285                                  ;           Save it in static memory.
   286                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   287                                  ;
   288                                  ;           The interrupt service routine must preserve all registers and
   289                                  ;           return carry set iff the operation is to be aborted (via abort
   290                                  ;           system call), otherwise, carry is reset and the operation is
   291                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   292                                  ;           RESULTS.
   293                                  ;
   294                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   295                                  ;           restore INT int_ctrl_c from the saved vector.
   296                                  ;
   297                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   298                                  ;           also preserve registers and return one of three values in AL: 0 and
   299                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   300                                  ;           himself is not to issue the abort, rather, the dos will do it for
   301                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   302                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   303                                  ;
   304                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   305                                  ;           abort call.  This is reserved for knowledgeable system programs.
   306                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   307                                  
   308                                  ;SUBTTL SEGMENT DECLARATIONS
   309                                  
   310                                  ; The following are all of the segments used.  They are declared in the order
   311                                  ; that they should be placed in the executable
   312                                  
   313                                  ;
   314                                  ; segment ordering for MSDOS
   315                                  ;
   316                                  
   317                                  ;START           SEGMENT BYTE PUBLIC 'START'
   318                                  ;START           ENDS
   319                                  
   320                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   321                                  ;CONSTANTS       ENDS
   322                                  
   323                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   324                                  ;DATA            ENDS
   325                                  
   326                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   327                                  ;CODE            ENDS
   328                                  
   329                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   330                                  ;LAST            ENDS
   331                                  
   332                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   333                                  
   334                                  ; The following segment is defined such that the data/const classes appear
   335                                  ; before the code class for ROMification
   336                                  
   337                                  ;START		SEGMENT BYTE PUBLIC 'START'
   338                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   339                                  ;		JMP     DOSINIT
   340                                  ;START		ENDS
   341                                  
   342                                  ;============================================================================
   343                                  ; DOSSYM.ASM
   344                                  ;============================================================================
   345                                  
   346                                  ;<Control character definitions>
   347                                  
   348                                  c_DEL       EQU     7Fh         ;    ASCII rubout or delete previous char
   349                                  c_BS        EQU     08h         ; ^H ASCII backspace
   350                                  c_CR        EQU     0Dh         ; ^M ASCII carriage return
   351                                  c_LF        EQU     0Ah         ; ^J ASCII linefeed
   352                                  c_ETB       EQU     17h         ; ^W ASCII end of transmission
   353                                  c_NAK       EQU     15h         ; ^U ASCII negative acknowledge
   354                                  c_ETX       EQU     03h         ; ^C ASCII end of text
   355                                  c_HT        EQU     09h         ; ^I ASCII tab
   356                                  
   357                                  ;============================================================================
   358                                  ; BPB.INC, MSDOS 3.3, 1987
   359                                  ;============================================================================
   360                                  ; 09/07/2018 - Retro DOS v3.0
   361                                  
   362                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   363                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   364                                  ;									   ;
   365                                  
   366                                  ; BIOS PARAMETER BLOCK DEFINITION
   367                                  ; THIS STRUCTURE IS USED TO BUILD A FULL DPB
   368                                  
   369                                  struc BPBLOCK
   370 00000000 ????                    .SECSZ: resw 1		; Size in bytes of physical sector
   371 00000002 ??                      .CLUS:  resb 1		; Sectors/Alloc unit
   372 00000003 ????                    .RES:   resw 1		; Number of reserved sectors
   373 00000005 ??                      .FTCNT: resb 1		; Number of FATs
   374 00000006 ????                    .DRCNT: resw 1		; Number of directory entries
   375 00000008 ????                    .SCCNT: resw 1		; Total number of sectors
   376 0000000A ??                      .MEDIA: resb 1		; Media descriptor byte
   377 0000000B ????                    .FTSEC:	resw 1		; Number of sectors taken up by one FAT
   378                                  .size:
   379                                  endstruc
   380                                  
   381                                  ; 09/07/2018 - Retro DOS v3.0
   382                                  ; (BPB.INC, MSDOS 6.0, 1991)
   383                                  
   384                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   385                                  ;
   386                                  ;	The BPB contains information about the disk structure.  It dates
   387                                  ;	back to the earliest FAT systems and so FAT information is
   388                                  ;	intermingled with physical driver information.
   389                                  ;
   390                                  ;	A boot sector contains a BPB for its device; for other disks
   391                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
   392                                  ;	information in the DPB.
   393                                  ;
   394                                  ;	The BDS structure contains a BPB within it. 
   395                                  
   396                                  struc A_BPB
   397 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   398 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   399 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   400 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   401 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   402 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   403 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   404 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   405 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   406 0000000F ????                    .BPB_HEADS:		resw	1
   407 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   408 00000013 ????                    			resw	1
   409 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   410 00000017 ????                    			resw	1
   411 00000019 ????????????            			resb	6	; NOTE:  many times these
   412                                  ;					; 	 6 bytes are omitted
   413                                  ;					;	 when BPB manipulations
   414                                  ;					;	 are performed!
   415                                  .size:
   416                                  endstruc
   417                                  
   418                                  ;                                                                          ;
   419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   420                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   421                                  
   422                                  ;============================================================================
   423                                  ; BUFFER.INC, MSDOS 3.3, 1987
   424                                  ;============================================================================
   425                                  ; 09/07/2018 - Retro DOS v3.0
   426                                  
   427                                  ; <Disk I/O Buffer Header>
   428                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   429                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   430                                  ;                                                                          ;
   431                                  
   432                                  ; Field definition for I/O buffer information
   433                                  
   434                                  struc BUFFINFO
   435 00000000 ????????                .buf_link:	resd 1		; Pointer to next buffer in list
   436 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   437                                  				; SFT table index (bit 7 = 1)
   438                                  				; = FFH if buffer free
   439 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   440                                  				;	= 0 if Local device buffer
   441                                  				; Bit 6 = 1 if buffer dirty
   442                                  				; Bit 5 = Reserved
   443                                  				; Bit 4 = Search bit (bit 7 = 1)
   444                                  				; Bit 3 = 1 if buffer is DATA
   445                                  				; Bit 2 = 1 if buffer is DIR
   446                                  				; Bit 1 = 1 if buffer is FAT
   447                                  				; Bit 0 = Reserved
   448 00000006 ????                    .buf_sector:	resw 1		; Sector number of buffer (bit 7 = 0)
   449                                  ; The next two items are often refed as a word (bit 7 = 0)
   450 00000008 ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   451 00000009 ??                      .buf_wrtcntinc:	resb 1		; "   "     "   , # sectors between each write
   452 0000000A ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   453 0000000E ????                    .buf_fill:	resw 1		; How full buffer is (bit 7 = 1)
   454                                  .size:
   455                                  endstruc
   456                                  
   457                                  %define buf_offset dword [buf_sector]
   458                                  				;For bit 7 = 1, this is the byte
   459                                  				;offset of the start of the buffer in
   460                                  				;the file pointed to by buf_ID.  Thus
   461                                  				;the buffer starts at location
   462                                  				;buf_offset in the file and contains
   463                                  				;buf_fill bytes.
   464                                  
   465                                  BUFINSIZ        EQU     BUFFINFO.size
   466                                  
   467                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   468                                  
   469                                  ;Flag byte masks
   470                                  buf_isnet	EQU	10000000B
   471                                  buf_dirty	EQU	01000000B
   472                                  ;***
   473                                  buf_visit	EQU	00100000B
   474                                  ;***
   475                                  buf_snbuf	EQU	00010000B
   476                                  
   477                                  buf_isDATA	EQU	00001000B
   478                                  buf_isDIR	EQU	00000100B
   479                                  buf_isFAT	EQU	00000010B
   480                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   481                                  
   482                                  buf_NetID	EQU	BUFINSIZ
   483                                  
   484                                  ;                                                                          ;
   485                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   486                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   487                                  
   488                                  ; <User stack inside of system call>
   489                                  ; Location of user registers relative user stack pointer
   490                                  
   491                                  struc	user_env   ; user_environ
   492 00000000 ????                    .user_AX: resw 1
   493 00000002 ????                    .user_BX: resw 1
   494 00000004 ????                    .user_CX: resw 1
   495 00000006 ????                    .user_DX: resw 1
   496 00000008 ????                    .user_SI: resw 1
   497 0000000A ????                    .user_DI: resw 1
   498 0000000C ????                    .user_BP: resw 1
   499 0000000E ????                    .user_DS: resw 1
   500 00000010 ????                    .user_ES: resw 1
   501 00000012 ????                    .user_IP: resw 1
   502 00000014 ????                    .user_CS: resw 1
   503 00000016 ????                    .user_F:  resw 1
   504                                  .size:
   505                                  endstruc
   506                                  
   507                                  ; 09/07/2018 - Retro DOS v3.0
   508                                  ; (VECTOR.INC, MSDOS 3.3, 1987)
   509                                  ; ----------------------------------------------------------------------------
   510                                  
   511                                  ; <interrupt definitions>
   512                                  
   513                                  INTTAB          EQU     20H
   514                                  INTBASE         EQU     4 * INTTAB
   515                                  ENTRYPOINT      EQU     INTBASE+40H
   516                                  
   517                                  ;	IF      ALTVECT
   518                                  ;ALTTAB  EQU     0F0H
   519                                  ;ALTBASE EQU     4 * ALTTAB
   520                                  ;	ENDIF
   521                                  
   522                                  ;
   523                                  ; interrupt assignments
   524                                  ;
   525                                  ;	IF	NOT ALTVECT
   526                                  int_abort	    EQU     INTTAB	; abort process
   527                                  int_command	    EQU     int_abort+1 ; call MSDOS
   528                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   529                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   530                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   531                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   532                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   533                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   534                                  					; resident
   535                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   536                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   537                                  ;									   ;
   538                                  int_spooler	    EQU     int_abort+8 ; spooler call
   539                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   540                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   541                                  ;									   ;
   542                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   543                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   544                                  ;	ELSE
   545                                  ;int_abort	    EQU     INTTAB	; abort process
   546                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   547                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   548                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   549                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   550                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   551                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   552                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   553                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   554                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   555                                  ;									   ;
   556                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   557                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   558                                  ;									   ;
   559                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   560                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   561                                  ;	ENDIF
   562                                  
   563                                  addr_int_abort		EQU    4 * int_abort
   564                                  addr_int_command	EQU    4 * int_command
   565                                  addr_int_terminate	EQU    4 * int_terminate
   566                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   567                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   568                                  addr_int_disk_read	EQU    4 * int_disk_read
   569                                  addr_int_disk_write	EQU    4 * int_disk_write
   570                                  addr_int_keep_process	EQU    4 * int_keep_process
   571                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   572                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   573                                  ;									   ;
   574                                  addr_int_spooler	EQU    4 * int_spooler
   575                                  addr_int_fastcon	EQU    4 * int_fastcon
   576                                  addr_int_IBM		EQU    4 * int_IBM
   577                                  ;									   ;
   578                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   579                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   580                                  
   581                                  
   582                                  ; <Disk map>
   583                                  ;  MSDOS partitions the disk into 4 sections:
   584                                  ;
   585                                  ;  phys sector 0:   +-------------------+
   586                                  ;       |           | boot/reserved     |
   587                                  ;       |           +-------------------+
   588                                  ;       |           |  File allocation  |
   589                                  ;       v           |      table(s)     |
   590                                  ;                   |  (multiple copies |
   591                                  ;                   |     are kept)     |
   592                                  ;                   +-------------------+
   593                                  ;                   |     Directory     |
   594                                  ;                   +-------------------+
   595                                  ;                   |     File space    |
   596                                  ;                   +-------------------+
   597                                  ;                   |   Unaddressable   |
   598                                  ;                   |  (to end of disk) |
   599                                  ;                   +-------------------+
   600                                  ;
   601                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   602                                  ; adjusted to maximize the file space addressable.
   603                                  
   604                                  ; BREAK <Directory entry>
   605                                  
   606                                  ;
   607                                  ;       +---------------------------+
   608                                  ;       |  (12 BYTE) filename/ext   |       0       0
   609                                  ;       +---------------------------+
   610                                  ;       |     (BYTE) attributes     |       11      B
   611                                  ;       +---------------------------+
   612                                  ;       |    (10 BYTE) reserved     |       12      C
   613                                  ;       +---------------------------+
   614                                  ;       | (WORD) time of last write |       22      16
   615                                  ;       +---------------------------+
   616                                  ;       | (WORD) date of last write |       24      18
   617                                  ;       +---------------------------+
   618                                  ;       |   (WORD) First cluster    |       26      1A
   619                                  ;       +---------------------------+
   620                                  ;       |     (DWORD) file size     |       28      1C
   621                                  ;       +---------------------------+
   622                                  ;
   623                                  ;   First byte of filename  = E5 -> free directory entry
   624                                  ;                           = 00 -> end of allocated directory
   625                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   626                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   627                                  ;
   628                                  struc dir_entry
   629 00000000 <res Bh>                .dir_name:	resb 11			; file name
   630 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   631 0000000C <res Ah>                .dir_pad:	resb 10			; reserved for expansion
   632 00000016 ????                    .dir_time:	resw 1			; time of last write
   633 00000018 ????                    .dir_date:	resw 1			; date of last write
   634 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   635 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   636 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   637                                  .size:
   638                                  endstruc
   639                                  
   640                                  attr_read_only      EQU      1h
   641                                  attr_hidden         EQU      2h
   642                                  attr_system         EQU      4h
   643                                  attr_volume_id      EQU      8h
   644                                  attr_directory      EQU     10h
   645                                  attr_archive        EQU     20h
   646                                  ;09/07/2018 - Retro DOS v3.0
   647                                  ;(DIRENT.INC, MSDOS 3.3, 1987)
   648                                  attr_device	    EQU     40h	; This is a VERY special bit.
   649                                  				;   NO directory entry on a disk EVER
   650                                  				;   has this bit set. It is set non-zero
   651                                  				;   when a device is found by GETPATH
   652                                  
   653                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   654                                                                          ; OR of hard attributes for FINDENTRY
   655                                  
   656                                  attr_ignore         EQU     attr_read_only+attr_archive
   657                                                                          ; ignore this(ese) attribute(s)
   658                                                                          ; during search first/next
   659                                  
   660                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   661                                                                          ; changeable via CHMOD
   662                                  
   663                                  ; 09/08/2018 - Retro DOS v3.0
   664                                  ; (DIRENT.INC, MSDOS 6,0, 1991)
   665                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   666                                  
   667                                  ; <File allocation Table information>
   668                                  ;
   669                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on the
   670                                  ; disk.  These entries are packed, two for every three bytes.  The contents of
   671                                  ; entry number N is found by 1) multiplying N by 1.5; 2) adding the result to
   672                                  ; the base address of the Allocation Table; 3) fetching the 16-bit word at this
   673                                  ; address; 4) If N was odd (so that N*1.5 was not an integer), shift the word
   674                                  ; right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry number zero
   675                                  ; is used as an end-of-file trap in the OS and is passed to the BIOS to help
   676                                  ; determine disk format.  Entry 1 is reserved for future use.  The first
   677                                  ; available allocation unit is assigned entry number two, and even though it is
   678                                  ; the first, is called cluster 2.  Entries greater than 0FF8H are end of file
   679                                  ; marks; entries of zero are unallocated.  Otherwise, the contents of a FAT
   680                                  ; entry is the number of the next cluster in the file.
   681                                  ;
   682                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would do
   683                                  ; because these clusters show as allocated, but are not part of any allocation
   684                                  ; chain and thus will never be allocated to a file.  A particular number is
   685                                  ; selected so that disk checking programs know what to do (ie.  a cluster with
   686                                  ; entry FF7H which is not in a chain is not an error).
   687                                  
   688                                  ;DIRSTRLEN       EQU     64	; Max length in bytes of directory strings
   689                                  
   690                                  ; 19/07/2018
   691                                  ; (DPB.INC, MSDOS 3.3, 1987)
   692                                  ; 07/07/2018 - Retro DOS v3.0
   693                                  ; (DPB.INC, MSDOS 6.0, 1991)
   694                                  ; ----------------------------------------------------------------------------
   695                                  ;**	DPB - Drive Parameter Block
   696                                  ;
   697                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   698                                  ;	possibly inaccurate deductions from code study... - jgl
   699                                  ;
   700                                  ;	The DPB is DOS's main structure for describing block devices.
   701                                  ;	It contains info about the "Drive" intermingled with info about
   702                                  ;	the FAT file system which is presumably on the drive.  I don't know
   703                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   704                                  ;
   705                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   706                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   707                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   708                                  
   709                                  struc	DPB
   710 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   711 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   712 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   713 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   714 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   715 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   716 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   717 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   718 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   719 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   720                                  ; MSDOS 3.3
   721 0000000F ??                      .FAT_SIZE:	resb 1		; Number of records occupied by FAT
   722                                  ; MSDOS 6.0
   723                                  ;.FAT_SIZE:	resw 1		; Number of records occupied by FAT
   724 00000010 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   725 00000012 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   726 00000016 ??                      .MEDIA:		resb 1		; Media byte
   727 00000017 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   728                                  				; check the first time this DPB is used
   729 00000018 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   730 0000001C ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   731 0000001E ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   732                                  .size:
   733                                  endstruc
   734                                  
   735                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   736                                  
   737                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   738                                  
   739                                  ;                                                                          ;
   740                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   741                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   742                                  
   743                                  ; 12/07/2018 - Retro DOS v3.0 
   744                                  ; (DOSSYM.INC, MSDOS 6.0, 1991)
   745                                  
   746                                  ;**	Character Type Flags
   747                                  ;
   748                                  ;	These flags are used in a lookup table indexed by the character code.
   749                                  ;	They're used to quickly classify characters when parsing paths.
   750                                  ;	I think that these are only used to parse FCBs - jgl
   751                                  
   752                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   753                                  FDELIM	equ 2		; is a delimiter
   754                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   755                                  FFCB	equ 8		; is valid in an FCB
   756                                  
   757                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   758                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   759                                  ;                                                                          ;
   760                                  devid_file_clean        EQU     40h     ; true if file and not written
   761                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   762                                  
   763                                  devid_device            EQU     80h     ; true if a device
   764                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   765                                  devid_device_raw        EQU     20h     ; true if in raw mode
   766                                  devid_device_special    EQU     10h     ; true if special device
   767                                  devid_device_clock      EQU     08h     ; true if clock device
   768                                  devid_device_null       EQU     04h     ; true if null device
   769                                  devid_device_con_out    EQU     02h     ; true if console output
   770                                  devid_device_con_in     EQU     01h     ; true if consle input
   771                                  
   772                                  ;
   773                                  ; structure of devid field as returned by IOCTL is:
   774                                  ;
   775                                  ;       BIT     7   6   5   4   3   2   1   0
   776                                  ;             |---|---|---|---|---|---|---|---|
   777                                  ;             | I | E | R | S | I | I | I | I |
   778                                  ;             | S | O | A | P | S | S | S | S |
   779                                  ;             | D | F | W | E | C | N | C | C |
   780                                  ;             | E |   |   | C | L | U | O | I |
   781                                  ;             | V |   |   | L | K | L | T | N |
   782                                  ;             |---|---|---|---|---|---|---|---|
   783                                  ;       ISDEV = 1 if this channel is a device
   784                                  ;             = 0 if this channel is a disk file
   785                                  ;
   786                                  ;       If ISDEV = 1
   787                                  ;
   788                                  ;             EOF = 0 if End Of File on input
   789                                  ;             RAW = 1 if this device is in Raw mode
   790                                  ;                 = 0 if this device is cooked
   791                                  ;             ISCLK = 1 if this device is the clock device
   792                                  ;             ISNUL = 1 if this device is the null device
   793                                  ;             ISCOT = 1 if this device is the console output
   794                                  ;             ISCIN = 1 if this device is the console input
   795                                  ;
   796                                  ;       If ISDEV = 0
   797                                  ;             EOF = 0 if channel has been written
   798                                  ;             Bits 0-5  are  the  block  device  number  for
   799                                  ;                 the channel (0 = A, 1 = B, ...)
   800                                  ;
   801                                  devid_ISDEV     EQU     80h
   802                                  devid_EOF       EQU     40h
   803                                  devid_RAW       EQU     20h
   804                                  devid_SPECIAL   EQU     10H
   805                                  devid_ISCLK     EQU     08h
   806                                  devid_ISNUL     EQU     04h
   807                                  devid_ISCOT     EQU     02h
   808                                  devid_ISCIN     EQU     01h
   809                                  
   810                                  devid_block_dev EQU     1Fh             ; mask for block device number
   811                                  
   812                                  ; 08/07/2018 - Retro DOS v3.0
   813                                  ; (PDB.INC, MSDOS 6.0, 1991)
   814                                  ; ----------------------------------------------------------------------------
   815                                  ; BREAK <Process data block>
   816                                  ;
   817                                  ;**	Process data block (otherwise known as program header)
   818                                  ;
   819                                  
   820                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   821                                  ;	can be rearranged here, ever.  Reserved areas are probably safe
   822                                  ;	for use.
   823                                  
   824                                  FILPERPROC	EQU     20
   825                                  
   826                                  struc PDB	; Process_data_block
   827 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   828 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   829 00000004 ??                                      resb 1
   830 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   831 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   832 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   833 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   834 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   835 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   836 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   837 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   838 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   839 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   840 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   841 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   842 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   843 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   844 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   845 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   846 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   847 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   848                                  				;  an extended FCB
   849                                  ;endstruc 	; MSDOS 3.3
   850                                  	  	; MSDOS 6.0
   851 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   852 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   853 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   854 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   855                                  endstruc
   856                                  
   857                                  ; BREAK <EXEC and EXE file structures>
   858                                  ;
   859                                  ; EXEC arg block - load/go program
   860                                  ;
   861                                  
   862                                  ;
   863                                  ; The following get used as arguments to the EXEC system call.  They indicate
   864                                  ; whether or not the program is executed or whether or not a program header
   865                                  ; gets created.
   866                                  ;
   867                                  exec_func_no_execute    EQU 1           ; no execute bit
   868                                  exec_func_overlay       EQU 2           ; overlay bit
   869                                  
   870                                  struc EXEC0
   871 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   872 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   873 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   874 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   875                                  .size:
   876                                  endstruc
   877                                  
   878                                  struc EXEC1
   879 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   880 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   881 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   882 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   883 0000000E ????                    .SP:		resw 1		; stack pointer of program
   884 00000010 ????                    .SS:		resw 1		; stack seg register of program
   885 00000012 ????                    .IP:		resw 1		; entry point IP
   886 00000014 ????                    .CS:		resw 1		; entry point CS
   887                                  .size:
   888                                  endstruc
   889                                  
   890                                  struc EXEC3
   891 00000000 ????                    .load_addr:	resw 1		; seg address of load point
   892 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
   893                                  endstruc
   894                                  
   895                                  ; 02/08/2018 (MSDOS 6.0, EXEC.INC, 1991)
   896                                  ;**	Exit codes (in upper byte) for terminating programs
   897                                  
   898                                  EXIT_TERMINATE		EQU	0
   899                                  EXIT_ABORT		EQU	0
   900                                  EXIT_CTRL_C		EQU	1
   901                                  EXIT_HARD_ERROR 	EQU	2
   902                                  EXIT_KEEP_PROCESS	EQU	3
   903                                  
   904                                  ;
   905                                  ; EXE file header
   906                                  ;
   907                                  
   908                                  struc EXE
   909 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
   910 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
   911 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
   912 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
   913 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
   914 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
   915 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
   916 0000000E ????                    .SS:          resw 1		; stack of image
   917 00000010 ????                    .SP:          resw 1		; SP of image
   918 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
   919 00000014 ????                    .IP:          resw 1		; IP of entry
   920 00000016 ????                    .CS:          resw 1		; CS of entry
   921 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
   922 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
   923 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
   924                                  .size:
   925                                  endstruc
   926                                  
   927                                  exe_valid_signature     EQU 5A4Dh
   928                                  exe_valid_old_signature EQU 4D5Ah
   929                                  
   930                                  struc symbol_entry
   931 00000000 ????????                .value:	resd 1
   932 00000004 ????                    .type:	resw 1
   933 00000006 ??                      .len:	resb 1
   934 00000007 <res FFh>               .name:	resb 255
   935                                  endstruc
   936                                  
   937                                  ; 07/07/2018 - Retro DOS v3.0
   938                                  ; MSDOS 6.0 (SF.INC, 1991)
   939                                  ; ----------------------------------------------------------------------------
   940                                  ;**	SF.INC - System File Table
   941                                  ;
   942                                  ;   AN000   version 4.00   Jan. 1988
   943                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   944                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   945                                  
   946                                  ;**	System File Table SuperStructure
   947                                  ;
   948                                  ;	The system file table entries are allocated in contiguous groups.
   949                                  ;	There may be more than one such groups; the SF "superstructure"
   950                                  ;	tracks the groups.
   951                                  
   952                                  struc	SFT
   953 00000000 ????????                .SFLink:	resd 1
   954 00000004 ????                    .SFCount:	resw 1		; number of entries
   955 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   956                                  .size:
   957                                  endstruc
   958                                  
   959                                  ; 07/07/2018 - Retro DOS v3.0
   960                                  ; MSDOS 6.0 (SF.INC, 1991)
   961                                  ; ----------------------------------------------------------------------------
   962                                  ;**	System file table entry
   963                                  ;
   964                                  ;	These are the structures which are at SFTABLE in the SF structure.
   965                                  
   966                                  struc SF_ENTRY
   967 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   968                                  				;   if FCB then ref count
   969 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   970 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   971 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   972                                  				; Bit 15 = 1 if remote file
   973                                  				;	 = 0 if local file or device
   974                                  				; Bit 14 = 1 if date/time is not to be
   975                                  				;   set from clock at CLOSE.  Set by
   976                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   977                                  				;   other reseters of the dirty bit
   978                                  				;   (WRITE)
   979                                  				; Bit 13 = Pipe bit (reserved)
   980                                  				;
   981                                  				; Bits 0-7 (old FCB_devid bits)
   982                                  				; If remote file or local file, bit
   983                                  				; 6=0 if dirty Device ID number, bits
   984                                  				; 0-5 if local file.
   985                                  				; bit 7=0 for local file, bit 7
   986                                  				;      =1 for local I/O device
   987                                  				; If local I/O device, bit 6=0 if EOF (input)
   988                                  				;		Bit 5=1 if Raw mode
   989                                  				;		Bit 0=1 if console input device
   990                                  				;		Bit 1=1 if console output device
   991                                  				;		Bit 2=1 if null device
   992                                  				;		Bit 3=1 if clock device
   993 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   994                                  				; to device header if local device,
   995                                  				; points to net device header if
   996                                  				; remote
   997 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   998 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   999 0000000F ????                    .sf_date:	resw	1	; Date associated with file
  1000 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
  1001 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
  1002                                  
  1003                                  ; Starting here, the next 7 bytes may be used by the file system to store an
  1004                                  ; ID
  1005                                  
  1006                                  ; 09/07/2018 - Retro DOS v3.0
  1007                                  
  1008                                  ; MSDOS 3.3 SF.INC, 1987
  1009 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
  1010 0000001B ????                    .sf_lstclus	resw	1	; Last cluster accessed
  1011 0000001D ????                    .sf_dirsec:	resw	1	; Sector number of directory sector
  1012                                  				; for this file
  1013 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
  1014                                  
  1015                                  ; MSDOS 6.0, SF.INC, 1991
  1016                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
  1017                                  ;.sf_dirsec:	resd	1	; Sector number of directory sector
  1018                                  ;				; for this file
  1019                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
  1020                                  
  1021                                  ; End of 7 bytes of file-system specific info.
  1022                                  
  1023 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
  1024                                  				; directory entry.  This is used by
  1025                                  				; close to detect file deleted and
  1026                                  				; disk changed errors.
  1027                                  ; SHARING INFO
  1028 0000002B ????????                .sf_chain:	resd	1	; link to next SF
  1029 0000002F ????                    .sf_UID:	resw	1
  1030 00000031 ????                    .sf_PID:	resw	1
  1031 00000033 ????                    .sf_MFT:	resw	1
  1032                                  
  1033                                  ; MSDOS 6.0, SF.INC, 1991
  1034                                  ;.sf_lstclus:	resw	1	;AN009; Last cluster accessed
  1035                                  ;.sf_IFS_HDR:	resd	1
  1036                                  
  1037                                  .size:
  1038                                  endstruc
  1039                                  
  1040                                  ; 20/07/2018
  1041                                  ; MSDOS 3.3, SF.INC, 1987
  1042                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
  1043                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
  1044                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
  1045                                  ; MSDOS 6.0, SDF.INC, 1991
  1046                                  %define sf_fsda	     SF_ENTRRY.sf_cluspos ; byte ;DOS 4.00
  1047                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
  1048                                  
  1049                                  ; 19/07/2018
  1050                                  
  1051                                  ; MSDOS 3.3, SF.INC, 1987
  1052                                  
  1053                                  sf_default_number  EQU	5
  1054                                  
  1055                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
  1056                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
  1057                                  ; by placing a -1 in the ref_count field.
  1058                                  
  1059                                  sf_busy EQU -1
  1060                                  
  1061                                  ; mode mask for FCB detection
  1062                                  sf_isFCB		EQU	1000000000000000B
  1063                                  
  1064                                  ; Flag word masks
  1065                                  sf_isnet		EQU	1000000000000000B
  1066                                  sf_close_nodate 	EQU	0100000000000000B
  1067                                  sf_pipe 		EQU	0010000000000000B
  1068                                  sf_no_inherit		EQU	0001000000000000B
  1069                                  sf_net_spool		EQU	0000100000000000B
  1070                                  
  1071                                  ; 19/04/2018
  1072                                  sf_entry_size equ SF_ENTRY.size ; 53
  1073                                  
  1074                                  ;                                                                          ;
  1075                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1076                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1077                                  
  1078                                  ; 09/07/2018 - Retro DOS v3.0
  1079                                  ; (ARENA.INC, MSDOS 3.3, 1987)
  1080                                  ; ----------------------------------------------------------------------------
  1081                                  ;BREAK <Memory arena structure>
  1082                                  
  1083                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1084                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1085                                  ;                                                                          ;
  1086                                  ;
  1087                                  ; arena item
  1088                                  ;
  1089                                  
  1090                                  struc ARENA
  1091 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1092 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1093 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1094                                  endstruc
  1095                                  
  1096                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1097                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1098                                  ; Change them and change ALLOC.ASM.
  1099                                  
  1100                                  arena_owner_system  EQU 0               ; free block indication
  1101                                  
  1102                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1103                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1104                                  
  1105                                  ; 04/08/2018 - Retro DOS v3.0
  1106                                  ; (ARENA.INC, MSDOS 6.0, 1991)
  1107                                  
  1108                                  FIRST_FIT	EQU	00000000B
  1109                                  BEST_FIT	EQU	00000001B
  1110                                  LAST_FIT	EQU	00000010B
  1111                                  
  1112                                  ; MSDOS 6.0
  1113                                  ;LOW_FIRST	EQU	00000000B	; M001
  1114                                  ;HIGH_FIRST	EQU	10000000B	; M001
  1115                                  ;HIGH_ONLY	EQU	01000000B	; M001
  1116                                  
  1117                                  ;LINKSTATE	EQU	00000001B	; M002
  1118                                  
  1119                                  ;HF_MASK		EQU	~HIGH_FIRST	; M001
  1120                                  ;HO_MASK		EQU	~HIGH_ONLY	; M001
  1121                                  
  1122                                  ;STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1123                                  						; M026: used to mask of bits
  1124                                  						; M026: 6 & 7 of AllocMethod
  1125                                  
  1126                                  ; 07/07/2018 - Retro DOS v3.0
  1127                                  ; (MI.INC, MSDOS 6.0, 1991)
  1128                                  ; ----------------------------------------------------------------------------
  1129                                  ;BREAK <Machine instruction, flag definitions and character types>
  1130                                  
  1131                                  mi_INT		EQU	0CDh
  1132                                  mi_Long_JMP	EQU	0EAh
  1133                                  mi_Long_CALL	EQU	09Ah
  1134                                  mi_Long_RET	EQU	0CBh
  1135                                  mi_Near_RET	EQU	0C3h
  1136                                  
  1137                                  ;			xxxxoditszxaxpxc
  1138                                  f_Overflow	EQU	0000100000000000B
  1139                                  f_Direction	EQU	0000010000000000B
  1140                                  f_Interrupt	EQU	0000001000000000B
  1141                                  f_Trace 	EQU	0000000100000000B
  1142                                  f_Sign		EQU	0000000010000000B
  1143                                  f_Zero		EQU	0000000001000000B
  1144                                  f_Aux		EQU	0000000000010000B
  1145                                  f_Parity	EQU	0000000000000100B
  1146                                  f_Carry 	EQU	0000000000000001B
  1147                                  
  1148                                  ; <Standard I/O assignments>
  1149                                  
  1150                                  stdin       EQU     0
  1151                                  stdout      EQU     1
  1152                                  stderr      EQU     2
  1153                                  stdaux      EQU     3
  1154                                  stdprn      EQU     4
  1155                                  
  1156                                  ; <Xenix subfunction assignments>
  1157                                  
  1158                                  open_for_read   EQU 0
  1159                                  open_for_write  EQU 1
  1160                                  open_for_both   EQU 2
  1161                                  
  1162                                  ; 13/07/2018 - Retro DOS v3.0
  1163                                  ; (FILEMODE.INC, MSDOS 6.0, 1991)
  1164                                  
  1165                                  access_mask	EQU 0Fh ; 09/08/2018
  1166                                  
  1167                                  EXEC_OPEN	EQU 3		; access code of 3 indicates that open was 
  1168                                  				; made from exec
  1169                                  SHARING_MASK	    equ 0F0h
  1170                                  SHARING_COMPAT	    equ 000h
  1171                                  SHARING_DENY_BOTH   equ 010h
  1172                                  SHARING_DENY_WRITE  equ 020h
  1173                                  SHARING_DENY_READ   equ 030h
  1174                                  SHARING_DENY_NONE   equ 040h
  1175                                  SHARING_NET_FCB     equ 070h
  1176                                  SHARING_NO_INHERIT  equ 080h
  1177                                  
  1178                                  ; 09/07/2018 - Retro DOS v3.0
  1179                                  ; (SYSCALL.INC, MSDOS 3.3, 1987)
  1180                                  ; ----------------------------------------------------------------------------
  1181                                  
  1182                                  ; <system call definitions>
  1183                                  
  1184                                  ABORT                           EQU 0   ;  0      0
  1185                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1186                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1187                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1188                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1189                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1190                                  RAW_CON_IO                      EQU 6   ;  6      6
  1191                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1192                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1193                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1194                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1195                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1196                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1197                                  DISK_RESET                      EQU 13  ; 13      D
  1198                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1199                                  FCB_OPEN                        EQU 15  ; 15      F
  1200                                  FCB_CLOSE                       EQU 16  ; 16     10
  1201                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1202                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1203                                  FCB_DELETE                      EQU 19  ; 19     13
  1204                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1205                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1206                                  FCB_CREATE                      EQU 22  ; 22     16
  1207                                  FCB_RENAME                      EQU 23  ; 23     17
  1208                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1209                                  SET_DMA                         EQU 26  ; 26     1A
  1210                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1211                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1212                                  ;                                                                          ;
  1213                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1214                                  ;                                                                          ;
  1215                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1216                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1217                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1218                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1219                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1220                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1221                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1222                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1223                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1224                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1225                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1226                                  GET_DATE                        EQU 42  ; 42     2A
  1227                                  SET_DATE                        EQU 43  ; 43     2B
  1228                                  GET_TIME                        EQU 44  ; 44     2C
  1229                                  SET_TIME                        EQU 45  ; 45     2D
  1230                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1231                                  ; Extended functionality group
  1232                                  GET_DMA                         EQU 47  ; 47     2F
  1233                                  GET_VERSION                     EQU 48  ; 48     30
  1234                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1235                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1236                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1237                                  ;                                                                          ;
  1238                                  GET_DPB                         EQU 50  ; 50     32
  1239                                  ;                                                                          ;
  1240                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1241                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1242                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1243                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1244                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1245                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1246                                  CHAR_OPER                       EQU 55  ; 55     37
  1247                                  INTERNATIONAL                   EQU 56  ; 56     38
  1248                                  ; XENIX CALLS
  1249                                  ;   Directory Group
  1250                                  MKDIR                           EQU 57  ; 57     39
  1251                                  RMDIR                           EQU 58  ; 58     3A
  1252                                  CHDIR                           EQU 59  ; 59     3B
  1253                                  ;   File Group
  1254                                  CREAT                           EQU 60  ; 60     3C
  1255                                  OPEN                            EQU 61  ; 61     3D
  1256                                  CLOSE                           EQU 62  ; 62     3E
  1257                                  READ                            EQU 63  ; 63     3F
  1258                                  WRITE                           EQU 64  ; 64     40
  1259                                  UNLINK                          EQU 65  ; 65     41
  1260                                  LSEEK                           EQU 66  ; 66     42
  1261                                  CHMOD                           EQU 67  ; 67     43
  1262                                  IOCTL                           EQU 68  ; 68     44
  1263                                  XDUP                            EQU 69  ; 69     45
  1264                                  XDUP2                           EQU 70  ; 70     46
  1265                                  CURRENT_DIR                     EQU 71  ; 71     47
  1266                                  ;    Memory Group
  1267                                  ALLOC                           EQU 72  ; 72     48
  1268                                  DEALLOC                         EQU 73  ; 73     49
  1269                                  SETBLOCK                        EQU 74  ; 74     4A
  1270                                  ;    Process Group
  1271                                  EXEC                            EQU 75  ; 75     4B
  1272                                  EXIT                            EQU 76  ; 76     4C
  1273                                  _WAIT				EQU 77  ; 77     4D
  1274                                  FIND_FIRST                      EQU 78  ; 78     4E
  1275                                  ;   Special Group
  1276                                  FIND_NEXT                       EQU 79  ; 79     4F
  1277                                  ; SPECIAL SYSTEM GROUP
  1278                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1279                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1280                                  ;                                                                          ;
  1281                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1282                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1283                                  GET_IN_VARS                     EQU 82  ; 82     52
  1284                                  SETDPB                          EQU 83  ; 83     53
  1285                                  ;                                                                          ;
  1286                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1287                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1288                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1289                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1290                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1291                                  ;                                                                          ;
  1292                                  DUP_PDB                         EQU 85  ; 85     55
  1293                                  ;                                                                          ;
  1294                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1295                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1296                                  RENAME                          EQU 86  ; 86     56
  1297                                  FILE_TIMES                      EQU 87  ; 87     57
  1298                                  ALLOCOPER			EQU 88	; 88	 58
  1299                                  ; Network extention system calls
  1300                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1301                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1302                                  CREATENEWFILE			EQU 91	; 91	 5B
  1303                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1304                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1305                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1306                                  ;									   ;
  1307                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1308                                  					;	    CloseByName, CloseUser,
  1309                                  					;	    CloseUserProcess,
  1310                                  					;	    GetOpenFileList
  1311                                  ;									   ;
  1312                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1313                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1314                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1315                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1316                                  XNAMETRANS			EQU 96	; 96	 60
  1317                                  PATHPARSE			EQU 97	; 97	 61
  1318                                  GETCURRENTPSP			EQU 98	; 98	 62
  1319                                  HONGEUL 			EQU 99	; 99	 63
  1320                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1321                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1322                                  ;									   ;
  1323                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1324                                  ;									   ;
  1325                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1326                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1327                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1328                                  GETSETCDPG			EQU 102 ; 102	 66
  1329                                  EXTHANDLE			EQU 103 ; 103	 67
  1330                                  COMMIT				EQU 104 ; 104	 68
  1331                                  
  1332                                  ; 09/07/2018 - Retro DOS v3.0
  1333                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1334                                  
  1335                                  ;GetSetMediaID			EQU 105 ; 105	 69
  1336                                  ;IFS_IOCTL			EQU 107 ; 107	 6B
  1337                                  ;ExtOpen 			EQU 108 ; 108	 6C
  1338                                  
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  ;ifdef ROMEXEC
  1343                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1344                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1345                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1346                                  ;endif
  1347                                  ;                                                                          ;
  1348                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1349                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1350                                  
  1351                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1352                                  ;OEM_C1				EQU 249 ; 249    F9
  1353                                  ;OEM_C2				EQU 250 ; 250    FA
  1354                                  ;OEM_C3				EQU 251 ; 251    FB
  1355                                  ;OEM_C4				EQU 252 ; 252    FC
  1356                                  ;OEM_C5				EQU 253 ; 253    FD
  1357                                  ;OEM_C6				EQU 254 ; 254    FE
  1358                                  ;OEM_C7				EQU 255 ; 255    FF
  1359                                  
  1360                                  ;============================================================================
  1361                                  ; VERSIONA.INC (MSDOS 3.3, 24/07/1987)
  1362                                  ;============================================================================
  1363                                  ; 08/07/2018 - Retro DOS 3.0
  1364                                  
  1365                                  MAJOR_VERSION   EQU     3
  1366                                  MINOR_VERSION   EQU     30
  1367                                  
  1368                                  ;============================================================================
  1369                                  ; DOSSYM_V211.ASM (-*-)
  1370                                  ;============================================================================
  1371                                  
  1372                                  ;DOS_MAJOR_VERSION   EQU      2
  1373                                  ;DOS_MINOR_VERSION   EQU     11
  1374                                  
  1375                                  ;============================================================================
  1376                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1377                                  ;============================================================================
  1378                                  ; 09/07/2018 - Retro DOS 3.0
  1379                                  
  1380                                  ;
  1381                                  ; Current structure of the data returned by the international call
  1382                                  ;
  1383                                  
  1384                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1385                                  .Date_tim_format:
  1386 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1387                                  .Currency_sym:
  1388 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1389                                  .Thous_sep:
  1390 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1391                                  .Decimal_sep:
  1392 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1393                                  .Date_sep:
  1394 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1395                                  .Time_sep:
  1396 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1397                                  .Bit_field:	
  1398 0000000F ??                      		RESB 1		; Bit values
  1399                                                                     ;   Bit 0 = 0 if currency symbol first
  1400                                                                     ;         = 1 if currency symbol last
  1401                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1402                                                                     ;         = 1 if space after currency symbol
  1403                                  .Currency_cents:
  1404 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1405                                  .Time_24:
  1406 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1407                                  .Map_call:
  1408 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1409 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1410                                  				;  in pieces.
  1411                                  .Data_sep:
  1412 00000016 ????                    		RESB	2	; Data list separator character
  1413                                  .size:		
  1414                                  endstruc
  1415                                  
  1416                                  ;
  1417                                  ; Max size of the block returned by the INTERNATIONAL call
  1418                                  ;
  1419                                  internat_block_max	EQU	32
  1420                                  
  1421                                  ;============================================================================
  1422                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1423                                  ;============================================================================
  1424                                  ; 08/07/2018 - Retro DOS v3.0
  1425                                  
  1426                                  ;SysInitVars STRUC
  1427                                  struc SYSI
  1428 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1429 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1430 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1431 0000000C ????????                .CON:	    resd 1		; CON device
  1432 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1433 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1434 00000016 ????????                .CDS:	    resd 1		; CDS list
  1435 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1436 0000001E ????                    .Keep:	    resw 1		; keep count
  1437 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1438 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1439 00000022 ????????                .DEV:	    resd 1		; device list
  1440                                  ; 09/07/2018
  1441                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1442                                  ; Following parameters are used with MDSOS 6.0 (Retro DOS v4.0)
  1443 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1444 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1445 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1446 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1447 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1448 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1449 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1450 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1451 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1452 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1453 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1454 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1455                                  endstruc
  1456                                  ;SysInitVars ENDS
  1457                                  
  1458                                  ;This is added for more information exchange between DOS, BIOS.
  1459                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1460                                  
  1461                                  ;SysInitVars_Ext struc
  1462                                  struc SYSI_EXT
  1463 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1464 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1465                                  endstruc
  1466                                  ;SysInitVars_Ext ends
  1467                                  
  1468                                  ;============================================================================
  1469                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1470                                  ;============================================================================
  1471                                  ; 09/07/2018 - Retro DOS v3.0
  1472                                  
  1473                                  ;*** J.K.
  1474                                  ;General Guide -
  1475                                  ;Category Code:
  1476                                  ; 0... .... DOS Defined
  1477                                  ; 1... .... User defined
  1478                                  ; .xxx xxxx Code
  1479                                  
  1480                                  ;Function Code:
  1481                                  ; 0... .... Return error if unsupported
  1482                                  ; 1... .... Ignore if unsupported
  1483                                  ; .0.. .... Intercepted by DOS
  1484                                  ; .1.. .... Passed to driver
  1485                                  ; ..0. .... Sends data/commands to device
  1486                                  ; ..1. .... Quries data/info from device
  1487                                  ; ...x .... Subfunction
  1488                                  ;
  1489                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1490                                  ; function set.  It plays no critical role; some functions may contain both
  1491                                  ; command and query elements. The convention is that such commands are
  1492                                  ; defined as "sends data".
  1493                                  
  1494                                  ;*****************************;*
  1495                                  ; BLOCK DRIVERS 	      ;*
  1496                                  ;*****************************;*
  1497                                  
  1498                                  ; IOCTL SUB-FUNCTIONS
  1499                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1500                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1501                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1502                                  IOCTL_READ_HANDLE	EQU	2
  1503                                  IOCTL_WRITE_HANDLE	EQU	3
  1504                                  IOCTL_READ_DRIVE	EQU	4
  1505                                  IOCTL_WRITE_DRIVE	EQU	5
  1506                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1507                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1508                                  IOCTL_CHANGEABLE?	EQU	8
  1509                                  IOCTL_DeviceLocOrRem?	EQU	9
  1510                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1511                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1512                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1513                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1514                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1515                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1516                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1517                                  ; (MSDOS 6.0)
  1518                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1519                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1520                                  
  1521                                  ; GENERIC IOCTL CATEGORY CODES
  1522                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1523                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1524                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1525                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1526                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1527                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1528                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1529                                  
  1530                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1531                                  RAWIO			EQU	8
  1532                                  
  1533                                  ; RAWIO SUB-FUNCTIONS
  1534                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1535                                  GET_DEVICE_PARAMETERS	EQU	60H
  1536                                  SET_DEVICE_PARAMETERS	EQU	40H
  1537                                  READ_TRACK		EQU	61H
  1538                                  WRITE_TRACK		EQU	41H
  1539                                  VERIFY_TRACK		EQU	62H
  1540                                  FORMAT_TRACK		EQU	42H
  1541                                  ; (MSDOS 6.0)
  1542                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1543                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1544                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1545                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1546                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1547                                  
  1548                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1549                                  BUILD_DEVICE_BPB	EQU	000000001B
  1550                                  
  1551                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1552                                  INSTALL_FAKE_BPB	EQU	000000001B
  1553                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1554                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1555                                  
  1556                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1557                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1558                                  STATUS_FOR_FORMAT	EQU	000000001B
  1559                                  ; (MSDOS 6.0)
  1560                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1561                                  
  1562                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1563                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1564                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1565                                  
  1566                                  ; DEVICETYPE VALUES
  1567                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1568                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1569                                  DEV_5INCH		EQU	0
  1570                                  DEV_5INCH96TPI		EQU	1
  1571                                  DEV_3INCH720KB		EQU	2
  1572                                  DEV_8INCHSS		EQU	3
  1573                                  DEV_8INCHDS		EQU	4
  1574                                  DEV_HARDDISK		EQU	5
  1575                                  DEV_OTHER		EQU	7
  1576                                  ; (MSDOS 6.0)
  1577                                  ;DEV_3INCH1440KB	EQU	7
  1578                                  DEV_3INCH2880KB		EQU	9
  1579                                  ; Retro DOS v2.0 - 26/03/2018
  1580                                  ;;DEV_TAPE		EQU	6
  1581                                  ;;DEV_ERIMO		EQU	8
  1582                                  ;DEV_3INCH2880KB	EQU	9
  1583                                  DEV_3INCH1440KB		EQU	10
  1584                                  
  1585                                  ; (MSDOS 3.3)
  1586                                  ;MAX_DEV_TYPE		EQU	7
  1587                                  
  1588                                  ; (MSDOS 6.0)
  1589                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1590                                  					; CURRENTLY SUPPORT.
  1591                                  
  1592                                  struc A_SECTORTABLE
  1593 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1594 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1595                                  .size:
  1596                                  endstruc
  1597                                  
  1598                                  ;============================================================================
  1599                                  ; DEVSYM.ASM
  1600                                  ;============================================================================
  1601                                  
  1602                                  ;SUBTTL DEVICE TABLE AND SRH DEFINITION
  1603                                  ;PAGE
  1604                                  
  1605                                  ; 07/07/2018 - Retro DOS v3.0
  1606                                  ; (DEVSYM.INC, MSDOS 6.0, 1991)
  1607                                  
  1608                                  ;**	DevSym.inc - Device Symbols
  1609                                  
  1610                                  ; The device table list has the form:
  1611                                  struc	SYSDEV
  1612 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1613 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1614 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1615 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1616 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1617                                  .size:
  1618                                  endstruc
  1619                                  
  1620                                  ;
  1621                                  ; ATTRIBUTE BIT MASKS
  1622                                  ;
  1623                                  ; CHARACTER DEVICES:
  1624                                  ;
  1625                                  ; BIT 15 -> MUST BE 1
  1626                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1627                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1628                                  ;     12 -> UNUSED
  1629                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1630                                  ;     10 -> MUST BE 0
  1631                                  ;      9 -> MUST BE 0
  1632                                  ;      8 -> UNUSED
  1633                                  ;      7 -> UNUSED
  1634                                  ;      6 -> UNUSED
  1635                                  ;      5 -> UNUSED
  1636                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1637                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1638                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1639                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1640                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1641                                  ;
  1642                                  ; BLOCK DEVICES:
  1643                                  ;
  1644                                  ; BIT 15 -> MUST BE 0
  1645                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1646                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1647                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1648                                  ;	    THE SAME PLACE.
  1649                                  ;     12 -> UNUSED
  1650                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1651                                  ;     10 -> MUST BE 0
  1652                                  ;      9 -> MUST BE 0
  1653                                  ;      8 -> UNUSED
  1654                                  ;      7 -> UNUSED
  1655                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1656                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1657                                  ;      5 -> UNUSED
  1658                                  ;      4 -> UNUSED
  1659                                  ;      3 -> UNUSED
  1660                                  ;      2 -> UNUSED
  1661                                  ;      1 -> UNUSED
  1662                                  ;      0 -> UNUSED
  1663                                  ;
  1664                                  
  1665                                  ;Attribute bit masks
  1666                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
  1667                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1668                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1669                                  
  1670                                  ; 09/07/2018 - Retro DOS
  1671                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1672                                  
  1673                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1674                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1675                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1676                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1677                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1678                                  				;  ENTRY POINTS, 0 IF NOT
  1679                                  
  1680                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1681                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1682                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1683                                  				;  ITS CURRENT FORM.
  1684                                  
  1685                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1686                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1687                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1688                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1689                                  
  1690                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1691                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1692                                  				;LOGICAL DRIVES, AND SUPPORTS
  1693                                  				;GENERIC IOCTL CALLS.
  1694                                  				;FOR CHARACTER DEVICES, THIS
  1695                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1696                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1697                                  
  1698                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1699                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1700                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1701                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1702                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1703                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1704                                  
  1705                                  ;Static Reguest Header
  1706                                  struc	SRHEAD
  1707 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1708 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1709 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1710 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1711 00000005 ????????????????                	resb 8		;Reserved for queue links
  1712                                  .size:
  1713                                  endstruc
  1714                                  
  1715                                  ;Status word masks
  1716                                  STERR   EQU     8000H           ;Bit 15 - Error
  1717                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1718                                  STDON   EQU     0100H           ;Bit 8 - Done
  1719                                  STECODE EQU     00FFH           ;Error code
  1720                                  WRECODE EQU     0
  1721                                  
  1722                                  ;Function codes
  1723                                  DEVINIT EQU     0               ;Initialization
  1724                                  DINITHL EQU     26              ;Size of init header
  1725                                  DEVMDCH EQU     1               ;Media check
  1726                                  DMEDHL  EQU     15              ;Size of media check header
  1727                                  DEVBPB  EQU     2               ;Get BPB
  1728                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1729                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1730                                  DEVRD   EQU     4               ;Read
  1731                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1732                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1733                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1734                                  DEVIST  EQU     6               ;Input status
  1735                                  DSTATHL EQU     13              ;Size of status header
  1736                                  DEVIFL  EQU     7               ;Input flush
  1737                                  DFLSHL  EQU     15              ;Size of flush header
  1738                                  DEVWRT  EQU     8               ;Write
  1739                                  DEVWRTV EQU     9               ;Write with verify
  1740                                  DEVOST  EQU     10              ;Output status
  1741                                  DEVOFL  EQU     11              ;Output flush
  1742                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1743                                  
  1744                                  ; 09/07/2018 - Retro DOS v3.0
  1745                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1746                                  
  1747                                  DEVOPN	EQU	13		;DEVICE OPEN
  1748                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1749                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1750                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1751                                  ; 07/08/2018 - Retro DOS v3.0
  1752                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1753                                  GENIOCTL EQU	19
  1754                                  
  1755                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1756                                  ;		     20
  1757                                  ;		     21
  1758                                  ;		     22
  1759                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1760                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1761                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1762                                  
  1763                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1764                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1765                                  
  1766                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1767                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1768                                  ;
  1769                                  
  1770                                  struc IOCTL_REQ
  1771 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1772                                  				; GENERIC IOCTL ADDITION.
  1773 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1774 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1775 0000000F ????                    .REG_SI:	resw 1
  1776 00000011 ????                    .REG_DI:	resw 1
  1777 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1778                                  .size: ; 07/08/2018
  1779                                  endstruc
  1780                                  
  1781                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1782                                  GEN_IOCTL_WRT_TRK EQU	40H
  1783                                  GEN_IOCTL_RD_TRK  EQU	60H
  1784                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1785                                  
  1786                                  ;============================================================================
  1787                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1788                                  ;============================================================================
  1789                                  ; 16/07/2018 - Retro DOS v3.0 
  1790                                  
  1791                                  ;**	ERROR.INC - DOS Error Codes
  1792                                  ;
  1793                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1794                                  ;    return error codes through AX. If an error occurred then
  1795                                  ;    the carry bit will be set and the error code is in AX. If no error
  1796                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1797                                  ;
  1798                                  ;    Since the set of error codes is being extended as we extend the operating
  1799                                  ;    system, we have provided a means for applications to ask the system for a
  1800                                  ;    recommended course of action when they receive an error.
  1801                                  ;
  1802                                  ;    The GetExtendedError system call returns a universal error, an error
  1803                                  ;    location and a recommended course of action. The universal error code is
  1804                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1805                                  ;    is issued.
  1806                                  
  1807                                  
  1808                                  ;	2.0 error codes
  1809                                  
  1810                                  error_invalid_function		EQU	1
  1811                                  error_file_not_found		EQU	2
  1812                                  error_path_not_found		EQU	3
  1813                                  error_too_many_open_files	EQU	4
  1814                                  error_access_denied		EQU	5
  1815                                  error_invalid_handle		EQU	6
  1816                                  error_arena_trashed		EQU	7
  1817                                  error_not_enough_memory 	EQU	8
  1818                                  error_invalid_block		EQU	9
  1819                                  error_bad_environment		EQU	10
  1820                                  error_bad_format		EQU	11
  1821                                  error_invalid_access		EQU	12
  1822                                  error_invalid_data		EQU	13
  1823                                  ;**** reserved			EQU	14	; *****
  1824                                  error_invalid_drive		EQU	15
  1825                                  error_current_directory 	EQU	16
  1826                                  error_not_same_device		EQU	17
  1827                                  error_no_more_files		EQU	18
  1828                                  
  1829                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1830                                  
  1831                                  error_write_protect		EQU	19
  1832                                  error_bad_unit			EQU	20
  1833                                  error_not_ready 		EQU	21
  1834                                  error_bad_command		EQU	22
  1835                                  error_CRC			EQU	23
  1836                                  error_bad_length		EQU	24
  1837                                  error_seek			EQU	25
  1838                                  error_not_DOS_disk		EQU	26
  1839                                  error_sector_not_found		EQU	27
  1840                                  error_out_of_paper		EQU	28
  1841                                  error_write_fault		EQU	29
  1842                                  error_read_fault		EQU	30
  1843                                  error_gen_failure		EQU	31
  1844                                  
  1845                                  ;	the new 3.0 error codes reported through INT 24
  1846                                  
  1847                                  error_sharing_violation 	EQU	32
  1848                                  error_lock_violation		EQU	33
  1849                                  error_wrong_disk		EQU	34
  1850                                  error_FCB_unavailable		EQU	35
  1851                                  error_sharing_buffer_exceeded	EQU	36
  1852                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  1853                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  1854                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  1855                                  
  1856                                  ;	New OEM network-related errors are 50-79
  1857                                  
  1858                                  error_not_supported		EQU	50
  1859                                  
  1860                                  error_net_access_denied		EQU	65	;M028
  1861                                  
  1862                                  ;	End of INT 24 reportable errors
  1863                                  
  1864                                  error_file_exists		EQU	80
  1865                                  error_DUP_FCB			EQU	81	; *****
  1866                                  error_cannot_make		EQU	82
  1867                                  error_FAIL_I24			EQU	83
  1868                                  
  1869                                  ;	New 3.0 network related error codes
  1870                                  
  1871                                  error_out_of_structures 	EQU	84
  1872                                  error_already_assigned		EQU	85
  1873                                  error_invalid_password		EQU	86
  1874                                  error_invalid_parameter 	EQU	87
  1875                                  error_NET_write_fault		EQU	88
  1876                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  1877                                  
  1878                                  ;	BREAK <Interrupt 24 error codes>
  1879                                  
  1880                                  ;**	Int24 Error Codes
  1881                                  
  1882                                  error_I24_write_protect 	EQU	0
  1883                                  error_I24_bad_unit		EQU	1
  1884                                  error_I24_not_ready		EQU	2
  1885                                  error_I24_bad_command		EQU	3
  1886                                  error_I24_CRC			EQU	4
  1887                                  error_I24_bad_length		EQU	5
  1888                                  error_I24_Seek			EQU	6
  1889                                  error_I24_not_DOS_disk		EQU	7
  1890                                  error_I24_sector_not_found	EQU	8
  1891                                  error_I24_out_of_paper		EQU	9
  1892                                  error_I24_write_fault		EQU	0Ah
  1893                                  error_I24_read_fault		EQU	0Bh
  1894                                  error_I24_gen_failure		EQU	0Ch
  1895                                  ; NOTE: Code 0DH is used by MT-DOS.
  1896                                  error_I24_wrong_disk		EQU	0Fh
  1897                                  
  1898                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  1899                                  ;
  1900                                  ;	NOTE: ABORT is ALWAYS allowed
  1901                                  
  1902                                  Allowed_FAIL			EQU	00001000B
  1903                                  Allowed_RETRY			EQU	00010000B
  1904                                  Allowed_IGNORE			EQU	00100000B
  1905                                  
  1906                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  1907                                  I24_area			EQU	00000110B  ; 00 if DOS
  1908                                  						   ; 01 if FAT
  1909                                  						   ; 10 if root DIR
  1910                                  						   ; 11 if DATA
  1911                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  1912                                  
  1913                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  1914                                  
  1915                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  1916                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  1917                                  ;	to take for error codes that they don't explicitly understand.
  1918                                  
  1919                                  ;	Values for error CLASS
  1920                                  
  1921                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  1922                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  1923                                  errCLASS_Auth		EQU	3	; Permission problem
  1924                                  errCLASS_Intrn		EQU	4	; Internal System Error
  1925                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  1926                                  errCLASS_SysFail	EQU	6	; System Failure
  1927                                  errCLASS_Apperr 	EQU	7	; Application Error
  1928                                  errCLASS_NotFnd 	EQU	8	; Not Found
  1929                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  1930                                  errCLASS_Locked 	EQU	10	; Locked
  1931                                  errCLASS_Media		EQU	11	; Media Failure
  1932                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  1933                                  errCLASS_Unk		EQU	13	; Unknown/other
  1934                                  
  1935                                  ;	Values for error ACTION
  1936                                  
  1937                                  errACT_Retry		EQU	1	; Retry
  1938                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  1939                                  errACT_User		EQU	3	; Ask user to regive info
  1940                                  errACT_Abort		EQU	4	; abort with clean up
  1941                                  errACT_Panic		EQU	5	; abort immediately
  1942                                  errACT_Ignore		EQU	6	; ignore
  1943                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  1944                                  
  1945                                  ;	Values for error LOCUS
  1946                                  
  1947                                  errLOC_Unk		EQU	1	; No appropriate value
  1948                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  1949                                  errLOC_Net		EQU	3	; Network
  1950                                  errLOC_SerDev		EQU	4	; Serial Device
  1951                                  errLOC_Mem		EQU	5	; Memory
  1952                                  
  1953                                  ;============================================================================
  1954                                  ; MULT.INC (MSDOS 3.3, 1987)
  1955                                  ;============================================================================
  1956                                  
  1957                                  ;Break <Critical section and Multiplex channels>
  1958                                  
  1959                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1960                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1961                                  ;									   ;
  1962                                  ; Critical section definitions
  1963                                  ;
  1964                                  ; These below are subject to leave-all sections
  1965                                  critDisk    EQU     1			; Disk I/O critical section
  1966                                  critDevice  EQU     2			; Device I/O critical section
  1967                                  critShare   EQU     1			; Sharer I/O critical section
  1968                                  critMem     EQU     1			; memory maintenance critical section
  1969                                  critNet     EQU     5			; network critical section
  1970                                  critSFT     EQU     1			; sft table allocation
  1971                                  ; These below are not subject to leave-all sections
  1972                                  critASSIGN  EQU     8			; Assign has munged a system call
  1973                                  ;									   ;
  1974                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1975                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1976                                  
  1977                                  ;
  1978                                  ; The current set of defined multiplex channels is (* means documented):
  1979                                  ;
  1980                                  ;   Channel(h)	Issuer		Receiver    Function
  1981                                  ;      00	server		PSPRINT     print job control
  1982                                  ;     *01	print/apps	PRINT	    Queueing of files
  1983                                  ;      02	BIOS		REDIR	    signal open/close of printers
  1984                                  ;
  1985                                  ;      05	command 	REDIR	    obtain text of net int 24 message
  1986                                  ;     *06	server/assign	ASSIGN	    Install check
  1987                                  ;
  1988                                  ;      08	external driver IBMBIO	    interface to internal routines
  1989                                  ;
  1990                                  ;      10	sharer/server	Sharer	    install check
  1991                                  ;      11	DOS/server	Redir	    install check/redirection funcs
  1992                                  ;      12	sharer/redir	DOS	    dos functions and structure maint
  1993                                  ;      13	MSNET		MSNET	    movement of NCBs
  1994                                  ;      14	DOS		NLSFUNC     down load NLS country info,DOS 3.3
  1995                                  ;      14	Apps		Popup	    DOS 4.XX popup screen functions
  1996                                  ;	  ***> NOTE <***  Yes there are 2 users of 14h but since DOS 4.XX
  1997                                  ;			  doesn't use NLSFUNC, there is no conflict
  1998                                  ;      15	Apps		MSCDEX	    CD-ROM redirector interface
  1999                                  ;      16	Winoldap (?)	WIN386	    Private Windows communication
  2000                                  ;      17	Winoldap (?)	WIN386	    Win386 clipboard interface
  2001                                  ;      18	Apps		MS-Manager  Toggle interface to manager
  2002                                  ;      19,(13h) external driver IBMBIO	    Reset_Int_13, allows installation
  2003                                  ;					    of alternative INT_13 drivers after
  2004                                  ;					    boot_up
  2005                                  ;      B0	GRAFTABL	GRAFTABL
  2006                                  ;
  2007                                  
  2008                                  MultSHARE   EQU     10h 		; sharer
  2009                                      ;	1   MFT_enter
  2010                                      ;	2   MFTClose
  2011                                      ;	3   MFTclU
  2012                                      ;	4   MFTCloseP
  2013                                      ;	5   MFTCloN
  2014                                      ;	6   set_block
  2015                                      ;	7   clr_block
  2016                                      ;	8   chk_block
  2017                                      ;	9   MFT_get
  2018                                      ;	10  ShSave
  2019                                      ;	11  ShChk
  2020                                      ;	12  ShCol
  2021                                      ;	13  ShCloseFile
  2022                                  
  2023                                  MultNET     EQU     11h 		; Network support
  2024                                      ;	1   NET_RMDIR
  2025                                      ;	2   NET_SEQ_RMDIR
  2026                                      ;	3   NET_MKDIR
  2027                                      ;	4   NET_SEQ_MKDIR
  2028                                      ;	5   NET_CHDIR
  2029                                      ;	6   NET_CLOSE
  2030                                      ;	7   NET_COMMIT
  2031                                      ;	8   NET_READ
  2032                                      ;	9   NET_WRITE
  2033                                      ;	10  NET_LOCK
  2034                                      ;	11  NET_UNLOCK
  2035                                      ;	12  NET_DISK_INFO
  2036                                      ;	13  NET_SET_FILE_ATTRIBUTE
  2037                                      ;	14  NET_SEQ_SET_FILE_ATTRIBUTE
  2038                                      ;	15  NET_GET_FILE_INFO
  2039                                      ;	16  NET_SEQ_GET_FILE_INFO
  2040                                      ;	17  NET_RENAME
  2041                                      ;	18  NET_SEQ_RENAME
  2042                                      ;	19  NET_DELETE
  2043                                      ;	20  NET_SEQ_DELETE
  2044                                      ;	21  NET_OPEN
  2045                                      ;	22  NET_SEQ_OPEN
  2046                                      ;	23  NET_CREATE
  2047                                      ;	24  NET_SEQ_CREATE
  2048                                      ;	25  NET_SEQ_SEARCH_FIRST
  2049                                      ;	26  NET_SEQ_SEARCH_NEXT
  2050                                      ;	27  NET_SEARCH_FIRST
  2051                                      ;	28  NET_SEARCH_NEXT
  2052                                      ;	29  NET_ABORT
  2053                                      ;	30  NET_ASSOPER
  2054                                      ;	31  Printer_SET_STRING
  2055                                      ;	32  NetFlushBuf
  2056                                      ;	33  NetBufWrite
  2057                                      ;	34  NetResetEnvironment
  2058                                      ;	35  NetSpoolCheck
  2059                                      ;	36  NetSpoolClose
  2060                                  
  2061                                  MultDOS     EQU     12h 		; DOS call back
  2062                                      ;	1   DOS_CLOSE
  2063                                      ;	2   RECSET
  2064                                      ;	3   Get DOSGROUP
  2065                                      ;	4   PATHCHRCMP
  2066                                      ;	5   OUT
  2067                                      ;	6   NET_I24_ENTRY
  2068                                      ;	7   PLACEBUF
  2069                                      ;	8   FREE_SFT
  2070                                      ;	9   BUFWRITE
  2071                                      ;	10  SHARE_VIOLATION
  2072                                      ;	11  SHARE_ERROR
  2073                                      ;	12  SET_SFT_MODE
  2074                                      ;	13  DATE16
  2075                                      ;	14  SETVISIT
  2076                                      ;	15  SCANPLACE
  2077                                      ;	16  SKIPVISIT
  2078                                      ;	17  StrCpy
  2079                                      ;	18  StrLen
  2080                                      ;	19  UCase
  2081                                      ;	20  POINTCOMP
  2082                                      ;	21  CHECKFLUSH
  2083                                      ;	22  SFFromSFN
  2084                                      ;	23  GetCDSFromDrv
  2085                                      ;	24  Get_User_Stack
  2086                                      ;	25  GetThisDrv
  2087                                      ;	26  DriveFromText
  2088                                      ;	27  SETYEAR
  2089                                      ;	28  DSUM
  2090                                      ;	29  DSLIDE
  2091                                      ;	30  StrCmp
  2092                                      ;	31  initcds
  2093                                      ;	32  pjfnfromhandle
  2094                                      ;	33  $NameTrans
  2095                                      ;	34  CAL_LK
  2096                                      ;	35  DEVNAME
  2097                                      ;	36  Idle
  2098                                      ;
  2099                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2100                                      ;	0   NLSInstall
  2101                                      ;	1   ChgCodePage
  2102                                      ;	2   GetExtInfo
  2103                                      ;	3   SetCodePage
  2104                                      ;	4   GetCntry
  2105                                      ;
  2106                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2107                                  ;	  it calls Multdos 42 to set up an entry routine address
  2108                                      ;	0   Install status  (reserved)
  2109                                      ;	1   Lookup
  2110                                      ;	2   Insert
  2111                                      ;	3   Delete
  2112                                      ;	4   Purge	    (reserved)
  2113                                  
  2114                                  ;============================================================================
  2115                                  ; FIND.INC (MSDOS 3.3, 1987)
  2116                                  ;============================================================================
  2117                                  ; 09/07/2018 - Retro DOS v3.0
  2118                                  
  2119                                  ;Break	<find first/next buffer>
  2120                                  
  2121                                  struc find_buf
  2122 00000000 ??                      .drive:	    resb 1		; drive of search
  2123 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2124 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2125 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2126 0000000F ????                    .DirStart:  resw 1		; DirStart
  2127 00000011 ??                      .attr:	    resb 1		; attribute found
  2128 00000012 ????                    .time:	    resw 1		; time
  2129 00000014 ????                    .date:	    resw 1		; date
  2130 00000016 ????                    .size_l:    resw 1		; low(size)
  2131 00000018 ????                    .size_h:    resw 1		; high(size)
  2132 0000001A <res Dh>                .pname:	    resb 13		; packed name
  2133                                  .size:
  2134                                  endstruc
  2135                                  
  2136                                  ;============================================================================
  2137                                  ; DOSCNTRY.INC (MSDOS 3.3, 1987)
  2138                                  ;============================================================================
  2139                                  ; 09/07/2018 - Retro DOS v3.0
  2140                                  
  2141                                  ;Equates for COUNTRY INFORMATION.
  2142                                  SetCountryInfo	EQU	1	;country info
  2143                                  SetUcase	EQU	2	;uppercase table
  2144                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2145                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2146                                  SetFileList	EQU	5	;valid file character list
  2147                                  SetCollate	EQU	6	;collating sequence
  2148                                  SetDBCS 	EQU	7	;double byte character set
  2149                                  SetALL		EQU	-1	;all the entries
  2150                                  
  2151                                  
  2152                                  ;DOS country and code page information table structure.
  2153                                  ;Internally, IBMDOS gives a pointer to this table.
  2154                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2155                                  ;this structure.
  2156                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2157 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2158 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2159 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2160 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 5)
  2161 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2162 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2163                                  
  2164 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2165 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2166                                  
  2167 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2168 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2169                                  
  2170 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2171 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2172                                  
  2173 00000060 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2174 00000061 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2175 00000063 ????                    .ccDosCountry:		resw 1	;system country code id
  2176 00000065 ????                    .ccDosCodePage:		resw 1	;system code page id
  2177 00000067 ????                    .ccDFormat:		resw 1	;date format
  2178 00000069 ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2179 0000006E ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2180 00000070 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2181 00000072 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2182 00000074 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2183 00000076 ??                      .ccCFormat:		resb 1	;currency format flags
  2184 00000077 ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2185 00000078 ??                      .ccTFormat:		resb 1	;time format
  2186 00000079 ????????                .ccMono_Ptr:		resd 1	;monocase routine entry point
  2187 0000007D ????                    .ccListSep:		resb 2	;data list separator
  2188 0000007F <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2189                                  .size:
  2190                                  endstruc
  2191                                  
  2192                                  ;Ucase table
  2193                                  struc CC_UCASE_TAB
  2194 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2195 00000002 <res 80h>               .ccUcase_data:		resb 128
  2196                                  endstruc
  2197                                  
  2198                                  ;File Ucase table
  2199                                  struc CC_FILE_UCASE_TAB
  2200 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2201 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2202                                  endstruc
  2203                                  
  2204                                  ;File char list
  2205                                  struc CC_FILE_CHAR_TAB
  2206 00000000 ????                    .ccFilechar_leng:	resw 1
  2207 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2208                                  endstruc
  2209                                  
  2210                                  ;collate table
  2211                                  struc CC_COLLATE_TAB
  2212 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2213 00000002 <res 100h>              .ccCollate_data:	resb 256
  2214                                  endstruc
  2215                                  
  2216                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2217                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) 
  2218                                  
  2219                                  ; 06/08/2018
  2220                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2221                                  
  2222                                  ;CAPITALIZATION equates
  2223                                  CAP_ONE_CHAR	equ	20H
  2224                                  CAP_STRING	equ	21H
  2225                                  CAP_ASCIIZ	equ	22H
  2226                                  CHECK_YES_NO	equ	23H
  2227                                  UPPER_TABLE	equ	80H
  2228                                  
  2229                                  ;NLS_YES	equ	59H  ; 'Y'
  2230                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2231                                  ;NLS_NO		equ	4EH  ; 'N'	
  2232                                  ;NLS_no2	equ	6EH  ; 'n'	
  2233                                  
  2234                                  ;============================================================================
  2235                                  ; CURDIR.INC (MSDOS 3.3, 1987)
  2236                                  ;============================================================================
  2237                                  ; 09/07/2018 - Retro DOS v3.0
  2238                                  
  2239                                  ;BREAK <Current directory list structure>
  2240                                  
  2241                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2242                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2243                                  ;									   ;
  2244                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2245                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2246                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2247                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2248                                  ; of the disk being changed or if the path must be recracked.  The END	   ;
  2249                                  ; field is the location of the end of the definition.  No .. is allowed    ;
  2250                                  ; past this point							   ;
  2251                                  
  2252                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2253                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2254                                  
  2255                                  struc curdir	; curdir_list
  2256 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2257 00000043 ????                    .flags:		resw 1			; various flags
  2258 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2259 00000049 ????                    .ID:		resw 1			; cluster of current dir (net ID)
  2260 0000004B ????                    		resw 1
  2261 0000004D ????                    .user_word:	resw 1
  2262 0000004F ????                    .end:		resw 1			; end of assignment
  2263                                  .size:
  2264                                  endstruc
  2265                                  
  2266                                  curdirLen	EQU curdir.size		; Needed for screwed up
  2267                                  
  2268                                  %define curdir_netID curdir_ID  ; dword
  2269                                  
  2270                                  ;Flag word masks
  2271                                  curdir_isnet	EQU	1000000000000000B
  2272                                  curdir_inuse	EQU	0100000000000000B
  2273                                  curdir_splice	EQU	0010000000000000B
  2274                                  curdir_local	EQU	0001000000000000B
  2275                                  ;									   ;
  2276                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2277                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2278                                  
  2279                                  ;============================================================================
  2280                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2281                                  ;============================================================================
  2282                                  ; 09/07/2018 - Retro DOS v3.0
  2283                                  
  2284                                  ;BREAK <File Control Block definition>
  2285                                  
  2286                                  ;
  2287                                  ; Field definition for FCBs
  2288                                  ; The FCB has the following structure:
  2289                                  ;
  2290                                  ;	+---------------------------+
  2291                                  ;	|   Drive indicator(byte)   |
  2292                                  ;	+---------------------------+
  2293                                  ;	|    Filename (8 chars)     |
  2294                                  ;	+---------------------------+
  2295                                  ;	|    Extension (3 chars)    |
  2296                                  ;	+---------------------------+
  2297                                  ;	|   Current Extent(word)    |
  2298                                  ;	+---------------------------+
  2299                                  ;	|    Record size (word)     |
  2300                                  ;	+---------------------------+
  2301                                  ;	|    File Size (2 words)    |
  2302                                  ;	+---------------------------+
  2303                                  ;	|	Date of write	    |
  2304                                  ;	+---------------------------+
  2305                                  ;	|	Time of write	    |
  2306                                  ;	+---------------------------+
  2307                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2308                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2309                                  ;									   ;
  2310                                  ;	+---------------------------+
  2311                                  ;	|   8 bytes reserved	    |
  2312                                  ;	+---------------------------+
  2313                                  ;									   ;
  2314                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2315                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2316                                  ;	|    next record number     |
  2317                                  ;	+---------------------------+
  2318                                  ;	|   random record number    |
  2319                                  ;	+---------------------------+
  2320                                  ;
  2321                                  
  2322                                  struc	SYS_FCB
  2323 00000000 ??                      .drive:	resb 1
  2324 00000001 ????????????????        .name:	resb 8
  2325 00000009 ??????                  .ext:	resb 3
  2326 0000000C ????                    .EXTENT: resw 1
  2327 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2328 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2329                                  				; following word
  2330 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2331 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2332 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2333                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2334                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2335                                  ;									   ;
  2336 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2337                                  ;									   ;
  2338                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2340 00000020 ??                      .NR:	resb 1			; Next record
  2341 00000021 ????????                .RR:	resb 4			; Random record
  2342                                  endstruc
  2343                                  
  2344                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2345                                  				; NEXT
  2346                                  ; 20/07/2018
  2347                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2348                                  
  2349                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2350                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2351                                  ; NOTE about this byte (fcb_nsl_drive)
  2352                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2353                                  ;	00 means a local file or device with sharing loaded
  2354                                  ;	10 means a remote (network) file
  2355                                  ;	01 means a local file with no sharing loaded
  2356                                  ;	11 means a local device with no sharing loaded
  2357                                  
  2358                                  ; 20/07/2018
  2359                                  
  2360                                  ;
  2361                                  ; Network FCB
  2362                                  ;
  2363                                  
  2364                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2365                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2366                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2367                                  
  2368                                  ;
  2369                                  ; No sharing local file FCB
  2370                                  ;
  2371                                  
  2372                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2373                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2374                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2375                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2376                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2377                                  
  2378                                  ;
  2379                                  ; No sharing local device FCB
  2380                                  ;
  2381                                  
  2382                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2383                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2384                                  
  2385                                  ;
  2386                                  ; Sharing local FCB
  2387                                  ;
  2388                                  
  2389                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2390                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2391                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2392                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2393                                  
  2394                                  ;
  2395                                  ; Bogusness:  the four cases are:
  2396                                  ;
  2397                                  ;   local file	    00
  2398                                  ;   local device    40
  2399                                  ;   local sharing   C0
  2400                                  ;   network	    80
  2401                                  ;
  2402                                  ; Since sharing and network collide, we cannot use a test instruction for
  2403                                  ; deciding whether a network or a share check in involved
  2404                                  ;
  2405                                  FCBDEVICE   EQU 040h
  2406                                  FCBNETWORK  EQU 080h
  2407                                  FCBSHARE    EQU 0C0h
  2408                                  
  2409                                  ; FCBSPECIAL must be able to mask off both net and share
  2410                                  FCBSPECIAL  EQU 080h
  2411                                  FCBMASK     EQU 0C0h
  2412                                  
  2413                                  ;============================================================================
  2414                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2415                                  ;============================================================================
  2416                                  ; 11/07/2018 - Retro DOS v3.0
  2417                                  
  2418                                  struc	FEI	; FASTOPEN_EXTENDED_INFO
  2419 00000000 ??                      .dirpos:	resb 1
  2420                                  ;.dirsec:	resd 1 ; MSDOS 6.0
  2421 00000001 ????                    .dirsec:	resw 1 ; MSDOS 3.3
  2422 00000003 ????                    .clusnum:	resw 1
  2423                                  ;.lastent:	resw 1	; for search first ; MSDOS 6.0
  2424                                  ;.dirstart:	resw 1	; for search first ; MSDOS 6.0
  2425                                  .size:
  2426                                  endstruc
  2427                                  
  2428                                  ; 23/07/2018
  2429                                  ;FASTOPEN NAME CACHING Subfunctions
  2430                                  FONC_Look_up	equ	1
  2431                                  FONC_insert	equ	2
  2432                                  FONC_delete	equ	3
  2433                                  FONC_update	equ	4
  2434                                  FONC_purge	equ	5	;reserved for the future use.
  2435                                  FONC_Rename	equ	6	;AN001
  2436                                  
  2437                                  ; 27/07/2018
  2438                                  ;FastOpen Data Structure
  2439                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2440 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2441 00000002 ????????                .name_caching:	resd 1
  2442                                  ; MSDOS 6.0
  2443                                  ;.fatchain_caching: resd 1	;reserved for future use
  2444                                  .size:
  2445                                  endstruc
  2446                                  
  2447                                  ; 27/07/2018
  2448                                  ;Equates used in DOS.
  2449                                  FastOpen_Set	       equ     00000001b
  2450                                  FastOpen_Reset	       equ     11111110b
  2451                                  Lookup_Success	       equ     00000010b
  2452                                  Lookup_Reset	       equ     11111101b
  2453                                  Special_Fill_Set       equ     00000100b
  2454                                  Special_Fill_Reset     equ     11111011b
  2455                                  No_Lookup	       equ     00001000b
  2456                                  Set_For_Search	       equ     00010000b	;DCR 167
  2457                                  
  2458                                  ; 09/08/2018 
  2459                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2460                                  ; Fastxxx equates
  2461                                  FastOpen_ID	   equ	   1
  2462                                  FastSeek_ID	   equ	   2
  2463                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2464                                  
  2465                                  ;Structure definitions
  2466                                  ;
  2467                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2468 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2469 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2470                                  endstruc
  2471                                  
  2472                                  ;============================================================================
  2473                                  ; LOCK.INC, MSDOS 6.0, 1991
  2474                                  ;============================================================================
  2475                                  ; 14/07/2018 - Retro DOS v3.0
  2476                                  
  2477                                  ;**	LOCK.INC - Definitions for Record Locking
  2478                                  
  2479                                  ;**	LOCK functions
  2480                                  
  2481                                  LOCK_ALL	    equ    0
  2482                                  UNLOCK_ALL	    equ    1
  2483                                  LOCK_MUL_RANGE	    equ    2
  2484                                  UNLOCK_MUL_RANGE    equ    3
  2485                                  LOCK_READ	    equ    4
  2486                                  WRITE_UNLOCK	    equ    5
  2487                                  LOCK_ADD	    equ    6
  2488                                  
  2489                                  ;**	Structure for Lock buffer
  2490                                  
  2491                                  struc LockBuf
  2492 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2493 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2494                                  endstruc
  2495                                  
  2496                                  ;============================================================================
  2497                                  ; DPL.ASM, MSDOS 6.0, 1991
  2498                                  ;============================================================================
  2499                                  ; 04/08/2018 - Retro DOS v3.0
  2500                                  
  2501                                  ; (SRVCALL.ASM)
  2502                                  
  2503                                  struc DPL
  2504 00000000 ????                    .AX:	resw	1	; AX register
  2505 00000002 ????                    .BX:	resw	1	; BX register
  2506 00000004 ????                    .CX:	resw	1	; CX register
  2507 00000006 ????                    .DX:	resw	1	; DX register
  2508 00000008 ????                    .SI:	resw	1	; SI register
  2509 0000000A ????                    .DI:	resw	1	; DI register
  2510 0000000C ????                    .DS:	resw	1	; DS register
  2511 0000000E ????                    .ES:	resw	1	; ES register
  2512 00000010 ????                    .rsrvd: resw	1	; Reserved
  2513 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2514 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2515                                  .size:
  2516                                  endstruc
  2517                                   
  2518                                  ;============================================================================
  2519                                  ; MSDATA.ASM
  2520                                  ;============================================================================
  2521                                  ;============================================================================
  2522                                  ; MS_DATA.ASM (MSDOS 6.0, 1991) (1)
  2523                                  ;============================================================================
  2524                                  ; 16/07/2018 - Retro DOS 3.0	
  2525                                  
  2526                                  ;Break <Uninitialized data overlayed by initialization code>
  2527                                  
  2528                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
  2529                                  ; Init code overlaps with data area below
  2530                                  
  2531                                  		; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  2532                                  
  2533                                  ;	I_am    TIMEBUF,6               ; Time read from clock device
  2534                                  ;	I_am    DEVIOBUF,2              ; Buffer for I/O under file assignment
  2535                                  
  2536                                  TIMEBUF		EQU 	DATASEGMENT	; Offset 0358h (in IBMDOS.COM 3.3)
  2537                                  DEVIOBUF	EQU	TIMEBUF+6
  2538                                  ;
  2539                                  ; The following areas are used as temp buffer in EXEC system call
  2540                                  ;
  2541                                  ;       I_am    OPENBUF,128             ; buffer for name operations
  2542                                  ;       I_am    RenBuf,128              ; buffer for rename destination
  2543                                  
  2544                                  OPENBUF		EQU	DEVIOBUF+2	; DATASEGMENT+8 
  2545                                  RENBUF		EQU	OPENBUF+128	; DATASEGMENT+136
  2546                                  
  2547                                  ; Buffer for search calls
  2548                                  ;        I_am    SEARCHBUF,53		; internal search buffer
  2549                                  ;        I_am    DummyCDS,curdirLen
  2550                                  
  2551                                  SEARCHBUF	EQU	RENBUF+128	; DATASEGMENT+264
  2552                                  DUMMYCDS	EQU	SEARCHBUF+53	; DATASEGMENT+317 
  2553                                  						; Offset 495h in MSDOS 3.3
  2554                                  ;
  2555                                  ; End of contiguous buffer
  2556                                  ;
  2557                                  
  2558                                  ; Temporary directory entry for use by many routines.  Device directory
  2559                                  ; entries (bogus) are built here.
  2560                                  ;
  2561                                  ;        PUBLIC  DevFCB
  2562                                  ;DEVFCB  LABEL   BYTE                    ; Uses NAME1, NAME2, combined
  2563                                  ; WARNING.. do not alter position of NAME1 relative to DEVFCB
  2564                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
  2565                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
  2566                                  
  2567                                  DEVFCB		EQU	DUMMYCDS+curdirLen ; DATASEGMENT+398
  2568                                  
  2569                                  ;	I_am    NAME1,12                ; File name buffer
  2570                                  ;       I_am    NAME2,13                ;
  2571                                  ;	I_am    DESTSTART,WORD          ;
  2572                                  ;	DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
  2573                                  
  2574                                  NAME1		EQU	DEVFCB		; Offset 04E6h in IBMDOS.COM 3.3
  2575                                  NAME2		EQU	NAME1+12	; DATASEGMENT+410
  2576                                  DESTSTART	EQU	NAME2+13	; DATASEGMENT+423
  2577                                  
  2578                                  ;
  2579                                  ; End Temporary directory entry.
  2580                                  ;
  2581                                  
  2582                                  ;       I_am    ATTRIB,BYTE             ; storage for file attributes
  2583                                  ;	I_am    EXTFCB,BYTE             ; TRUE => extended FCB in use
  2584                                  
  2585                                  ATTRIB		EQU	DEVFCB + dir_entry.size ; Offset 0506h
  2586                                  	; Offset 0507h in IBMDOS.COM (MSDOS 3.3) 
  2587                                  EXTFCB		EQU	ATTRIB+1	; DATASEGMENT+431
  2588                                  
  2589                                  ;       I_am    SATTRIB,BYTE            ; Storage for search attributes
  2590                                  ;       I_AM    open_access,BYTE        ; access of open system call
  2591                                  ;       I_am    FoundDel,BYTE           ; true => file was deleted
  2592                                  ;       I_am    Found_dev,BYTE          ; true => search found a device
  2593                                  ;       I_am    fSplice,BYTE            ; true => do a splice in transpath
  2594                                  ;       I_am    fSharing,BYTE           ; TRUE => no redirection
  2595                                  ;       I_am    SECCLUSPOS,BYTE         ; Position of first sector within cluster
  2596                                  ;       I_am    TRANS,BYTE              ;
  2597                                  ;       I_am    READOP,BYTE             ;
  2598                                  ;       I_am    THISDRV,BYTE            ;
  2599                                  ;       I_am    CLUSFAC,BYTE            ;
  2600                                  ;       I_am    CLUSSPLIT,BYTE          ;
  2601                                  ;       I_am    INSMODE,BYTE            ; true => insert mode in buffered read
  2602                                  ;       I_am    cMeta,BYTE              ; count of meta'ed components found
  2603                                  ;       I_am    VOLID,BYTE              ;
  2604                                  ;       I_am    exit_type,BYTE          ; type of exit...
  2605                                  
  2606                                  SATTRIB		EQU	EXTFCB+1	; DATASEGMENT+432
  2607                                  OPEN_ACCESS	EQU	SATTRIB+1	; DATASEGMENT+433
  2608                                  FOUNDDEL	EQU	OPEN_ACCESS+1	; DATASEGMENT+434
  2609                                  FOUND_DEV	EQU	FOUNDDEL+1	; DATASEGMENT+435
  2610                                  FSPLICE		EQU	FOUND_DEV+1	; DATASEGMENT+436
  2611                                  FSHARING	EQU	FSPLICE+1	; DATASEGMENT+437
  2612                                  SECCLUSPOS	EQU	FSHARING+1	; DATASEGMENT+438
  2613                                  TRANS		EQU	SECCLUSPOS+1	; DATASEGMENT+439
  2614                                  READOP		EQU	TRANS+1		; DATASEGMENT+440	
  2615                                  THISDRV		EQU	READOP+1	; DATASEGMENT+441
  2616                                  CLUSFAC		EQU	THISDRV+1	; DATASEGMENT+442
  2617                                  CLUSSPLIT	EQU	CLUSFAC+1	; DATASEGMENT+443
  2618                                  INSMODE		EQU	CLUSSPLIT+1	; DATASEGMENT+444
  2619                                  CMETA		EQU	INSMODE+1	; DATASEGMENT+445
  2620                                  VOLID		EQU	CMETA+1		; DATASEGMENT+446
  2621                                  EXIT_TYPE	EQU	VOLID+1		; DATASEGMENT+447
  2622                                          
  2623                                  ;	EVEN
  2624                                  
  2625                                  ; WARNING - the following two items are accessed as a word
  2626                                  
  2627                                  ;	I_am    CREATING,BYTE           ; true => creating a file
  2628                                  ;	I_am	DELALL,BYTE		; = 0 iff BUGBUG
  2629                                  ;					; = DIRFREE iff BUGBUG
  2630                                  ;	I_am    EXITHOLD,DWORD          ; Temp location for proc terminate
  2631                                  ;	I_am    user_SP,WORD            ; User SP for system call
  2632                                  ;	I_am    user_SS,WORD            ; User SS for system call
  2633                                  ;	I_am    CONTSTK,WORD            ;
  2634                                  ;	I_am    THISDPB,DWORD           ;
  2635                                  ;	I_am    CLUSSAVE,WORD           ;
  2636                                  ; MSDOS 3.3
  2637                                  ;	I_am    CLUSSEC,WORD		;	
  2638                                  ;; MSDOS 6.0
  2639                                  ;;	I_am    CLUSSEC,DWORD           ;>32mb         ; AC0000
  2640                                  
  2641                                  	; Offset 0518h in IBMDOS.COM (MSDOS 3.3) 
  2642                                  
  2643                                  CREATING	EQU	EXIT_TYPE+1 	; DATASEGMENT+448
  2644                                  	; (End of 'MOVDPB' (in MSINIT) - Offset 0519h (just after 'retf'))
  2645                                  DELALL		EQU	CREATING+1	; DATASEGMENT+449
  2646                                  EXITHOLD	EQU	DELALL+1	; DATASEGMENT+450
  2647                                  USER_SP		EQU	EXITHOLD+4	; DATASEGMENT+454
  2648                                  USER_SS		EQU	USER_SP+2	; DATASEGMENT+456
  2649                                  CONTSTK		EQU	USER_SS+2	; DATASEGMENT+458	
  2650                                  THISDPB		EQU	CONTSTK+2	; DATASEGMENT+460
  2651                                  CLUSSAVE	EQU	THISDPB+4	; DATASEGMENT+464
  2652                                  CLUSSEC		EQU	CLUSSAVE+2	; Offset 052Ah ; DATASEGENT+466
  2653                                  
  2654                                  ;       I_am    PREREAD,WORD            ; 0 means preread; 1 means optional
  2655                                  ;       I_am    FATBYT,WORD             ; Used by ALLOCATE
  2656                                  ;       I_am    FATBYTE,WORD            ; Used by $SLEAZEFUNC
  2657                                  ;       I_am    DEVPT,DWORD             ;
  2658                                  ;       I_am    THISSFT,DWORD           ; Address of user SFT
  2659                                  ;       I_am    THISCDS,DWORD           ; Address of current CDS
  2660                                  ;       I_am    THISFCB,DWORD           ; Address of user FCB
  2661                                  
  2662                                  ; MSDOS 3.3
  2663                                  PREREAD		EQU	CLUSSEC+2	; OffseT 052Ch ; DATASEGMENT+468
  2664                                  
  2665                                  ; MSDOS 6.0
  2666                                  ; PREREAD	EQU	CLUSSEC+4
  2667                                  
  2668                                  FATBYT		EQU	PREREAD+2	; DATASEGMENT+470
  2669                                  FATBYTE		EQU	FATBYT+2	; Offset 0530h ; DATASEGMENT+472
  2670                                  DEVPT		EQU	FATBYTE+2	; DATASEGMENT+474	
  2671                                  THISSFT		EQU	DEVPT+4		; Offset 0536h ; DATASEGMENT+478
  2672                                  THISCDS		EQU	THISSFT+4	; DATASEGMENT+482	
  2673                                  THISFCB		EQU	THISCDS+4	; DATASEGMENT+486
  2674                                  
  2675                                  ; DATASEGMENT+490 :  ; *!!!*
  2676                                  	; Here is offset 0542h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  2677                                  ;SFN		EQU	THISFCB+4	; DATASEGMENT + 0542h - 0358h
  2678                                  
  2679                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  2680                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  2681                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  2682                                  ;       I_am    WFP_START,WORD          ;
  2683                                  ;       I_am    REN_WFP,WORD            ;
  2684                                  ;       I_am    CURR_DIR_END,WORD       ;
  2685                                  ;       I_am    NEXTADD,WORD            ;
  2686                                  ;       I_am    LASTPOS,WORD            ;
  2687                                  ;       I_am    CLUSNUM,WORD            ;
  2688                                  ;       I_am    DIRSEC,DWORD            ;>32mb 		; AC0000
  2689                                  ;       I_am    DIRSTART,WORD           ;
  2690                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  2691                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  2692                                  ;                                       ; sectors
  2693                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  2694                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  2695                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  2696                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  2697                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  2698                                  ;       I_am    ENTFREE,WORD            ;
  2699                                  ;       I_am    ENTLAST,WORD            ;
  2700                                  ;       I_am    NXTCLUSNUM,WORD         ;
  2701                                  ;       I_am    GROWCNT,DWORD           ;
  2702                                  ;       I_am    CURBUF,DWORD            ;
  2703                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  2704                                  ;       I_am    SAVEBX,WORD             ;
  2705                                  ;       I_am    SAVEDS,WORD             ;
  2706                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  2707                                  ;       I_am    NSS,WORD
  2708                                  ;       I_am    NSP,WORD	
  2709                                  
  2710                                  ;	....  [ MS_DATA.ASM (MSDOS 6.0, 1991) (2) ] ; $$$
  2711                                  
  2712                                  ;DOSDATA ENDS
  2713                                  
  2714                                  ;============================================================================
  2715                                  ; MSHEAD.ASM
  2716                                  ;============================================================================
  2717                                  
  2718                                  [BITS 16]
  2719                                  [ORG 0]
  2720                                  
  2721                                  START:
  2722 00000000 E97E73                          JMP     DOSINIT
  2723                                  
  2724                                  ;============================================================================
  2725                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2726                                  ;============================================================================
  2727                                  ; 16/07/2018 - Retro DOS 3.0
  2728                                  
  2729                                  	; MSDOS 6.0
  2730                                  ;	dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  2731                                  ;BioDataSeg:
  2732                                  ;	dw	0070h		; Bios data segment fixed at 70h
  2733                                  
  2734                                  	; MSDOS 3.3
  2735 00000003 0000                    	dw	0
  2736 00000005 00                      	db	0 ; 12/08/2018
  2737 00000006 42554720                	db	"BUG "
  2738 0000000A 0000                    	dw	0
  2739 0000000C 0000                    	dw	0
  2740                                  
  2741                                  ;============================================================================
  2742                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
  2743                                  ;============================================================================
  2744                                  ; 16/07/2018 - Retro DOS 3.0	
  2745                                  
  2746                                  	; MSDOS 3.3
  2747                                  MYNUM:			; Offset 000Eh
  2748 0000000E 0000                    	dw	0	
  2749                                  FCBLRU: 
  2750 00000010 0000                    	dw	0
  2751                                  OpenLRU:
  2752 00000012 0000                    	dw	0
  2753                                  OEM_HANDLER: 		; Pointer to OEM handler code	
  2754 00000014 FFFFFFFF                	dd	-1
  2755                                  LeaveAddr:
  2756                                  	;dd	LeaveDOS
  2757 00000018 [BC15]                  	dw	LeaveDOS ; 12/08/2018
  2758                                  RetryCount:		; Share retries
  2759 0000001A 0300                    	dw	3
  2760                                  RetryLoop:
  2761 0000001C 0100                    	dw	1
  2762                                  LastBuffer:
  2763 0000001E FFFFFFFF                	dd	-1	; Buffer queue recency pointer
  2764                                  CONTPOS:
  2765 00000022 0000                    	dw	0	; location in buffer of next read
  2766                                  arena_head:
  2767 00000024 0000                    	dw	0	; Segment # of first arena in memory
  2768                                  
  2769                                  ;; 16/07/2018
  2770                                  ;;****************************************************************************
  2771                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
  2772                                  ;;****************************************************************************
  2773                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
  2774                                  ;;
  2775                                  ;;	AH = 52h
  2776                                  ;;
  2777                                  ;;	on return:
  2778                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
  2779                                  ;;		Known "invars" fields follow (varies with DOS version):
  2780                                  ;;
  2781                                  ;;	Offset Size		 Description
  2782                                  ;;
  2783                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
  2784                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
  2785                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
  2786                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
  2787                                  ;;		      0 indicates no unread input (DOS 3.x)
  2788                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
  2789                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
  2790                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
  2791                                  ;;	  08   dword  pointer to $CLOCK device driver
  2792                                  ;;	  0C   dword  pointer to CON device driver
  2793                                  ;;	  10   byte   number of logical drives in system
  2794                                  ;;	  11   word   maximum bytes/block of any block device
  2795                                  ;;	  13   dword  pointer to DOS cache buffer header
  2796                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
  2797                                  ;;		      point to the next device in device chain
  2798                                  ;;
  2799                                  ;;****************************************************************************
  2800                                  
  2801                                  ; The following block of data is used by SYSINIT.  Do not change the order or
  2802                                  ; size of this block
  2803                                  
  2804                                  
  2805                                  ; The following block of data is used by SYSINIT. 
  2806                                  ; Do not change the order or size of this block
  2807                                  
  2808                                  ;SYSINITVAR:
  2809                                  SYSINITVARS:
  2810                                  DPBHEAD:
  2811 00000026 00000000                	dd	0	; Pointer to head of DPB-FAT list
  2812                                  SFT_ADDR:
  2813 0000002A [98000000]              	dd	SFTABL	; Pointer to first SFT table
  2814                                  BCLOCK:
  2815 0000002E 00000000                	dd	0	; The CLOCK device
  2816                                  BCON:
  2817 00000032 00000000                	dd	0	; Console device entry points
  2818                                  MAXSEC:
  2819 00000036 8000                    	dw	128	; Maximum allowed sector size
  2820                                  BUFFHEAD:
  2821 00000038 00000000                	dd	0	; Pointer to head of buffer queue
  2822                                  CDSADDR:
  2823 0000003C 00000000                	dd	0	; Pointer to curdir structure table
  2824                                  SFTFCB:
  2825 00000040 00000000                	dd	0	; pointer to FCB cache table
  2826                                  KEEPCOUNT:
  2827 00000044 0000                    	dw	0	; count of FCB opens to keep
  2828                                  NUMIO:
  2829 00000046 00                      	db	0	; Number of disk tables
  2830                                  CDSCOUNT:
  2831 00000047 00                      	db	0	; Number of CDS structures in above
  2832                                  ; A fake header for the NUL device
  2833                                  NULDEV:
  2834 00000048 00000000                	dd	0	; Link to rest of device list
  2835                                  	;dw	8004h
  2836 0000004C 0480                    	dw	DEVTYP | ISNULL	; Null device attributes
  2837 0000004E [2C16]                  	dw	SNULDEV	; Strategy entry point
  2838 00000050 [3216]                  	dw	INULDEV	; Interrupt entry point
  2839 00000052 4E554C2020202020        	db	"NUL     " ; Name of null device
  2840                                  SPLICES:
  2841 0000005A 00                      	db	0	; TRUE => splices being done
  2842                                  
  2843                                  	; MSDOS 6.0 
  2844                                  ;Special_Entries:
  2845                                  ;	dw	0	; address of special entries	;AN000;
  2846                                  ;UU_IFS_DOS_CALL:
  2847                                  ;	dd	0	; entry for IFS DOS service	;AN000;
  2848                                  ;; 
  2849                                  ;; UU_IFS_HEADER:
  2850                                  ;; 	dd	0	; IFS header chain		;AN000;
  2851                                  ;;
  2852                                  ;ChkCopyProt:
  2853                                  ;	dw	0	; M068
  2854                                  ;A20OFF_PSP:
  2855                                  ;	dw	0	; M068
  2856                                  ;BUFFERS_PARM1:
  2857                                  ;	dw	0	; value of BUFFERS= ,m 	;AN000;
  2858                                  ;BUFFERS_PARM2:
  2859                                  ;	dw	0	; value of BUFFERS= ,n 	;AN000
  2860                                  ;BOOTDRIVE:
  2861                                  ;	db	0	; the boot drive	;AN000;
  2862                                  ;DDMOVE:
  2863                                  ;	db	0 	; 1 if we need DWORD move ;AN000;
  2864                                  ;EXT_MEM_SIZE:
  2865                                  ;	dw	0	; extended memory size 	;AN000;
  2866                                  
  2867                                  ;HASHINITVAR: ; LABEL   WORD	; AN000;
  2868                                  ;;
  2869                                  ;; Replaced by next two declarations
  2870                                  ;;
  2871                                  ;;UU_BUF_HASH_PTR:
  2872                                  ;;	dd	0	; buffer Hash table addr
  2873                                  ;;UU_BUF_HASH_COUNT:
  2874                                  ;;	dw	1	; number of Hash entries
  2875                                  ;
  2876                                  ;BufferQueue:
  2877                                  ;	dd	0	; Head of the buffer Queue
  2878                                  ;DirtyBufferCount:
  2879                                  ;	dw	0	; Count of Dirty buffers in the Que
  2880                                  ;			; BUGBUG ---- change to byte
  2881                                  ;SC_CACHE_PTR:
  2882                                  ;	dd	0	; secondary cache pointer
  2883                                  ;SC_CACHE_COUNT:
  2884                                  ;	dw	0 	; secondary cache count
  2885                                  ;BuffInHMA:
  2886                                  ;	db	0	; Flag to indicate that buffs are in HMA
  2887                                  ;LoMemBuff:
  2888                                  ;	dd	0	; Ptr to intermediate buffer
  2889                                  ;			;  in Low mem when buffs are in HMA
  2890                                  ;;
  2891                                  ;; All variables which have UU_ as prefix can be reused for other
  2892                                  ;; purposes and can be renamed. All these variables were used for
  2893                                  ;; EMS support of Buffer Manager. Now they are useless for Buffer
  2894                                  ;; manager ---- MOHANS
  2895                                  ;;
  2896                                  ;
  2897                                  ;	I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
  2898                                  ;UU_BUF_EMS_FIRST_PAGE:	
  2899                                  ;	db	0,0,0	; holds the first page above 640K
  2900                                  ;
  2901                                  ;;	I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
  2902                                  ;;					   ; above 640K
  2903                                  ;;UU_BUF_EMS_NPA640:
  2904                                  ;;	dw	0			
  2905                                  ;
  2906                                  ;CL0FATENTRY:
  2907                                  ;	dw	-1	; M014:	Holds the data that
  2908                                  ;			; is used in pack/unpack rts.
  2909                                  ;			; in fat.asm if cluster 0 is specified.
  2910                                  ;			; SR;
  2911                                  ;IoStatFail:
  2912                                  ;	db	0	; IoStatFail has been added to 
  2913                                  ;			; record a fail on an I24 
  2914                                  ;			; issued from IOFUNC on a status call. 
  2915                                  ;
  2916                                  ;;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
  2917                                  ;;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
  2918                                  ;;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
  2919                                  ;;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
  2920                                  ;;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
  2921                                  ;;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
  2922                                  ;
  2923                                  ;;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
  2924                                  ;						; state of the 	buffers page.
  2925                                  ;						; This one byte is retained to 
  2926                                  ;						; keep the size of this data 
  2927                                  ;						; block the same.;
  2928                                  ;ALLOCMSAVE:
  2929                                  ;	db	0	; M063: temp var. used to 
  2930                                  ;			; M063: save alloc method in
  2931                                  ;			; M063: msproc.asm
  2932                                  ;A20OFF_COUNT:
  2933                                  ;	db	0	; M068: indiactes the # of 
  2934                                  ;			; M068: int 21 calls for 
  2935                                  ;			; M068: which A20 is off
  2936                                  ;DOS_FLAG:
  2937                                  ;	db	0	; see DOSSYM.INC for Bit 
  2938                                  ;			; definitions
  2939                                  ;UNPACK_OFFSET:
  2940                                  ;	dw	0	; saves pointer to the start
  2941                                  ;			; of unpack code in exepatch.
  2942                                  ;			; asm.
  2943                                  ;UMBFLAG:
  2944                                  ;	db	0 	; M003: bit 0 indicates the 
  2945                                  ;			; M003: link state of the UMBs
  2946                                  ;			; M003: whether linked or not 
  2947                                  ;			; M003: to the DOS arena chain
  2948                                  ;SAVE_AX:
  2949                                  ;	dw	0	; M000: temp varibale to store ax
  2950                                  ;			; M000: in msproc.asm
  2951                                  ;UMB_HEAD:
  2952                                  ;	dw	-1	; M000: this is initialized to  
  2953                                  ;			; M000: the first umb arena by 
  2954                                  ;			; M000: BIOS sysinit.
  2955                                  ;START_ARENA:
  2956                                  ;	dw	1	; M000: this is the first arena 
  2957                                  ;			; M000: from which DOS will 
  2958                                  ;			; M000: start its scan for alloc.
  2959                                  
  2960                                  ; End of SYSINITVar block
  2961                                  
  2962                                  ; 16/07/2018
  2963                                  ; MSDOS 3.3 (& MDOS 6.0)
  2964                                  
  2965                                  ;
  2966                                  ; Sharer jump table
  2967                                  ;
  2968                                  
  2969                                  ;PUBLIC	JShare
  2970                                  	;EVEN
  2971 0000005B 90                      align 2
  2972                                  
  2973                                  JShare: ; LABEL	DWORD
  2974 0000005C [B817]0000              		DW	BadCall,0
  2975 00000060 [BC17]0000              MFT_enter	DW	OKCall, 0  ; 1   MFT_enter
  2976 00000064 [BC17]0000              MFTClose	DW	OKCall, 0  ; 2   MFTClose
  2977 00000068 [B817]0000              MFTclU		DW	BadCall,0  ; 3   MFTclU
  2978 0000006C [B817]0000              MFTCloseP	DW	BadCall,0  ; 4   MFTCloseP
  2979 00000070 [B817]0000              MFTCloN		DW	BadCall,0  ; 5   MFTCloN
  2980 00000074 [B817]0000              set_block	DW	BadCall,0  ; 6   set_block
  2981 00000078 [B817]0000              clr_block	DW	BadCall,0  ; 7   clr_block
  2982 0000007C [BC17]0000              chk_block	DW	OKCall, 0  ; 8   chk_block
  2983 00000080 [B817]0000              MFT_get		DW	BadCall,0  ; 9   MFT_get
  2984 00000084 [B817]0000              ShSave		DW	BadCall,0  ; 10  ShSave
  2985 00000088 [B817]0000              ShChk		DW	BadCall,0  ; 11  ShChk
  2986 0000008C [BC17]0000              ShCol		DW	OKCall, 0  ; 12  ShCol
  2987 00000090 [B817]0000              ShCloseFile	DW	BadCall,0  ; 13  ShCloseFile
  2988 00000094 [B817]0000              ShSU		DW	BadCall,0  ; 14  ShSU
  2989                                  
  2990                                  ;============================================================================
  2991                                  ; CONST2.ASM (MSDOS 6.0, 1991)
  2992                                  ;============================================================================
  2993                                  ; 16/07/2018 - Retro DOS 3.0	
  2994                                  
  2995                                  ;Break <Initialized data and data used at DOS initialization>
  2996                                  
  2997                                  ;
  2998                                  ; We need to identify the parts of the data area that are relevant to tasks
  2999                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
  3000                                  ; data will be gathered with the system code.  The process data under 2.x will
  3001                                  ; be available for swapping and under 3.0 it will be allocated per-process.
  3002                                  ;
  3003                                  ; The data that is system data will be identified by [SYSTEM] in the comments
  3004                                  ; describing that data item.
  3005                                  
  3006                                  ;	AsmVars <Debug, Redirector, ShareF>
  3007                                  
  3008                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
  3009                                  
  3010                                  ;
  3011                                  ; Table of routines for assignable devices
  3012                                  ;
  3013                                  ; MSDOS allows assignment if the following standard devices:
  3014                                  ;   stdin  (usually CON input)
  3015                                  ;   stdout (usually CON output)
  3016                                  ;   auxin  (usually AUX input)
  3017                                  ;   auxout (usually AUX output)
  3018                                  ;   stdlpt (usually PRN output)
  3019                                  ;
  3020                                  ; SPECIAL NOTE:
  3021                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
  3022                                  ;   If we're not at end-of-file, then we always say that we have a character.
  3023                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
  3024                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
  3025                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
  3026                                  ;   as EOF).
  3027                                  
  3028                                  ; Default SFTs for boot up
  3029                                  
  3030                                  		;PUBLIC	SFTABL
  3031                                  
  3032                                  SFTABL:	   ; LABEL   DWORD		; file table
  3033 00000098 FFFF                    		DW -1			; link to next table
  3034 0000009A FFFF                    		DW -1			; link seg to next table
  3035 0000009C 0500                    		DW sf_default_number	; Number of entries in table
  3036 0000009E 00<rep 109h>            		times (sf_default_number*sf_entry_size) db 0
  3037                                  
  3038                                  ; the next two variables relate to the position of the logical stdout/stdin
  3039                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
  3040                                  ; console.
  3041                                  
  3042                                  		; Offset 01A7h in IBMDOS.COM (MSDOS 3.3)
  3043 000001A7 00                      CARPOS:		db 0			; cursor position in stdin
  3044 000001A8 00                      STARTPOS:	db 0			; position of cursor at beginning
  3045 000001A9 00<rep 80h>             INBUF:		times 128 db 0		; general device input buffer
  3046 00000229 00<rep 83h>             CONBUF:		times 131 db 0		; The rest of INBUF and console buffer
  3047                                  		; Offset 02ACh in IBMDOS.COM (MSDOS 3.3)
  3048 000002AC 00                      PFLAG:		db 0			; printer echoing flag
  3049 000002AD 00                      VERFLG:		db 0			; Initialize with verify off
  3050 000002AE 03                      CHARCO:		db 00000011b		; Allows statchks every 4 chars...
  3051                                  switch_character:
  3052 000002AF 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
  3053 000002B0 00                      AllocMethod:	db 0			; how to alloc first(best)last
  3054 000002B1 00                      fShare:		db 0			; TRUE => sharing installed
  3055 000002B2 01                      DIFFNAM:	db 1			; Indicates when MYNAME has changed                                        ; of buffered input call
  3056 000002B3 20<rep 10h>             MYNAME:		times 16 db 20h		; My network name
  3057                                  
  3058                                  ;
  3059                                  ; The following table is a list of addresses that the sharer patches to be
  3060                                  ; PUSH AX to enable the critical sections
  3061                                  ;
  3062                                  		; Offset 02C3h in IBMDOS.COM (MSDOS 3.3)
  3063                                  
  3064                                  ;PUBLIC	CritPatch
  3065                                  
  3066                                  CritPatch:	; LABEL WORD
  3067                                  
  3068                                  ;IRP sect,<critDisk,critDevice>
  3069                                  
  3070                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
  3071                                  ;
  3072                                  ;SR; Change code patch address to a variable in data segment
  3073                                  ;
  3074                                  ;       dw OFFSET DOSDATA: redir_patch
  3075                                  ;       dw OFFSET DOSDATA: redir_patch
  3076                                  ;
  3077                                  ;;hkn	Short_Addr  E&sect
  3078                                  ;;hkn	Short_Addr  L&sect
  3079                                  ;
  3080                                  ;ELSE
  3081                                  ;	DW	0
  3082                                  ;	DW	0
  3083                                  ;ENDIF
  3084                                  ;ENDM
  3085                                  ;	DW	0
  3086                                  
  3087                                  	; 16/07/2018 - Retro DOS v3.0
  3088                                  	; IBMDOS.COM (MSDOS 3.3), offset 02C3h
  3089                                   
  3090 000002C3 [6520]                  	dw 	EcritDisk
  3091 000002C5 [6D20]                  	dw 	LcritDisk			
  3092 000002C7 [7520]                  	dw	EcritDevice
  3093 000002C9 [7D20]                  	dw 	LcritDevice
  3094                                  
  3095 000002CB 0000                    	dw	0
  3096                                  
  3097                                  ;
  3098                                  ; WARNING!!!  PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
  3099                                  ; Also, IBM server 1.0 requires this also.
  3100                                  ;
  3101                                  	;EVEN			; Force swap area to start on word boundry
  3102 000002CD 90                      align 2
  3103                                  	;PUBLIC	SWAP_START
  3104                                  SWAP_START:	; LABEL BYTE
  3105 000002CE 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
  3106 000002CF 00                      INDOS:		db 0		; DOS status for interrupt processing
  3107 000002D0 FF                      WPERR:		db -1		; Write protect error flag
  3108 000002D1 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
  3109 000002D2 0000                    EXTERR:		dw 0		; Extended Error code
  3110                                  
  3111                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
  3112 000002D4 00                      EXTERR_ACTION:	db 0		; Extended Error Action
  3113 000002D5 00                      EXTERR_CLASS:	db 0		; Extended Error Class
  3114                                  ; end warning
  3115                                   
  3116 000002D6 00000000                EXTERRPT:	dd 0		; Extended Error pointer
  3117                                  
  3118 000002DA 8000                    DMAADD:		dw 80H		; User's disk transfer address (disp/seg)
  3119 000002DC 0000                                    dw 0	
  3120 000002DE 0000                    CurrentPDB:	dw 0		; Current process identifier
  3121 000002E0 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
  3122 000002E2 0000                    exit_code:	dw 0		; exit code of last proc.
  3123 000002E4 00                      CURDRV:		db 0		; Default drive (init A)
  3124 000002E5 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
  3125                                  ;				; F.C. 2/17/86
  3126                                  ;CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
  3127                                  ;CPSWSAVE:	db 0		; copy of above in case of ABORT
  3128                                  SWAP_ALWAYS:	; 05/08/2018
  3129 000002E6 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
  3130                                  				;   extended error type stuff.
  3131                                  				;   NOTE: does not have Correct value on
  3132                                  				;   1-12, OEM, Get/Set CurrentPDB,
  3133                                  				;   GetExtendedError system calls)
  3134 000002E8 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
  3135 000002EA 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
  3136 000002EC 0000                    FirstArena:	dw 0		; first free block found
  3137 000002EE 0000                    BestArena:	dw 0		; best free block found
  3138 000002F0 0000                    LastArena:	dw 0		; last free block found
  3139 000002F2 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
  3140 000002F4 0000                    LASTENT:	dw 0		; Last entry for directory search
  3141 000002F6 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
  3142 000002F7 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
  3143 000002F8 00                      NoSetDir:	db 0		; true -> do not set directory
  3144 000002F9 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
  3145 000002FA 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
  3146                                  
  3147                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
  3148                                  	;EVEN
  3149 000002FB 90                      align 2
  3150                                  	; Offset 02FCh in IBMDOS.COM (MSDOS 3.3); 
  3151 000002FC 00                      DAY:		db 0		; Day of month
  3152 000002FD 00                      MONTH:		db 0		; Month of year
  3153 000002FE 0000                    YEAR:		dw 0		; Year (with century)
  3154 00000300 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
  3155 00000302 00                      WEEKDAY:	db 0		; Day of week
  3156                                  ; end warning
  3157                                  
  3158 00000303 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
  3159 00000304 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
  3160 00000305 00                      fAborting:	db 0		; TRUE => abort in progress
  3161                                  
  3162                                  ; Combination of all device call parameters
  3163                                  	;PUBLIC	DEVCALL 	;
  3164                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
  3165                                  DEVCALL: ; 08/08/2018
  3166 00000306 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
  3167 00000307 00                      DEVCALL_REQUNIT: db 0		;Device unit number
  3168 00000308 00                      DEVCALL_REQFUNC: db 0		;Type of request
  3169 00000309 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
  3170 0000030B 00<rep 8h>                       times 8 db 0		;Reserved for queue links
  3171                                  
  3172                                  	;PUBLIC	CALLUNIT
  3173                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
  3174                                  CALLFLSH: ; LABEL   WORD	;
  3175 00000313 00                      CALLMED:	db 0		; media byte
  3176                                  CALLBR:	  ; LABEL   DWORD	;
  3177                                  	;PUBLIC	CALLXAD 	;
  3178                                  CALLXAD:  ; LABEL   DWORD	;
  3179 00000314 00                      CALLRBYT:	db 0		;
  3180                                  	;PUBLIC	CALLVIDM	;
  3181                                  CALLVIDM: ; LABEL   DWORD	;
  3182 00000315 00<rep 3h>              	times 3 db 0	;
  3183                                  	;PUBLIC CallBPB		;
  3184                                  CALLBPB:  ; LABEL   DWORD	;
  3185                                  CALLSCNT:			;
  3186 00000318 0000                    		dw 0		;
  3187                                  	;PUBLIC	CALLSSEC	;
  3188                                  CALLSSEC: ; LABEL   WORD	;
  3189 0000031A 0000                    		dw 0		;
  3190 0000031C 00000000                CALLVIDRW:	dd 0		;
  3191                                  ;*MSDOS 6.0
  3192                                  ;*CALLNEWSC:	dd 0		; starting sector for >32mb
  3193 00000320 00000000                CALLDEVAD:	dd 0		; stash for device entry point
  3194                                  
  3195                                  ; Same as above for I/O calls	;
  3196                                  				;
  3197                                  	;PUBLIC	IOCall		;
  3198                                  ;IOCALL	SRHEAD	<>		;
  3199                                  IOCALL:	; 07/08/2018
  3200 00000324 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
  3201 00000325 00                      IOCALL_REQUNIT:	db 0		;Device unit number
  3202 00000326 00                      IOCALL_REQFUNC: db 0		;Type of request
  3203 00000327 0000                    IOCALL_REQSTAT: dw 0		;Status Word
  3204 00000329 00<rep 8h>              	times 8	db 0		;Reserved for queue links
  3205                                  IOFLSH:	  ; LABEL   WORD	;
  3206                                          ;PUBLIC  IORCHR		;
  3207                                  IORCHR:	  ; LABEL   BYTE	;
  3208 00000331 00                      IOMED:		db 0		;
  3209 00000332 00000000                IOXAD:		dd 0		;
  3210 00000336 0000                    IOSCNT:		dw 0		;	
  3211 00000338 0000                    IOSSEC:		dw 0		;
  3212                                  
  3213                                  ; Call struct for DSKSTATCHK	;
  3214 0000033A 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
  3215 0000033B 00                      		db 0
  3216 0000033C 05                      DSKSTCOM:	db DEVRDND	; = 5
  3217 0000033D 0000                    DSKSTST:	dw 0		;
  3218 0000033F 00<rep 8h>              	times 8	db 0		;
  3219 00000347 00                      DSKCHRET:	db 0		;
  3220                                  
  3221                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
  3222                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
  3223                                  ;hkn   short_addr  DEVIOBUF	;
  3224                                  	
  3225 00000348 [5E03]                  DEVIOBUF_PTR	dw DEVIOBUF
  3226 0000034A 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
  3227 0000034C 0100                    DSKSTCNT:	dw 1		;
  3228 0000034E 0000                    		dw 0		;
  3229                                  
  3230 00000350 00                      CreatePDB:	db 0		; flag for creating a process
  3231                                  
  3232                                  ;* MSDOS 6.0
  3233                                  ;*	;PUBLIC	Lock_Buffer	;
  3234                                  ;*Lock_Buffer: ; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
  3235                                  ;*	    	dd 0		;MS. position
  3236                                  ;*	 	dd 0		;MS. length
  3237                                  
  3238                                  ;hkn; the foll. was moved from dosmes.asm.
  3239                                  
  3240                                  	;EVEN
  3241 00000351 90                      align 2				; needed to maintain offsets
  3242                                  
  3243                                  	; Offset 0352h in IBMDOS.COM (MSDOS 3.3)
  3244                                  	;PUBLIC  UserNum, OEMNum
  3245                                  USERNUM:
  3246 00000352 0000                     		dw 0		; 24 bit user number
  3247 00000354 00                      		db 0
  3248                                  ;IF IBM
  3249                                  ;IF IBMCOPYRIGHT
  3250 00000355 00                      OEMNUM:		DB 0		; 8 bit OEM number
  3251                                  ;ELSE
  3252                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
  3253                                  ;ENDIF
  3254                                  ;ELSE
  3255                                  ;OEMNUM:	DB 0FFh
  3256                                  ;ENDIF
  3257                                  
  3258                                  ; 17/07/2018
  3259                                  ;----------------------------------------------------------------------------
  3260                                  ; (MSDOS 3.3, DOSMES.INC, 1987)
  3261                                  
  3262                                  ; The next variable points to the country table for the current country
  3263                                  ;	(the table returned by the AL=0 INTERNATIONAL call).
  3264                                  
  3265 00000356 [E40F]                  CurrentCounry:	dw USTABLE			
  3266                                  
  3267                                  
  3268                                  ;DOSDATA ENDS
  3269                                  
  3270                                  ;----------------------------------------------------------------------------
  3271                                  
  3272                                  ; 16/07/2018 - Retro DOS v3.0
  3273                                  
  3274                                  align 2
  3275                                  
  3276                                  DATASEGMENT EQU $ ; 17/04/2018
  3277                                  
  3278                                  ;============================================================================
  3279                                  ; MSINIT.ASM
  3280                                  ;============================================================================
  3281                                  ; 16/07/2018 - Retro DOS v3.0
  3282                                  ;	      (MSINIT code order/reference: MSDOS 3.3, IBMDOS.COM, 1987)
  3283                                  	
  3284                                  ; 15/04/2018 - Retro DOS v2.0 (DATA adaption for NASM)
  3285                                  
  3286                                  ; TITLE MSINIT.ASM -- MS-DOS INITIALIZATION CODE
  3287                                  
  3288                                  ;       ORG     0                       ; reset to beginning of data segment
  3289                                  ; Init code below overlaps with data area
  3290                                  
  3291                                  	
  3292                                  	; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  3293                                  
  3294                                  ;INITBLOCK DB    110H DUP(0)     ; Allow for segment round up
  3295 00000358 00<rep 110h>            INITBLOCK:	TIMES 272 DB 0
  3296                                  
  3297                                  	; Offset 0468h in IBMDOS.COM (MSDOS 3.3)
  3298                                  
  3299 00000468 0000                    INITSP:		DW 0
  3300 0000046A 0000                    INITSS:		DW 0
  3301                                  ;BUFFSTRT:	DW 0
  3302                                  
  3303                                  	; Offset 046Ch in IBMDOS.COM (MSDOS 3.3)	
  3304                                  
  3305                                  ;ASSUME  CS:DOSGROUP,DS:DOSGROUP,ES:DOSGROUP,SS:NOTHING
  3306                                  ;
  3307                                  ;        EXTRN   QUIT:NEAR,IRET:NEAR,ABSDRD:FAR,ABSDWRT:FAR
  3308                                  ;        EXTRN   COMMAND:NEAR,CALL_ENTRY:NEAR
  3309                                  ;        IF      NOT IBM
  3310                                  ;        EXTRN   HEADER:BYTE
  3311                                  ;        ENDIF
  3312                                  
  3313                                  MOVDPB:
  3314                                  	; 08/07/2018 - Retro DOS v3.0
  3315                                  ; This section of code is safe from being overwritten by block move
  3316                                          ;MOV     SP,[CS:INITSP]
  3317                                          ;MOV     SS,[CS:INITSS]
  3318                                          ; 30/03/2018
  3319 0000046C 8B26[6804]              	MOV     SP,[INITSP]
  3320 00000470 8E16[6A04]                      MOV     SS,[INITSS]
  3321 00000474 F3A4                    	REP     MOVSB
  3322 00000476 FC                              CLD
  3323                                          ; 15/07/2018
  3324                                  	;MOV	[ES:DMAADD+2],DX
  3325 00000477 8916[DC02]              	MOV	[DMAADD+2],DX
  3326 0000047B 8B36[2600]                      MOV     SI,[DPBHEAD]	; Address of first DPB
  3327                                  	;MOV	[ES:DPBHEAD+2],ES
  3328 0000047F 8C06[2800]                      MOV	[DPBHEAD+2],ES
  3329                                  	;MOV	[ES:SFT_ADDR+2],ES
  3330 00000483 8C06[2C00]              	MOV     [SFT_ADDR+2],ES
  3331 00000487 8A0E[4600]                      MOV     CL,[NUMIO]	; Number of DPBs
  3332 0000048B 30ED                            XOR     CH,CH
  3333                                  SETFINDPB:
  3334 0000048D 268C441A                        MOV     [ES:SI+1AH],ES
  3335 00000491 26C64417FF                      MOV     BYTE [ES:SI+17H],-1  ; Never accessed before
  3336 00000496 83C620                          ADD     SI,DPBSIZ ; 32	; Point to next DPB
  3337 00000499 E2F2                            LOOP    SETFINDPB
  3338 0000049B 83EE20                          SUB     SI,DPBSIZ ; sub si,32
  3339 0000049E 26C7441AFFFF                    MOV     WORD [ES:SI+1AH],-1
  3340                                          ; 15/07/2018 - Retro DOS v3.0
  3341                                  	;; MSDOS 2.11
  3342                                          ;MOV	DI,[BUFFSTRT]		; Set up one default buffer
  3343                                  	;MOV	[ES:BUFFHEAD+2],ES
  3344                                          ;MOV	[ES:BUFFHEAD],DI
  3345                                  	; MSDOS 3.3
  3346 000004A4 06                      	push	es ; *
  3347 000004A5 BF[8F73]                	mov	di,SYSBUF+15 
  3348 000004A8 D1DF                    	rcr	di,1
  3349 000004AA D1EF                    	shr	di,1
  3350 000004AC D1EF                    	shr	di,1
  3351 000004AE D1EF                    	shr	di,1
  3352 000004B0 8CC0                    	mov	ax,es
  3353 000004B2 01F8                    	add	ax,di
  3354 000004B4 8EC0                    	mov	es,ax
  3355 000004B6 31FF                    	xor	di,di
  3356 000004B8 8C06[3A00]              	mov     [BUFFHEAD+2],es
  3357 000004BC 893E[3800]              	mov     [BUFFHEAD],di
  3358                                  	;	
  3359 000004C0 26C74504FF00                    MOV     WORD [ES:DI+4],00FFH
  3360 000004C6 26C705FFFF                      MOV     WORD [ES:DI],-1
  3361 000004CB 26C74502FFFF                    MOV     WORD [ES:DI+2],-1
  3362 000004D1 07                      	pop	es; * ; 15/07/2018
  3363 000004D2 06                              PUSH    ES
  3364 000004D3 42                              INC     DX			; Leave enough room for the ARENA
  3365 000004D4 8B36[F202]              	mov	si,[ENDMEM] ; 15/07/2018
  3366                                  
  3367                                  	; 11/08/2018 - Retro DOS v3.0
  3368                                          ;invoke _$DUP_PDB		; create jfns and set CurrentPDB
  3369 000004D8 E85119                  	CALL	_$DUP_PDB
  3370 000004DB 07                              POP	ES
  3371                                  ;
  3372                                  ; set up memory arena
  3373                                  ;SPECIAL NOTE FOR HIGHMEM VERSION
  3374                                  ; At this point a process header has been built where the start of the 
  3375                                  ; CONSTANTS segment as refed by CS is. From this point until the return 
  3376                                  ; below be careful about references off of CS.
  3377                                  ;
  3378                                  	; 13/04/2018 ; *
  3379                                          ;PUSH	AX ; *
  3380                                          ;MOV	AX,[CurrentPDB]
  3381 000004DC 2EA1[DE02]                      MOV	AX,[CS:CurrentPDB] ; 15/03/2018
  3382 000004E0 26A3[DE02]              	MOV     [ES:CurrentPDB],AX	; Put it in the REAL location
  3383 000004E4 26C606[5003]00                  MOV     BYTE [ES:CreatePDB],0	; reset flag in REAL location
  3384 000004EA 48                              DEC     AX
  3385 000004EB 26A3[2400]                      MOV     [ES:arena_head],AX
  3386 000004EF 1E                              PUSH    DS
  3387 000004F0 8ED8                            MOV     DS,AX
  3388 000004F2 C60600005A                      MOV     BYTE [ARENA.SIGNATURE],arena_signature_end
  3389 000004F7 C70601000000                    MOV     WORD [ARENA.OWNER],arena_owner_system
  3390 000004FD 262B06[F202]                    SUB     AX,[ES:ENDMEM]
  3391 00000502 F7D8                            NEG     AX
  3392 00000504 48                              DEC     AX
  3393 00000505 A30300                          MOV     [ARENA.SIZE],AX
  3394 00000508 1F                              POP     DS
  3395                                          ;POP	AX ; *
  3396                                  
  3397 00000509 BF[9E00]                        MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
  3398                                  	; 15/07/2018
  3399 0000050C B80300                          MOV     AX,3
  3400 0000050F AB                              STOSW		; Adjust Refcount
  3401                                  	;MOV	DI,SYSINITVAR	; 16/03/2018 (Retro DOS v2.0)
  3402 00000510 BF[3B0F]                	MOV     DI,SysInitTable ; 15/07/2018 (Retro DOS v3.0)
  3403 00000513 CB                              RETF
  3404                                  	
  3405                                  	; 18/04/2018
  3406                                  FILL1	equ	$ - DATASEGMENT
  3407                                  ; ---------------------------------------------------------------------------
  3408                                  ; 16/07/2018 - Retro DOS v3.0
  3409 00000514 00<rep 2Eh>             	times (490-FILL1) db 0	; *!!!*
  3410                                  
  3411                                  ;============================================================================
  3412                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)  (2)
  3413                                  ;============================================================================
  3414                                  ; 16/07/2018 - Retro DOS 3.0	
  3415                                  
  3416                                  ;  MS_DATA.ASM (MSDOS 6.0, 1991) (1) ... $$$
  3417                                   
  3418                                  ; (continues from 'SFN' ..) - from offset 0542h in IBMDOS.COM, 1987 -
  3419                                  
  3420                                  ; DATASEGMENT + 490
  3421                                  
  3422                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  3423                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  3424                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  3425                                  ;       I_am    WFP_START,WORD          ;
  3426                                  ;       I_am    REN_WFP,WORD            ;
  3427                                  ;       I_am    CURR_DIR_END,WORD       ;
  3428                                  ;       I_am    NEXTADD,WORD            ;
  3429                                  ;       I_am    LASTPOS,WORD            ;
  3430                                  ;       I_am    CLUSNUM,WORD            ;
  3431                                  ; MSDOS 3.3
  3432                                  ;	I_am	DIRSEC,WORD
  3433                                  ;; MSDOS 6.0
  3434                                  ;;      I_am    DIRSEC,DWORD            ;>32mb		; AC0000
  3435                                  ;       I_am    DIRSTART,WORD           ;
  3436                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  3437                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  3438                                  ;                                       ; sectors
  3439                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  3440                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  3441                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  3442                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  3443                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  3444                                  
  3445 00000542 FFFF                    SFN:		dw -1
  3446 00000544 0000                    JFN:		dw 0
  3447 00000546 00000000                PJFN:		dd 0
  3448 0000054A 0000                    WFP_START: 	dw 0
  3449 0000054C 0000                    REN_WFP: 	dw 0
  3450 0000054E 0000                    CURR_DIR_END: 	dw 0
  3451 00000550 0000                    NEXTADD: 	dw 0
  3452 00000552 0000                    LASTPOS: 	dw 0
  3453 00000554 0000                    CLUSNUM: 	dw 0
  3454                                  ; MSDOS 3.3
  3455 00000556 0000                    DIRSEC: 	dw 0
  3456                                  ; MSDOS 6.0
  3457                                  ;DIRSEC:	dd 0
  3458 00000558 0000                    DIRSTART: 	dw 0
  3459                                  ; MSDOS 3.3
  3460 0000055A 0000                    SECPOS: 	dw 0
  3461                                  ; MSDOS 6.0
  3462                                  ;SECPOS: 	dd 0
  3463                                  ; MSDOS 3.3
  3464 0000055C 0000                    VALSEC: 	dw 0
  3465                                  ; MSDOS 6.0
  3466                                  ;VALSEC: 	dd 0
  3467 0000055E 0000                    BYTSECPOS: 	dw 0
  3468 00000560 00000000                BYTPOS:		dd 0
  3469 00000564 0000                    BYTCNT1: 	dw 0
  3470 00000566 0000                    BYTCNT2: 	dw 0
  3471 00000568 0000                    SECCNT: 	dw 0
  3472                                  
  3473                                  	; Offset 056Ah in IBMDOS.COM (MSDOS 3.3)
  3474                                  ; DATASEGMENT + 530 (in Retro DOS v3.0)
  3475                                  
  3476                                  ;       I_am    ENTFREE,WORD            ;
  3477                                  ;       I_am    ENTLAST,WORD            ;
  3478                                  ;       I_am    NXTCLUSNUM,WORD         ;
  3479                                  ;       I_am    GROWCNT,DWORD           ;
  3480                                  ;       I_am    CURBUF,DWORD            ;
  3481                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  3482                                  ;       I_am    SAVEBX,WORD             ;
  3483                                  ;       I_am    SAVEDS,WORD             ;
  3484                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  3485                                  ;       I_am    NSS,WORD
  3486                                  ;       I_am    NSP,WORD
  3487                                  
  3488 0000056A 0000                    ENTFREE:	dw 0
  3489 0000056C 0000                    ENTLAST:	dw 0
  3490 0000056E 0000                    NXTCLUSNUM:	dw 0
  3491 00000570 00000000                GROWCNT:	dd 0
  3492 00000574 00000000                CURBUF:		dd 0
  3493 00000578 00000000                CONSFT:		dd 0
  3494 0000057C 0000                    SAVEBX:		dw 0
  3495 0000057E 0000                    SAVEDS:		dw 0
  3496 00000580 0000                    RESTORE_TMP:	dw 0
  3497 00000582 0000                    NSS:		dw 0
  3498 00000584 0000                    NSP:		dw 0	 ; Offset 0584h in IBMDOS.COM (MSDOS 3.3)
  3499                                  
  3500                                  ; DATASEGMENT+558 :  ; *!!!*
  3501                                  	; Here is offset 0586h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  3502                                  
  3503                                  ; MSDOS 6.0
  3504                                  ;       I_am    EXTOPEN_FLAG,WORD,<0>   ;FT. extended open input flag       ;AN000;
  3505                                  ;       I_am    EXTOPEN_ON,BYTE,<0>     ;FT. extended open conditional flag ;AN000;
  3506                                  ;       I_am    EXTOPEN_IO_MODE,WORD,<0>;FT. extended open io mode          ;AN000;
  3507                                  ;       I_am    SAVE_DI,WORD            ;FT. extended open saved DI         ;AN000;
  3508                                  ;       I_am    SAVE_ES,WORD            ;FT. extended open saved ES         ;AN000;
  3509                                  ;       I_am    SAVE_DX,WORD            ;FT. extended open saved DX         ;AN000;
  3510                                  ;       I_am    SAVE_CX,WORD            ;FT. extended open saved CX         ;AN000;
  3511                                  ;       I_am    SAVE_BX,WORD            ;FT. extended open saved BX         ;AN000;
  3512                                  ;       I_am    SAVE_SI,WORD            ;FT. extended open saved SI         ;AN000;
  3513                                  ;       I_am    SAVE_DS,WORD            ;FT. extended open saved DS         ;AN000;
  3514                                  
  3515                                  ;	HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
  3516                                  ;	we used to just pass 16 bits in a register.  Now High_SECTOR holds
  3517                                  ;	the high 16, the low 16 are still in the register.
  3518                                  ;
  3519                                  ;       I_am    HIGH_SECTOR,WORD,<0>    ;>32mb higher sector #		    ;AN000;
  3520                                  ;
  3521                                  ;       ;I_am    UU_HIGH_SECTOR_TEMP,WORD,<0> ;M019: Unused
  3522                                  ;       I_am    OffsetMagicPatch,WORD,<offset MagicPatch> ;scottq 8/6/92
  3523                                  ;                                                         ;see dos\mpatch.asm
  3524                                  ;
  3525                                  ;       I_am    DISK_FULL,BYTE          ;>32mb indicating disk full when 1  ;AN000;
  3526                                  ;       I_am    TEMP_VAR,WORD           ; temporary variable for everyone   ;AN000;
  3527                                  ;       I_am    TEMP_VAR2,WORD          ; temporary variable 2 for everyone ;AN000;
  3528                                  ;       I_am    DrvErr,BYTE             ; used to save drive error          ;AN000;
  3529                                  ;       I_am    DOS34_FLAG,WORD,<0>     ; common flag for DOS 3.4           ;AN000;
  3530                                  ;       I_am    NO_FILTER_PATH,DWORD    ; pointer to orignal path           ;AN000;
  3531                                  ;       I_am    NO_FILTER_DPATH,DWORD   ; pointer to orignal path of destination;AN000;
  3532                                  ;; M008
  3533                                  ;       I_am   AbsRdWr_SS,WORD         ; INT 25/26 user stack segment
  3534                                  ;       I_am   AbsRdWr_SP,WORD         ; INT 25/26 user stack offset
  3535                                  ;       I_am   UU_Callback_flag,BYTE,<0>  ; Unused
  3536                                  ;; M008
  3537                                   
  3538                                  ; make those pushes fast!!!
  3539                                  	;.EVEN
  3540                                  align 2
  3541                                  
  3542                                  ; MSDOS 3.3 ($ MSDOS 6.0)
  3543                                  StackSize equ 180h			; gross but effective
  3544                                  
  3545                                  ;;;StackSize = 300h			; This is a "trial" change IBM hasn't
  3546                                  ;;;					; made up their minds about
  3547                                   
  3548                                  ;
  3549                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
  3550                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
  3551                                  ;
  3552                                   
  3553                                          ;PUBLIC  RENAMEDMA,AuxStack,DskStack,IOStack
  3554                                  RENAMEDMA:  ; LABEL   BYTE		; See DOS_RENAME
  3555                                  	;DB	StackSize DUP (?)       ;
  3556 00000586 00<rep 180h>            	times	StackSize db 0
  3557                                  
  3558                                  AUXSTACK:   ; LABEL   BYTE		;  Offset 0706h in IBMDOS.COM, 1987
  3559                                   	;DB	StackSize DUP (?)       ;
  3560 00000706 00<rep 180h>            	times	StackSize db 0
  3561                                  DSKSTACK:   ; LABEL   BYTE		;  Offset 0886h in IBMDOS.COM, 1987
  3562                                   	;DB	StackSize DUP (?)       ;
  3563 00000886 00<rep 180h>            	times	StackSize db 0
  3564                                  IOSTACK:    ; LABEL   BYTE		;  Offset 0A06h in IBMDOS.COM, 1987
  3565                                   
  3566                                  ; patch space for Boca folks.
  3567                                  ; Say What????!!! This does NOT go into the swappable area!
  3568                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
  3569                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
  3570                                   
  3571                                  ;PUBLIC  IBMPATCH
  3572                                  ;IBMPATCH label byte
  3573                                  ;	I_am    PRINTER_FLAG,BYTE,<0>   ; status of PRINT utility
  3574                                  ;	I_am    VOLCHNG_FLAG,BYTE,<0>   ; true if volume label created
  3575                                  ;	I_am    VIRTUAL_OPEN,BYTE,<0>   ; non-zero if we opened a virtual file
  3576                                  
  3577                                  IBMPATCH:
  3578 00000A06 00                      PRINTER_FLAG:	db 0
  3579 00000A07 00                      VOLCHNG_FLAG:	db 0
  3580 00000A08 00                      VIRTUAL_OPEN:	db 0
  3581                                  
  3582                                  ; MSDOS 6.0
  3583                                  ;; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
  3584                                  ;      I_am     FSeek_drive,BYTE        ;AN000; fastseek drive #
  3585                                  ;      I_am     FSeek_firclus,WORD      ;AN000; fastseek first cluster #
  3586                                  ;      I_am     FSeek_logclus,WORD      ;AN000; fastseek logical cluster #
  3587                                  ;      I_am     FSeek_logsave,WORD      ;AN000; fastseek returned log clus #
  3588                                  ;      I_am     UU_ACT_PAGE,WORD,<-1>   ;;;;;;; ;BL ; active EMS page ;AN000;
  3589                                  ;      I_am     TEMP_DOSLOC,WORD,<-1>   ;stores the temporary location of dos
  3590                                  					;at SYSINIT time.
  3591                                  ;SWAP_END LABEL   BYTE
  3592                                  ;PUBLIC  SWAP_END
  3593                                  
  3594                                  SWAP_END:
  3595                                   
  3596                                  ;; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
  3597                                  ;;   BE USED. If the size of the swap data area is ODD, it will be rounded up
  3598                                  ;;   to include this byte.
  3599                                  ;       DB      ?
  3600                                  
  3601 00000A09 00                      	db	0
  3602                                   
  3603                                  ;;hkn;	DB      (512+80+32-(SWAP_END-ibmpatch)) DUP (?)
  3604                                  
  3605                                  ;DOSDATA    ENDS
  3606                                  
  3607                                  ; 08/09/2018
  3608 00000A0A 00<rep 243h>            	times 579 db 0
  3609                                  
  3610                                  ;12/08/2018 - Retro DOS v3.0
  3611                                  ;15/07/2018
  3612                                  ;============================================================================
  3613                                  ; 	Retro DOS v3.0
  3614                                  ;============================================================================
  3615 00000C4D 00                      	db 	0
  3616                                  RETRODOSMSG:
  3617 00000C4E 0D0A                    	db	13,10
  3618                                  	;;;db	"Retro DOS v3.0 by Erdogan Tan [2018]"
  3619                                  	;;db	"Retro DOS v3.1 by Erdogan Tan [2019]" ; 29/06/2019
  3620                                  	;db	"Retro DOS v3.1 by Erdogan Tan [2019-2022]" ; 22/11/2022
  3621 00000C50 526574726F20444F53-     	db	"Retro DOS v3.1 by Erdogan Tan [2019-2024]" ; 16/01/2024
  3621 00000C59 2076332E3120627920-
  3621 00000C62 4572646F67616E2054-
  3621 00000C6B 616E205B323031392D-
  3621 00000C74 323032345D         
  3622 00000C79 0D0A2400                	db	13,10,"$", 0 
  3623                                  
  3624                                  ;============================================================================
  3625                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3626                                  ;============================================================================
  3627                                  ; 16/07/2018 - Retro DOS 3.0
  3628                                  
  3629                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3630                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3631 00000C7D 03                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3632 00000C7E 1E                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3633                                  
  3634                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3635                                  ;        I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3636                                  ;        I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3637                                  
  3638                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3639                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3640                                  ;
  3641                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3642                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3643                                  
  3644                                  ; Days in year
  3645                                  
  3646                                  YRTAB:   
  3647 00000C7F C8A6                    	DB	200,166			; Leap year
  3648 00000C81 C8A5                    	DB	200,165
  3649 00000C83 C8A5                    	DB	200,165
  3650 00000C85 C8A5                    	DB	200,165
  3651                                  
  3652                                  ; Days of each month
  3653                                  
  3654                                  MONTAB:        
  3655 00000C87 1F                      	DB      31                      ; January
  3656                                  february:
  3657 00000C88 1C                      	DB	28 			; February--reset each 
  3658                                  					; time year changes
  3659 00000C89 1F                              DB      31                      ; March
  3660 00000C8A 1E                              DB      30                      ; April
  3661 00000C8B 1F                              DB      31                      ; May
  3662 00000C8C 1E                              DB      30                      ; June
  3663 00000C8D 1F                              DB      31                      ; July
  3664 00000C8E 1F                              DB      31                      ; August
  3665 00000C8F 1E                              DB      30                      ; September
  3666 00000C90 1F                              DB      31                      ; October
  3667 00000C91 1E                              DB      30                      ; November
  3668 00000C92 1F                              DB      31                      ; December
  3669                                  
  3670                                  ;
  3671                                  ; This is the error code mapping table for INT 21 errors.  This table defines
  3672                                  ; those error codes which are "allowed" for each system call.  If the error
  3673                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3674                                  ; is to return the "real" error via Extended error, and one of the allowed
  3675                                  ; errors on the actual call.
  3676                                  ;
  3677                                  ; The table is organized as follows:
  3678                                  ;
  3679                                  ;    Each entry in the table is of variable size, but the first
  3680                                  ;       two bytes are always:
  3681                                  ;
  3682                                  ;       Call#,Cnt of bytes following this byte
  3683                                  ;
  3684                                  ; EXAMPLE:
  3685                                  ;       Call 61 (OPEN)
  3686                                  ;
  3687                                  ;       DB      61,5,12,3,2,4,5
  3688                                  ;
  3689                                  ;       61 is the AH INT 21 call value for OPEN.
  3690                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3691                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3692                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3693                                  ;       this case 5).  The last value will be the one returned on the call if
  3694                                  ;       the "real" error is not one of the allowed ones.
  3695                                  ;
  3696                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3697                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3698                                  ;   call, so set up an Extended error and leave the current error code alone.
  3699                                  ;
  3700                                  ; The table is terminated by a call value of 0FFh
  3701                                  
  3702                                  ;PUBLIC I21_MAP_E_TAB
  3703                                  	; 10/08/2018
  3704                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3705 00000C93 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3706 00000C97 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3707 00000C9C 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3708 00000CA0 0205                        DB          error_file_not_found,error_access_denied
  3709 00000CA2 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3710 00000CA6 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3711 00000CAA 04                          DB          error_too_many_open_files
  3712 00000CAB 05                          DB          error_access_denied
  3713                                      ; MSDOS 6.0
  3714                                      ;DB  OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3715                                      ;DB          error_too_many_open_files
  3716                                      ;DB          error_not_dos_disk,error_access_denied
  3717                                      ; MSDOS 3.3
  3718 00000CAC 3D0503020C                  DB  OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3719 00000CB1 0405                        DB          error_too_many_open_files,error_access_denied
  3720 00000CB3 3E0106                      DB  CLOSE,1,error_invalid_handle
  3721 00000CB6 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3722 00000CBA 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3723 00000CBE 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3724 00000CC3 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3725 00000CC7 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3726 00000CCC 05                          DB          error_access_denied
  3727 00000CCD 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3728 00000CD2 0605                        DB          error_invalid_handle,error_access_denied
  3729 00000CD4 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3730 00000CD8 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3731                                      ; MSDOS 6.0	
  3732                                      ;DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3733                                      ; MSDOS 3.3	
  3734 00000CDC 47010F                      DB  CURRENT_DIR,1,error_invalid_drive
  3735 00000CDF 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3736 00000CE3 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3737 00000CE7 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3738 00000CEC 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3739 00000CF1 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3740 00000CF4 0805                        DB          error_not_enough_memory,error_access_denied
  3741 00000CF6 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3742 00000CFB 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3743                                      ; MSDOS 6.0
  3744                                      ;DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3745                                      ;DB          error_current_directory,error_access_denied
  3746                                      ; MSDOS 3.3
  3747 00000CFE 5604110302                  DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3748 00000D03 05                          DB          error_access_denied
  3749                                      ; MSDOS 6.0	
  3750                                      ;DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3751                                      ;DB             error_invalid_data,error_invalid_function
  3752                                      ; MSDOS 3.03	
  3753 00000D04 57020601                    DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3754 00000D08 580101                      DB  ALLOCOPER,1,error_invalid_function
  3755 00000D0B 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3756 00000D0F 0405                        DB          error_too_many_open_files,error_access_denied
  3757 00000D11 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3758 00000D15 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3759 00000D18 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3760 00000D1C 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3761 00000D1E 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3762 00000D22 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3763 00000D26 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3764 00000D29 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3765 00000D2D 01                          DB              error_invalid_function
  3766                                      ; MSDOS 6.0		
  3767                                      ;DB	ExtOpen,10
  3768                                      ;DB   error_path_not_found,error_file_not_found,error_invalid_access
  3769                                      ;DB         error_too_many_open_files,error_file_exists,error_not_enough_memory
  3770                                      ;DB         error_not_dos_disk,error_invalid_data
  3771                                      ;DB             error_invalid_function,error_access_denied
  3772                                      ;DB GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3773                                      ;DB         error_invalid_function,error_access_denied
  3774 00000D2E FF                          DB  0FFh
  3775                                  
  3776                                  ;============================================================================
  3777                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3778                                  ;============================================================================
  3779                                  ; 16/07/2018 - Retro DOS 3.0
  3780                                  
  3781                                  ;**
  3782                                  ;
  3783                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
  3784                                  ; errors.  Each entry is 4 bytes long:
  3785                                  ;
  3786                                  ;       Err#,Class,Action,Locus
  3787                                  ;
  3788                                  ; A value of 0FFh indicates a call specific value (ie.  should already
  3789                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3790                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
  3791                                  ;
  3792                                  
  3793                                  ;PUBLIC  ERR_TABLE_21
  3794                                  ERR_TABLE_21: ; LABEL   BYTE
  3795 00000D2F 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,     0FFh
  3796 00000D33 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3797 00000D37 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3798 00000D3B 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,     errLOC_Unk
  3799 00000D3F 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,      0FFh
  3800 00000D43 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3801 00000D47 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,     errLOC_Mem
  3802 00000D4B 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3803 00000D4F 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3804 00000D53 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3805 00000D57 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3806 00000D5B 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3807 00000D5F 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,     errLOC_Unk
  3808 00000D63 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3809 00000D67 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,      errLOC_Disk
  3810 00000D6B 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,      errLOC_Disk
  3811 00000D6F 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3812 00000D73 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,      errLOC_Disk
  3813 00000D77 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3814 00000D7B 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3815 00000D7F 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,     0FFh
  3816 00000D83 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,      errLOC_Unk
  3817 00000D87 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,     errLOC_Disk
  3818 00000D8B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3819 00000D8F 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,      errLOC_Net
  3820 00000D93 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3821 00000D97 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,     errLOC_Unk
  3822 00000D9B 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3823                                      ; MSDOS 6.0
  3824                                      ;DB  error_handle_EOF,            errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3825                                      ;DB  error_handle_Disk_Full,      errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3826                                      ;DB  error_sys_comp_not_loaded,   errCLASS_Unk,       errACT_Abort,     errLOC_Disk ;AN001;
  3827 00000D9F FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	    0FFh
  3828                                  
  3829                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
  3830                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
  3831                                  ;		db 2,8,3,2
  3832                                  ;		db 3,8,3,2
  3833                                  ;		db 4,1,4,1
  3834                                  ;		db 5,3,3,0FFh
  3835                                  ;		db 6,7,4,1
  3836                                  ;		db 7,7,5,5
  3837                                  ;		db 8,1,4,5
  3838                                  ;		db 9,7,4,5
  3839                                  ;		db 0Ah,7,4,5
  3840                                  ;		db 0Bh,9,3,1
  3841                                  ;		db 0Ch,7,4,1
  3842                                  ;		db 0Dh,9,4,1
  3843                                  ;		db 0Fh,8,3,2
  3844                                  ;		db 10h,3,3,2
  3845                                  ;		db 11h,0Dh,3,2
  3846                                  ;		db 12h,8,3,2
  3847                                  ;		db 50h,0Ch,3,2
  3848                                  ;		db 20h,0Ah,2,2
  3849                                  ;		db 21h,0Ah,2,2
  3850                                  ;		db 54h,1,4,0FFh
  3851                                  ;		db 56h,3,3,1
  3852                                  ;		db 52h,1,4,2
  3853                                  ;		db 32h,9,3,3
  3854                                  ;		db 55h,0Ch,3,3
  3855                                  ;		db 57h,9,3,1
  3856                                  ;		db 53h,0Dh,4,1
  3857                                  ;		db 24h,1,4,5
  3858                                  ;		db 0FFh,0FFh,0FFh,0FFh
  3859                                  
  3860                                  ;
  3861                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
  3862                                  ; errors.  Each entry is 4 bytes long:
  3863                                  ;
  3864                                  ;       Err#,Class,Action,Locus
  3865                                  ;
  3866                                  ; A Locus value of 0FFh indicates a call specific value (ie.  should already
  3867                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3868                                  ; THE END.
  3869                                  
  3870                                  ;PUBLIC  ERR_TABLE_24
  3871                                  ERR_TABLE_24: ; LABEL   BYTE
  3872 00000DA3 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3873 00000DA7 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3874 00000DAB 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,    0FFh
  3875 00000DAF 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3876 00000DB3 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3877 00000DB7 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3878 00000DBB 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,     errLOC_Disk
  3879 00000DBF 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3880 00000DC3 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3881 00000DC7 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,    errLOC_SerDev
  3882 00000DCB 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,     0FFh
  3883 00000DCF 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,     0FFh
  3884 00000DD3 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,     0FFh
  3885 00000DD7 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3886 00000DDB 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3887 00000DDF 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3888 00000DE3 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3889 00000DE7 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3890 00000DEB 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3891 00000DEF FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,     0FFh
  3892                                  
  3893                                  
  3894                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
  3895                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
  3896                                  ;		db 14h,4,5,1
  3897                                  ;		db 15h,5,7,0FFh
  3898                                  ;		db 16h,4,5,1
  3899                                  ;		db 17h,0Bh,4,2
  3900                                  ;		db 18h,4,5,1
  3901                                  ;		db 19h,5,1,2
  3902                                  ;		db 1Ah,0Bh,7,2
  3903                                  ;		db 1Bh,0Bh,4,2
  3904                                  ;		db 1Ch,2,7,4
  3905                                  ;		db 1Dh,5,4,0FFh
  3906                                  ;		db 1Eh,5,4,0FFh
  3907                                  ;		db 1Fh,0Dh,4,0FFh
  3908                                  ;		db 20h,0Ah,2,2
  3909                                  ;		db 21h,0Ah,2,2
  3910                                  ;		db 22h,0Bh,7,2
  3911                                  ;		db 32h,9,3,3
  3912                                  ;		db 23h,7,4,1
  3913                                  ;		db 24h,1,4,5
  3914                                  ;		db 0FFh,0Dh,5,0FFh
  3915                                  
  3916                                  ;
  3917                                  ; We need to map old int 24 errors and device driver errors into the new set
  3918                                  ; of errors.  The following table is indexed by the new errors
  3919                                  ;
  3920                                  
  3921                                  ;Public  ErrMap24
  3922                                  ErrMap24: ; Label   BYTE
  3923 00000DF3 13                          DB  error_write_protect	; 0
  3924 00000DF4 14                          DB  error_bad_unit		; 1
  3925 00000DF5 15                          DB  error_not_ready		; 2
  3926 00000DF6 16                          DB  error_bad_command	; 3
  3927 00000DF7 17                          DB  error_CRC		; 4
  3928 00000DF8 18                          DB  error_bad_length	; 5
  3929 00000DF9 19                          DB  error_seek		; 6
  3930 00000DFA 1A                          DB  error_not_DOS_disk	; 7
  3931 00000DFB 1B                          DB  error_sector_not_found	; 8
  3932 00000DFC 1C                          DB  error_out_of_paper	; 9
  3933 00000DFD 1D                          DB  error_write_fault	; A
  3934 00000DFE 1E                          DB  error_read_fault	; B
  3935 00000DFF 1F                          DB  error_gen_failure	; C
  3936 00000E00 1F                          DB  error_gen_failure	; D  RESERVED
  3937 00000E01 1F                          DB  error_gen_failure	; E  RESERVED
  3938 00000E02 22                          DB  error_wrong_disk	; F
  3939                                  
  3940                                  ;Public  ErrMap24End
  3941                                  ErrMap24End: ; LABEL   BYTE
  3942                                  
  3943                                  ; 16/07/2018 - Retro DOS v3.0
  3944                                  ;_MAXCALL:	db 	36
  3945                                  ;_MAXCOM:	db	104
  3946                                  
  3947                                  ; 08/09/2018
  3948 00000E03 24                          db  36
  3949 00000E04 68                          db  104
  3950                                  
  3951                                  ;============================================================================
  3952                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3953                                  ;============================================================================
  3954                                  ; 11/07/2018 - Retro DOS v3.0
  3955                                  
  3956                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3957                                  
  3958 00000E05 90                      align 2
  3959                                  
  3960                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3961                                  
  3962                                  ; Standard Functions
  3963                                  ;DISPATCH    LABEL WORD
  3964                                  DISPATCH:
  3965                                  	; 16/07/2018 - Retro DOS v3.0
  3966                                  	; (MSDOS 3.3)
  3967                                  
  3968 00000E06 [CA64]                          short_addr  _$ABORT			    ;  0      0
  3969 00000E08 [7223]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3970 00000E0A [7B23]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3971 00000E0C [3424]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3972 00000E0E [5124]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3973 00000E10 [5724]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3974 00000E12 [C422]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3975 00000E14 [F022]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3976 00000E16 [8520]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3977 00000E18 [F120]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3978 00000E1A [FD20]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3979 00000E1C [6B24]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3980 00000E1E [7524]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3981 00000E20 [521D]                          short_addr  _$DISK_RESET		    ; 13      D
  3982 00000E22 [4E1C]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3983 00000E24 [7C2B]                          short_addr  _$FCB_OPEN			    ; 15      F
  3984 00000E26 [1E25]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3985 00000E28 [7C2C]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3986 00000E2A [112D]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3987 00000E2C [BA24]                          short_addr  _$FCB_DELETE		    ; 19     13
  3988 00000E2E [682C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3989 00000E30 [6D2C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3990 00000E32 [4E2C]                          short_addr  _$FCB_CREATE		    ; 22     16
  3991 00000E34 [8F25]                          short_addr  _$FCB_RENAME		    ; 23     17
  3992                                  	; 16/07/2018
  3993                                          ;short_addr _CPMFUNC			    ; 24     18	
  3994 00000E36 [1917]                          short_addr  NO_OP			    ; 24     18
  3995 00000E38 [491C]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3996 00000E3A [3E1C]                          short_addr  _$SET_DMA			    ; 26     1A
  3997                                  
  3998                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3999                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4000                                  ;                                                                          ;
  4001 00000E3C [DB1C]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  4002 00000E3E [DD1C]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  4003                                  ;                                                                          ;
  4004                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4005                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4006                                  
  4007                                          ;short_addr  _CPMFUNC			    ; 29     1D
  4008                                          ;short_addr  _CPMFUNC			    ; 30     1E
  4009                                  
  4010                                  ; 08/07/2018 - Retro DOS v3.0
  4011                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4012                                  
  4013 00000E40 [1917]                  	short_addr  NO_OP			    ; 29     1D
  4014 00000E42 [1917]                  	short_addr  NO_OP			    ; 30     1E
  4015                                  
  4016                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4017                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4018                                  ;                                                                          ;
  4019 00000E44 [211D]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  4020                                  ;                                                                          ;
  4021                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4022                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4023                                          ;short_addr _CPMFUNC			    ; 32     20
  4024                                  
  4025                                  ; 08/07/2018 - Retro DOS v3.0
  4026                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4027                                  
  4028 00000E46 [1917]                  	short_addr  NO_OP			    ; 32     20
  4029                                  
  4030 00000E48 [722C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  4031 00000E4A [772C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  4032 00000E4C [CF24]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  4033 00000E4E [A224]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  4034                                  
  4035                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  4036                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  4037                                  
  4038                                  ; Extended Functions
  4039 00000E50 [701C]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  4040                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4041                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4042                                  ;                                                                          ;
  4043 00000E52 [3A1E]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  4044                                  ;                                                                          ;
  4045                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4046                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4047 00000E54 [632C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  4048 00000E56 [5E2C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  4049 00000E58 [D01C]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  4050 00000E5A [2118]                          short_addr  _$GET_DATE                      ; 42     2A
  4051 00000E5C [3E18]                          short_addr  _$SET_DATE                      ; 43     2B
  4052 00000E5E [5E18]                          short_addr  _$GET_TIME                      ; 44     2C
  4053 00000E60 [6F18]                          short_addr  _$SET_TIME                      ; 45     2D
  4054 00000E62 [1C1A]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  4055                                  
  4056                                  ; Extended functionality group
  4057 00000E64 [2A1C]                          short_addr  _$GET_DMA                       ; 47     2F
  4058 00000E66 [FE19]                          short_addr  _$GET_VERSION                   ; 48     30
  4059 00000E68 [6E64]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  4060                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4061                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4062                                  ;                                                                          ;
  4063 00000E6A [231D]                          short_addr  _$GET_DPB			    ; 50     32
  4064                                  ;                                                                          ;
  4065                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4066                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4067 00000E6C [5F14]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  4068 00000E6E [091D]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  4069 00000E70 [601C]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  4070 00000E72 [FF1B]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  4071 00000E74 [881C]                          short_addr  _$CHAR_OPER                     ; 55     37
  4072 00000E76 [231A]                          short_addr  _$INTERNATIONAL                 ; 56     38
  4073                                  ; XENIX CALLS
  4074                                  ;   Directory Group
  4075 00000E78 [502F]                          short_addr  _$MKDIR			    ; 57     39
  4076 00000E7A [A22E]                          short_addr  _$RMDIR			    ; 58     3A
  4077 00000E7C [DE2E]                          short_addr  _$CHDIR			    ; 59     3B
  4078                                  ;   File Group
  4079 00000E7E [EF70]                          short_addr  _$CREAT			    ; 60     3C
  4080 00000E80 [3570]                          short_addr  _$OPEN			    ; 61     3D
  4081 00000E82 [C46D]                          short_addr  _$CLOSE		 	    ; 62     3E
  4082 00000E84 [DC6E]                          short_addr  _$READ			    ; 63     3F
  4083 00000E86 [316F]                          short_addr  _$WRITE			    ; 64     40
  4084 00000E88 [4471]                          short_addr  _$UNLINK			    ; 65     41
  4085 00000E8A [366F]                          short_addr  _$LSEEK			    ; 66     42
  4086 00000E8C [FC70]                          short_addr  _$CHMOD			    ; 67     43
  4087 00000E8E [AD2F]                          short_addr  _$IOCTL			    ; 68     44
  4088 00000E90 [F06F]                          short_addr  _$DUP			    ; 69     45
  4089 00000E92 [1270]                          short_addr  _$DUP2			    ; 70     46
  4090 00000E94 [452E]                          short_addr  _$CURRENT_DIR		    ; 71     47
  4091                                  ;   Memory Group
  4092 00000E96 [4F65]                          short_addr  _$ALLOC			    ; 72     48
  4093 00000E98 [6C66]                          short_addr  _$DEALLOC                       ; 73     49
  4094 00000E9A [4866]                          short_addr  _$SETBLOCK                      ; 74     4A
  4095                                  ;   Process Group
  4096 00000E9C [E35F]                          short_addr  _$EXEC			    ; 75     4B
  4097 00000E9E [A664]                          short_addr  _$EXIT			    ; 76     4C
  4098 00000EA0 [D95F]                          short_addr  _$WAIT			    ; 77     4D
  4099 00000EA2 [842D]                          short_addr  _$FIND_FIRST		    ; 78     4E
  4100                                  ;   Special Group
  4101 00000EA4 [DD2D]                          short_addr  _$FIND_NEXT			    ; 79     4F
  4102                                  ; SPECIAL SYSTEM GROUP
  4103                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4104                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4105                                  ;                                                                          ;
  4106 00000EA6 [5314]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  4107 00000EA8 [5914]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  4108 00000EAA [151D]                          short_addr  _$GET_IN_VARS                   ; 82     52
  4109 00000EAC [821D]                          short_addr  _$SETDPB			    ; 83     53
  4110                                  ;                                                                          ;
  4111                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4112                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4113 00000EAE [171A]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  4114                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4115                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4116                                  ;                                                                          ;
  4117 00000EB0 [2C1E]                          short_addr  _$DUP_PDB                       ; 85     55
  4118                                  ;                                                                          ;
  4119                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4120                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4121 00000EB2 [6C71]                          short_addr  _$RENAME			    ; 86     56
  4122 00000EB4 [A06F]                          short_addr  _$FILE_TIMES                    ; 87     57
  4123 00000EB6 [8D66]                          short_addr  _$ALLOCOPER                     ; 88     58
  4124                                  
  4125                                  ; 08/07/2018 - Retro DOS v3.0
  4126                                  ; -------------------------------------------------------------------------;
  4127                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4128                                  
  4129                                  ; Network extention system calls
  4130 00000EB8 [AD1C]                          short_addr  _$GetExtendedError              ; 89     59
  4131 00000EBA [F971]                          short_addr  _$CreateTempFile                ; 90     5A
  4132 00000EBC [E171]                          short_addr  _$CreateNewFile                 ; 91     5B
  4133 00000EBE [9172]                          short_addr  _$LockOper                      ; 92     5C
  4134 00000EC0 [AF66]                          short_addr  _$ServerCall                    ; 93     5D
  4135 00000EC2 [0569]                          short_addr  _$UserOper                      ; 94     5E
  4136 00000EC4 [9468]                          short_addr  _$AssignOper                    ; 95     5F
  4137 00000EC6 [5D6D]                          short_addr  _$NameTrans                     ; 96     60
  4138 00000EC8 [1917]                  	short_addr  NO_OP			    ; 97     61
  4139 00000ECA [5914]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  4140                                  ; the next call is reserved for hangool sys call
  4141                                  	; 16/07/2018
  4142                                  	;short_addr  _$ECS_Call			    ; 99     63
  4143 00000ECC [1917]                  	short_addr  NO_OP			    ; 99     63
  4144                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4145                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4146                                  ;                                                                          ;
  4147 00000ECE [8614]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  4148                                  ;                                                                          ;
  4149                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4150                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4151 00000ED0 [A91A]                          short_addr  _$GetExtCntry                   ; 101    65
  4152 00000ED2 [A81B]                          short_addr  _$GetSetCdPg                    ; 102    66
  4153 00000ED4 [136E]                          short_addr  _$ExtHandle                     ; 103    67
  4154 00000ED6 [F76D]                          short_addr  _$COMMIT                        ; 104    68
  4155                                  
  4156                                  ; 08/07/2018
  4157                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  4158                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  4159                                  
  4160                                  ;	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  4161                                  ;	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  4162                                  ;	short_addr  NO_OP                           ; 107    6B   
  4163                                  ;						    ; IFS_IOCTL no longer 
  4164                                  ;						    ; supported
  4165                                  ;	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  4166                                  
  4167                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4168                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4169                                  ;                                                                          ;
  4170                                  ;ifdef ROMEXEC
  4171                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  4172                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  4173                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  4174                                  ;endif
  4175                                  ;                                                                          ;
  4176                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4177                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4178                                  
  4179                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  4180                                  
  4181                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  4182                                  
  4183                                  ; 08/07/2018 - Retro DOS v3.0
  4184                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4185                                  
  4186                                  ;	If	Installed
  4187                                  
  4188                                  align 2
  4189                                  
  4190                                  ;PUBLIC FOO
  4191                                  
  4192                                  FOO:	; LABEL WORD
  4193 00000ED8 [CB17]                          short_addr  Leave2F
  4194                                  
  4195 00000EDA [DC0E]                  DTab:	DW  DOSTable
  4196                                  
  4197                                  	;PUBLIC FOO,DTAB
  4198                                  
  4199                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  4200                                         
  4201                                  DOSTable:  ; LABEL  WORD
  4202 00000EDC 2F                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  46
  4203 00000EDD [F817]                          short_addr  DOSInstall          ;   0 install check
  4204 00000EDF [B83A]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  4205 00000EE1 [7D1C]                          short_addr  RECSET              ;   2   RECSET
  4206 00000EE3 [F517]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  4207 00000EE5 [4956]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  4208 00000EE7 [7D23]                          short_addr  OUTT                ;   5   OUT
  4209 00000EE9 [B658]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  4210 00000EEB [DB5D]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  4211 00000EED [723B]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  4212 00000EEF [7D5F]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  4213 00000EF1 [2B73]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  4214 00000EF3 [6238]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  4215 00000EF5 [4B38]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  4216 00000EF7 [B618]                          short_addr  DATE16              ;   13  DATE16
  4217 00000EF9 [821F]                          short_addr  Idle		;   14      empty slot
  4218 00000EFB [CF5D]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  4219 00000EFD [821F]                          short_addr  Idle		;   16      empty slot
  4220 00000EFF [4B1F]                          short_addr  StrCpy              ;   17  StrCpy
  4221 00000F01 [631F]                          short_addr  StrLen              ;   18  StrLen
  4222 00000F03 [0D56]                          short_addr  UCase		;   19  UCase
  4223 00000F05 [775E]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  4224 00000F07 [545F]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  4225 00000F09 [1368]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  4226 00000F0B [C569]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  4227 00000F0D [0B16]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  4228 00000F0F [7269]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  4229 00000F11 [826D]                          short_addr  DriveFromText       ;   26  DriveFromText
  4230 00000F13 [5D19]                          short_addr  SETYEAR             ;   27  SETYEAR
  4231 00000F15 [F419]                          short_addr  DSUM                ;   28  DSUM
  4232 00000F17 [5119]                          short_addr  DSLIDE              ;   29  DSLIDE
  4233 00000F19 [2D1F]                          short_addr  StrCmp              ;   30  StrCmp
  4234 00000F1B [B868]                          short_addr  InitCDS             ;   31  initcds
  4235 00000F1D [E567]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  4236 00000F1F [5D6D]                          short_addr  _$NameTrans		;   33  $NameTrans
  4237 00000F21 [4017]                          short_addr  CAL_LK              ;   34  CAL_LK
  4238 00000F23 [DD4A]                          short_addr  DEVNAME             ;   35  DEVNAME
  4239 00000F25 [821F]                          short_addr  Idle                ;   36  Idle
  4240 00000F27 [711F]                          short_addr  DStrLen             ;   37  DStrLen
  4241 00000F29 [0420]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  4242 00000F2B [C46D]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  4243 00000F2D [0A20]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  4244 00000F2F [DC6E]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  4245 00000F31 [E31F]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  4246 00000F33 [4320]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  4247 00000F35 [3620]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  4248 00000F37 [6020]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  4249                                          
  4250                                  	; 10/08/2018
  4251                                  	;short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  4252                                  
  4253 00000F39 [1917]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  4254                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  4255                                  
  4256                                  DOSTableEnd:  ; LABEL BYTE
  4257                                  
  4258                                  	;ENDIF
  4259                                  
  4260                                  ;============================================================================
  4261                                  ; DOSTAB.ASM, MSDOS 6.0, 1991
  4262                                  ;============================================================================
  4263                                  ; 16/07/2018 - Retro DOS v3.0
  4264                                  
  4265                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
  4266                                  
  4267                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
  4268                                  ;
  4269                                  	;PUBLIC	SysInitTable
  4270                                  
  4271                                  SysInitTable:	; label  byte
  4272 00000F3B [2600]                  	dw      SYSINITVARS			; pointer to sysinit var
  4273 00000F3D 0000                            dw      0                             	; segment
  4274 00000F3F [FD0F]                          dw      COUNTRY_CDPG		   	; pointer to country tabl
  4275 00000F41 0000                            dw      0                            	; segment of pointer
  4276                                  
  4277                                  ; DOS 3.3 F.C. 6/12/86
  4278                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
  4279                                  ;
  4280                                  	;PUBLIC	FastOpenTable
  4281                                  	;PUBLIC	FastTable		; a better name
  4282                                  	;EXTRN	FastRet:FAR		; defined in misc2.asm
  4283                                  
  4284                                  ; MSDOS 6.0
  4285                                  ;FastTable:     ;label  byte		; a better name
  4286                                  ;FastOpenTable: ;label  byte
  4287                                  ;	dw      2                       ; number of entries
  4288                                  ;	dw      FastRet			; pointer to ret instr.
  4289                                  ;	dw      0                       ; and will be modified by
  4290                                  ;	dw      FastRet			; FASTxxx when loaded in
  4291                                  ;	dw      0                       
  4292                                  
  4293                                  ;
  4294                                  ; DOS 3.3 F.C. 6/12/86
  4295                                  ;
  4296                                  
  4297                                  ;	PUBLIC	FastFlg                 ; flags
  4298                                  ;FastFlg:	;label  byte		; don't change the foll: order
  4299                                  ;FastOpenFlg:
  4300                                  ;	db	0  ; I_am    FastOpenFlg,BYTE,<0>
  4301                                  
  4302                                  ; MSDOS 3.3
  4303                                  FastTable:
  4304                                  FastOpenTable:
  4305 00000F43 0400                    	dw      4 
  4306 00000F45 [0020]                  	dw      FastRet
  4307 00000F47 0000                    	dw      0  ; (('FastRet' segment will be set to CS by DOSINIT))
  4308                                  
  4309                                  	;PUBLIC	FastOpen_Ext_Info
  4310                                  
  4311                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
  4312                                  ; and clusnum  which are filled by DOS 3.ncwhen calling FastOpen Insert
  4313                                  ; or filled by FastOPen when calling FastOpen Lookup
  4314                                  
  4315                                  FastOpen_Ext_Info: ;label  byte		;dirpos
  4316 00000F49 00<rep 5h>              	times	FEI.size db 0	; 5 (for MSDOS 3.3), 11 (for MSDOS 6.0)
  4317                                  
  4318                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
  4319                                  ; when calling FastOpen Lookup
  4320                                  
  4321                                  	;PUBLIC	Dir_Info_Buff
  4322                                  
  4323                                  Dir_Info_Buff:	; label  byte
  4324 00000F4E 00<rep 20h>             	times	dir_entry.size db 0 ; 32 ; segment of pointer
  4325                                  
  4326                                  ; MSDOS 3.3 (IBMDOS.COM, 1987)
  4327                                  FastFlg:
  4328                                  FastOpenFlg:
  4329 00000F6E 00                      	db	0
  4330                                  
  4331                                  	;I_am	Next_Element_Start,WORD	; save next element start offset
  4332                                  Next_Element_Start:
  4333 00000F6F 0000                    	dw	0
  4334                                  
  4335                                  	; MSDOS 6.0
  4336                                  	;I_am    Del_ExtCluster,WORD     ; for dos_delete                       
  4337                                  
  4338                                  ; 17/07/2018
  4339                                  
  4340                                  ; The following is a stack and its pointer for interrupt 2F which is uesd
  4341                                  ; by NLSFUNC.  There is no significant use of this stack, we are just trying
  4342                                  ; not to destroy the INT 21 stack saved for the user.
  4343                                  
  4344                                  	;PUBLIC	USER_SP_2F
  4345                                  
  4346                                  USER_SP_2F:	; LABEL  WORD
  4347 00000F71 [730F]                  	dw	FAKE_STACK_2F
  4348                                  
  4349                                  	;PUBLIC	Packet_Temp
  4350                                  ;Packet_Temp	label  word		; temporary packet used by readtime
  4351                                  	;PUBLIC  DOS_TEMP		; temporary word
  4352                                  ;DOS_TEMP	label  word
  4353                                  FAKE_STACK_2F:
  4354                                  	;dw	14 dup (0)
  4355 00000F73 0000<rep Ch>            	times	12 dw 0			; 12 register temporary storage
  4356                                  
  4357                                  	;PUBLIC	Hash_Temp		; temporary word
  4358                                  ;Hash_Temp	label  word              
  4359                                  	;dw	4 dup (0)		; temporary hash table during config.sys
  4360                                  
  4361                                  	;PUBLIC  SCAN_FLAG             	; flag to indicate key ALT_Q
  4362                                  SCAN_FLAG:	; label  byte
  4363 00000F8B 00                      	db	0
  4364                                  
  4365                                  ; MSDOS 3.3
  4366                                  DISK_FULL:
  4367 00000F8C 00                      	db	0
  4368                                  
  4369                                  	;PUBLIC  DATE_FLAG
  4370                                  DATE_FLAG:   	;label  word 		; flag to
  4371 00000F8D 0000                    	dw     0                	; to update the date
  4372                                  
  4373                                  FETCHI_TAG:	;label  word		; OBSOLETE - no longer used
  4374 00000F8F 0000                    	dw     0			; formerly part of IBM's piracy protection
  4375                                  
  4376                                  ; MSDOS 6.0
  4377                                  ;      PUBLIC	MSG_EXTERROR 		; for system message addr              
  4378                                  ;MSG_EXTERROR	label  DWORD                                                     
  4379                                  ;               dd     0                ; for extended error                   
  4380                                  ;               dd     0                ; for parser                           
  4381                                  ;              	dd     0                ; for critical errror                  
  4382                                  ;              	dd     0                ; for IFS                              
  4383                                  ;              	dd     0                ; for code reduction                   
  4384                                  ;
  4385                                  ;      PUBLIC  	SEQ_SECTOR              ; last sector read                     
  4386                                  ;SEQ_SECTOR    	label  DWORD                                                     
  4387                                  ;              	dd     -1                                                        
  4388                                  ;
  4389                                  ;;      I_am    ACT_PAGE,WORD,<-1>      ; active EMS page                       
  4390                                  ;	I_am    SC_SECTOR_SIZE,WORD     ; sector size for SC                 
  4391                                  ;       I_am    SC_DRIVE,BYTE           ; drive # for secondary cache        
  4392                                  ;       I_am    CurSC_DRIVE,BYTE,<-1>   ; current SC drive                   
  4393                                  ;       I_am    CurSC_SECTOR,DWORD      ; current SC starting sector         
  4394                                  ;       I_am    SC_STATUS,WORD,<0>      ; SC status word                     
  4395                                  ;       I_am    SC_FLAG,BYTE,<0>        ; SC flag                            
  4396                                  ;       I_am    AbsDskErr,WORD,<0>	; Storage for Abs dsk read/write err
  4397                                  ;
  4398                                  ;	PUBLIC 	NO_NAME_ID                                                           
  4399                                  ;NO_NAME_ID	label byte                                                           
  4400                                  ;		db   'NO NAME    '	; null media id                      
  4401                                  ;
  4402                                  ;;hkn; moved from TABLE segment in kstrin.asm
  4403                                  ;
  4404                                  ;Public	KISTR001S,KISTR001E,LOOKSIZ	; 2/17/KK
  4405                                  ;KISTR001S	label	byte		; 2/17/KK
  4406                                  ;LOOKSIZ DB	0			; 0 if byte, NZ if word	2/17/KK
  4407                                  ;KISTR001E	label	byte		; 2/17/KK
  4408                                  ;
  4409                                  ;; the nul device driver used to be part of the code.  However, since the 
  4410                                  ;; header is in the data, and the entry points are only given as an offset,
  4411                                  ;; the strategy and interrupt entry points must also be in the data now.
  4412                                  ;;
  4413                                  ;
  4414                                  ;procedure   snuldev,far
  4415                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  4416                                  ; 	or	es:[bx.reqstat],stdon	; set done bit
  4417                                  ;entry inuldev
  4418                                  ;	ret				; must not be a return!
  4419                                  ;endproc snuldev
  4420                                  ;
  4421                                  
  4422                                  ;============================================================================
  4423                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  4424                                  ;============================================================================
  4425                                  ; 17/07/2018 - Retro DOS v3.0
  4426                                  
  4427                                  ; ----------------------------------------------------------------------------
  4428                                  ; BREAK   <Copyright notice and version>
  4429                                  ; ----------------------------------------------------------------------------
  4430                                  
  4431                                  ;CODSTRT EQU     $
  4432                                  
  4433                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  4434                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  4435                                  
  4436                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  4437                                  ;       module. The reason is so that the data alignments are the same in
  4438                                  ;       IBM-DOS and MS-DOS up through header.
  4439                                  
  4440                                  	;PUBLIC	HEADER
  4441                                  
  4442                                  HEADER:	; LABEL	BYTE
  4443                                          ;IF	DEBUG
  4444                                          ;DB	13,10,"Debugging DOS version "
  4445                                          ;DB	MAJOR_VERSION + "0"
  4446                                          ;DB	"."
  4447                                          ;DB	(MINOR_VERSION / 10) + "0"
  4448                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4449                                          ;ENDIF
  4450                                  
  4451                                          ;IF	NOT IBM
  4452 00000F91 0D0A4D532D444F5320-             DB	13,10,"MS-DOS version "
  4452 00000F9A 76657273696F6E20   
  4453 00000FA2 33                              DB	MAJOR_VERSION + "0"
  4454 00000FA3 2E                              DB	"."
  4455 00000FA4 33                              DB	(MINOR_VERSION / 10) + "0"
  4456                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4457 00000FA5 30                              DB	(MINOR_VERSION % 10) + "0"
  4458                                  
  4459                                          ;IF	HIGHMEM
  4460                                          ;DB	"H"
  4461                                          ;ENDIF
  4462                                  
  4463 00000FA6 0D0A436F7079726967-     	DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  4463 00000FAF 687420313938312C38-
  4463 00000FB8 322C38332C38342C38-
  4463 00000FC1 38204D6963726F736F-
  4463 00000FCA 667420436F72702E0D-
  4463 00000FD3 0A24               
  4464                                  	;ENDIF
  4465                                  
  4466                                  ;IF DEBUG
  4467                                  ;	DB	13,10,"$"
  4468                                  ;ENDIF
  4469                                  
  4470                                  ;include copyrigh.inc
  4471                                  
  4472                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  4473                                  	;DB	"Licensed Material - Property of Microsoft "
  4474                                  	;DB	"All rights reserved "
  4475                                  
  4476                                  ;============================================================================
  4477                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4478                                  ;============================================================================
  4479                                  ; 17/07/2018 - Retro DOS v3.0
  4480                                  
  4481                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4482                                  ;	NAME	IBMCODE
  4483                                  
  4484                                  ;BREAK <NullDev -- Driver for null device>
  4485                                  
  4486                                  ; ROMDOS note:
  4487                                  ;	NUL device driver used to be here, but it was removed and placed in
  4488                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4489                                  ;	header, which is also in DOSDATA.
  4490                                  
  4491                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4492                                  
  4493                                  ;Public MSC001S,MSC001E
  4494                                  ;MSC001S label byte
  4495                                  	;IF	IBM
  4496                                  ; Codes returned by BIOS
  4497                                  ERRIN:
  4498 00000FD5 02                      	DB	2			; NO RESPONSE
  4499 00000FD6 06                      	DB	6			; SEEK FAILURE
  4500 00000FD7 0C                      	DB	12			; GENERAL ERROR
  4501 00000FD8 04                      	DB	4			; BAD CRC
  4502 00000FD9 08                      	DB	8			; SECTOR NOT FOUND
  4503 00000FDA 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4504                                  ERROUT:
  4505                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4506 00000FDB 80                      	DB	80H			; NO RESPONSE
  4507 00000FDC 40                      	DB	40H			; Seek failure
  4508 00000FDD 02                      	DB	2			; Address Mark not found
  4509 00000FDE 10                      	DB	10H			; BAD CRC
  4510 00000FDF 04                      	DB	4			; SECTOR NOT FOUND
  4511 00000FE0 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4512                                  
  4513                                  NUMERR	EQU	$-ERROUT
  4514                                  	;ENDIF
  4515                                  ;MSC001E label byte
  4516                                  
  4517                                  ;============================================================================
  4518                                  ; DOSMES.INC (MSDOS 3.3, 1987)
  4519                                  ;============================================================================
  4520                                  ; 17/07/2018 - Retro DOS v3.0
  4521                                  
  4522                                  ;TABLE	SEGMENT BYTE PUBLIC 'TABLE'
  4523                                  
  4524                                  ; The international table(s). Used for DOS 3.x  (x < 3)
  4525                                  ; This is simply a sequence of tables of the following form:
  4526                                  ;
  4527                                  ; Offset
  4528                                  ;		BYTE  Size of this table excluding this byte and the next
  4529                                  ;		WORD  Country code represented by this table
  4530                                  ;			A sequence of n bytes, where n is the number specified
  4531                                  ;			by the first byte above and is not > internat_block_max,
  4532                                  ;			in the correct order for being returned by the
  4533                                  ;			INTERNATIONAL call as follows:
  4534                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  4535                                  ;		5 BYTE	Currency symbol null terminated
  4536                                  ;		2 BYTE	thousands separator null terminated
  4537                                  ;		2 BYTE	Decimal point null terminated
  4538                                  ;		2 BYTE	Date separator null terminated
  4539                                  ;		2 BYTE	Time separator null terminated
  4540                                  ;		1 BYTE	Bit field.  Currency format.
  4541                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  4542                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  4543                                  ;			Bit 2.	=1 imbedded at decimal point, & no spaces;
  4544                                  ;		1 BYTE	No. of significant decimal digits in currency
  4545                                  ;		1 BYTE	Bit field.  Time format.
  4546                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  4547                                  ;		WORD	Segment offset for address of case conversion routine
  4548                                  ;		WORD	RESERVED. Filled in by DOS. Segment value for above routine
  4549                                  ;		2 BYTE	Data list separator null terminated.
  4550                                  ;		   NOTE: The segment part of the DWORD Map_call is set
  4551                                  ;			by the INTERNATIONAL call. Do not try to initialize
  4552                                  ;			it to anything meaningful.
  4553                                  ;
  4554                                  ; The list of tables is terminated by putting a byte of -1 after the last
  4555                                  ;	table (a table with length -1).
  4556                                  
  4557                                  	; PUBLIC  international_table
  4558                                  
  4559                                  ; Offset 0F95h in IBMDOS.COM (MSDOS 3.3), 1987
  4560                                  
  4561                                  international_table:	; LABEL BYTE
  4562                                  
  4563 00000FE1 18                      	DB 	INTERNAT_BLOCK.size  ; = 24 ; Size in bytes of this table
  4564 00000FE2 0100                    	DW 	1		; Country code
  4565                                  USTABLE:
  4566 00000FE4 0000                    	dw	0		; 0-USA, 1-EUR, 2-JAP
  4567 00000FE6 2400000000              	db	'$',0,0,0,0	; Currency Symbol 5 bytes
  4568 00000FEB 2C00                    	db	',',0		; Thousands separator 2 bytes
  4569 00000FED 2E00                    	db	'.',0		; Decimal separator 2 bytes
  4570 00000FEF 2D00                    	db	'-',0		; Date separator 2 bytes
  4571 00000FF1 3A00                    	db	':',0		; Time separator 2 bytes
  4572 00000FF3 00                      	db	0		; Bit values
  4573                                                                 	;   Bit 0 = 0 if currency symbol first
  4574                                                                 	;         = 1 if currency symbol last
  4575                                                                 	;   Bit 1 = 0 if No space after currency symbol
  4576                                                                 	;         = 1 if space after currency symbol
  4577 00000FF4 02                      	db	2		; Number of places after currency dec point
  4578 00000FF5 00                      	db	0		; if 24 hour time, 0 if 12 hour time
  4579 00000FF6 [FB17]                  	dw	MAP_CASE	; Address of case mapping call (DWORD)
  4580 00000FF8 0000                            dw	0		; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  4581                                  				;  in pieces.
  4582 00000FFA 2C00                    	db	',',0		; Data list separator character
  4583                                  
  4584                                  ;	Tables for the IBM PC character set follow. The values
  4585                                  ;	associated with some of the currency symbols may change with
  4586                                  ;	other character sets. You may wish to add or delete country
  4587                                  ;	entries. NOTE: It is not a mistake that the JAPANESE entry
  4588                                  ;	has different currency symbols for the KANJI and
  4589                                  ;	non-KANJI versions.
  4590                                  	
  4591 00000FFC FF                      	DB	-1		; end of table
  4592                                  
  4593                                  ; The following table is used for DOS 3.3
  4594                                  ;DOS country and code page information is defined here for DOS 3.3.
  4595                                  ;The initial value for ccDosCountry is 1 (USA).
  4596                                  ;The initial value for ccDosCodepage is 850.
  4597                                  ;
  4598                                  ;
  4599                                  	;PUBLIC  COUNTRY_CDPG,UCASE_TAB,FILE_UCASE_TAB
  4600                                  	;PUBLIC  FILE_CHAR_TAB
  4601                                  
  4602                                  ; country and code page infomation
  4603                                  
  4604                                  COUNTRY_CDPG:	; label  byte
  4605 00000FFD 0000000000000000        	db	0,0,0,0,0,0,0,0		; reserved words
  4606 00001005 5C434F554E5452592E-     	db	'\COUNTRY.SYS',0	; path name of country.sys
  4606 0000100E 53595300           
  4607 00001012 00<rep 33h>             	times	51 db 0
  4608 00001045 B501                    	dw	437			; system code page id
  4609 00001047 0500                    	dw	5			; number of entries
  4610 00001049 02                      	db	SetUcase		; Ucase type
  4611 0000104A [8610]                  	dw	UCASE_TAB		; pointer to upper case table
  4612 0000104C 0000                    	dw	0			; segment of poiter
  4613 0000104E 04                      	db	SetUcaseFile		; Ucase file char type
  4614 0000104F [0811]                  	dw	FILE_UCASE_TAB		; pointer to file upper case table
  4615 00001051 0000                    	dw	0			; segment of poiter
  4616 00001053 05                      	db	SetFileList		; valid file chars type
  4617 00001054 [8A11]                  	dw	FILE_CHAR_TAB		; pointer to valid file char tab
  4618 00001056 0000                    	dw	0			; segment of poiter
  4619 00001058 06                      	db	SetCollate		; collate type
  4620 00001059 [BA11]                  	dw	COLLATE_TAB		; pointer to collate table
  4621 0000105B 0000                    	dw	0			; segment of pointer
  4622 0000105D 01                      	db	SetCountryInfo		; country info type
  4623 0000105E 2600                    	dw	NEW_COUNTRY_SIZE	; extended country info size
  4624 00001060 0100                    	dw	1			; USA country id
  4625 00001062 B501                    	dw	437			; USA system code page id
  4626 00001064 0000                    	dw	0			; date format
  4627 00001066 2400000000              	db	'$',0,0,0,0		; currency symbol
  4628 0000106B 2C00                    	db	',',0			; thousand separator
  4629 0000106D 2E00                    	db	'.',0			; decimal separator
  4630 0000106F 2D00                    	db	'-',0			; date separator
  4631 00001071 3A00                    	db	':',0			; time separator
  4632 00001073 00                      	db	0			; currency format flag
  4633 00001074 02                      	db	2			; # of disgit in currency
  4634 00001075 00                      	db	0			; time format
  4635 00001076 [FB17]                  	dw	MAP_CASE		;mono case routine entry point
  4636 00001078 0000                    	dw	0			; segment of entry point
  4637 0000107A 2C00                    	db	',',0			; data list separator
  4638 0000107C 000000000000000000-     	dw	0,0,0,0,0		; reserved
  4638 00001085 00                 
  4639                                  
  4640                                  ; upper case table
  4641                                  
  4642                                  UCASE_TAB: 	; label   byte
  4643 00001086 8000                    	dw	128
  4644 00001088 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4645 00001090 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4646 00001098 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4647 000010A0 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4648 000010A8 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4649 000010B0 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4650 000010B8 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4651 000010C0 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4652 000010C8 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4653 000010D0 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4654 000010D8 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4655 000010E0 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4656 000010E8 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4657 000010F0 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4658 000010F8 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4659 00001100 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4660                                  
  4661                                  ; file upper case table
  4662                                  
  4663                                  FILE_UCASE_TAB: ; label  byte
  4664 00001108 8000                    	dw	128
  4665 0000110A 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4666 00001112 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4667 0000111A 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4668 00001122 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4669 0000112A 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4670 00001132 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4671 0000113A B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4672 00001142 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4673 0000114A C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4674 00001152 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4675 0000115A D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4676 00001162 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4677 0000116A E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4678 00001172 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4679 0000117A F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4680 00001182 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4681                                  
  4682                                  ; file char list
  4683                                  
  4684                                  FILE_CHAR_TAB:	; label  byte
  4685 0000118A 1600                    	dw	22				; length
  4686 0000118C 0100FF                  	db	1,0,255 			; include all
  4687 0000118F 000020                  	db	0,0,20h 			; exclude 0 - 20h
  4688 00001192 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
  4688 0000119B 7C3C3E2B3D3B2C     
  4689                                  	;db	24 dup (?)			; reserved
  4690 000011A2 00<rep 18h>             	times	24 db 0
  4691                                  
  4692                                  ; collate table
  4693                                  
  4694                                  COLLATE_TAB:	; label   byte
  4695 000011BA 0001                    	dw	256
  4696 000011BC 0001020304050607        	db	0,1,2,3,4,5,6,7
  4697 000011C4 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
  4698 000011CC 1011121314151617        	db	16,17,18,19,20,21,22,23
  4699 000011D4 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
  4700 000011DC 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
  4701 000011E4 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
  4702 000011EC 3031323334353637        	db	"0","1","2","3","4","5","6","7"
  4703 000011F4 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
  4704 000011FC 4041424344454647        	db	"@","A","B","C","D","E","F","G"
  4705 00001204 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4706 0000120C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4707 00001214 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
  4708 0000121C 6041424344454647        	db	"`","A","B","C","D","E","F","G"
  4709 00001224 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4710 0000122C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4711 00001234 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
  4712 0000123C 4355454141414143        	db	"C","U","E","A","A","A","A","C"
  4713 00001244 4545454949494141        	db	"E","E","E","I","I","I","A","A"
  4714 0000124C 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
  4715 00001254 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
  4716 0000125C 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
  4717 00001264 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
  4718 0000126C B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4719 00001274 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4720 0000127C C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4721 00001284 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4722 0000128C D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4723 00001294 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4724 0000129C E053                    	db	224,"S"
  4725 0000129E E2E3E4E5E6E7            	db	226,227,228,229,230,231
  4726 000012A4 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4727 000012AC F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4728 000012B4 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4729                                  
  4730                                  ;include divmes.inc
  4731                                  
  4732                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  4733                                  	;PUBLIC	DIVMES
  4734                                  
  4735 000012BC 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  4735 000012C5 6F766572666C6F770D-
  4735 000012CE 0A                 
  4736                                  
  4737                                  	;PUBLIC	DivMesLen
  4738                                  DivMesLen:
  4739 000012CF 1300                    	DW	$-DIVMES	; Length of the above message in bytes
  4740                                  
  4741                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  4742                                  
  4743                                  ; The following two tables implement the current buffered input editing
  4744                                  ; routines. The tables are pairwise associated in reverse order for ease
  4745                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  4746                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  4747                                  
  4748                                  	;PUBLIC	CANCHAR
  4749                                  CANCHAR:
  4750 000012D1 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  4751                                  	
  4752                                  	;PUBLIC	ESCCHAR
  4753                                  ESCCHAR:
  4754 000012D2 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  4755                                  	
  4756                                  	;IF	NOT Rainbow
  4757                                  
  4758                                  ESCTAB:	; LABEL BYTE
  4759                                  
  4760                                  	;IF	IBM
  4761 000012D3 40                      	DB	64		; Ctrl-Z - F6
  4762 000012D4 4D                      	DB	77		; Copy one char - -->
  4763 000012D5 3B                      	DB	59		; Copy one char - F1
  4764 000012D6 53                      	DB	83		; Skip one char - DEL
  4765 000012D7 3C                      	DB	60		; Copy to char - F2
  4766 000012D8 3E                      	DB	62		; Skip to char - F4
  4767 000012D9 3D                      	DB	61		; Copy line - F3
  4768 000012DA 3D                      	DB	61		; Kill line (no change to template ) - Not used
  4769 000012DB 3F                      	DB	63		; Reedit line (new template) - F5
  4770 000012DC 4B                      	DB	75		; Backspace - <--
  4771 000012DD 52                      	DB	82		; Enter insert mode - INS (toggle)
  4772 000012DE 52                      	DB	82		; Exit insert mode - INS (toggle)
  4773 000012DF 41                      	DB	65		; Escape character - F7
  4774 000012E0 41                      	DB	65		; End of table
  4775                                  	;ENDIF
  4776                                  
  4777                                  ESCEND: ; LABEL BYTE
  4778                                  
  4779                                  ESCTABLEN EQU ESCEND-ESCTAB
  4780                                  
  4781                                  ESCFUNC: ; LABEL WORD
  4782                                  	
  4783 000012E1 [3821]                  	short_addr  GETCH	; Ignore the escape sequence
  4784 000012E3 [2522]                  	short_addr  TWOESC
  4785 000012E5 [AD22]                  	short_addr  EXITINS
  4786 000012E7 [AD22]                  	short_addr  ENTERINS
  4787 000012E9 [AF21]                  	short_addr  BACKSP
  4788 000012EB [9922]                  	short_addr  REEDIT
  4789 000012ED [9C21]                  	short_addr  KILNEW
  4790 000012EF [2C22]                  	short_addr  COPYLIN
  4791 000012F1 [5F22]                  	short_addr  SKIPSTR
  4792 000012F3 [3222]                  	short_addr  COPYSTR
  4793 000012F5 [5522]                  	short_addr  SKIPONE
  4794 000012F7 [3722]                  	short_addr  COPYONE
  4795 000012F9 [3722]                  	short_addr  COPYONE
  4796 000012FB [B522]                  	short_addr  CTRLZ
  4797                                  
  4798                                  	;ENDIF
  4799                                  
  4800                                  ;TABLE	ENDS
  4801                                  
  4802                                  ; 17/07/2018
  4803                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
  4804                                  
  4805                                  ;CRTERRTAB: ; 19/07/2018	
  4806                                  ;	db	0,5,52h,50h,3,5,20h
  4807                                  
  4808                                  ; 08/08/2018
  4809                                  
  4810                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
  4811 000012FD 00                      	DB	0			; none
  4812 000012FE 05                      	DB	error_access_denied	; MakeNode error 1
  4813 000012FF 52                      	DB	error_cannot_make	; MakeNode error 2
  4814 00001300 50                      	DB	error_file_exists	; MakeNode error 3
  4815 00001301 03                      	DB	error_path_not_found	; MakeNode error 4
  4816 00001302 05                      	DB	error_access_denied	; MakeNode error 5
  4817 00001303 20                      	DB	error_sharing_violation ; MakeNode error 6
  4818                                  	; MSDOS 6.0
  4819                                  	;DB	error_file_not_found	; MakeNode error 7
  4820                                  
  4821                                  ;============================================================================
  4822                                  ; DEV.ASM (MSDOS 6.0, 1987)
  4823                                  ;============================================================================
  4824                                  ; 17/07/2018 - Retro DOS v3.0
  4825                                  
  4826                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
  4827                                  
  4828                                  ;Public DEV001S, DEV001E 		; Pathgen labels
  4829                                  ;DEV001s:
  4830                                  ;		length of packets
  4831 00001304 160E160D0F0E            LenTab:		DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
  4832                                  ;LenTab:	db	22,14,22,13,15,14
  4833                                  
  4834                                  ;	       Error Function
  4835                                  
  4836                                  CmdTab:
  4837 0000130A 8604                    	DB	86h, DEVRD	; 0 input
  4838 0000130C 8605                    	DB	86h, DEVRDND	; 1 input status
  4839 0000130E 8708                    	DB	87h, DEVWRT	; 2 output
  4840 00001310 870A                    	DB	87h, DEVOST	; 3 output status
  4841 00001312 8607                    	DB	86h, DEVIFL	; 4 input flush
  4842 00001314 8605                    	DB	86H, DEVRDND	; 5 input status with system WAIT
  4843                                  
  4844                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
  4845                                  
  4846                                  ;CmdTab:
  4847                                  ;	db	86h, 4
  4848                                  ;	db	86h, 5
  4849                                  ;	db	87h, 8
  4850                                  ;	db	87h, 10
  4851                                  ;	db	86h, 7
  4852                                  ;	db	86h, 5
  4853                                  
  4854                                  ;DEV001E:
  4855                                  
  4856                                  ;============================================================================
  4857                                  ; FCB.ASM (MSDOS 6.0, 1987)
  4858                                  ;============================================================================
  4859                                  ; 17/07/2018 - Retro DOS v3.0
  4860                                  
  4861                                  ; Character type table for file name scanning
  4862                                  ; Table provides a mapping of characters to validity bits.
  4863                                  ; Four bits are provided for each character.  Values 7Dh and above
  4864                                  ; have all bits set, so that part of the table is chopped off, and
  4865                                  ; the translation routine is responsible for screening these values.
  4866                                  ; The bit values are defined in DOSSYM.INC
  4867                                  
  4868                                  ;	      ; ^A and NUL
  4869                                  ;CharType:
  4870                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4871                                  ;
  4872                                  ;	      ; ^C and ^B
  4873                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4874                                  ;
  4875                                  ;	      ; ^E and ^D
  4876                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4877                                  ;
  4878                                  ;	      ; ^G and ^F
  4879                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4880                                  ;
  4881                                  ;	      ; TAB and BS
  4882                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4883                                  ;
  4884                                  ;	      ; ^K and ^J
  4885                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4886                                  ;
  4887                                  ;	      ; ^M and ^L
  4888                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4889                                  ;
  4890                                  ;	      ; ^O and ^N
  4891                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4892                                  ;
  4893                                  ;	      ; ^Q and ^P
  4894                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4895                                  ;
  4896                                  ;	      ; ^S and ^R
  4897                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4898                                  ;
  4899                                  ;	      ; ^U and ^T
  4900                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4901                                  ;
  4902                                  ;	      ; ^W and ^V
  4903                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4904                                  ;
  4905                                  ;	      ; ^Y and ^X
  4906                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4907                                  ;
  4908                                  ;	      ; ESC and ^Z
  4909                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4910                                  ;
  4911                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4913                                  ;
  4914                                  ;	      ; ^_ and ^^
  4915                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4916                                  ;
  4917                                  ;	      ; ! and SPACE
  4918                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
  4919                                  ;
  4920                                  ;	      ; # and "
  4921                                  ;	 db   LOW (NOT FFCB+FCHK)
  4922                                  ;
  4923                                  ;	      ; $ - )
  4924                                  ;	 db   3 dup (0FFh)
  4925                                  ;
  4926                                  ;	      ; + and *
  4927                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
  4928                                  ;
  4929                                  ;	      ; - and '
  4930                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
  4931                                  ;
  4932                                  ;	      ; / and .
  4933                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
  4934                                  ;
  4935                                  ;	      ; 0 - 9
  4936                                  ;	 db   5 dup (0FFh)
  4937                                  ;
  4938                                  ;	      ; ; and :
  4939                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4940                                  ;
  4941                                  ;	      ; = and <
  4942                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4943                                  ;
  4944                                  ;	      ; ? and >
  4945                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4946                                  ;
  4947                                  ;	      ; A - Z
  4948                                  ;	 db   13 dup (0FFh)
  4949                                  ;
  4950                                  ;	      ; \ and [
  4951                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
  4952                                  ;
  4953                                  ;	      ; ^ and ]
  4954                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4955                                  ;
  4956                                  ;	      ; _ - {
  4957                                  ;	 db   15 dup (0FFh)
  4958                                  ;
  4959                                  ;	      ; } and |
  4960                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4961                                  
  4962                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
  4963                                  ;					; character in the table
  4964                                  
  4965                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
  4966                                  
  4967                                  CharType:
  4968 00001316 F6F6F6F6F6F6F6F6                db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4969 0000131E F6F0F6F6F6F6F6F6        	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4970 00001326 F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4971 0000132E F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4972 00001336 F8FFF6FFFFFFFFFF        	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
  4973 0000133E FFFFFFF4F4FFFEF6        	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
  4974 00001346 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4975 0000134E FFFFF4F4F4F4F4FF        	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
  4976 00001356 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4977 0000135E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4978 00001366 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4979 0000136E FFFFFFF6F6F6FFFF        	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
  4980 00001376 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4981 0000137E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4982 00001386 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4983 0000138E FFFFFFFFF4FFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
  4984 00001396 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4985 0000139E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4986 000013A6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4987 000013AE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4988 000013B6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4989 000013BE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4990 000013C6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4991 000013CE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4992 000013D6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4993 000013DE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4994 000013E6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4995 000013EE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4996 000013F6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4997 000013FE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4998 00001406 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4999 0000140E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5000                                  
  5001                                  ; 02/08/2018 - Retro DOS v3.0
  5002                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5003                                  
  5004                                  ; Offset 13CAh of IBMDOS.COM (MSDOS 3.3), 1987
  5005                                  
  5006 00001416 0000                    exec_init_SP:	dw 0
  5007 00001418 0000                    exec_init_SS:	dw 0
  5008 0000141A 0000                    exec_init_IP:	dw 0
  5009 0000141C 0000                    exec_init_CS:	dw 0
  5010                                  
  5011 0000141E 0000                    exec_signature:	dw 0	; must contain 4D5A  (yay zibo!)
  5012 00001420 0000                    exec_len_mod_512: dw 0	; low 9 bits of length
  5013 00001422 0000                    exec_pages:	dw 0	; number of 512b pages in file
  5014 00001424 0000                    exec_rle_count:	dw 0	; count of reloc entries
  5015 00001426 0000                    exec_par_dir:	dw 0	; number of paragraphs before image
  5016 00001428 0000                    exec_min_BSS:	dw 0	; minimum number of para of BSS
  5017 0000142A 0000                    exec_max_BSS:	dw 0	; max number of para of BSS
  5018 0000142C 0000                    exec_SS:	dw 0	; stack of image
  5019 0000142E 0000                    exec_SP:	dw 0	; SP of image
  5020 00001430 0000                    exec_chksum:	dw 0	; checksum  of file (ignored)
  5021 00001432 0000                    exec_IP:	dw 0	; IP of entry
  5022 00001434 0000                    exec_CS:	dw 0	; CS of entry
  5023 00001436 0000                    exec_rle_table:	dw 0	; byte offset of reloc table
  5024                                  
  5025                                  Exec_Header_Len	EQU $-exec_signature
  5026                                  
  5027                                  ; 02/08/2018 - Retro DOS v3.0
  5028                                  ; SRVCALL.ASM - MSDOS 6.0 - 1991
  5029                                  ;** Server DOS call functions
  5030                                  
  5031 00001438 [3C14]                  SERVERTAB:      dw SERVER_DISP
  5032 0000143A [E266]                  SERVERLEAVE:	dw SERVERRETURN
  5033 0000143C 0B                      SERVER_DISP:	db (SERVER_DISP_END-SERVER_DISP-1)/2
  5034 0000143D [4D67]                  		dw SRV_CALL	; 0
  5035 0000143F [E366]                  		dw COMMIT_ALL	; 1
  5036 00001441 [1A67]                  		dw CLOSE_NAME	; 2
  5037 00001443 [2667]                  		dw CLOSE_UID	; 3
  5038 00001445 [2D67]                  		dw CLOSE_UID_PID ; 4
  5039 00001447 [3467]                  		dw GET_LIST	; 5
  5040 00001449 [8E67]                  		dw GET_DOS_DATA	; 6
  5041 0000144B [B267]                  		dw SPOOL_OPER	; 7
  5042 0000144D [B267]                  		dw SPOOL_OPER	; 8
  5043 0000144F [B267]                  		dw SPOOL_OPER	; 9
  5044 00001451 [C167]                  		dw _$SetExtendedError ; 10
  5045                                  SERVER_DISP_END:
  5046                                  
  5047                                  ;============================================================================
  5048                                  ; MSCODE.ASM
  5049                                  ;============================================================================
  5050                                  
  5051                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  5052                                  ; 03/03/2018
  5053                                  
  5054                                  ;
  5055                                  ; MSCODE.ASM -- MSDOS code
  5056                                  ;
  5057                                  
  5058                                  ;INCLUDE DOSSEG.ASM
  5059                                  ;INCLUDE STDSW.ASM
  5060                                  
  5061                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  5062                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5063                                  
  5064                                  ;.xcref
  5065                                  ;INCLUDE DOSSYM.ASM
  5066                                  ;INCLUDE DEVSYM.ASM
  5067                                  ;.cref
  5068                                  ;.list
  5069                                  
  5070                                  ;IFNDEF  KANJI
  5071                                  ;KANJI   EQU     0       ; FALSE
  5072                                  ;ENDIF
  5073                                  
  5074                                  ;IFNDEF  IBM
  5075                                  ;IBM     EQU     0
  5076                                  ;ENDIF
  5077                                  
  5078                                  ;IFNDEF  HIGHMEM
  5079                                  ;HIGHMEM  EQU     0
  5080                                  ;ENDIF
  5081                                  
  5082                                          ;i_need  USER_SP,WORD
  5083                                          ;i_need  USER_SS,WORD
  5084                                          ;i_need  SAVEDS,WORD
  5085                                          ;i_need  SAVEBX,WORD
  5086                                          ;i_need  INDOS,BYTE
  5087                                          ;i_need  NSP,WORD
  5088                                          ;i_need  NSS,WORD
  5089                                          ;i_need  CURRENTPDB,WORD
  5090                                          ;i_need  AUXSTACK,BYTE
  5091                                          ;i_need  CONSWAP,BYTE
  5092                                          ;i_need  IDLEINT,BYTE
  5093                                          ;i_need  NOSETDIR,BYTE
  5094                                          ;i_need  ERRORMODE,BYTE
  5095                                          ;i_need  IOSTACK,BYTE
  5096                                          ;i_need  WPERR,BYTE
  5097                                          ;i_need  DSKSTACK,BYTE
  5098                                          ;i_need  CNTCFLAG,BYTE
  5099                                          ;i_need  LEAVEADDR,WORD
  5100                                          ;i_need  NULLDEVPT,DWORD
  5101                                  
  5102                                          ;IF NOT IBM
  5103                                          ;i_need  OEM_HANDLER,DWORD
  5104                                          ;ENDIF
  5105                                  
  5106                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  5107                                  
  5108                                  ;============================================================================
  5109                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  5110                                  ;============================================================================
  5111                                  ; 11/07/2018 - Retro DOS v3.0
  5112                                  
  5113                                  ; 18/07/2018
  5114                                  
  5115                                  ; The following two routines are dispatched to directly with ints disabled
  5116                                  ; immediately after the int 21h entry.	no DIS state is set.
  5117                                  
  5118                                  ; ---------------------------------------------------------------------------
  5119                                  ; $Set_current_PDB takes BX and sets it to be the current process
  5120                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5121                                  ;
  5122                                         ;procedure   $SET_CURRENT_PDB,NEAR
  5123                                  _$SET_CURRENT_PDB:
  5124                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5125 00001453 2E891E[DE02]                    MOV     [CS:CurrentPDB],BX ; 12/03/2018
  5126 00001458 CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5127                                  ;$SET_CURRENT_PDB    ENDP
  5128                                  
  5129                                  ; ---------------------------------------------------------------------------
  5130                                  ; $get_current_PDB returns in BX the current process
  5131                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5132                                  ;
  5133                                          ;procedure $GET_CURRENT_PDB,NEAR
  5134                                  _$GET_CURRENT_PDB:
  5135                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5136 00001459 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB] ; 11/07/2018
  5137 0000145E CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5138                                  ;$GET_CURRENT_PDB    ENDP
  5139                                  ; ---------------------------------------------------------------------------
  5140                                  
  5141                                  ; 11/07/2018 - Retro DOS v3.0
  5142                                  
  5143                                  ;BREAK <$Set_CTRL_C_Trapping -- En/Disable ^C check in dispatcher>
  5144                                  
  5145                                  _$SET_CTRL_C_TRAPPING:
  5146                                  
  5147                                  ; Inputs:
  5148                                  ;       AL = 0 read ^C status
  5149                                  ;       AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  5150                                  ;	AL = 2 Set ^C status to contents of DL.	Output is old state.
  5151                                  ;	     (MSDISP.ASM,MSDOS 6.0, 1991)
  5152                                  ; Function:
  5153                                  ;       Enable disable ^C checking in dispatcher
  5154                                  ; Outputs:
  5155                                  ;       If AL = 0 then DL = 0/1 for ^C off/on
  5156                                  
  5157                                  	; 08/07/2018 - Retro DOS v3.0
  5158                                  
  5159 0000145F 08C0                            OR      AL,AL
  5160 00001461 7506                            JNZ     SHORT CTRL_C_set
  5161                                  
  5162                                  	; 11/07/2018
  5163 00001463 2E8A16[E502]            	mov	dl,[CS:CNTCFLAG]
  5164 00001468 CF                      	iret
  5165                                  
  5166                                  CTRL_C_set:
  5167                                  	; 08/07/2018
  5168 00001469 3C02                    	cmp	al,2
  5169 0000146B 7716                    	ja	short bad_val
  5170 0000146D 740B                    	je	short scct_3
  5171                                  
  5172 0000146F 52                      	push    dx
  5173 00001470 80E201                  	and     dl,1
  5174 00001473 2E8816[E502]            	mov     [cs:CNTCFLAG],dl
  5175 00001478 5A                      	pop     dx
  5176 00001479 CF                      	iret
  5177                                  
  5178                                  scct_3:
  5179 0000147A 80E201                  	and	dl,1
  5180 0000147D 2E8616[E502]                    xchg	dl,[CS:CNTCFLAG]
  5181 00001482 CF                              iret
  5182                                  
  5183                                  bad_val:
  5184 00001483 B0FF                    	MOV	AL,0FFH
  5185 00001485 CF                      	iret
  5186                                  
  5187                                  ; 11/07/2018
  5188                                  
  5189                                  _$SET_PRINTER_FLAG:
  5190                                  	; 08/07/2018 - Retro DOS v3.0
  5191                                  	;mov 	[cs:IOSTACK],al
  5192 00001486 2EA2[060A]              	mov	[cs:PRINTER_FLAG],al
  5193 0000148A CF                      	iret
  5194                                  
  5195                                  ; 08/07/2018 - Retro DOS v3.0
  5196                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  5197                                  
  5198                                  ; ----------------------------------------------------------------------------
  5199                                  ; BREAK   <System call entry points and dispatcher>
  5200                                  ; ----------------------------------------------------------------------------
  5201                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5202                                  
  5203                                          ;procedure   SYSTEM_CALL,NEAR
  5204                                  SYSTEM_CALL:
  5205                                  ;entry	QUIT				; INT 20H entry point
  5206                                  QUIT:
  5207                                  	;MOV	AH,0
  5208 0000148B 30E4                    	xor	ah,ah ; 08/07/2018
  5209 0000148D EB47                    	JMP     SHORT SAVREGS
  5210                                  
  5211                                  ; ---------------------------------------------------------------------------
  5212                                  
  5213                                  ;COMMAND:
  5214                                  ;	;IF	NOT IBM
  5215                                  ;       CMP	AH,SET_OEM_HANDLER
  5216                                  ;       JB      SHORT NOTOEM
  5217                                  ;	; 18/07/2018
  5218                                  ;	je	_$SET_OEM_HANDLER	
  5219                                  ;
  5220                                  ;	; 20/04/2018
  5221                                  ;       ;JMP	_$SET_OEM_HANDLER
  5222                                  ;
  5223                                  ;	; Retro DOS v2.0 - 20/04/2018
  5224                                  ;	CMP	AX, 0FFFFh
  5225                                  ;	;JNE	_$SET_OEM_HANDLER
  5226                                  ;	; 18/07/2018
  5227                                  ;	jne	DO_OEM_FUNC
  5228                                  ;
  5229                                  ;	PUSHA
  5230                                  ;	MOV     SI,RETRODOSMSG
  5231                                  ;       ;CALL	OUTMES
  5232                                  ;wrdosmsg:
  5233                                  ;	mov	ah, 0Eh
  5234                                  ;	mov	bx, 7
  5235                                  ;wrdosmsg_nxt:
  5236                                  ;	cs	lodsb
  5237                                  ;	cmp	al, '$'
  5238                                  ;	je	short wrdosmsg_ok		
  5239                                  ;	int	10h
  5240                                  ;	jmp	short wrdosmsg_nxt
  5241                                  ;wrdosmsg_ok:
  5242                                  ;	POPA
  5243                                  ;	JMP	SHORT BADCALL 
  5244                                  ;	;
  5245                                  ;NOTOEM:
  5246                                  ;	;ENDIF
  5247                                  ;
  5248                                  ;       CMP     AH,MAXCOM
  5249                                  ;       JBE     SHORT SAVREGS
  5250                                  
  5251                                  	; The system call in AH is out of the range that we know how
  5252                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  5253                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  5254                                  	; error as this may break some programs compatability.
  5255                                  
  5256                                  BADCALL:
  5257                                          ;MOV	AL,0
  5258 0000148F 30C0                    	xor	al,al ; 08/07/2018
  5259                                  ;entry	IRET
  5260                                  _IRET:
  5261 00001491 CF                              IRET
  5262                                  
  5263                                  ; ---------------------------------------------------------------------------
  5264                                  
  5265                                  ;entry	CALL_ENTRY                      ; System call entry point and dispatcher
  5266                                  CALL_ENTRY:
  5267 00001492 58                              POP     AX                      ; IP from the long call at 5
  5268 00001493 58                              POP     AX                      ; Segment from the long call at 5
  5269                                          ;POP	WORD [USER_SP]		; IP from the CALL 5
  5270 00001494 2E8F06[1E05]                    POP	WORD [CS:USER_SP] ; 12/03/2018
  5271 00001499 9C                      	PUSHF                           ; Start re-ordering the stack
  5272 0000149A FA                              CLI
  5273 0000149B 50                              PUSH    AX                      ; Save segment
  5274                                          ;PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  5275 0000149C 2EFF36[1E05]                    PUSH	WORD [CS:USER_SP] ; 12/03/2018
  5276 000014A1 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  5277 000014A4 77E9                            JA      SHORT BADCALL
  5278 000014A6 88CC                            MOV     AH,CL
  5279                                  	; 08/07/2018
  5280 000014A8 EB2C                    	jmp	short SAVREGS 
  5281                                  
  5282                                  COMMAND:
  5283                                  	; 08/07/2018 - Retro DOS v3.0
  5284                                  
  5285                                  	;IF	NOT IBM
  5286 000014AA 80FCF8                          CMP	AH,SET_OEM_HANDLER
  5287 000014AD 7221                            JB      SHORT NOTOEM
  5288                                  	; 18/07/2018
  5289 000014AF 0F845E01                	je	_$SET_OEM_HANDLER	
  5290                                  
  5291                                  	; 20/04/2018
  5292                                          ;JMP	_$SET_OEM_HANDLER
  5293                                  
  5294                                  	; Retro DOS v2.0 - 20/04/2018
  5295 000014B3 83F8FF                  	CMP	AX,0FFFFh
  5296                                  	;JNE	_$SET_OEM_HANDLER
  5297                                  	; 18/07/2018
  5298 000014B6 0F856201                	jne	DO_OEM_FUNC
  5299                                  
  5300 000014BA 60                      	PUSHA
  5301 000014BB BE[4E0C]                	MOV     SI,RETRODOSMSG
  5302                                          ;CALL	OUTMES
  5303                                  wrdosmsg:
  5304 000014BE B40E                    	mov	ah, 0Eh
  5305 000014C0 BB0700                  	mov	bx, 7
  5306                                  wrdosmsg_nxt:
  5307 000014C3 2EAC                    	cs	lodsb
  5308 000014C5 3C24                    	cmp	al, '$'
  5309 000014C7 7404                    	je	short wrdosmsg_ok		
  5310 000014C9 CD10                    	int	10h
  5311 000014CB EBF6                    	jmp	short wrdosmsg_nxt
  5312                                  wrdosmsg_ok:
  5313 000014CD 61                      	POPA
  5314 000014CE EBBF                    	JMP	SHORT BADCALL 
  5315                                  	;
  5316                                  
  5317                                  NOTOEM:
  5318                                  	;ENDIF
  5319                                  
  5320 000014D0 FA                      	cli	; 08/07/2018
  5321                                  
  5322                                  _COMMAND: ; MSDOS 3.3 (IBM)
  5323                                  
  5324 000014D1 80FC68                          CMP     AH,MAXCOM
  5325                                  	;JBE	SHORT SAVREGS
  5326 000014D4 77B9                            JA	SHORT BADCALL ; 08/07/2018
  5327                                  
  5328                                  SAVREGS:
  5329                                  	; 10/08/2018
  5330                                  	; 08/07/2018 - Retro DOS v3.0
  5331 000014D6 80FC33                  	cmp	ah,33h
  5332 000014D9 7484                    	jz	short _$SET_CTRL_C_TRAPPING
  5333 000014DB 721C                    	jb	short SaveAllRegs
  5334 000014DD 80FC64                  	cmp	ah,64h
  5335 000014E0 7717                    	ja	short SaveAllRegs
  5336 000014E2 74A2                    	jz	short _$SET_PRINTER_FLAG
  5337 000014E4 80FC51                  	cmp	ah,51h
  5338 000014E7 0F846EFF                	jz	_$GET_CURRENT_PDB
  5339 000014EB 80FC62                  	cmp	ah,62h
  5340 000014EE 0F8467FF                	jz	_$GET_CURRENT_PDB
  5341 000014F2 80FC50                  	cmp     ah,50h
  5342 000014F5 0F845AFF                	jz	_$SET_CURRENT_PDB
  5343                                  SaveAllRegs:
  5344 000014F9 E8FC00                          CALL    save_world
  5345 000014FC 2E8C1E[7E05]                    MOV	[CS:SAVEDS],DS	; 12/03/2018
  5346 00001501 2E891E[7C05]                    MOV	[CS:SAVEBX],BX	; 12/03/2018
  5347 00001506 8CCB                            MOV     BX,CS
  5348 00001508 8EDB                            MOV     DS,BX
  5349                                  ;ASSUME  DS:DOSGROUP
  5350 0000150A FE06[CF02]                      INC     BYTE [INDOS]		; Flag that we're in the DOS
  5351                                  	
  5352                                  	; 08/07/2018 - Retro DOS v3.0        
  5353 0000150E 31C0                    	xor     ax, ax
  5354 00001510 A3[EA02]                	mov     [USER_ID],ax
  5355 00001513 A1[DE02]                	mov     ax,[CurrentPDB]
  5356 00001516 A3[E802]                	mov     [PROC_ID],ax
  5357                                  
  5358 00001519 A1[1E05]                	MOV     AX,[USER_SP]
  5359 0000151C A3[8405]                        MOV     [NSP],AX
  5360 0000151F A1[2005]                        MOV     AX,[USER_SS]
  5361 00001522 A3[8205]                        MOV     [NSS],AX
  5362 00001525 58                              POP     AX
  5363 00001526 50                              PUSH    AX
  5364 00001527 8926[1E05]                      MOV     [USER_SP],SP
  5365 0000152B 8C16[2005]                      MOV     [USER_SS],SS
  5366                                  ;
  5367                                  ; save user stack in his area for later returns (possibly from EXEC)
  5368                                  ; Here comes multitasking!!!
  5369                                  ;
  5370 0000152F 8E1E[DE02]                      MOV     DS,[CurrentPDB]
  5371 00001533 89262E00                        MOV     [PDB.USER_STACK],SP
  5372 00001537 8C163000                        MOV     [PDB.USER_STACK+2],SS
  5373                                  	; 18/07/2018
  5374 0000153B 2EC606[0D05]00          	mov	byte [CS:FSHARING], 0
  5375                                  
  5376 00001541 8CCB                            MOV     BX,CS                   ; no holes here.
  5377 00001543 8ED3                            MOV     SS,BX
  5378                                  ;ASSUME  SS:DOSGROUP
  5379                                  
  5380                                  ;entry	REDISP
  5381                                  REDISP:
  5382 00001545 BC[0607]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  5383 00001548 FB                              STI                             ; Stack OK now
  5384                                  	; 08/07/2018
  5385                                          ;PUSH	CS
  5386                                          ;POP	DS
  5387 00001549 8CCB                    	mov	bx,cs
  5388 0000154B 8EDB                    	mov	ds,bx
  5389 0000154D 30FF                            XOR     BH,BH
  5390 0000154F 883E[0303]                      MOV     [CONSWAP],BH
  5391 00001553 C606[0403]01                    MOV     BYTE [IDLEINT],1
  5392 00001558 883E[F802]                      MOV     BYTE [NoSetDir],bh ; 0	; set directories on search
  5393 0000155C 883E[F602]                      mov	byte [FAILERR],bh ; 0	
  5394 00001560 88E3                    	MOV     BL,AH
  5395 00001562 D1E3                            SHL     BX,1
  5396 00001564 FC                              CLD
  5397 00001565 08E4                            OR      AH,AH
  5398 00001567 7416                            JZ      SHORT DSKROUT		; ABORT
  5399                                  
  5400                                          ;CMP	AH,12
  5401                                          ;JBE	SHORT IOROUT		; Character I/O
  5402                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  5403                                          ;JZ	SHORT IOROUT
  5404                                          ;CMP	AH,SET_CURRENT_PDB
  5405                                          ;JNZ	SHORT DSKROUT
  5406                                  
  5407                                  	; 10/08/2018
  5408 00001569 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  5409 0000156C 743D                    	jz      short DISPCALL
  5410 0000156E 80FC0C                  	cmp     ah,STD_CON_INPUT_FLUSH ; 0Ch
  5411 00001571 770C                    	ja      short DSKROUT
  5412                                  
  5413                                  IOROUT:
  5414 00001573 803E[CE02]00                    CMP     BYTE [ERRORMODE],0
  5415 00001578 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  5416 0000157A BC[060A]                        MOV     SP,IOSTACK
  5417 0000157D EB2C                            JMP     SHORT DISPCALL
  5418                                  
  5419                                  DSKROUT:
  5420                                  	; 08/07/2018 - Retro DOS v3.0
  5421 0000157F A3[E602]                        mov     [USER_IN_AX],ax
  5422 00001582 C606[D102]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk  (Default)
  5423                                  
  5424 00001587 C606[CE02]00                    MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  5425 0000158C C606[D002]FF                    MOV     BYTE [WPERR],-1		; error mode, so good place to
  5426                                                                          ; make sure flags are reset
  5427 00001591 50                      	push    ax
  5428 00001592 B482                    	mov     ah, 82h
  5429 00001594 CD2A                    	int     2Ah 		; Microsoft Networks 
  5430                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  5431 00001596 58                      	pop     ax
  5432 00001597 C606[0403]00            	mov     byte [IDLEINT],0
  5433                                  
  5434 0000159C BC[8608]                        MOV     SP,DSKSTACK
  5435 0000159F F606[E502]FF                    TEST    BYTE [CNTCFLAG],-1
  5436 000015A4 7405                            JZ      SHORT DISPCALL
  5437 000015A6 50                              PUSH    AX
  5438                                          ;invoke	DSKSTATCHK
  5439 000015A7 E8AC40                          CALL	DSKSTATCHK
  5440 000015AA 58                      	POP     AX
  5441                                  DISPCALL:
  5442                                  	; 08/07/2018 -Retro DOS v3.0
  5443                                  	;;;PUSH	WORD [LEAVEADDR] ; (***)
  5444                                          ;;;PUSH	WORD [CS:BX+DISPATCH]
  5445                                          ;;;;PUSH WORD [BX+DISPATCH]
  5446                                  
  5447                                  	; 11/07/2018	
  5448                                  	;mov	bx,[CS:BX+DISPATCH]
  5449 000015AB 8B9F[060E]               	mov	bx,[bx+DISPATCH] 
  5450                                  
  5451                                  	;;;MOV	BX,[SAVEBX]
  5452 000015AF 871E[7C05]              	xchg    bx,[SAVEBX]        
  5453                                  
  5454 000015B3 8E1E[7E05]              	MOV     DS,[SAVEDS]
  5455                                  ;ASSUME	DS:NOTHING
  5456                                          ;return
  5457                                  ;;;	RETN	
  5458                                  
  5459 000015B7 36FF16[7C05]            	call	word [SS:SAVEBX]
  5460                                  
  5461                                  ;entry LEAVE
  5462                                  ;;;_LEAVE:				; Exit from a system call
  5463                                  LeaveDOS: ; 18/07/2018 
  5464                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  5465 000015BC FA                      	CLI
  5466                                          ; 12/03/2018
  5467 000015BD 2EFE0E[CF02]            	DEC     BYTE [CS:INDOS]
  5468 000015C2 2E8B26[1E05]                    MOV     SP,[CS:USER_SP]
  5469 000015C7 2E8E16[2005]                    MOV     SS,[CS:USER_SS]
  5470 000015CC 89E5                    	MOV     BP,SP
  5471                                  	;MOV	[BP.user_AX],AL	
  5472                                          ;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  5473 000015CE 884600                          MOV     [BP],AL
  5474 000015D1 2EA1[8405]              	MOV     AX,[CS:NSP]
  5475 000015D5 2EA3[1E05]                      MOV     [CS:USER_SP],AX
  5476 000015D9 2EA1[8205]                      MOV     AX,[CS:NSS]
  5477 000015DD 2EA3[2005]                      MOV     [CS:USER_SS],AX
  5478 000015E1 E80100                  	CALL    restore_world
  5479                                  
  5480 000015E4 CF                              IRET
  5481                                  
  5482                                  ;SYSTEM_CALL ENDP
  5483                                  
  5484                                  ;
  5485                                  ; restore_world restores all registers ('cept SS:SP, CS:IP, flags) from
  5486                                  ; the stack prior to giving the user control
  5487                                  ;
  5488                                  
  5489                                  ; 11/07/2018 - Retro DOS v3.0
  5490                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  5491                                  ;;restore_tmp DW  ?
  5492                                  ;restore_tmp: 
  5493                                  ;	dw	0
  5494                                          ;procedure restore_world,NEAR
  5495                                  restore_world:
  5496 000015E5 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5497 000015EA 58                              POP     AX              ; PUSH    ES
  5498 000015EB 5B                              POP     BX              ; PUSH    DS
  5499 000015EC 59                              POP     CX              ; PUSH    BP
  5500 000015ED 5A                              POP     DX              ; PUSH    DI
  5501 000015EE 5E                              POP     SI              ; PUSH    SI
  5502 000015EF 5F                              POP     DI              ; PUSH    DX
  5503 000015F0 5D                              POP     BP              ; PUSH    CX
  5504 000015F1 1F                              POP     DS              ; PUSH    BX
  5505 000015F2 07                              POP     ES              ; PUSH    AX
  5506                                  	; 07/07/2018 - Retro DOS v3.0
  5507 000015F3 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5508                                  
  5509                                  ;restore_world	ENDP
  5510                                  
  5511                                  ;
  5512                                  ; save_world saves complete registers on the stack
  5513                                  ;
  5514                                          ;procedure save_world,NEAR
  5515                                  save_world:
  5516 000015F8 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5517 000015FD 06                              PUSH    ES
  5518 000015FE 1E                              PUSH    DS
  5519 000015FF 55                              PUSH    BP
  5520 00001600 57                              PUSH    DI
  5521 00001601 56                              PUSH    SI
  5522 00001602 52                              PUSH    DX
  5523 00001603 51                              PUSH    CX
  5524 00001604 53                              PUSH    BX
  5525 00001605 50                              PUSH    AX
  5526                                  	; 07/07/2018 - Retro DOS v3.0
  5527 00001606 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5528                                  
  5529                                  ;save_world	ENDP
  5530                                  
  5531                                  ;
  5532                                  ; get_user_stack returns the user's stack (and hence registers) in DS:SI
  5533                                  ;
  5534                                          ;procedure get_user_stack,NEAR
  5535                                  Get_User_Stack:
  5536                                          ;LDS	SI,DWORD PTR [USER_SP]
  5537                                          ;LDS	SI,[USER_SP]
  5538 0000160B 2EC536[1E05]                    LDS	SI,[CS:USER_SP] ; 12/03/2018
  5539                                  	;return
  5540 00001610 C3                      	RETN
  5541                                  
  5542                                  ;get_user_stack  ENDP
  5543                                  
  5544                                  ; ---------------------------------------------------------------------------
  5545                                  ;
  5546                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  5547                                  ; Inputs:
  5548                                  ;	User registers, User Stack, INTS disabled
  5549                                  ;	If CALL F8, DS:DX is new handler address
  5550                                  ; Function:
  5551                                  ;	Process OEM INT 21 extensions
  5552                                  ; Outputs:
  5553                                  ;	Jumps to OEM_HANDLER if appropriate
  5554                                  ;
  5555                                  ; ---------------------------------------------------------------------------
  5556                                  
  5557                                  ;IF	NOT IBM
  5558                                  
  5559                                  _$SET_OEM_HANDLER:
  5560                                  	; 18/07/2018
  5561                                  
  5562                                  	;JNE	short DO_OEM_FUNC	; If above F8 try to jump to handler
  5563 00001611 2E8916[1400]            	MOV     [CS:OEM_HANDLER],DX	; Set Handler
  5564 00001616 2E8C1E[1600]            	MOV     [CS:OEM_HANDLER+2],DS
  5565 0000161B CF                      	IRET                            ; Quick return, Have altered no registers
  5566                                  
  5567                                  DO_OEM_FUNC:
  5568 0000161C 2E833E[1400]FF          	CMP     WORD [CS:OEM_HANDLER],-1
  5569 00001622 7503                    	JNZ     short OEM_JMP
  5570 00001624 E968FE                  	JMP     BADCALL                 ; Handler not initialized
  5571                                  
  5572                                  OEM_JMP:
  5573 00001627 2EFF2E[1400]            	JMP     FAR [CS:OEM_HANDLER]
  5574                                  
  5575                                  ;       ENDIF
  5576                                  
  5577                                  ;============================================================================
  5578                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5579                                  ;============================================================================
  5580                                  ; 11/07/2018 - Retro DOS v3.0
  5581                                  
  5582                                  ; the nul device driver used to be part of the code.  However, since the 
  5583                                  ; header is in the data, and the entry points are only given as an offset,
  5584                                  ; the strategy and interrupt entry points must also be in the data now.
  5585                                  ;
  5586                                  
  5587                                  ;procedure	snuldev,far
  5588                                  SNULDEV:
  5589                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  5590                                  ; Offset 1599h in IBMDOS.COM (MSDOS 3.3), 1987
  5591                                  	;or	word [ES:BX+3],0100h
  5592 0000162C 26814F030001             	OR	word [ES:BX+SRHEAD.REQSTAT],STDON ; set done bit
  5593                                  ;entry inuldev
  5594                                  INULDEV:
  5595 00001632 CB                      	retf				; must not be a return!
  5596                                  ;endproc snuldev
  5597                                  
  5598                                  ;============================================================================
  5599                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  5600                                  ;============================================================================
  5601                                  ; 18/07/2018 - Retro DOS v3.0
  5602                                  
  5603                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  5604                                  
  5605                                  
  5606                                  ;   AbsSetup - setup for abs disk functions
  5607                                  ;----------------------------------------------------------------------------
  5608                                  
  5609                                  AbsSetup:
  5610 00001633 36FE06[CF02]            	INC	byte [SS:INDOS]		; SS override
  5611 00001638 FB                      	STI
  5612 00001639 FC                      	CLD
  5613 0000163A 1E                      	PUSH	DS
  5614 0000163B 16                      	push	ss
  5615 0000163C 1F                      	pop	ds
  5616 0000163D E89100                  	CALL	GETBP
  5617 00001640 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  5618 00001642 26C7461EFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  5619                                  errdriv:
  5620 00001648 1F                      	POP	DS
  5621 00001649 7301                    	jnc	short AbsSetup2
  5622                                  AbsSetup_retn:
  5623 0000164B C3                      	retn
  5624                                  
  5625                                  AbsSetup2:
  5626                                  	; MSDOS 6.0
  5627                                  	;				; SS override
  5628                                  	;MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  5629                                  	;CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  5630 0000164C 72FD                    	jc	short AbsSetup_retn
  5631                                  	;call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  5632                                  
  5633                                  	; MSDOS 3.3 (& MSDOS 6.0)
  5634 0000164E 1E                      	PUSH	DS
  5635 0000164F 56                      	PUSH	SI
  5636 00001650 50                      	PUSH	AX
  5637                                  
  5638 00001651 16                      	push	ss
  5639 00001652 1F                      	pop	ds
  5640                                  	
  5641 00001653 BE[6003]                	MOV	SI,OPENBUF
  5642 00001656 8804                    	MOV	[SI],AL
  5643 00001658 800441                  	ADD	BYTE [SI],"A"
  5644 0000165B C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  5645 00001660 B80003                  	MOV	AX,0300H
  5646 00001663 F8                      	CLC
  5647 00001664 CD2A                    	INT	int_IBM 		; Will set carry if shared
  5648 00001666 58                      	POP	AX
  5649 00001667 5E                      	POP	SI
  5650 00001668 1F                      	POP	DS
  5651 00001669 73E0                    	jnc	short AbsSetup_retn
  5652                                  
  5653                                  	;mov	word [ss:EXTERR],32h
  5654 0000166B 36C706[D202]3200        	MOV	word [ss:EXTERR],error_not_supported
  5655 00001672 C3                      	retn
  5656                                  
  5657                                  ;---------------------------------------------------------------------------
  5658                                  ;
  5659                                  ; Procedure Name : ABSDRD
  5660                                  ;
  5661                                  ; Interrupt 25 handler.  Performs absolute disk read.
  5662                                  ; Inputs:	AL - 0-based drive number
  5663                                  ;		DS:BX point to destination buffer
  5664                                  ;		CX number of logical sectors to read
  5665                                  ;		DX starting  logical sector number (0-based)
  5666                                  ; Outputs:	Original flags still on stack
  5667                                  ;		Carry set
  5668                                  ;		    AH error from BIOS
  5669                                  ;		    AL same as low byte of DI from INT 24
  5670                                  ;
  5671                                  ;---------------------------------------------------------------------------
  5672                                          ;procedure   ABSDRD,FAR
  5673                                  ABSDRD:
  5674                                  	; 15/07/2018
  5675                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  5676 00001673 FA                              CLI
  5677                                          ;MOV	[USER_SS],SS
  5678                                          ;MOV	[USER_SP],SP
  5679                                  	; 15/03/2018
  5680 00001674 2E8C16[2005]                    MOV	[CS:USER_SS],SS
  5681 00001679 2E8926[1E05]                    MOV	[CS:USER_SP],SP        
  5682 0000167E 0E                      	PUSH    CS
  5683 0000167F 17                              POP     SS
  5684                                  ;ASSUME  SS:DOSGROUP
  5685 00001680 BC[8608]                        MOV	SP,DSKSTACK
  5686                                  
  5687                                  	;; MSDOS 2.11
  5688                                  
  5689                                          ;;;INC	BYTE [INDOS]
  5690                                          ;;INC	BYTE [SS:INDOS]
  5691                                  	;;STI
  5692                                          ;;CLD
  5693                                          ;;PUSH	ES
  5694                                          ;;PUSH	DS
  5695                                          ;;PUSH	SS
  5696                                          ;;POP	DS
  5697                                  ;;;ASSUME DS:DOSGROUP
  5698                                          ;;;invoke GETBP
  5699                                  	;;CALL	GETBP
  5700                                          ;;POP	DS
  5701                                  ;;;ASSUME DS:NOTHING
  5702                                  
  5703                                  	; 15/07/2018 - Retro DOS v3.0
  5704                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5705 00001683 06                              PUSH    ES
  5706 00001684 E8ACFF                  	call    AbsSetup
  5707                                  	;	
  5708 00001687 721A                            JC      SHORT ILEAVE
  5709                                          ;invoke	DSKREAD
  5710 00001689 E8292B                  	CALL	DSKREAD
  5711                                  TLEAVE:
  5712 0000168C 7415                            JZ      SHORT ILEAVE
  5713                                  
  5714                                  	; 15/07/2018 - Retro DOS v3.0
  5715                                          ;IF	IBM
  5716                                  ; Translate the error code to ancient 1.1 codes
  5717 0000168E 06                              PUSH    ES
  5718 0000168F 0E                              PUSH    CS
  5719 00001690 07                              POP     ES
  5720 00001691 30E4                            XOR     AH,AH			; Nul error code
  5721                                  	;mov	cx,6
  5722 00001693 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  5723 00001696 BF[D50F]                        MOV     DI,ERRIN		; Point to error conditions
  5724 00001699 F2AE                            REPNE   SCASB
  5725 0000169B 7504                            JNZ     SHORT LEAVECODE		; Not found
  5726                                  	;mov	ah,[ES:DI+5]
  5727 0000169D 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  5728                                  LEAVECODE:
  5729 000016A1 07                              POP     ES
  5730                                          ;ENDIF
  5731                                  
  5732 000016A2 F9                              STC
  5733                                  ILEAVE:
  5734 000016A3 07                              POP     ES
  5735 000016A4 FA                              CLI
  5736                                          ;DEC	BYTE [INDOS]
  5737                                          ;15/03/2018
  5738 000016A5 36FE0E[CF02]            	DEC	BYTE [SS:INDOS]
  5739                                  	; 15/08/2018
  5740                                          ;MOV	SS,[CS:USER_SS]
  5741                                  	;MOV	SP,[CS:USER_SP]
  5742 000016AA 368B26[1E05]            	MOV     SP,[SS:USER_SP]
  5743 000016AF 368E16[2005]                    MOV     SS,[SS:USER_SS]
  5744                                  ;ASSUME  SS:NOTHING
  5745 000016B4 FB                              STI
  5746                                          ;return
  5747 000016B5 CB                      	RETF   ; ! FAR return !
  5748                                  
  5749                                  ;ABSDRD	ENDP
  5750                                  
  5751                                  ;---------------------------------------------------------------------------
  5752                                  ;
  5753                                  ; Procedure Name : ABSDWRT
  5754                                  ;
  5755                                  ; Interrupt 26 handler.  Performs absolute disk write.
  5756                                  ; Inputs:	AL - 0-based drive number
  5757                                  ;		DS:BX point to source buffer
  5758                                  ;		CX number of logical sectors to write
  5759                                  ;		DX starting  logical sector number (0-based)
  5760                                  ; Outputs:	Original flags still on stack
  5761                                  ;		Carry set
  5762                                  ;		    AH error from BIOS
  5763                                  ;		    AL same as low byte of DI from INT 24
  5764                                  ;
  5765                                  ;---------------------------------------------------------------------------
  5766                                          ;procedure   ABSDWRT,FAR
  5767                                  ABSDWRT:
  5768                                  	; 15/07/2018
  5769                                  ;ASSUME	DS:NOTHING,ES:NOTHING,SS:NOTHING
  5770                                  
  5771 000016B6 FA                              CLI
  5772                                  	; 15/08/2018
  5773                                  	; 15/03/2018
  5774 000016B7 2E8C16[2005]            	MOV	[CS:USER_SS],SS
  5775 000016BC 2E8926[1E05]                    MOV	[CS:USER_SP],SP
  5776 000016C1 0E                              PUSH    CS
  5777 000016C2 17                              POP     SS
  5778                                  ;ASSUME	SS:DOSGROUP
  5779                                          ;MOV	SP,OFFSET DOSGROUP:DSKSTACK
  5780 000016C3 BC[8608]                        MOV	SP,DSKSTACK
  5781                                  
  5782                                  	;; MSDOS 2.11
  5783                                  
  5784                                          ;;;INC	BYTE [INDOS]
  5785                                          ;;INC	BYTE [SS:INDOS]
  5786                                  	;;STI
  5787                                          ;;CLD
  5788                                          ;;PUSH	ES
  5789                                          ;;PUSH	DS
  5790                                          ;;PUSH	SS
  5791                                          ;;POP	DS
  5792                                  ;;;ASSUME DS:DOSGROUP
  5793                                          ;;;invoke GETBP
  5794                                  	;;CALL	GETBP
  5795                                          ;;POP	DS
  5796                                  ;;;ASSUME DS:NOTHING
  5797                                  
  5798                                  	; 15/07/2018 - Retro DOS v3.0
  5799                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5800 000016C6 06                              PUSH    ES
  5801 000016C7 E869FF                  	call    AbsSetup
  5802                                  	;
  5803 000016CA 72D7                            JC      SHORT ILEAVE
  5804                                          ;invoke DSKWRITE
  5805 000016CC E80F2B                          CALL	DSKWRITE
  5806 000016CF EBBB                    	JMP     SHORT TLEAVE
  5807                                  
  5808                                  ;ABSDWRT ENDP
  5809                                  
  5810                                  ;----------------------------------------------------------------------------
  5811                                  ;
  5812                                  ; Procedure Name : GETBP
  5813                                  ;
  5814                                  ; Inputs:
  5815                                  ;	AL = Logical unit number (A = 0)
  5816                                  ; Function:
  5817                                  ;	Find Drive Parameter Block
  5818                                  ; Outputs:
  5819                                  ;	ES:BP points to DPB
  5820                                  ;	[THISDPB] = ES:BP
  5821                                  ;	Carry set if unit number bad or unit is a NET device.
  5822                                  ;		Later case sets extended error error_I24_not_supported
  5823                                  ; No other registers altered
  5824                                  ;
  5825                                  ;----------------------------------------------------------------------------
  5826                                  
  5827                                  GETBP:
  5828                                  	; 11/07/2018 - Retro DOS v3.0
  5829 000016D1 50                      	PUSH	AX
  5830 000016D2 0401                    	ADD	AL, 1		; No increment; need carry flag
  5831 000016D4 7203                    	JC	SHORT SKIPGET
  5832 000016D6 E89952                  	CALL	GETTHISDRV
  5833                                  	; MSDOS 6.0
  5834                                  	;JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5835                                  	;XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5836                                  	;CMP	AX,error_not_dos_disk	;DCR. is unknown media ? ;AN000;
  5837                                  	;JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5838                                  	;STC				;DCR.			;AN000;
  5839                                  	;MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5840                                  	;MOV	WORD [AbsDskErr],201h
  5841                                  SKIPGET:
  5842 000016D9 58                      	POP	AX
  5843 000016DA 7213                    	JC	SHORT GETBP_RETN
  5844 000016DC C42E[3A05]              	LES	BP,[THISCDS]
  5845                                  	;TEST	WORD [ES:BP+43H],8000H
  5846 000016E0 26F746430080            	TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5847 000016E6 7408                    	JZ	SHORT GETBP_CDS
  5848 000016E8 C706[D202]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32
  5849 000016EE F9                      	STC
  5850                                  GETBP_RETN:
  5851 000016EF C3                      	RETN
  5852                                  
  5853                                  GETBP_CDS:
  5854                                  	;LES	BP,[ES:BP+45H]
  5855 000016F0 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5856                                  
  5857                                  GOTDPB:
  5858                                  	; Load THISDPB from ES:BP
  5859 000016F4 892E[2405]              	MOV	[THISDPB],BP
  5860 000016F8 8C06[2605]              	MOV	[THISDPB+2],ES
  5861 000016FC C3                      	RETN
  5862                                  
  5863                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5864                                  
  5865                                  ;----------------------------------------------------------------------------
  5866                                  ;
  5867                                  ; Procedure Name : SYS_RETURN
  5868                                  ;
  5869                                  ; These are the general system call exit mechanisms. All internal system
  5870                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5871                                  ; is to set the user's flags and set his AX register for return.
  5872                                  ;
  5873                                  ;----------------------------------------------------------------------------
  5874                                  
  5875                                          ;procedure   SYS_RETURN,NEAR
  5876                                  SYS_RETURN:        
  5877                                          ;entry	SYS_RET_OK
  5878                                  SYS_RET_OK:   
  5879                                  	; 18/07/2018
  5880                                  	; Offset 1666h in IBMDOS.COM (MSDOS 3.3), 1987
  5881                                  	; 23/07/2019 - Retro DOS v3.2
  5882                                  	;call	FETCHI_CHECK ; MSDOS 3.3 ! IBMDOS feature !  	
  5883                                       
  5884 000016FD E80BFF                  	call    Get_User_Stack
  5885                                  		; turn off user's carry flag
  5886                                  SYS_RET_OK_clc: ; 24/07/2019  
  5887                                          ;and	word [SI+16h],0FFFEh 
  5888                                         ;and	word [SI+user_env.user_F],~f_Carry
  5889                                  	; 24/07/2019
  5890 00001700 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh 
  5891 00001704 EB10                            JMP     SHORT DO_RET
  5892                                  
  5893                                          ;entry   SYS_RET_ERR
  5894                                  SYS_RET_ERR:        
  5895 00001706 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5896 00001708 E86900                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5897 0000170B E81A00                  	CALL	ErrorMap
  5898                                  
  5899                                  	;entry	From_GetSet
  5900                                  From_GetSet:
  5901 0000170E E8FAFE                          call    Get_User_Stack
  5902                                  		 ; signal carry to user
  5903                                  	;or	word [SI+16h],1
  5904                                  	;OR	word [SI+user_env.user_F],f_Carry
  5905                                  	; 24/07/2019
  5906 00001711 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5907 00001715 F9                      	STC			; also, signal internal error
  5908                                  DO_RET:
  5909                                          ;MOV	[SI+user_env.user_AX], AX ; Really only sets AH
  5910 00001716 8904                    	MOV	[SI],AX
  5911 00001718 C3                      	RETN
  5912                                  
  5913                                  	;entry	FCB_RET_OK
  5914                                  FCB_RET_OK:
  5915                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5916                                  NO_OP:
  5917 00001719 30C0                    	XOR	AL,AL
  5918 0000171B C3                      	retn
  5919                                  
  5920                                  	;entry	FCB_RET_ERR
  5921                                  FCB_RET_ERR:
  5922 0000171C 30E4                    	XOR	AH,AH
  5923 0000171E 36A3[D202]              	mov	[ss:EXTERR],AX
  5924 00001722 E80300                  	CALL	ErrorMap
  5925 00001725 B0FF                    	MOV	AL,-1
  5926 00001727 C3                      	retn
  5927                                  
  5928                                  	;entry	ErrorMap
  5929                                  ErrorMap:
  5930 00001728 56                      	PUSH	SI
  5931                                  				; ERR_TABLE_21 is now in DOSDATA
  5932 00001729 BE[2F0D]                	MOV	SI,ERR_TABLE_21
  5933                                  				; SS override for FAILERR and EXTERR
  5934 0000172C 36803E[F602]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5935 00001732 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5936                                  		 ; Ooops, this is the REAL reason
  5937                                  	;mov	word [SS:EXTERR],53h
  5938 00001734 36C706[D202]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5939                                  EXTENDED_NORMAL:
  5940 0000173B E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5941 0000173E 5E                      	POP	SI
  5942 0000173F C3                      	retn
  5943                                  
  5944                                  	;EndProc SYS_RETURN
  5945                                  
  5946                                  ;---------------------------------------------------------------------------
  5947                                  ;
  5948                                  ; Procedure Name : CAL_LK
  5949                                  ;
  5950                                  ; Inputs:
  5951                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5952                                  ;		(DS NEED not be DOSDATA)
  5953                                  ;	[EXTERR] is set with error
  5954                                  ; Function:
  5955                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5956                                  ; Outputs:
  5957                                  ;	[EXTERR_CLASS] set
  5958                                  ;	[EXTERR_ACTION] set
  5959                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5960                                  ; Destroys SI, FLAGS
  5961                                  ;
  5962                                  ;---------------------------------------------------------------------------
  5963                                  
  5964                                  	;procedure CAL_LK,NEAR
  5965                                  CAL_LK:
  5966 00001740 1E                      	PUSH	DS
  5967 00001741 50                      	PUSH	AX
  5968 00001742 53                      	PUSH	BX
  5969                                  
  5970                                  ;M048	Context DS		; DS:SI -> Table
  5971                                  ;
  5972                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5973                                  ; is DOSDATA
  5974                                  
  5975                                  	;getdseg	<ds>	; M048: DS:SI -> Table
  5976                                  
  5977                                  	; 18/07/2018
  5978 00001743 16                      	push	ss
  5979 00001744 1F                      	pop	ds
  5980                                  
  5981 00001745 8B1E[D202]              	MOV	BX,[EXTERR]	; Get error in BL
  5982                                  TABLK1:
  5983 00001749 AC                      	LODSB
  5984                                  
  5985 0000174A 3CFF                    	CMP	AL,0FFH
  5986 0000174C 7409                    	JZ	short GOT_VALS	; End of table
  5987 0000174E 38D8                    	CMP	AL,BL
  5988 00001750 7405                    	JZ	short GOT_VALS	; Got entry
  5989 00001752 83C603                  	ADD	SI,3		; Next table entry
  5990                                  	; 15/08/2018
  5991 00001755 EBF2                    	JMP	short TABLK1
  5992                                  
  5993                                  GOT_VALS:
  5994 00001757 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5995                                  
  5996 00001758 80FCFF                  	CMP	AH,0FFH
  5997 0000175B 7404                    	JZ	short NO_SET_ACT
  5998 0000175D 8826[D402]              	MOV	[EXTERR_ACTION],AH	; Set ACTION
  5999                                  NO_SET_ACT:
  6000 00001761 3CFF                    	CMP	AL,0FFH
  6001 00001763 7403                    	JZ	short NO_SET_CLS
  6002 00001765 A2[D502]                	MOV	[EXTERR_CLASS],AL	; Set CLASS
  6003                                  NO_SET_CLS:
  6004 00001768 AC                      	LODSB			; Get LOCUS
  6005                                  
  6006 00001769 3CFF                    	CMP	AL,0FFH
  6007 0000176B 7403                    	JZ	short NO_SET_LOC
  6008 0000176D A2[D102]                	MOV	[EXTERR_LOCUS],AL
  6009                                  NO_SET_LOC:
  6010 00001770 5B                      	POP	BX
  6011 00001771 58                      	POP	AX
  6012 00001772 1F                      	POP	DS
  6013 00001773 C3                      	retn
  6014                                  
  6015                                  	;EndProc CAL_LK
  6016                                  
  6017                                  ;---------------------------------------------------------------------------
  6018                                  ;
  6019                                  ; Procedure Name : ETAB_LK
  6020                                  ;
  6021                                  ; Inputs:
  6022                                  ;	AX is error code
  6023                                  ;	[USER_IN_AX] has AH value of system call involved
  6024                                  ; Function:
  6025                                  ;	Make sure error code is appropriate to this call.
  6026                                  ; Outputs:
  6027                                  ;	AX MAY be mapped error code
  6028                                  ;	[EXTERR] = Input AX
  6029                                  ; Destroys ONLY AX and FLAGS
  6030                                  ;
  6031                                  ;---------------------------------------------------------------------------
  6032                                  
  6033                                  	;procedure ETAB_LK,NEAR
  6034                                  
  6035                                  ETAB_LK: ; 10/08/2018
  6036 00001774 1E                      	PUSH	DS
  6037 00001775 56                      	PUSH	SI
  6038 00001776 51                      	PUSH	CX
  6039 00001777 53                      	PUSH	BX
  6040                                  
  6041                                  	;Context DS			; SS is DOSDATA
  6042                                  
  6043 00001778 16                      	push	ss
  6044 00001779 1F                      	pop	ds
  6045                                  
  6046 0000177A A3[D202]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  6047                                  
  6048                                  					; I21_MAP_E_TAB is now in DOSCODE
  6049 0000177D BE[930C]                	MOV	SI,I21_MAP_E_TAB
  6050 00001780 88C7                    	MOV	BH,AL			; Real code to BH
  6051 00001782 8A1E[E702]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  6052                                  TABLK2:
  6053                                  ;;hkn;	LODSW
  6054                                  ;	LODS	word ptr cs:[si] ; MSDOS 6.0
  6055                                  	
  6056                                  	; 18/07/2018
  6057 00001786 AD                      	lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  6058                                  
  6059 00001787 3CFF                    	CMP	AL,0FFH 		; End of table?
  6060 00001789 740C                    	JZ	short NOT_IN_TABLE	; Yes
  6061 0000178B 38D8                    	CMP	AL,BL			; Found call?
  6062 0000178D 740C                    	JZ	short GOT_CALL		; Yes
  6063 0000178F 86E0                    	XCHG	AH,AL			; Count to AL
  6064 00001791 30E4                    	XOR	AH,AH			; Make word for add
  6065 00001793 01C6                    	ADD	SI,AX			; Next table entry
  6066 00001795 EBEF                    	JMP	short TABLK2
  6067                                  
  6068                                  NOT_IN_TABLE:
  6069 00001797 88F8                    	MOV	AL,BH			; Restore original code
  6070 00001799 EB0B                    	JMP	SHORT NO_MAP
  6071                                  
  6072                                  GOT_CALL:
  6073 0000179B 88E1                    	MOV	CL,AH
  6074 0000179D 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  6075                                  CHECK_CODE:
  6076                                  ;;hkn;	LODSB
  6077                                  ;	LODS	byte ptr cs:[si]
  6078                                  
  6079                                  	; 18/07/2018
  6080 0000179F AC                      	lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  6081                                  
  6082 000017A0 38F8                    	CMP	AL,BH			; Code OK?
  6083 000017A2 7402                    	JZ	short NO_MAP		; Yes
  6084 000017A4 E2F9                    	LOOP	CHECK_CODE
  6085                                  NO_MAP:
  6086 000017A6 30E4                    	XOR	AH,AH			; AX is now valid code
  6087 000017A8 5B                      	POP	BX
  6088 000017A9 59                      	POP	CX
  6089 000017AA 5E                      	POP	SI
  6090 000017AB 1F                      	POP	DS
  6091 000017AC C3                      	retn
  6092                                  
  6093                                  	;EndProc ETAB_LK
  6094                                  
  6095                                  ; 18/07/2018 - Retro DOS v3.0
  6096                                  ;---------------------------------------------------------------------------
  6097                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  6098                                  
  6099                                  ;IF installed
  6100                                  ;---------------------------------------------------------------------------
  6101                                  ;
  6102                                  ; Procedure Name : SetBad
  6103                                  ;
  6104                                  ; SetBad sets up info for bad functions
  6105                                  ;
  6106                                  ;---------------------------------------------------------------------------
  6107                                  
  6108                                  SetBad:
  6109                                  	;mov	ax,1
  6110 000017AD B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  6111                                  
  6112                                  ;	set up ds to point to DOSDATA
  6113                                  
  6114                                  	; MSDOS 6.0
  6115                                  	;push	ds
  6116                                  
  6117                                  	;getdseg <ds>
  6118                                  	;MOV	[EXTERR_LOCUS],errLOC_Unk	
  6119                                  
  6120                                  	; MSDOS 3.3
  6121                                  	;mov	byte [cs:EXTERR_LOCUS],1
  6122 000017B0 2EC606[D102]01          	MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  6123                                  
  6124                                  	;pop	ds	  		;hkn; restore ds
  6125                                  
  6126 000017B6 F9                      	STC
  6127 000017B7 C3                      	retn
  6128                                  
  6129                                  ;--------------------------------------------------------------------------
  6130                                  ;
  6131                                  ; Procedure Name : BadCall
  6132                                  ;
  6133                                  ; BadCall is the initial routine for bad function calls
  6134                                  ;
  6135                                  ;--------------------------------------------------------------------------
  6136                                  
  6137                                  BadCall:
  6138 000017B8 E8F2FF                  	call	SetBad
  6139 000017BB CB                      	retf
  6140                                  
  6141                                  ;--------------------------------------------------------------------------
  6142                                  ;
  6143                                  ; OKCall always sets carry to off.
  6144                                  ;
  6145                                  ;-----------------------------------------------------------------------
  6146                                  
  6147                                  OKCall:
  6148 000017BC F8                      	CLC
  6149 000017BD CB                      	retf
  6150                                  
  6151                                  ;---------------------------------------------------------------------------
  6152                                  ;
  6153                                  ; Procedure Name : INT2F
  6154                                  ;
  6155                                  ; INT 2F handler works as follows:
  6156                                  ;   PUSH    AX
  6157                                  ;   MOV     AX,multiplex:function
  6158                                  ;   INT     2F
  6159                                  ;   POP     ...
  6160                                  ; The handler itself needs to make the AX available for the various routines.
  6161                                  ;
  6162                                  ;----------------------------------------------------------------------------
  6163                                  
  6164                                  ;PUBLIC	Int2F
  6165                                  ;INT2F	PROC	FAR
  6166                                  
  6167                                  	; 18/07/2018 - Retro DOS v3.0
  6168                                  
  6169                                  INT2F:
  6170                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  6171                                  INT2FNT:
  6172                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6173 000017BE FB                      	STI
  6174                                  	;cmp	ah,11h
  6175 000017BF 80FC11                  	CMP	AH,MultNET
  6176 000017C2 750A                    	JNZ	short INT2FSHR
  6177                                  TestInstall:
  6178 000017C4 08C0                    	OR	AL,AL
  6179 000017C6 7403                    	JZ	short Leave2F
  6180                                  BadFunc:
  6181 000017C8 E8E2FF                  	CALL	SetBad
  6182                                  
  6183                                  	;entry	Leave2F
  6184                                  Leave2F:
  6185 000017CB CA0200                  	RETF	2			; long return + clear flags off stack
  6186                                  
  6187                                  INT2FSHR:
  6188                                  	;cmp	ah,10h
  6189 000017CE 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  6190 000017D1 74F1                    	JZ	short TestInstall	; yes, check for installation
  6191                                  INT2FNLS:
  6192                                  	;cmp	ah,14h
  6193 000017D3 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  6194 000017D6 74EC                    	JZ	short TestInstall	; yes check for installation
  6195                                  INT2FDOS:
  6196                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6197                                  
  6198                                  	; 18/07/2018
  6199                                  	; MSDOS 6.0
  6200                                  	;CMP	AH,MultDOS
  6201                                  	;JNZ	check_win		;check if win386 broadcast
  6202                                  	;jmp	DispatchDOS
  6203                                  
  6204                                  	; .... win386 .... 
  6205                                  	
  6206                                  	; 18/07/2018
  6207                                  	; MSDOS 3.3
  6208                                  	;cmp	ah,12h	
  6209 000017D8 80FC12                  	CMP	AH,MultDOS
  6210 000017DB 7401                    	jz	short DispatchDOS
  6211 000017DD CF                      	iret
  6212                                  
  6213                                  ;INT2F	ENDP
  6214                                  	
  6215                                  DispatchDOS:
  6216 000017DE 2EFF36[D80E]            	PUSH	word [CS:FOO]		; push return address
  6217 000017E3 2EFF36[DA0E]            	PUSH	word [CS:DTab]		; push table address
  6218 000017E8 50                      	PUSH	AX			; push index
  6219 000017E9 55                      	PUSH	BP
  6220 000017EA 89E5                    	MOV	BP,SP
  6221                                  		; stack looks like:
  6222                                  		;   0	BP
  6223                                  		;   2	DISPATCH
  6224                                  		;   4	TABLE
  6225                                  		;   6	RETURN
  6226                                  		;   8	LONG-RETURN
  6227                                  		;   c	FLAGS
  6228                                  		;   e	AX
  6229                                  	
  6230 000017EC 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6231 000017EF 5D                      	POP	BP
  6232 000017F0 E8A907                  	call	TableDispatch
  6233 000017F3 EBD3                    	JMP	short BadFunc 		; return indicates invalid function
  6234                                  
  6235                                  INT2F_etcetera:
  6236                                  	;entry	DosGetGroup
  6237                                  DosGetGroup:
  6238                                  	; MSDOS 6.0
  6239                                  ;SR; Cannot use CS now
  6240                                  ;
  6241                                  ;	PUSH	CS
  6242                                  ;	POP	DS
  6243                                  
  6244                                  	;getdseg <ds>
  6245                                  	;retn
  6246                                  
  6247                                  	; MSDOS 3.3
  6248 000017F5 0E                      	push	cs
  6249 000017F6 1F                      	pop	ds
  6250 000017F7 C3                      	retn
  6251                                  
  6252                                  	;entry	DOSInstall
  6253                                  DOSInstall:
  6254 000017F8 B0FF                    	MOV	AL,0FFh
  6255 000017FA C3                      	retn
  6256                                  
  6257                                  ;ENDIF
  6258                                  
  6259                                  ;============================================================================
  6260                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  6261                                  ;============================================================================
  6262                                  ; 18/07/2018 - Retro DOS 3.0
  6263                                  
  6264                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
  6265                                  ;     ENTRY: AL = Character to map
  6266                                  ;     EXIT:  AL = The converted character
  6267                                  ; Alters no registers except AL and flags.
  6268                                  ; The routine should do nothing to chars below 80H.
  6269                                  ;
  6270                                  ; Example:
  6271                                  
  6272                                  ;Procedure   MAP_CASE,FAR
  6273                                  
  6274                                  MAP_CASE:
  6275                                  	; Offset 176Ch in IBMDOS.COM (MSDOS 3.3), 1987
  6276                                  	
  6277 000017FB 3C80                    	CMP	AL,80H
  6278 000017FD 7301                    	JAE	short Map1	;Map no chars below 80H ever
  6279 000017FF CB                      	RETF
  6280                                  Map1:
  6281 00001800 2C80                    	SUB	AL,80H		;Turn into index value
  6282 00001802 1E                      	PUSH	DS
  6283 00001803 53                      	PUSH	BX
  6284 00001804 BB[8810]                	MOV	BX,UCASE_TAB+2
  6285                                  FINISH:
  6286 00001807 0E                      	PUSH	CS		;Move to DS
  6287 00001808 1F                      	POP	DS
  6288 00001809 D7                      	XLAT			; Get upper case character
  6289 0000180A 5B                      	POP	BX
  6290 0000180B 1F                      	POP	DS
  6291                                  L_RET:	
  6292 0000180C CB                      	RETF
  6293                                  
  6294                                  ;EndProc MAP_CASE
  6295                                  
  6296                                  ;============================================================================
  6297                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6298                                  ;============================================================================
  6299                                  ; 18/07/2018 - Retro DOS v3.0
  6300                                  
  6301                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6302                                  
  6303                                  ; OEMFunction key is expected to process a single function
  6304                                  ;   key input from a device and dispatch to the proper
  6305                                  ;   routines leaving all registers UNTOUCHED.
  6306                                  ;
  6307                                  ; Inputs:   CS, SS are DOSGROUP
  6308                                  ; Outputs:  None. This function is expected to JMP to onw of
  6309                                  ;           the following labels:
  6310                                  ;
  6311                                  ;           GetCh       - ignore the sequence
  6312                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6313                                  ;           ExitIns     - toggle insert mode
  6314                                  ;           EnterIns    - toggle insert mode
  6315                                  ;           BackSp      - move backwards one space
  6316                                  ;           ReEdit      - reedit the line with a new template
  6317                                  ;           KilNew      - discard the current line and start from scratch
  6318                                  ;           CopyLin     - copy the rest of the template into the line
  6319                                  ;           SkipStr     - read the next character and skip to it in the template
  6320                                  ;           CopyStr     - read next char and copy from template to line until char
  6321                                  ;           SkipOne     - advance position in template one character
  6322                                  ;           CopyOne     - copy next character in template into line
  6323                                  ;           CtrlZ       - place a ^Z into the template
  6324                                  ; Registers that are allowed to be modified by this function are:
  6325                                  ;           AX, CX, BP
  6326                                  
  6327                                  OEMFunctionKey:
  6328 0000180D E87508                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6329 00001810 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6330 00001812 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6331 00001813 BF[D312]                	MOV     DI,ESCTAB		; offset of second byte table
  6332 00001816 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6333 00001818 5F                      	POP     DI                      ; restore DI
  6334 00001819 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6335 0000181B 89CD                    	MOV     BP,CX                   ; move to indexable register
  6336                                  	;JMP	word [SS:BP+ESCFUNC]	; Go to the right routine
  6337 0000181D FFA6[E112]              	JMP	word [BP+ESCFUNC]
  6338                                  	
  6339                                  ;============================================================================
  6340                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6341                                  ;============================================================================
  6342                                  ; Retro DOS v3.0 - 18/07/2018
  6343                                  
  6344                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6345                                  ;----------------------------------------------------------------------------
  6346                                  ; Retro DOS v2.0 - 13/03/2018
  6347                                  
  6348                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6349                                  
  6350                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6351                                  
  6352                                  ;**	$GET_DATE - Get Current Date
  6353                                  ;
  6354                                  ;	ENTRY	none
  6355                                  ;	EXIT	(cx:dx) = current date
  6356                                  ;	USES	all
  6357                                  
  6358                                  _$GET_DATE:	;System call 42
  6359                                  
  6360 00001821 16                              PUSH    SS
  6361 00001822 1F                              POP     DS
  6362 00001823 E8B700                          CALL	READTIME        ;Check for rollover to next day
  6363 00001826 A1[FE02]                        MOV     AX,[YEAR]
  6364                                  
  6365                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6366                                  
  6367 00001829 8B1E[FC02]                      MOV     BX,[DAY]	; fetch both day and month
  6368 0000182D E8DBFD                  	CALL	Get_User_Stack	;Get pointer to user registers
  6369                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6370 00001830 895C06                  	MOV	[SI+user_env.user_DX],BX
  6371 00001833 05BC07                          ADD     AX,1980         ;Put bias back
  6372                                          ;MOV    [SI+4],AX  	;CX=year
  6373 00001836 894404                  	MOV	[SI+user_env.user_CX],AX
  6374                                          ;MOV	AL,[WEEKDAY]
  6375 00001839 36A0[0203]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6376 0000183D C3                      	RETN
  6377                                  
  6378                                  ;**	$SET_DATE - Set Current Date
  6379                                  ;
  6380                                  ;	ENTRY	(cx:dx) = current date
  6381                                  ;	EXIT	(al) = -1 iff bad date
  6382                                  ;		(al) = 0 if ok
  6383                                  ;	USES	all
  6384                                  
  6385                                  _$SET_DATE:			;System call 43
  6386                                  
  6387 0000183E B0FF                            MOV     AL,-1           ;Be ready to flag error
  6388 00001840 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6389 00001844 7217                            JC      SHORT RET24	;Error if not big enough
  6390 00001846 83F977                          CMP     CX,119          ;Year must be less than 2100
  6391 00001849 7712                            JA      SHORT RET24
  6392 0000184B 08F6                            OR      DH,DH
  6393 0000184D 740E                            JZ      SHORT RET24
  6394 0000184F 08D2                            OR      DL,DL
  6395 00001851 740A                            JZ      SHORT RET24	;Error if either month or day is 0
  6396 00001853 80FE0C                          CMP     DH,12           ;Check against max. month
  6397 00001856 7705                            JA      SHORT RET24
  6398 00001858 16                              PUSH    SS
  6399 00001859 1F                              POP     DS
  6400 0000185A E81301                  	CALL	DODATE
  6401                                  RET24:  
  6402 0000185D C3                      	RETN
  6403                                  
  6404                                  
  6405                                  ;**	$GET_TIME - Get Current Time
  6406                                  ;
  6407                                  ;	ENTRY	none
  6408                                  ;	EXIT	(cx:dx) = current time
  6409                                  ;	USES	all
  6410                                  
  6411                                  _$GET_TIME:			;System call 44
  6412                                  
  6413 0000185E 16                              PUSH    SS
  6414 0000185F 1F                              POP     DS
  6415 00001860 E87A00                  	CALL	READTIME
  6416 00001863 E8A5FD                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6417                                         ;MOV     [SI+6],DX
  6418 00001866 895406                  	MOV	[SI+user_env.user_DX],DX
  6419                                         ;MOV     [SI+4],CX
  6420 00001869 894C04                  	MOV	[SI+user_env.user_CX],CX
  6421 0000186C 30C0                            XOR     AL,AL
  6422                                  RET26:  
  6423 0000186E C3                      	RETN
  6424                                  
  6425                                  ;**	$SET_TIME - Set Current Time
  6426                                  ;
  6427                                  ;	ENTRY	(cx:dx) = time
  6428                                  ;	EXIT	(al) = 0 if 0k
  6429                                  ;		(al) = -1 if invalid
  6430                                  ;	USES	ALL
  6431                                  
  6432                                  _$SET_TIME:			;System call 45
  6433                                  
  6434 0000186F B0FF                            MOV     AL,-1           ;Flag in case of error
  6435 00001871 80FD18                          CMP     CH,24           ;Check hours
  6436 00001874 73F8                            JAE     SHORT RET26
  6437 00001876 80F93C                          CMP     CL,60           ;Check minutes
  6438 00001879 73F3                            JAE     SHORT RET26
  6439 0000187B 80FE3C                          CMP     DH,60           ;Check seconds
  6440 0000187E 73EE                            JAE     SHORT RET26
  6441 00001880 80FA64                          CMP     DL,100          ;Check 1/100's
  6442 00001883 73E9                            JAE     SHORT RET26
  6443 00001885 51                              PUSH    CX
  6444 00001886 52                              PUSH    DX
  6445 00001887 16                              PUSH    SS
  6446 00001888 1F                              POP     DS
  6447 00001889 BB[5803]                        MOV     BX,TIMEBUF
  6448 0000188C B90600                          MOV     CX,6
  6449 0000188F 31D2                            XOR     DX,DX
  6450 00001891 89D0                            MOV     AX,DX
  6451 00001893 53                              PUSH    BX
  6452 00001894 E88836                  	CALL	SETREAD
  6453 00001897 1E                              PUSH    DS
  6454 00001898 C536[2E00]                      LDS     SI,[BCLOCK]
  6455 0000189C E85C36                  	CALL	DEVIOCALL2      ;Get correct day count
  6456 0000189F 1F                              POP     DS
  6457 000018A0 5B                              POP     BX
  6458 000018A1 E8AE36                  	CALL	SETWRITE
  6459 000018A4 8F06[5C03]                      POP     WORD [TIMEBUF+4]
  6460 000018A8 8F06[5A03]                      POP     WORD [TIMEBUF+2]
  6461 000018AC C536[2E00]                      LDS     SI,[BCLOCK]
  6462 000018B0 E84836                  	CALL	DEVIOCALL2      ;Set the time
  6463 000018B3 30C0                            XOR     AL,AL
  6464 000018B5 C3                              RETN
  6465                                  
  6466                                  ; 11/07/2018 - Retro DOS v3.0
  6467                                  ; Retro DOS v2.0 - 14/03/2018
  6468                                  
  6469                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6470                                  
  6471                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6472                                  
  6473                                  ;
  6474                                  ; Date16 returns the current date in AX, current time in DX
  6475                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6476                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6477                                  ;
  6478                                  
  6479                                  DATE16:
  6480                                  	
  6481                                  ;M048	Context DS
  6482                                  ;
  6483                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6484                                  ; is DOSDATA
  6485                                  
  6486                                  	;getdseg	<ds>			; M048
  6487                                  
  6488                                  	;PUSH	SS
  6489 000018B6 0E                      	PUSH	CS
  6490 000018B7 1F                      	POP	DS
  6491                                  
  6492 000018B8 51                              PUSH    CX
  6493 000018B9 06                              PUSH    ES
  6494 000018BA E82000                          CALL    READTIME
  6495 000018BD 07                              POP     ES
  6496 000018BE D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6497 000018C0 D0E1                            SHL     CL,1
  6498 000018C2 D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6499 000018C4 D1E1                            SHL     CX,1
  6500 000018C6 D1E1                            SHL     CX,1
  6501 000018C8 D0EE                            SHR     DH,1            ;Count every two seconds
  6502 000018CA 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6503 000018CC 89CA                            MOV     DX,CX
  6504                                  
  6505                                  ;	WARNING!  MONTH and YEAR must be adjacently allocated
  6506                                  
  6507 000018CE A1[FD02]                        MOV     AX,[MONTH]	;Fetch month and year
  6508 000018D1 B104                            MOV     CL,4
  6509 000018D3 D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6510 000018D5 D1E0                            SHL     AX,1
  6511 000018D7 59                              POP     CX
  6512 000018D8 0A06[FC02]                      OR      AL,[DAY]
  6513                                  RET21:
  6514 000018DC C3                              RETN
  6515                                  
  6516                                  READTIME:
  6517                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6518                                  ;Uses AX, CX, DX.
  6519                                  
  6520 000018DD C706[8D0F]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6521 000018E3 56                              PUSH    SI
  6522 000018E4 53                              PUSH    BX
  6523                                  
  6524 000018E5 BB[5803]                        MOV     BX,TIMEBUF
  6525                                  
  6526 000018E8 B90600                          MOV     CX,6
  6527 000018EB 31D2                            XOR     DX,DX
  6528 000018ED 89D0                            MOV     AX,DX
  6529 000018EF E82D36                  	CALL	SETREAD
  6530 000018F2 1E                              PUSH    DS
  6531 000018F3 C536[2E00]                      LDS     SI,[BCLOCK]
  6532 000018F7 E80136                  	CALL	DEVIOCALL2      ;Get correct date and time
  6533 000018FA 1F                              POP     DS
  6534 000018FB 5B                              POP     BX
  6535 000018FC 5E                              POP     SI
  6536 000018FD A1[5803]                        MOV     AX,[TIMEBUF]
  6537 00001900 8B0E[5A03]                      MOV     CX,[TIMEBUF+2]
  6538 00001904 8B16[5C03]                      MOV     DX,[TIMEBUF+4]
  6539 00001908 3B06[0003]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6540                                          ;JZ	SHORT RET22
  6541 0000190C 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6542                                  	;cmp	ax,43830
  6543 0000190E 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6544 00001911 733D                            JAE     SHORT RET22	;Ignore if too large
  6545 00001913 A3[0003]                        MOV     [DAYCNT],AX
  6546 00001916 56                              PUSH    SI
  6547 00001917 51                              PUSH    CX
  6548 00001918 52                              PUSH    DX              ;Save time
  6549 00001919 31D2                            XOR     DX,DX
  6550                                  	;mov	cx,1461
  6551 0000191B B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6552 0000191E F7F1                            DIV     CX              ;Compute number of 4-year units
  6553 00001920 D1E0                            SHL     AX,1
  6554 00001922 D1E0                            SHL     AX,1
  6555 00001924 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6556 00001926 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6557                                  
  6558 00001928 BE[7F0C]                        MOV     SI,YRTAB        ;Table of days in each year
  6559                                  
  6560 0000192B E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6561 0000192E D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6562 00001930 7304                            JNC     SHORT SK	;Extra half-year?
  6563 00001932 81C2C800                        ADD     DX,200
  6564                                  SK:
  6565 00001936 E82400                          CALL    SETYEAR
  6566 00001939 B101                            MOV     CL,1            ;At least at first month in year
  6567                                  
  6568 0000193B BE[870C]                        MOV     SI,MONTAB       ;Table of days in each month
  6569                                          
  6570 0000193E E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6571 00001941 880E[FD02]                      MOV     [MONTH],CL
  6572 00001945 42                              INC     DX              ;Remainder is day of month (start with one)
  6573 00001946 8816[FC02]                      MOV     [DAY],DL
  6574 0000194A E89400                          CALL    WKDAY           ;Set day of week
  6575 0000194D 5A                              POP     DX
  6576 0000194E 59                              POP     CX
  6577 0000194F 5E                              POP     SI
  6578                                  RET22:  
  6579 00001950 C3                      	RETN
  6580                                  
  6581                                  DSLIDE:
  6582 00001951 B400                            MOV     AH,0
  6583                                  DSLIDE1:
  6584 00001953 AC                              LODSB			;Get count of days
  6585 00001954 39C2                            CMP     DX,AX           ;See if it will fit
  6586 00001956 7217                            JB      SHORT RET23	;If not, done
  6587 00001958 29C2                            SUB     DX,AX
  6588 0000195A 41                              INC     CX              ;Count one more month/year
  6589 0000195B EBF6                            JMP     SHORT DSLIDE1
  6590                                  
  6591                                  SETYEAR:
  6592                                  ;Set year with value in CX. Adjust length of February for this year.
  6593                                  
  6594                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6595                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6596                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6597                                  ;	preserve DS as CHKYR is also called as a routine.
  6598                                  
  6599                                  
  6600                                  	; MSDOS 6.0 (18/07/2018) ; *
  6601                                  
  6602                                  	;GETDSEG DS
  6603                                  
  6604 0000195D 0E                      	PUSH	CS  ; *
  6605 0000195E 1F                      	POP	DS  ; *
  6606                                  
  6607                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987 
  6608                                  
  6609 0000195F 880E[FE02]                      MOV     [YEAR],CL
  6610                                  CHKYR:
  6611 00001963 F6C103                          TEST    CL,3            ;Check for leap year
  6612 00001966 B01C                            MOV     AL,28
  6613 00001968 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6614 0000196A FEC0                            INC     AL              ;Add leap day
  6615                                  SAVFEB:
  6616                                  	;mov	[february],al
  6617 0000196C A2[880C]                        MOV     [MONTAB+1],AL   ;Store for February
  6618                                  RET23:  
  6619 0000196F C3                      	RETN
  6620                                  
  6621                                  DODATE:
  6622 00001970 E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6623 00001973 88F0                            MOV     AL,DH
  6624                                  
  6625 00001975 BB[860C]                        MOV     BX,MONTAB-1
  6626                                  
  6627 00001978 D7                              XLAT                    ;Look up days in month
  6628 00001979 38D0                            CMP     AL,DL
  6629 0000197B B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6630                                          ;JB	SHORT RET25	;Error if too many days
  6631 0000197D 72F0                            jb	short RET23 ; 18/07/2018
  6632 0000197F E8DBFF                  	CALL    SETYEAR
  6633                                  ;
  6634                                  ; WARNING!  DAY and MONTH must be adjacently allocated
  6635                                  ;
  6636 00001982 8916[FC02]                      MOV     [DAY],DX	;Set both day and month
  6637 00001986 D1E9                            SHR     CX,1
  6638 00001988 D1E9                            SHR     CX,1
  6639                                  	;mov	ax,1461
  6640 0000198A B8B505                          MOV     AX,FOURYEARS
  6641 0000198D 89D3                            MOV     BX,DX
  6642 0000198F F7E1                            MUL     CX
  6643 00001991 8A0E[FE02]                      MOV     CL,[YEAR]
  6644 00001995 80E103                          AND     CL,3
  6645                                  
  6646 00001998 BE[7F0C]                        MOV     SI,YRTAB
  6647                                  
  6648 0000199B 89C2                            MOV     DX,AX
  6649 0000199D D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6650 0000199F E85200                          CALL    DSUM            ;Add up the days in each year
  6651 000019A2 88F9                            MOV     CL,BH           ;Month of year
  6652                                  
  6653 000019A4 BE[870C]                        MOV     SI,MONTAB
  6654                                  
  6655 000019A7 49                              DEC     CX              ;Account for months starting with one
  6656 000019A8 E84900                          CALL    DSUM            ;Add up days in each month
  6657 000019AB 88D9                            MOV     CL,BL           ;Day of month
  6658 000019AD 49                              DEC     CX              ;Account for days starting with one
  6659 000019AE 01CA                            ADD     DX,CX           ;Add in to day total
  6660 000019B0 92                              XCHG    AX,DX           ;Get day count in AX
  6661 000019B1 A3[0003]                        MOV     [DAYCNT],AX
  6662 000019B4 56                              PUSH    SI
  6663 000019B5 53                              PUSH    BX
  6664 000019B6 50                              PUSH    AX
  6665                                  
  6666 000019B7 BB[5803]                        MOV     BX,TIMEBUF
  6667                                  
  6668 000019BA B90600                          MOV     CX,6
  6669 000019BD 31D2                            XOR     DX,DX
  6670 000019BF 89D0                            MOV     AX,DX
  6671 000019C1 53                              PUSH    BX
  6672 000019C2 E85A35                  	CALL	SETREAD
  6673                                  
  6674 000019C5 1E                              PUSH    DS
  6675 000019C6 C536[2E00]                      LDS     SI,[BCLOCK]
  6676 000019CA E82E35                  	CALL	DEVIOCALL2	;Get correct date and time
  6677 000019CD 1F                              POP     DS
  6678 000019CE 5B                              POP     BX
  6679 000019CF E88035                  	CALL	SETWRITE
  6680 000019D2 8F06[5803]                      POP     WORD [TIMEBUF]
  6681 000019D6 1E                              PUSH    DS
  6682 000019D7 C536[2E00]                      LDS     SI,[BCLOCK]
  6683 000019DB E81D35                  	CALL	DEVIOCALL2      ;Set the date
  6684 000019DE 1F                              POP     DS
  6685 000019DF 5B                              POP     BX
  6686 000019E0 5E                              POP     SI
  6687                                  WKDAY:
  6688 000019E1 A1[0003]                        MOV     AX,[DAYCNT]
  6689 000019E4 31D2                            XOR     DX,DX
  6690 000019E6 B90700                          MOV     CX,7
  6691 000019E9 40                              INC     AX
  6692 000019EA 40                              INC     AX              ;First day was Tuesday
  6693 000019EB F7F1                            DIV     CX              ;Compute day of week
  6694 000019ED 8816[0203]                      MOV     [WEEKDAY],DL
  6695 000019F1 30C0                            XOR     AL,AL           ;Flag OK
  6696                                  RET25:
  6697 000019F3 C3                      	RETN
  6698                                  
  6699                                  ;**	DSUM - Compute the sum of a string of bytes
  6700                                  ;
  6701                                  ;	ENTRY	(cx) = byte count
  6702                                  ;		(ds:si) = byte address
  6703                                  ;		(dx) = sum register, initialized by caller
  6704                                  ;	EXIT	(dx) updated
  6705                                  ;	USES	ax, cx, dx, si, flags
  6706                                  
  6707                                  DSUM:
  6708 000019F4 B400                            MOV     AH,0
  6709                                  	;JCXZ	DSUM9
  6710 000019F6 E3FB                            JCXZ	RET25 ; 18/07/2018
  6711                                  DSUM1:
  6712 000019F8 AC                              LODSB
  6713 000019F9 01C2                            ADD     DX,AX
  6714 000019FB E2FB                            LOOP    DSUM1
  6715                                  DSUM9:
  6716 000019FD C3                              RETN
  6717                                  
  6718                                  
  6719                                  ;============================================================================
  6720                                  ; GETSET.ASM
  6721                                  ;============================================================================
  6722                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6723                                  ; Retro DOS v2.0 - 12/03/2018
  6724                                  
  6725                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6726                                  ;NAME	GETSET
  6727                                  
  6728                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6729                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6730                                  
  6731                                  ;USERNUM:
  6732                                  ;	DW	0			; 24 bit user number
  6733                                  ;       DB      0
  6734                                  ;;	IF      IBM
  6735                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6736                                  ;;	ELSE
  6737                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6738                                  ;;	ENDIF
  6739                                  
  6740                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6741                                  ;; 08/07/2018 - Retro DOS v3.0
  6742                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6743                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6744                                  
  6745                                  
  6746                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6747                                  
  6748                                  _$GET_VERSION:
  6749                                  
  6750                                  ; Inputs:
  6751                                  ;       None
  6752                                  ; Function:
  6753                                  ;       Return MS-DOS version number
  6754                                  ; Outputs:
  6755                                  ;       OEM number in BH
  6756                                  ;       User number in BL:CX (24 bits)
  6757                                  ;       Version number as AL.AH in binary
  6758                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6759                                  
  6760                                  ; MSDOS 6.0
  6761                                  ;		if input al = 00
  6762                                  ;		  (bh) = OEM number			
  6763                                  ;		else if input al = 01
  6764                                  ;		  (bh) = version flags
  6765                                  ;		 
  6766                                  ;		       	 bits 0-2 = DOS internal revision
  6767                                  ;		       	 bits 3-7 = DOS type flags
  6768                                  ;		              bit 3    = DOS is in ROM
  6769                                  ;		              bit 4    = DOS in in HMA
  6770                                  ;		              bits 5-7 = reserved
  6771                                  ;               M007 change - only bit 3 is now valid.  Other bits
  6772                                  ;               are 0 when AL = 1
  6773                                  
  6774                                  	
  6775                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6776                                  
  6777 000019FE 16                              PUSH    SS
  6778 000019FF 1F                              POP     DS
  6779 00001A00 8B1E[5403]                      MOV     BX,[USERNUM+2]
  6780 00001A04 8B0E[5203]                      MOV     CX,[USERNUM]
  6781 00001A08 A1[7D0C]                        MOV     AX,[MSVERS]
  6782 00001A0B E8FDFB                          call	Get_User_Stack
  6783                                          ;MOV	[SI+2],BX
  6784 00001A0E 895C02                  	mov	[SI+user_env.user_BX],BX
  6785                                          ;MOV	[SI+4],CX
  6786 00001A11 894C04                  	mov	[SI+user_env.user_CX],CX
  6787                                          ;MOV	[SI+user_env.user_AX],AX  ; Really only sets AH
  6788 00001A14 8904                            MOV	[SI],AX ; 31/03/2018
  6789 00001A16 C3                      	RETN
  6790                                  
  6791                                  ; 18/07/2018 - Retro DOS v3.0
  6792                                  
  6793                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6794                                  
  6795                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6796                                  ;
  6797                                  ;	ENTRY	none
  6798                                  ;	EXIT	(al) = value of VERIFY flag
  6799                                  ;	USES	all
  6800                                  
  6801                                  
  6802                                  _$GET_VERIFY_ON_WRITE:
  6803                                  
  6804                                  ;hkn; SS override
  6805 00001A17 36A0[AD02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6806 00001A1B C3                      	retn
  6807                                  
  6808                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6809                                  ;
  6810                                  ;	ENTRY	(al) = value of VERIFY flag
  6811                                  ;	EXIT	none
  6812                                  ;	USES	all
  6813                                  
  6814                                  _$SET_VERIFY_ON_WRITE:
  6815                                  
  6816 00001A1C 2401                    	AND	AL,1
  6817                                  ;hkn; SS override
  6818 00001A1E 36A2[AD02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6819                                  RET27:	; 18/07/2018
  6820 00001A22 C3                      	retn
  6821                                  
  6822                                  ; 19/07/2018 - Retro DOS v3.0
  6823                                  
  6824                                  ;BREAK <$International - return country-dependent information>
  6825                                  
  6826                                  ;----------------------------------------------------------------------------
  6827                                  ;
  6828                                  ; Procedure Name : $INTERNATIONAL
  6829                                  ;
  6830                                  ; Inputs:
  6831                                  ;	MOV	AH,International
  6832                                  ;	MOV	AL,country	(al = 0 => current country)
  6833                                  ;      [MOV	BX,country]
  6834                                  ;	LDS	DX,block
  6835                                  ;	INT	21
  6836                                  ; Function:
  6837                                  ;	give users an idea of what country the application is running
  6838                                  ; Outputs:
  6839                                  ;	IF DX != -1 on input (get country)
  6840                                  ;	  AL = 0 means return current country table.
  6841                                  ;	  0<AL<0FFH means return country table for country AL
  6842                                  ;	  AL = 0FF means return country table for country BX
  6843                                  ;	  No Carry:
  6844                                  ;	     Register BX will contain the 16-bit country code.
  6845                                  ;	     Register AL will contain the low 8 bits of the country code.
  6846                                  ;	     The block pointed to by DS:DX is filled in with the information
  6847                                  ;	     for the particular country.
  6848                                  ;		BYTE  Size of this table excluding this byte and the next
  6849                                  ;		BYTE  Country code represented by this table
  6850                                  ;			A sequence of n bytes, where n is the number specified
  6851                                  ;			by the first byte above and is not > internat_block_max,
  6852                                  ;			in the correct order for being returned by the
  6853                                  ;			INTERNATIONAL call as follows:
  6854                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6855                                  ;		5 BYTE	Currency symbol null terminated
  6856                                  ;		2 BYTE	thousands separator null terminated
  6857                                  ;		2 BYTE	Decimal point null terminated
  6858                                  ;		2 BYTE	Date separator null terminated
  6859                                  ;		2 BYTE	Time separator null terminated
  6860                                  ;		1 BYTE	Bit field.  Currency format.
  6861                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6862                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6863                                  ;		1 BYTE	No. of significant decimal digits in currency
  6864                                  ;		1 BYTE	Bit field.  Time format.
  6865                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6866                                  ;		DWORD	Call address of case conversion routine
  6867                                  ;		2 BYTE	Data list separator null terminated.
  6868                                  ;	  Carry:
  6869                                  ;	     Register AX has the error code.
  6870                                  ;	IF DX = -1 on input (set current country)
  6871                                  ;	  AL = 0 is an error
  6872                                  ;	  0<AL<0FFH means set current country to country AL
  6873                                  ;	  AL = 0FF means set current country to country BX
  6874                                  ;	  No Carry:
  6875                                  ;	    Current country SET
  6876                                  ;	    Register AL will contain the low 8 bits of the country code.
  6877                                  ;	  Carry:
  6878                                  ;	     Register AX has the error code.
  6879                                  ;-----------------------------------------------------------------------------
  6880                                  
  6881                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6882                                  
  6883                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6884                                  	 
  6885 00001A23 3CFF                    	CMP	AL,0FFH
  6886 00001A25 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6887 00001A27 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6888 00001A29 30FF                    	XOR	BH,BH
  6889                                  BX_HAS_CODE:
  6890 00001A2B 1E                      	PUSH	DS
  6891 00001A2C 07                      	POP	ES
  6892 00001A2D 52                      	PUSH	DX
  6893 00001A2E 5F                      	POP	DI			; User buffer to ES:DI
  6894                                  
  6895                                  ;hkn; SS is DOSDATA
  6896                                  ;	context DS
  6897                                  
  6898 00001A2F 16                      	push	ss
  6899 00001A30 1F                      	pop	ds
  6900                                  
  6901 00001A31 83FFFF                  	CMP	DI,-1
  6902 00001A34 745F                    	JZ	short international_set
  6903 00001A36 09DB                    	OR	BX,BX
  6904 00001A38 7505                    	JNZ	short international_find
  6905                                  
  6906                                  ;hkn; country_cdpg is in DOSDATA segment.
  6907 00001A3A BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6908                                  
  6909 00001A3D EB40                    	JMP	SHORT international_copy
  6910                                  
  6911                                  international_find:
  6912 00001A3F BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6913 00001A42 E80B00                  	CALL	international_get
  6914 00001A45 7256                    	JC	short errtn
  6915 00001A47 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6916 00001A4A 7533                    	JNZ	SHORT international_copy ; no, copy by myself
  6917 00001A4C 89D3                    	MOV	BX,DX			 ; put country back
  6918 00001A4E EB3A                    	JMP	SHORT international_ok3
  6919                                  
  6920                                  international_get:
  6921                                  
  6922                                  ;hkn; country_cdpg is in DOSDATA segment.
  6923                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6924 00001A50 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6925                                  
  6926                                  	; MSDOS 6.0
  6927                                  	;CMP	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6928                                  	;retz				 ; return if equal
  6929                                  
  6930                                  	; MSDOS 3.3
  6931                                  	;cmp	bx,[SI+63h]
  6932 00001A53 3B5C63                  	CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6933 00001A56 74CA                    	jz	short RET27
  6934                                  
  6935 00001A58 89DA                    	MOV	DX,BX
  6936 00001A5A 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6937                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6938                                  
  6939 00001A5C B80014                  	mov	ax,1400h
  6940 00001A5F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6941                                  			; Return: AL = 00h not installed, OK to install
  6942                                  			; 01h not installed, not OK
  6943                                  			; FFh installed
  6944                                  	
  6945 00001A61 3CFF                    	CMP	AL,0FFH
  6946 00001A63 7516                    	JNZ	short interr		; not in memory
  6947                                  	;cmp	bp,0
  6948 00001A65 09ED                    	or	bp,bp			; GetCntry ?
  6949 00001A67 7507                    	JNZ	short stcdpg
  6950                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6951                                  
  6952 00001A69 B80414                  	mov     ax,1404h
  6953 00001A6C CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6954                                  			; BX = code page, DX = country code,
  6955                                  			; DS:SI -> internal code page structure
  6956                                  			; ES:DI -> user buffer
  6957                                  			; Return: AL = status
  6958                                  
  6959 00001A6E EB05                    	JMP	short chkok
  6960                                  	
  6961                                  	;nop
  6962                                  
  6963                                  stcdpg:
  6964                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6965                                  
  6966 00001A70 B80314                  	mov     ax,1403h
  6967 00001A73 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6968                                  			; DS:SI -> internal code page structure
  6969                                  			; BX = code page, DX = country code
  6970                                  			; Return: AL = status
  6971                                  chkok:
  6972 00001A75 08C0                    	or	al,al			; success ?
  6973                                  	;retz				; yes
  6974 00001A77 74A9                    	jz	short RET27
  6975                                  
  6976                                  setcarry:
  6977 00001A79 F9                      	STC				; set carry
  6978 00001A7A C3                      	retn
  6979                                  interr:
  6980 00001A7B B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6981 00001A7D EBFA                    	JMP	short setcarry
  6982                                  
  6983                                  international_copy:
  6984                                  
  6985                                  ;hkn; country_cdpg is in DOSDATA segment.
  6986                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6987                                  	; MSDOS 6.0
  6988                                  	;MOV	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6989                                  	;MOV	SI,OFFSET DOSDATA:COUNTRY_CDPG.ccDFormat
  6990                                  
  6991                                  	; MSDOS 3.3
  6992                                  	;mov	bx,[SI+63h]
  6993 00001A7F 8B5C63                  	mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  6994 00001A82 BE[6410]                	mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  6995                                  
  6996                                  	;mov	cx,24
  6997 00001A85 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  6998                                  
  6999                                  	; MSDOS 6.0
  7000                                  ;hkn;	must set up DS to SS so that international info can be copied
  7001                                  	;push	ds
  7002                                  	;push	ss					; cs -> ss
  7003                                  	;pop	ds
  7004                                  
  7005 00001A88 F3A4                    	REP	MOVSB			;copy country info
  7006                                  
  7007                                  	; MSDOS 6.0
  7008                                  ;hkn;	restore ds
  7009                                  	;pop	ds
  7010                                  
  7011                                  international_ok3:
  7012 00001A8A E87EFB                  	call	Get_User_Stack
  7013                                  ;ASSUME	DS:NOTHING
  7014                                  	;MOV	[SI+2],BX
  7015 00001A8D 895C02                  	MOV	[SI+user_env.user_BX],BX
  7016                                  international_ok:
  7017 00001A90 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7018 00001A92 E968FC                  	jmp	SYS_RET_OK
  7019                                  
  7020                                  international_set:
  7021                                  
  7022                                  ;hkn; ASSUME	DS:DOSGROUP
  7023                                  ;ASSUME	DS:DOSDATA
  7024                                  
  7025 00001A95 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7026 00001A98 E8B5FF                  	CALL	international_get
  7027 00001A9B 73F3                    	JNC	short international_ok
  7028                                  errtn:
  7029 00001A9D 3CFF                    	CMP	AL,0FFH
  7030 00001A9F 7403                    	JZ	short errtn2
  7031                                  errtn1:
  7032 00001AA1 E962FC                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7033                                  errtn2:
  7034                                  	;error	error_invalid_function	; NLSFUNC not existent
  7035                                  
  7036                                  	;mov	al,1
  7037 00001AA4 B001                    	mov	al,error_invalid_function 
  7038                                  	;jmp	short errtn1
  7039                                  errtn3:
  7040 00001AA6 E95DFC                  	jmp	SYS_RET_ERR
  7041                                  
  7042                                  ;EndProc $INTERNATIONAL
  7043                                  
  7044                                  ; 19/07/2018
  7045                                  
  7046                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7047                                  
  7048                                  ;---------------------------------------------------------------------------
  7049                                  ;
  7050                                  ; Procedure Name : $GetExtCntry
  7051                                  ;
  7052                                  ; Inputs:
  7053                                  ;	if AL >= 20H
  7054                                  ;	  AL= 20H    capitalize single char, DL= char
  7055                                  ;	      21H    capitalize string, CX= string length
  7056                                  ;	      22H    capitalize ASCIIZ string
  7057                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7058                                  ;	      80H bit 0 = use normal upper case table
  7059                                  ;		      1 = use file upper case table
  7060                                  ;	   DS:DX points to string
  7061                                  ;
  7062                                  ;	else
  7063                                  ;
  7064                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7065                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7066                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7067                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7068                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7069                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7070                                  ;	INT	21
  7071                                  ; Function:
  7072                                  ;	give users extended country dependent information
  7073                                  ;	or capitalize chars
  7074                                  ; Outputs:
  7075                                  ;	  No Carry:
  7076                                  ;	     extended country info is succesfully returned
  7077                                  ;	  Carry:
  7078                                  ;	     Register AX has the error code.
  7079                                  ;	     AX=0, NO	 for YES/NO CHECK
  7080                                  ;		1, YES
  7081                                  ;-------------------------------------------------------------------------------
  7082                                  
  7083                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7084                                  
  7085                                  	; MSDOS 6.0
  7086                                  _$GetExtCntry:
  7087 00001AA9 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7088 00001AAB 7264                    	JB	short notcap
  7089                                  capcap: 				;
  7090 00001AAD A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7091 00001AAF 7505                    	JNZ	short fileupper		; file upper case
  7092                                  
  7093                                  ;hkn; UCASE_TAB in DOSDATA
  7094 00001AB1 BB[8810]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7095                                  
  7096 00001AB4 EB05                    	JMP	SHORT capit
  7097                                  
  7098                                  fileupper:
  7099                                  	; 16/01/2024 (MSDOS 3.3-6.22 MSDOS.SYS has a bug here)
  7100                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7101                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7102                                  	; AL >= 80h
  7103 00001AB6 247F                    	and	al,7Fh
  7104                                  
  7105                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7106 00001AB8 BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7107                                  capit:					;
  7108 00001ABB 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7109 00001ABD 750D                    	JNZ	short chkyes		; no
  7110 00001ABF 88D0                    	MOV	AL,DL			; set up AL
  7111 00001AC1 E86A3B                  	call	GETLET3 		; upper case it
  7112 00001AC4 E844FB                  	call	Get_User_Stack		; get user stack
  7113 00001AC7 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7114 00001ACA EB1C                    	JMP	SHORT nono		; done
  7115                                  chkyes: 				;
  7116 00001ACC 3C23                    	CMP	AL,CHECK_YES_NO		; check YES or NO ?
  7117 00001ACE 751B                    	JNZ	short capstring		; no
  7118 00001AD0 31C0                    	XOR	AX,AX			; presume NO
  7119                                  		      
  7120                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7121                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7122                                  
  7123                                  	; 06/08/2018 - Retro DOS v3.0
  7124                                  	;CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7125 00001AD2 80FA59                  	cmp	DL,'Y'
  7126 00001AD5 7410                    	JZ	short yesyes		; yes
  7127                                  	;CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7128 00001AD7 80FA79                  	cmp	dl,'y'
  7129 00001ADA 740B                    	JZ	short yesyes		; yes
  7130 00001ADC 80FA4E                  	cmp	dl,'N'
  7131                                  	;CMP	DL,[cs:NLS_NO]		; is  'N'?
  7132 00001ADF 7407                    	JZ	short nono		; no
  7133 00001AE1 80FA6E                  	CMP	DL,'n'
  7134                                  	;CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7135 00001AE4 7402                    	JZ	short nono		; no
  7136                                  ;dbcs_char:				;
  7137 00001AE6 40                      	INC	AX			; not YES or NO
  7138                                  yesyes: 				;
  7139 00001AE7 40                      	INC	AX			; return 1
  7140                                  nono:					;
  7141 00001AE8 E912FC                  	jmp	SYS_RET_OK		; done
  7142                                  capstring:				;
  7143 00001AEB 89D6                    	MOV	SI,DX			; si=dx
  7144 00001AED 3C21                    	CMP	AL,CAP_STRING		; cap string ?
  7145 00001AEF 750F                    	JNZ	short capascii		; no
  7146 00001AF1 09C9                    	OR	CX,CX			; check count 0
  7147 00001AF3 74F3                    	JZ	short nono		; yes finished
  7148                                  concap: 				;
  7149 00001AF5 AC                      	LODSB				; get char
  7150 00001AF6 E8353B                  	call	GETLET3 		; upper case it
  7151 00001AF9 8844FF                  	MOV	byte [SI-1],AL		; store back
  7152                                  next99: 				;
  7153 00001AFC E2F7                    	LOOP	concap			; continue
  7154 00001AFE EBE8                    	JMP	short nono		; done
  7155                                  capascii:				;
  7156 00001B00 3C22                    	CMP	AL,CAP_ASCIIZ		; cap ASCIIZ string ?
  7157 00001B02 7545                    	JNZ	short capinval		; no
  7158                                  concap2:				;
  7159 00001B04 AC                      	LODSB				; get char
  7160 00001B05 08C0                    	or	al,al			; end of string ?
  7161 00001B07 74DF                    	JZ	short nono		; yes
  7162 00001B09 E8223B                  	call	GETLET3 		; upper case it
  7163 00001B0C 8844FF                  	MOV	[SI-1],AL		; store back
  7164 00001B0F EBF3                    	JMP	short concap2 		; continue
  7165                                  
  7166                                  	; MSDOS 3.3 ($ MSDOS 6.0)
  7167                                  
  7168                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7169                                  ; _$GetExtCntry:
  7170                                  
  7171                                  notcap:
  7172 00001B11 83F905                  	CMP	CX,5			; minimum size is 5
  7173 00001B14 7279                    	jb	short sizeerror
  7174                                  
  7175                                  GEC_CONT:
  7176                                  ;hkn; SS is DOSDATA
  7177                                  	;context DS
  7178                                  
  7179 00001B16 16                      	push	ss
  7180                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7181 00001B17 1F                      	pop	ds  ; 17/05/2019 - BugFix
  7182                                  	
  7183                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7184 00001B18 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7185                                  
  7186 00001B1B 83FAFF                  	CMP	DX,-1			; active country ?
  7187 00001B1E 7503                    	JNZ	short GETCDPG 		; no
  7188                                  
  7189                                  ;hkn; use DS override to accesss country_cdpg fields
  7190                                  	;mov	dx,[si+63h]
  7191 00001B20 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7192                                  					; get active country id;smr;use DS
  7193                                  GETCDPG:
  7194 00001B23 83FBFF                  	CMP	BX,-1			; active code page?
  7195 00001B26 7503                    	JNZ	short CHKAGAIN		; no, check again
  7196                                  
  7197                                  ;hkn; use DS override to accesss country_cdpg fields
  7198                                  	;mov	bx,[si+65h]
  7199 00001B28 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7200                                  					; get active code page id;smr;Use DS
  7201                                  CHKAGAIN:
  7202                                  	;cmp	dx,[si+63h]
  7203 00001B2B 3B5463                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7204                                  					; same as active country id?;smr;use DS
  7205 00001B2E 7552                    	JNZ	short CHKNLS		; no
  7206                                  	;cmp	bx,[si+65h]
  7207 00001B30 3B5C65                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7208                                  					; same as active code pg id?;smr;use DS
  7209 00001B33 754D                    	JNZ	short CHKNLS		; no
  7210                                  CHKTYPE:
  7211                                  	;mov	bx,[si+48h]
  7212 00001B35 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7213                                  					; bx = sys code page id;smr;use DS
  7214                                  ;	CMP	AL,SetALL		; select all?
  7215                                  ;	JNZ	short SELONE
  7216                                  ;	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccNumber_of_entries
  7217                                  ;SELONE:
  7218 00001B38 51                      	PUSH	CX			; save cx
  7219                                  	;mov	cx,[si+4Ah]
  7220 00001B39 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]	;smr;use DS
  7221 00001B3C BE[4910]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7222                                  NXTENTRY:
  7223 00001B3F 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7224 00001B41 740B                    	JZ	short FOUNDIT
  7225 00001B43 83C605                  	ADD	SI,5			; next entry
  7226 00001B46 E2F7                    	LOOP	NXTENTRY
  7227 00001B48 59                      	POP	CX
  7228                                  capinval:
  7229                                  	;error	error_invalid_function	; info type not found
  7230                                  	;mov	al,1
  7231 00001B49 B001                    	mov	al,error_invalid_function
  7232 00001B4B E9B8FB                  	jmp	SYS_RET_ERR
  7233                                  
  7234                                  FOUNDIT:
  7235 00001B4E A4                      	MOVSB				; move info id byte
  7236 00001B4F 59                      	POP	CX			; retsore char count
  7237                                  	;cmp	al,1
  7238 00001B50 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7239 00001B52 7415                    	JZ	short setsize
  7240 00001B54 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7241 00001B57 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7242                                  OK_RETN:
  7243 00001B5A F3A4                    	REP	MOVSB			; copy info
  7244 00001B5C 89C1                    	MOV	CX,AX			; CX = actual length returned
  7245 00001B5E 89D8                    	MOV	AX,BX			; return sys code page in ax
  7246                                  GETDONE:
  7247 00001B60 E8A8FA                  	call	Get_User_Stack		; return actual length to user's CX
  7248                                  	;mov	[si+4],cx 
  7249 00001B63 894C04                  	MOV	[SI+user_env.user_CX],CX
  7250                                  	; 26/07/2019
  7251                                  	;jmp	SYS_RET_OK
  7252 00001B66 E997FB                  	jmp	SYS_RET_OK_clc
  7253                                  setsize:
  7254 00001B69 83E903                  	SUB	CX,3			; size after length field
  7255 00001B6C 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7256 00001B6E 7302                    	JAE	short setsize2		; no
  7257 00001B70 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7258                                  setsize2:
  7259 00001B72 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7260 00001B75 83C702                  	ADD	DI,2			; update index
  7261 00001B78 83C602                  	ADD	SI,2
  7262 00001B7B 89C8                    	MOV	AX,CX
  7263 00001B7D 83C003                  	ADD	AX,3			; AX has the actual length
  7264 00001B80 EBD8                    	JMP	short OK_RETN 		; go move it
  7265                                  CHKNLS:
  7266 00001B82 30E4                    	XOR	AH,AH
  7267 00001B84 50                      	PUSH	AX			; save info type
  7268 00001B85 5D                      	POP	BP			; bp = info type
  7269                                  	
  7270                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7271                                  
  7272 00001B86 B80014                  	mov     ax, 1400h
  7273 00001B89 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7274                                  			; Return: AL = 00h not installed, OK to install
  7275                                  			; 01h not installed, not OK
  7276                                  			; FFh installed
  7277                                  	
  7278 00001B8B 3CFF                    	CMP	AL,0FFH
  7279 00001B8D 7405                    	JZ	short NLSNXT		; in memory
  7280                                  
  7281                                  sizeerror:
  7282                                  	;error	error_invalid_function
  7283                                  	;mov	al,1
  7284 00001B8F B001                    	mov	al,error_invalid_function
  7285 00001B91 E972FB                  	jmp	SYS_RET_ERR
  7286                                  
  7287                                  NLSNXT: 
  7288                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7289                                  
  7290 00001B94 B80214                  	mov     ax, 1402h
  7291 00001B97 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7292                                  			; BP = subfunction, BX = code page
  7293                                  			; DX = country code, DS:SI -> internal code page structure
  7294                                  			; ES:DI -> user buffer, CX = size of user buffer
  7295                                  			; Return: AL = status
  7296                                  			; 00h successful
  7297                                  			; else DOS error code
  7298                                  
  7299 00001B99 3C00                    	CMP	AL,0			; success ?
  7300 00001B9B 7508                    	JNZ	short NLSERROR
  7301 00001B9D 8B4448                  	mov     ax,[si+48h]
  7302 00001BA0 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7303                                  			; ax = sys code page id;smr;use ds;
  7304                                  			;BUGBUG;check whether DS is OK after the above calls
  7305 00001BA3 EBBB                    	JMP	short GETDONE
  7306                                  NLSERROR:
  7307 00001BA5 E95EFB                  	jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7308                                  
  7309                                  ;EndProc $GetExtCntry
  7310                                  
  7311                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7312                                  
  7313                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7314                                  ;
  7315                                  ;   System call format:
  7316                                  ;
  7317                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7318                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7319                                  ;	MOV	BX,CODE_PAGE	( set code page only)
  7320                                  ;	INT	21
  7321                                  ;
  7322                                  ;	ENTRY	(al) = n
  7323                                  ;		(bx) = code page
  7324                                  ;	EXIT	'C' clear
  7325                                  ;		  global code page is set	(set global code page)
  7326                                  ;		  (BX) = active code page id	(get global code page)
  7327                                  ;		  (DX) = system code page id	(get global code page)
  7328                                  ;		'C' set
  7329                                  ;		  (AX) = error code
  7330                                  
  7331                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7332                                  
  7333                                  _$GetSetCdPg:
  7334                                  
  7335                                  ;hkn; SS is DOSDATA
  7336                                  	;context DS
  7337                                  
  7338 00001BA8 16                      	push	ss
  7339 00001BA9 1F                      	pop	ds
  7340                                  
  7341                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7342 00001BAA BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7343                                  
  7344 00001BAD 3C01                    	CMP	AL,1		       ; get global code page
  7345 00001BAF 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7346                                  	;mov	bx,[si+65h]
  7347 00001BB1 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7348                                  					; get active code page id;smr;use ds
  7349                                  	;mov	dx,[si+48h]
  7350 00001BB4 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7351                                  				  	; get sys code page id;smr;use ds
  7352 00001BB7 E851FA                  	call	Get_User_Stack
  7353                                  ;ASSUME DS:NOTHING
  7354                                  	;mov	[si+2],bx
  7355 00001BBA 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7356                                  	;mov	[si+6],dx
  7357 00001BBD 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7358                                  OK_RETURN:
  7359                                  	;transfer SYS_RET_OK
  7360 00001BC0 E93AFB                  	jmp	SYS_RET_OK
  7361                                  
  7362                                  ;hkn; ASSUME DS:DOSGROUP
  7363                                  ;ASSUME	DS:DOSDATA
  7364                                  
  7365                                  setglpg:
  7366 00001BC3 3C02                    	CMP	AL,2
  7367 00001BC5 7534                    	JNZ	short nomem
  7368                                  ;;;;;;; CMP	BX,[SI+DOS_CCDPG.ccDosCodePage] ; same as active code page
  7369                                  ;;;;;;; JZ	short OK_RETURN		; yes
  7370                                  	;mov	dx,[si+63h]
  7371 00001BC7 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7372                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7373 00001BCA B80014                  	mov     ax, 1400h
  7374 00001BCD CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7375                                  			; Return: AL = 00h not installed, OK to install
  7376                                  			; 01h not installed, not OK
  7377                                  			; FFh installed
  7378 00001BCF 3CFF                    	CMP	AL,0FFH
  7379 00001BD1 7528                    	JNZ	short nomem		; not in memory
  7380                                  	;CallInstall SetCodePage,NLSFUNC,1  ;set the code page
  7381 00001BD3 B80114                  	mov     ax, 1401h
  7382 00001BD6 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7383                                  			; DS:SI -> internal code page structure
  7384                                  			; BX = new code page, DX = country code???
  7385                                  			; Return: AL = status
  7386                                  			; 00h successful
  7387                                  			; else DOS error code
  7388                                  	;cmp	al,0
  7389 00001BD8 08C0                    	or	al,al			   ; success ?
  7390 00001BDA 74E4                    	JZ	short OK_RETURN		   ; yes
  7391 00001BDC 3C41                    	CMP	AL,65			   ; set device code page failed
  7392 00001BDE 7518                    	JNZ	short seterr
  7393 00001BE0 B84100                  	MOV	AX,65
  7394 00001BE3 A3[D202]                	MOV	[EXTERR],AX
  7395                                  	;mov	byte [EXTERR_ACTION],6
  7396                                  	;mov	byte [EXTERR_CLASS],5
  7397                                  	;mov	byte [EXTERR_LOCUS],4
  7398 00001BE6 C606[D402]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7399 00001BEB C606[D502]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7400 00001BF0 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7401                                  	;transfer From_GetSet
  7402 00001BF5 E916FB                  	jmp	From_GetSet
  7403                                  
  7404                                  seterr:
  7405                                  	;transfer SYS_RET_ERR
  7406 00001BF8 E90BFB                  	jmp	SYS_RET_ERR
  7407                                  
  7408                                  nomem:
  7409                                  	;error	error_invalid_function ; function not defined
  7410                                  	;mov	al,1
  7411 00001BFB B001                    	mov	al,error_invalid_function
  7412 00001BFD EBF9                    	jmp	short seterr
  7413                                  
  7414                                  ;EndProc $GetSetCdPg
  7415                                  
  7416                                  
  7417                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7418                                  
  7419                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7420                                  ;
  7421                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7422                                  ;		drive.
  7423                                  ;
  7424                                  ;	This call returns the same info in the same registers (except for the
  7425                                  ;	FAT pointer) as the old FAT pointer calls
  7426                                  ;
  7427                                  ;	ENTRY	DL = Drive number
  7428                                  ;	EXIT	AX = Sectors per allocation unit
  7429                                  ;		   = -1 if bad drive specified
  7430                                  ;		On User Stack
  7431                                  ;		    BX = Number of free allocation units
  7432                                  ;		    DX = Total Number of allocation units on disk
  7433                                  ;		    CX = Sector size
  7434                                  
  7435                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7436                                  
  7437                                  _$GET_DRIVE_FREESPACE:
  7438                                  
  7439                                  ;hkn; SS is DOSDATA
  7440                                  	;context DS
  7441 00001BFF 16                      	push	ss
  7442 00001C00 1F                      	pop	ds
  7443                                  
  7444 00001C01 88D0                    	MOV	AL,DL
  7445                                  	;invoke	GetThisDrv		; Get drive
  7446 00001C03 E86C4D                  	call	GETTHISDRV
  7447                                  SET_AX_RET:
  7448 00001C06 7218                    	JC	short BADFDRV
  7449                                  	;invoke	DISK_INFO
  7450 00001C08 E8A21C                  	call	DISK_INFO
  7451 00001C0B 87D3                    	XCHG	DX,BX
  7452 00001C0D 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7453 00001C0F 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7454                                  DoSt:
  7455 00001C11 E8F7F9                  	call	Get_User_Stack
  7456                                  ;ASSUME	DS:NOTHING
  7457                                  	;mov	[si+6],dx
  7458                                  	;mov	[si+4],cx
  7459                                  	;mov	[si+2],bx
  7460 00001C14 895406                  	MOV	[SI+user_env.user_DX],DX
  7461 00001C17 894C04                  	MOV	[SI+user_env.user_CX],CX
  7462 00001C1A 895C02                  	MOV	[SI+user_env.user_BX],BX
  7463                                  	;MOV	[SI+user_env.user_AX],AX
  7464 00001C1D 8904                    	mov     [si],ax
  7465                                  	;return
  7466 00001C1F C3                      	retn
  7467                                  
  7468                                  BADFDRV:
  7469                                  	; MSDOS 3.3
  7470                                  	;mov	al,0Fh
  7471 00001C20 B00F                    	mov	al,error_invalid_drive	; Assume error
  7472                                  
  7473                                  	;invoke	FCB_RET_ERR
  7474 00001C22 E8F7FA                  	call	FCB_RET_ERR
  7475 00001C25 B8FFFF                  	MOV	AX,-1
  7476 00001C28 EBE7                    	JMP	short DoSt
  7477                                  
  7478                                  ;EndProc $GET_DRIVE_FREESPACE
  7479                                  
  7480                                  
  7481                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7482                                  
  7483                                  ;**	$Get_DMA - Get Disk Transfer Address
  7484                                  ;
  7485                                  ;	ENTRY	none
  7486                                  ;	EXIT	ES:BX is current transfer address
  7487                                  ;	USES	all
  7488                                  
  7489                                  _$GET_DMA:
  7490 00001C2A 368B1E[DA02]            	MOV	BX,[SS:DMAADD]
  7491 00001C2F 368B0E[DC02]            	MOV	CX,[SS:DMAADD+2]
  7492 00001C34 E8D4F9                  	call	Get_User_Stack
  7493                                  	;mov	[si+2],bx
  7494                                  	;mov	[si+10h],cx
  7495 00001C37 895C02                  	MOV	[SI+user_env.user_BX],BX
  7496 00001C3A 894C10                  	MOV	[SI+user_env.user_ES],CX
  7497 00001C3D C3                      	retn
  7498                                  
  7499                                  ;**	$Set_DMA - Set Disk Transfer Address
  7500                                  ;
  7501                                  ;	ENTRY	DS:DX is current transfer address
  7502                                  ;	EXIT	none
  7503                                  ;	USES	all
  7504                                  
  7505                                  _$SET_DMA:
  7506 00001C3E 368916[DA02]            	MOV	[SS:DMAADD],DX
  7507 00001C43 368C1E[DC02]            	MOV	[SS:DMAADD+2],DS
  7508 00001C48 C3                      	retn
  7509                                  
  7510                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7511                                  
  7512                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7513                                  ;
  7514                                  ;	ENTRY	none
  7515                                  ;	EXIT	(AL) = drive number
  7516                                  ;	USES	all
  7517                                  
  7518                                  _$GET_DEFAULT_DRIVE:
  7519 00001C49 36A0[E402]              	MOV	AL,[SS:CURDRV]
  7520 00001C4D C3                      	retn
  7521                                  
  7522                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7523                                  ;
  7524                                  ;	ENTRY	(DL) = Drive number for new default drive
  7525                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7526                                  
  7527                                  _$SET_DEFAULT_DRIVE:
  7528 00001C4E 88D0                    	MOV	AL,DL
  7529 00001C50 FEC0                    	INC	AL			; A=1, B=2...
  7530 00001C52 E8064D                  	call	GetVisDrv		; see if visible drive
  7531 00001C55 7204                    	JC	short SETRET		; errors do not set
  7532 00001C57 36A2[E402]              	MOV	[SS:CURDRV],AL		; no, set
  7533                                  
  7534                                  SETRET:
  7535 00001C5B 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7536 00001C5F C3                      	retn
  7537                                  
  7538                                  
  7539                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7540                                  
  7541                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7542                                  ;
  7543                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7544                                  ;	contents of an interrupt vector.
  7545                                  ;
  7546                                  ;	ENTRY	(AL) = interrupt number
  7547                                  ;	EXIT	(ES:BX) = current interrupt vector
  7548                                  
  7549                                  _$GET_INTERRUPT_VECTOR:
  7550 00001C60 E81A00                  	CALL	RECSET
  7551 00001C63 26C41F                  	LES	BX,[ES:BX]
  7552 00001C66 E8A2F9                  	call	Get_User_Stack
  7553                                  	;mov	[si+2],bx
  7554                                  	;mov	[si+10h],es
  7555 00001C69 895C02                  	MOV	[SI+user_env.user_BX],BX
  7556 00001C6C 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7557 00001C6F C3                      	retn
  7558                                  
  7559                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7560                                  ;
  7561                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7562                                  ;	contents of an interrupt vector.
  7563                                  ;
  7564                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7565                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7566                                  ;	for explanation.
  7567                                  ;
  7568                                  ;	ENTRY	(AL) = interrupt number
  7569                                  ;		(ds:dx) = desired new vector value
  7570                                  ;	EXIT	none
  7571                                  ;	USES	all
  7572                                  
  7573                                  _$SET_INTERRUPT_VECTOR:
  7574 00001C70 E80A00                  	CALL	RECSET
  7575 00001C73 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7576 00001C74 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7577 00001C77 268C5F02                	MOV	[ES:BX+2],DS
  7578 00001C7B FB                      	STI
  7579                                  					; M004, M068 - Start
  7580                                  	; MSDOS 6.0
  7581                                  	;test	byte [DOS_FLAG],EXECA20OFF
  7582                                  					; Q: was the previous call an int 21
  7583                                  					;    exec call
  7584                                  	;jnz	short siv_1		; Y: go set count
  7585 00001C7C C3                      	retn				; N: return
  7586                                  
  7587                                  ;siv_1:	
  7588                                  	;cmp	byte [A20OFF_COUNT],0	; Q: is count 0
  7589                                  	;jne	short siv_2		; N: done 
  7590                                  	;mov	byte [A20OFF_COUNT],1	; Y: set it to 1 to indicate to dos 
  7591                                  					; dispatcher to turn A20 Off before 
  7592                                  					; returning to user.
  7593                                  ;siv_2:
  7594                                  	;retn				; M004, M068 - End
  7595                                  	
  7596                                  RECSET:
  7597 00001C7D 31DB                    	XOR	BX,BX
  7598 00001C7F 8EC3                    	MOV	ES,BX
  7599 00001C81 88C3                    	MOV	BL,AL
  7600 00001C83 D1E3                    	SHL	BX,1
  7601 00001C85 D1E3                    	SHL	BX,1
  7602 00001C87 C3                      	retn
  7603                                  
  7604                                  
  7605                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7606                                  
  7607                                  ;**	$Char_Oper - Manipulate Switch Character
  7608                                  ;
  7609                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7610                                  ;
  7611                                  ;	ENTRY	AL = function:
  7612                                  ;		    0 - read switch char
  7613                                  ;		    1 - set switch char (char in DL)
  7614                                  ;		    2 - read device availability
  7615                                  ;			Always returns available
  7616                                  ;		    3 - set device availability
  7617                                  ;			No longer supported (NOP)
  7618                                  ;	EXIT	(al) = 0xff iff error
  7619                                  ;		(al) != 0xff if ok
  7620                                  ;		  (dl) = character/flag, iff "read switch char" subfunction
  7621                                  ;	USES	AL, DL
  7622                                  ;
  7623                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7624                                  ;		The character / is always returned for subfunction 0,
  7625                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7626                                  
  7627                                  _$CHAR_OPER:
  7628                                  	; MSDOS 6.0
  7629                                  	;or	al,al				; get switch?
  7630                                  	;mov	dl,'/'				; assume yes
  7631                                  	;jz	short chop_1			; jump if yes
  7632                                  	;cmp	al,2				; check device availability?
  7633                                  	;mov	dl,-1				; assume yes
  7634                                  	;jz	short chop_1				; jump if yes
  7635                                  	;retn					; otherwise just quit
  7636                                  
  7637                                  ; subfunctions requiring return of value to user come here.  DL holds
  7638                                  ; value to return
  7639                                  
  7640                                  ;chop_1:
  7641                                  	;call	Get_User_Stack
  7642                                  	;mov	[SI+user_env.user_DX],dx	; store value for user
  7643                                  	;retn
  7644                                  
  7645                                  	; MSDOS 3.3
  7646                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7647 00001C88 16                      	push    ss
  7648 00001C89 1F                      	pop     ds
  7649 00001C8A 3C01                    	cmp     al, 1
  7650 00001C8C 720B                    	jb      short chop_1
  7651 00001C8E 740F                    	jz      short chop_2
  7652 00001C90 3C03                    	cmp     al, 3
  7653 00001C92 7210                    	jb      short chop_3
  7654 00001C94 7416                    	jz      short chop_5
  7655 00001C96 B0FF                    	mov     al, 0FFh
  7656 00001C98 C3                      	retn
  7657                                  chop_1:
  7658 00001C99 8A16[AF02]              	mov     dl,[chSwitch]
  7659 00001C9D EB07                    	jmp     short chop_4
  7660                                  chop_2:
  7661 00001C9F 8816[AF02]              	mov     [chSwitch], dl
  7662 00001CA3 C3                      	retn
  7663                                  chop_3:
  7664 00001CA4 B2FF                    	mov     dl, 0FFh
  7665                                  chop_4:
  7666 00001CA6 E862F9                  	call    Get_User_Stack
  7667 00001CA9 895406                  	mov     [si+6],dx
  7668                                  chop_5:
  7669 00001CAC C3                      	retn
  7670                                  
  7671                                  
  7672                                  ;**	$GetExtendedError - Return Extended error code
  7673                                  ;
  7674                                  ;	This function reads up the extended error info from the static
  7675                                  ;	variables where it was stored.
  7676                                  ;
  7677                                  ;	ENTRY	none
  7678                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7679                                  ;		BL = recommended action
  7680                                  ;		BH = class of error
  7681                                  ;		CH = locus of error
  7682                                  ;		ES:DI = may be pointer
  7683                                  ;	USES	ALL
  7684                                  
  7685                                  _$GetExtendedError:
  7686 00001CAD 16                      	push	ss
  7687 00001CAE 1F                      	pop	ds
  7688 00001CAF A1[D202]                	MOV	AX,[EXTERR]
  7689 00001CB2 C43E[D602]              	LES	DI,[EXTERRPT]
  7690 00001CB6 8B1E[D402]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7691 00001CBA 8A2E[D102]              	MOV	CH,[EXTERR_LOCUS]
  7692 00001CBE E84AF9                  	call	Get_User_Stack
  7693                                  	;mov	[si+0Ah],di
  7694 00001CC1 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7695                                  	;mov	[si+10h],es
  7696 00001CC4 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7697                                  	;mov	[si+2],bx
  7698 00001CC7 895C02                  	MOV	[SI+user_env.user_BX],BX
  7699                                  	;mov	[si+4],cx
  7700 00001CCA 894C04                  	MOV	[SI+user_env.user_CX],CX
  7701                                  	;jmp	SYS_RET_OK
  7702                                  	; 26/07/2019
  7703 00001CCD E930FA                  	jmp	SYS_RET_OK_clc
  7704                                  
  7705                                  ;============================================================================
  7706                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7707                                  ;============================================================================
  7708                                  ; 19/07/2018 - Retro DOS v3.0
  7709                                  
  7710                                  ; System calls for parsing command lines
  7711                                  ;
  7712                                  ;   $PARSE_FILE_DESCRIPTOR
  7713                                  ;
  7714                                  ;   Modification history:
  7715                                  ;
  7716                                  ;       Created: ARR 30 March 1983
  7717                                  ;               EE PathParse 10 Sept 1983
  7718                                  ;
  7719                                  
  7720                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7721                                  ;---------------------------------------------------------------------------
  7722                                  ; Inputs:
  7723                                  ;       DS:SI Points to a command line
  7724                                  ;       ES:DI Points to an empty FCB
  7725                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7726                                  ;                   = 0 Parse stops if separator encountered
  7727                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7728                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7729                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7730                                  ;                   = 0  "       "      "       - put blanks in FCB
  7731                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7732                                  ;                   = 0  "       "      "        - put blanks in FCB
  7733                                  ; Function:
  7734                                  ;       Parse command line into FCB
  7735                                  ; Returns:
  7736                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7737                                  ;       DS:SI points to first character after filename
  7738                                  ;---------------------------------------------------------------------------
  7739                                  
  7740                                  _$PARSE_FILE_DESCRIPTOR:
  7741 00001CD0 E85538                  	call	MAKEFCB
  7742 00001CD3 56                      	PUSH    SI
  7743 00001CD4 E834F9                  	call	Get_User_Stack
  7744                                  	;pop	word [si+8]
  7745 00001CD7 8F4408                  	POP     word [SI+user_env.user_SI]
  7746 00001CDA C3                      	retn
  7747                                  
  7748                                  ;============================================================================
  7749                                  ; MISC.ASM, MSDOS 6.0, 1991
  7750                                  ;============================================================================
  7751                                  ; 19/07/2018 - Retro DOS v3.0
  7752                                  
  7753                                  ;ENTRYPOINTSEG	EQU	0CH
  7754                                  ;MAXDIF		EQU	0FFFH
  7755                                  ;SAVEXIT 	EQU	10
  7756                                  ;WRAPOFFSET	EQU	0FEF0h
  7757                                  
  7758                                  ;
  7759                                  ;----------------------------------------------------------------------------
  7760                                  ;
  7761                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7762                                  ;
  7763                                  ;	Return Stuff sort of like old get fat call
  7764                                  ;
  7765                                  ;	ENTRY	none
  7766                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7767                                  ;			GOD help anyone who tries to do ANYTHING except
  7768                                  ;			READ this ONE byte.
  7769                                  ;		DX = Total Number of allocation units on disk
  7770                                  ;		CX = Sector size
  7771                                  ;		AL = Sectors per allocation unit
  7772                                  ;		   = -1 if bad drive specified
  7773                                  ;	USES	all
  7774                                  ;
  7775                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7776                                  ;
  7777                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7778                                  ;
  7779                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7780                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7781                                  ;			GOD help anyone who tries to do ANYTHING except
  7782                                  ;			READ this ONE byte.
  7783                                  ;		DX = Total Number of allocation units on disk
  7784                                  ;		CX = Sector size
  7785                                  ;		AL = Sectors per allocation unit
  7786                                  ;		   = -1 if bad drive specified
  7787                                  ;	USES	all
  7788                                  ;
  7789                                  ;----------------------------------------------------------------------------
  7790                                  ;
  7791                                  
  7792                                  _$SLEAZEFUNC:
  7793 00001CDB B200                    	MOV	DL,0
  7794                                  
  7795                                  _$SLEAZEFUNCDL:
  7796 00001CDD 16                      	push	ss
  7797 00001CDE 1F                      	pop	ds
  7798                                  	
  7799 00001CDF 88D0                    	MOV	AL,DL
  7800 00001CE1 E88E4C                  	call	GETTHISDRV		; Get CDS structure
  7801                                  SET_AL_RET:
  7802                                  	; MSDOS 3.3
  7803                                  	;mov	al, 0Fh
  7804 00001CE4 B00F                    	MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7805                                  
  7806 00001CE6 721E                    	JC	short BADSLDRIVE
  7807                                  
  7808 00001CE8 E8C21B                  	call	DISK_INFO
  7809 00001CEB 72F7                    	JC	short SET_AL_RET	; User FAILed to I 24
  7810 00001CED 8826[3005]              	MOV	[FATBYTE],AH
  7811                                  
  7812                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7813                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7814                                  ; CALL AGAIN
  7815                                  
  7816 00001CF1 BF[3005]                	MOV	DI,FATBYTE
  7817 00001CF4 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7818 00001CF6 E812F9                  	call	Get_User_Stack
  7819                                  	;mov	[si+4],cx
  7820                                  	;mov	[si+6],bx
  7821                                  	;mov	[si+2],di
  7822 00001CF9 894C04                  	MOV	[SI+user_env.user_CX],CX
  7823 00001CFC 895C06                  	MOV	[SI+user_env.user_DX],BX
  7824 00001CFF 897C02                  	MOV	[SI+user_env.user_BX],DI
  7825                                  	
  7826                                  	;mov	[si+0Eh],cs
  7827                                  	;mov	[SI+user_env.user_DS],SS
  7828 00001D02 8C4C0E                  	MOV     [SI+user_env.user_DS],CS ; stash correct pointer
  7829                                  
  7830 00001D05 C3                      	retn
  7831                                  
  7832                                  BADSLDRIVE:
  7833 00001D06 E913FA                  	jmp	FCB_RET_ERR
  7834                                  
  7835                                  ;
  7836                                  ;----------------------------------------------------------------------------
  7837                                  ;
  7838                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  7839                                  ;
  7840                                  ;	Returns location of DOS status for interrupt routines
  7841                                  ;									   ;
  7842                                  ;	ENTRY	none
  7843                                  ;	EXIT	(es:bx) = flag location
  7844                                  ;	USES	all
  7845                                  ;
  7846                                  ;----------------------------------------------------------------------------
  7847                                  ;
  7848                                  
  7849                                  _$GET_INDOS_FLAG:
  7850 00001D09 E8FFF8                          CALL	Get_User_Stack
  7851                                          ;MOV	WORD [SI+2],INDOS
  7852 00001D0C C74402[CF02]            	MOV     word [SI+user_env.user_BX],INDOS
  7853                                          ;MOV	[SI+10H],SS
  7854 00001D11 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7855 00001D14 C3                      	RETN 
  7856                                  
  7857                                  ;
  7858                                  ;----------------------------------------------------------------------------
  7859                                  ;
  7860                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  7861                                  ;
  7862                                  ;	Return a pointer to interesting DOS variables This call is version
  7863                                  ;	dependent and is subject to change without notice in future versions.
  7864                                  ;	Use at risk.
  7865                                  ;
  7866                                  ;	ENTRY	none
  7867                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  7868                                  ;	uses	ALL
  7869                                  ;
  7870                                  ;----------------------------------------------------------------------------
  7871                                  ;
  7872                                  
  7873                                  _$GET_IN_VARS:
  7874 00001D15 E8F3F8                          CALL	Get_User_Stack
  7875                                          ;MOV	WORD [SI+2],SYSINITVAR
  7876                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  7877 00001D18 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  7878                                          ;MOV	[SI+10H],SS
  7879 00001D1D 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7880 00001D20 C3                      	RETN
  7881                                  
  7882                                  ;
  7883                                  ;----------------------------------------------------------------------------
  7884                                  ;
  7885                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  7886                                  ;
  7887                                  ;	Return pointer to drive parameter table for default drive
  7888                                  ;
  7889                                  ;	ENTRY	none
  7890                                  ;	EXIT	(ds:bx) = DPB address
  7891                                  ;	USES	all
  7892                                  ;
  7893                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  7894                                  ;
  7895                                  ;	Return pointer to a specified drive parameter table
  7896                                  ;
  7897                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  7898                                  ;	EXIT	(al) = 0 iff ok
  7899                                  ;		  (ds:bx) = DPB address
  7900                                  ;		(al) = -1 if bad drive
  7901                                  ;	USES	all
  7902                                  ;
  7903                                  ;----------------------------------------------------------------------------
  7904                                  ;
  7905                                  
  7906                                  _$GET_DEFAULT_DPB:
  7907 00001D21 B200                    	MOV	DL,0
  7908                                  _$GET_DPB:
  7909 00001D23 16                      	push	ss
  7910 00001D24 1F                      	pop	ds
  7911                                  
  7912 00001D25 88D0                    	MOV	AL,DL
  7913 00001D27 E8484C                  	call	GETTHISDRV		; Get CDS structure
  7914 00001D2A 7223                    	JC	short ISNODRV 		; no valid drive
  7915 00001D2C C43E[3A05]              	LES	DI,[THISCDS]		; check for net CDS
  7916                                  	;test	word [es:di+43h],8000h
  7917 00001D30 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  7918 00001D36 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  7919 00001D38 E82A03                  	call	EcritDisk
  7920 00001D3B E87E3E                  	call	FATREAD_CDS		; Force Media Check and return DPB
  7921 00001D3E E82C03                  	call	LcritDisk
  7922 00001D41 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  7923                                  					;   have.
  7924 00001D43 E8C5F8                  	call	Get_User_Stack
  7925                                  	;mov	[si+2],bp
  7926                                  	;mov	[si+0Eh],es
  7927 00001D46 896C02                  	MOV	[SI+user_env.user_BX],BP
  7928 00001D49 8C440E                  	MOV	[SI+user_env.user_DS],ES
  7929 00001D4C 30C0                    	XOR	AL,AL
  7930 00001D4E C3                      	retn
  7931                                  ISNODRV:
  7932 00001D4F B0FF                    	MOV	AL,-1
  7933 00001D51 C3                      	retn
  7934                                  
  7935                                  ;
  7936                                  ;----------------------------------------------------------------------------
  7937                                  ;
  7938                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  7939                                  ;
  7940                                  ;	$DiskReset flushes and invalidates all buffers. BUGBUG - do
  7941                                  ;		we really invalidate? SHould we? THis screws non-removable
  7942                                  ;		caching. Maybe CHKDSK relies upon it, though....
  7943                                  ;
  7944                                  ;	ENTRY	none
  7945                                  ;	EXIT	none
  7946                                  ;	USES	all
  7947                                  ;
  7948                                  ;----------------------------------------------------------------------------
  7949                                  ;
  7950                                  
  7951                                  _$DISK_RESET:
  7952 00001D52 16                      	push	ss
  7953 00001D53 1F                      	pop	ds
  7954 00001D54 B0FF                    	MOV	AL,-1
  7955 00001D56 E80C03                  	call	EcritDisk
  7956                                  	; MSDOS 6.0
  7957                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  7958 00001D59 E8D241                  	call	FLUSHBUF
  7959                                  	; MSDOS 6.0
  7960                                  	;AND	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  7961                                  	;mov	word [SC_STATUS],0	; Throw out secondary cache M041
  7962                                  ;
  7963                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  7964                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  7965                                  ; let's do it.
  7966                                  ;
  7967                                  ; Invalidate 'last-buffer' used
  7968                                  ;
  7969 00001D5C BBFFFF                  	MOV	BX,-1
  7970 00001D5F 891E[2000]              	MOV	[LastBuffer+2],BX
  7971 00001D63 891E[1E00]              	MOV	[LastBuffer],BX
  7972                                  
  7973                                  	; MSDOS 3.3 
  7974                                  	; IBMDOS.COM, Offset 1C66h
  7975                                  	;;;;
  7976 00001D67 C536[3800]              	lds     si,[BUFFHEAD]
  7977 00001D6B B8FF20                  	mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  7978                                  				; .buf_flags, AH = 0, reset/clear
  7979                                  DRST_1:
  7980                                  	; 25/07/2019 - Retro DOS v3.2
  7981                                  	;;mov	[si+4],ax
  7982                                  	;mov	[si+BUFFINFO.buf_ID],ax
  7983                                  	;lds	si,[SI]
  7984                                  	;cmp	si,bx ; -1
  7985                                  	;je	short DRST_2
  7986                                  
  7987                                  	;mov	[si+4],ax
  7988 00001D6E 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  7989 00001D71 C534                    	lds	si,[SI]
  7990 00001D73 39DE                    	cmp	si,bx
  7991 00001D75 75F7                    	jne	short DRST_1
  7992                                  	;;;;
  7993                                  DRST_2:
  7994 00001D77 E8F302                  	call	LcritDisk
  7995                                  
  7996                                  	; 20/05/2019
  7997                                  	;MOV	AX,-1
  7998                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  7999                                  	;mov	ax,0FFFFh
  8000                                  
  8001 00001D7A B82011                  	mov     ax,1120h
  8002 00001D7D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8003                                  			; DS = DOS CS
  8004                                  			; Return: CF clear (successful)
  8005 00001D7F C3                      	retn
  8006                                  
  8007                                  	; 19/07/2018 - Retro DOS v3.0
  8008                                  
  8009                                  ;
  8010                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8011                                  ;
  8012                                  ;----------------------------------------------------------------------------
  8013                                  ;
  8014                                  ;**	$SetDPB - Create a DPB
  8015                                  ;
  8016                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8017                                  ;
  8018                                  ;	ENTRY	ES:BP Points to DPB
  8019                                  ;		DS:SI Points to BPB
  8020                                  ;	EXIT	DPB setup
  8021                                  ;	USES	ALL but BP, DS, ES
  8022                                  ;
  8023                                  ;----------------------------------------------------------------------------
  8024                                  ;
  8025                                  
  8026                                  ; MSDOS 6.0
  8027 00001D80 0300                    word3:	dw	3			; M008 -- word value for divides
  8028                                  
  8029                                  ;procedure   $SETDPB,NEAR
  8030                                  
  8031                                  _$SETDPB:
  8032 00001D82 89EF                    	MOV	DI,BP
  8033 00001D84 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8034 00001D87 AD                      	LODSW
  8035 00001D88 AB                      	STOSW				; dpb_sector_size
  8036                                  	; MSDOS 6.0
  8037 00001D89 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8038 00001D8D 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8039 00001D8F 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8040 00001D94 EB50                    	JMP	short setend			     ; NO		;AN000;
  8041                                  yesfat: ; 10/08/2018
  8042 00001D96 89C2                    	MOV	DX,AX
  8043 00001D98 AC                      	LODSB
  8044 00001D99 FEC8                    	DEC	AL
  8045 00001D9B AA                      	STOSB				; dpb_cluster_mask
  8046 00001D9C FEC0                    	INC	AL
  8047 00001D9E 30E4                    	XOR	AH,AH
  8048                                  LOG2LOOP:
  8049 00001DA0 A801                    	test	AL,1
  8050 00001DA2 7506                    	JNZ	short SAVLOG
  8051 00001DA4 FEC4                    	INC	AH
  8052 00001DA6 D0E8                    	SHR	AL,1
  8053 00001DA8 EBF6                    	JMP	SHORT LOG2LOOP
  8054                                  SAVLOG:
  8055 00001DAA 88E0                    	MOV	AL,AH
  8056 00001DAC AA                      	STOSB				; dpb_cluster_shift
  8057 00001DAD 88C3                    	MOV	BL,AL
  8058 00001DAF A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8059 00001DB0 AC                      	LODSB
  8060 00001DB1 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8061                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8062                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8063 00001DB2 88C7                    	MOV	BH,AL
  8064 00001DB4 AD                      	LODSW
  8065 00001DB5 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8066 00001DB6 B105                    	MOV	CL,5
  8067 00001DB8 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8068 00001DBA 48                      	DEC	AX
  8069 00001DBB 01D0                    	ADD	AX,DX			; Cause Round Up
  8070 00001DBD 89D1                    	MOV	CX,DX
  8071 00001DBF 31D2                    	XOR	DX,DX
  8072 00001DC1 F7F1                    	DIV	CX
  8073 00001DC3 89C1                    	MOV	CX,AX			; Number of directory sectors
  8074 00001DC5 47                      	INC	DI
  8075 00001DC6 47                      	INC	DI			; Skip dpb_first_sector
  8076 00001DC7 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8077 00001DC8 AC                      	LODSB
  8078                                  	;mov	[es:bp+16h],al
  8079 00001DC9 26884616                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8080 00001DCD AD                      	LODSW				; Number of sectors in a FAT
  8081                                  	;;;
  8082                                  	;MSDOS 6.0
  8083                                  	;
  8084                                  	;STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8085                                  	;MOV	DL,BH			;AN000;;>32mb
  8086                                  	;XOR	DH,DH			;AN000;;>32mb
  8087                                  	;MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8088                                  	
  8089                                  	;MSDOS 3.3
  8090                                  	;
  8091 00001DCE AA                      	STOSB		; DPB.FAT_SIZE
  8092 00001DCF F6E7                    	MUL	BH
  8093                                  	;;;
  8094                                  	;add	ax,[es:bp+6]
  8095 00001DD1 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8096 00001DD5 AB                      	STOSW				; dpb_dir_sector
  8097 00001DD6 01C8                    	ADD	AX,CX			; Add number of directory sectors
  8098                                  	;mov	[es:bp+0Bh],ax
  8099 00001DD8 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8100                                  	
  8101                                  	; MSDOS 6.0
  8102 00001DDC 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8103                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8104                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8105                                  	;XOR	CH,CH			;F.C. >32mb				;AN000;
  8106                                  	;MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8107                                  	;MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8108                                  	;SUB	BX,AX			;AN000;;F.C. >32mb
  8109                                  	;SBB	DX,0			;AN000;;F.C. >32mb
  8110                                  	;OR	CX,CX			;AN000;;F.C. >32mb
  8111                                  	;JZ	short norot		;AN000;;F.C. >32mb
  8112                                  ;rott:					;AN000;;F.C. >32mb
  8113                                  	;CLC				;AN000;;F.C. >32mb
  8114                                  	;RCR	DX,1			;AN000;;F.C. >32mb
  8115                                  	;RCR	BX,1			;AN000;;F.C. >32mb
  8116                                  	;LOOP	rott			;AN000;;F.C. >32mb
  8117                                  ;norot:					;AN000;
  8118                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8119                                  	;JMP	short setend		;AN000;;F.C. >32mb
  8120                                  normal_dpb:
  8121                                  	;sub	ax,[es:bp+0Dh]
  8122 00001DDE 262B460D                	SUB	AX,[ES:BP+DSKSIZ]
  8123 00001DE2 F7D8                    	NEG	AX			; Sectors in data area
  8124                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8125 00001DE4 D3E8                    	SHR	AX,CL			; Div by sectors/cluster
  8126                                  setend:
  8127                                  
  8128                                  ;	M008 - CAS
  8129                                  ;
  8130 00001DE6 40                      	INC	AX			; +2 (reserved), -1 (count -> max)
  8131                                  ;
  8132                                  ;	There has been a bug in our fatsize calculation for so long
  8133                                  ;	  that we can't correct it now without causing some user to
  8134                                  ;	  experience data loss. There are even cases where allowing
  8135                                  ;	  the number of clusters to exceed the fats is the optimal
  8136                                  ;	  case -- where adding 2 more fat sectors would make the
  8137                                  ;	  data field smaller so that there's nothing to use the extra
  8138                                  ;	  fat sectors for.
  8139                                  ;
  8140                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8141                                  ;	  still report that there was a cluster left when the disk was
  8142                                  ;	  actually full. Very graceful failure for a corrupt system
  8143                                  ;	  configuration. There may be worse cases that were never
  8144                                  ;	  properly traced back to this bug. The problem cases only
  8145                                  ;	  occurred when partition sizes were very near FAT sector
  8146                                  ;	  rounding boundaries, which were rare cases.
  8147                                  ;
  8148                                  ;	Also, it's possible that some third-party partition program might
  8149                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8150                                  ;	  scheme. In this hypothetical case, the number of allocation
  8151                                  ;	  clusters which don't actually have FAT entries to represent
  8152                                  ;	  them might be larger and might create a more catastrophic
  8153                                  ;	  failure. So we'll provide the safeguard of limiting the
  8154                                  ;	  max_cluster to the amount that will fit in the FATs.
  8155                                  ;
  8156                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8157                                  
  8158                                  ;	make sure the number of fat sectors is actually enough to
  8159                                  ;	  hold that many clusters. otherwise, back the number of
  8160                                  ;	  clusters down
  8161                                  
  8162                                  	; 19/07/2018 - Retro DOS v3.0
  8163                                  	; MSDOS 6.0
  8164 00001DE7 89C3                    	mov	bx,ax			; remember calculated # clusters
  8165                                  	;;mov	ax,[ES:BP+0Fh]
  8166                                  	;mov	ax,[ES:BP+DPB.FAT_SIZE]
  8167                                  	; 01/08/2018 (MSDOS 3.3)
  8168 00001DE9 268A460F                	mov	al,[ES:BP+DPB.FAT_SIZE]
  8169 00001DED 30E4                    	xor	ah,ah 	
  8170 00001DEF 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8171 00001DF3 81FBF60F                	cmp	bx,4096-10		; test for 12 vs. 16 bit fat
  8172 00001DF7 720D                    	jb	short setend_fat12
  8173 00001DF9 D1EA                    	shr	dx,1
  8174                                  ;cs3 7/2/92
  8175 00001DFB 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8176                                  ;					; than enough for the maximum FAT,
  8177                                  ;					; so go ahead and use the calculated
  8178                                  ;					; number of clusters.
  8179                                  ;cs3 7/2/92
  8180                                  
  8181 00001DFD D1D8                    	rcr	ax,1			; find number of entries
  8182 00001DFF 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8183                                  ;					;  into 12-bit fatland?
  8184 00001E02 7215                    	jb	short setend_faterr	; then go ahead and let the
  8185                                  ;					;  inconsistency pass through
  8186                                  ;					;  rather than lose data by
  8187                                  ;					;  correcting the fat type
  8188 00001E04 EB0E                    	jmp	short setend_fat16
  8189                                  
  8190                                  setend_fat12:
  8191 00001E06 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8192 00001E08 11D2                    	adc	dx,dx
  8193                                  ;cs3 7/2/92
  8194 00001E0A 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8195 00001E0D 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8196                                  ;					; here.  Check for it and use
  8197                                  ;					; the calcuated size in this case.
  8198                                  ;cs3 7/2/92
  8199 00001E0F 2EF736[801D]            	div	word [cs:word3]
  8200                                  
  8201                                  setend_fat16:
  8202 00001E14 48                      	dec	ax			; limit at 1
  8203 00001E15 39D8                    	cmp	ax,bx			; is fat big enough?
  8204 00001E17 7602                    	jbe	short setend_fat	; use max value that'll fit
  8205                                  
  8206                                  setend_faterr:
  8207 00001E19 89D8                    	mov	ax,bx			; use calculated value
  8208                                  
  8209                                  setend_fat:
  8210                                  
  8211                                  ;	now ax = maximum legal cluster
  8212                                  
  8213                                  ;	end M008
  8214                                  
  8215                                  	;mov	[es:bp+0Dh], ax
  8216 00001E1B 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8217                                  	;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8218 00001E1F 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8219                                  					; Init so first ALLOC starts at
  8220                                  					; begining of FAT
  8221                                  	;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8222 00001E25 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8223                                  
  8224 00001E2B C3                      	retn
  8225                                  
  8226                                  ;EndProc $SETDPB
  8227                                  
  8228                                  
  8229                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8230                                  
  8231                                  ;
  8232                                  ;----------------------------------------------------------------------------
  8233                                  ;
  8234                                  ;**	$Dup_PDB
  8235                                  ;
  8236                                  ; Inputs:   DX is new segment address of process
  8237                                  ;	    SI is end of new allocation block
  8238                                  ;
  8239                                  ;----------------------------------------------------------------------------
  8240                                  ;
  8241                                  
  8242                                  _$DUP_PDB:
  8243                                  
  8244                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8245                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8246                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8247                                  
  8248 00001E2C 2EC606[5003]FF          	MOV	byte [CS:CreatePDB],0FFH  ; indicate a new process
  8249 00001E32 2E8E1E[DE02]            	MOV	DS, [CS:CurrentPDB]
  8250 00001E37 56                      	PUSH	SI
  8251 00001E38 EB0A                    	JMP	SHORT CreateCopy
  8252                                  
  8253                                  ;
  8254                                  ;----------------------------------------------------------------------------
  8255                                  ;
  8256                                  ; Inputs:
  8257                                  ;	DX = Segment number of new base
  8258                                  ; Function:
  8259                                  ;	Set up program base and copy term and ^C from int area
  8260                                  ; Returns:
  8261                                  ;	None
  8262                                  ; Called at DOS init
  8263                                  ;
  8264                                  ;----------------------------------------------------------------------------
  8265                                  ;
  8266                                  
  8267                                  _$CREATE_PROCESS_DATA_BLOCK:
  8268                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8269 00001E3A E8CEF7                  	CALL	Get_User_Stack
  8270                                  	;mov	ds,[si+14h]
  8271 00001E3D 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8272                                  	;push	word [2]
  8273 00001E40 FF360200                	PUSH	word [PDB.BLOCK_LEN]
  8274                                  CreateCopy:
  8275 00001E44 8EC2                    	MOV	ES,DX
  8276                                  
  8277 00001E46 31F6                    	XOR	SI,SI			; copy entire PDB
  8278 00001E48 89F7                    	MOV	DI,SI
  8279 00001E4A B98000                  	MOV	CX,80H
  8280 00001E4D F3A5                    	REP	MOVSW
  8281                                  
  8282                                  ; DOS 3.3 7/9/86
  8283                                  
  8284                                  	;mov	cx,20
  8285 00001E4F B91400                  	MOV	CX,FILPERPROC		; copy handles in case of
  8286                                  	;mov	di,18h
  8287 00001E52 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8288 00001E55 1E                      	PUSH	DS
  8289                                  	;lds	si,[34h]
  8290 00001E56 C5363400                	LDS	SI,[PDB.JFN_Pointer]
  8291 00001E5A F3A4                    	REP	MOVSB
  8292 00001E5C 1F                      	POP	DS
  8293                                  
  8294                                  ; DOS 3.3 7/9/86
  8295                                  
  8296                                  	;test	byte [cs:CreatePDB],0FFh
  8297 00001E5D 2E803E[5003]00          	cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8298 00001E63 744B                    	JZ	short Create_PDB_cont 	; nope, old style call
  8299                                  ;
  8300                                  ; Here we set up for a new process...
  8301                                  ;
  8302                                  
  8303 00001E65 0E                      	PUSH    CS                      ; Called at DOSINIT time, NO SS
  8304 00001E66 1F                      	POP     DS
  8305                                  
  8306 00001E67 31DB                    	XOR	BX,BX			; dup all jfns
  8307                                  	;mov	cx,20
  8308 00001E69 B91400                  	MOV	CX,FILPERPROC		; only 20 of them
  8309                                  
  8310                                  Create_dup_jfn:
  8311 00001E6C 06                      	PUSH	ES			; save new PDB
  8312 00001E6D E88D49                  	call	SFFromHandle		; get sf pointer
  8313 00001E70 B0FF                    	MOV	AL,-1			; unassigned JFN
  8314 00001E72 7225                    	JC	short CreateStash	; file was not really open
  8315                                  	;test	word [es:di+5],1000h
  8316 00001E74 26F745050010            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8317 00001E7A 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8318                                  ;
  8319                                  ; We do not inherit network file handles.
  8320                                  ;
  8321                                  	;mov	ah,[es:di+2]
  8322 00001E7C 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8323                                  	;and	ah,0F0h
  8324 00001E80 80E4F0                  	AND	AH,SHARING_MASK
  8325                                  	;cmp	ah,70h
  8326 00001E83 80FC70                  	CMP	AH,SHARING_NET_FCB
  8327 00001E86 7411                    	jz	short CreateStash
  8328                                  ;
  8329                                  ; The handle we have found is duplicatable (and inheritable).  Perform
  8330                                  ; duplication operation.
  8331                                  ;
  8332 00001E88 893E[3605]              	MOV	[THISSFT],DI
  8333 00001E8C 8C06[3805]              	MOV	[THISSFT+2],ES
  8334 00001E90 E83E18                  	call	DOS_DUP 		; signal duplication
  8335                                  ;
  8336                                  ; get the old sfn for copy
  8337                                  ;
  8338 00001E93 E84F49                  	call	pJFNFromHandle		; ES:DI is jfn
  8339 00001E96 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8340                                  ;
  8341                                  ; Take AL (old sfn or -1) and stash it into the new position
  8342                                  ;
  8343                                  CreateStash:
  8344 00001E99 07                      	POP	ES
  8345                                  	;mov	[es:bx+18h],al
  8346 00001E9A 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8347 00001E9E 43                      	INC	BX			; next jfn...
  8348 00001E9F E2CB                    	LOOP	Create_dup_jfn
  8349                                  
  8350 00001EA1 8B1E[DE02]              	MOV	BX,[CurrentPDB]		; get current process
  8351                                  	;mov	[es:bx+16h]
  8352 00001EA5 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8353 00001EAA 8C06[DE02]              	MOV	[CurrentPDB],ES
  8354 00001EAE 8EDB                    	MOV	DS,BX
  8355                                  ;
  8356                                  ; end of new process create
  8357                                  ;
  8358                                  Create_PDB_cont:
  8359 00001EB0 2EC606[5003]00          	MOV     BYTE [CS:CreatePDB],0	; reset flag
  8360 00001EB6 58                      	POP	AX
  8361                                  
  8362                                  	;entry	SETMEM
  8363                                  
  8364                                  ;---------------------------------------------------------------------------
  8365                                  ; Inputs:
  8366                                  ;	AX = Size of memory in paragraphs
  8367                                  ;	DX = Segment
  8368                                  ; Function:
  8369                                  ;	Completely prepares a program base at the
  8370                                  ;	specified segment.
  8371                                  ; Called at DOS init
  8372                                  ; Outputs:
  8373                                  ;	DS = DX
  8374                                  ;	ES = DX
  8375                                  ;	[0] has INT int_abort
  8376                                  ;	[2] = First unavailable segment
  8377                                  ;	[5] to [9] form a long call to the entry point
  8378                                  ;	[10] to [13] have exit address (from int_terminate)
  8379                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8380                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8381                                  ; DX,BP unchanged. All other registers destroyed.
  8382                                  ;---------------------------------------------------------------------------
  8383                                  
  8384                                  SETMEM:
  8385 00001EB7 31C9                    	XOR	CX,CX
  8386 00001EB9 8ED9                    	MOV	DS,CX
  8387 00001EBB 8EC2                    	MOV	ES,DX
  8388                                  	;mov	si,88h
  8389 00001EBD BE8800                  	MOV	SI,addr_int_terminate
  8390                                  	;mov	di,10
  8391 00001EC0 BF0A00                  	MOV	DI,SAVEXIT
  8392 00001EC3 B90600                  	MOV	CX,6
  8393 00001EC6 F3A5                    	REP	MOVSW
  8394 00001EC8 26A30200                	MOV	[ES:2],AX
  8395 00001ECC 29D0                    	SUB	AX,DX
  8396 00001ECE 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8397 00001ED1 7603                    	JBE	short HAVDIF
  8398 00001ED3 B8FF0F                  	MOV	AX,MAXDIF
  8399                                  HAVDIF:
  8400 00001ED6 83E810                  	SUB	AX,10H			; Allow for 100h byte "stack"
  8401 00001ED9 BB0C00                  	MOV	BX,ENTRYPOINTSEG	;	in .COM files
  8402 00001EDC 29C3                    	SUB	BX,AX
  8403 00001EDE B104                    	MOV	CL,4
  8404 00001EE0 D3E0                    	SHL	AX,CL
  8405 00001EE2 8EDA                    	MOV	DS,DX
  8406                                  
  8407                                  	; (MSDOS 6.0 note)
  8408                                  	;
  8409                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8410                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8411                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8412                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8413                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8414                                  	; making this equvalnce valid for this particular case. If however
  8415                                  	; there is less than 64K remaining the address in BX:AX will not 
  8416                                  	; be the same as above. We will then stuff 0:c0 , the call 5 address
  8417                                  	; into the PSP.
  8418                                  	;
  8419                                  	; Therefore for the case where there is less than 64K remaining in 
  8420                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8421                                  	; requirements will not work. Call 5, however will continue to work
  8422                                  	; for all cases.
  8423                                  	;
  8424                                  
  8425                                  	;mov	[6],ax
  8426                                  	;mov	[8],bx
  8427                                  
  8428 00001EE4 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8429 00001EE7 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8430                                  
  8431                                  	;cmp	ax,WRAPOFFSET		; Q: does the system have >= 64k of
  8432                                  	;				;    memory left
  8433                                  	;je	short addr_ok		; Y: the above calculated address is
  8434                                  	;				;    OK
  8435                                  	;				; N: 
  8436                                  
  8437                                  	;MOV	WORD [PDB.CPM_CALL+1],0c0h
  8438                                  	;MOV	WORD [PDB.CPM_CALL+3],0
  8439                                  
  8440                                  ;addr_ok:
  8441                                  
  8442                                  	;mov	word [0],20CDh
  8443 00001EEB C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8444                                  	;mov	byte [5],9Ah
  8445 00001EF1 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8446                                  	;mov	word [50h],21CDh
  8447 00001EF6 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8448                                  	;mov	byte [52h],0CBh
  8449 00001EFC C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8450                                  	;mov	word [34h],18h
  8451 00001F01 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8452                                  	;mov	word [36h],ds
  8453 00001F07 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8454                                  	;mov	word [32h],20
  8455 00001F0B C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8456                                  ;
  8457                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8458                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8459                                  ; particular SFT.  We perform this by requiring that the server link together
  8460                                  ; for us all sub-PDB's that he creates.  The requirement for us, now, is to
  8461                                  ; initialize this pointer.
  8462                                  ;
  8463                                   	;mov	word [38h],-1
  8464 00001F11 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8465                                  	;mov	word [3Ah],-1
  8466 00001F17 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8467                                  
  8468                                  			; Set the real version number in the PSP - 5.00
  8469                                  	;mov	[ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8470                                  
  8471 00001F1D C3                      	retn
  8472                                  
  8473                                  ;============================================================================
  8474                                  ; IBMDOS.COM (MSDOS 3.3 KERNEL), 1987 - Offset 1DE6h
  8475                                  ;============================================================================
  8476                                  ; 19/07/2018 - Retro DOS v3.0
  8477                                  
  8478                                  FETCHI_CHECK:
  8479 00001F1E 9C                      	pushf
  8480 00001F1F 2E813E[8F0F]7258        	cmp	word [cs:FETCHI_TAG], 5872h
  8481 00001F26 7403                    	jz      short FETCHI_CHK_RETN
  8482 00001F28 E85654                  	call    DOSINIT
  8483                                  FETCHI_CHK_RETN:
  8484 00001F2B 9D                      	popf
  8485 00001F2C C3                      	retn
  8486                                  
  8487                                  ;============================================================================
  8488                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8489                                  ;============================================================================
  8490                                  ; 20/07/2018 - Retro DOS v3.0
  8491                                  
  8492                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8493                                  ;----------------------------------------------------------------------------
  8494                                  ;
  8495                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8496                                  ;		Strings of different lengths don't match.
  8497                                  ;   Inputs:	DS:SI - pointer to source string  ES:DI - pointer to dest string
  8498                                  ;   Outputs:	Z if strings same, NZ if different
  8499                                  ;   Registers modified: NONE
  8500                                  ;----------------------------------------------------------------------------
  8501                                  
  8502                                  StrCmp:
  8503 00001F2D 56                      	push	si
  8504 00001F2E 57                      	push	di
  8505 00001F2F 50                      	push	ax
  8506                                  
  8507                                  Cmplp:
  8508 00001F30 AC                      	LODSB
  8509 00001F31 E8D936                  	call	UCase			; convert to upper case
  8510 00001F34 E81237                  	call	PATHCHRCMP		; convert / to 	MOV	AH,AL
  8512 00001F37 268A05                  	MOV	AL,[ES:DI]
  8513 00001F3A 47                      	INC	DI
  8514 00001F3B E8CF36                  	call	UCase			; convert to upper case
  8515 00001F3E E80837                  	call	PATHCHRCMP		; convert / to 	CMP	AH,AL
  8517 00001F41 7504                    	JNZ	short PopRet		; Strings dif
  8518                                  Tend:
  8519 00001F43 08C0                    	OR	AL,AL
  8520 00001F45 75E9                    	JNZ	short Cmplp		; More string
  8521                                  PopRet:
  8522 00001F47 58                      	pop	ax
  8523 00001F48 5F                      	pop	di
  8524 00001F49 5E                      	pop	si
  8525 00001F4A C3                      	retn
  8526                                  
  8527                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8528                                  ;----------------------------------------------------------------------------
  8529                                  ;
  8530                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8531                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI.  no modification of
  8532                                  ;	characters.
  8533                                  ;
  8534                                  ;   Inputs:	DS:SI - pointer to source string
  8535                                  ;		ES:DI - pointer to destination string
  8536                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8537                                  ;		DS:SI point byte after nul byte at end of source string
  8538                                  ;   Registers modified: SI,DI
  8539                                  ;----------------------------------------------------------------------------
  8540                                  
  8541                                  StrCpy:
  8542 00001F4B 50                      	push	ax
  8543                                  CPYLoop:
  8544 00001F4C AC                      	LODSB
  8545 00001F4D E8BD36                  	call	UCase			; convert to upper case
  8546 00001F50 E8F636                  	call	PATHCHRCMP		; convert / to \ ;
  8547 00001F53 AA                      	STOSB
  8548                                  Tend2:
  8549 00001F54 08C0                    	OR	AL,AL
  8550 00001F56 75F4                    	JNZ	short CPYLoop
  8551 00001F58 58                      	pop	ax
  8552 00001F59 C3                      	retn
  8553                                  
  8554                                  ;----------------------------------------------------------------------------
  8555                                  ; Procedure Name : FStrCpy
  8556                                  ;----------------------------------------------------------------------------
  8557                                  
  8558                                  FStrCpy:
  8559 00001F5A 50                      	push	ax
  8560                                  FCPYLoop:
  8561 00001F5B AC                      	LODSB
  8562 00001F5C AA                      	STOSB
  8563 00001F5D 08C0                    	OR	AL,AL
  8564 00001F5F 75FA                    	JNZ	short FCPYLoop
  8565 00001F61 58                      	pop	ax
  8566 00001F62 C3                      	retn
  8567                                  
  8568                                  ; 20/07/2018 - Retro DOS v3.0
  8569                                  ;----------------------------------------------------------------------------
  8570                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8571                                  ;----------------------------------------------------------------------------
  8572                                  ;
  8573                                  ;UCase:	
  8574                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8575                                  ;	retn
  8576                                  
  8577                                  ;Break <StrLen - compute length of string ES:DI>
  8578                                  ;----------------------------------------------------------------------------
  8579                                  ;**	StrLen - Compute Length of String
  8580                                  ;
  8581                                  ;	StrLen computes the length of a string, including the trailing 00
  8582                                  ;
  8583                                  ;	ENTRY	(es:di) = address of string
  8584                                  ;	EXIT	(cx) = size of string
  8585                                  ;	USES	cx, flags
  8586                                  ;----------------------------------------------------------------------------
  8587                                  
  8588                                  StrLen:
  8589 00001F63 57                      	push	di
  8590 00001F64 50                      	push	ax
  8591                                  	;MOV	CX,-1
  8592 00001F65 B9FFFF                  	mov	cx,65535
  8593 00001F68 30C0                    	XOR	AL,AL
  8594 00001F6A F2AE                    	REPNE	SCASB
  8595 00001F6C F7D1                    	NOT	CX
  8596 00001F6E 58                      	pop	ax
  8597 00001F6F 5F                      	pop	di
  8598 00001F70 C3                      	retn
  8599                                  
  8600                                  ;----------------------------------------------------------------------------
  8601                                  ;**	DStrLen - Compute Length of String
  8602                                  ;
  8603                                  ;	ENTRY	(ds:si) = address of string
  8604                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8605                                  ;	USES	cx, flags
  8606                                  ;----------------------------------------------------------------------------
  8607                                  
  8608                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8609 00001F71 E80700                  	CALL	XCHGP
  8610 00001F74 E8ECFF                  	CALL	StrLen
  8611 00001F77 E80100                  	CALL	XCHGP
  8612 00001F7A C3                      	retn
  8613                                  
  8614                                  ;----------------------------------------------------------------------------
  8615                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8616                                  ;
  8617                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8618                                  ;
  8619                                  ;	ENTRY	none
  8620                                  ;	EXIT	pairs exchanged
  8621                                  ;	USES	SI, DI, DS, ES
  8622                                  ;----------------------------------------------------------------------------
  8623                                  
  8624                                  XCHGP:
  8625 00001F7B 1E                      	push	ds
  8626 00001F7C 06                      	push	es
  8627 00001F7D 1F                      	pop	ds
  8628 00001F7E 07                      	pop	es
  8629 00001F7F 87F7                    	XCHG	SI,DI
  8630                                  xchgp_retn:
  8631 00001F81 C3                      	retn
  8632                                  
  8633                                  ;Break	<Idle - wait for a specified amount of time>
  8634                                  ;----------------------------------------------------------------------------
  8635                                  ;
  8636                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8637                                  ;   	   we spin until RetryLoop is exhausted.
  8638                                  ;
  8639                                  ;   Inputs:	RetryLoop is the number of times we spin
  8640                                  ;   Outputs:	Wait
  8641                                  ;   Registers modified: none
  8642                                  ;----------------------------------------------------------------------------
  8643                                  
  8644                                  Idle:
  8645                                  	;test	byte [SS:FSHARING],0FFh
  8646 00001F82 36803E[0D05]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  8647                                  	;retnz
  8648 00001F88 75F7                    	jnz	short xchgp_retn
  8649                                  	;SAVE	<CX>
  8650 00001F8A 51                      	push	cx
  8651 00001F8B 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  8652 00001F90 E308                    	JCXZ	Idle3
  8653                                  Idle1:	
  8654 00001F92 51                      	PUSH	CX
  8655 00001F93 31C9                    	XOR	CX,CX
  8656                                  Idle2:	
  8657 00001F95 E2FE                    	LOOP	Idle2
  8658 00001F97 59                      	POP	CX
  8659 00001F98 E2F8                    	LOOP	Idle1
  8660                                  Idle3:	
  8661                                  	;RESTORE <CX>
  8662 00001F9A 59                      	pop	cx
  8663 00001F9B C3                      	retn
  8664                                  
  8665                                  ;Break	<TableDispatch - dispatch to a table>
  8666                                  ;----------------------------------------------------------------------------
  8667                                  ;
  8668                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  8669                                  ;   routine.  Preserve all input registers to the routine.
  8670                                  ;
  8671                                  ;   Inputs:	Push	return address
  8672                                  ;		Push	Table address
  8673                                  ;		Push	index (byte)
  8674                                  ;   Outputs:	appropriate routine gets jumped to.
  8675                                  ;		return indicates invalid index
  8676                                  ;   Registers modified: none.
  8677                                  ;----------------------------------------------------------------------------
  8678                                  
  8679                                  struc TFrame	 ; TableFrame
  8680 00000000 ????                    .OldBP:	 resw 1  ; 0
  8681 00000002 ????                    .OldRet: resw 1  ; 2
  8682 00000004 ??                      .Index:	 resb 1  ; 4
  8683 00000005 ??                      .Pad:	 resb 1  ; 5  
  8684 00000006 ????                    .Tab:	 resw 1  ; 6
  8685 00000008 ????                    .NewRet: resw 1  ; 8
  8686                                  endstruc
  8687                                  
  8688                                  TableDispatch:
  8689 00001F9C 55                      	PUSH	BP
  8690 00001F9D 89E5                    	MOV	BP,SP
  8691 00001F9F 53                      	PUSH	BX			; save BX
  8692                                  	;mov	bx,[bp+6]
  8693 00001FA0 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  8694 00001FA3 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  8695                                  	;cmp	[bp+4],bl
  8696 00001FA6 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  8697 00001FA9 7317                    	JAE	short TableError	; yes
  8698                                  	;mov	bl,[bp+4]
  8699 00001FAB 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  8700 00001FAE 30FF                    	XOR	BH,BH			; convert to word
  8701 00001FB0 D1E3                    	SHL	BX,1			; convert to word pointer
  8702 00001FB2 43                      	INC	BX			; point past first length byte
  8703                                  	; 17/08/2018
  8704                                  	;add	bx,[bp+6]
  8705 00001FB3 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  8706 00001FB6 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  8707                                  	;mov	[bp+6],bx
  8708 00001FB9 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  8709 00001FBC 5B                      	POP	BX			; restore BX
  8710 00001FBD 5D                      	POP	BP			; restore BP
  8711 00001FBE 83C404                  	ADD	SP,4			; clean off Index and our return addr
  8712 00001FC1 C3                      	retn				; do operation
  8713                                  TableError:
  8714 00001FC2 5B                      	POP	BX			; restore BX
  8715 00001FC3 5D                      	POP	BP			; restore BP
  8716 00001FC4 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  8717                                  
  8718                                  
  8719                                  ;Break	<TestNet - determine if a CDS is for the network>
  8720                                  ;----------------------------------------------------------------------------
  8721                                  ;
  8722                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  8723                                  ;	network CDS.  This will handle NULL cds also.
  8724                                  ;
  8725                                  ;   Inputs:	ThisCDS points to CDS or NULL
  8726                                  ;   Outputs:	ES:DI = ThisCDS
  8727                                  ;		carry Set => network
  8728                                  ;		carry Clear => local
  8729                                  ;   Registers modified: none.
  8730                                  ;----------------------------------------------------------------------------
  8731                                  
  8732                                  TestNet:
  8733 00001FC7 2EC43E[3A05]            	LES	DI,[CS:THISCDS]
  8734 00001FCC 83FFFF                  	CMP	DI,-1
  8735 00001FCF 7409                    	JZ	short CMCRet		; UNC? carry is clear
  8736                                  	;test	word [es:di+43h],8000h
  8737 00001FD1 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  8738 00001FD7 7501                    	JNZ	short CMCRet		; jump has carry clear
  8739 00001FD9 C3                      	retn				; carry is clear
  8740                                  CMCRet: 
  8741 00001FDA F5                      	CMC
  8742 00001FDB C3                      	retn
  8743                                  
  8744                                  ;Break	<IsSFTNet - see if an sft is for the network>
  8745                                  ;----------------------------------------------------------------------------
  8746                                  ;
  8747                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  8748                                  ;	network file.
  8749                                  ;
  8750                                  ;   Inputs:	ES:DI point to SFT
  8751                                  ;   Outputs:	Zero set if not network sft
  8752                                  ;		zero reset otherwise
  8753                                  ;		Carry CLEAR!!!
  8754                                  ;   Registers modified: none.
  8755                                  ;----------------------------------------------------------------------------
  8756                                  
  8757                                  IsSFTNet:
  8758                                  	;test	word [es:di+5],8000h
  8759 00001FDC 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  8760 00001FE2 C3                      	retn
  8761                                  
  8762                                  ;Break	<FastInit - Initialize FastTable entries >
  8763                                  ;----------------------------------------------------------------------------
  8764                                  ;   DOS 4.00   2/9/87
  8765                                  ;   FastInit  - initialize the FASTXXX routine entry
  8766                                  ;		  in the FastTable
  8767                                  ;
  8768                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  8769                                  ;		DS:SI = address of FASTXXX routine entry
  8770                                  ;		   SI = -1 for query only
  8771                                  ;   Outputs:	Carry flag clear, if success
  8772                                  ;		Carry flag set,   if failure
  8773                                  ;
  8774                                  ;
  8775                                  ;----------------------------------------------------------------------------
  8776                                  
  8777                                  ;Procedure FastInit,NEAR
  8778                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  8779                                  ;FastInit:
  8780                                  	; MSDOS 6.0
  8781                                  	;hkn; set up es to dosdataseg.
  8782                                  	;push	es
  8783                                  	;getdseg <es>			; es -> dosdata
  8784                                  
  8785                                  	;hkn; FastTable is in DOSDATA
  8786                                  	;MOV	DI,OFFSET DOSDATA:FastTable + 2 ;AN000;FO. points to fastxxx entry
  8787                                  	;DEC	BX				;AN000;FO.;; decrement index
  8788                                  	;MOV	DX,BX				;AN000;FO.;; save bx
  8789                                  	;SHL	BX,1				;AN000;FO.;; times 4 , each entry is DWORD
  8790                                  	;SHL	BX,1				;AN000;FO.
  8791                                  	;ADD	DI,BX				;AN000;FO. index to the entry
  8792                                  	;MOV	AX,WORD PTR ES:[DI+2]		;AN000;FO. get entry segment
  8793                                  ;fcheck: 					;AN000;
  8794                                  	;MOV	CX,CS				;AN000;FO.;; get DOS segment
  8795                                  	;CMP	AX,CX				;AN000;FO.;; first time installed ?
  8796                                  	;JZ	short ok_install			;AN000;FO.;; yes
  8797                                  	;OR	AX,AX				;AN000;FO.;
  8798                                  	;JZ	short ok_install		;AN000;FO.;
  8799                                  	;STC					;AN000;FO.;; already installed !
  8800                                  	;JMP	SHORT FSret			;AN000;FO. set carry
  8801                                  ;ok_install:					;AN000;
  8802                                  	;CMP	SI,-1				;AN000;FO.; Query only ?
  8803                                  	;JZ	short FSret			;AN000;FO.; yes
  8804                                  	;MOV	CX,DS				;AN000;FO.; get FASTXXX entry segment
  8805                                  	;MOV	WORD PTR ES:[DI+2],CX		;AN000;FO.; initialize routine entry
  8806                                  	;MOV	WORD PTR ES:[DI],SI		;AN000;FO.; initialize routine offset
  8807                                  
  8808                                  ;hkn; FastFlg moved to DOSDATA
  8809                                  	;MOV	DI,OFFSET DOSDATA:FastFlg	;AN000;FO.; get addr of FASTXXX flags
  8810                                  	;ADD	DI,DX				;AN000;FO.; index to a FASTXXX flag
  8811                                  	;OR	byte ptr ES:[DI],Fast_yes	;AN000;FO.; indicate installed
  8812                                  FSret:						;AN000;
  8813                                  	;pop	es
  8814                                  	;return					;AN000;FO.
  8815                                  ;EndProc FastInit				;AN000;FO.
  8816                                  
  8817                                  	; MSDOS 3.3
  8818                                  	; IBMDOS.COM (1987) - Offset 1EB3h
  8819                                  FastInit:
  8820 00001FE3 BF[430F]                	mov	di,FastTable ; FastOpenTable
  8821 00001FE6 2E8B4504                	mov	ax,[cs:di+4]		; Entry segment
  8822 00001FEA 8CCB                    	mov	bx,cs			; get DOS segment
  8823 00001FEC 39D8                    	cmp	ax,bx			; first time installed ?	
  8824 00001FEE 7402                    	je	short ok_install	; yes
  8825 00001FF0 F9                      	stc				; set carry
  8826 00001FF1 C3                      	retn				; (cf=1 means) already installed !
  8827                                  
  8828                                  ok_install:
  8829 00001FF2 BB[430F]                	mov	bx,FastTable ; FastOpenTable
  8830 00001FF5 8CD9                    	mov	cx,ds
  8831                                  	; set address of FASTXXX (FASTOPEN) routine entry
  8832 00001FF7 2E894F04                	mov	[cs:bx+4],cx
  8833 00001FFB 2E897702                	mov	[cs:bx+2],si
  8834 00001FFF C3                      	retn
  8835                                  
  8836                                  ;Break	<FastRet - initial routine in FastOpenTable >
  8837                                  ;----------------------------------------------------------------------------
  8838                                  ;   DOS 3.3   6/10/86
  8839                                  ;   FastRet	- indicate FASTXXXX  not in memory
  8840                                  ;
  8841                                  ;   Inputs:	None
  8842                                  ;   Outputs:	AX = -1 and carry flag set
  8843                                  ;
  8844                                  ;   Registers modified: none.
  8845                                  ;----------------------------------------------------------------------------
  8846                                  
  8847                                  FastRet:
  8848                                  	;mov	ax,-1
  8849                                  	;stc
  8850                                  	;retf
  8851 00002000 F9                      	STC
  8852 00002001 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  8853 00002003 CB                      	RETF
  8854                                  
  8855                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  8856                                  ;----------------------------------------------------------------------------
  8857                                  ;   DOS 3.3   6/10/86
  8858                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  8859                                  ;
  8860                                  ;   Inputs:	Same input as $OPEN except CL = mode
  8861                                  ;   Outputs:	same output as $OPEN
  8862                                  ;
  8863                                  ;----------------------------------------------------------------------------
  8864                                  
  8865                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  8866                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  8867                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  8868                                  
  8869                                  NLS_OPEN:
  8870                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  8871                                  ;	MOV	BYTE [CPSWFLAG],0
  8872                                  ;	PUSH	BX		 ; save current state
  8873                                  
  8874 00002004 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  8875 00002006 E82C50                  	call	_$OPEN
  8876                                  
  8877                                   ;	POP	BX		 ; restore current state
  8878                                   ;	MOV	[CPSWFLAG],BL
  8879 00002009 C3                      	RETN
  8880                                  
  8881                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  8882                                  ;----------------------------------------------------------------------------
  8883                                  ;   DOS 3.3   6/10/86
  8884                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  8885                                  ;
  8886                                  ;   Inputs:	BP = open mode
  8887                                  ;   Outputs:	same output as $LSEEK
  8888                                  ;
  8889                                  ;----------------------------------------------------------------------------
  8890                                  
  8891                                  NLS_LSEEK:
  8892                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8893                                  	;PUSH	word [SS:USER_SS]
  8894 0000200A 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8895 0000200F 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8896 00002014 E81000                  	CALL	Fake_User_Stack
  8897 00002017 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  8898 00002019 E81A4F                  	call	_$LSEEK
  8899                                  	;POP	word [SS:USER_SS] ; restore user stack
  8900                                  	;POP	word [SS:USER_SP]
  8901 0000201C 2E8F06[2005]            	POP	word [cs:USER_SS] ; restore user stack
  8902 00002021 2E8F06[1E05]            	POP	word [cs:USER_SP]
  8903 00002026 C3                      	RETN
  8904                                  
  8905                                  ;Break	<Fake_User_Stack - save user stack>
  8906                                  ;----------------------------------------------------------------------------
  8907                                  ;   DOS 3.3   6/10/86
  8908                                  ;   Fake_User_Stack - save user stack pointer
  8909                                  ;
  8910                                  ;----------------------------------------------------------------------------
  8911                                  
  8912                                  Fake_User_Stack:
  8913                                  	;MOV	AX,[ss:USER_SP_2F] ; replace with INT 2F stack
  8914 00002027 2EA1[710F]              	MOV	AX,[cs:USER_SP_2F]
  8915                                  	;MOV	[SS:USER_SP],AX
  8916 0000202B 2EA3[1E05]              	MOV	[CS:USER_SP],AX
  8917 0000202F 8CC8                    	MOV	AX,CS
  8918                                  	;mov	ax,ss
  8919                                  	;MOV	[SS:USER_SS],AX
  8920 00002031 2EA3[2005]              	MOV	[CS:USER_SS],AX
  8921 00002035 C3                      	RETN
  8922                                  
  8923                                  ;Break	<GetDevList - get device header list pointer>
  8924                                  ;----------------------------------------------------------------------------
  8925                                  ;   DOS 3.3   7/25/86
  8926                                  ;   GetDevList - get device header list pointer
  8927                                  ;
  8928                                  ;   Output: AX:BX points to the device header list
  8929                                  ;----------------------------------------------------------------------------
  8930                                  
  8931                                  GetDevList:
  8932 00002036 BE[3B0F]                	MOV	SI,SysInitTable
  8933                                  	;LDS	SI,[CS:SI+SYSINITVARS]
  8934 00002039 2EC534                  	LDS	SI,[CS:SI]
  8935                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  8936                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  8937 0000203C 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  8938 0000203F 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  8939 00002042 C3                      	RETN
  8940                                  
  8941                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  8942                                  ;----------------------------------------------------------------------------
  8943                                  ;   DOS 3.3   7/25/86
  8944                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  8945                                  ;
  8946                                  ;   Inputs:	BP = function code 0CH
  8947                                  ;   Outputs:	same output as generic $IOCTL
  8948                                  ;
  8949                                  ;----------------------------------------------------------------------------
  8950                                  
  8951                                  NLS_IOCTL:
  8952                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8953                                  	;PUSH	word [SS:USER_SS]
  8954 00002043 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8955 00002048 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8956 0000204D E8D7FF                  	CALL	Fake_User_Stack
  8957 00002050 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  8958 00002052 E8580F                  	call	_$IOCTL
  8959                                  	;POP	word [SS:USER_SS] ; restore user stack
  8960                                  	;POP	word [SS:USER_SP]
  8961 00002055 2E8F06[2005]            	POP	word [CS:USER_SS] ; restore user stack
  8962 0000205A 2E8F06[1E05]            	POP	word [CS:USER_SP]
  8963 0000205F C3                      	RETN
  8964                                  
  8965                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  8966                                  ;----------------------------------------------------------------------------
  8967                                  ;   DOS 3.3   7/25/86
  8968                                  ;   NLS_GETEXT	-
  8969                                  ;
  8970                                  ;   Inputs:	none
  8971                                  ;   Outputs:	AX = extended error
  8972                                  ;
  8973                                  ;----------------------------------------------------------------------------
  8974                                  
  8975                                  NLS_GETEXT:
  8976                                  	;MOV	AX,[SS:EXTERR]	 ; return extended error
  8977 00002060 2EA1[D202]              	mov	AX,[CS:EXTERR]
  8978 00002064 C3                      	RETN
  8979                                  
  8980                                  ;============================================================================
  8981                                  ; EcritDisk, LcritDisk, EcritDevice, LCritDevice
  8982                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  8983                                  ;============================================================================
  8984                                  ; 20/07/2018 - Retro DOS v3.0
  8985                                  
  8986                                  	; MSDOS 3.3
  8987                                  	; 08/08/2018 - Retro DSOS v3.0
  8988                                  EcritMem:
  8989                                  EcritSFT:
  8990                                  	;
  8991                                  EcritDisk:
  8992                                  	;push	ax
  8993 00002065 C3                      	retn
  8994                                  	
  8995 00002066 B80180                  	mov	ax,8001h
  8996 00002069 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  8997                                  			; AL = critical section number (00h-0Fh)
  8998 0000206B 58                      	pop	ax
  8999 0000206C C3                      	retn
  9000                                  
  9001                                  	; MSDOS 3.3
  9002                                  	; 08/08/2018 - Retro DSOS v3.0
  9003                                  LcritMem:
  9004                                  LcritSFT:
  9005                                  	;
  9006                                  LcritDisk:
  9007                                  	;push	ax
  9008 0000206D C3                      	retn
  9009                                  	
  9010 0000206E B80181                  	mov	ax,8101h
  9011 00002071 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9012                                  			; AL = critical section number (00h-0Fh)
  9013 00002073 58                      	pop	ax
  9014 00002074 C3                      	retn
  9015                                  
  9016                                  EcritDevice:
  9017                                  	;push	ax
  9018 00002075 C3                      	retn
  9019                                  	
  9020 00002076 B80280                  	mov	ax,8002h
  9021 00002079 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9022                                  			; AL = critical section number (00h-0Fh)
  9023 0000207B 58                      	pop	ax
  9024 0000207C C3                      	retn
  9025                                  
  9026                                  LcritDevice:
  9027                                  	;push	ax
  9028 0000207D C3                      	retn
  9029                                  	
  9030 0000207E B80281                  	mov	ax,8102h
  9031 00002081 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9032                                  			; AL = critical section number (00h-0Fh)
  9033 00002083 58                      	pop	ax
  9034 00002084 C3                      	retn
  9035                                  
  9036                                  ;============================================================================
  9037                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9038                                  ;============================================================================
  9039                                  ; 20/07/2018 - Retro DOS v3.0
  9040                                  
  9041                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9042                                  
  9043                                  ; Some old versions of the 80286 have a bug in the chip.  The popf
  9044                                  ; instruction will enable interrupts.  Therefore in a section of code with
  9045                                  ; interrupts disabled and you need a popf instruction use the 'popff'
  9046                                  ; macro instead.
  9047                                  ;
  9048                                  
  9049                                  ;%macro POPFF 0
  9050                                  ;	jmp	$+3
  9051                                  ;	iret
  9052                                  ;	push	cs
  9053                                  ;	call	$-2
  9054                                  ;%endmacro
  9055                                  
  9056                                  ;**	CRIT.ASM - Critical Section Routines
  9057                                  ;
  9058                                  ;	Critical section handlers
  9059                                  ;
  9060                                  ;	Modification history:
  9061                                  ;
  9062                                  ;	    Created: ARR 30 March 1983
  9063                                  
  9064                                  ;
  9065                                  ;SR; This variable is set when the redir installs itself
  9066                                  ;
  9067                                  	;I_need redir_patch,BYTE
  9068                                  
  9069                                  ; Break	<Critical section handlers>
  9070                                  
  9071                                  ;   Each handler must leave everything untouched; including flags!
  9072                                  ;
  9073                                  ;   Sleaze for time savings:  first instruction is a return.  This is patched
  9074                                  ;   by the sharer to be a PUSH AX to complete the correct routines.
  9075                                  
  9076                                  ;Procedure  EcritDisk,NEAR
  9077                                  	;public  EcritMem
  9078                                  	;public  EcritSFT
  9079                                  ;ECritMEM    LABEL   NEAR
  9080                                  ;ECritSFT    LABEL   NEAR
  9081                                  
  9082                                  ;
  9083                                  ;SR; Check if critical section is to be entered
  9084                                  ;
  9085                                  
  9086                                  ;	pushf
  9087                                  ;	cmp	ss:[redir_patch],0
  9088                                  ;	jz	@f
  9089                                  ;	popff
  9090                                  ;
  9091                                  ;       PUSH    AX
  9092                                  ;	MOV     AX,8000h+critDisk
  9093                                  ;	INT     int_ibm
  9094                                  ;	POP     AX
  9095                                  ;	return
  9096                                  ;@@:
  9097                                  ;	popff
  9098                                  ;	ret
  9099                                  ;EndProc EcritDisk
  9100                                  
  9101                                  ;Procedure   LcritDisk,NEAR
  9102                                  ;	public  LcritMem
  9103                                  ;	public  LcritSFT
  9104                                  ;LCritMEM    LABEL   NEAR
  9105                                  ;LCritSFT    LABEL   NEAR
  9106                                  
  9107                                  ;
  9108                                  ;SR; Check if critical section is to be entered
  9109                                  ;
  9110                                  
  9111                                  ;	pushf
  9112                                  ;	cmp	ss:[redir_patch],0
  9113                                  ;	jz	@f
  9114                                  ;	popff
  9115                                  
  9116                                  ;       PUSH    AX
  9117                                  ;	MOV     AX,8100h+critDisk
  9118                                  ;	INT     int_ibm
  9119                                  ;	POP     AX
  9120                                  ;	return
  9121                                  ;@@:
  9122                                  ;	popff
  9123                                  ;	ret
  9124                                  
  9125                                  ;EndProc LcritDisk
  9126                                  
  9127                                  ;Procedure   EcritDevice,NEAR
  9128                                  ;
  9129                                  ;SR; Check if critical section is to be entered
  9130                                  ;
  9131                                  
  9132                                  ;	pushf
  9133                                  ;	cmp	ss:[redir_patch],0
  9134                                  ;	jz	@f
  9135                                  ;	popff
  9136                                  
  9137                                  ;       PUSH    AX
  9138                                  ;	MOV     AX,8000h+critDevice
  9139                                  ;	INT     int_ibm
  9140                                  ;	POP     AX
  9141                                  ;	return
  9142                                  ;@@:
  9143                                  ;	popff
  9144                                  ;	ret
  9145                                  
  9146                                  ;EndProc EcritDevice
  9147                                  
  9148                                  ;Procedure   LcritDevice,NEAR
  9149                                  ;
  9150                                  ;SR; Check if critical section is to be entered
  9151                                  ;
  9152                                  
  9153                                  ;	pushf
  9154                                  ;	cmp	ss:[redir_patch],0
  9155                                  ;	jz	@f
  9156                                  ;	popff
  9157                                  
  9158                                  ;       PUSH    AX
  9159                                  ;	MOV     AX,8100h+critDevice
  9160                                  ;	INT     int_ibm
  9161                                  ;	POP     AX
  9162                                  ;	return
  9163                                  ;@@:
  9164                                  ;	popff
  9165                                  ;	ret
  9166                                  
  9167                                  ;EndProc LcritDevice
  9168                                  
  9169                                  
  9170                                  ;============================================================================
  9171                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9172                                  ;============================================================================
  9173                                  ; 20/07/2018 - Retro DOS v3.0
  9174                                  
  9175                                  ;============================================================================
  9176                                  ; STDIO.ASM - (MSDOS 2.0)
  9177                                  ;============================================================================
  9178                                  
  9179                                  ;
  9180                                  ; Standard device IO for MSDOS (first 12 function calls)
  9181                                  ;
  9182                                  
  9183                                  ;.xlist
  9184                                  ;.xcref
  9185                                  ;INCLUDE STDSW.ASM
  9186                                  ;INCLUDE DOSSEG.ASM
  9187                                  ;.cref
  9188                                  ;.list
  9189                                  
  9190                                  ;TITLE   STDIO - device IO for MSDOS
  9191                                  ;NAME    STDIO
  9192                                  
  9193                                  ;INCLUDE IO.ASM
  9194                                  
  9195                                  ; ---------------------------------------------------------------------------
  9196                                  ;
  9197                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9198                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9199                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9200                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9201                                  ;			    to restore MSDOS 2.0 device IO source code 
  9202                                  ;
  9203                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9204                                  	
  9205                                  ;============================================================================
  9206                                  ; STDIO.ASM - (MSDOS 2.0)
  9207                                  ;============================================================================
  9208                                  
  9209                                  ;
  9210                                  ; Standard device IO for MSDOS (first 12 function calls)
  9211                                  ;
  9212                                  
  9213                                  ;.xlist
  9214                                  ;.xcref
  9215                                  ;INCLUDE STDSW.ASM
  9216                                  ;INCLUDE DOSSEG.ASM
  9217                                  ;.cref
  9218                                  ;.list
  9219                                  
  9220                                  ;TITLE   STDIO - device IO for MSDOS
  9221                                  ;NAME    STDIO
  9222                                  
  9223                                  ;INCLUDE IO.ASM
  9224                                  
  9225                                  ; ---------------------------------------------------------------------------
  9226                                  ;
  9227                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9228                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9229                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9230                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9231                                  ;			    to restore MSDOS 2.0 device IO source code 
  9232                                  ;
  9233                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9234                                  ;
  9235                                  ;============================================================================
  9236                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9237                                  ;============================================================================
  9238                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9239                                  
  9240                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9241                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9242                                  
  9243                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9244                                  ;
  9245                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9246                                  ;	NAME	IBMCPMIO
  9247                                  
  9248                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9249                                  ;
  9250                                  ;	$Std_Con_Input_No_Echo
  9251                                  ;	$Std_Con_String_Output
  9252                                  ;	$Std_Con_String_Input
  9253                                  ;	$RawConIO
  9254                                  ;	$RawConInput
  9255                                  ;	RAWOUT
  9256                                  ;	RAWOUT2
  9257                                  ;
  9258                                  
  9259                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9260                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9261                                  ; references to be SS or CS relative which is desired.
  9262                                  
  9263                                  ; ---------------------------------------------------------------------------
  9264                                  
  9265                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9266                                  ;	NAME	CPMIO2
  9267                                  
  9268                                  ;
  9269                                  ;	Microsoft Confidential
  9270                                  ;	Copyright (C) Microsoft Corporation 1991
  9271                                  ;	All Rights Reserved.
  9272                                  ;
  9273                                  
  9274                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9275                                  ;
  9276                                  ;	$Std_Con_Input
  9277                                  ;	$Std_Con_Output
  9278                                  ;	OUTT
  9279                                  ;	TAB
  9280                                  ;	BUFOUT
  9281                                  ;	$Std_Aux_Input
  9282                                  ;	$Std_Aux_Output
  9283                                  ;	$Std_Printer_Output
  9284                                  ;	$Std_Con_Input_Status
  9285                                  ;	$Std_Con_Input_Flush
  9286                                  ;
  9287                                  ;	Revision History:
  9288                                  ;
  9289                                  ;	  AN000	 version 4.00 - Jan. 1988
  9290                                  
  9291                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9292                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9293                                  ; references to be SS or CS relative which is desired.
  9294                                  
  9295                                  ;DOSCODE SEGMENT
  9296                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9297                                  
  9298                                  
  9299                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9300                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9301                                  ;hkn;	not valid. 
  9302                                  
  9303                                  ;
  9304                                  ;----------------------------------------------------------------------------
  9305                                  ;
  9306                                  ; Procedure : $Std_Con_Input_No_Echo
  9307                                  ;
  9308                                  ;----------------------------------------------------------------------------
  9309                                  ;
  9310                                  
  9311                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9312                                  
  9313                                  ; Inputs:
  9314                                  ;	None
  9315                                  ; Function:
  9316                                  ;	Input character from console, no echo
  9317                                  ; Returns:
  9318                                  ;	AL = character
  9319                                  
  9320 00002085 1E                      	push	ds
  9321 00002086 56                      	push	si
  9322                                  INTEST:
  9323 00002087 E86736                  	call	STATCHK
  9324 0000208A 754D                    	jnz	short GET ; 08/09/2018
  9325                                  ;*************************************************************************
  9326                                  ;hkn; SS override
  9327 0000208C 36803E[060A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9328 00002092 7505                    	jnz	short no_sys_wait
  9329 00002094 B405                    	mov	ah,5			; get input status with system wait
  9330 00002096 E8B52C                  	call	IOFUNC
  9331                                  no_sys_wait:
  9332                                  ;**************************************************************************
  9333 00002099 B484                    	MOV	AH,84h
  9334 0000209B CD2A                    	INT	int_IBM	 ; int 2Ah
  9335                                  
  9336                                  ;;; 7/15/86  update the date in the idle loop
  9337                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9338                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9339                                  
  9340                                  ;hkn; SS override
  9341 0000209D 36803E[8D0F]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9342 000020A3 752D                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9343 000020A5 50                      	PUSH	AX
  9344 000020A6 53                      	PUSH	BX			; following is tricky,
  9345 000020A7 51                      	PUSH	CX			; it may be called by critical handler
  9346 000020A8 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9347                                  					; other's READ or WRITE
  9348 000020A9 1E                      	PUSH	DS			; save DS = SFT's sgement
  9349                                  
  9350                                  ;hkn; READTIME must use ds = DOSDATA
  9351                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9352                                  
  9353                                  	;push	ss
  9354 000020AA 0E                      	PUSH	CS
  9355 000020AB 1F                      	POP	DS
  9356                                  
  9357 000020AC B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9358 000020AF E89F02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9359                                  	;invoke	READTIME		; readtime
  9360 000020B2 E828F8                  	call	READTIME
  9361 000020B5 B80100                  	MOV	AX,1
  9362 000020B8 E89602                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9363                                  	;
  9364                                  	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9365                                  	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9366 000020BB 53                      	push	bx
  9367 000020BC BB[8D0F]                	mov	bx,DATE_FLAG
  9368 000020BF 83C302                  	add	bx,2  ; mov bx,FETCHI_FLAG
  9369 000020C2 2E813F7258              	cmp	word [cs:bx],5872h
  9370 000020C7 7403                    	jz	short FETCHI_TAG_chk_ok
  9371 000020C9 E8B552                  	call	DOSINIT
  9372                                  FETCHI_TAG_chk_ok:
  9373 000020CC 5B                      	pop	bx
  9374                                  	;
  9375 000020CD 1F                      	POP	DS			; restore DS
  9376 000020CE 5A                      	POP	DX
  9377 000020CF 59                      	POP	CX
  9378 000020D0 5B                      	POP	BX
  9379 000020D1 58                      	POP	AX
  9380                                  NoUpdate:
  9381                                  
  9382                                  ;hkn; SS override
  9383 000020D2 36FF06[8D0F]            	INC	word [SS:DATE_FLAG]
  9384                                  
  9385                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9386 000020D7 EBAE                    	JMP	short INTEST
  9387                                  GET:
  9388 000020D9 30E4                    	XOR	AH,AH
  9389 000020DB E8702C                  	call	IOFUNC
  9390 000020DE 5E                      	POP	SI
  9391 000020DF 1F                      	POP	DS
  9392                                  ;;; 7/15/86
  9393                                  
  9394                                  ;hkn; SS override
  9395                                  	; MSDOS 6.0
  9396 000020E0 36C606[8B0F]00          	MOV	BYTE [SS:SCAN_FLAG],0
  9397                                  	;
  9398 000020E6 3C00                    	CMP	AL,0	    ; extended code ( AL )
  9399 000020E8 7506                    	JNZ	short noscan
  9400                                  
  9401                                  ;hkn; SS override
  9402 000020EA 36C606[8B0F]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
  9403                                  
  9404                                  noscan:
  9405 000020F0 C3                      	retn
  9406                                  ;
  9407                                  ;----------------------------------------------------------------------------
  9408                                  ;
  9409                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
  9410                                  ;
  9411                                  ;
  9412                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
  9413                                  ;	EXIT	none
  9414                                  ;	USES	ALL
  9415                                  ;
  9416                                  ;----------------------------------------------------------------------------
  9417                                  ;
  9418                                  
  9419                                  _$STD_CON_STRING_OUTPUT:	;System call 9
  9420                                  
  9421 000020F1 89D6                    	mov	si,dx
  9422                                  STRING_OUT1:	
  9423 000020F3 AC                      	lodsb
  9424 000020F4 3C24                    	cmp	al,'$'
  9425 000020F6 74F8                    	jz	short noscan
  9426                                  NEXT_STR1:
  9427 000020F8 E88202                  	call	OUTT
  9428 000020FB EBF6                    	jmp	short STRING_OUT1
  9429                                  
  9430                                  ;----------------------------------------------------------------------------
  9431                                  ;
  9432                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
  9433                                  ;
  9434                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
  9435                                  ;
  9436                                  ;	ENTRY	(ds:dx) = input buffer
  9437                                  ;	EXIT	none
  9438                                  ;	USES	ALL
  9439                                  ;
  9440                                  ;----------------------------------------------------------------------------
  9441                                  
  9442                                  _$STD_CON_STRING_INPUT:		;System call 10
  9443                                  
  9444 000020FD 8CD0                    	mov	ax,ss
  9445 000020FF 8EC0                    	mov	es,ax
  9446 00002101 89D6                    	mov	si,dx
  9447 00002103 30ED                    	xor	ch,ch
  9448 00002105 AD                      	lodsw
  9449                                  
  9450                                  ;	(AL) = the buffer length
  9451                                  ;	(AH) = the template length
  9452                                  
  9453 00002106 08C0                            or	al,al
  9454 00002108 74E6                            jz	short noscan	;Buffer is 0 length!!?
  9455 0000210A 88E3                    	mov	bl,ah		;Init template counter
  9456 0000210C 88EF                            mov	bh,ch		;Init template counter
  9457                                  
  9458                                  ;	(BL) = the number of bytes in the template
  9459                                  
  9460 0000210E 38D8                            cmp	al,bl
  9461 00002110 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
  9462 00002112 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
  9463 00002115 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
  9464                                  
  9465                                  ; The number of chars in the template is >= the number of chars in buffer or
  9466                                  ; there is no CR at the end of the template.  This is an inconsistant state
  9467                                  ; of affairs.  Pretend that the template was empty:
  9468                                  ;
  9469                                  
  9470                                  NOEDIT:	
  9471 00002117 88EB                    	mov	bl,ch		;Reset buffer
  9472                                  EDITON: 
  9473 00002119 88C2                    	mov	dl,al
  9474 0000211B 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
  9475                                  
  9476                                  ;	Top level.  We begin to read a line in.
  9477                                  
  9478                                  NEWLIN: 
  9479 0000211C 36A0[A701]              	mov	al,[SS:CARPOS]
  9480 00002120 36A2[A801]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
  9481                                  
  9482 00002124 56                      	push	si
  9483 00002125 BF[A901]                	mov	di,INBUF ;Build the new line here
  9484 00002128 36882E[1405]            	mov	byte [SS:INSMODE],ch ;Insert mode off
  9485 0000212D 88EF                    	mov	bh,ch		;No chars from template yet
  9486 0000212F 88EE                    	mov	dh,ch		;No chars to new line yet
  9487 00002131 E851FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
  9488 00002134 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
  9489 00002136 7503                    	jnz	short GOTCH
  9490                                  
  9491                                  ;	This is the main loop of reading in a character and processing it.
  9492                                  ;
  9493                                  ;	(BH) = the index of the next byte in the template
  9494                                  ;	(BL) = the length of the template
  9495                                  ;	(DH) = the number of bytes in the buffer
  9496                                  ;	(DL) = the length of the buffer
  9497                                  
  9498                                  GETCH:
  9499 00002138 E84AFF                  	call	_$STD_CON_INPUT_NO_ECHO
  9500                                  GOTCH:
  9501                                  ;
  9502                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
  9503                                  ; input queue.
  9504                                  ;
  9505 0000213B 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
  9506 0000213D 74F9                    	jz	short GETCH
  9507                                  
  9508                                  ;	If the leading char is the function-key lead byte
  9509                                  
  9510 0000213F 363A06[D212]                    cmp	al,[SS:ESCCHAR]
  9511 00002144 7438                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
  9512                                  
  9513                                  ;	Rubout and ^H are both destructive backspaces.
  9514                                  
  9515 00002146 3C7F                            cmp	al,c_DEL ; 7FH
  9516 00002148 742B                            jz	short BACKSPJ
  9517 0000214A 3C08                            cmp	al,c_BS  ; 8
  9518 0000214C 7427                            jz	short BACKSPJ
  9519                                  
  9520                                  	; MSDOS 6.0
  9521                                  ;;	^W deletes backward once and then backs up until a letter is before the
  9522                                  ;;	cursor
  9523                                  ;
  9524                                  ;	CMP     AL,"W"-"@" ; 17h
  9525                                  ;
  9526                                  ;;	The removal of the comment characters before the jump statement will
  9527                                  ;;	cause ^W to backup a word.
  9528                                  ;
  9529                                  ;;***	JZ	short WordDel
  9530                                  ;	NOP
  9531                                  ;	NOP
  9532                                  ;	CMP     AL,"U"-"@" ; 15h
  9533                                  ;
  9534                                  ;;	The removal of the comment characters before the jump statement will
  9535                                  ;;	cause ^U to clear a line.
  9536                                  ;
  9537                                  ;;***	JZ	short LineDel
  9538                                  ;	NOP
  9539                                  ;	NOP
  9540                                  
  9541                                  ;	CR terminates the line.
  9542                                  
  9543 0000214E 3C0D                            cmp	al,c_CR ; 0Dh
  9544 00002150 742F                            jz	short ENDLIN
  9545                                  
  9546                                  ;	LF goes to a new line and keeps on reading.
  9547                                  
  9548 00002152 3C0A                            cmp	al,c_LF ; 0Ah
  9549 00002154 7441                    	jz	short PHYCRLF
  9550                                  
  9551                                  ;	^X (or ESC) deletes the line and starts over
  9552                                  
  9553                                  	; MSDOS 3.3
  9554                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
  9555                                  	;jz	short KILNEW
  9556                                  	;MSDOS 6.0
  9557 00002156 3C1B                    	cmp	al,CANCEL ; 1Bh
  9558 00002158 7442                    	jz	short KILNEW
  9559                                  
  9560                                  ; Otherwise, we save the input character.
  9561                                  
  9562                                  SAVCH:	
  9563 0000215A 38D6                    	cmp	dh,dl
  9564 0000215C 7319                    	jnb	short BUFFUL		; buffer is full.
  9565 0000215E AA                              stosb
  9566 0000215F FEC6                    	inc	dh                      ; increment count in buffer.
  9567 00002161 E8B302                  	call	BUFOUT			;Print control chars nicely
  9568                                  
  9569 00002164 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9570 0000216A 75CC                    	jnz	short GETCH		; insertmode => don't advance template
  9571 0000216C 38DF                            cmp	bh,bl
  9572 0000216E 73C8                            jnb	short GETCH		; no more characters in template
  9573 00002170 46                              inc	si                      ; Skip to next char in template
  9574 00002171 FEC7                            inc	bh                      ; remember position in template
  9575 00002173 EBC3                            jmp	short GETCH
  9576                                  
  9577                                  BACKSPJ: 
  9578 00002175 EB38                    	jmp	short BACKSP
  9579                                  
  9580                                  BUFFUL: 
  9581 00002177 B007                    	mov	al, 7			; Bell to signal full buffer
  9582 00002179 E80102                  	call	OUTT
  9583 0000217C EBBA                    	jmp	short GETCH
  9584                                  
  9585                                  ESCAPE: 
  9586                                  	;transfer OEMFunctionKey
  9587 0000217E E98CF6                  	JMP	OEMFunctionKey
  9588                                  
  9589                                  ENDLIN:
  9590 00002181 AA                              stosb				; Put the CR in the buffer
  9591 00002182 E8F801                  	call	OUTT                    ; Echo it
  9592 00002185 5F                              pop	di                      ; Get start of user buffer
  9593 00002186 8875FF                          mov	[di-1], dh		; Tell user how many bytes
  9594 00002189 FEC6                            inc	dh			; DH is length including CR
  9595                                  
  9596                                  COPYNEW:
  9597                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
  9598                                  	;mov	bp, es
  9599                                  	;mov	bx, ds
  9600                                  	;mov	es, bx
  9601                                  	;mov	ds, bp
  9602                                  	;mov	si, INBUF
  9603                                  	;mov	cl, dh
  9604                                  	;rep	movsb
  9605                                  	;retn
  9606                                  
  9607                                  	; CPMIO.ASM (MSDOS 6.0)
  9608                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
  9609                                  	;SAVE	<DS,ES>
  9610 0000218B 1E                      	PUSH	DS
  9611 0000218C 06                      	PUSH	ES
  9612                                  	;RESTORE <DS,ES>		; XCHG ES,DS
  9613 0000218D 1F                      	POP	DS
  9614 0000218E 07                      	POP	ES
  9615                                  
  9616                                  ;;hkn; INBUF is in DOSDATA
  9617 0000218F BE[A901]                        MOV     SI,INBUF
  9618 00002192 88F1                            MOV     CL,DH                   ; set up count
  9619 00002194 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
  9620                                  OLDBAK_RETN:
  9621 00002196 C3                              RETN
  9622                                  
  9623                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
  9624                                  
  9625                                  PHYCRLF:
  9626 00002197 E82001                  	CALL	CRLF
  9627 0000219A EB9C                            JMP	short GETCH
  9628                                  
  9629                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
  9630                                  
  9631                                  	; Note: Following routines were not used in IBMDOS.COM
  9632                                  	;	-CRTL+W, CRTL+U is not activated-
  9633                                  	;	but they were in the kernel code!?)
  9634                                  ;
  9635                                  ; Delete the previous line
  9636                                  ;
  9637                                  ;LineDel:
  9638                                  ;	OR      DH,DH
  9639                                  ;	JZ	short GetCh
  9640                                  ;	Call    BackSpace
  9641                                  ;	JMP	short LineDel
  9642                                  
  9643                                  ;
  9644                                  ; delete the previous word.
  9645                                  ;
  9646                                  ;WordDel:
  9647                                  ;WordLoop:
  9648                                  ;	Call    BackSpace               ; backspace the one spot
  9649                                  ;	OR      DH,DH
  9650                                  ;	JZ	short GetChJ
  9651                                  ;	MOV     AL,[ES:DI-1]
  9652                                  ;	cmp     al,'0'
  9653                                  ;	jb	short GetChj
  9654                                  ;	cmp     al,'9'
  9655                                  ;	jbe	short WordLoop
  9656                                  ;	OR      AL,20h
  9657                                  ;	CMP     AL,'a'
  9658                                  ;	JB	short GetChJ
  9659                                  ;	CMP     AL,'z'
  9660                                  ;	JBE	short WordLoop
  9661                                  ;getchj: 
  9662                                  ;	JMP	GetCh
  9663                                  
  9664                                  ; The user wants to throw away what he's typed in and wants to start over.
  9665                                  ; We print the backslash and then go to the next line and tab to the correct
  9666                                  ; spot to begin the buffered input.
  9667                                  
  9668                                  KILNEW:
  9669 0000219C B05C                            mov	al,'\'
  9670 0000219E E8DC01                          call	OUTT            ;Print the CANCEL indicator
  9671 000021A1 5E                              pop	si		;Remember start of edit buffer
  9672                                  PUTNEW:
  9673 000021A2 E81501                  	call	CRLF            ;Go to next line on screen
  9674 000021A5 36A0[A801]              	mov	al,[SS:STARTPOS]
  9675 000021A9 E84702                  	call	TAB             ;Tab over
  9676 000021AC E96DFF                          JMP     NEWLIN		;Start over again
  9677                                  
  9678                                  ;	Destructively back up one character position
  9679                                  
  9680                                  BACKSP:
  9681                                  	; 09/09/2018
  9682 000021AF E80200                  	Call    BackSpace
  9683 000021B2 EB84                    	JMP     GETCH
  9684                                  
  9685                                  BackSpace:
  9686 000021B4 08F6                    	or	dh,dh
  9687 000021B6 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
  9688 000021B8 E85800                  	call	BACKUP          ;Do the backup
  9689 000021BB 268A05                  	mov	al,[es:di]	;Get the deleted char
  9690 000021BE 3C20                            cmp	al,20h	; ' '
  9691 000021C0 730F                    	jnb	short OLDBAK	;Was a normal char
  9692 000021C2 3C09                            cmp	al,c_HT ; 9
  9693 000021C4 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
  9694                                  ;; 9/27/86 fix for ctrl-U backspace
  9695 000021C6 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
  9696 000021C8 7407                    	JZ	short OLDBAK
  9697 000021CA 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
  9698 000021CC 7403                    	JZ	short OLDBAK
  9699                                  ;; 9/27/86 fix for ctrl-U backspace
  9700 000021CE E84500                          call	BACKMES         ;Was a control char, zap the '^'
  9701                                  OLDBAK:
  9702 000021D1 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9703 000021D7 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
  9704 000021D9 08FF                    	or	bh,bh
  9705 000021DB 74B9                            jz	short OLDBAK_RETN 
  9706                                  				;Not advanced in template, stay where we are
  9707 000021DD FECF                    	dec	bh		;Go back in template
  9708 000021DF 4E                              dec	si
  9709 000021E0 C3                      	retn
  9710                                  
  9711                                  BAKTAB:
  9712 000021E1 57                              push	di
  9713 000021E2 4F                              dec	di		;Back up one char
  9714 000021E3 FD                              std			;Go backward
  9715 000021E4 88F1                            mov	cl,dh		;Number of chars currently in line
  9716 000021E6 B020                            mov	al,20h	; ' '
  9717 000021E8 53                              push	bx
  9718 000021E9 B307                            mov	bl,7		;Max
  9719 000021EB E30E                            jcxz	FIGTAB		;At start, do nothing
  9720                                  FNDPOS:
  9721 000021ED AE                              scasb			;Look back
  9722 000021EE 7609                    	jbe	short CHKCNT
  9723 000021F0 26807D0109              	cmp	byte [es:di+1],9
  9724 000021F5 7409                    	jz	short HAVTAB	;Found a tab
  9725 000021F7 FECB                    	dec	bl		;Back one char if non tab control char
  9726                                  CHKCNT:
  9727 000021F9 E2F2                            loop	FNDPOS
  9728                                  FIGTAB:		
  9729 000021FB 362A1E[A801]            	sub	bl,[SS:STARTPOS]
  9730                                  HAVTAB:
  9731 00002200 28F3                    	sub	bl,dh
  9732 00002202 00D9                    	add	cl,bl
  9733 00002204 80E107                  	and	cl,7		;CX has correct number to erase
  9734 00002207 FC                      	cld			;Back to normal
  9735 00002208 5B                      	pop	bx
  9736 00002209 5F                      	pop	di
  9737 0000220A 74C5                    	jz	short OLDBAK	;Nothing to erase
  9738                                  TABBAK:
  9739 0000220C E80700                  	call	BACKMES
  9740 0000220F E2FB                    	loop	TABBAK		;Erase correct number of chars
  9741 00002211 EBBE                    	jmp	short OLDBAK
  9742                                  
  9743                                  BACKUP:
  9744 00002213 FECE                            dec	dh             ;Back up in line
  9745 00002215 4F                              dec	di
  9746                                  BACKMES:
  9747 00002216 B008                            mov	al,c_BS ; 8	;Backspace
  9748 00002218 E86201                          call	OUTT
  9749 0000221B B020                            mov	al,20h ; ' '	;Erase
  9750 0000221D E85D01                          call	OUTT
  9751 00002220 B008                            mov	al,c_BS ; 8	;Backspace
  9752 00002222 E95801                  	jmp	OUTT		;Done
  9753                                  
  9754                                  ;User really wants an ESC character in his line
  9755                                  TWOESC:	
  9756 00002225 36A0[D212]              	mov	al,[SS:ESCCHAR]
  9757 00002229 E92EFF                  	jmp	SAVCH
  9758                                  
  9759                                  ;Copy the rest of the template
  9760                                  COPYLIN:
  9761 0000222C 88D9                            mov	cl,bl		;Total size of template
  9762 0000222E 28F9                    	sub	cl,bh		;Minus position in template, is number to move
  9763 00002230 EB07                            jmp	short COPYEACH
  9764                                  
  9765                                  COPYSTR:
  9766 00002232 E83400                  	call	FINDOLD         ;Find the char
  9767 00002235 EB02                    	jmp	short COPYEACH  ;Copy up to it
  9768                                  
  9769                                  ;Copy one char from template to line
  9770                                  COPYONE:
  9771 00002237 B101                            mov	cl,1
  9772                                  ;Copy CX chars from template to line
  9773                                  COPYEACH:
  9774 00002239 36C606[1405]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
  9775 0000223F 38D6                    	cmp	dh,dl
  9776 00002241 740F                            jz	short GETCH2		;At end of line, can't do anything
  9777 00002243 38DF                            cmp	bh,bl
  9778 00002245 740B                            jz	short GETCH2		;At end of template, can't do anything
  9779 00002247 AC                              lodsb
  9780 00002248 AA                              stosb
  9781 00002249 E8CB01                  	call	BUFOUT
  9782 0000224C FEC7                            inc	bh			;Ahead in template
  9783 0000224E FEC6                            inc	dh			;Ahead in line
  9784 00002250 E2E7                            loop	COPYEACH
  9785                                  GETCH2:
  9786 00002252 E9E3FE                          jmp	GETCH
  9787                                  
  9788                                  ;Skip one char in template
  9789                                  SKIPONE:
  9790 00002255 38DF                    	cmp	bh,bl
  9791 00002257 74F9                    	jz	short GETCH2		;At end of template
  9792 00002259 FEC7                    	inc	bh			;Ahead in templat
  9793 0000225B 46                      	inc	si
  9794 0000225C E9D9FE                  	jmp	GETCH
  9795                                  
  9796                                  SKIPSTR:
  9797 0000225F E80700                  	call	FINDOLD                 ;Find out how far to go
  9798 00002262 01CE                            add	si,cx			;Go there
  9799 00002264 00CF                            add	bh,cl
  9800 00002266 E9CFFE                          jmp	GETCH
  9801                                  
  9802                                  ;Get the next user char, and look ahead in template for a match
  9803                                  ;CX indicates how many chars to skip to get there on output
  9804                                  ;NOTE: WARNING: If the operation cannot be done, the return
  9805                                  ;       address is popped off and a jump to GETCH is taken.
  9806                                  ;       Make sure nothing extra on stack when this routine
  9807                                  ;       is called!!! (no PUSHes before calling it).
  9808                                  FINDOLD:
  9809 00002269 E819FE                          call	_$STD_CON_INPUT_NO_ECHO
  9810                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
  9811 0000226C 363A06[D212]            	CMP     AL,[SS:ESCCHAR]	; did he type a function key?
  9812                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
  9813                                  	;CMP	AL,[CS:ESCCHAR]
  9814 00002271 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
  9815 00002273 E80FFE                          CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
  9816 00002276 EB1D                            JMP     SHORT NOTFND		; go try again
  9817                                  FINDSETUP:
  9818 00002278 88D9                    	mov	cl,bl
  9819 0000227A 28F9                            sub	cl,bh		;CX is number of chars to end of template
  9820 0000227C 7417                    	jz	short NOTFND	;At end of template
  9821 0000227E 49                              dec	cx		;Cannot point past end, limit search
  9822 0000227F 7414                            jz	short NOTFND	 ;If only one char in template, forget it
  9823 00002281 06                      	push	es
  9824 00002282 1E                      	push	ds
  9825 00002283 07                      	pop	es
  9826 00002284 57                      	push	di
  9827 00002285 89F7                    	mov	di,si		;Template to ES:DI
  9828 00002287 47                      	inc	di
  9829 00002288 F2AE                    	repne	scasb		;Look
  9830 0000228A 5F                      	pop	di
  9831 0000228B 07                      	pop	es
  9832 0000228C 7507                    	jnz	short NOTFND	;Didn't find the char
  9833 0000228E F6D1                            not	cl		;Turn how far to go into how far we went
  9834 00002290 00D9                            add	cl,bl		;Add size of template
  9835 00002292 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
  9836                                  FINDOLD_RETN:
  9837 00002294 C3                      	retn
  9838                                  
  9839                                  NOTFND:
  9840 00002295 5D                              pop	bp              ;Chuck return address
  9841 00002296 E99FFE                          jmp	GETCH
  9842                                  
  9843                                  REEDIT:
  9844 00002299 B040                    	mov	al,'@'		;Output re-edit character
  9845 0000229B E8DF00                  	call	OUTT
  9846 0000229E 5F                      	pop	di
  9847 0000229F 57                      	push	di
  9848 000022A0 06                      	push	es
  9849 000022A1 1E                      	push	ds
  9850 000022A2 E8E6FE                  	call	COPYNEW		;Copy current line into template
  9851 000022A5 1F                      	pop	ds
  9852 000022A6 07                      	pop	es
  9853 000022A7 5E                      	pop	si
  9854 000022A8 88F3                    	mov	bl,dh		;Size of line is new size template
  9855 000022AA E9F5FE                  	jmp	PUTNEW		;Start over again
  9856                                  
  9857                                  EXITINS:
  9858                                  ENTERINS:
  9859 000022AD 36F616[1405]            	not	byte [SS:INSMODE]
  9860 000022B2 E983FE                  	jmp	GETCH
  9861                                  
  9862                                  ;Put a real live ^Z in the buffer (embedded)
  9863                                  CTRLZ:
  9864 000022B5 B01A                    	mov	al,"Z"-"@" ; 1Ah
  9865 000022B7 E9A0FE                          jmp	SAVCH
  9866                                  
  9867                                  ;Output a CRLF
  9868                                  CRLF:
  9869 000022BA B00D                    	mov	al,c_CR ; 0Dh 
  9870 000022BC E8BE00                  	call	OUTT
  9871 000022BF B00A                    	mov	al,c_LF ; 0Ah
  9872 000022C1 E9B900                  	jmp	OUTT
  9873                                  
  9874                                  ;
  9875                                  ;----------------------------------------------------------------------------
  9876                                  ;
  9877                                  ;**	$RAW_CON_IO - Do Raw Console I/O
  9878                                  ;
  9879                                  ;	Input or output raw character from console, no echo
  9880                                  ;
  9881                                  ;	ENTRY	DL = -1 if input
  9882                                  ;		   =  output character if output
  9883                                  ;	EXIT	(AL) = input character if input
  9884                                  ;	USES	all
  9885                                  ;
  9886                                  ;----------------------------------------------------------------------------
  9887                                  ; 20/07/2018 - Retro DOS v3.0
  9888                                  
  9889                                  _$RAW_CON_IO:			; System call 6
  9890                                  
  9891 000022C4 88D0                            MOV     AL,DL
  9892 000022C6 3CFF                            CMP     AL,-1
  9893 000022C8 7542                            JNZ     SHORT RAWOUT
  9894                                          ;LES 	DI,[USER_SP]	; Get pointer to register save area
  9895 000022CA 36C43E[1E05]                    LES     DI,[SS:USER_SP] ; 12/03/2018
  9896 000022CF 31DB                    	XOR     BX,BX
  9897                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9898 000022D1 E8E01D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9899                                          ;JC	SHORT RET17
  9900 000022D4 72BE                            jc	short FINDOLD_RETN
  9901 000022D6 B401                    	MOV     AH,1
  9902 000022D8 E8732A                          CALL	IOFUNC
  9903 000022DB 750B                            JNZ     SHORT RESFLG
  9904 000022DD E8F233                          CALL	SPOOLINT
  9905                                          ;OR	BYTE [ES:DI+16H],40H
  9906 000022E0 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
  9907 000022E5 30C0                            XOR     AL,AL
  9908                                  RET17:
  9909 000022E7 C3                              RETN
  9910                                  
  9911                                  RESFLG:
  9912                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
  9913 000022E8 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
  9914                                  				; Reset user's zero flag
  9915                                  ;RILP:
  9916                                  rci0:
  9917 000022ED E8E233                       	CALL	SPOOLINT
  9918                                  
  9919                                  ;
  9920                                  ;----------------------------------------------------------------------------
  9921                                  ;
  9922                                  ;**	$Raw_CON_INPUT - Raw Console Input
  9923                                  ;
  9924                                  ;	Input raw character from console, no echo
  9925                                  ;
  9926                                  ;	ENTRY	none
  9927                                  ;	EXIT	(al) = character
  9928                                  ;	USES	all
  9929                                  ;
  9930                                  ;----------------------------------------------------------------------------
  9931                                  ;
  9932                                  
  9933                                  ;rci0:	invoke	SPOOLINT
  9934                                  
  9935                                  	;entry	$RAW_CON_INPUT
  9936                                  
  9937                                  _$RAW_CON_INPUT:		; System call 7
  9938 000022F0 53                      	push	bx
  9939 000022F1 31DB                            XOR     BX,BX
  9940                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9941 000022F3 E8BE1D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9942 000022F6 5B                              pop	bx
  9943 000022F7 72EE                    	JC	SHORT RET17
  9944 000022F9 B401                            MOV     AH,1
  9945 000022FB E8502A                          CALL	IOFUNC
  9946                                  	;JZ	SHORT RILP	; MSDOS 2.11
  9947                                  	;XOR     AH,AH
  9948                                          ;CALL	IOFUNC
  9949                                          ;RETN
  9950 000022FE 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
  9951 00002300 B484                    	MOV	AH,84h
  9952 00002302 CD2A                    	INT	int_IBM  ; int 2Ah
  9953 00002304 EBE7                    	JMP	short rci0
  9954                                  rci5:	
  9955 00002306 30E4                            XOR     AH,AH
  9956 00002308 E8432A                          CALL	IOFUNC
  9957 0000230B C3                              RETN
  9958                                  
  9959                                  ;
  9960                                  ;       Output the character in AL to stdout
  9961                                  ;
  9962                                  	;entry   RAWOUT
  9963                                  
  9964                                  RAWOUT:
  9965 0000230C 53                              PUSH    BX
  9966 0000230D BB0100                          MOV     BX,1
  9967                                  
  9968                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9969 00002310 E8A11D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9970 00002313 721B                            JC      SHORT RAWRET1
  9971                                  	;
  9972                                  	; MSDOS 2.11
  9973                                          ;TEST	BYTE [SI+18H],080H	; output to file?
  9974                                          ;JZ	SHORT RAWNORM		; if so, do normally
  9975                                          ;PUSH	DS
  9976                                          ;PUSH	SI
  9977                                          ;LDS	SI,[SI+19H]		; output to special?
  9978                                  	;TEST	BYTE [SI+4],ISSPEC
  9979                                  	;POP	SI
  9980                                  	;
  9981                                          
  9982                                  	; MSDOS 3.3 & MSDOS 6.0
  9983                                  	;mov	bx,[si+5]
  9984 00002315 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
  9985                                   ;
  9986                                   ; If we are a network handle OR if we are not a local device then go do the
  9987                                   ; output the hard way.
  9988                                   ;	
  9989                                  	;and	bx,8080h
  9990 00002318 81E38080                	AND	BX,sf_isnet+devid_device
  9991                                  	;cmp	bx,80h
  9992 0000231C 81FB8000                	CMP	BX,devid_device
  9993 00002320 7510                    	jnz     short RAWNORM
  9994 00002322 1E                      	push    ds
  9995                                  	;lds	bx,[si+7]
  9996 00002323 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
  9997                                  	;test	byte [bx+4],10h
  9998 00002326 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
  9999                                  	;
 10000                                  
 10001 0000232A 1F                              POP     DS
 10002 0000232B 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10003 0000232D CD29                            INT     int_fastcon   ; int 29h	; quickly output the char
 10004                                  
 10005                                          ;JMP     SHORT RAWRET
 10006                                  ;RAWNORM:
 10007                                  ;	CALL    RAWOUT3
 10008                                  
 10009                                  RAWRET: 
 10010 0000232F F8                      	CLC
 10011                                  RAWRET1:
 10012 00002330 5B                              POP     BX
 10013                                  RAWRET2:
 10014 00002331 C3                      	RETN
 10015                                  
 10016                                  RAWNORM:
 10017 00002332 E80700                  	CALL    RAWOUT3
 10018 00002335 EBF8                    	jmp	short RAWRET
 10019                                  
 10020                                  ;
 10021                                  ;       Output the character in AL to handle in BX
 10022                                  ;
 10023                                  ;	entry   RAWOUT2
 10024                                  
 10025                                  RAWOUT2:
 10026                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10027                                  	;JC	SHORT RET18
 10028 00002337 E87A1D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10029 0000233A 72F5                    	JC	SHORT RAWRET2
 10030                                  RAWOUT3:
 10031 0000233C 50                              PUSH    AX
 10032 0000233D EB03                            JMP     SHORT RAWOSTRT
 10033                                  ROLP:
 10034 0000233F E89033                          CALL	SPOOLINT
 10035                                  
 10036                                  	; MSDOS 6.0
 10037                                  	;OR	word [DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10038                                  				;AN002; set control break
 10039                                  	;;invoke DSKSTATCHK
 10040                                  	;call	DSKSTATCHK	;AN002; check control break
 10041                                  
 10042                                  RAWOSTRT:
 10043 00002342 B403                            MOV     AH,3
 10044 00002344 E8072A                          CALL    IOFUNC
 10045 00002347 74F6                            JZ      SHORT ROLP
 10046                                  
 10047                                  	; MSDOS 6.0
 10048                                  ;SR;
 10049                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10050                                  ;the user failed. We do not send a char if this happens. We however return 
 10051                                  ;to the caller with carry clear because this DOS call does not return any
 10052                                  ;status. 
 10053                                  ;
 10054                                  	;inc	ax		;fail on I24 if ax = -1
 10055                                  	;POP	AX
 10056                                  	;jz	short nosend	;yes, do not send char
 10057                                  	;MOV	AH,2
 10058                                  	;call	IOFUNC
 10059                                  ;nosend:
 10060                                  	;CLC			; Clear carry indicating successful
 10061                                  	;retn
 10062                                  
 10063                                  	; MSDOS 3.3 & MSDOS 2.11
 10064 00002349 58                              POP     AX
 10065 0000234A B402                            MOV     AH,2
 10066 0000234C E8FF29                          CALL    IOFUNC
 10067 0000234F F8                              CLC                     ; Clear carry indicating successful
 10068                                  RET18:    
 10069 00002350 C3                      	RETN
 10070                                  
 10071                                  ;;10/08/2018
 10072                                  ; 20/07/2018 - Retro DOS v3.0
 10073                                  ; ---------------------------------------------------------------------------
 10074                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10075                                  ; ---------------------------------------------------------------------------
 10076                                  
 10077                                  ; This routine is called at DOS init
 10078                                  
 10079                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10080                                  ;;OUTMES:
 10081                                  ;;	;LODS	CS:BYTE PTR [SI]
 10082                                  ;;	CS	LODSB
 10083                                  ;;	CMP     AL,"$" ; 24h
 10084                                  ;;	JZ	SHORT RET18
 10085                                  ;;	CALL	OUTT
 10086                                  ;;	JMP     SHORT OUTMES
 10087                                  
 10088                                  ; ---------------------------------------------------------------------------
 10089                                  
 10090                                  ; 20/07/2018 - Retro DOS v3.0
 10091                                  
 10092                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10093                                  
 10094                                  ;
 10095                                  ;----------------------------------------------------------------------------
 10096                                  ;
 10097                                  ; Inputs:
 10098                                  ;	AX=0 save the DEVCALL request packet
 10099                                  ;	  =1 restore the DEVCALL request packet
 10100                                  ; Function:
 10101                                  ;	save or restore the DEVCALL packet
 10102                                  ; Returns:
 10103                                  ;	none
 10104                                  ;
 10105                                  ;----------------------------------------------------------------------------
 10106                                  ;
 10107                                  
 10108                                  Save_Restore_Packet:
 10109 00002351 1E                      	PUSH	DS
 10110 00002352 06                      	PUSH	ES
 10111 00002353 56                      	PUSH	SI
 10112 00002354 57                      	PUSH	DI
 10113                                  
 10114                                  	; 09/09/2018
 10115 00002355 BF[730F]                	mov	di,FAKE_STACK_2F 
 10116 00002358 BE[0603]                	mov	si,DEVCALL
 10117                                  	;
 10118 0000235B 83F800                  	CMP	AX,0		; save packet
 10119                                  	;JZ	short save_packet
 10120 0000235E 7402                    	je	short set_seg 
 10121                                  
 10122                                  	; MSDOS 6.0
 10123                                  restore_packet:
 10124                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	 ;sourec
 10125                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	 ;destination
 10126                                  	; MSDOS 3.3
 10127                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10128                                  	;mov	di,DEVCALL  ; 09/09/2018
 10129                                  	;
 10130                                  	;JMP	short set_seg
 10131                                  	
 10132                                  	; 09/09/2018
 10133 00002360 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10134                                  
 10135                                  	; MSDOS 6.0
 10136                                  save_packet:
 10137                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	 ;destination
 10138                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	 ;source
 10139                                  	; 09/09/2018
 10140                                  	; MSDOS 3.3
 10141                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10142                                  	;mov	si,DEVCALL ; 09/09/2018
 10143                                  
 10144                                  set_seg:
 10145                                  	; MSDOS 6.0
 10146                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 10147                                  	; MSDOS 3.3
 10148 00002362 8CC8                    	mov	ax,cs
 10149                                  	;
 10150 00002364 8ED8                    	MOV	DS,AX
 10151 00002366 8EC0                    	MOV	ES,AX
 10152 00002368 B90B00                  	MOV	CX,11		; 11 words to move
 10153 0000236B F3A5                    	REP	MOVSW
 10154                                  
 10155 0000236D 5F                      	POP	DI
 10156 0000236E 5E                      	POP	SI
 10157 0000236F 07                      	POP	ES
 10158 00002370 1F                      	POP	DS
 10159 00002371 C3                      	retn
 10160                                  
 10161                                  ;============================================================================
 10162                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10163                                  ;============================================================================
 10164                                  ; 20/07/2018 - Retro DOS v3.0
 10165                                  
 10166                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10167                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10168                                  ;hkn;	not valid. 
 10169                                  
 10170                                  ;
 10171                                  ;----------------------------------------------------------------------------
 10172                                  ;
 10173                                  ;**	$STD_CON_INPUT - System Call 1
 10174                                  ;
 10175                                  ;	Input character from console, echo
 10176                                  ;
 10177                                  ;	ENTRY	none
 10178                                  ;	EXIT	(al) = character
 10179                                  ;	USES	ALL
 10180                                  ;
 10181                                  ;----------------------------------------------------------------------------
 10182                                  ;
 10183                                  
 10184                                  _$STD_CON_INPUT:	;System call 1
 10185                                  	
 10186 00002372 E810FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10187 00002375 50                      	PUSH	AX
 10188 00002376 E80400                  	CALL	OUTT
 10189 00002379 58                      	POP	AX
 10190                                  CON_INPUT_RETN:	
 10191 0000237A C3                      	RETN
 10192                                  
 10193                                  ;
 10194                                  ;----------------------------------------------------------------------------
 10195                                  ;
 10196                                  ;**	$STD_CON_OUTPUT - System Call 2
 10197                                  ;
 10198                                  ;	Output character to console
 10199                                  ;
 10200                                  ;	ENTRY	(dl) = character
 10201                                  ;	EXIT	none
 10202                                  ;	USES	all
 10203                                  ;
 10204                                  ;----------------------------------------------------------------------------
 10205                                  ;
 10206                                  
 10207                                  _$STD_CON_OUTPUT:	;System call 2
 10208                                  
 10209 0000237B 88D0                    	MOV	AL,DL
 10210                                  
 10211                                  OUTT:
 10212 0000237D 3C20                    	CMP	AL,20H ; " "
 10213 0000237F 725E                    	JB	SHORT CTRLOUT
 10214 00002381 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10215 00002383 7405                    	JZ	SHORT OUTCH
 10216                                  OUTCHA:	
 10217                                  	;INC	BYTE PTR [CARPOS]
 10218 00002385 36FE06[A701]            	INC	BYTE [SS:CARPOS]
 10219                                  OUTCH:
 10220 0000238A 1E                      	PUSH	DS
 10221 0000238B 56                      	PUSH	SI
 10222                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10223                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10224 0000238C 36FE06[AE02]            	INC	BYTE [SS:CHARCO]	
 10225                                  	;AND	BYTE [SS:CHARCO],00111111B
 10226                                  	; 14/03/2018
 10227 00002391 368026[AE02]03          	and	byte [SS:CHARCO],3  ; IBMDOS.COM, MSDOS 3.3, MSDOS 2.11
 10228 00002397 7505                    	JNZ	SHORT OUTSKIP
 10229 00002399 50                      	PUSH	AX
 10230 0000239A E85433                  	CALL	STATCHK
 10231 0000239D 58                      	POP	AX
 10232                                  OUTSKIP:
 10233 0000239E E86BFF                  	CALL	RAWOUT				;output the character
 10234 000023A1 5E                      	POP	SI
 10235 000023A2 1F                      	POP	DS
 10236                                  
 10237                                  	;TEST	BYTE PTR [PFLAG],-1
 10238                                  	;retz
 10239 000023A3 36F606[AC02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 10240 000023A9 74CF                    	JZ	SHORT CON_INPUT_RETN
 10241                                  
 10242 000023AB 53                      	PUSH	BX
 10243 000023AC 1E                      	PUSH	DS
 10244 000023AD 56                      	PUSH	SI
 10245 000023AE BB0100                  	MOV	BX,1
 10246                                  	; 20/07/2018 - Retro DOS v3.0
 10247                                  	; MSDOS 3.3
 10248                                  	; MSDOS 6.0 (CPMIO2.ASM)
 10249 000023B1 E8001D                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 10250                                  					;hkn; to sft entry
 10251 000023B4 7226                    	JC	SHORT TRIPOPJ
 10252                                  	;mov	bx,[si+5]
 10253 000023B6 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 10254                                  	;test	bx,8000h
 10255 000023B9 F7C30080                	TEST	BX,sf_isnet	; 8000H		; output to NET?
 10256 000023BD 751D                    	JNZ	short TRIPOPJ 			; if so, no echo
 10257                                  	;test	bx,80h
 10258 000023BF F7C38000                	TEST	BX,devid_device ; 80H		; output to file?
 10259 000023C3 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 10260                                  	; 14/03/2018
 10261                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 10262                                  	;jc	short TRIPOPJ
 10263                                  	; MSDOS 2.11
 10264                                  	;test	byte [SI+18H], 80h
 10265                                  	;jz	short TRIPOPJ
 10266 000023C5 BB0400                  	MOV	BX,4
 10267 000023C8 E8E91C                  	CALL	GET_IO_SFT
 10268 000023CB 720F                    	JC	SHORT TRIPOPJ
 10269                                  	;test	word [si+5], 800h
 10270 000023CD F744050008              	TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H 
 10271                                  						; StdPrn redirected?
 10272                                  	;JZ	SHORT LISSTRT2J			; No, OK to echo
 10273 000023D2 0F848E00                	jz	LISSTRT2 ; 10/08/2018 
 10274                                  	;MOV	BYTE [PFLAG],0			
 10275 000023D6 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 10276                                  	; MSDOS 2.11
 10277                                  	;mov	bx,4
 10278                                  	;jmp	short LISSTRT2
 10279                                  	
 10280                                  TRIPOPJ:
 10281                                  	; 20/07/2018
 10282 000023DC E98800                  	JMP	TRIPOP
 10283                                  
 10284                                  ;LISSTRT2J:
 10285                                  ;	JMP	LISSTRT2
 10286                                  
 10287                                  CTRLOUT:
 10288 000023DF 3C0D                    	CMP	AL,c_CR ; 0Dh
 10289 000023E1 7420                    	JZ	SHORT ZERPOS
 10290 000023E3 3C08                    	CMP	AL,c_BS ; 8
 10291 000023E5 7428                    	JZ	SHORT BACKPOS
 10292 000023E7 3C09                    	CMP	AL,c_HT ; 9
 10293 000023E9 759F                    	JNZ	SHORT OUTCH
 10294                                  	;MOV	AL,[CARPOS]
 10295 000023EB 36A0[A701]              	MOV	AL,[SS:CARPOS]
 10296 000023EF 0CF8                    	OR	AL,0F8H
 10297 000023F1 F6D8                    	NEG	AL
 10298                                  
 10299                                  TAB:
 10300 000023F3 51                      	PUSH	CX
 10301 000023F4 88C1                    	MOV	CL,AL
 10302 000023F6 B500                    	MOV	CH,0
 10303 000023F8 E307                    	JCXZ	POPTAB
 10304                                  TABLP:
 10305 000023FA B020                    	MOV	AL," "
 10306 000023FC E87EFF                  	CALL	OUTT
 10307 000023FF E2F9                    	LOOP	TABLP
 10308                                  POPTAB:
 10309 00002401 59                      	POP	CX
 10310 00002402 C3                      	RETN
 10311                                  
 10312                                  ZERPOS:
 10313                                  	;MOV	BYTE PTR [CARPOS],0
 10314 00002403 36C606[A701]00          	MOV	BYTE [SS:CARPOS],0
 10315                                  	; 10/08/2018
 10316 00002409 E97EFF                  	JMP	OUTCH
 10317                                  OUTJ:	
 10318 0000240C E96EFF                  	JMP	OUTT
 10319                                  
 10320                                  BACKPOS:
 10321                                  	;DEC	BYTE PTR [CARPOS]
 10322 0000240F 36FE0E[A701]            	DEC	BYTE [SS:CARPOS]
 10323 00002414 E973FF                  	JMP	OUTCH
 10324                                  
 10325                                  BUFOUT:
 10326 00002417 3C20                    	CMP	AL," "
 10327 00002419 73F1                    	JAE	SHORT OUTJ		;Normal char
 10328 0000241B 3C09                    	CMP	AL,9
 10329 0000241D 74ED                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 10330                                  	;DOS 3.3  7/14/86
 10331 0000241F 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 10332 00002421 740D                    	JZ	short CTRLU
 10333 00002423 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 10334 00002425 7409                    	JZ	short CTRLU
 10335                                  NOT_CTRLU:
 10336                                  	;DOS 3.3  7/14/86
 10337 00002427 50                      	PUSH	AX
 10338 00002428 B05E                    	MOV	AL,"^"
 10339 0000242A E850FF                  	CALL	OUTT		;Print '^' before control chars
 10340 0000242D 58                      	POP	AX
 10341 0000242E 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 10342                                  CTRLU:
 10343 00002430 E84AFF                  	CALL	OUTT
 10344                                  BUFOUT_RETN:
 10345 00002433 C3                      	RETN
 10346                                  
 10347                                  ;
 10348                                  ;----------------------------------------------------------------------------
 10349                                  ;
 10350                                  ;**	$STD_AUX_INPUT - System Call 3
 10351                                  ;
 10352                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 10353                                  ;
 10354                                  ;	ENTRY	none
 10355                                  ;	EXIT	(al) = character
 10356                                  ;	USES	all
 10357                                  ;
 10358                                  ;----------------------------------------------------------------------------
 10359                                  ;
 10360                                  
 10361                                  _$STD_AUX_INPUT:	;System call 3
 10362                                  
 10363 00002434 E8BA32                  	CALL	STATCHK
 10364 00002437 BB0300                  	MOV	BX,3
 10365 0000243A E8771C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10366                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10367                                  	;retc
 10368 0000243D 72F4                    	JC	SHORT BUFOUT_RETN
 10369 0000243F EB03                    	JMP	SHORT TAISTRT
 10370                                  AUXILP:
 10371 00002441 E88E32                  	CALL	SPOOLINT
 10372                                  TAISTRT:
 10373 00002444 B401                    	MOV	AH,1
 10374 00002446 E80529                  	CALL	IOFUNC
 10375 00002449 74F6                    	JZ	SHORT AUXILP
 10376 0000244B 30E4                    	XOR	AH,AH
 10377 0000244D E8FE28                  	CALL	IOFUNC
 10378 00002450 C3                      	RETN
 10379                                  
 10380                                  ;
 10381                                  ;----------------------------------------------------------------------------
 10382                                  ;
 10383                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 10384                                  ;
 10385                                  ;	ENTRY	(dl) = character
 10386                                  ;	EXIT	none
 10387                                  ;	USES	all
 10388                                  ;
 10389                                  ;----------------------------------------------------------------------------
 10390                                  ;
 10391                                  
 10392                                  _$STD_AUX_OUTPUT:	;System call 4
 10393                                  
 10394 00002451 53                      	PUSH	BX
 10395 00002452 BB0300                  	MOV	BX,3
 10396 00002455 EB04                    	JMP	SHORT SENDOUT
 10397                                  
 10398                                  ;
 10399                                  ;----------------------------------------------------------------------------
 10400                                  ;
 10401                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 10402                                  ;
 10403                                  ;	ENTRY	(dl) = character
 10404                                  ;	EXIT	none
 10405                                  ;	USES	all
 10406                                  ;
 10407                                  ;----------------------------------------------------------------------------
 10408                                  ;
 10409                                  
 10410                                  _$STD_PRINTER_OUTPUT:	;System call 5
 10411                                  
 10412 00002457 53                      	PUSH	BX
 10413 00002458 BB0400                  	MOV	BX,4
 10414                                  
 10415                                  SENDOUT:
 10416 0000245B 88D0                    	MOV	AL,DL
 10417 0000245D 50                      	PUSH	AX
 10418 0000245E E89032                  	CALL	STATCHK
 10419 00002461 58                      	POP	AX
 10420 00002462 1E                      	PUSH	DS
 10421 00002463 56                      	PUSH	SI
 10422                                  LISSTRT2:
 10423 00002464 E8D0FE                  	CALL	RAWOUT2
 10424                                  TRIPOP:
 10425 00002467 5E                      	POP	SI
 10426 00002468 1F                      	POP	DS
 10427 00002469 5B                      	POP	BX
 10428                                  SCIS_RETN:	; 20/07/2018
 10429 0000246A C3                      	RETN
 10430                                  ;
 10431                                  ;----------------------------------------------------------------------------
 10432                                  ;
 10433                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 10434                                  ;
 10435                                  ;	Check console input status
 10436                                  ;
 10437                                  ;	ENTRY	none
 10438                                  ;	EXIT	AL = -1 character available, = 0 no character
 10439                                  ;	USES	all
 10440                                  ;
 10441                                  ;----------------------------------------------------------------------------
 10442                                  ;
 10443                                  
 10444                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 10445                                  
 10446 0000246B E88332                  	CALL	STATCHK
 10447 0000246E B000                    	MOV	AL,0			; no xor!!
 10448                                  	;retz
 10449 00002470 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 10450 00002472 0CFF                    	OR	AL,-1
 10451                                  ;SCIS_RETN:
 10452 00002474 C3                      	RETN
 10453                                  
 10454                                  ;
 10455                                  ;----------------------------------------------------------------------------
 10456                                  ;
 10457                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 10458                                  ;
 10459                                  ;	Flush console input buffer and perform call in AL
 10460                                  ;
 10461                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 10462                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 10463                                  ;		return arguments for the fcn supplied in (AL)
 10464                                  ;	USES	all
 10465                                  ;
 10466                                  ;----------------------------------------------------------------------------
 10467                                  ;
 10468                                  
 10469                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 10470                                  
 10471 00002475 50                      	PUSH	AX
 10472 00002476 52                      	PUSH	DX
 10473 00002477 31DB                    	XOR	BX,BX
 10474 00002479 E8381C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10475                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10476 0000247C 7205                    	JC	SHORT BADJFNCON
 10477 0000247E B404                    	MOV	AH,4
 10478 00002480 E8CB28                  	CALL	IOFUNC
 10479                                  
 10480                                  BADJFNCON:
 10481 00002483 5A                      	POP	DX
 10482 00002484 58                      	POP	AX
 10483 00002485 88C4                    	MOV	AH,AL
 10484 00002487 3C01                    	CMP	AL,1
 10485 00002489 7413                    	JZ	SHORT REDISPJ
 10486 0000248B 3C06                    	CMP	AL,6
 10487 0000248D 740F                    	JZ	SHORT REDISPJ
 10488 0000248F 3C07                    	CMP	AL,7
 10489 00002491 740B                    	JZ	SHORT REDISPJ
 10490 00002493 3C08                    	CMP	AL,8
 10491 00002495 7407                    	JZ	SHORT REDISPJ
 10492 00002497 3C0A                    	CMP	AL,10
 10493 00002499 7403                    	JZ	SHORT REDISPJ
 10494 0000249B B000                    	MOV	AL,0
 10495 0000249D C3                      	RETN
 10496                                  
 10497                                  REDISPJ:
 10498 0000249E FA                      	CLI
 10499                                  	;transfer REDISP
 10500 0000249F E9A3F0                  	JMP	REDISP
 10501                                  
 10502                                  ;============================================================================
 10503                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 10504                                  ;============================================================================
 10505                                  ; 20/07/2018 - Retro DOS v3.0
 10506                                  
 10507                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 10508                                  ;
 10509                                  ;	$GET_FCB_POSITION
 10510                                  ;	$FCB_DELETE
 10511                                  ;	$GET_FCB_FILE_LENGTH
 10512                                  ;	$FCB_CLOSE
 10513                                  ;	$FCB_RENAME
 10514                                  ;	SaveFCBInfo
 10515                                  ;	ResetLRU
 10516                                  ;	SetOpenAge
 10517                                  ;	LRUFCB
 10518                                  ;	FCBRegen
 10519                                  ;	BlastSFT
 10520                                  ;	CheckFCB
 10521                                  ;	SFTFromFCB
 10522                                  ;	FCBHardErr
 10523                                  ;
 10524                                  ;	Revision history:
 10525                                  ;
 10526                                  ;		Created: ARR 4 April 1983"
 10527                                  ;			 MZ  6 June  1983 completion of functions
 10528                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 10529                                  ;					  times.  Change so successive closes work by
 10530                                  ;					  always returning OK.	Also, detect I/O to
 10531                                  ;					  already closed FCB and return EOF.
 10532                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 10533                                  ;					  out of sft into FCB for reconnection
 10534                                  ;
 10535                                  ;		A000	 version 4.00  Jan. 1988
 10536                                  
 10537                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 10538                                  ;----------------------------------------------------------------------------
 10539                                  ;
 10540                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 10541                                  ;	extent and next record field and set the random record field to point
 10542                                  ;	to that record
 10543                                  ;
 10544                                  ;   Inputs:	DS:DX point to a possible extended FCB
 10545                                  ;   Outputs:	The random record field of the FCB is set to the current record
 10546                                  ;   Registers modified: all
 10547                                  ;
 10548                                  ;----------------------------------------------------------------------------
 10549                                  ;
 10550                                  
 10551                                  _$GET_FCB_POSITION:
 10552 000024A2 E81D05                  	call	GetExtended		; point to FCB
 10553 000024A5 E8ED04                  	call	GetExtent		; DX:AX is current record
 10554                                  	;mov	[si+21h],ax
 10555 000024A8 894421                  	MOV	[SI+SYS_FCB.RR],AX ; drop in low order piece
 10556                                  	;mov	[si+23h],dl
 10557 000024AB 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 10558                                  	;cmp	word [si+0Eh],64
 10559 000024AE 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 10560 000024B2 7303                    	JAE	short GetFCBBye
 10561                                  	;mov	[si+24h],dh
 10562 000024B4 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 10563                                  GetFCBBye:
 10564 000024B7 E95FF2                  	jmp	FCB_RET_OK
 10565                                  
 10566                                  
 10567                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 10568                                  ;----------------------------------------------------------------------------
 10569                                  ;
 10570                                  ;**	$FCB_Delete - Delete from FCB Template
 10571                                  ;
 10572                                  ;	given an FCB, remove all directory entries in the current
 10573                                  ;	directory that have names that match the FCB's ?  marks.
 10574                                  ;
 10575                                  ;	ENTRY	(DS:DX) = address of FCB
 10576                                  ;	EXIT	entries matching the FCB are deleted
 10577                                  ;		(al) = ff iff no entries were deleted
 10578                                  ;	USES	all
 10579                                  ;
 10580                                  ;----------------------------------------------------------------------------
 10581                                  ;
 10582                                  
 10583                                  _$FCB_DELETE:		; System call 19
 10584                                  					; OpenBuf is in DOSDATA
 10585 000024BA BF[6003]                	MOV	DI,OPENBUF 		; appropriate place 
 10586                                  
 10587 000024BD E82945                  	call	TransFCB		; convert FCB to path
 10588 000024C0 720A                    	JC	short BadPath 		; signal no deletions
 10589                                  
 10590 000024C2 16                      	push	SS
 10591 000024C3 1F                      	pop	DS			; SS is DOSDATA
 10592                                  
 10593 000024C4 E89F0D                  	call	DOS_DELETE		; wham
 10594 000024C7 7203                    	JC	short BadPath
 10595                                  GoodPath:
 10596 000024C9 E94DF2                  	jmp	FCB_RET_OK		; do a good return
 10597                                  BadPath:
 10598                                  	; Error code is in AX
 10599                                  
 10600 000024CC E94DF2                  	jmp	FCB_RET_ERR		; let someone else signal the error
 10601                                  
 10602                                  
 10603                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 10604                                  ;----------------------------------------------------------------------------
 10605                                  ;
 10606                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 10607                                  ;	file in records (rounded up if partial).
 10608                                  ;
 10609                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 10610                                  ;   Outputs:	Random record field updated to reflect the number of records
 10611                                  ;   Registers modified: all
 10612                                  ;
 10613                                  ;----------------------------------------------------------------------------
 10614                                  ;
 10615                                  
 10616                                  _$GET_FCB_FILE_LENGTH:
 10617                                  
 10618 000024CF E8F004                  	call	GetExtended		; get real FCB pointer
 10619                                  					; DX points to Input FCB
 10620                                  
 10621                                  					; OpenBuf is in DOSDATA
 10622 000024D2 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 10623                                  
 10624 000024D5 1E                      	push	ds			; save pointer to true FCB
 10625 000024D6 56                      	push	si
 10626 000024D7 E80F45                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 10627 000024DA 5E                      	pop	si
 10628 000024DB 1F                      	pop	ds
 10629 000024DC 72EE                    	JC	short BadPath
 10630 000024DE 1E                      	push	ds			; save pointer
 10631 000024DF 56                      	push	si
 10632 000024E0 16                      	push	ss		
 10633 000024E1 1F                      	pop	ds
 10634 000024E2 E80411                  	call	GET_FILE_INFO		; grab the info
 10635 000024E5 5E                      	pop	si			; get pointer back
 10636 000024E6 1F                      	pop	ds
 10637 000024E7 72E3                    	JC	short BadPath 		; invalid something
 10638 000024E9 89DA                    	MOV	DX,BX			; get high order size
 10639 000024EB 89F8                    	MOV	AX,DI			; get low order size
 10640                                  	;mov	 bx,[si+0Eh]
 10641 000024ED 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 10642 000024F0 09DB                    	OR	BX,BX			; empty record => 0 size for file
 10643 000024F2 7503                    	JNZ	short GetSize 		; not empty
 10644 000024F4 BB8000                  	MOV	BX,128
 10645                                  GetSize:
 10646 000024F7 89C7                    	MOV	DI,AX			; save low order word
 10647 000024F9 89D0                    	MOV	AX,DX			; move high order for divide
 10648 000024FB 31D2                    	XOR	DX,DX			; clear out high
 10649 000024FD F7F3                    	DIV	BX			; wham
 10650 000024FF 50                      	PUSH	AX			; save dividend
 10651 00002500 89F8                    	MOV	AX,DI			; get low order piece
 10652 00002502 F7F3                    	DIV	BX			; wham
 10653 00002504 89D1                    	MOV	CX,DX			; save remainder
 10654 00002506 5A                      	POP	DX			; get high order dividend
 10655 00002507 E306                    	JCXZ	LengthStore		; no roundup
 10656 00002509 83C001                  	ADD	AX,1
 10657 0000250C 83D200                  	ADC	DX,0			; 32-bit increment
 10658                                  LengthStore:
 10659                                  	;mov	[si+21h],ax
 10660 0000250F 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 10661                                  	;mov	[si+23h],dl
 10662 00002512 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 10663 00002515 08F6                    	OR	DH,DH
 10664 00002517 74B0                    	JZ	short GoodPath		; not storing insignificant zero
 10665                                  	;mov	[si+24h],dh
 10666 00002519 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 10667                                  GoodRet:
 10668                                  	;jmp	FCB_RET_OK
 10669 0000251C EBAB                    	jmp	short GoodPath
 10670                                  
 10671                                  ;Break <$FCB_Close - close a file>
 10672                                  ;----------------------------------------------------------------------------
 10673                                  ;
 10674                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 10675                                  ;	as the FCB may be used for further I/O
 10676                                  ;
 10677                                  ;   Inputs:	DS:DX point to FCB
 10678                                  ;   Outputs:	AL = FF if file was not found on disk
 10679                                  ;   Registers modified: all
 10680                                  ;
 10681                                  ;----------------------------------------------------------------------------
 10682                                  ;
 10683                                  
 10684                                  _$FCB_CLOSE:		; System call 16
 10685                                  
 10686 0000251E 30C0                    	XOR	AL,AL			; default search attributes
 10687 00002520 E89F04                  	call	GetExtended		; DS:SI point to real FCB
 10688 00002523 7403                    	JZ	short NoAttr		; not extended
 10689 00002525 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 10690                                  NoAttr:
 10691                                  					; SS override
 10692 00002528 36A2[0605]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 10693 0000252C E80804                  	call	SFTFromFCB
 10694 0000252F 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 10695                                  
 10696                                  	;
 10697                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 10698                                  	; there is no need to set the SFT's attribute.
 10699                                  	;
 10700                                  
 10701                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10702                                  	;;; done
 10703                                  
 10704                                  	;mov	al,[es:di+4]
 10705 00002531 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 10706 00002535 30E4                    	XOR	AH,AH
 10707 00002537 50                      	PUSH	AX
 10708                                  
 10709                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10710                                  	;;; done
 10711                                  
 10712 00002538 E8E44D                  	call	CheckShare
 10713 0000253B 7508                    	JNZ	short NoStash
 10714 0000253D 36A0[0605]              	MOV	AL,[SS:ATTRIB]
 10715                                  	;mov	[es:di+4],al
 10716 00002541 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 10717                                  NoStash:
 10718                                  	;mov	ax,[si+14h]
 10719 00002545 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 10720                                  	;mov	[es:di+0Fh],ax
 10721 00002548 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 10722                                  	;mov	ax,[si+16h]
 10723 0000254C 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 10724                                  	;mov	[es:di+0Dh],ax
 10725 0000254F 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 10726                                  	;mov	ax,[si+10h]
 10727 00002553 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 10728                                  	;mov	[es:di+11h],ax
 10729 00002556 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 10730                                  	;mov	ax,[si+12h]
 10731 0000255A 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 10732                                  	;mov	[es:di+13h],ax
 10733 0000255D 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 10734                                  	;or	word [es:di+5],4000h
 10735 00002561 26814D050040            	OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 10736 00002567 16                      	push	ss
 10737 00002568 1F                      	pop	ds
 10738 00002569 E84C15                  	call	DOS_CLOSE	; wham
 10739 0000256C C43E[3605]              	LES	DI,[THISSFT]
 10740                                  
 10741                                  	;;; 9/8/86 F.C. restore SFT attribute
 10742 00002570 59                      	POP	CX
 10743                                  	;mov	[es:di+4],cl
 10744 00002571 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 10745                                  	;;; 9/8/86 F.C. restore SFT attribute
 10746                                  
 10747 00002575 9C                      	PUSHF
 10748                                  	;test	word [es:di],0FFFFh
 10749                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 10750                                  				; zero ref count gets blasted
 10751 00002576 26833D00                	cmp	word [ES:DI],0
 10752 0000257A 7507                    	jnz     short CloseOK
 10753 0000257C 50                      	PUSH	AX
 10754 0000257D B04D                    	MOV	AL,'M'
 10755 0000257F E8DA02                  	call	BlastSFT
 10756 00002582 58                      	POP	AX
 10757                                  CloseOK:
 10758 00002583 9D                      	POPF
 10759 00002584 7396                    	JNC	short GoodRet
 10760                                  	;cmp	al,6
 10761 00002586 3C06                    	CMP	AL,error_invalid_handle
 10762 00002588 7492                    	JZ	short GoodRet
 10763                                  	;mov	al,2
 10764 0000258A B002                    	MOV	AL,error_file_not_found
 10765                                  fcb_close_err:
 10766 0000258C E98DF1                  	jmp	FCB_RET_ERR
 10767                                  
 10768                                  ;
 10769                                  ;----------------------------------------------------------------------------
 10770                                  ;
 10771                                  ;**	$FCB_Rename - Rename a File
 10772                                  ;
 10773                                  ;	$FCB_Rename - rename a file in place within a directory.  Renames
 10774                                  ;	multiple files copying from the meta characters.
 10775                                  ;
 10776                                  ;	ENTRY	DS:DX point to an FCB.	The normal name field is the source
 10777                                  ;		    name of the files to be renamed.  Starting at offset 11h
 10778                                  ;		    in the FCB is the destination name.
 10779                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 10780                                  ;		AL = FF -> some files may have been renamed but:
 10781                                  ;			rename to existing file or source file not found
 10782                                  ;	USES	ALL
 10783                                  ;
 10784                                  ;----------------------------------------------------------------------------
 10785                                  ;
 10786                                  
 10787                                  _$FCB_RENAME:		; System call 23
 10788                                  
 10789 0000258F E83004                  	call	GetExtended		; get pointer to real FCB
 10790 00002592 52                      	push	dx
 10791 00002593 8A04                    	MOV	AL,[SI] 		; get drive byte
 10792 00002595 83C610                  	ADD	SI,10h			; point to destination
 10793                                  
 10794                                  					; RenBuf is in DOSDATA
 10795 00002598 BF[E003]                	MOV	DI,RENBUF		; point to destination buffer
 10796 0000259B FF34                    	push	word [SI]
 10797 0000259D 1E                      	push	ds
 10798                                  	;push	di			; save source pointer for TransFCB
 10799                                  	; 16/01/2024 - BugFix !
 10800 0000259E 56                      	push	si
 10801 0000259F 8804                    	MOV	[SI],AL			; drop in real drive
 10802 000025A1 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 10803 000025A3 E84344                  	call	TransFCB		; munch this pathname
 10804 000025A6 5E                      	pop	si
 10805 000025A7 1F                      	pop	ds	
 10806 000025A8 8F04                    	pop	WORD [SI]		; get path back
 10807 000025AA 5A                      	pop	dx			; Original FCB pointer
 10808 000025AB 721A                    	JC	short fren90		; bad path -> error
 10809                                  
 10810                                  					; SS override for WFP_Start & Ren_WFP
 10811 000025AD 368B36[4A05]            	MOV	SI,[ss:WFP_START]	; get pointer
 10812 000025B2 368936[4C05]            	MOV	[ss:REN_WFP],SI		; stash it
 10813                                  
 10814                                  					; OpenBuf is in DOSDATA
 10815 000025B7 BF[6003]                	MOV	DI,OPENBUF		; appropriate spot
 10816 000025BA E82C44                  	call	TransFCB		; wham
 10817                                  					; NOTE that this call is pointing
 10818                                  					;  back to the ORIGINAL FCB so
 10819                                  					;  SATTRIB gets set correctly
 10820 000025BD 7208                    	JC	short fren90		; error
 10821 000025BF E84F0E                  	call	DOS_RENAME
 10822 000025C2 7203                    	JC	short fren90
 10823 000025C4 E952F1                  	jmp	FCB_RET_OK
 10824                                  
 10825                                  ;	Error -
 10826                                  ;
 10827                                  ;	(al) = error code
 10828                                  
 10829                                  fren90:	
 10830 000025C7 E952F1                  	jmp	FCB_RET_ERR
 10831                                  
 10832                                  
 10833                                  ;Break <Misbehavior fixers>
 10834                                  ;
 10835                                  ;   FCBs suffer from several problems.	First, they are maintained in the
 10836                                  ;   user's space so he may move them at will.  Second, they have a small
 10837                                  ;   reserved area that may be used for system information.  Third, there was
 10838                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 10839                                  ;   usage.
 10840                                  ;
 10841                                  ;   This results in the following misbehavior:
 10842                                  ;
 10843                                  ;	infinite opens of the same file:
 10844                                  ;
 10845                                  ;	While (TRUE) {			While (TRUE) {
 10846                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 10847                                  ;	    Read (FCB); 		    Write (FCB);
 10848                                  ;	    }				    }
 10849                                  ;
 10850                                  ;	infinite opens of different files:
 10851                                  ;
 10852                                  ;	While (TRUE) {			While (TRUE) {
 10853                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 10854                                  ;	    Read (FCB); 		    Write (FCB);
 10855                                  ;	    }				    }
 10856                                  ;
 10857                                  ;	multiple closes of the same file:
 10858                                  ;
 10859                                  ;	FCBOpen (FCB);
 10860                                  ;	while (TRUE)
 10861                                  ;	    FCBClose (FCB);
 10862                                  ;
 10863                                  ;	I/O after closing file:
 10864                                  ;
 10865                                  ;	FCBOpen (FCB);
 10866                                  ;	while (TRUE) {
 10867                                  ;	    FCBWrite (FCB);
 10868                                  ;	    FCBClose (FCB);
 10869                                  ;	    }
 10870                                  ;
 10871                                  ;   The following is am implementation of a methodology for emulating the
 10872                                  ;   above with the exception of I/O after close.  We are NOT attempting to
 10873                                  ;   resolve that particular misbehavior.  We will enforce correct behaviour in
 10874                                  ;   FCBs when they refer to a network file or when there is file sharing on
 10875                                  ;   the local machine.
 10876                                  ;
 10877                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 10878                                  ;   structures depending on the file itself and the state of operations of the
 10879                                  ;   OS.  The information contained in this reserved field is enough to
 10880                                  ;   regenerate the SFT for the local non-shared file.  It is assumed that this
 10881                                  ;   regeneration procedure may be expensive.  The SFT for the FCB is
 10882                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 10883                                  ;
 10884                                  ;   No regeneration of SFTs is attempted for network FCBs.
 10885                                  ;
 10886                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 10887                                  ;   file sharer is working.  If the file sharer is present then the SFT is not
 10888                                  ;   regenerated.
 10889                                  ;
 10890                                  ;   Finally, if there is no local sharing, the full name of the file is no
 10891                                  ;   longer available.  We can make up for this by using the following
 10892                                  ;   information:
 10893                                  ;
 10894                                  ;	The Drive number (from the DPB).
 10895                                  ;	The physical sector of the directory that contains the entry.
 10896                                  ;	The relative position of the entry in the sector.
 10897                                  ;	The first cluster field.
 10898                                  ;	The last used SFT.
 10899                                  ;      OR In the case of a device FCB
 10900                                  ;	The low 6 bits of sf_flags (indicating device type)
 10901                                  ;	The pointer to the device header
 10902                                  ;
 10903                                  ;
 10904                                  ;   We read in the particular directory sector and examine the indicated
 10905                                  ;   directory entry.  If it matches, then we are kosher; otherwise, we fail.
 10906                                  ;
 10907                                  ;   Some key items need to be remembered:
 10908                                  ;
 10909                                  ;	Even though we are caching SFTs, they may contain useful sharing
 10910                                  ;	information.  We enforce good behavior on the FCBs.
 10911                                  ;
 10912                                  ;	Network support must not treat FCBs as impacting the ref counts on
 10913                                  ;	open VCs.  The VCs may be closed only at process termination.
 10914                                  ;
 10915                                  ;	If this is not an installed version of the DOS, file sharing will
 10916                                  ;	always be present.
 10917                                  ;
 10918                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 10919                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 10920                                  ;
 10921                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 10922                                  ;	and open_for_both.  This is so the FCB code in the sharer can find the
 10923                                  ;	proper OI record.
 10924                                  ;
 10925                                  ;   The test bits are:
 10926                                  ;
 10927                                  ;	00 -> local file
 10928                                  ;	40 -> sharing local
 10929                                  ;	80 -> network
 10930                                  ;	C0 -> local device
 10931                                  
 10932                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 10933                                  ;----------------------------------------------------------------------------
 10934                                  ;
 10935                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 10936                                  ;	pieces of information into the FCB to allow for subsequent
 10937                                  ;	regeneration. Poke LRU also.
 10938                                  ;
 10939                                  ;   Inputs:	ThisSFT points to a complete SFT.
 10940                                  ;		DS:SI point to the FCB (not an extended one)
 10941                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 10942                                  ;		DS:SI preserved
 10943                                  ;		ES:DI point to sft
 10944                                  ;   Registers modified: All
 10945                                  ;
 10946                                  ;
 10947                                  ;----------------------------------------------------------------------------
 10948                                  ;
 10949                                  
 10950                                  SaveFCBInfo:
 10951                                  
 10952 000025CA 36C43E[3605]            	LES	DI,[SS:THISSFT]		; SS override
 10953 000025CF E80AFA                  	call	IsSFTNet
 10954 000025D2 7419                    	JZ	short SaveLocal		; if not network then save local info
 10955                                  ;
 10956                                  ;----- In net support -----
 10957                                  ;
 10958                                  	; MSDOS 6.0
 10959                                  	;MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 10960                                  	;MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 10961                                  	; MSDOS 3.3
 10962                                  	;mov	ax,[es:di+1Dh]
 10963 000025D4 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 10964                                  	;mov	[si+1Ah],ax
 10965 000025D8 89441A                  	mov	[si+fcb_net_handle],ax
 10966                                  
 10967                                  	; MSDOS 3.3
 10968 000025DB 06                      	push	es
 10969 000025DC 57                      	push	di
 10970                                  	;les	di,[es:di+19h]
 10971 000025DD 26C47D19                	LES	DI,[ES:DI+sf_netid]
 10972                                  	;mov	[si+1Ch],di
 10973 000025E1 897C1C                  	MOV	[SI+fcb_netID],DI	; save net ID
 10974                                  	;mov 	[si+1Eh],es
 10975 000025E4 8C441E                  	MOV	[SI+fcb_netID+2],ES
 10976 000025E7 5F                      	pop	di
 10977 000025E8 07                      	pop	es
 10978                                  
 10979                                  	;mov	bl,80h
 10980 000025E9 B380                    	MOV	BL,FCBNETWORK
 10981                                  ;
 10982                                  ;----- END In net support -----
 10983                                  ;
 10984 000025EB EB4C                    	jmp	SHORT SaveSFN
 10985                                  
 10986                                  SaveLocal:
 10987                                  	;IF	Installed
 10988 000025ED E82F4D                  	call	CheckShare
 10989 000025F0 7402                    	JZ	short SaveNoShare	; no sharer
 10990 000025F2 EB40                    	JMP	short SaveShare		; sharer present
 10991                                  
 10992                                  SaveNoShare:
 10993                                  	;test 	word [es:di+5],80h
 10994 000025F4 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 10995 000025FA 7526                    	JNZ	short SaveNoShareDev	; Device
 10996                                  	;
 10997                                  	; Save no sharing local file information
 10998                                  	;
 10999                                  	;mov	ax,[es:di+1Dh]
 11000 000025FC 268B451D                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11001                                  	;mov	[si+1Dh],ax
 11002 00002600 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11003                                  
 11004                                  	; MSDOS 6.0
 11005                                  	;SR; Store high byte of directory sector
 11006                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11007                                  	;
 11008                                  	; SR;
 11009                                  	; We have to store the read-only and archive attributes of the file.
 11010                                  	; We extract it from the SFT and store it in the top two bits of the 
 11011                                  	; sector number ( sector number == 22 bits only )
 11012                                  	;
 11013                                  	;mov	bl,[es:di+SF_ENTRY.sf_attr]
 11014                                  	;mov	bh,bl
 11015                                  	;ror	bl,1
 11016                                  	;shl	bh,1
 11017                                  	;or	bl,bh
 11018                                  	;and	bl,0C0h
 11019                                  	;
 11020                                  	;or	al,bl
 11021                                  	;mov	[si+fcb_sfn],al	;sector number = 22-bits
 11022                                  
 11023                                  	; MSDOS 3.3 ($ MSDOS 6.0)
 11024                                  	;mov	al,[es:di+1Fh]
 11025 00002603 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11026                                  	;mov	[si+1Fh],al
 11027 00002607 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11028                                  	;mov	ax,[es:di+0Bh]
 11029 0000260A 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11030                                  	;mov	[si+1Bh],ax
 11031 0000260E 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11032 00002611 B300                    	MOV	BL,0
 11033                                  
 11034                                  	; Create the bits field from the dirty/device bits of the flags word 
 11035                                  	; and the mode byte
 11036                                  
 11037                                  SetFCBBits:
 11038                                  	;mov	ax,[es:di+5]
 11039 00002613 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11040 00002617 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11041                                  	;or	al,[es:di+2]
 11042 00002619 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11043                                  	;mov	[si+1Ah], al
 11044 0000261D 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11045                                  
 11046                                  	; MSDOS 6.0
 11047                                  	; SR;
 11048                                  	; Check if we came here for local file or device. If for local file, 
 11049                                  	; skip setting of SFT index
 11050                                  	;
 11051                                  	;or	bl,bl
 11052                                  	;jz	short SaveNoSFN		; do not save SFN if local file
 11053                                  
 11054 00002620 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11055                                  
 11056                                  	; Save no sharing local device information
 11057                                  
 11058                                  SaveNoShareDev:
 11059                                  	;mov	ax,[es:di+7]
 11060 00002622 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11061                                  	;mov	[si+1Ah],ax
 11062 00002626 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11063                                  	;mov	ax,[es:di+9]
 11064 00002629 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11065 0000262D 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11066                                  	;mov	bl,40h
 11067 00002630 B340                    	MOV	BL,FCBDEVICE
 11068 00002632 EBDF                    	JMP	SetFCBBits		; go and save SFN
 11069                                  
 11070                                  SaveShare:
 11071                                  	;ENDIF
 11072                                  ;
 11073                                  ;----- In share support -----
 11074                                  ;
 11075                                  	;call	far [ss:ShSave]
 11076 00002634 36FF1E[8400]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11077                                  ;
 11078                                  ;----- end in share support -----
 11079                                  ;
 11080                                  SaveSFN:
 11081                                  	; MSDOS 3.3
 11082                                  	;mov	ax,[es:di+5]
 11083                                  	;and	al,3Fh
 11084                                  	;or	al,bl
 11085                                  	;mov	[si+19h],al
 11086                                  
 11087                                  	;lea	ax, [di-6]
 11088 00002639 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11089                                  	
 11090                                  	; Adjust for offset to table.
 11091                                  	
 11092 0000263C 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11093                                  
 11094 00002641 53                      	push	bx			;bx = FCB type (net/Share or local)
 11095 00002642 B335                    	mov	bl,53
 11096 00002644 B335                    	MOV	BL,SF_ENTRY.size
 11097 00002646 F6F3                    	DIV	BL
 11098 00002648 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11099 0000264B 5B                      	pop	bx			;restore bx
 11100                                  
 11101                                  SaveNoSFN:
 11102                                  	;mov	ax,[es:di+5]
 11103 0000264C 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11104 00002650 243F                    	AND	AL,3Fh			; get real drive
 11105 00002652 08D8                    	OR	AL,BL
 11106                                  	;mov	[si+19h],al
 11107 00002654 884419                  	MOV	[SI+fcb_l_drive],AL
 11108                                  
 11109 00002657 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11110 0000265B 40                      	INC	AX
 11111                                  	;mov	[es:di+15h],ax
 11112 0000265C 26894515                	MOV	[ES:DI+sf_LRU],AX
 11113 00002660 7506                    	JNZ	short SimpleStuff
 11114                                  	
 11115                                  	; lru flag overflowed.	Run through all FCB sfts and adjust:  
 11116                                  	; LRU < 8000H get set to 0.  Others -= 8000h.  This LRU = 8000h
 11117                                  	
 11118                                  	;mov	bx,15h
 11119 00002662 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11120 00002665 E80500                  	call	ResetLRU
 11121                                  
 11122                                  	;	Set new LRU to AX
 11123                                  SimpleStuff:
 11124 00002668 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11125 0000266C C3                      	retn
 11126                                  
 11127                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11128                                  ;----------------------------------------------------------------------------
 11129                                  ;
 11130                                  ;   ResetLRU - during lru updates, we may wrap at 64K.	We must walk the
 11131                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11132                                  ;   at 0.
 11133                                  ;
 11134                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11135                                  ;		ES:DI point to SFT currently being updated
 11136                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11137                                  ;		AX has 8000h
 11138                                  ;   Registers modified: none
 11139                                  ;
 11140                                  ;----------------------------------------------------------------------------
 11141                                  ;
 11142                                  
 11143                                  ResetLRU:
 11144                                  
 11145                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11146                                  	; DOSDATA
 11147                                  
 11148 0000266D B80080                  	MOV	AX,8000h
 11149 00002670 06                      	push	es
 11150 00002671 57                      	push	di
 11151 00002672 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; get pointer to head
 11152                                  	;mov	cx,[es:di+4]
 11153 00002677 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11154                                  	;lea	di,[di+6]
 11155 0000267B 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11156                                  ovScan:
 11157 0000267E 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11158 00002681 7703                    	JA	short ovLoop
 11159 00002683 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11160                                  ovLoop:
 11161                                  	;add	di,53
 11162 00002686 83C735                  	ADD	DI,SF_ENTRY.size	; advance to next
 11163 00002689 E2F3                    	LOOP	ovScan
 11164 0000268B 5F                      	pop	di
 11165 0000268C 07                      	pop	es
 11166 0000268D 268901                  	MOV	[ES:DI+BX],AX
 11167 00002690 C3                      	retn
 11168                                  
 11169                                  ;IF  0  ; We dont need this routine any more.
 11170                                  
 11171                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11172                                  ;----------------------------------------------------------------------------
 11173                                  ;
 11174                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11175                                  ;   we keep the 'open age' or an LRU count based on opens.  We update the
 11176                                  ;   count here and fill in the appropriate field.
 11177                                  ;
 11178                                  ;   Inputs:	ES:DI point to SFT
 11179                                  ;   Outputs:	ES:DI has the open age field filled in.
 11180                                  ;		If open age has wraparound, we will have subtracted 8000h
 11181                                  ;		    from all open ages.
 11182                                  ;   Registers modified: AX
 11183                                  ;
 11184                                  ;----------------------------------------------------------------------------
 11185                                  ;
 11186                                  
 11187                                  SetOpenAge:
 11188                                  
 11189                                  	; 20/07/2018 - Retro DOS v3.0
 11190                                  	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 11191                                  	; (& MSDOS 6.0, FCBIO.ASM)
 11192                                  
 11193                                  	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 11194                                  
 11195 00002691 2EA1[1200]              	MOV	AX,[CS:OpenLRU]	; SS override
 11196 00002695 40                      	INC	AX
 11197                                  	;mov	[es:di+17h],ax
 11198 00002696 26894517                	MOV	[ES:DI+sf_OpenAge],AX
 11199 0000269A 7506                    	JNZ	short SetDone
 11200                                  	;mov	bx,17h
 11201 0000269C BB1700                  	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 11202 0000269F E8CBFF                  	call	ResetLRU
 11203                                  SetDone:
 11204 000026A2 2EA3[1200]              	MOV	[CS:OpenLRU],AX
 11205 000026A6 C3                      	retn
 11206                                  
 11207                                  ;ENDIF	; SetOpenAge no longer needed
 11208                                  
 11209                                  
 11210                                  ; 21/07/2018 - Retro DOS v3.0
 11211                                  
 11212                                  ; LRUFCB for MSDOS 3.3 !
 11213                                  
 11214                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 11215                                  ;----------------------------------------------------------------------------
 11216                                  ;
 11217                                  ;   LRUFCB - find LRU fcb in cache.  Set ThisSFT and return it.  We preserve
 11218                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 11219                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 11220                                  ;
 11221                                  ;   Inputs:	none
 11222                                  ;   Outputs:	ES:DI point to SFT
 11223                                  ;		ThisSFT points to SFT
 11224                                  ;		SFT is zeroed
 11225                                  ;		Carry set of closes failed
 11226                                  ;   Registers modified: none
 11227                                  ;
 11228                                  ;----------------------------------------------------------------------------
 11229                                  ;
 11230                                  
 11231                                  ; MSDOS 6.0
 11232                                  ;IF 0	; rewritten this routine
 11233                                  
 11234                                  LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 11235 000026A7 E84EEF                  	call	save_world
 11236                                  	
 11237                                  ; Find nth oldest NET/SHARE FCB.  We want to find its age for the second scan
 11238                                  ; to find the lease recently used one that is younger than the open age.  We
 11239                                  ; operate be scanning the list n times finding the least age that is greater
 11240                                  ; or equal to the previous minimum age.
 11241                                  ;
 11242                                  ;   BP is the count of times we need to go through this loop.
 11243                                  ;   AX is the current acceptable minimum age to consider
 11244                                  ;
 11245 000026AA 2E8B2E[4400]            	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 11246 000026AF 31C0                    	XOR	AX,AX			; low = 0;
 11247                                  ;
 11248                                  ; If we've scanned the table n times, then we are done.
 11249                                  ;
 11250                                  lru1:
 11251 000026B1 83FD00                  	CMP	bp,0			; while (k--) {
 11252 000026B4 7451                    	JZ	short lru75
 11253 000026B6 4D                      	DEC	bp
 11254                                  ;
 11255                                  ; Set up for scan.
 11256                                  ;
 11257                                  ;   AX is the minimum age for consideration
 11258                                  ;   BX is the minimum age found during the scan
 11259                                  ;   SI is the position of the entry that corresponds to BX
 11260                                  ;
 11261 000026B7 BBFFFF                  	MOV	BX,-1			;     min = 0xffff;
 11262 000026BA 89DE                    	MOV	si,BX			;     pos = 0xffff;
 11263 000026BC 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 11264                                  	;mov	cx,[es:di+4]
 11265 000026C1 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11266                                  	;lea	di,[di+6]
 11267 000026C5 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11268                                  ;
 11269                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 11270                                  ; current entry is busy (indicating a previous aborted allocation), then we
 11271                                  ; are done.  In both cases, we use the found entry.
 11272                                  ;
 11273                                  lru2:
 11274 000026C8 26833D00                	cmp	word [es:di],0
 11275                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 11276 000026CC 7406                    	jz	short lru25
 11277                                  	;cmp	word [es:di],-1
 11278                                  	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 11279 000026CE 26833DFF                	cmp	word [es:di],sf_busy
 11280 000026D2 7504                    	jnz	short lru3
 11281                                  ;
 11282                                  ; The entry is usable without further scan.  Go and use it.
 11283                                  ;
 11284                                  lru25:
 11285 000026D4 89FE                    	MOV	si,DI			;	      pos = i;
 11286 000026D6 EB69                    	JMP	short lru11		;	      goto got;
 11287                                  ;
 11288                                  ; See if the entry is for the network or for the sharer.
 11289                                  ;
 11290                                  ;  If for the sharer or network then
 11291                                  ;	if the age < current minimum AND >= allowed minimum then
 11292                                  ;	    this entry becomes current minimum
 11293                                  ;
 11294                                  lru3:
 11295                                  	;test	word [es:di+5],8000h
 11296 000026D8 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 11297                                  					;	  if (!net[i]
 11298 000026DE 7505                    	JNZ	short lru35
 11299                                  ;if installed
 11300 000026E0 E83C4C                  	call	CheckShare		;		&& !sharing)
 11301 000026E3 7410                    	JZ	short lru5		;	  else
 11302                                  ;ENDIF
 11303                                  ;
 11304                                  ; This SFT is for the net or is for the sharer.  See if it less than the
 11305                                  ; current minimum.
 11306                                  ;
 11307                                  lru35:
 11308                                  	;mov	dx,[es:di+17h]
 11309 000026E5 268B5517                	MOV	DX,[ES:DI+sf_OpenAge]
 11310 000026E9 39C2                    	CMP	DX,AX			;	  if (age[i] >= low &&
 11311 000026EB 7208                    	JB	short lru5
 11312 000026ED 39DA                    	CMP	DX,BX
 11313 000026EF 7304                    	JAE	short lru5		;	      age[i] < min) {
 11314                                  ;
 11315                                  ; entry is new minimum.  Remember his age.
 11316                                  ;
 11317 000026F1 89D3                    	mov	bx,DX			;	      min = age[i];
 11318 000026F3 89FE                    	mov	si,di			;	      pos = i;
 11319                                  ;
 11320                                  ; End of loop.	gp back for more
 11321                                  ;
 11322                                  lru5:
 11323                                  	;add	di,53
 11324 000026F5 83C735                  	add	di,SF_ENTRY.size
 11325 000026F8 E2CE                    	loop	lru2			;	      }
 11326                                  ;
 11327                                  ; The scan is complete.  If we have successfully found a new minimum (pos != -1)
 11328                                  ; set then threshold value to this new minimum + 1.  Otherwise, the scan is
 11329                                  ; complete.  Go find LRU.
 11330                                  ;
 11331                                  lru6:	
 11332 000026FA 83FEFF                  	cmp	si,-1			; position not -1?
 11333 000026FD 7408                    	jz	short lru75		; no, done with everything
 11334 000026FF 8D4701                  	lea	ax,[bx+1]		; set new threshold age
 11335 00002702 EBAD                    	jmp	short lru1		; go and loop for more
 11336                                  lru65:	
 11337 00002704 F9                      	stc
 11338 00002705 EB70                    	jmp	short LRUDead		;	  return -1;
 11339                                  ;
 11340                                  ; Main loop is done.  We have AX being the age+1 of the nth oldest sharer or
 11341                                  ; network entry.  We now make a second pass through to find the LRU entry
 11342                                  ; that is local-no-share or has age >= AX
 11343                                  ;
 11344                                  lru75:
 11345 00002707 BBFFFF                  	mov	bx,-1			; min = 0xffff;
 11346 0000270A 89DE                    	mov	si,bx			; pos = 0xffff;
 11347 0000270C 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 11348                                  	;mov	cx,[es:di+4]
 11349 00002711 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11350                                  	;lea	di,[di+6]
 11351 00002715 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11352                                  ;
 11353                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 11354                                  ; then check for lru.
 11355                                  ;
 11356                                  lru8:
 11357                                  	;test	word [es:di+5],8000h
 11358 00002718 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11359 0000271E 7505                    	jnz	short lru85		; is for network, go check age
 11360 00002720 E8FC4B                  	call	CheckShare		; sharer here?
 11361 00002723 7406                    	jz	short lru86		; no, go check lru
 11362                                  ;
 11363                                  ; Network or sharer.  Check age
 11364                                  ;
 11365                                  lru85:
 11366                                  	;cmp	[es:di+17h],ax
 11367 00002725 26394517                	cmp	[es:di+sf_OpenAge],ax
 11368 00002729 720C                    	jb	short lru9		; age is before threshold, skip it
 11369                                  ;
 11370                                  ; Check LRU
 11371                                  ;
 11372                                  lru86:
 11373                                  	;cmp	[es:di+15h],bx
 11374 0000272B 26395D15                	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 11375 0000272F 7306                    	jae	short lru9		; no, skip this
 11376 00002731 89FE                    	mov	si,di			; remember position
 11377                                  	;mov	bx,[es:di+15h]
 11378 00002733 268B5D15                	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 11379                                  ;
 11380                                  ; Done with this entry, go back for more.
 11381                                  ;
 11382                                  lru9:
 11383                                  	;add	di, 53
 11384 00002737 83C735                  	add	di,SF_ENTRY.size
 11385 0000273A E2DC                    	loop	lru8
 11386                                  ;
 11387                                  ; Scan is complete.  If we found NOTHING that satisfied us then we bomb
 11388                                  ; out.	The conditions here are:
 11389                                  ;
 11390                                  ;   No local-no-shares AND all net/share entries are older than threshold
 11391                                  ;
 11392                                  lru10:
 11393 0000273C 83FEFF                  	cmp	si,-1			; if no one f
 11394 0000273F 74C3                    	jz	short lru65		;     return -1;
 11395                                  lru11:
 11396 00002741 89F7                    	mov	di,si
 11397 00002743 2E893E[3605]            	MOV	[CS:THISSFT],DI		; set thissft
 11398 00002748 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11399                                  ;
 11400                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 11401                                  ; is 0.
 11402                                  ;
 11403                                  	;test	word [es:di+5],8000h
 11404 0000274D 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11405 00002753 7505                    	JNZ	short LRUClose
 11406                                  ;IF INSTALLED
 11407 00002755 E8C74B                  	call	CheckShare
 11408 00002758 7418                    	JZ	short LRUDone
 11409                                  ;ENDIF
 11410                                  ;
 11411                                  ; Repeat close until ref count is 0
 11412                                  ;
 11413                                  LRUClose:
 11414 0000275A 16                      	push	ss
 11415 0000275B 1F                      	pop	ds
 11416 0000275C C43E[3605]              	LES	DI,[THISSFT]
 11417 00002760 26833D00                	cmp     word [es:di],0
 11418                                  	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 11419 00002764 740C                    	JZ	short LRUDone 		; nope, all done
 11420 00002766 E84F13                  	call	DOS_CLOSE
 11421 00002769 73EF                    	jnc	short LRUClose		; no error => clean up
 11422                                  	;cmp	al,6
 11423 0000276B 3C06                    	cmp	al,error_invalid_handle
 11424 0000276D 74EB                    	jz	short LRUClose
 11425 0000276F F9                      	stc
 11426 00002770 EB05                    	JMP	short LRUDead
 11427                                  LRUDone:
 11428 00002772 30C0                    	XOR	AL,AL
 11429 00002774 E8E500                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 11430                                  
 11431                                  LRUDead:
 11432 00002777 E86BEE                  	call	restore_world
 11433 0000277A 2EC43E[3605]             	LES     DI,[CS:THISSFT]
 11434 0000277F 7302                    	jnc	short LRUFCB_retn
 11435                                  LRUFCB_err:
 11436                                  	; mov	al, 23h	
 11437 00002781 B023                    	MOV	AL,error_FCB_unavailable
 11438                                  LRUFCB_retn:	
 11439                                  	retn:
 11440                                  
 11441                                  ;ENDIF
 11442                                  
 11443                                  FCBRegen:
 11444                                  	; called from SFTFromFCB. SS already DOSDATA
 11445                                  
 11446                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 11447                                  	; we do not fill, size we do no fill, position we do not fill,
 11448                                  	; bit 14 of flags = TRUE, other bits = FALSE
 11449                                  
 11450                                  	;mov	al,[si+19h]
 11451 00002783 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11452                                  
 11453                                  	; We discriminate based on the first two bits in the reserved field.
 11454                                  	
 11455                                  	;test	al,80h
 11456 00002786 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 11457 00002788 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 11458                                  
 11459                                  	;
 11460                                  	; The FCB is for a network or a sharing based system.  At this point 
 11461                                  	; we have already closed the SFT for this guy and reconnection is 
 11462                                  	; impossible.
 11463                                  	;
 11464                                  	; Remember that he may have given us a FCB with bogus information in
 11465                                  	; it. Check to see if sharing is present or if the redir is present.
 11466                                  	; If either is around, presume that we have cycled out the FCB and 
 11467                                  	; give the hard error. Otherwise, just return with carry set.
 11468                                  	;
 11469                                  
 11470 0000278A E8924B                  	call	CheckShare		; test for sharer
 11471 0000278D 7509                    	JNZ	short RegenFail		; yep, fail this.
 11472                                  	;mov	ax,1100h
 11473 0000278F B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 11474 00002792 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 11475                                  			; Return: AL = 00h  not installed, OK to install
 11476                                  			; 01h  not installed, not OK to install
 11477                                  			; FFh  installed
 11478 00002794 08C0                    	OR	AL,AL			; is it there?
 11479 00002796 740C                    	JZ	short RegenDead		; no, just fail the operation
 11480                                  RegenFail:
 11481 00002798 2EA1[E602]              	MOV     AX,[CS:USER_IN_AX]	; SS override
 11482                                  	;cmp	ah,10h
 11483 0000279C 80FC10                  	cmp	AH,FCB_CLOSE
 11484 0000279F 7403                    	jz	short RegenDead
 11485 000027A1 E8C701                  	call	FCBHardErr		; massive hard error.
 11486                                  RegenDead:
 11487 000027A4 F9                      	STC				; carry set
 11488                                  FCBRegen_retn:
 11489 000027A5 C3                      	retn
 11490                                  
 11491                                  	;
 11492                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 11493                                  	; so fail the operation.
 11494                                  	;
 11495                                  RegenNoSharing:
 11496 000027A6 E8764B                  	call	CheckShare		; Sharing around?
 11497 000027A9 75ED                    	JNZ	short RegenFail
 11498                                  	
 11499                                  	; Find an SFT for this guy.
 11500                                  	
 11501                                  	; MSDOS 6.0
 11502                                  	;push	ax
 11503                                  	;mov	al,0			;indicate it is a regen operation
 11504                                  	;call	LRUFCB
 11505                                  	;pop	ax
 11506                                  	;jc	short FCBRegen_retn
 11507                                  
 11508                                  	; MSDOS 3.3
 11509 000027AB E8F9FE                  	call	LRUFCB
 11510 000027AE 72F5                    	jc	short FCBRegen_retn
 11511                                  
 11512                                  	;mov	word [es:di+2],8002h
 11513 000027B0 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 11514 000027B6 243F                    	AND	AL,3Fh			; get drive number for flags
 11515 000027B8 98                      	CBW
 11516                                  	;or	ax,4000h
 11517 000027B9 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 11518                                  
 11519                                  	;
 11520                                  	; The bits field consists of the upper two bits (dirty and device) 
 11521                                  	; from the SFT and the low 4 bits from the open mode.
 11522                                  	;
 11523                                  
 11524                                  	;mov	cl,[si+1Ah]
 11525 000027BC 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 11526 000027BF 88CD                    	MOV	CH,CL
 11527 000027C1 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 11528 000027C4 08E8                    	OR	AL,CH
 11529                                  	;and	cl,0Fh
 11530 000027C6 80E10F                  	AND	CL,access_mask		; get the mode bits
 11531                                  	;mov	[es:di+2],cl
 11532 000027C9 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 11533                                  	;mov	[es:di+5],ax
 11534 000027CD 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 11535 000027D1 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11536                                  	;mov	[es:di+31h],ax
 11537 000027D5 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 11538 000027D9 1E                      	push	ds
 11539 000027DA 56                      	push	si
 11540 000027DB 06                      	push	es
 11541 000027DC 57                      	push	di
 11542 000027DD 16                      	push	ss
 11543 000027DE 07                      	pop	es
 11544 000027DF BF[E604]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 11545                                  
 11546 000027E2 B90800                  	MOV	CX,8
 11547 000027E5 46                      	INC	SI			; Skip past drive byte to name in FCB
 11548                                  
 11549                                  	; MSDOS 6.0
 11550                                  	;call	RegenCopyName		;copy the name to NAME1
 11551                                  
 11552                                  	; MSDOS 3.3
 11553                                  RegenCopyName:
 11554 000027E6 AC                      	lodsb
 11555 000027E7 E8232E                  	call	UCase
 11556 000027EA AA                      	stosb
 11557 000027EB E2F9                    	loop	RegenCopyName
 11558                                  
 11559 000027ED 16                      	push	ss	; SS is DOSDATA
 11560 000027EE 1F                      	pop	ds
 11561                                  
 11562                                  	;mov	byte [ATTRIB],16h
 11563 000027EF C606[0605]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 11564                                  					; Must set this to something interesting
 11565                                  					; to call DEVNAME.
 11566 000027F4 E8E622                  	call	DEVNAME 		; check for device
 11567 000027F7 5E                      	pop	si
 11568 000027F8 07                      	pop	es
 11569 000027F9 5E                      	pop	si
 11570 000027FA 1F                      	pop	ds
 11571 000027FB 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 11572                                  
 11573                                  	;
 11574                                  	; Device found.  We can ignore disk-specific info
 11575                                  	;
 11576                                  
 11577                                  	;mov	[es:di+5],bh
 11578 000027FD 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 11579                                  	;mov	byte [es:di+4],0
 11580 00002801 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 11581                                  					; SS override
 11582 00002806 2EC536[3205]            	LDS	SI,[CS:DEVPT]		; get device driver
 11583                                  	;mov	[es:di+7],si
 11584 0000280B 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11585                                  	;mov	[es:di+9],ds
 11586 0000280F 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11587 00002813 C3                      	retn				; carry is clear
 11588                                  
 11589                                  RegenDeadJ:
 11590 00002814 EB8E                    	JMP	RegenDead
 11591                                  
 11592                                  	;
 11593                                  	; File found.  Just copy in the remaining pieces.
 11594                                  	;
 11595                                  
 11596                                  RegenFileNoSharing:
 11597                                  	;mov	ax,[es:di+5]
 11598 00002816 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11599 0000281A 83E03F                  	AND	AX,03Fh
 11600 0000281D 1E                      	push	ds
 11601 0000281E 56                      	push	si
 11602 0000281F E88140                  	call	FIND_DPB
 11603                                  	;mov	[es:di+7],si
 11604 00002822 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11605                                  	;mov	[es:di+9],ds
 11606 00002826 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11607 0000282A 5E                      	pop	si
 11608 0000282B 1F                      	pop	ds
 11609 0000282C 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 11610                                  					; indicator was bogus
 11611                                  	;mov	ax,[si+1Dh]
 11612 0000282E 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 11613                                  	;mov	[es:di+1Dh],ax
 11614 00002831 2689451D                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 11615                                  
 11616                                  	;MSDOS6.0
 11617                                  	; SR;
 11618                                  	; Update the higher word of the directory sector from the FCB
 11619                                  	;
 11620                                  
 11621                                  	;MOV	word [ES:DI+SF_ENTRY.sf_dirsec+2],0	;AN000;>32mb
 11622                                  
 11623                                  	; SR;
 11624                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 11625                                  	; number
 11626                                  	;
 11627                                  
 11628                                  	;mov	al,[si+fcb_sfn]
 11629                                  	;and	al,0C0h		;get the 2 attribute bits
 11630                                  	;mov	ah,al
 11631                                  	;rol	ah,1
 11632                                  	;shr	al,1
 11633                                  	;or	al,ah
 11634                                  	;and	al,03Fh		;mask off unused bits
 11635                                  	;mov	[es:di+SF_ENTRY.sf_attr],al
 11636                                  
 11637                                  	;mov	al,[si+fcb_sfn]
 11638                                  	;and	al,03Fh		;mask off top 2 bits -- attr bits
 11639                                  	;sub	ah,ah
 11640                                  	;mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 11641                                  
 11642                                  	; MSDOS 3.3 (& MSDOS 6.0)
 11643                                  	;mov	ax,[si+1Bh]
 11644 00002835 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 11645                                  	;mov	[es:di+0Bh],ax
 11646 00002838 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 11647                                  	;mov	[es:di+1Bh],ax
 11648 0000283C 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 11649                                  	;mov	al,[si+1Fh]
 11650 00002840 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 11651                                  	;mov  	[es:di+1Fh], al
 11652 00002843 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 11653                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 11654 00002847 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 11655                                  					; Existing FCB entries would be
 11656                                  					; flushed unnecessarily because of
 11657                                  					; check in CheckFCB of the ref_count.
 11658                                  					; July 22/85 - BAS
 11659                                  	;lea	si,[si+1]
 11660 0000284A 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11661                                  	;lea	di,[di+20h] ; MSDOS 3.3 
 11662 0000284D 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11663                                  	;mov	cx,11
 11664 00002850 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11665                                  	
 11666                                  	; 17/05/2019
 11667                                  	; MSDOS 6.0
 11668                                  	;call	RegenCopyName	;copy name to SFT 
 11669                                  	;
 11670                                  	; MSDOS3.3
 11671                                  RegenCopyName2:
 11672 00002853 AC                      	lodsb
 11673 00002854 E8B62D                  	call    UCase
 11674 00002857 AA                      	stosb
 11675 00002858 E2F9                    	loop    RegenCopyName2
 11676                                  
 11677 0000285A F8                      	clc
 11678 0000285B C3                      	retn
 11679                                  
 11680                                  ;**	BlastSFT - FIll SFT with Garbage
 11681                                  ;
 11682                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 11683                                  ;	various garbage values to put into the SFT.  I don't know why,
 11684                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 11685                                  ;	necessary to show that the SFT is free after filling it.
 11686                                  ;
 11687                                  ;	ENTRY	(es:di) = address of SFT
 11688                                  ;		(al) = fill character
 11689                                  ;	EXIT	(ax) = -1
 11690                                  ;		'C' clear
 11691                                  ;	USES	AX, CX, Flags
 11692                                  
 11693                                  BlastSFT:
 11694 0000285C 57                      	push	di
 11695                                  	;mov	cx,53
 11696 0000285D B93500                  	mov	cx,SF_ENTRY.size
 11697 00002860 F3AA                    	rep	stosb
 11698 00002862 5F                      	pop	di
 11699 00002863 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 11700 00002865 268905                  	mov	[es:di],ax
 11701                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 11702                                  	;mov	[es:di+15h],ax
 11703 00002868 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 11704 0000286C 48                      	dec	ax	; -1					    ;
 11705                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 11706 0000286D 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 11707                                  BlastSFT_retn:
 11708 00002871 C3                      	retn				; return with 'C' clear     ;
 11709                                  
 11710                                  
 11711                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 11712                                  ;----------------------------------------------------------------------------
 11713                                  ;
 11714                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 11715                                  ;   regenerated.
 11716                                  ;
 11717                                  ;   Inputs:	DS:SI point to FCB (not extended)
 11718                                  ;		AL is SFT index
 11719                                  ;   Outputs:	Carry Set - FCB needs to be regened
 11720                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 11721                                  ;   Registers modified: AX and BX
 11722                                  ;
 11723                                  ;----------------------------------------------------------------------------
 11724                                  ;
 11725                                  
 11726                                  CheckFCB:
 11727                                  		
 11728                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 11729                                  
 11730                                  	; MSDOS6.0
 11731                                  	; SR;
 11732                                  	; We check if the given FCB is for a local file. If so, we return a 
 11733                                  	; bad SFT status forcing the caller to regenerate the SFT.
 11734                                  
 11735                                  	;test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 11736                                  	;jz	short BadSFT		;Local file, return bad SFT
 11737                                  
 11738                                  	; MSDOS 3.3 (& MSDOS6.0)
 11739 00002872 2EC43E[4000]            	LES     DI,[CS:SFTFCB]		; SS override
 11740                                  	;cmp	[es:di+4],al
 11741 00002877 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 11742 0000287B 7248                    	JC	short BadSFT
 11743 0000287D B335                    	MOV	BL,SF_ENTRY.size
 11744 0000287F F6E3                    	MUL	BL
 11745                                  	;lea	di,[di+6]
 11746 00002881 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11747 00002884 01C7                    	ADD	DI,AX
 11748 00002886 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11749                                  	;cmp	[es:di+31h],ax
 11750 0000288A 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 11751 0000288E 7535                    	JNZ	short BadSFT		; must match process
 11752 00002890 26833D00                	cmp	word [es:di],0
 11753                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11754 00002894 742F                    	JZ	short BadSFT		; must also be in use
 11755                                  	;mov	al,[si+19h]
 11756 00002896 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11757                                  	;test	al,80h
 11758 00002899 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 11759 0000289B 7443                    	JZ	short CheckNoShare	; No. try local or device
 11760                                  
 11761                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 11762                                  	; FCBSHARE is a superset of FCBNETWORK.
 11763                                  
 11764 0000289D 50                      	PUSH	AX
 11765                                  	;and	al,0C0h
 11766 0000289E 24C0                    	AND	AL,FCBMASK
 11767                                  	;cmp	al,0C0h
 11768 000028A0 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 11769 000028A2 58                      	POP	AX
 11770 000028A3 7522                    	JNZ	short CheckNet		; yes
 11771                                  ;
 11772                                  ;----- In share support -----
 11773                                  ;
 11774                                  	; 26/07/2019
 11775 000028A5 2EFF1E[8800]            	call	far [cs:JShare+(11*4)]  ; 11 = ShChk
 11776                                  	;Call	far [ss:JShare+(11*4)]	; SS Override
 11777 000028AA 7219                    	JC	short BadSFT
 11778 000028AC EB0A                    	JMP	SHORT CheckD
 11779                                  ;
 11780                                  ;----- End in share support -----
 11781                                  ;
 11782                                  CheckFirClus:
 11783 000028AE 263B5D0B                	cmp     bx,[es:di+0Bh]
 11784 000028B2 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 11785 000028B6 750D                    	JNZ	short BadSFT
 11786                                  CheckD: 
 11787 000028B8 243F                    	AND	AL,3Fh
 11788                                  	;mov	ah,[es:di+5]
 11789 000028BA 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 11790 000028BE 80E43F                  	AND	AH,3Fh
 11791 000028C1 38C4                    	CMP	AH,AL
 11792 000028C3 74AC                    	jz	short BlastSFT_retn	; carry is clear
 11793                                  BadSFT: 
 11794 000028C5 F9                      	STC
 11795 000028C6 C3                      	retn				; carry is clear
 11796                                  CheckNet:
 11797                                  ;
 11798                                  ;----- In net support -----
 11799                                  ;
 11800                                  	; MSDOS 6.0
 11801                                  	;MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 11802                                  	;CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 11803                                  	;JNZ	short BadSFT
 11804                                  
 11805                                  	; MSDOS 3.3
 11806                                  	;mov	ax,[si+1Ah]
 11807 000028C7 8B441A                  	mov	ax,[si+fcb_net_handle]
 11808                                  	;cmp	ax,[es:di+1Dh]
 11809 000028CA 263B451D                	cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 11810 000028CE 75F5                    	jnz	short BadSFT
 11811                                  	;cmp	ax,[es:di+19h]
 11812 000028D0 263B4519                	cmp	ax,[ES:DI+sf_netid]
 11813 000028D4 75EF                    	jnz     short BadSFT
 11814                                  	;mov	ax,[si+1Eh]
 11815 000028D6 8B441E                  	mov	ax,[si+fcb_l_attr]
 11816                                  	;cmp	ax,[es:di+1Bh]
 11817 000028D9 263B451B                	cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 11818 000028DD 75E6                    	jnz     short BadSFT
 11819                                  ;
 11820                                  ;----- END In net support -----
 11821                                  ;
 11822                                  CheckNet_retn:
 11823 000028DF C3                      	retn
 11824                                  
 11825                                  CheckNoShare:
 11826                                  	;test	al,40h
 11827 000028E0 A840                    	test	AL,FCBDEVICE		; Device?
 11828 000028E2 753F                    	JNZ	short CheckNoShareDev 	; Yes
 11829                                  
 11830                                  	; MSDOS6.0
 11831                                  	; SR;
 11832                                  	; The code below to match a local FCB with its SFT can no longer be
 11833                                  	; used. We just return a no-match status. This check is done right
 11834                                  	; at the top.
 11835                                  	;
 11836                                  
 11837                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 11838                                  	;mov	bx,[si+1Dh]
 11839 000028E4 8B5C1D                  	MOV	BX,[SI+fcb_nsl_dirsec]
 11840                                  	;cmp	bx,[es:di+1Dh]
 11841 000028E7 263B5D1D                	cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 11842 000028EB 75D8                    	jnz	short BadSFT
 11843                                  	;mov	bl,[si+1Fh]
 11844 000028ED 8A5C1F                  	MOV	bl,[SI+fcb_nsl_dirpos]
 11845                                  	;cmp	bl,[es:di+1Fh]
 11846 000028F0 263A5D1F                	cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 11847 000028F4 75CF                    	jnz     short BadSFT
 11848                                  	;mov	bl,[si+1Ah]
 11849 000028F6 8A5C1A                  	MOV	bl,[SI+fcb_nsl_bits]
 11850                                  	;mov	bh,[es:di+5]
 11851 000028F9 268A7D05                	MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 11852 000028FD 30DF                    	xor     bh,bl
 11853 000028FF 80E7C0                  	and     bh,0C0h
 11854 00002902 75C1                    	jnz     short BadSFT
 11855                                  	;xor	bl,[es:di+2]
 11856 00002904 26325D02                	xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 11857 00002908 80E30F                  	and     bl,0Fh
 11858 0000290B 75B8                    	jnz     short BadSFT
 11859 0000290D 57                      	push    di
 11860 0000290E 56                      	push    si
 11861                                  	;lea	di,[di+20h]  ; MSDOS 3.3
 11862 0000290F 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11863                                  	;lea	si,[si+1]
 11864 00002912 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11865                                  	;mov	cx,11
 11866 00002915 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11867 00002918 F3A6                    	repe	cmpsb
 11868 0000291A 5E                      	pop     si
 11869 0000291B 5F                      	pop     di
 11870 0000291C 75A7                    	jnz     short BadSFT
 11871                                  	;mov	bx,[si+1Bh]
 11872 0000291E 8B5C1B                  	MOV	bX,[SI+fcb_nsl_firclus]
 11873 00002921 EB8B                    	jmp     short CheckFirClus
 11874                                  
 11875                                  CheckNoShareDev:
 11876                                  	;mov	bx,[si+1Ah]
 11877 00002923 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 11878                                  	;cmp	bx,[es:di+7]
 11879 00002926 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 11880 0000292A 7599                    	JNZ	short BadSFT
 11881                                  	;mov	bx,[si+1Ch]
 11882 0000292C 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 11883                                  	;cmp	bx,[es:di+9]
 11884 0000292F 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11885 00002933 7590                    	JNZ	short BadSFT
 11886 00002935 EB81                    	JMP	CheckD
 11887                                  
 11888                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 11889                                  ;----------------------------------------------------------------------------
 11890                                  ;
 11891                                  ;   SFTFromFCB - the workhorse of this compatability crap.  Check to see if
 11892                                  ;	the SFT for the FCB is Good.  If so, make ThisSFT point to it.	If not
 11893                                  ;	good, get one from the cache and regenerate it.  Overlay the LRU field
 11894                                  ;	with PID
 11895                                  ;
 11896                                  ;   Inputs:	DS:SI point to FCB
 11897                                  ;   Outputs:	ThisSFT point to appropriate SFT
 11898                                  ;		Carry clear -> OK ES:DI -> SFT
 11899                                  ;		Carry set -> error in ax
 11900                                  ;   Registers modified: ES,DI, AX
 11901                                  ;
 11902                                  ;----------------------------------------------------------------------------
 11903                                  
 11904                                  SFTFromFCB:
 11905                                  
 11906                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 11907                                  
 11908 00002937 50                      	push	ax
 11909 00002938 53                      	push	bx
 11910                                  	;mov	al,[si+18h]
 11911 00002939 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 11912 0000293C E833FF                  	call	CheckFCB
 11913 0000293F 5B                      	pop	bx
 11914 00002940 58                      	pop	ax
 11915 00002941 2E893E[3605]            	MOV	[CS:THISSFT],DI		; SS override
 11916 00002946 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11917 0000294B 730F                    	JNC	short Set_SFT		; no problems, just set thissft
 11918 0000294D E8A8EC                  	call	save_world
 11919 00002950 E830FE                  	call	FCBRegen
 11920 00002953 E88FEC                  	call	restore_world		; use macro restore world
 11921 00002956 2EA1[D202]              	MOV     AX,[CS:EXTERR]		; SS override
 11922 0000295A 7283                    	jc	short CheckNet_retn
 11923                                  
 11924                                  Set_SFT: 
 11925 0000295C 2EC43E[3605]            	LES     DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 11926 00002961 2EFF36[E802]            	PUSH    word [CS:PROC_ID]	; set process id
 11927                                  	;pop	word [es:di+31h]
 11928 00002966 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 11929 0000296A C3                      	retn				; carry is clear
 11930                                  
 11931                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 11932                                  ;----------------------------------------------------------------------------
 11933                                  ;
 11934                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 11935                                  ;	unavailable FCB.
 11936                                  ;
 11937                                  ;   Inputs:	none.
 11938                                  ;   Outputs:	none.
 11939                                  ;   Registers modified: all
 11940                                  ;
 11941                                  ;----------------------------------------------------------------------------
 11942                                  ;
 11943                                  
 11944                                  FCBHardErr:
 11945                                  	;mov	ax,23h
 11946 0000296B B82300                  	MOV	AX,error_FCB_unavailable
 11947                                  	;mov	byte [cs:ALLOWED],8
 11948 0000296E 2EC606[F702]08          	MOV	byte [CS:ALLOWED],Allowed_FAIL
 11949 00002974 2EC42E[2405]            	LES	BP,[CS:THISDPB]
 11950 00002979 BF0100                  	MOV	DI,1			; Fake some registers
 11951 0000297C 89F9                    	MOV	CX,DI
 11952                                  	;mov	dx,[es:bp+0Bh]
 11953 0000297E 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 11954 00002982 E8C42E                  	call	HARDERR
 11955 00002985 F9                      	STC
 11956 00002986 C3                      	retn
 11957                                  
 11958                                  ;============================================================================
 11959                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 11960                                  ;============================================================================
 11961                                  ; 21/07/2018 - Retro DOS v3.0
 11962                                  
 11963                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 11964                                  ;
 11965                                  ;	GetRR
 11966                                  ;	GetExtent
 11967                                  ;	SetExtent
 11968                                  ;	GetExtended
 11969                                  ;	GetRecSize
 11970                                  ;	FCBIO
 11971                                  ;	$FCB_OPEN
 11972                                  ;	$FCB_CREATE
 11973                                  ;	$FCB_RANDOM_WRITE_BLOCK
 11974                                  ;	$FCB_RANDOM_READ_BLOCK
 11975                                  ;	$FCB_SEQ_READ
 11976                                  ;	$FCB_SEQ_WRITE
 11977                                  ;	$FCB_RANDOM_READ
 11978                                  ;	$FCB_RANDOM_WRITE
 11979                                  ;
 11980                                  ;	Revision history:
 11981                                  ;
 11982                                  ;		Created: ARR 4 April 1983
 11983                                  ;			 MZ  6 June  1983 completion of functions
 11984                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11985                                  ;				  times.  Change so successive closes work by
 11986                                  ;				  always returning OK.	Also, detect I/O to
 11987                                  ;				  already closed FCB and return EOF.
 11988                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11989                                  ;				  out of sft into FCB for reconnection
 11990                                  ;
 11991                                  ;	    A000   version 4.00	Jan. 1988
 11992                                  
 11993                                  ; Defintions for FCBOp flags
 11994                                  
 11995                                  RANDOM	equ 2				; random operation
 11996                                  FCBREAD equ 4				; doing a read
 11997                                  BLOCK	equ 8				; doing a block I/O
 11998                                  
 11999                                  ;Break <GetRR - return the random record field in DX:AX>
 12000                                  ;---------------------------------------------------------------------------
 12001                                  ;
 12002                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 12003                                  ;	from the FCB pointed to by DS:SI
 12004                                  ;
 12005                                  ;   Inputs:	DS:SI point to an FCB
 12006                                  ;		BX has record size
 12007                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12008                                  ;   Registers modified: none
 12009                                  ;---------------------------------------------------------------------------
 12010                                  
 12011                                  GetRR:
 12012                                  	;mov	ax,[si+21h]
 12013 00002987 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 12014                                  	;mov	dx,[si+23h]
 12015 0000298A 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 12016 0000298D 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 12017 00002990 7202                    	JB	short GetRRBye
 12018 00002992 30F6                    	XOR	DH,DH
 12019                                  GetRRBye:
 12020 00002994 C3                      	retn
 12021                                  
 12022                                  ;Break <GetExtent - retrieve next location for sequential IO>
 12023                                  ;---------------------------------------------------------------------------
 12024                                  ;
 12025                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 12026                                  ;	NR fields in the FCB.
 12027                                  ;
 12028                                  ;   Inputs:	DS:SI - point to FCB
 12029                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12030                                  ;   Registers modified: none
 12031                                  ;---------------------------------------------------------------------------
 12032                                  
 12033                                  GetExtent:
 12034                                  	;mov	al,[si+20h]
 12035 00002995 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 12036                                  	;mov	dx,[si+0Ch]
 12037 00002998 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 12038 0000299B D0E0                    	SHL	AL,1
 12039 0000299D D1EA                    	SHR	DX,1
 12040 0000299F D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 12041 000029A1 88D4                    	MOV	AH,DL
 12042 000029A3 88F2                    	MOV	DL,DH
 12043 000029A5 30F6                    	XOR	DH,DH
 12044 000029A7 C3                      	retn
 12045                                  
 12046                                  ;Break <SetExtent - update the extent/NR field>
 12047                                  ;---------------------------------------------------------------------------
 12048                                  ;
 12049                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 12050                                  ;	fields
 12051                                  ;
 12052                                  ;   Inputs:	DS:SI point to FCB
 12053                                  ;		DX:AX is a record location in file
 12054                                  ;   Outputs:	Extent/NR fields are filled in
 12055                                  ;   Registers modified: CX
 12056                                  ;---------------------------------------------------------------------------
 12057                                  
 12058                                  SetExtent:
 12059 000029A8 50                      	push	ax
 12060 000029A9 52                      	push	dx
 12061 000029AA 89C1                    	MOV	CX,AX
 12062 000029AC 247F                    	AND	AL,7FH			; next rec field
 12063                                  	;mov	[si+20h],al
 12064 000029AE 884420                  	MOV	[SI+SYS_FCB.NR],AL
 12065 000029B1 80E180                  	AND	CL,80H			; save upper bit
 12066 000029B4 D1E1                    	SHL	CX,1
 12067 000029B6 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 12068 000029B8 88E8                    	MOV	AL,CH
 12069 000029BA 88D4                    	MOV	AH,DL
 12070                                  	;mov	[si+0Ch], ax
 12071 000029BC 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 12072 000029BF 5A                      	pop	dx
 12073 000029C0 58                      	pop	ax
 12074 000029C1 C3                      	retn
 12075                                  
 12076                                  ;Break <GetExtended - find FCB in potential extended fcb>
 12077                                  ;---------------------------------------------------------------------------
 12078                                  ;
 12079                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 12080                                  ;
 12081                                  ;   Inputs:	DS:DX point to a possible extended FCB
 12082                                  ;   Outputs:	DS:SI point to the FCB part
 12083                                  ;		zeroflag set if not extended fcb
 12084                                  ;   Registers modified: SI
 12085                                  ;---------------------------------------------------------------------------
 12086                                  
 12087                                  GetExtended:
 12088 000029C2 89D6                    	MOV	SI,DX			; point to Something
 12089 000029C4 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 12090 000029C7 7503                    	JNZ	short GetBye		; not there
 12091 000029C9 83C607                  	ADD	SI,7			; point to FCB
 12092                                  GetBye:
 12093 000029CC 39D6                    	CMP	SI,DX			; set condition codes
 12094                                  getextd_retn:
 12095 000029CE C3                      	retn
 12096                                  
 12097                                  ;Break <GetRecSize - return in BX the FCB record size>
 12098                                  ;---------------------------------------------------------------------------
 12099                                  ;
 12100                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 12101                                  ;
 12102                                  ;   Inputs:	DS:SI point to a non-extended FCB
 12103                                  ;   Outputs:	BX contains the record size
 12104                                  ;   Registers modified: None
 12105                                  ;---------------------------------------------------------------------------
 12106                                  
 12107                                  	; 22/01/2024
 12108                                  GetRecSize:
 12109                                  	;mov	bx,[si+0Eh]
 12110 000029CF 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 12111 000029D2 09DB                    	OR	BX,BX			; is it nul?
 12112                                  	;jz	short getextd_retn
 12113                                  	; 22/01/2024 (BugFix)
 12114 000029D4 75F8                    	jnz	short getextd_retn
 12115                                  	;MOV	BX,128			; use default size
 12116 000029D6 B380                    	mov	bl,128
 12117                                  	;mov	[si+0Eh],bx
 12118 000029D8 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 12119 000029DB C3                      	retn
 12120                                  
 12121                                  ;BREAK <FCBIO - do internal FCB I/O>
 12122                                  ;---------------------------------------------------------------------------
 12123                                  ;
 12124                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 12125                                  ;
 12126                                  ;   Inputs:	FCBOP flags which operations need to be performed
 12127                                  ;		DS:DX point to FCB
 12128                                  ;		CX may have count of number of records to xfer
 12129                                  ;   Outputs:	AL has error code
 12130                                  ;   Registers modified: all
 12131                                  ;---------------------------------------------------------------------------
 12132                                  
 12133                                  FCBIO:
 12134                                  
 12135                                  FEOF	EQU	1
 12136                                  FTRIM	EQU	2
 12137                                  
 12138                                  %define	FCBErr	byte [bp-1]  ; byte	
 12139                                  %define	cRec	word [bp-3]  ; word	
 12140                                  ;%define RecPos	word [bp-7]  ; dword
 12141                                  %define RecPosL	word [bp-7]  ; word
 12142                                  %define RecPosH	word [bp-5]  ; word
 12143                                  %define	RecSize	word [bp-9]  ; word
 12144                                  ;%define bPos	word [bp-13] ; dword
 12145                                  %define bPosL	word [bp-13] ; word
 12146                                  %define bPosH	word [bp-11] ; word
 12147                                  %define cByte	word [bp-15] ; word	
 12148                                  %define cResult word [bp-17] ; word	
 12149                                  %define	cRecRes	word [bp-19] ; word
 12150                                  %define	FCBOp	byte [bp-20] ; byte
 12151                                  
 12152                                  	;Enter
 12153                                  
 12154 000029DC 55                      	push	bp
 12155 000029DD 89E5                    	mov	bp,sp
 12156 000029DF 83EC14                  	sub	sp,20
 12157                                  	;mov	[bp-20],al
 12158 000029E2 8846EC                  	MOV	FCBOp,AL
 12159                                  	;mov	byte [bp-1],0
 12160 000029E5 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 12161 000029E9 E8D6FF                  	call	GetExtended		;   FCB = GetExtended ();
 12162                                  	;test	byte [bp-20],8
 12163 000029EC F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 12164 000029F0 7503                    	JNZ	short GetPos
 12165 000029F2 B90100                  	MOV	CX,1			;	cRec = 1;
 12166                                  GetPos:
 12167                                  	;mov	[bp-3],cx
 12168 000029F5 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 12169 000029F8 E89AFF                  	call	GetExtent		;   RecPos = GetExtent ();
 12170 000029FB E8D1FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 12171                                  	;mov	[bp-9],bx
 12172 000029FE 895EF7                  	MOV	RecSize,BX
 12173                                  	;test	byte [bp-20],2
 12174 00002A01 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 12175 00002A05 7403                    	JZ	short GetRec
 12176 00002A07 E87DFF                  	call	GetRR			;	RecPos = GetRR ();
 12177                                  GetRec:
 12178                                  	;mov	[bp-7],ax
 12179 00002A0A 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 12180                                  	;mov	[bp-5],dx
 12181 00002A0D 8956FB                  	MOV	RecPosH,DX
 12182 00002A10 E895FF                  	call	SetExtent		;   SetExtent (RecPos);
 12183                                  	;mov	ax,[bp-5]
 12184 00002A13 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 12185 00002A16 F7E3                    	MUL	BX
 12186 00002A18 89C7                    	MOV	DI,AX
 12187                                  	;mov	ax,[bp-7]
 12188 00002A1A 8B46F9                  	MOV	AX,RecPosL
 12189 00002A1D F7E3                    	MUL	BX
 12190 00002A1F 01FA                    	ADD	DX,DI
 12191                                  	;mov	[bp-13],ax
 12192 00002A21 8946F3                  	MOV	bPosL,AX
 12193                                  	;mov	[bp-11],dx
 12194 00002A24 8956F5                  	MOV	bPosH,DX
 12195                                  	;mov	ax,[bp-3]
 12196 00002A27 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 12197 00002A2A F7E3                    	MUL	BX
 12198                                  	;mov	[bp-15],ax
 12199 00002A2C 8946F1                  	MOV	cByte,AX
 12200                                  
 12201                                  ;hkn; 	SS override
 12202 00002A2F 360306[DA02]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 12203 00002A34 83D200                  	ADC	DX,0
 12204 00002A37 7419                    	JZ	short DoOper
 12205                                  	;mov	byte [bp-1],2
 12206 00002A39 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 12207                                  
 12208                                  ;hkn; 	SS override
 12209 00002A3D 36A1[DA02]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 12210 00002A41 F7D8                    	NEG	AX
 12211 00002A43 7501                    	JNZ	short DoDiv
 12212 00002A45 48                      	DEC	AX
 12213                                  DoDiv:
 12214 00002A46 31D2                    	XOR	DX,DX
 12215 00002A48 F7F3                    	DIV	BX
 12216                                  	;mov	[bp-3],ax
 12217 00002A4A 8946FD                  	MOV	cRec,AX
 12218 00002A4D F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 12219                                  	;mov	[bp-15],ax
 12220 00002A4F 8946F1                  	MOV	cByte,AX		;	}
 12221                                  DoOper:
 12222 00002A52 31DB                    	XOR	BX,BX
 12223                                  	;mov	[bp-17],bx
 12224 00002A54 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 12225                                  	;cmp	[bp-15],bx
 12226 00002A57 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 12227 00002A5A 7506                    	JNZ	short DoGetExt
 12228                                  	;test	byte [bp-1],2
 12229 00002A5C F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 12230                                  	;JZ	short DoGetExt
 12231                                  	;JMP	short SkipOp
 12232 00002A60 7576                    	jnz	short SkipOp
 12233                                  DoGetExt:
 12234 00002A62 E8D2FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 12235 00002A65 730F                    	JNC	short ContinueOp
 12236                                  FCBDeath:
 12237 00002A67 E8B2EC                  	call	FCB_RET_ERR		; signal error, map for extended
 12238                                  	;mov	word [bp-19],0
 12239 00002A6A C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 12240                                  	;mov	byte [bp-1],1
 12241 00002A6F C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 12242 00002A73 E9F000                  	JMP	FCBSave 		; bam!
 12243                                  ContinueOp:
 12244                                  	;mov	di,offset DOS_READ
 12245                                  	;test	byte [bp-14h],4
 12246                                  	;jnz	short DoContext
 12247                                  	;mov	di,DOS_WRITE
 12248                                  
 12249                                  	;mov	ax,[si+10h]
 12250 00002A76 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 12251                                  	;mov	[es:di+11h],ax
 12252 00002A79 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 12253                                  	;mov	ax,[si+12h]
 12254 00002A7D 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 12255                                  	;mov	[es:di+13h],ax
 12256 00002A80 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 12257                                  	;mov	ax,[bp-13]
 12258 00002A84 8B46F3                  	MOV	AX,bPosL
 12259                                  	;mov	dx,[bp-11]
 12260 00002A87 8B56F5                  	MOV	DX,bPosH
 12261                                  	;mov	[es:di+15h],ax
 12262 00002A8A 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 12263                                  	;xchg	dx,[es:di+17h]
 12264 00002A8E 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 12265 00002A92 52                      	PUSH	DX			; save away Open age.
 12266                                  	;mov	cx,[bp-15]
 12267 00002A93 8B4EF1                  	MOV	CX,cByte		;	cResult =
 12268                                  
 12269                                  ;hkn; DOS_Read is in DOSCODE
 12270 00002A96 BF[FA3D]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 12271                                  	;test	byte [bp-20],4
 12272 00002A99 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 12273 00002A9D 7503                    	JNZ	short DoContext
 12274                                  
 12275                                  ;hkn; DOS_Write is in DOSCODE
 12276 00002A9F BF[7B3F]                	MOV	DI,DOS_WRITE
 12277                                  DoContext:
 12278 00002AA2 55                      	push	bp
 12279 00002AA3 1E                      	push	ds
 12280 00002AA4 56                      	push	si
 12281                                  
 12282                                  ;hkn; SS is DOSDATA
 12283 00002AA5 16                      	push	ss
 12284 00002AA6 1F                      	pop	ds
 12285                                  
 12286                                  ;; Fix for disk full
 12287 00002AA7 FFD7                    	CALL	DI
 12288                                  	
 12289 00002AA9 5E                      	pop	si
 12290 00002AAA 1F                      	pop	ds
 12291 00002AAB 5D                      	pop	bp
 12292 00002AAC 72B9                    	JC	short FCBDeath
 12293                                  	
 12294 00002AAE 36803E[8C0F]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 12295 00002AB4 740A                    	JZ	short NODSKFULL
 12296 00002AB6 36C606[8C0F]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 12297                                  	;mov	byte [bp-1],1 
 12298 00002ABC C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 12299                                  NODSKFULL:
 12300                                  ;; Fix for disk full
 12301                                  	;mov	[bp-17],cx
 12302 00002AC0 894EEF                  	MOV	cResult,CX
 12303 00002AC3 E804FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 12304                                  	;pop	word [es:di+17h]	
 12305 00002AC6 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 12306                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 12307                                  	;mov	ax,[es:di+11h]
 12308 00002ACA 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 12309                                  	;mov	[si+10h],ax
 12310 00002ACE 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12311                                  	;mov	ax,[es:di+13h]
 12312 00002AD1 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12313                                  	;mov	[si+12h],ax
 12314 00002AD5 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12315                                  					;	}
 12316                                  SkipOp:
 12317                                  	;mov	ax,[bp-17]
 12318 00002AD8 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 12319 00002ADB 31D2                    	XOR	DX,DX
 12320                                  	;div	word [bp-9]
 12321 00002ADD F776F7                  	DIV	RecSize
 12322                                  	;mov	[bp-19],ax
 12323 00002AE0 8946ED                  	MOV	cRecRes,AX
 12324                                  	;add	[bp-7],ax
 12325 00002AE3 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 12326                                  	;adc	word [bp-5],0
 12327 00002AE6 8356FB00                	ADC	RecPosH,0
 12328                                  ;
 12329                                  ; If we have not gotten the expected number of records, we signal an EOF
 12330                                  ; condition.  On input, this is EOF.  On output this is usually disk full.
 12331                                  ; BUT...  Under 2.0 and before, all device output IGNORED this condition.  So
 12332                                  ; do we.
 12333                                  ;
 12334                                  	;cmp	ax,[bp-3]
 12335 00002AEA 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 12336 00002AED 7412                    	JZ	short TryBlank
 12337                                  	;test	byte [bp-20],4
 12338 00002AEF F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 12339 00002AF3 7508                    	JNZ	short SetEOF
 12340                                  	;test	word [es:di+5],80h
 12341 00002AF5 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12342 00002AFB 7504                    	JNZ	short TryBlank
 12343                                  SetEOF:
 12344                                  	;mov	byte [bp-1],1
 12345 00002AFD C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 12346                                  TryBlank:				;
 12347 00002B01 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 12348 00002B03 7426                    	JZ	short SetExt
 12349                                  	;add	word [bp-7],1
 12350 00002B05 8346F901                	ADD	RecPosL,1		;	RecPos++;
 12351                                  	;adc	word [bp-5],0
 12352 00002B09 8356FB00                	ADC	RecPosH,0
 12353                                  	;test	byte [bp-20],4
 12354 00002B0D F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 12355 00002B11 7418                    	JZ	short SetExt
 12356                                  	;inc	word [bp-19]
 12357 00002B13 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 12358                                  	;mov	byte [bp-1],3
 12359 00002B16 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 12360                                  	;mov	cx,[bp-9]
 12361 00002B1A 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 12362 00002B1D 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 12363 00002B1F 30C0                    	XOR	AL,AL
 12364                                  ;hkn; 	SS override
 12365 00002B21 36C43E[DA02]            	les     di,[ss:DMAADD]
 12366                                  	;add	di,[bp-17]
 12367 00002B26 037EEF                  	ADD	DI,cResult
 12368 00002B29 F3AA                    	REP	STOSB			;   }	}
 12369                                  SetExt:
 12370                                  	;mov	dx,[bp-5]
 12371 00002B2B 8B56FB                  	MOV	DX,RecPosH
 12372                                  	;mov	ax,[bp-7]
 12373 00002B2E 8B46F9                  	MOV	AX,RecPosL
 12374                                  	;test	byte [bp-20],2
 12375 00002B31 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 12376 00002B35 7406                    	JZ	short DoSetExt
 12377                                  	;test	byte [bp-20],8
 12378 00002B37 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 12379 00002B3B 7403                    	JZ	short TrySetRR
 12380                                  DoSetExt:
 12381 00002B3D E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 12382                                  TrySetRR:
 12383                                  	;test	byte [bp-20],8
 12384 00002B40 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12385 00002B44 740F                    	JZ	short TryReturn
 12386                                  	;mov	[si+21h],ax
 12387 00002B46 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 12388                                  	;mov	[si+23h],dl
 12389 00002B49 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 12390                                  	;cmp	word [si+0Eh],64
 12391 00002B4C 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 12392 00002B50 7303                    	JAE	short TryReturn
 12393                                  	;mov	[si+24h],dh
 12394 00002B52 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 12395                                  TryReturn: 
 12396                                  	;test	byte [bp-20],4
 12397 00002B55 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 12398 00002B59 750B                    	JNZ	short FCBSave
 12399 00002B5B 1E                      	push	ds			;	FCB->FDate = date;
 12400 00002B5C E857ED                  	call	DATE16			;	FCB->FTime = time;
 12401 00002B5F 1F                      	pop	ds
 12402                                  	;mov	[si+14h],ax
 12403 00002B60 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12404                                  	;mov	[si+16h],dx
 12405 00002B63 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 12406                                  FCBSave: 
 12407                                  	;test	byte [bp-20],8
 12408 00002B66 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12409 00002B6A 7409                    	jz	short DoReturn
 12410                                  	;mov	cx,[bp-19]
 12411 00002B6C 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 12412 00002B6F E899EA                  	call    Get_User_Stack
 12413                                  	;mov	[si+4],cx
 12414 00002B72 894C04                  	MOV	[SI+user_env.user_CX],CX
 12415                                  DoReturn:
 12416                                  	;mov	al,[bp-1]
 12417 00002B75 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 12418                                  	;Leave	
 12419 00002B78 89EC                    	mov     sp,bp
 12420 00002B7A 5D                      	pop     bp
 12421 00002B7B C3                      	retn
 12422                                  
 12423                                  ; 22/07/2018 - Retro DOS v3.0
 12424                                  
 12425                                  ;Break <$FCB_Open - open an old-style FCB>
 12426                                  ;---------------------------------------------------------------------------
 12427                                  ;
 12428                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 12429                                  ;	for us and asked to have the rest filled in.
 12430                                  ;
 12431                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12432                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12433                                  ;		FCB has the following fields filled in:
 12434                                  ;		    Time/Date Extent/NR Size
 12435                                  ;---------------------------------------------------------------------------
 12436                                  
 12437                                  _$FCB_OPEN:			; System call 15
 12438                                  
 12439 00002B7C B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 12440                                  
 12441                                  ;hkn; DOS_Open is in DOSCODE
 12442 00002B7F B9[7837]                	MOV	CX,DOS_OPEN
 12443                                  ;
 12444                                  ; The following is common code for Creation and openning of FCBs.  AX is
 12445                                  ; either attributes (for create) or open mode (for open)...  DS:DX points to
 12446                                  ; the FCB
 12447                                  ;
 12448                                  DoAccess:
 12449 00002B82 3E                      	pushj	ds
 12450 00002B83 52                      	push	dx
 12451 00002B84 51                      	push	cx
 12452 00002B85 50                      	push	ax			; save FCB pointer away
 12453                                  
 12454                                  ;hkn; 	OpenBuf is in DOSDATA
 12455 00002B86 BF[6003]                	MOV	DI,OPENBUF
 12456 00002B89 E85D3E                  	call	TransFCB		; crunch the fcb
 12457 00002B8C 58                      	pop	ax
 12458 00002B8D 59                      	pop	cx
 12459 00002B8E 5A                      	pop	dx
 12460 00002B8F 1F                      	pop	ds			; get fcb
 12461 00002B90 7303                    	JNC	short FindFCB		; everything seems ok
 12462                                  FCBOpenErr:
 12463                                  ;
 12464                                  ; AL has error code
 12465                                  ;
 12466 00002B92 E987EB                  	jmp	FCB_RET_ERR
 12467                                  FindFCB:
 12468 00002B95 E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 12469                                  
 12470                                  	; MSDOS 6.0
 12471                                  	;push	ax
 12472                                  	;mov	al,1			;indicate Open/Create operation
 12473                                  	;call	LRUFCB			; get a sft entry (no error)
 12474                                  	;pop	ax
 12475                                  	;jc	short HardMessage
 12476                                  	
 12477                                  	; MSDOS 3.3
 12478 00002B98 E80CFB                  	call	LRUFCB
 12479 00002B9B 722A                    	JC	short HardMessage
 12480                                  
 12481                                  	;mov	word [es:di+2],8000h
 12482 00002B9D 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 12483 00002BA3 1E                      	push	ds
 12484 00002BA4 56                      	push	si
 12485 00002BA5 53                      	push	bx			; save fcb pointer
 12486 00002BA6 89CE                    	MOV	SI,CX
 12487                                  
 12488                                  ;hkn; SS is DOSDATA
 12489 00002BA8 16                      	push	ss
 12490 00002BA9 1F                      	pop	ds			; let DOS_Open see variables
 12491 00002BAA FFD6                    	CALL	SI			; go open the file
 12492 00002BAC 5B                      	pop	bx
 12493 00002BAD 5E                      	pop	si
 12494 00002BAE 1F                      	pop	ds			; get fcb
 12495                                  
 12496                                  ;hkn; SS override
 12497 00002BAF 36C43E[3605]            	LES	DI,[SS:THISSFT]		; get sf pointer
 12498 00002BB4 7319                    	JNC	short FCBOK		; operation succeeded
 12499                                  failopen:
 12500 00002BB6 50                      	PUSH	AX
 12501 00002BB7 B052                    	MOV	AL,"R"                  ; clear out field (free sft)
 12502 00002BB9 E8A0FC                  	call	BlastSFT
 12503 00002BBC 58                      	POP	AX
 12504                                  	;cmp	ax,4
 12505 00002BBD 83F804                  	CMP	AX,error_too_many_open_files
 12506 00002BC0 7405                    	JZ	short HardMessage
 12507                                  	;cmp	ax,24h
 12508 00002BC2 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 12509 00002BC5 7505                    	jnz	short DeadFCB
 12510                                  HardMessage:
 12511 00002BC7 50                      	PUSH	AX
 12512 00002BC8 E8A0FD                  	call	FCBHardErr
 12513 00002BCB 58                      	POP	AX
 12514                                  DeadFCB:
 12515 00002BCC E94DEB                  	jmp	FCB_RET_ERR
 12516                                  FCBOK:
 12517                                  	; MSDOS 6.0
 12518                                  	;call	IsSFTNet		       ;AN007;F.C. >32mb  Non Fat file?
 12519                                  	;JNZ	short FCBOK2		       ;AN007;F.C. >32mb  yes
 12520                                  	;call	CheckShare		       ;AN000;F.C. >32mb  share around?
 12521                                  	;JNZ	short FCBOK2		       ;AN000;F.C. >32mb  yes
 12522                                  ;SR;
 12523                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 12524                                  ; LocalSFT variable to reflect this.
 12525                                  ;
 12526                                  	;mov	[cs:LocalSFT],di	;
 12527                                  	;mov	[cs:LocalSFT+2],es; Store the SFT address
 12528                                  ;;SR;
 12529                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 12530                                  ;;
 12531                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 12532                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 12533                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 12534                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 12535                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 12536                                  
 12537                                  FCBOK2:
 12538                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12539 00002BCF 26FF05                  	inc	word [es:di]
 12540                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 12541 00002BD2 E8F5F9                  	call	SaveFCBInfo
 12542                                  	; MSDOS 3.3
 12543 00002BD5 E8B9FA                  	call	SetOpenAge
 12544                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12545                                  	;test	word [es:di+5],80h
 12546 00002BD8 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12547 00002BDE 7509                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 12548 00002BE0 8A04                    	MOV	AL,[SI]			; get drive byte
 12549 00002BE2 E88D3D                  	call	GETTHISDRV		; convert
 12550 00002BE5 FEC0                    	INC	AL
 12551 00002BE7 8804                    	MOV	[SI],AL			; stash in good drive letter
 12552                                  FCBNoDrive:
 12553                                  	;mov	word [si+0Eh],128
 12554 00002BE9 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 12555                                  
 12556                                  	;mov	ax,[es:di+0Dh]
 12557 00002BEE 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 12558                                  	;mov	[si+16h],ax
 12559 00002BF2 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 12560                                  	;mov	ax,[es:di+0Fh]
 12561 00002BF5 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 12562                                  	;mov	[si+14h],ax
 12563 00002BF9 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12564                                  	;mov	ax,[es:di+11h]
 12565 00002BFC 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 12566                                  	;mov	[si+10h],ax
 12567 00002C00 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12568                                  	;mov	ax,[es:di+13h]
 12569 00002C03 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12570                                  	;mov	[si+12h],ax
 12571 00002C07 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12572 00002C0A 31C0                    	XOR	AX,AX			; convenient zero
 12573                                  	;mov	[si+0Ch],ax
 12574 00002C0C 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 12575                                  ;
 12576                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 12577                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 12578                                  ;
 12579                                  
 12580                                  ;hkn; 	SS override
 12581 00002C0F 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 12582                                  	;mov	ah,[es:di+4]
 12583 00002C14 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 12584                                  OpenScan:
 12585                                  	;cmp	al,[si+18h]
 12586 00002C18 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 12587 00002C1B 7407                    	JZ	short SkipCheck
 12588 00002C1D 50                      	push	ax			; preserve count
 12589 00002C1E E851FC                  	call	CheckFCB		; do they match
 12590 00002C21 58                      	pop	ax			; get count back
 12591 00002C22 7309                    	JNC	short OpenFound		; found a match!
 12592                                  SkipCheck:
 12593 00002C24 FEC0                    	INC	AL			; advance to next FCB
 12594 00002C26 38E0                    	CMP	AL,AH			; table full?
 12595 00002C28 75EE                    	JNZ	short OpenScan		; no, go for more
 12596                                  OpenDone:
 12597 00002C2A 30C0                    	xor	al,al			; return success
 12598 00002C2C C3                      	retn
 12599                                  ;
 12600                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 12601                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 12602                                  ; Consider:
 12603                                  ;
 12604                                  ;   open (foo)	delete (foo) open (bar)
 12605                                  ;
 12606                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 12607                                  ; foo even though foo is no longer needed; this is due to the server closing
 12608                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 12609                                  ; If we were to CLOSE bar, the server would then close the only reference to
 12610                                  ; bar and subsequent I/O would be lost to the redirector.
 12611                                  ;
 12612                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 12613                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 12614                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 12615                                  ; around.  This will allow us to access the same file through multiple network
 12616                                  ; connections and NOT prematurely terminate when the ref count on one
 12617                                  ; connection goes to zero.
 12618                                  ;
 12619                                  OpenFound:
 12620                                  	;mov	[si+18h],al
 12621 00002C2D 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 12622 00002C30 26FF05                  	inc	word [es:di]
 12623                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] 
 12624                                  					; remember this new invocation
 12625 00002C33 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 12626                                  	;mov	[es:di+15h],ax
 12627 00002C37 26894515                	MOV	[ES:DI+sf_LRU],AX
 12628                                  ;
 12629                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 12630                                  ; blast it to prevent other reuse.
 12631                                  ;
 12632 00002C3B 16                      	push	ss
 12633 00002C3C 1F                      	pop	ds
 12634 00002C3D C43E[3605]              	LES	DI,[THISSFT]
 12635 00002C41 26FF0D                  	dec	word [es:di]
 12636                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12637                                  					; free the newly allocated SFT
 12638 00002C44 E80A47                  	call	ShareEnd
 12639 00002C47 B043                    	MOV	AL,'C'
 12640 00002C49 E810FC                  	call	BlastSFT
 12641 00002C4C EBDC                    	JMP	short OpenDone
 12642                                  
 12643                                  ;BREAK	<$FCB_Create - create a new directory entry>
 12644                                  ;----------------------------------------------------------------------------
 12645                                  ;
 12646                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 12647                                  ;	FCB for us and asked to have the rest filled in.
 12648                                  ;
 12649                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12650                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12651                                  ;		FCB has the following fields filled in:
 12652                                  ;		    Time/Date Extent/NR Size
 12653                                  ;----------------------------------------------------------------------------
 12654                                  
 12655                                  _$FCB_CREATE:		; System call 22
 12656                                  
 12657                                  ;hkn; DOS_Create is in DOSCODE
 12658 00002C4E B9[E236]                	MOV	CX,DOS_CREATE		; routine to call
 12659 00002C51 31C0                    	XOR	AX,AX			; attributes to create
 12660 00002C53 E86CFD                  	call	GetExtended		; get extended FCB
 12661 00002C56 7403                    	JZ	short DoAccessJ		; not an extended FCB
 12662 00002C58 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 12663                                  DoAccessJ:
 12664 00002C5B E924FF                  	JMP	DoAccess		; do dirty work
 12665                                  
 12666                                  ; 22/07/2018 - Retro DOS v3.0
 12667                                  
 12668                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 12669                                  ;----------------------------------------------------------------------------
 12670                                  ;
 12671                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 12672                                  ;	and write a number of blocks from it.
 12673                                  ;
 12674                                  ;   Inputs:	DS:DX point to an FCB
 12675                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 12676                                  ;		AL <> 0 Not enough room on disk for the output
 12677                                  ;
 12678                                  ;----------------------------------------------------------------------------
 12679                                  
 12680                                  _$FCB_RANDOM_WRITE_BLOCK:
 12681                                  	;mov	AL,0Ah	
 12682 00002C5E B00A                    	MOV	AL,RANDOM+BLOCK
 12683 00002C60 E979FD                  	JMP	FCBIO
 12684                                  
 12685                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 12686                                  ;----------------------------------------------------------------------------
 12687                                  ;
 12688                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 12689                                  ;	and read a number of blocks from it.
 12690                                  ;
 12691                                  ;   Inputs:	DS:DX point to an FCB
 12692                                  ;   Outputs:	AL = error codes defined above
 12693                                  ;
 12694                                  ;----------------------------------------------------------------------------
 12695                                  
 12696                                  _$FCB_RANDOM_READ_BLOCK:
 12697                                  	;mov	AL,0Eh	
 12698 00002C63 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 12699 00002C65 E974FD                  	JMP	FCBIO
 12700                                  
 12701                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 12702                                  ;----------------------------------------------------------------------------
 12703                                  ;
 12704                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 12705                                  ;	memory
 12706                                  ;
 12707                                  ;   Inputs:	DS:DX point to an FCB
 12708                                  ;   Outputs:	AL = error codes defined above
 12709                                  ;
 12710                                  ;----------------------------------------------------------------------------
 12711                                  
 12712                                  _$FCB_SEQ_READ:
 12713                                  	;mov	AL,4	
 12714 00002C68 B004                    	MOV	AL,FCBREAD
 12715 00002C6A E96FFD                  	JMP	FCBIO
 12716                                  
 12717                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 12718                                  ;----------------------------------------------------------------------------
 12719                                  ;
 12720                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 12721                                  ;	file
 12722                                  ;
 12723                                  ;   Inputs:	DS:DX point to an FCB
 12724                                  ;   Outputs:	AL = error codes defined above
 12725                                  ;
 12726                                  ;----------------------------------------------------------------------------
 12727                                  
 12728                                  _$FCB_SEQ_WRITE:
 12729 00002C6D B000                    	MOV	AL,0
 12730 00002C6F E96AFD                  	jmp	FCBIO
 12731                                  
 12732                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 12733                                  ;----------------------------------------------------------------------------
 12734                                  ;
 12735                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 12736                                  ;	record from it.
 12737                                  ;
 12738                                  ;   Inputs:	DS:DX point to an FCB
 12739                                  ;   Outputs:	AL = error codes defined above
 12740                                  ;
 12741                                  ;----------------------------------------------------------------------------
 12742                                  
 12743                                  _$FCB_RANDOM_READ:
 12744                                  	;mov	AL,6	
 12745 00002C72 B006                    	MOV	AL,RANDOM+FCBREAD
 12746 00002C74 E965FD                  	jmp	FCBIO			; single block
 12747                                  
 12748                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 12749                                  ;----------------------------------------------------------------------------
 12750                                  ;
 12751                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 12752                                  ;	a record to it.
 12753                                  ;
 12754                                  ;   Inputs:	DS:DX point to an FCB
 12755                                  ;   Outputs:	AL = error codes defined above
 12756                                  ;
 12757                                  ;----------------------------------------------------------------------------
 12758                                  
 12759                                  _$FCB_RANDOM_WRITE:
 12760                                  	;mov	AL,2	
 12761 00002C77 B002                    	MOV	AL,RANDOM
 12762 00002C79 E960FD                  	jmp	FCBIO
 12763                                  
 12764                                  ;============================================================================
 12765                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 12766                                  ;============================================================================
 12767                                  ; 22/07/2018 - Retro DOS v3.0
 12768                                  
 12769                                  ;**	Search.asm
 12770                                  ;
 12771                                  ;	Directory search system calls.
 12772                                  ;	These will be passed direct text of the pathname from the user. 
 12773                                  ;	They will need to be passed through the macro expander prior to
 12774                                  ;	being sent through the low-level stuff. 
 12775                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 12776                                  ;
 12777                                  ;	$Dir_Search_First	  written
 12778                                  ;	$Dir_Search_Next	  written
 12779                                  ;	$Find_First	  written
 12780                                  ;	$Find_Next		  written
 12781                                  ;	PackName		  written
 12782                                  ;
 12783                                  ;	Modification history:
 12784                                  ;
 12785                                  ;	  Created: ARR 4 April 1983
 12786                                  
 12787                                  ;----------------------------------------------------------------------------
 12788                                  ; Procedure Name : $DIR_SEARCH_FIRST
 12789                                  ;
 12790                                  ; Inputs:
 12791                                  ;	DS:DX Points to unopenned FCB
 12792                                  ; Function:
 12793                                  ;	Directory is searched for first matching entry and the directory
 12794                                  ;	entry is loaded at the disk transfer address
 12795                                  ; Returns:
 12796                                  ;	AL = -1 if no entries matched, otherwise 0
 12797                                  ;----------------------------------------------------------------------------
 12798                                  
 12799                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 12800                                  
 12801                                  _$DIR_SEARCH_FIRST:
 12802 00002C7C 368916[3E05]            	MOV	[SS:THISFCB],DX
 12803 00002C81 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12804 00002C86 89D6                    	MOV	SI,DX
 12805 00002C88 803CFF                  	CMP	BYTE [SI],0FFH
 12806 00002C8B 7503                    	JNZ	short NORMFCB4
 12807 00002C8D 83C607                  	ADD	SI,7			; Point to drive select byte
 12808                                  NORMFCB4:
 12809 00002C90 FF34                    	push	word [SI]		; Save original drive byte for later
 12810                                  
 12811 00002C92 16                      	push	ss
 12812 00002C93 07                      	pop	es			; get es to address DOSGroup
 12813                                  
 12814 00002C94 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12815 00002C97 E84F3D                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 12816 00002C9A 7304                    	JNC	short SearchIt		; no error, go and look
 12817 00002C9C 5B                      	pop	bx			; Clean stack
 12818                                  ;
 12819                                  ; Error code is in AX
 12820                                  ;
 12821 00002C9D E97CEA                  	jmp	FCB_RET_ERR		; error
 12822                                  
 12823                                  SearchIt:
 12824 00002CA0 16                      	push	ss
 12825 00002CA1 1F                      	pop	ds			; get ready for search
 12826 00002CA2 FF36[DA02]              	push	word [DMAADD]
 12827 00002CA6 FF36[DC02]              	push	word [DMAADD+2]
 12828 00002CAA C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12829 00002CB0 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12830                                  	; MSDOS 6.0
 12831                                  	;call	GET_FAST_SEARCH 	; search
 12832                                  	; MSDOS 3.3
 12833 00002CB4 E8570C                  	call	DOS_SEARCH_FIRST
 12834 00002CB7 8F06[DC02]              	pop	word [DMAADD+2]
 12835 00002CBB 8F06[DA02]              	pop	word [DMAADD]
 12836 00002CBF 7304                    	JNC	short SearchSet		; no error, transfer info
 12837 00002CC1 5B                      	pop	bx			; Clean stack
 12838                                  ;
 12839                                  ; Error code is in AX
 12840                                  ;
 12841 00002CC2 E957EA                  	jmp	FCB_RET_ERR
 12842                                  
 12843                                  ;
 12844                                  ; The search was successful (or the search-next).  We store the information
 12845                                  ; into the user's FCB for continuation.
 12846                                  ;
 12847                                  SearchSet:
 12848 00002CC5 BE[6004]                	MOV	SI,SEARCHBUF
 12849 00002CC8 C43E[3E05]              	LES	DI,[THISFCB]		; point to the FCB
 12850 00002CCC F606[0705]FF            	TEST	byte [EXTFCB],0FFh		;
 12851 00002CD1 7403                    	JZ	short NORMFCB1
 12852 00002CD3 83C707                  	ADD	DI,7			; Point past the extension
 12853                                  NORMFCB1:
 12854 00002CD6 5B                      	pop	bx			; Get original drive byte
 12855 00002CD7 08DB                    	OR	BL,BL
 12856 00002CD9 7506                    	JNZ	short SearchDrv
 12857 00002CDB 8A1E[E402]              	MOV	BL,[CURDRV]
 12858 00002CDF FEC3                    	INC	BL
 12859                                  SearchDrv:
 12860 00002CE1 AC                      	LODSB				; Get correct search contin drive byte
 12861 00002CE2 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 12862 00002CE4 47                      	INC	DI
 12863                                  	;STOSB				; Store the correct "user" drive byte
 12864                                  					;  at the start of the search info
 12865 00002CE5 B90A00                  	MOV	CX,20/2
 12866 00002CE8 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 12867 00002CEA 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 12868                                  					;   byte to AL
 12869 00002CEC AA                      	STOSB				; Search contin drive byte at end of
 12870                                  					;   contin info
 12871 00002CED C43E[DA02]              	LES	DI,[DMAADD]
 12872 00002CF1 F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12873 00002CF6 740E                    	JZ	short NORMFCB2
 12874 00002CF8 B0FF                    	MOV	AL,0FFh
 12875 00002CFA AA                      	STOSB
 12876 00002CFB FEC0                    	INC	AL
 12877 00002CFD B90500                  	MOV	CX,5
 12878 00002D00 F3AA                    	REP	STOSB
 12879 00002D02 A0[0805]                	MOV	AL,[SATTRIB]
 12880 00002D05 AA                      	STOSB
 12881                                  NORMFCB2:
 12882 00002D06 88D8                    	MOV	AL,BL			; User Drive byte
 12883 00002D08 AA                      	STOSB
 12884 00002D09 B91000                  	MOV	CX,16			; 32 / 2 words of dir entry
 12885 00002D0C F3A5                    	REP	MOVSW
 12886 00002D0E E908EA                  	jmp	FCB_RET_OK
 12887                                  
 12888                                  ;----------------------------------------------------------------------------
 12889                                  ;
 12890                                  ; Procedure Name : $DIR_SEARCH_NEXT
 12891                                  ;
 12892                                  ; Inputs:
 12893                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 12894                                  ; Function:
 12895                                  ;	Directory is searched for the next matching entry and the directory
 12896                                  ;	entry is loaded at the disk transfer address
 12897                                  ; Returns:
 12898                                  ;	AL = -1 if no entries matched, otherwise 0
 12899                                  ;----------------------------------------------------------------------------
 12900                                  
 12901                                  _$DIR_SEARCH_NEXT:
 12902 00002D11 368916[3E05]            	MOV	[SS:THISFCB],DX
 12903 00002D16 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12904 00002D1B 36C606[0805]00          	MOV	byte [SS:SATTRIB],0
 12905 00002D21 36C606[0705]00          	MOV	byte [SS:EXTFCB],0
 12906                                  
 12907 00002D27 16                      	push	ss
 12908 00002D28 07                      	pop	es
 12909                                  
 12910 00002D29 BF[6004]                	MOV	DI,SEARCHBUF
 12911                                  
 12912 00002D2C 89D6                    	MOV	SI,DX
 12913 00002D2E 803CFF                  	CMP	BYTE [SI],0FFh
 12914 00002D31 750D                    	JNZ	short NORMFCB6
 12915 00002D33 83C606                  	ADD	SI,6
 12916 00002D36 AC                      	LODSB
 12917                                  
 12918 00002D37 36A2[0805]              	MOV	[SS:SATTRIB],AL
 12919 00002D3B 36FE0E[0705]            	DEC	byte [SS:EXTFCB]
 12920                                  NORMFCB6:
 12921 00002D40 AC                      	LODSB				; Get original user drive byte
 12922 00002D41 50                      	push	ax			; Put it on stack
 12923 00002D42 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 12924 00002D45 AA                      	STOSB				; Put in correct place
 12925 00002D46 B90A00                  	MOV	CX,20/2
 12926 00002D49 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 12927                                  
 12928 00002D4B 16                      	push	ss
 12929 00002D4C 1F                      	pop	ds
 12930                                  
 12931 00002D4D FF36[DA02]              	push	word [DMAADD]
 12932 00002D51 FF36[DC02]              	push	word [DMAADD+2]
 12933 00002D55 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12934 00002D5B 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12935 00002D5F E8610C                  	call	DOS_SEARCH_NEXT 	; Find it
 12936 00002D62 8F06[DC02]              	pop	word [DMAADD+2]
 12937 00002D66 8F06[DA02]              	pop	word [DMAADD]
 12938 00002D6A 7203                    	JC	short SearchNoMore
 12939 00002D6C E956FF                  	JMP	SearchSet		; Ok set return
 12940                                  
 12941                                  SearchNoMore:
 12942 00002D6F C43E[3E05]              	LES	DI,[THISFCB]
 12943 00002D73 F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12944 00002D78 7403                    	JZ	short NORMFCB8
 12945 00002D7A 83C707                  	ADD	DI,7			; Point past the extension
 12946                                  NORMFCB8:
 12947 00002D7D 5B                      	pop	bx			; Get original drive byte
 12948 00002D7E 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 12949                                  					;  at the right spot
 12950                                  ;
 12951                                  ; error code is in AX
 12952                                  ;
 12953 00002D81 E998E9                  	jmp	FCB_RET_ERR
 12954                                  
 12955                                  ;---------------------------------------------------------------------------
 12956                                  ;
 12957                                  ;   Procedure Name : $FIND_FIRST
 12958                                  ; 
 12959                                  ;   Assembler usage:
 12960                                  ;	    MOV AH, FindFirst
 12961                                  ;	    LDS DX, name
 12962                                  ;	    MOV CX, attr
 12963                                  ;	    INT 21h
 12964                                  ;	; DMA address has datablock
 12965                                  ;
 12966                                  ;   Error Returns:
 12967                                  ;	    AX = error_path_not_found
 12968                                  ;	       = error_no_more_files
 12969                                  ;---------------------------------------------------------------------------
 12970                                  
 12971                                  _$FIND_FIRST:
 12972 00002D84 89D6                    	MOV	SI,DX			; get name in appropriate place
 12973 00002D86 36880E[0805]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 12974                                  
 12975 00002D8B BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12976                                  
 12977 00002D8E E8C03C                  	call	TransPathSet		; convert the path
 12978 00002D91 7305                    	JNC	short Find_it 		; no error, go and look
 12979                                  FindError:
 12980                                  	;mov	al,3
 12981 00002D93 B003                    	mov	al, error_path_not_found ; error and map into one.
 12982 00002D95 E96EE9                  	jmp	SYS_RET_ERR
 12983                                  Find_it:
 12984 00002D98 16                      	push	ss
 12985 00002D99 1F                      	pop	ds
 12986                                  
 12987 00002D9A FF36[DA02]              	push	word [DMAADD]
 12988 00002D9E FF36[DC02]              	push	word [DMAADD+2]
 12989 00002DA2 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12990 00002DA8 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12991                                  	; MSDOS 6.0
 12992                                  	;call	GET_FAST_SEARCH 	; search
 12993                                  	; MSDOS 3.3
 12994 00002DAC E85F0B                  	call	DOS_SEARCH_FIRST
 12995 00002DAF 8F06[DC02]              	pop	word [DMAADD+2]
 12996 00002DB3 8F06[DA02]              	pop	word [DMAADD]
 12997 00002DB7 7303                    	JNC	short FindSet 		; no error, transfer info
 12998 00002DB9 E94AE9                  	jmp	SYS_RET_ERR
 12999                                  
 13000                                  FindSet:
 13001 00002DBC BE[6004]                	MOV	SI,SEARCHBUF
 13002 00002DBF C43E[DA02]              	LES	DI,[DMAADD]
 13003 00002DC3 B91500                  	MOV	CX,21
 13004 00002DC6 F3A4                    	REP	MOVSB
 13005 00002DC8 56                      	PUSH	SI			; Save pointer to start of entry
 13006                                  	;mov	al,[si+0Bh]
 13007 00002DC9 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 13008 00002DCC AA                      	STOSB
 13009                                  	;add	si,16h
 13010 00002DCD 83C616                  	ADD	SI,dir_entry.dir_time
 13011 00002DD0 A5                      	MOVSW				; dir_time
 13012 00002DD1 A5                      	MOVSW				; dir_date
 13013 00002DD2 46                      	INC	SI
 13014 00002DD3 46                      	INC	SI			; Skip dir_first
 13015 00002DD4 A5                      	MOVSW				; dir_size (2 words)
 13016 00002DD5 A5                      	MOVSW
 13017 00002DD6 5E                      	POP	SI			; Point back to dir_name
 13018 00002DD7 E83600                   	CALL	PackName
 13019 00002DDA E920E9                  	jmp	SYS_RET_OK		; bye with no errors
 13020                                  
 13021                                  ;---------------------------------------------------------------------------
 13022                                  ;
 13023                                  ;   Procedure Name : $FIND_NEXT
 13024                                  ;
 13025                                  ;   Assembler usage:
 13026                                  ;	; dma points at area returned by find_first
 13027                                  ;	    MOV AH, findnext
 13028                                  ;	    INT 21h
 13029                                  ;	; next entry is at dma
 13030                                  ;
 13031                                  ;   Error Returns:
 13032                                  ;	    AX = error_no_more_files
 13033                                  ;---------------------------------------------------------------------------
 13034                                  
 13035                                  _$FIND_NEXT:
 13036 00002DDD 16                      	push	ss
 13037 00002DDE 07                      	pop	es
 13038                                  
 13039 00002DDF BF[6004]                	MOV	DI,SEARCHBUF
 13040                                  
 13041 00002DE2 36C536[DA02]            	LDS	SI,[SS:DMAADD]
 13042                                  
 13043 00002DE7 B91500                  	MOV	CX,21
 13044 00002DEA F3A4                    	REP	MOVSB			; Put the search continuation info
 13045                                  					;  in the right place
 13046 00002DEC 16                      	push	ss
 13047 00002DED 1F                      	pop	ds			; get ready for search
 13048                                  	
 13049 00002DEE FF36[DA02]              	push	word [DMAADD]
 13050 00002DF2 FF36[DC02]              	push	word [DMAADD+2]
 13051 00002DF6 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 13052 00002DFC 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 13053 00002E00 E8C00B                  	call	DOS_SEARCH_NEXT 	; Find it
 13054 00002E03 8F06[DC02]              	pop	word [DMAADD+2]
 13055 00002E07 8F06[DA02]              	pop	word [DMAADD]
 13056 00002E0B 73AF                    	JNC	short FindSet 		; No error, set info
 13057 00002E0D E9F6E8                  	jmp	SYS_RET_ERR
 13058                                  
 13059                                  ;---------------------------------------------------------------------------
 13060                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 13061                                  ;
 13062                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 13063                                  ;	the ASCIZ format.
 13064                                  ;
 13065                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 13066                                  ;		(ES:DI) = destination area (13 bytes)
 13067                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 13068                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 13069                                  ;---------------------------------------------------------------------------
 13070                                  
 13071                                  PackName:
 13072                                  ;	Move over 8 characters to cover the name component, then trim it's
 13073                                  ;	trailing blanks.
 13074                                  
 13075 00002E10 B90800                  	MOV	CX,8			; Pack the name
 13076 00002E13 F3A4                    	REP	MOVSB			; Move all of it
 13077                                  main_kill_tail:
 13078 00002E15 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13079 00002E1A 7507                    	JNZ	short find_check_dot
 13080 00002E1C 4F                      	DEC	DI			; Back up over trailing space
 13081 00002E1D 41                      	INC	CX
 13082 00002E1E 83F908                  	CMP	CX,8
 13083 00002E21 72F2                    	JB	short main_kill_tail
 13084                                  find_check_dot:
 13085                                  	;CMP	WORD [SI],(" " << 8) | " "
 13086 00002E23 813C2020                	cmp     word [si],2020h 
 13087 00002E27 7506                    	JNZ	short got_ext 		; Some chars in extension
 13088 00002E29 807C0220                	CMP	BYTE [SI+2]," "
 13089 00002E2D 7412                    	JZ	short find_done		; No extension
 13090                                  got_ext:
 13091 00002E2F B02E                    	MOV	AL,"."
 13092 00002E31 AA                      	STOSB
 13093 00002E32 B90300                  	MOV	CX,3
 13094 00002E35 F3A4                    	REP	MOVSB
 13095                                  ext_kill_tail:
 13096 00002E37 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13097 00002E3C 7503                    	JNZ	short find_done
 13098 00002E3E 4F                      	DEC	DI			; Back up over trailing space
 13099 00002E3F EBF6                    	JMP	short ext_kill_tail
 13100                                  find_done:
 13101 00002E41 31C0                    	XOR	AX,AX
 13102 00002E43 AA                      	STOSB				; NUL terminate
 13103 00002E44 C3                      	retn
 13104                                  
 13105                                  ;GET_FAST_SEARCH:
 13106                                  ;	; 22/07/2018
 13107                                  ;	; MSDOS 6.0
 13108                                  ;	OR	word [DOS34_FLAG],SEARCH_FASTOPEN 
 13109                                  ;					;FO.trigger fastopen ;AN000;
 13110                                  ;	call	DOS_SEARCH_FIRST
 13111                                  ;	retn
 13112                                  
 13113                                  
 13114                                  ;============================================================================
 13115                                  ; PATH.ASM, MSDOS 6.0, 1991
 13116                                  ;============================================================================
 13117                                  ; 06/08/2018 - Retro DOS v3.0
 13118                                  
 13119                                  ;**	Directory related system calls. These will be passed direct text of the
 13120                                  ;	pathname from the user. They will need to be passed through the macro
 13121                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 13122                                  ;	defined in DISPATCH. The system calls are:
 13123                                  ;
 13124                                  ;	$CURRENT_DIR  Written
 13125                                  ;	$RMDIR	  Written
 13126                                  ;	$CHDIR	  Written
 13127                                  ;	$MKDIR	  Written
 13128                                  ;
 13129                                  ;
 13130                                  ;	Modification history:
 13131                                  ;
 13132                                  ;	    Created: ARR 4 April 1983
 13133                                  ;		 MZ 10 May 1983     CurrentDir implemented
 13134                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 13135                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 13136                                  ;				    current directory.
 13137                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 13138                                  
 13139                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 13140                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 13141                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 13142                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 13143                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 13144                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 13145                                  ;	I_Need	cMeta,BYTE
 13146                                  ;	I_Need	DrvErr,BYTE					;AN000;
 13147                                  
 13148                                  
 13149                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 13150                                  ;---------------------------------------------------------------------------
 13151                                  ;
 13152                                  ;   Procedure Name : $CURRENT_DIR
 13153                                  ;
 13154                                  ;   Assembler usage:
 13155                                  ;		LDS	SI,area
 13156                                  ;		MOV	DL,drive
 13157                                  ;		INT	21h
 13158                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 13159                                  ;	    ; current directory.
 13160                                  ;   Error returns:
 13161                                  ;	    AX = error_invalid_drive
 13162                                  ;
 13163                                  ;---------------------------------------------------------------------------
 13164                                  
 13165                                  _$CURRENT_DIR:
 13166                                  	;06/08/2018 - Retro DOS v3.0
 13167                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 13168 00002E45 E81DF2                  	call	EcritDisk
 13169 00002E48 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 13170 00002E4A E80E3B                  	call	GetVisDrv		; grab it
 13171 00002E4D 7308                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 13172                                  CurdirErr:
 13173 00002E4F E81BF2                  	call	LcritDisk
 13174                                  	
 13175                                  	; MSDOS 6.0
 13176                                  	;MOV	AL,[CS:DrvErr]		;IFS.			;AN000;
 13177                                  
 13178                                  	; MSDOS 3.3
 13179 00002E52 B00F                    	mov	al,0Fh
 13180                                  
 13181                                  curdir_errj:
 13182 00002E54 E9AFE8                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 13183                                  
 13184                                  CurrentValidate:
 13185 00002E57 1E                      	push	ds		; save destination
 13186 00002E58 56                      	push	si
 13187 00002E59 2EC536[3A05]            	LDS	SI,[CS:THISCDS]
 13188                                  	;TEST	word [SI+curdir.flags],curdir_isnet
 13189                                  	;JNZ	short DoCheck
 13190                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 13191                                  ; media check.
 13192                                  ;	CMP	word [SI+curdir.ID],0
 13193                                  ;	JZ	short GetDst
 13194                                  DoCheck:
 13195 00002E5E 2EC606[F802]00          	MOV	byte [cs:NoSetDir],0	; interested only in contents
 13196                                  
 13197 00002E64 BF[6003]                	MOV	DI,OPENBUF
 13198                                  
 13199 00002E67 E8011D                  	call	ValidateCDS		; output is ES:DI -> CDS
 13200 00002E6A 06                      	push	es	 		; swap source and destination
 13201 00002E6B 57                      	push	di
 13202 00002E6C 5E                      	pop	si
 13203 00002E6D 1F                      	pop	ds
 13204                                  GetDst:
 13205 00002E6E 5F                      	pop	di
 13206 00002E6F 07                      	pop	es			; get real destination
 13207 00002E70 72DD                    	JC	short CurdirErr
 13208                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 13209 00002E72 03744F                  	ADD	SI,[SI+curdir.end]
 13210 00002E75 803C5C                  	CMP	BYTE [SI],'\'		; root or subdirs present?
 13211 00002E78 7501                    	JNZ	short CurrentCopy
 13212 00002E7A 46                      	INC	SI
 13213                                  CurrentCopy:
 13214                                  ;	call	FStrCpy
 13215                                  ;; 10/29/86 E5 char
 13216 00002E7B 50                      	PUSH	AX
 13217 00002E7C AC                      	LODSB				; get char
 13218 00002E7D 08C0                    	OR	AL,AL
 13219 00002E7F 7413                    	JZ	short FOK
 13220 00002E81 3C05                    	CMP	AL,05
 13221 00002E83 740D                    	JZ	short FCHANGE
 13222 00002E85 EB01                    	JMP	short FFF
 13223                                  FCPYNEXT:
 13224 00002E87 AC                      	LODSB				; get char
 13225                                  FFF:
 13226 00002E88 3C5C                    	CMP	AL,'\'			; beginning of directory
 13227 00002E8A 7508                    	JNZ	short FOK		; no
 13228 00002E8C AA                      	STOSB				; put into user's buffer
 13229 00002E8D AC                      	LODSB				; 1st char of dir is 05?
 13230 00002E8E 3C05                    	CMP	AL,05H
 13231 00002E90 7502                    	JNZ	short FOK		; no
 13232                                  FCHANGE:
 13233 00002E92 B0E5                    	MOV	AL,0E5H			; make it E5
 13234                                  FOK:
 13235 00002E94 AA                      	STOSB				; put into user's buffer
 13236 00002E95 08C0                    	OR	AL,AL			; final char
 13237 00002E97 75EE                    	JNZ	short FCPYNEXT		; no
 13238 00002E99 58                      	POP	AX
 13239                                  
 13240                                  ;; 10/29/86 E5 char
 13241 00002E9A 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 13242 00002E9C E8CEF1                  	call	LcritDisk
 13243 00002E9F E95BE8                  	jmp	SYS_RET_OK		; no more, bye!
 13244                                  
 13245                                  
 13246                                  ;BREAK <$RmDir -- Remove a directory>
 13247                                  ;---------------------------------------------------------------------------
 13248                                  ;
 13249                                  ; Procedure Name : $RmDir
 13250                                  ;
 13251                                  ; Inputs:
 13252                                  ;	DS:DX Points to asciz name
 13253                                  ; Function:
 13254                                  ;	Delete directory if empty
 13255                                  ; Returns:
 13256                                  ;	STD XENIX Return
 13257                                  ;	AX = error_path_not_found If path bad
 13258                                  ;	AX = error_access_denied If
 13259                                  ;		Directory not empty
 13260                                  ;		Path not directory
 13261                                  ;		Root directory specified
 13262                                  ;		Directory malformed (. and .. not first two entries)
 13263                                  ;		User tries to delete a current directory
 13264                                  ;	AX = error_current_directory
 13265                                  ;
 13266                                  ;----------------------------------------------------------------------------
 13267                                  
 13268                                  _$RMDIR:
 13269 00002EA2 52                      	push	dx			; Save ptr to name
 13270 00002EA3 1E                      	push	ds
 13271 00002EA4 89D6                    	mov	si,dx			; Load ptr into si
 13272 00002EA6 BF[6003]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 13273 00002EA9 57                      	push	di
 13274 00002EAA E8AC3B                  	call	TransPathNoSet		; Translate the name
 13275 00002EAD 5F                      	pop	di			; di = ptr to buf for trans name
 13276 00002EAE 7307                    	jnc	short rmlset		; If transpath succeeded, continue
 13277 00002EB0 1F                      	pop	ds
 13278 00002EB1 5A                      	pop	dx			; Restore the	 name
 13279 00002EB2 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 13280                                  	;jmp	short curdir_errj
 13281                                  rmdir_errj: ; 10/08/2018
 13282 00002EB4 E94FE8                  	jmp	SYS_RET_ERR
 13283                                  rmlset:
 13284 00002EB7 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 13285 00002EBD 7512                    	Jnz	short rmerr		;	return (-1);
 13286 00002EBF 16                      	push	ss
 13287 00002EC0 07                      	pop	es
 13288 00002EC1 30C0                    	xor	al,al			; al = 0 , ie drive a:
 13289                                  rmloop: 
 13290 00002EC3 E8FF3A                  	call	GetCDSFromDrv		; Get curdir for drive in al
 13291 00002EC6 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 13292 00002EC8 E862F0                  	call	StrCmp			; Are the 2 paths the same?
 13293 00002ECB 7404                    	jz	short rmerr		; Yes, report error.
 13294 00002ECD FEC0                    	inc	al			; No, inc al to next drive number
 13295 00002ECF EBF2                    	jmp	short rmloop		; Go check next drive.
 13296                                  rmerr:
 13297 00002ED1 1F                      	pop	ds
 13298 00002ED2 5A                      	pop	dx			; Restore the name
 13299 00002ED3 B010                    	mov	al,error_current_directory ;  error
 13300                                  	;jmp	short curdir_errj
 13301 00002ED5 EBDD                    	jmp	short rmdir_errj
 13302                                  rmcont:
 13303 00002ED7 1F                      	pop	ds
 13304 00002ED8 5A                      	pop	dx			; Restore the name
 13305 00002ED9 BE[193D]                	MOV	SI,DOS_RMDIR
 13306 00002EDC EB75                    	JMP	short DoDirCall ; 07/09/2018
 13307                                  
 13308                                  ;BREAK <$ChDir -- Change current directory on a drive>
 13309                                  ;----------------------------------------------------------------------------
 13310                                  ;
 13311                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 13312                                  ; for setting up the CDS for the specified drive appropriately.  There are
 13313                                  ; several cases to consider:
 13314                                  ;
 13315                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 13316                                  ;	it into a WFP.	We verify the existance of this directory and then
 13317                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 13318                                  ;	directory cluster.
 13319                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 13320                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 13321                                  ;	WFP back into the CDS.
 13322                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 13323                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 13324                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 13325                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 13326                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 13327                                  ;	to process the path but to return the logical CDS and the logical
 13328                                  ;	path.  We then copy the logical path into the logical CDS.
 13329                                  ;
 13330                                  ; Inputs:
 13331                                  ;	DS:DX Points to asciz name
 13332                                  ; Returns:
 13333                                  ;	STD XENIX Return
 13334                                  ;	AX = chdir_path_not_found if error
 13335                                  ;
 13336                                  ;----------------------------------------------------------------------------
 13337                                  
 13338                                  _$CHDIR:
 13339 00002EDE BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13340 00002EE1 89D6                    	MOV	SI,DX			; get source
 13341 00002EE3 E8673B                  	call	TransPath		; go munge the path and get real CDS
 13342 00002EE6 7305                    	JNC	short ChDirCrack	; no errors, try path
 13343                                  ChDirErrP:
 13344 00002EE8 B003                    	MOV	AL,error_path_not_found
 13345                                  ChDirErr:
 13346 00002EEA E919E8                  	jmp	SYS_RET_ERR 	; oops!
 13347                                  
 13348                                  ChDirCrack:
 13349 00002EED 803E[1505]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 13350 00002EF2 75F4                    	JNZ	short ChDirErrP
 13351                                  ;
 13352                                  ; We cannot do a ChDir (yet) on a raw CDS.  This is treated as a path not
 13353                                  ; found.
 13354                                  ;
 13355 00002EF4 C43E[3A05]              	LES	DI,[THISCDS]
 13356 00002EF8 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 13357 00002EFB 74EB                    	JZ	short ChDirErrP		;	error ();
 13358                                   ;
 13359                                   ; Find out if the directory exists.
 13360                                   ;
 13361 00002EFD E8E40D                  	call	DOS_CHDIR
 13362 00002F00 72E8                    	Jc	short ChDirErr
 13363                                  ;
 13364                                  ; Get back CDS to see if a join as seen.  Set the currency pointer (only if
 13365                                  ; not network).  If one was seen, all we need to do is copy in the text
 13366                                  ;
 13367 00002F02 C43E[3A05]              	LES	DI,[THISCDS]
 13368 00002F06 26F745430020            	TEST	word [ES:DI+curdir.flags],curdir_splice
 13369 00002F0C 7425                    	JZ	short GotCDS
 13370                                  ;
 13371                                  ; The CDS was joined.  Let's go back and grab the logical CDS.
 13372                                  ;
 13373 00002F0E 06                      	push	es	
 13374 00002F0F 57                      	push	di
 13375 00002F10 51                      	push	cx			; save CDS and cluster...
 13376 00002F11 E8F7E6                  	call	Get_User_Stack		; get original text
 13377 00002F14 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 13378 00002F17 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 13379 00002F1A BE[6003]                	MOV	SI,OPENBUF		; spot for translated name
 13380 00002F1D 87F7                    	XCHG	SI,DI
 13381 00002F1F 30C0                    	XOR	AL,AL			; do no splicing
 13382 00002F21 57                      	push	di
 13383 00002F22 E8343B                  	call	TransPathNoSet		; Munge path
 13384 00002F25 5E                      	pop	si
 13385                                  ;
 13386                                  ; There should NEVER be an error here.
 13387                                  ;
 13388                                  
 13389                                  ;IF FALSE
 13390                                  ;	JNC SKipErr
 13391                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 13392                                  ;SkipErr:
 13393                                  ;ENDIF
 13394 00002F26 C43E[3A05]              	LES	DI,[THISCDS]		; get new CDS
 13395 00002F2A 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 13396                                  					; no valid cluster here...
 13397 00002F30 59                      	pop	cx
 13398 00002F31 5F                      	pop	di
 13399 00002F32 07                      	pop	es
 13400                                  ;
 13401                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 13402                                  ;
 13403                                  GotCDS:
 13404                                  ;
 13405                                  ; wfp_start points to the text. See if it is long enough
 13406                                  ;
 13407                                  	; MSDOS 3.3
 13408                                  	;push	ss
 13409                                  	;pop	ds
 13410                                  	;mov	si,[WFP_START]
 13411                                  	;push	cx
 13412                                  	;call	DStrLen
 13413                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 13414                                  	;pop	cx
 13415                                  	;ja	short ChDirErrP
 13416                                  
 13417                                  	; MSDOS 6.0
 13418 00002F33 E84800                  	CALL	Check_PathLen		;PTM.		;AN000;
 13419 00002F36 77B0                    	JA	short ChDirErrP
 13420                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13421 00002F38 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 13422 00002F3E 7508                    	JNZ	short SkipRecency
 13423                                  	; MSDOS 6.0
 13424                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 13425                                  	;				;PTM. for Join and Subst ;AN000;
 13426                                  	;JZ	short setdirclus	;PTM.		;AN000;
 13427                                  	;MOV	CX,-1			;PTM.		;AN000;
 13428                                  ;setdirclus:
 13429 00002F40 26894D49                	MOV	[ES:DI+curdir.ID],CX
 13430 00002F44 C43E[3A05]              	LES	DI,[THISCDS]		; get logical CDS
 13431                                  SkipRecency:
 13432 00002F48 E80FF0                  	call	FStrCpy
 13433 00002F4B 30C0                    	XOR	AL,AL
 13434                                  mkdir_ok:
 13435 00002F4D E9ADE7                  	jmp	SYS_RET_OK
 13436                                  
 13437                                  
 13438                                  ;BREAK <$MkDir - Make a directory entry>
 13439                                  ;---------------------------------------------------------------------------
 13440                                  ;
 13441                                  ; Procedure Name : $MkDir
 13442                                  ; Inputs:
 13443                                  ;	DS:DX Points to asciz name
 13444                                  ; Function:
 13445                                  ;	Make a new directory
 13446                                  ; Returns:
 13447                                  ;	STD XENIX Return
 13448                                  ;	AX = mkdir_path_not_found if path bad
 13449                                  ;	AX = mkdir_access_denied  If
 13450                                  ;		Directory cannot be created
 13451                                  ;		Node already exists
 13452                                  ;		Device name given
 13453                                  ;		Disk or directory(root) full
 13454                                  ;---------------------------------------------------------------------------
 13455                                  
 13456                                  _$MKDIR:
 13457 00002F50 BE[023C]                	MOV	SI,DOS_MKDIR
 13458                                  DoDirCall:
 13459 00002F53 BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13460                                  
 13461 00002F56 56                      	push	si
 13462 00002F57 89D6                    	MOV	SI,DX			; get source
 13463 00002F59 E8F13A                  	call	TransPath		; go munge the path
 13464 00002F5C 5E                      	pop	si
 13465 00002F5D 7305                    	JNC	short MkDirCrack	; no errors, try path
 13466                                  MkErrP:
 13467 00002F5F B003                    	MOV	AL,error_path_not_found	; oops!
 13468                                  MkErr:
 13469 00002F61 E9A2E7                  	jmp	SYS_RET_ERR
 13470                                  MkDirCrack:
 13471 00002F64 36803E[1505]FF          	CMP	byte [SS:CMETA],-1
 13472 00002F6A 75F3                    	JNZ	short MkErrP
 13473                                  
 13474                                  	; MSDOS 3.3
 13475                                  	;push	ss
 13476                                  	;pop	ds
 13477                                  	;call	si
 13478                                  	;jb	short MkErr
 13479                                  	;;jmp	short mkdir_ok
 13480                                  	;jmp	SYS_RET_OK
 13481                                  
 13482                                  	; MSDOS 6.0
 13483 00002F6C 56                      	PUSH	SI			;PTM.			;AN000;
 13484 00002F6D E80E00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 13485 00002F70 5E                      	POP	SI			;PTM.			;AN000;
 13486 00002F71 7604                    	JBE	short pathok		;PTM.			;AN000;
 13487 00002F73 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 13488                                  	;jmp	SYS_RET_ERR		;PTM.
 13489 00002F75 EBEA                    	jmp	short MkErr
 13490                                  pathok:
 13491 00002F77 FFD6                    	CALL	SI			; go get file
 13492 00002F79 72E6                    	JC	short MkErr		; no errors
 13493                                  	;jmp	short mkdir_ok
 13494 00002F7B E97FE7                  	jmp	SYS_RET_OK
 13495                                  
 13496                                  ;----------------------------------------------------------------------------
 13497                                  ;
 13498                                  ; Procedure Name : Check_PathLen
 13499                                  ;
 13500                                  ; Inputs:
 13501                                  ;	nothing
 13502                                  ; Function:
 13503                                  ;	check if final path length greater than 67
 13504                                  ; Returns:
 13505                                  ;	Above flag set if > 67
 13506                                  ;
 13507                                  ;---------------------------------------------------------------------------
 13508                                  
 13509                                  Check_PathLen:
 13510                                  	; 09/09/2018
 13511                                  	;;MOV	SI,[WFP_START]
 13512                                  	;MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 13513                                  ;check_PathLen2:
 13514 00002F7E 16                      	push	ss
 13515 00002F7F 1F                      	pop	ds
 13516 00002F80 8B36[4A05]              	mov	SI,[WFP_START] ; MSDOS 3.3
 13517 00002F84 51                      	push	CX	
 13518 00002F85 E8E9EF                  	CALL	DStrLen
 13519 00002F88 83F943                  	CMP	CX,DIRSTRLEN
 13520 00002F8B 59                      	POP	CX
 13521 00002F8C C3                      	retn
 13522                                  
 13523                                  ;============================================================================
 13524                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 13525                                  ;============================================================================
 13526                                  ; 07/08/2018 - Retro DOS v3.0
 13527                                  
 13528                                  ;**	IOCTL system call.
 13529                                  ;
 13530                                  ;	$IOCTL
 13531                                  ;
 13532                                  ;	  Revision history:
 13533                                  ;
 13534                                  ;		Created: ARR 4 April 1983
 13535                                  ;
 13536                                  ;		GenericIOCTL added:		KGS	22 April 1985
 13537                                  ;
 13538                                  ;		A000	version 4.00	Jan. 1988
 13539                                  ;
 13540                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 13541                                  ;
 13542                                  
 13543                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 13544                                  ;---------------------------------------------------------------------------
 13545                                  ;
 13546                                  ;   Assembler usage:
 13547                                  ;	    MOV     BX, Handle
 13548                                  ;	    MOV     DX, Data
 13549                                  ;
 13550                                  ;	(or LDS     DX,BUF
 13551                                  ;	    MOV     CX,COUNT)
 13552                                  ;
 13553                                  ;	    MOV     AH, Ioctl
 13554                                  ;	    MOV     AL, Request
 13555                                  ;	    INT     21h
 13556                                  ;
 13557                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 13558                                  ;	    attribute word in DX, handle in BX:
 13559                                  ;	    DH = high word of device driver attributes
 13560                                  ;	    DL = low byte of sf_flags
 13561                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 13562                                  ;	    in BX.
 13563                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 13564                                  ;	    into DS:DX.  Return number read in AX.
 13565                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 13566                                  ;	    DS:DX.  Return bytes written in AX.
 13567                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 13568                                  ;	    into DS:DX.  Return number read in AX.
 13569                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 13570                                  ;	    DS:DX.  Return bytes written in AX.
 13571                                  ;	 6  Return input status of handle in BX. If a read will go to the
 13572                                  ;	    device, AL = 0FFh, otherwise 0.
 13573                                  ;	 7  Return output status of handle in BX. If a write will go to the
 13574                                  ;	    device, AL = 0FFh, otherwise 0.
 13575                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 13576                                  ;	    removable media, 0 otherwise.
 13577                                  ;	 9  Return the contents of the device attribute word in DX for the
 13578                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 13579                                  ;	    network. 8000h is the bit for local use.
 13580                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 13581                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 13582                                  ;	    the count and CX is the delay.
 13583                                  ;
 13584                                  ;   Error returns:
 13585                                  ;	    AX = error_invalid_handle
 13586                                  ;	       = error_invalid_function
 13587                                  ;	       = error_invalid_data
 13588                                  ;
 13589                                  ;-------------------------------------------------------------------------------
 13590                                  ;
 13591                                  ;   This is the documentation copied from DOS 4.0 it is much better
 13592                                  ;   than the above
 13593                                  ;
 13594                                  ;	There are several basic forms of IOCTL calls:
 13595                                  ;
 13596                                  ;
 13597                                  ;	** Get/Set device information:	**
 13598                                  ;
 13599                                  ;	ENTRY	(AL) = function code
 13600                                  ;		  0 - Get device information
 13601                                  ;		  1 - Set device information
 13602                                  ;		(BX) = file handle
 13603                                  ;		(DX) = info for "Set Device Information"
 13604                                  ;	EXIT	'C' set if error
 13605                                  ;		  (AX) = error code
 13606                                  ;		'C' clear if OK
 13607                                  ;		  (DX) = info for "Get Device Information"
 13608                                  ;	USES	ALL
 13609                                  ;
 13610                                  ;
 13611                                  ;	**  Read/Write Control Data From/To Handle  **
 13612                                  ;
 13613                                  ;	ENTRY	(AL) = function code
 13614                                  ;		  2 - Read device control info
 13615                                  ;		  3 - Write device control info
 13616                                  ;		(BX) = file handle
 13617                                  ;		(CX) = transfer count
 13618                                  ;		(DS:DX) = address for data
 13619                                  ;	EXIT	'C' set if error
 13620                                  ;		  (AX) = error code
 13621                                  ;		'C' clear if OK
 13622                                  ;		  (AX) = count of bytes transfered
 13623                                  ;	USES	ALL
 13624                                  ;
 13625                                  ;
 13626                                  ;	**  Read/Write Control Data From/To Block Device  **
 13627                                  ;
 13628                                  ;	ENTRY	(AL) = function code
 13629                                  ;		  4 - Read device control info
 13630                                  ;		  5 - Write device control info
 13631                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13632                                  ;		(CX) = transfer count
 13633                                  ;		(DS:DX) = address for data
 13634                                  ;	EXIT	'C' set if error
 13635                                  ;		  (AX) = error code
 13636                                  ;		'C' clear if OK
 13637                                  ;		  (AX) = count of bytes transfered
 13638                                  ;	USES	ALL
 13639                                  ;
 13640                                  ;
 13641                                  ;	**  Get Input/Output Status  **
 13642                                  ;
 13643                                  ;	ENTRY	(AL) = function code
 13644                                  ;		  6 - Get Input status
 13645                                  ;		  7 - Get Output Status
 13646                                  ;		(BX) = file handle
 13647                                  ;	EXIT	'C' set if error
 13648                                  ;		  (AX) = error code
 13649                                  ;		'C' clear if OK
 13650                                  ;		  (AL) = 00 if not ready
 13651                                  ;		  (AL) = FF if ready
 13652                                  ;	USES	ALL
 13653                                  ;
 13654                                  ;
 13655                                  ;	**  Get Drive Information  **
 13656                                  ;
 13657                                  ;	ENTRY	(AL) = function code
 13658                                  ;		  8 - Check for removable media
 13659                                  ;		  9 - Get device attributes
 13660                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13661                                  ;	EXIT	'C' set if error
 13662                                  ;		  (AX) = error code
 13663                                  ;		'C' clear if OK
 13664                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 13665                                  ;		  (DX) = device attribute word (func. 9)
 13666                                  ;	USES	ALL
 13667                                  ;
 13668                                  ;
 13669                                  ;	**  Get Redirected bit	**
 13670                                  ;
 13671                                  ;	ENTRY	(AL) = function code
 13672                                  ;		  0Ah - Network stuff
 13673                                  ;		(BX) = file handle
 13674                                  ;	EXIT	'C' set if error
 13675                                  ;		  (AX) = error code
 13676                                  ;		'C' clear if OK
 13677                                  ;		  (DX) = SFT flags word, 8000h set if network file
 13678                                  ;	USES	ALL
 13679                                  ;
 13680                                  ;
 13681                                  ;	**  Change sharer retry parameters  **
 13682                                  ;
 13683                                  ;	ENTRY	(AL) = function code
 13684                                  ;		  0Bh - Set retry parameters
 13685                                  ;		(CX) = retry loop count
 13686                                  ;		(DX) = number of retries
 13687                                  ;	EXIT	'C' set if error
 13688                                  ;		  (AX) = error code
 13689                                  ;		'C' clear if OK
 13690                                  ;	USES	ALL
 13691                                  ;
 13692                                  ;
 13693                                  ;   =================================================================
 13694                                  ;
 13695                                  ;	**  New Standard Control  **
 13696                                  ;
 13697                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 13698                                  ;	FORMS ARE OBSOLETE.
 13699                                  ;
 13700                                  ;   =================================================================
 13701                                  ;
 13702                                  ;	ENTRY	(AL) = function code
 13703                                  ;		  0Ch - Control Function subcode
 13704                                  ;		(BX) = File Handle
 13705                                  ;		(CH) = Category Indicator
 13706                                  ;		(CL) = Function within category
 13707                                  ;		(DS:DX) = address for data, if any
 13708                                  ;		(SI) = Passed to device as argument, use depends upon function
 13709                                  ;		(DI) = Passed to device as argument, use depends upon function
 13710                                  ;	EXIT	'C' set if error
 13711                                  ;		  (AX) = error code
 13712                                  ;		'C' clear if OK
 13713                                  ;		  (SI) = Return value, meaning is function dependent
 13714                                  ;		  (DI) = Return value, meaning is function dependent
 13715                                  ;		  (DS:DX) = Return address, use is function dependent
 13716                                  ;	USES	ALL
 13717                                  ;
 13718                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 13719                                  ;     (See inc\ioctl.inc for more info)
 13720                                  ;
 13721                                  ;	ENTRY	(AL) = function code
 13722                                  ;		  0Dh - Control Function subcode
 13723                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 13724                                  ;		(CH) = Category Indicator
 13725                                  ;		(CL) = Function within category
 13726                                  ;		(DS:DX) = address for data, if any
 13727                                  ;		(SI) = Passed to device as argument, use depends upon function
 13728                                  ;		(DI) = Passed to device as argument, use depends upon function
 13729                                  ;
 13730                                  ;	EXIT	'C' set if error
 13731                                  ;		  (AX) = error code
 13732                                  ;		'C' clear if OK
 13733                                  ;		  (DS:DX) = Return address, use is function dependent
 13734                                  ;	USES	ALL
 13735                                  ;
 13736                                  ;---------------------------------------------------------------------------
 13737                                  	
 13738                                  	; MSDOS 6.0
 13739                                  IOCTLJMPTABLE:	;label	word
 13740                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13741 00002F8D [C52F]                  	dw	ioctl_getset_data	; 0
 13742 00002F8F [C52F]                  	dw	ioctl_getset_data   	; 1
 13743 00002F91 [1530]                  	dw	ioctl_control_string	; 2
 13744 00002F93 [1530]                  	dw	ioctl_control_string	; 3
 13745 00002F95 [6D31]                  	dw	ioctl_get_dev		; 4
 13746 00002F97 [6D31]                  	dw	ioctl_get_dev		; 5
 13747 00002F99 [3030]                  	dw	ioctl_status		; 6
 13748 00002F9B [3030]                  	dw	ioctl_status		; 7
 13749 00002F9D [C630]                  	dw	ioctl_rem_media		; 8
 13750 00002F9F [0531]                  	dw	Ioctl_Drive_attr	; 9
 13751 00002FA1 [5C31]                  	dw	IOCTL_Handle_Redir	; A
 13752 00002FA3 [4F30]                  	dw	Set_Retry_Parameters	; B
 13753 00002FA5 [5E30]                  	dw	GENERICIOCTLHANDLE	; C
 13754 00002FA7 [7630]                  	dw	GENERICIOCTL		; D
 13755                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13756 00002FA9 [2032]                  	dw	ioctl_drive_owner	; E
 13757 00002FAB [2032]                  	dw	ioctl_drive_owner	; F
 13758                                  	; MSDOS 6.0
 13759                                  	;dw	query_handle_support	; 10h
 13760                                  	;dw	query_device_support	; 11h
 13761                                  
 13762                                  _$IOCTL:
 13763 00002FAD 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 13764 00002FAF 16                      	push	ss
 13765 00002FB0 1F                      	pop	ds			;hkn; SS is DOSDATA
 13766                                  
 13767                                  	; MSDOS 3.3
 13768 00002FB1 3C0F                    	cmp	al,0Fh 
 13769                                  	; MSDOS 6.0
 13770                                  	;cmp	al,11h			; al must be between 0 & 11h
 13771 00002FB3 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 13772                                  
 13773                                  	; 09/09/2018
 13774                                  	;push	AX			; Need to save AL for generic IOCTL
 13775 00002FB5 89C7                    	mov	di,ax			; di NOT a PARM
 13776 00002FB7 81E7FF00                	and	di,0FFh			; di = al
 13777 00002FBB D1E7                    	shl	di,1			; di = index into jmp table
 13778                                  	;pop	AX			; Restore AL for generic IOCTL
 13779                                  
 13780 00002FBD 2EFFA5[8D2F]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 13781                                  
 13782                                  
 13783                                  ioctl_bad_funj2:
 13784 00002FC2 E9F900                  	JMP	ioctl_bad_fun  ; 10/08/2018
 13785                                  
 13786                                  ;--------------------------------------------------------------------------
 13787                                  ;
 13788                                  ; IOCTL: AL= 0,1
 13789                                  ;
 13790                                  ; ENTRY : DS = DOSDATA
 13791                                  ;
 13792                                  ;---------------------------------------------------------------------
 13793                                  
 13794                                  ioctl_getset_data:
 13795                                  	; MSDOS 6.0
 13796 00002FC5 E83538                  	call	SFFromHandle		; ES:DI -> SFT
 13797 00002FC8 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 13798                                  ioctl_bad_handle:
 13799 00002FCA B006                    	mov	al,error_invalid_handle
 13800                                  ioctl_error:
 13801 00002FCC E937E7                  	jmp	SYS_RET_ERR
 13802                                  
 13803                                  ioctl_check_permissions:
 13804 00002FCF 3C00                    	CMP	AL,0
 13805 00002FD1 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 13806 00002FD5 741B                    	JZ	short ioctl_read	; read the byte
 13807                                  
 13808 00002FD7 08F6                    	or	dh, dh
 13809 00002FD9 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 13810 00002FDB B00D                    	mov	al,error_invalid_data	; no DH <> 0
 13811                                  	;jmp	SYS_RET_ERR
 13812 00002FDD EBED                    	jmp	short ioctl_error
 13813                                  
 13814                                  ioctl_check_device:
 13815 00002FDF A880                    	test	AL,devid_device 	; can I set this handle?
 13816 00002FE1 74DF                    	jz	short ioctl_bad_funj2
 13817 00002FE3 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 13818                                  					;   device bit!! He can muck with the
 13819                                  					;   others at will.
 13820 00002FE6 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13821 00002FEB 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 13822                                  
 13823                                  ioctl_ok:
 13824 00002FEF E90BE7                  	jmp	SYS_RET_OK
 13825                                  
 13826                                  ioctl_read:
 13827 00002FF2 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 13828 00002FF7 30E4                    	XOR	AH,AH
 13829 00002FF9 A880                    	test	AL,devid_device 	; Should I set high byte
 13830 00002FFB 740D                    	JZ	short ioctl_no_high	; no
 13831 00002FFD C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13832 00003002 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13833 00003006 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 13834                                  ioctl_no_high:
 13835 0000300A 89C2                    	MOV	DX,AX
 13836 0000300C E8FCE5                  	call	Get_User_Stack
 13837 0000300F 895406                  	MOV	[SI+user_env.user_DX],DX
 13838                                  	;;jmp	SYS_RET_OK
 13839                                  	;jmp	short ioctl_ok
 13840                                  	; 26/07/2019
 13841 00003012 E9EBE6                  	jmp	SYS_RET_OK_clc
 13842                                  
 13843                                  ;--------------------------------------------------------------------------
 13844                                  ;
 13845                                  ; IOCTL: 2,3
 13846                                  ;
 13847                                  ; ENTRY : DS = DOSDATA
 13848                                  ;	  SI = user's DS
 13849                                  ;
 13850                                  ;--------------------------------------------------------------------------
 13851                                  
 13852                                  ioctl_control_string:
 13853                                  
 13854 00003015 E8E537                  	call	SFFromHandle		; ES:DI -> SFT
 13855 00003018 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 13856 0000301A 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 13857 00003020 74A0                    	jz	short ioctl_bad_funj2			; No it is a file
 13858 00003022 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13859 00003027 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13860 0000302B 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 13861 0000302D E94201                  	JMP	ioctl_do_string
 13862                                  
 13863                                  ;--------------------------------------------------------------------------
 13864                                  ;
 13865                                  ; IOCTL: AL = 6,7
 13866                                  ;
 13867                                  ; ENTRY: DS = DOSDATA
 13868                                  ;
 13869                                  ;--------------------------------------------------------------------------
 13870                                  
 13871                                  ioctl_status:
 13872                                  
 13873 00003030 B401                    	MOV	AH,1
 13874 00003032 2C06                    	SUB	AL,6			; 6=0,7=1
 13875 00003034 7402                    	JZ	short ioctl_get_status
 13876 00003036 B403                    	MOV	AH,3
 13877                                  ioctl_get_status:
 13878 00003038 50                      	PUSH	AX
 13879 00003039 E87810                  	call	GET_IO_SFT
 13880 0000303C 58                      	POP	AX
 13881 0000303D 7302                    	JNC	short DO_IOFUNC
 13882 0000303F EB89                    	JMP	short ioctl_bad_handle	; invalid SFT
 13883                                  
 13884                                  DO_IOFUNC:
 13885 00003041 E80A1D                  	call	IOFUNC
 13886 00003044 88C4                    	MOV	AH,AL
 13887 00003046 B0FF                    	MOV	AL,0FFH
 13888 00003048 7502                    	JNZ	short ioctl_status_ret
 13889 0000304A FEC0                    	INC	AL
 13890                                  ioctl_status_ret:
 13891 0000304C E9AEE6                  	jmp	SYS_RET_OK
 13892                                  
 13893                                  ;------------------------------------------------------------------------
 13894                                  ;
 13895                                  ; IOCTL: AL = B
 13896                                  ;
 13897                                  ; ENTRY: DS = DOSDATA
 13898                                  ;
 13899                                  ;-------------------------------------------------------------------------
 13900                                  
 13901                                  Set_Retry_Parameters:
 13902                                  	; 09/09/2018
 13903 0000304F 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 13904 00003053 09D2                    	OR	DX,DX			; zero retries not allowed
 13905 00003055 7467                    	JZ	short ioctl_bad_fun
 13906 00003057 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 13907                                  doneok:
 13908 0000305B E99FE6                  	jmp	SYS_RET_OK		; Done
 13909                                  
 13910                                  ;--------------------------------------------------------------------------
 13911                                  ;
 13912                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 13913                                  ;
 13914                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 13915                                  ;	SI:DX -> Users Device Parameter Table
 13916                                  ;	IOCALL -> IOCTL_Req structure
 13917                                  ;
 13918                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 13919                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 13920                                  ;	call.
 13921                                  ;
 13922                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 13923                                  ;         the call to Check_If_Net because Check_If_Net gets our
 13924                                  ;         return address off the stack if the drive is invalid.
 13925                                  ;
 13926                                  ;----------------------------------------------------------------------------
 13927                                  
 13928                                  query_handle_support:	; Entry point for handles
 13929                                  GENERICIOCTLHANDLE:
 13930                                  
 13931 0000305E E89C37                  	call	SFFromHandle		; Get SFT for device.
 13932 00003061 7260                    	jc	short ioctl_bad_handlej
 13933                                  
 13934 00003063 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 13935 00003069 7553                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 13936                                  
 13937 0000306B C606[D102]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev
 13938 00003070 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 13939 00003074 EB0F                    	jmp	short Do_GenIOCTL
 13940                                  
 13941                                  query_device_support:	; Entry point for devices:
 13942                                  GENERICIOCTL:
 13943                                  
 13944 00003076 C606[D102]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk
 13945 0000307B 80FD08                  	cmp	ch,IOC_DC		; Only disk devices are allowed to use
 13946 0000307E 753E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 13947                                  
 13948 00003080 E88001                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 13949 00003083 7539                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 13950                                  
 13951                                  Do_GenIOCTL:
 13952                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 ; Can device handle Generic IOCTL funcs
 13953                                  	; 09/09/2018
 13954 00003085 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 13955 0000308A 7432                    	jz	short ioctl_bad_fun
 13956                                  
 13957                                  	; MSDOS 6.0
 13958                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ;Assume real Request
 13959                                  	;cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 13960                                  	;jl	short SetIOCtlBlock
 13961                                  	;
 13962                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 13963                                  	;jz	short ioctl_bad_fun	; No support for query 
 13964                                  	;
 13965                                  	;mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 13966                                  
 13967                                  ;SetIOCtlBlock:
 13968 0000308C 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 13969 0000308D 57                      	PUSH	DI			; in DS:SI
 13970                                  					; Setup Generic IOCTL Request Block
 13971 0000308E C606[2403]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 13972                                  	; 07/09/2018 (MSDOS 3.3)
 13973                                  	;mov	byte [IOCALL_REQFUNC],19
 13974 00003093 C606[2603]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 13975                                  	;
 13976 00003098 881E[2503]              	MOV	byte [IOCALL_REQUNIT],BL
 13977 0000309C 882E[3103]              	MOV	byte [IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 13978 000030A0 880E[3203]              	MOV	byte [IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 13979 000030A4 8936[3303]              	MOV	word [IOCALL+IOCTL_REQ.REG_SI],SI
 13980 000030A8 893E[3503]              	MOV	word [IOCALL+IOCTL_REQ.REG_DI],DI
 13981 000030AC 8916[3703]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 13982 000030B0 8936[3903]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 13983                                  
 13984                                  ;hkn; IOCALL is in DOSDATA
 13985 000030B4 BB[2403]                	MOV	BX,IOCALL
 13986                                  
 13987 000030B7 16                      	PUSH	SS
 13988 000030B8 07                      	POP	ES
 13989                                  					; DS:SI -> Device header.
 13990 000030B9 5E                      	POP	SI
 13991 000030BA 1F                      	POP	DS
 13992                                  	; 10/08/2018
 13993 000030BB E9EE00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 13994                                  
 13995                                  ioctl_bad_fun:
 13996 000030BE B001                    	mov	al, error_invalid_function
 13997 000030C0 E943E6                  	jmp	SYS_RET_ERR	
 13998                                  
 13999                                  ioctl_bad_handlej:
 14000 000030C3 E904FF                  	jmp	ioctl_bad_handle
 14001                                  
 14002                                  ;---------------------------------------------------------------------------
 14003                                  ;
 14004                                  ; IOCTL AL = 8
 14005                                  ;
 14006                                  ; ENTRY:  DS = DOSDATA
 14007                                  ;
 14008                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 14009                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14010                                  ;         return address off the stack if the drive is invalid.
 14011                                  ;
 14012                                  ;-------------------------------------------------------------------------
 14013                                  
 14014                                  ioctl_rem_media:
 14015                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14016 000030C6 E83A01                  	CALL	Check_If_Net
 14017 000030C9 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 14018                                  					;   certainly don't know how to do this
 14019                                  					;   call.
 14020 000030CB 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 14021 000030D1 74EB                    	JZ	short ioctl_bad_fun		; NO
 14022                                  
 14023                                  ;hkn; SS override for IOCALL
 14024 000030D3 36C606[2603]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD
 14025 000030D9 B00D                    	MOV	AL,REMHL
 14026 000030DB 88DC                    	MOV	AH,BL			; Unit number
 14027 000030DD 36A3[2403]              	MOV	[SS:IOCALL_REQLEN],AX
 14028 000030E1 31C0                    	XOR	AX,AX
 14029 000030E3 36A3[2703]              	MOV	[SS:IOCALL_REQSTAT],AX
 14030 000030E7 06                      	PUSH	ES
 14031 000030E8 1F                      	POP	DS
 14032 000030E9 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14033 000030EB 16                      	PUSH	SS
 14034 000030EC 07                      	POP	ES
 14035                                  
 14036                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 14037 000030ED BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14038 000030F0 1E                      	push	ds
 14039 000030F1 56                      	push	si
 14040 000030F2 E8061E                  	call	DEVIOCALL2
 14041 000030F5 5E                      	pop	si
 14042 000030F6 1F                      	pop	ds
 14043                                  
 14044                                  ;hkn; SS override
 14045 000030F7 36A1[2703]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 14046 000030FB 250002                  	AND	AX,STBUI		; Mask to busy bit
 14047 000030FE B109                    	MOV	CL,9
 14048 00003100 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 14049 00003102 E9F8E5                  	jmp	SYS_RET_OK
 14050                                  
 14051                                  ;-------------------------------------------------------------------------
 14052                                  ;
 14053                                  ; IOCTL: AL = 9
 14054                                  ;
 14055                                  ; ENTRY: DS = DOSDATA
 14056                                  ;
 14057                                  ;-------------------------------------------------------------------------
 14058                                  
 14059                                  Ioctl_Drive_attr:
 14060                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14061 00003105 88D8                    	mov	al, bl
 14062 00003107 E86838                  	call	GETTHISDRV
 14063 0000310A 724B                    	jc	short ioctl_drv_err
 14064 0000310C E8C500                  	call	Get_Driver_BL
 14065                                  	; MSDOS 6.0
 14066 0000310F 7246                    	JC	short ioctl_drv_err	; drive not valid
 14067                                  
 14068 00003111 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 14069                                  					; get device attribute word
 14070 00003115 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 14071                                  
 14072                                  ;hkn; SS override
 14073 00003117 36C43E[3A05]            	LES	DI,[SS:THISCDS]
 14074 0000311C 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14075 00003122 7403                    	JZ	short IOCTLShare
 14076                                  
 14077                                  	;or	dx,1000h ; msdos 3.3
 14078                                  
 14079                                  ;	Net devices don't return a device attribute word.
 14080                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 14081                                  
 14082 00003124 BA0010                  	MOV	DX,1000h ;  MSDOS 6.0
 14083                                  IOCTLShare:
 14084 00003127 16                      	push	ss
 14085 00003128 1F                      	pop	ds
 14086 00003129 BE[6003]                	MOV	SI,OPENBUF
 14087 0000312C 80C341                  	ADD	BL,"A"
 14088 0000312F 881C                    	MOV	[SI],BL
 14089 00003131 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 14090 00003136 B80003                  	MOV	AX,0300h
 14091 00003139 F8                      	CLC
 14092                                  	;INT	int_IBM
 14093 0000313A CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 14094                                  			; DS:SI -> ASCIZ disk device name (may be full path or only drive
 14095                                  			; specifier--must include the colon)
 14096                                  			; Return: CF clear if absolute disk access allowed
 14097 0000313C 7304                    	JNC	short IOCTLLocal	; Not shared
 14098 0000313E 81CA0002                	OR	DX,0200H		; Shared, bit 9
 14099                                  IOCTLLocal:
 14100 00003142 26F745430010            	TEST	word [ES:DI+curdir.flags],curdir_local
 14101 00003148 7404                    	JZ	short ioctl_set_DX
 14102 0000314A 81CA0080                	OR	DX,8000h
 14103                                  ioctl_set_DX:
 14104 0000314E E8BAE4                  	call	Get_User_Stack
 14105 00003151 895406                  	MOV	[SI+user_env.user_DX],DX
 14106                                  	;jmp	SYS_RET_OK
 14107                                  	; 26/07/2019
 14108 00003154 E9A9E5                  	jmp	SYS_RET_OK_clc
 14109                                  
 14110                                  ioctl_drv_err:
 14111 00003157 B00F                    	mov	al, error_invalid_drive
 14112 00003159 E9AAE5                  	jmp	SYS_RET_ERR
 14113                                  
 14114                                  ;--------------------------------------------------------------------------
 14115                                  ; IOCTL: AL = A
 14116                                  ;
 14117                                  ; ENTRY: DS = DOSDATA
 14118                                  ;
 14119                                  ;--------------------------------------------------------------------------
 14120                                  
 14121                                  IOCTL_Handle_Redir:
 14122 0000315C E89E36                  	call	SFFromHandle		; ES:DI -> SFT
 14123 0000315F 7303                    	JNC	short ioctl_got_sft	; have valid handle
 14124 00003161 E966FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 14125                                  
 14126                                  ioctl_got_sft:
 14127 00003164 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 14128 00003168 EBE4                    	JMP	short ioctl_set_DX	; pass dx to user and return
 14129                                  
 14130                                  ioctl_bad_funj:
 14131 0000316A E951FF                  	JMP	ioctl_bad_fun
 14132                                  
 14133                                  ;--------------------------------------------------------------------------
 14134                                  ;
 14135                                  ; IOCTL: AL= 4,5
 14136                                  ;
 14137                                  ; ENTRY: DS = DOSDATA
 14138                                  ;	 SI = user's DS
 14139                                  ;
 14140                                  ;
 14141                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 14142                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14143                                  ;         return address off the stack if the drive is invalid.
 14144                                  ;
 14145                                  ;-------------------------------------------------------------------------
 14146                                  
 14147                                  ioctl_get_dev:
 14148 0000316D E89300                  	CALL	Check_If_Net
 14149 00003170 75F8                    	JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 14150                                  					;   certainly don't know how to do this
 14151                                  					;   call.
 14152                                  ioctl_do_string:
 14153 00003172 26F745040040            	TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 14154 00003178 74F0                    	JZ	short ioctl_bad_funj		; NO
 14155                                  					; assume IOCTL read
 14156 0000317A C606[2603]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL
 14157                                  
 14158 0000317F A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 14159 00003181 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 14160                                  
 14161                                  					; it is an IOCTL write
 14162 00003183 C606[2603]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL
 14163                                  
 14164                                  ioctl_control_call:
 14165 00003188 B016                    	MOV	AL,DRDWRHL
 14166                                  ioctl_setup_pkt:
 14167 0000318A 88DC                    	MOV	AH,BL			; Unit number
 14168 0000318C A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14169 0000318F 31C0                    	XOR	AX,AX
 14170 00003191 A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14171 00003194 A2[3103]                	MOV	[IOMED],AL
 14172 00003197 890E[3603]              	MOV	[IOSCNT],CX
 14173 0000319B 8916[3203]              	MOV	[IOXAD],DX
 14174 0000319F 8936[3403]              	MOV	[IOXAD+2],SI
 14175 000031A3 06                      	PUSH	ES
 14176 000031A4 1F                      	POP	DS
 14177 000031A5 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14178 000031A7 16                      	PUSH	SS
 14179 000031A8 07                      	POP	ES
 14180                                  
 14181 000031A9 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14182                                  ioctl_do_IO:
 14183 000031AC E84C1D                  	call	DEVIOCALL2
 14184                                  
 14185                                  ;hkn; SS override for IOCALL
 14186 000031AF 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 14187 000031B6 7507                    	JNZ	short ioctl_string_err
 14188                                  
 14189                                  ;hkn; SS override
 14190 000031B8 36A1[3603]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 14191 000031BC E93EE5                  	jmp	SYS_RET_OK
 14192                                  
 14193                                  ioctl_string_err:
 14194 000031BF 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 14195                                  device_err:
 14196 000031C4 81E7FF00                	AND	DI,STECODE		; mask out irrelevant bits
 14197 000031C8 89F8                    	MOV	AX,DI
 14198 000031CA E84828                  	call	SET_I24_EXTENDED_ERROR
 14199                                  
 14200                                  ;hkn; use SS override
 14201                                  ;hkn;	mov	ax,[CS:EXTERR]
 14202 000031CD 36A1[D202]              	mov	ax,[SS:EXTERR]
 14203 000031D1 E932E5                  	jmp	SYS_RET_ERR
 14204                                  
 14205                                  ;--------------------------------------------------------------------------
 14206                                  ; Proc name : Get_Driver_BL
 14207                                  ;
 14208                                  ;	DS is DOSDATA
 14209                                  ;	BL is drive number (0=default)
 14210                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 14211                                  ;	No regs modified
 14212                                  ;
 14213                                  ;---------------------------------------------------------------------------
 14214                                  
 14215                                  Get_Driver_BL:
 14216 000031D4 50                      	PUSH	AX
 14217 000031D5 88D8                    	MOV	AL,BL			; Drive
 14218 000031D7 E89837                  	call	GETTHISDRV
 14219 000031DA 7225                    	jc	short ioctl_bad_drv
 14220 000031DC 30DB                    	XOR	BL,BL			; Unit zero on Net device
 14221 000031DE C606[D102]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net
 14222 000031E3 C43E[3A05]              	LES	DI,[THISCDS]
 14223 000031E7 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14224 000031ED 26C47D45                	LES	DI,[ES:DI+curdir.devptr]; ES:DI -> Dpb or net dev
 14225 000031F1 750D                    	JNZ	short got_dev_ptr	; Is net
 14226 000031F3 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14227 000031F8 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 14228 000031FC 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 14229                                  got_dev_ptr:
 14230 00003200 F8                      	CLC
 14231                                  ioctl_bad_drv:
 14232 00003201 58                      	POP	AX
 14233 00003202 C3                      	retn
 14234                                  
 14235                                  ;-------------------------------------------------------------------------
 14236                                  ; Proc Name : Check_If_Net:
 14237                                  ;
 14238                                  ;
 14239                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 14240                                  ; If no device is found, the return address is popped off the stack, and a
 14241                                  ; jump is made to ioctl_drv_err.
 14242                                  ;
 14243                                  ; On Entry:
 14244                                  ; Registers same as those for Get_Driver_BL
 14245                                  ;
 14246                                  ; On Exit:
 14247                                  ; ZERO flag	- set if not a net device
 14248                                  ;		- reset if net device
 14249                                  ; ES:DI -> the device
 14250                                  ;
 14251                                  ;
 14252                                  ; BUGBUG: This function assumes the following stack setup on entry
 14253                                  ;
 14254                                  ;	  SP+2 -> Error return address
 14255                                  ;	  SP   -> Normal return address
 14256                                  ;
 14257                                  ;-------------------------------------------------------------------------
 14258                                  
 14259                                  Check_If_Net:
 14260                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14261 00003203 E8CEFF                  	CALL	Get_Driver_BL
 14262 00003206 720F                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 14263 00003208 06                      	PUSH	ES
 14264 00003209 57                      	PUSH	DI
 14265 0000320A C43E[3A05]              	LES	DI,[THISCDS]
 14266 0000320E 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14267 00003214 5F                      	POP	DI
 14268 00003215 07                      	POP	ES
 14269 00003216 C3                      	retn
 14270                                  
 14271                                  ioctl_drv_err_pop:
 14272 00003217 58                      	pop	ax			; pop off return address
 14273 00003218 E93CFF                  	jmp	ioctl_drv_err
 14274                                  
 14275                                  ioctl_bad_funj3:
 14276 0000321B E9A0FE                  	jmp	ioctl_bad_fun
 14277                                  
 14278                                  ioctl_string_errj:
 14279 0000321E EB9F                    	jmp	ioctl_string_err
 14280                                  
 14281                                  ;--------------------------------------------------------------------------
 14282                                  ;
 14283                                  ; IOCTL: AL = E, F
 14284                                  ;
 14285                                  ; ENTRY: DS = DOSDATA
 14286                                  ;
 14287                                  ;
 14288                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 14289                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14290                                  ;         return address off the stack if the drive is invalid.
 14291                                  ;
 14292                                  ;--------------------------------------------------------------------------
 14293                                  
 14294                                  ioctl_drive_owner:
 14295                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14296 00003220 E8E0FF                  	Call	Check_If_Net
 14297 00003223 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 14298                                  					;   certainly don't know how to do this
 14299                                  					;   call.
 14300                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 14301                                  	; 09/09/2018
 14302 00003225 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 14303 0000322A 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 14304 0000322C C606[2603]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 14305 00003231 3C0E                    	cmp	al,0Eh			; Get Owner ?
 14306 00003233 7405                    	jz	short GetOwner
 14307                                  SetOwner:
 14308 00003235 C606[2603]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN
 14309                                  GetOwner:
 14310 0000323A B00D                    	MOV	AL,OWNHL
 14311 0000323C 88DC                    	MOV	AH,BL			; Unit number
 14312 0000323E A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14313 00003241 31C0                    	XOR	AX,AX
 14314 00003243 A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14315 00003246 06                      	PUSH	ES
 14316 00003247 1F                      	POP	DS
 14317 00003248 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14318 0000324A 16                      	PUSH	SS
 14319 0000324B 07                      	POP	ES
 14320 0000324C BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14321 0000324F 1E                      	push	ds
 14322 00003250 56                      	push	si
 14323 00003251 E8A71C                  	call	DEVIOCALL2
 14324 00003254 5E                      	pop	si
 14325 00003255 1F                      	pop	ds
 14326                                  ;hkn; SS override
 14327 00003256 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR
 14328 0000325D 75BF                    	jnz	short ioctl_string_errj
 14329 0000325F 36A0[2503]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 14330                                  					; owner returned is 1-based.
 14331 00003263 E997E4                  	jmp	SYS_RET_OK
 14332                                  
 14333                                  ;============================================================================
 14334                                  ; DELETE.ASM, MSDOS 6.0, 1991
 14335                                  ;============================================================================
 14336                                  ; 07/08/2018 - Retro DOS v3.0
 14337                                  
 14338                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 14339                                  ;	NAME	DOS_DELETE
 14340                                  
 14341                                  ;
 14342                                  ;	Microsoft Confidential
 14343                                  ;	Copyright (C) Microsoft Corporation 1991
 14344                                  ;	All Rights Reserved.
 14345                                  ;
 14346                                  
 14347                                  ;**	DELETE.ASM - Low level routine for deleting files
 14348                                  ;
 14349                                  ;		DOS_DELETE
 14350                                  ;		REN_DEL_Check
 14351                                  ;		FastOpen_Delete	       ; DOS 3.3
 14352                                  ;		FastOpen_Update	       ; DOS 3.3
 14353                                  
 14354                                  
 14355                                  ;   Revision history:
 14356                                  ;
 14357                                  ;   A000  version 4.00	Jan. 1988
 14358                                  ;   A001  Fastopen Rename fix	April 1989
 14359                                  
 14360                                  
 14361                                  ;Installed = TRUE
 14362                                  
 14363                                  ;	i_need	NoSetDir,BYTE
 14364                                  ;	i_need	Creating,BYTE
 14365                                  ;	i_need	DELALL,BYTE
 14366                                  ;	i_need	THISDPB,DWORD
 14367                                  ;	i_need	THISSFT,DWORD
 14368                                  ;	i_need	THISCDS,DWORD
 14369                                  ;	i_need	CURBUF,DWORD
 14370                                  ;	i_need	ATTRIB,BYTE
 14371                                  ;	i_need	SATTRIB,BYTE
 14372                                  ;	i_need	WFP_START,WORD
 14373                                  ;	i_need	REN_WFP,WORD			 ;BN001
 14374                                  ;	i_need	NAME1,BYTE			 ;BN001
 14375                                  ;	i_need	FoundDel,BYTE
 14376                                  ;	i_need	AUXSTACK,BYTE
 14377                                  ;	i_need	VOLCHNG_FLAG,BYTE
 14378                                  ;	i_need	JShare,DWORD
 14379                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 14380                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 14381                                  ;
 14382                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 14383                                  ;
 14384                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 14385                                  ;	i_need	DMAADD,DWORD
 14386                                  ;	i_need	RENAMEDMA,BYTE
 14387                                  
 14388                                  ;---------------------------------------------------------------------------
 14389                                  ;
 14390                                  ; Procedure Name : DOS_DELETE
 14391                                  ;
 14392                                  ; Inputs:
 14393                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 14394                                  ;		terminated)
 14395                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 14396                                  ;		( = -1 if current dir not involved, else
 14397                                  ;		 Points to first char after last "/" of current dir part)
 14398                                  ;	[THISCDS] Points to CDS being used
 14399                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14400                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14401                                  ; Function:
 14402                                  ;	Delete the specified file(s)
 14403                                  ; Outputs:
 14404                                  ;	CARRY CLEAR
 14405                                  ;		OK
 14406                                  ;	CARRY SET
 14407                                  ;	    AX is error code
 14408                                  ;		error_file_not_found
 14409                                  ;			Last element of path not found
 14410                                  ;		error_path_not_found
 14411                                  ;			Bad path (not in curr dir part if present)
 14412                                  ;		error_bad_curr_dir
 14413                                  ;			Bad path in current directory part of path
 14414                                  ;		error_access_denied
 14415                                  ;			Attempt to delete device or directory
 14416                                  ;		***error_sharing_violation***
 14417                                  ;			Deny both access required, generates an INT 24.
 14418                                  ;			This error is NOT returned. The INT 24H is generated,
 14419                                  ;			  and the file is ignored (not deleted). Delete will
 14420                                  ;			  simply continue on looking for more files.
 14421                                  ;			  Carry will NOT be set in this case.
 14422                                  ; DS preserved, others destroyed
 14423                                  ;
 14424                                  ;---------------------------------------------------------------------------
 14425                                  
 14426                                  FILEFOUND   equ 01h
 14427                                  FILEDELETED equ 10h
 14428                                  
 14429                                  DOS_DELETE:
 14430                                  
 14431                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 14432                                  ;hkn; appropriately at this point.
 14433                                  
 14434 00003266 E85EED                  	call	TestNet
 14435 00003269 7306                    	JNC	short LOCAL_DELETE
 14436                                  
 14437                                  ;IF NOT Installed
 14438                                  ;	transfer NET_DELETE
 14439                                  ;ELSE
 14440                                  	;MOV	AX,(MultNET SHL 8) | 19
 14441                                  	;INT	2FH
 14442                                  	;return
 14443                                  
 14444 0000326B B81311                  	mov	ax,1113h
 14445 0000326E CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 14446                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 14447                                  			;		fully-qualified filename in DOS CS
 14448                                  			; SDA CDS pointer -> current directory structure for drive with file
 14449                                  			; Return: CF set on error
 14450 00003270 C3                      	retn
 14451                                  
 14452                                  ;ENDIF
 14453                                  
 14454                                  LOCAL_DELETE:
 14455 00003271 C606[0A05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 14456 00003276 E8ECED                  	call	EcritDisk
 14457 00003279 C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 14458 0000327F 8B36[4A05]              	MOV	SI,[WFP_START]
 14459                                  SKPNUL:
 14460 00003283 AC                      	LODSB
 14461 00003284 08C0                    	OR	AL,AL
 14462 00003286 75FB                    	JNZ	short SKPNUL		; go to end
 14463 00003288 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 14464 0000328B 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 14465 0000328F 7506                    	JNZ	short TEST_QUEST
 14466 00003291 807C022A                	CMP	BYTE [SI+2],"*"
 14467 00003295 741F                    	JZ	short CHECK_ATTS
 14468                                  TEST_QUEST:
 14469 00003297 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 14470 0000329A 87FE                    	XCHG	DI,SI
 14471                                  
 14472 0000329C 16                      	push	ss
 14473                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 14474 0000329D 07                      	pop	es ; 17/05/2019 (BugFix)
 14475                                  
 14476 0000329E B83F3F                  	MOV	AX,"??"
 14477 000032A1 B90400                  	MOV	CX,4		; four sets of "??"
 14478 000032A4 F3AF                    	REPE	SCASW
 14479 000032A6 751C                    	JNZ	short NOT_ALL
 14480 000032A8 87FE                    	XCHG	DI,SI
 14481 000032AA AD                      	LODSW
 14482 000032AB 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 14483 000032AE 7514                    	JNZ	short NOT_ALL
 14484 000032B0 AD                      	LODSW
 14485 000032B1 3D3F3F                  	CMP	AX,"??"
 14486 000032B4 750E                    	JNZ	short NOT_ALL
 14487                                  CHECK_ATTS:
 14488 000032B6 A0[0805]                	MOV	AL,[SATTRIB]
 14489 000032B9 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14490                                  					; Look only at hidden bits
 14491 000032BB 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14492                                  					; All must be set
 14493 000032BD 7505                    	JNZ	short NOT_ALL
 14494                                  
 14495                                  ; NOTE WARNING DANGER-----
 14496                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 14497                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 14498                                  
 14499 000032BF C606[1905]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 14500                                  NOT_ALL:
 14501 000032C4 C606[F802]01            	MOV	byte [NoSetDir],1
 14502 000032C9 E86C15                  	call	GetPathNoSet
 14503 000032CC 7313                    	JNC	short Del_found
 14504 000032CE 750C                    	JNZ	short _bad_path
 14505 000032D0 08C9                    	OR	CL,CL
 14506 000032D2 7408                    	JZ	short _bad_path
 14507                                  No_file:
 14508 000032D4 B80200                  	MOV	AX,error_file_not_found
 14509                                  ErrorReturn:
 14510 000032D7 F9                      	STC
 14511 000032D8 E892ED                  	call	LcritDisk
 14512 000032DB C3                      	retn
 14513                                  
 14514                                  _bad_path:
 14515 000032DC B80300                  	MOV	AX,error_path_not_found
 14516 000032DF EBF6                    	JMP	short ErrorReturn
 14517                                  
 14518                                  Del_found:
 14519 000032E1 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 14520 000032E3 803E[1905]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 14521 000032E8 7405                    	JZ	short NOT_DIR
 14522                                  Del_access_err:
 14523 000032EA B80500                  	MOV	AX,error_access_denied
 14524 000032ED EBE8                    	JMP	short ErrorReturn
 14525                                  
 14526                                  NOT_DIR:
 14527 000032EF 08E4                    	OR	AH,AH			; Check if device name
 14528 000032F1 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 14529                                  
 14530                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 14531                                  
 14532                                  DELFILE:
 14533 000032F3 800E[0A05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 14534                                  
 14535                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 14536                                  ; DOS issue a build BPB call the next time this drive is accessed.
 14537                                  
 14538 000032F8 1E                      	PUSH	DS
 14539 000032F9 8A26[1905]              	MOV	AH,[DELALL]
 14540 000032FD C53E[7405]              	LDS	DI,[CURBUF]
 14541                                  	
 14542                                  ;hkn; SS override
 14543 00003301 36F606[0605]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 14544 00003307 7509                    	JNZ	short DoDelete		; yes
 14545                                  
 14546 00003309 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 14547 0000330D 7403                    	JZ	short DoDelete		; not read only
 14548                                  
 14549 0000330F 1F                      	POP	DS
 14550 00003310 EB29                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 14551                                  
 14552                                  DoDelete:
 14553 00003312 E87700                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 14554 00003315 7303                    	JNC	short DEL_SHARE_OK
 14555 00003317 1F                      	POP	DS
 14556 00003318 EB21                    	JMP	SHORT DELNXT		; Skip it
 14557                                  
 14558                                  DEL_SHARE_OK:
 14559                                  	; MSDOS 6.0
 14560                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 14561                                  	;				;LB. if already dirty		  ;AN000;
 14562                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 14563                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 14564 0000331A 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 14565                                  ;yesdirty:
 14566 0000331E 8827                    	MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 14567 00003320 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 14568 00003322 1F                      	POP	DS
 14569 00003323 800E[0A05]10            	OR	byte [FOUNDDEL],FILEDELETED ; Deleted file
 14570                                  
 14571 00003328 83FB02                  	CMP	BX,2
 14572 0000332B 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 14573 0000332D 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 14574 00003331 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 14575                                  
 14576 00003333 E8B421                  	call	RELEASE 		; Free file data
 14577 00003336 724E                    	JC	short No_fileJ
 14578                                  
 14579                                  ; DOS 3.3  FastOpen
 14580                                  
 14581 00003338 E8BA00                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 14582                                  
 14583                                  ; DOS 3.3  FastOpen
 14584                                  
 14585                                  DELNXT:
 14586 0000333B C42E[2405]              	LES	BP,[THISDPB]		; Possible to get here without this set
 14587 0000333F E86A14                  	call	GETENTRY		; Registers need to be reset
 14588 00003342 7242                    	JC	short No_fileJ
 14589 00003344 E8AC13                  	call	NEXTENT
 14590 00003347 73AA                    	JNC	short DELFILE
 14591 00003349 C42E[2405]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 14592                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 14593 0000334D 268A4600                	MOV	AL,[ES:BP]
 14594 00003351 E8DA2B                  	call	FLUSHBUF
 14595 00003354 7230                    	JC	short No_fileJ
 14596                                  ;
 14597                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 14598                                  ;
 14599                                  ;   not found not deleted		file not found
 14600                                  ;   not found	  deleted		*** impossible ***
 14601                                  ;	found not deleted		access denied (read-only)
 14602                                  ;	found	  deleted		no error
 14603                                  ;
 14604 00003356 F606[0A05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 14605 0000335B 7422                    	JZ	short DelError		; no, figure out what's wrong.
 14606                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 14607                                  ; and to force the DOS to issue a media check.
 14608 0000335D F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 14609 00003362 7417                    	jz	short No_Set_Flag
 14610 00003364 50                      	PUSH	AX
 14611 00003365 06                      	PUSH	ES
 14612 00003366 57                      	PUSH	DI
 14613 00003367 C43E[3A05]              	LES	DI,[THISCDS]
 14614 0000336B 268A25                  	MOV	AH,[ES:DI]		; Get drive
 14615 0000336E 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 14616 00003371 8826[070A]              	mov	[VOLCHNG_FLAG],AH
 14617                                  	
 14618                                  	; MSDOS 6.0
 14619                                  	;XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 14620                                  	;call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 14621                                  	 
 14622 00003375 E84428                  	call	FATREAD_CDS		; force media check
 14623 00003378 5F                      	POP	DI
 14624 00003379 07                      	POP	ES
 14625 0000337A 58                      	POP	AX
 14626                                  No_Set_Flag:
 14627 0000337B E8EFEC                  	call	LcritDisk		; carry is clear
 14628 0000337E C3                      	retn
 14629                                  DelError:
 14630 0000337F F606[0A05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 14631 00003384 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 14632                                  No_fileJ:
 14633 00003386 E94BFF                  	JMP	No_file ; 10/08/2018 		; Nope
 14634                                  Del_access_errJ:
 14635 00003389 E95EFF                  	JMP	Del_access_err ; 10/08/2018
 14636                                  
 14637                                  ; 08/08/2018 - Retro DOS v3.0
 14638                                  
 14639                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 14640                                  ;---------------------------------------------------------------------------
 14641                                  ; Procedure Name : REN_DEL_Check
 14642                                  ;
 14643                                  ; Inputs:
 14644                                  ;	[THISDPB] set
 14645                                  ;	[CURBUF+2]:BX points to entry
 14646                                  ;	[CURBUF+2]:SI points to firclus field of entry
 14647                                  ;	[WFP_Start] points to name
 14648                                  ; Function:
 14649                                  ;	Check for Exclusive access on given file.
 14650                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 14651                                  ; Outputs:
 14652                                  ;	ES:BP = [THISDPB]
 14653                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 14654                                  ;		last element will be loaded from the directory entry.  This is
 14655                                  ;		so the name given to the sharer doesn't have any meta chars in
 14656                                  ;		it.
 14657                                  ;	Carry set if sharing violation, INT 24H generated
 14658                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 14659                                  ;		This is because input AX is preserved.
 14660                                  ;		Caller must set the error if needed.
 14661                                  ;	Carry clear
 14662                                  ;		OK
 14663                                  ; AX,DS,BX,SI,DI preserved
 14664                                  ;---------------------------------------------------------------------------
 14665                                  
 14666                                  REN_DEL_Check:
 14667                                  
 14668 0000338C 1E                      	PUSH	DS
 14669 0000338D 57                      	PUSH	DI
 14670 0000338E 50                      	PUSH	AX
 14671 0000338F 53                      	PUSH	BX
 14672 00003390 56                      	PUSH	SI		; Save CURBUF pointers
 14673                                  	
 14674 00003391 16                      	push	ss
 14675 00003392 07                      	pop	es
 14676                                  
 14677                                  ;hkn; context ES will assume ES to DOSDATA
 14678                                  ;hkn; ASSUME	ES:DOSGROUP
 14679                                  
 14680                                  ;hkn; SS override
 14681 00003393 368B3E[4A05]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 14682 00003398 89DE                    	MOV	SI,BX
 14683                                  
 14684                                  ;hkn; SS override
 14685 0000339A 368E1E[7605]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 14686 0000339F 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 14687 000033A1 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 14688 000033A4 E8BCEB                  	call	StrLen		; CX is length of ES:DI including NUL
 14689 000033A7 49                      	DEC	CX		; Don't include nul in count
 14690 000033A8 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 14691 000033AA E88838                  	call	SkipBack	; Back up one element
 14692 000033AD 47                      	INC	DI		; Point to start of last element
 14693                                  
 14694                                  ;hkn; SS override
 14695                                  	; MSDOS 6.0
 14696                                  	;MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 14697                                  	;
 14698 000033AE E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 14699 000033B1 5E                      	POP	SI		; Get back entry pointers
 14700 000033B2 5B                      	POP	BX
 14701 000033B3 53                      	PUSH	BX
 14702 000033B4 56                      	PUSH	SI		; Back on stack
 14703                                  	
 14704 000033B5 16                      	push	ss
 14705 000033B6 1F                      	pop	ds
 14706                                  
 14707                                  ;hkn; context DS will assume ES to DOSDATA
 14708                                  ;hkn; ASSUME	DS:DOSGROUP
 14709                                  
 14710                                  ;
 14711                                  ; Close the file if possible by us.
 14712                                  ;
 14713                                  ;if installed
 14714 000033B7 FF1E[9000]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 14715                                  ;else
 14716                                  ;	Call	ShCloseFile
 14717                                  ;endif
 14718 000033BB 8C1E[3805]              	MOV	[THISSFT+2],DS
 14719                                  
 14720                                  ;hkn; AUXSTACK is in DOSDATA
 14721 000033BF C706[3605][D106]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size
 14722                                  				; Scratch space
 14723 000033C5 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 14724 000033C7 E8F71D                  	call	DOOPEN		; Fill in SFT for share check
 14725 000033CA C43E[3605]              	LES	DI,[THISSFT]
 14726 000033CE 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH
 14727                                  				; requires exclusive access
 14728                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 14729 000033D4 26C7050100              	mov	word [ES:DI],1
 14730 000033D9 E87A3F                  	call	ShareEnter
 14731 000033DC 720D                    	jc	short CheckDone
 14732 000033DE C43E[3605]              	LES	DI,[THISSFT]
 14733                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 14734 000033E2 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 14735                                  	
 14736 000033E7 E8673F                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 14737 000033EA F8                      	CLC
 14738                                  CheckDone:
 14739 000033EB C42E[2405]              	LES	BP,[THISDPB]
 14740 000033EF 5E                      	POP	SI
 14741 000033F0 5B                      	POP	BX
 14742 000033F1 58                      	POP	AX
 14743 000033F2 5F                      	POP	DI
 14744 000033F3 1F                      	POP	DS
 14745 000033F4 C3                      	retn
 14746                                  
 14747                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 14748                                  ;---------------------------------------------------------------------------
 14749                                  ; Procedure Name : FastOpen_Delete
 14750                                  ; Inputs:
 14751                                  ;	None
 14752                                  ; Function:
 14753                                  ;	Call FastOpen to delete the dir info.
 14754                                  ; Outputs:
 14755                                  ;	None
 14756                                  ;---------------------------------------------------------------------------
 14757                                  
 14758                                  FastOpen_Delete:
 14759 000033F5 9C                      	PUSHF			; save flag
 14760 000033F6 56                      	PUSH	SI		; save registers
 14761 000033F7 53                      	PUSH	BX
 14762 000033F8 50                      	PUSH	AX
 14763                                  ;hkn; SS override
 14764 000033F9 8B36[4A05]              	MOV	SI,[WFP_START]	; ds:si points to path name
 14765 000033FD B003                    	MOV	AL,FONC_delete	; al = 3
 14766                                  fastinvoke:
 14767                                  ;hkn; FastTable is in DOSDATA
 14768 000033FF BB[450F]                	MOV	BX,FastTable+2
 14769 00003402 FF1F                    	CALL	far [BX]	; call fastopen
 14770 00003404 58                      	POP	AX		; restore registers
 14771 00003405 5B                      	POP	BX
 14772 00003406 5E                      	POP	SI
 14773 00003407 9D                      	POPF			; restore flag
 14774 00003408 C3                      	retn
 14775                                  
 14776                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 14777                                  ;---------------------------------------------------------------------------
 14778                                  ; Procedure Name : FastOpen_Update
 14779                                  ;
 14780                                  ; Inputs:
 14781                                  ;	DL     drive number (A=0,B=1,,,)
 14782                                  ;	CX     first cluster #
 14783                                  ;	AH     0 updates dir entry
 14784                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 14785                                  ;	ES:DI  directory entry
 14786                                  ; Function:
 14787                                  ;	Call FastOpen to update the dir info.
 14788                                  ; Outputs:
 14789                                  ;	None
 14790                                  ;---------------------------------------------------------------------------
 14791                                  
 14792                                  FastOpen_Update:
 14793 00003409 9C                      	PUSHF			; save flag
 14794 0000340A 56                      	PUSH	SI
 14795 0000340B 53                      	PUSH	BX		; save regs
 14796 0000340C 50                      	PUSH	AX
 14797 0000340D B004                    	MOV	AL,FONC_update	; al = 4
 14798 0000340F EBEE                    	JMP	short fastinvoke
 14799                                  
 14800                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 14801                                  ;---------------------------------------------------------------------------
 14802                                  ; PROCEDURE Name : FastOpen_Rename
 14803                                  ;
 14804                                  ; Inputs:
 14805                                  ;	 REN_WFP   = Path Name
 14806                                  ;	 NAME1	   = New Name
 14807                                  ; Function:
 14808                                  ;	Call FastOpen to rename the dir entry in the cache
 14809                                  ; Outputs:
 14810                                  ;	None
 14811                                  ;---------------------------------------------------------------------------
 14812                                  
 14813                                  FastOpen_Rename:
 14814                                  	; 08/08/2018 - Retro DOS v3.0
 14815                                  	; MSDOS 6.0
 14816                                  	;PUSHF			;AN001 save flag
 14817                                  	;PUSH	SI		;AN001 save registers
 14818                                  	;PUSH	DI		;AN001
 14819                                  	;PUSH	BX		;AN001
 14820                                  	;PUSH	AX		;AN001
 14821                                  	;
 14822                                  ;hkn; SS override
 14823                                  	;;MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 14824                                  	;
 14825                                  	; ? - 08/08/2018 - Retro DOS v3.0
 14826                                  	;push	ss
 14827                                  	;pop	ds
 14828                                  	;mov	si,[REN_WFP]
 14829                                  	;
 14830                                  ;hkn; NAME1 is in DOSDATA
 14831                                  	;MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 14832                                  	;MOV	AL,FONC_Rename	;;AN001  al = 6
 14833                                  	;
 14834                                  ;hkn; FastTable is in DOSDATA
 14835                                  	;MOV	BX,FastTable+2
 14836                                  	;CALL	far [BX]	;;AN001  call fastopen
 14837                                  	;
 14838                                  	;POP	AX		; restore registers  ;AN001
 14839                                  	;POP	BX				     ;AN001
 14840                                  	;POP	DI				     ;AN001
 14841                                  	;POP	SI				     ;AN001
 14842                                  	;POPF			; restore flag	     ;AN001
 14843                                  	;retn					     ;AN001
 14844                                  
 14845                                  	; MSDOS 6.0
 14846                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 14847                                  Fast_Dispatch:
 14848                                  ;hkn; FastTable is in DOSDATA
 14849                                  	;MOV	SI,FastTable+2	; index to the	     ;AN000;
 14850                                  ;hkn; use SS override
 14851                                  	;CALL	far [SS:SI]	; RMFD call fastopen
 14852                                  	;retn
 14853                                  
 14854                                  ;============================================================================
 14855                                  ; RENAME.ASM, MSDOS 6.0, 1991
 14856                                  ;============================================================================
 14857                                  ; 08/08/2018 - Retro DOS v3.0
 14858                                  
 14859                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 14860                                  ;	NAME	DOS_RENAME
 14861                                  
 14862                                  ;**	Low level routine for renaming files
 14863                                  ;
 14864                                  ;	DOS_RENAME
 14865                                  ;
 14866                                  ;	Modification history:
 14867                                  ;
 14868                                  ;	    Created: ARR 30 March 1983
 14869                                  
 14870                                  ;----------------------------------------------------------------------------
 14871                                  ;
 14872                                  ; Procedure Name : DOS_RENAME
 14873                                  ;
 14874                                  ; Inputs:
 14875                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 14876                                  ;		chars, NUL terminated)
 14877                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 14878                                  ;		( = -1 if current dir not involved, else
 14879                                  ;		 Points to first char after last "/" of current dir part)
 14880                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 14881                                  ;		chars, NUL terminated)
 14882                                  ;	[THISCDS] Points to CDS being used
 14883                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14884                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14885                                  ; Function:
 14886                                  ;	Rename the specified file(s)
 14887                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 14888                                  ; Outputs:
 14889                                  ;	CARRY CLEAR
 14890                                  ;	    OK
 14891                                  ;	CARRY SET
 14892                                  ;	    AX is error code
 14893                                  ;		error_file_not_found
 14894                                  ;			No match for source, or dest path invalid
 14895                                  ;		error_not_same_device
 14896                                  ;			Source and dest are on different devices
 14897                                  ;		error_access_denied
 14898                                  ;			Directory specified (not simple rename),
 14899                                  ;			Device name given, Destination exists.
 14900                                  ;			NOTE: In third case some renames may have
 14901                                  ;			 been done if metas.
 14902                                  ;		error_path_not_found
 14903                                  ;			Bad path (not in curr dir part if present)
 14904                                  ;			SOURCE ONLY
 14905                                  ;		error_bad_curr_dir
 14906                                  ;			Bad path in current directory part of path
 14907                                  ;			SOURCE ONLY
 14908                                  ;		error_sharing_violation
 14909                                  ;			Deny both access required, generates an INT 24.
 14910                                  ; DS preserved, others destroyed
 14911                                  ;
 14912                                  ;----------------------------------------------------------------------------
 14913                                  
 14914                                  DOS_RENAME:
 14915                                  
 14916                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 14917                                  ;hkn; at this point to DOSDATA.
 14918                                  
 14919 00003411 E8B3EB                  	call	TestNet
 14920 00003414 7306                    	JNC	short LOCAL_RENAME
 14921                                  
 14922                                  ;IF NOT Installed
 14923                                  ;	transfer NET_RENAME
 14924                                  ;ELSE
 14925                                  	;MOV	AX,(MultNET SHL 8) OR 17
 14926                                  	;INT	2FH
 14927                                  	;return
 14928                                  
 14929 00003416 B81111                  	mov     ax, 1111h
 14930 00003419 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 14931                                  			; SS = DS = DOS CS, 
 14932                                  			; SDA first filename pointer = offset of fully-qualified old name
 14933                                  			; SDA CDS pointer -> current directory
 14934                                  			; Return: CF set on error
 14935 0000341B C3                      	retn
 14936                                  ;ENDIF
 14937                                  
 14938                                  LOCAL_RENAME:
 14939 0000341C C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14940 00003421 8B36[4A05]              	MOV	SI,[WFP_START]
 14941 00003425 8B3E[4C05]              	MOV	DI,[REN_WFP]
 14942 00003429 8A04                    	MOV	AL,[SI]
 14943 0000342B 8A25                    	MOV	AH,[DI]
 14944 0000342D 0D2020                  	OR	AX,2020H		; Lower case
 14945 00003430 38E0                    	CMP	AL,AH
 14946 00003432 7405                    	JZ	short SAMEDRV
 14947 00003434 B81100                  	MOV	AX,error_not_same_device
 14948 00003437 F9                      	STC
 14949 00003438 C3                      	retn
 14950                                  
 14951                                  SAMEDRV:
 14952 00003439 FF36[DC02]              	PUSH	WORD [DMAADD+2]
 14953 0000343D FF36[DA02]              	PUSH	WORD [DMAADD]
 14954 00003441 8C1E[DC02]              	MOV	[DMAADD+2],DS
 14955                                  
 14956                                  ;hkn; RENAMEDMA is in DOSDATA
 14957 00003445 C706[DA02][8605]        	MOV	WORD [DMAADD],RENAMEDMA
 14958 0000344B C606[0B05]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 14959 00003450 E812EC                  	call	EcritDisk
 14960 00003453 E8B804                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 14961                                  					;    points to entry
 14962 00003456 7315                    	JNC	short Check_Dev
 14963 00003458 83F812                  	CMP	AX,error_no_more_files
 14964 0000345B 7503                    	JNZ	short GOTERR
 14965 0000345D B80200                  	MOV	AX,error_file_not_found
 14966                                  GOTERR:
 14967 00003460 F9                      	STC
 14968                                  RENAME_POP:
 14969 00003461 8F06[DA02]              	POP	WORD [DMAADD]
 14970 00003465 8F06[DC02]              	POP	WORD [DMAADD+2]
 14971 00003469 E801EC                  	call	LcritDisk
 14972 0000346C C3                      	retn
 14973                                  
 14974                                  Check_Dev:
 14975 0000346D B80500                  	MOV	AX,error_access_denied	; Assume error
 14976                                  	;
 14977                                  	; MSDOS 6.0
 14978                                  	;PUSH	DS			      ;PTM.			    ;AN000;
 14979                                  	;LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 14980                                  	;!?;ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 14981                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory  ;PTM.	    ;AN000;
 14982                                  	;JZ	short notdir		      ;PTM.			    ;AN000;
 14983                                  	;MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 14984                                  	;call	Check_Pathlen2		      ;PTM.   length < 67	    ;AN000;
 14985                                  ;notdir:
 14986                                  	;POP	DS			      ;PTM.			    ;AN000;
 14987                                  	;JA	short GOTERR		      ;PTM.			    ;AN000;
 14988                                  	;
 14989                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14990 00003470 803E[0B05]00            	CMP	byte [FOUND_DEV],0
 14991 00003475 75E9                    	JNZ	short GOTERR
 14992                                  ; At this point a source has been found. There is search continuation info (a
 14993                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 14994                                  ; directory entry found.
 14995                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 14996                                  ; throughout the RENAME since it is known at this point that the source and
 14997                                  ; destination are both on the same device.
 14998                                  ; [SATTRIB] is also set.
 14999 00003477 89DE                    	MOV	SI,BX
 15000 00003479 83C61A                  	ADD	SI,dir_entry.dir_first
 15001 0000347C E80DFF                  	call	REN_DEL_Check
 15002 0000347F 7305                    	JNC	short REN_OK1
 15003 00003481 B82000                  	MOV	AX,error_sharing_violation
 15004 00003484 EBDB                    	JMP	short RENAME_POP
 15005                                  
 15006                                  ;------------------------------------------------------------------------------
 15007                                  ; Check if the source is a file or directory. If file, delete the entry
 15008                                  ; from the Fastopen cache. If directory, rename it later
 15009                                  ;------------------------------------------------------------------------------
 15010                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 15011                                  	; MSDOS 6.0
 15012                                  	;PUSH	SI
 15013                                  	;LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 15014                                  	;!?;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		   ;AN000;
 15015                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.   ;AN000;
 15016                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			   ;AN000;
 15017                                  	;POP	SI			;BN00X
 15018                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 15019                                  	;
 15020                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 15021                                  	;POP	SI
 15022                                  	;
 15023                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 15024 00003486 E86CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 15025                                  
 15026                                  ;SWAP_SOURCE:
 15027                                  	; MSDOS 3.3
 15028                                  	;MOV	SI,[REN_WFP]
 15029                                  	;MOV	[WFP_START],SI
 15030                                  	; MSDOS 6.0
 15031 00003489 A1[4A05]                	MOV	AX,[WFP_START]		; Swap source and destination
 15032 0000348C 8B36[4C05]              	MOV	SI,[REN_WFP]		; Swap source and destination
 15033 00003490 8936[4A05]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 15034 00003494 A3[4C05]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 15035                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15036 00003497 C706[4E05]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 15037 0000349D C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 15038                                  					; A rename is like a CREATE_NEW as far
 15039                                  					; as the destination is concerned.
 15040 000034A3 E89213                  	call	GetPathNoSet
 15041                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 15042                                  ;   since no files match the destination name. If it fails for any other
 15043                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 15044                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 15045                                  ;   if the rename should fail because we haven't built an explicit name by
 15046                                  ;   substituting for the meta chars in it. In this case the destination file
 15047                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 15048                                  ;   in the directory entry part.
 15049 000034A6 7223                    	JC	short NODEST
 15050                                  	;; MSDOS 6.0
 15051                                  	;; JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 15052                                  	; !! MSDOS 3.3 !!
 15053 000034A8 7404                    	JZ	short BAD_ACC ; !!	; Dest string is a directory
 15054                                  	;
 15055 000034AA 08E4                    	OR	AH,AH			; Device?
 15056 000034AC 7930                    	JNS	short SAVEDEST		; No, continue
 15057                                  BAD_ACC:
 15058 000034AE B80500                  	MOV	AX,error_access_denied
 15059 000034B1 F9                      	STC
 15060                                  RENAME_CLEAN:
 15061 000034B2 9C                      	PUSHF				; Save carry state
 15062 000034B3 50                      	PUSH	AX			; and error code (if carry set)
 15063 000034B4 A0[1105]                	MOV	AL,[THISDRV]
 15064 000034B7 E8742A                  	call	FLUSHBUF
 15065 000034BA 58                      	POP	AX
 15066 000034BB 803E[F602]00            	CMP	byte [FAILERR],0
 15067 000034C0 7503                    	JNZ	short BAD_ERR		; User FAILed to I 24
 15068 000034C2 9D                      	POPF
 15069 000034C3 EB9C                    	JMP	short RENAME_POP
 15070                                  
 15071                                  BAD_ERR:
 15072 000034C5 58                      	POP	AX			; Saved flags
 15073 000034C6 B80300                  	MOV	AX,error_path_not_found
 15074 000034C9 EB95                    	JMP	short GOTERR
 15075                                  
 15076                                  NODEST:
 15077 000034CB 750B                    	JNZ	short BAD_PATH
 15078 000034CD 803E[F602]00            	CMP	byte [FAILERR],0
 15079 000034D2 7504                    	JNZ	short BAD_PATH	; Search for dest failed because user FAILed on
 15080                                  				;	I 24
 15081 000034D4 08C9                    	OR	CL,CL
 15082 000034D6 7506                    	JNZ	short SAVEDEST
 15083                                  BAD_PATH:
 15084 000034D8 B80300                  	MOV	AX,error_path_not_found
 15085 000034DB F9                      	STC
 15086 000034DC EB83                    	JMP	short RENAME_POP
 15087                                  
 15088                                  SAVEDEST:
 15089 000034DE 16                      	push	ss
 15090 000034DF 07                      	pop	es
 15091                                  
 15092                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 15093 000034E0 BF[F204]                	MOV	DI,NAME2
 15094 000034E3 BE[E604]                	MOV	SI,NAME1
 15095                                  
 15096 000034E6 B90B00                  	MOV	CX,11
 15097 000034E9 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 15098 000034EB A1[5805]                	MOV	AX,[DIRSTART]
 15099 000034EE A3[FF04]                	MOV	[DESTSTART],AX
 15100                                  BUILDDEST:
 15101 000034F1 16                      	push	ss
 15102 000034F2 07                      	pop	es			; needed due to JMP BUILDDEST below
 15103                                  
 15104                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 15105 000034F3 BB[9B05]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 15106 000034F6 BF[E604]                	MOV	DI,NAME1		; Real dest name goes here
 15107 000034F9 BE[F204]                	MOV	SI,NAME2		; Raw dest
 15108                                  
 15109 000034FC B90B00                  	MOV	CX,11
 15110                                  	
 15111                                  	; MSDOS 6.0
 15112                                  	;CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 15113                                  
 15114                                  	; MSDOS 3.3
 15115                                  
 15116                                  ; 08/08/2018 - Retro DOS v3.0
 15117                                  ; MSDOS 6.0 
 15118                                  ;---------------------------------------------------------------------------
 15119                                  ;Procedure: NEW_RENAME
 15120                                  ;
 15121                                  ;Input: DS:SI -> raw string with ?
 15122                                  ;	ES:DI -> destination string
 15123                                  ;	DS:BX -> source string
 15124                                  ;Function: replace ? chars of raw string with chars in source string and
 15125                                  ;	   put in destination string
 15126                                  ;Output: ES:DI-> new string
 15127                                  ;---------------------------------------------------------------------------
 15128                                  
 15129                                  NEW_RENAME:
 15130                                  NEWNAM:
 15131                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 15132 000034FF AC                      	LODSB
 15133 00003500 3C3F                    	CMP	AL,"?"
 15134 00003502 7502                    	JNZ	short NOCHG
 15135 00003504 8A07                    	MOV	AL,[BX] 		; Get replace char
 15136                                  NOCHG:
 15137 00003506 AA                      	STOSB
 15138 00003507 43                      	INC	BX			; Next replace char
 15139 00003508 E2F5                    	LOOP	NEWNAM
 15140                                  	; MSSOS 6.0
 15141                                  	;retn
 15142                                  
 15143                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15144 0000350A C606[0605]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 15145 0000350F C606[1805]FF            	MOV	byte [CREATING],0FFH
 15146 00003514 E8C615                  	call	DEVNAME 		; Check if we built a device name
 15147 00003517 7395                    	JNC	short BAD_ACC
 15148 00003519 8B1E[FF04]              	MOV	BX,[DESTSTART]
 15149 0000351D C42E[2405]              	LES	BP,[THISDPB]
 15150 00003521 E8B912                  	call	SETDIRSRCH		; Reset search to start of dir
 15151 00003524 7288                    	JC	short BAD_ACC 		; Screw up
 15152 00003526 E87911                  	call	FINDENTRY		; See if new name already exists
 15153 00003529 7383                    	JNC	short BAD_ACC 		; Error if found
 15154 0000352B 803E[F602]00            	CMP	byte [FAILERR],0
 15155 00003530 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 15156 00003532 A1[FF04]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 15157 00003535 3B06[9505]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 15158 00003539 7453                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 15159                                  
 15160 0000353B A0[A605]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 15161 0000353E A810                    	TEST	AL,attr_directory
 15162 00003540 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 15163                                  					; otherwise the . and .. entries get
 15164                                  					; wiped.
 15165 00003542 A2[0605]                	MOV	[ATTRIB],AL
 15166 00003545 8C1E[3805]              	MOV	[THISSFT+2],DS
 15167                                  
 15168                                  ;hkn; AUXSTACK is in DOSDATA
 15169 00003549 BE[D106]                	MOV	SI,AUXSTACK-SF_ENTRY.size
 15170 0000354C 8936[3605]              	MOV	[THISSFT],SI
 15171 00003550 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15172 00003555 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 15173 00003557 E8F91A                  	call	RENAME_MAKE		; This is in mknode
 15174 0000355A 7303                    	JNC	short GOT_DEST
 15175                                  BAD_ACCJ:
 15176 0000355C E94FFF                  	JMP	BAD_ACC
 15177                                  
 15178                                  GOT_DEST:
 15179 0000355F 53                      	push	bx
 15180 00003560 C43E[3605]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 15181 00003564 E8EA3D                  	call	ShareEnd		; we need to remove it.
 15182 00003567 5B                      	pop	bx
 15183                                  ; A zero length entry with the correct new name has now been made at
 15184                                  ;   [CURBUF+2]:BX.
 15185 00003568 C43E[7405]              	LES	DI,[CURBUF]
 15186                                  
 15187                                  	; MSDOS 6.0
 15188                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15189                                  	;				;LB. if already dirty		  ;AN000;
 15190                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15191                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15192                                  	
 15193 0000356C 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15194                                  ;yesdirty:
 15195 00003571 89DF                    	MOV	DI,BX
 15196 00003573 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 15197                                  
 15198                                  ;hkn; RENAMEDMA is in DOSDATA
 15199 00003576 BE[A605]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 15200 00003579 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr ; mov cx,21
 15201 0000357C F3A4                    	REP	MOVSB
 15202 0000357E E85100                  	CALL	GET_SOURCE
 15203 00003581 724B                    	JC	short RENAME_OVER
 15204 00003583 89DF                    	MOV	DI,BX
 15205 00003585 8E06[7605]              	MOV	ES,[CURBUF+2]
 15206 00003589 B0E5                    	MOV	AL,DIRFREE
 15207 0000358B AA                      	STOSB				; "free" the source
 15208 0000358C EB13                    	JMP	SHORT DIRTY_IT
 15209                                  
 15210                                  SIMPLE_RENAME:
 15211 0000358E E84100                  	CALL	GET_SOURCE		; Get the source back
 15212 00003591 723B                    	JC	short RENAME_OVER
 15213 00003593 89DF                    	MOV	DI,BX
 15214 00003595 8E06[7605]              	MOV	ES,[CURBUF+2]
 15215                                  
 15216                                  ;hkn; NAME1 is in DOSDATA
 15217 00003599 BE[E604]                	MOV	SI,NAME1		; New Name
 15218 0000359C B90B00                  	MOV	CX,11
 15219 0000359F F3A4                    	REP	MOVSB
 15220                                  DIRTY_IT:
 15221 000035A1 8B3E[7405]              	MOV	DI,[CURBUF]
 15222                                  
 15223                                  	; MSDOS 6.0
 15224                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15225                                  	;				;LB. if already dirty		  ;AN000;
 15226                                  	;JNZ	short Yesdirty2		;LB.  don't increment dirty count ;AN000;
 15227                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15228                                  	
 15229 000035A5 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15230                                  ;------------------------------------------------------------------------------
 15231                                  ; Check if the source is a directory of file. If directory rename it to the
 15232                                  ; the new name in the Fastopen cache buffer.  If file name it has been
 15233                                  ; previously deleted.
 15234                                  ;------------------------------------------------------------------------------
 15235                                  ;Yesdirty2:
 15236                                  	; MSDOS 6.0
 15237                                  	;PUSH	SI
 15238                                  	;LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 15239                                  	;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 15240                                  	;TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 15241                                  	;JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 15242                                  	;call	FASTOPEN_RENAME		;;BN00X rename dir entry in fastopen
 15243                                  	;POP	SI
 15244                                  	;JMP	SHORT NOT_DIRTY1
 15245                                  ;NOT_DIR2:				;;BN00X it is a file, delete the entry
 15246                                  	;POP	SI
 15247                                  ;NOT_DIRTY1:				;;BN00X
 15248                                  NEXT_SOURCE:
 15249                                  ;hkn; RENAMEDMA is in DOSDATA
 15250 000035AA BE[8705]                	MOV	SI,RENAMEDMA+1		;Name
 15251                                  ;
 15252                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 15253                                  ; to enter it before going to RENAME_Next.
 15254                                  ;
 15255 000035AD E8B5EA                  	call	EcritDisk
 15256 000035B0 C606[1805]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 15257                                  				  ;  to FF when we made the prev new file).
 15258 000035B5 E85704                  	call	RENAME_NEXT
 15259                                  ;
 15260                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 15261                                  ; we were before.
 15262                                  ;
 15263 000035B8 7214                    	JC	short RENAME_OVER
 15264 000035BA 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 15265 000035BD E8CCFD                  	call	REN_DEL_Check
 15266 000035C0 7306                    	JNC	short REN_OK2
 15267 000035C2 B82000                  	MOV	AX,error_sharing_violation
 15268 000035C5 E9EAFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15269                                  
 15270                                  ;------------------------------------------------------------------------------
 15271                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 15272                                  ; if directory, rename directory name in the Fastopen cache.
 15273                                  ;-----------------------------------------------------------------------------
 15274                                  REN_OK2:
 15275                                  	; MSDOS 6.0
 15276                                  	;MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 15277                                  	;TEST	AL,attr_directory	;;BN00X directory
 15278                                  	;JZ	short Ren_Directory	;;BN00X no - file, delete it
 15279                                  	
 15280                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15281 000035C8 E82AFE                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 15282 000035CB E923FF                  	JMP	BUILDDEST		;;BN00X
 15283                                  
 15284                                  	; MSDOS 6.0
 15285                                  ;Ren_Directory:
 15286                                  	;call	FASTOPEN_RENAME 	;;BN00X delete dir info in fastopen DOS 3.3
 15287                                  	;JMP	BUILDDEST
 15288                                  
 15289                                  RENAME_OVER:
 15290 000035CE F8                      	CLC
 15291 000035CF E9E0FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15292                                  
 15293                                  ;----------------------------------------------------------------------------
 15294                                  ; Procedure: GET_SOURCE
 15295                                  ;
 15296                                  ; Inputs:
 15297                                  ;	RENAMEDMA has source info
 15298                                  ; Function:
 15299                                  ;	Re-find the source
 15300                                  ; Output:
 15301                                  ;	[CURBUF] set
 15302                                  ;	[CURBUF+2]:BX points to entry
 15303                                  ;	Carry set if error (currently user FAILed to I 24)
 15304                                  ; DS preserved, others destroyed
 15305                                  ;----------------------------------------------------------------------------
 15306                                  
 15307                                  GET_SOURCE:
 15308 000035D2 8B1E[9505]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 15309 000035D6 C42E[2405]              	LES	BP,[THISDPB]
 15310 000035DA E80012                  	call	SETDIRSRCH
 15311 000035DD 7209                    	JC	short gs_ret_label	; retc
 15312 000035DF E8DA14                  	call	STARTSRCH
 15313 000035E2 A1[9305]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 15314 000035E5 E8C711                  	call	GETENT
 15315                                  
 15316                                  gs_ret_label:
 15317 000035E8 C3                      	retn
 15318                                  
 15319                                  ;============================================================================
 15320                                  ; FINFO.ASM, MSDOS 6.0, 1991
 15321                                  ;============================================================================
 15322                                  ; 08/08/2018 - Retro DOS v3.0
 15323                                  
 15324                                  ;**	Low level routines for returning file information and setting file
 15325                                  ;	attributes
 15326                                  ;
 15327                                  ;	GET_FILE_INFO
 15328                                  ;	SET_FILE_ATTRIBUTE
 15329                                  ;
 15330                                  ;	Modification history:
 15331                                  ;
 15332                                  ;	    Created: ARR 30 March 1983
 15333                                  ;
 15334                                  ;	M025: Return access_denied if attempting to set
 15335                                  ;	      attribute of root directory.
 15336                                  ;
 15337                                  
 15338                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 15339                                  
 15340                                  ;---------------------------------------------------------------------------
 15341                                  ; Procedure Name : GET_FILE_INFO
 15342                                  ;
 15343                                  ; Inputs:
 15344                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15345                                  ;		terminated)
 15346                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15347                                  ;		( = -1 if current dir not involved, else
 15348                                  ;		 Points to first char after last "/" of current dir part)
 15349                                  ;	[THISCDS] Points to CDS being used
 15350                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15351                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15352                                  ; Function:
 15353                                  ;	Get Information about a file
 15354                                  ; Returns:
 15355                                  ;	CARRY CLEAR
 15356                                  ;	    AX = Attribute of file
 15357                                  ;	    CX = Time stamp of file
 15358                                  ;	    DX = Date stamp of file
 15359                                  ;	    BX:DI = Size of file (32 bit)
 15360                                  ;	CARRY SET
 15361                                  ;	    AX is error code
 15362                                  ;		error_file_not_found
 15363                                  ;			Last element of path not found
 15364                                  ;		error_path_not_found
 15365                                  ;			Bad path (not in curr dir part if present)
 15366                                  ;		error_bad_curr_dir
 15367                                  ;			Bad path in current directory part of path
 15368                                  ; DS preserved, others destroyed
 15369                                  ;---------------------------------------------------------------------------
 15370                                  
 15371                                  GET_FILE_INFO:
 15372                                  
 15373                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 15374                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15375                                  
 15376 000035E9 E8DBE9                  	call	TestNet
 15377 000035EC 7306                    	JNC	short LOCAL_INFO
 15378                                  
 15379                                  ;IF NOT Installed
 15380                                  ;	transfer NET_GET_FILE_INFO
 15381                                  ;ELSE
 15382                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 15383                                  ;	INT	2FH
 15384                                  ;	return
 15385                                  
 15386 000035EE B80F11                  	mov     ax, 110Fh
 15387 000035F1 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 15388                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15389                                  			; SDA CDS pointer -> current directory
 15390                                  			; Return: CF set on error, AX = file attributes
 15391 000035F3 C3                      	retn
 15392                                  ;ENDIF
 15393                                  
 15394                                  LOCAL_INFO:
 15395 000035F4 E86EEA                  	call	EcritDisk
 15396 000035F7 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15397                                  	; MSDOS 6.0
 15398                                  	;call	Get_FAST_PATH
 15399                                  	; MSDOS 3.3
 15400 000035FC E83312                  	call	GETPATH
 15401                                  info_check:
 15402 000035FF 7313                    	JNC	short info_check_dev
 15403                                  NO_PATH:
 15404 00003601 750C                    	JNZ	short bad_path1
 15405 00003603 08C9                    	OR	CL,CL
 15406 00003605 7408                    	JZ	short bad_path1
 15407                                  info_no_file:
 15408 00003607 B80200                  	MOV	AX,error_file_not_found
 15409                                  BadRet:
 15410 0000360A F9                      	STC
 15411                                  JustRet:
 15412 0000360B E85FEA                  	call	LcritDisk
 15413 0000360E C3                      	retn
 15414                                  
 15415                                  bad_path1:
 15416 0000360F B80300                  	MOV	AX,error_path_not_found
 15417 00003612 EBF6                    	jmp	short BadRet
 15418                                  
 15419                                  info_check_dev:
 15420 00003614 08E4                    	OR	AH,AH
 15421 00003616 78EF                    	JS	short info_no_file	; device
 15422                                  
 15423                                  	; MSDOS 6.0
 15424                                  ;SR;
 15425                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 15426                                  ;for a root dir
 15427                                  ;
 15428 00003618 833E[7405]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 15429 0000361D 7507                    	jne	short not_root		;no, CurBuf ptr is valid
 15430                                  
 15431 0000361F 30E4                    	xor	ah,ah
 15432 00003621 B010                    	mov	al,attr_directory
 15433 00003623 F8                      	clc
 15434 00003624 EBE5                    	jmp	short JustRet
 15435                                  
 15436                                  not_root:
 15437                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15438 00003626 1E                      	PUSH	DS
 15439 00003627 8E1E[7605]              	MOV	DS,[CURBUF+2]
 15440 0000362B 89DE                    	MOV	SI,BX
 15441 0000362D 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 15442 0000362F 89DF                    	MOV	DI,BX
 15443 00003631 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 15444 00003634 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 15445 00003637 30E4                    	XOR	AH,AH
 15446 00003639 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 15447 0000363C A810                    	TEST	AL,attr_directory
 15448 0000363E 7506                    	JNZ	short NO_SIZE
 15449 00003640 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 15450 00003643 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 15451                                  NO_SIZE:
 15452 00003646 1F                      	POP	DS
 15453 00003647 F8                      	CLC
 15454 00003648 EBC1                    	jmp	short JustRet
 15455                                  
 15456                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 15457                                  ;-------------------------------------------------------------------------------
 15458                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 15459                                  ; Inputs:
 15460                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15461                                  ;		terminated)
 15462                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15463                                  ;		( = -1 if current dir not involved, else
 15464                                  ;		 Points to first char after last "/" of current dir part)
 15465                                  ;	[THISCDS] Points to CDS being used
 15466                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15467                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 15468                                  ;	AX is new attributes to give to file
 15469                                  ; Function:
 15470                                  ;	Set File Attributes
 15471                                  ; Returns:
 15472                                  ;	CARRY CLEAR
 15473                                  ;	    No error
 15474                                  ;	CARRY SET
 15475                                  ;	    AX is error code
 15476                                  ;		error_file_not_found
 15477                                  ;			Last element of path not found
 15478                                  ;		error_path_not_found
 15479                                  ;			Bad path (not in curr dir part if present)
 15480                                  ;		error_bad_curr_dir
 15481                                  ;			Bad path in current directory part of path
 15482                                  ;		error_access_denied
 15483                                  ;			Attempt to set an attribute which cannot be set
 15484                                  ;			(attr_directory, attr_volume_ID)
 15485                                  ;		error_sharing_violation
 15486                                  ;			Sharing mode of file did not allow the change
 15487                                  ;			(this request requires exclusive write/read access)
 15488                                  ;			(INT 24H generated)
 15489                                  ; DS preserved, others destroyed
 15490                                  ;----------------------------------------------------------------------------
 15491                                  
 15492                                  SET_FILE_ATTRIBUTE:
 15493                                  
 15494                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 15495                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15496                                  
 15497 0000364A A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 15498 0000364D 7414                    	JZ	short set_look
 15499                                  _BAD_ACC:
 15500 0000364F C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15501 00003654 C606[D502]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr
 15502 00003659 C606[D402]04            	MOV	byte [EXTERR_ACTION],errACT_Abort
 15503 0000365E B80500                  	MOV	AX,error_access_denied
 15504 00003661 F9                      	STC
 15505 00003662 C3                      	retn
 15506                                  
 15507                                  set_look:
 15508 00003663 E861E9                  	call	TestNet
 15509 00003666 7308                    	JNC	short LOCAL_SET
 15510                                  
 15511                                  ;IF NOT Installed
 15512                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 15513                                  ;ELSE
 15514 00003668 50                      	PUSH	AX
 15515                                  	
 15516                                  	;MOV	AX,(MultNET SHL 8) OR 14
 15517                                  	;INT	2FH
 15518                                  
 15519 00003669 B80E11                  	mov     ax, 110Eh
 15520 0000366C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 15521                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15522                                  			; SDA CDS pointer -> current directory
 15523                                  			; STACK: WORD new file attributes
 15524                                  			; Return: CF set on error
 15525                                  
 15526 0000366E 5B                      	POP	BX			; clean stack
 15527 0000366F C3                      	retn
 15528                                  ;ENDIF
 15529                                  
 15530                                  LOCAL_SET:
 15531 00003670 E8F2E9                  	call	EcritDisk
 15532 00003673 50                      	PUSH	AX			; Save new attributes
 15533 00003674 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15534 00003679 E8B611                  	call	GETPATH 		; get path through fastopen if there	 ;AC000;
 15535 0000367C 7303                    	JNC	short set_check_device
 15536 0000367E 5B                      	POP	BX			; Clean stack (don't zap AX)
 15537 0000367F EB80                    	JMP	short NO_PATH
 15538                                  
 15539                                  set_check_device:
 15540 00003681 08E4                    	OR	AH,AH
 15541 00003683 7906                    	JNS	short set_check_share
 15542 00003685 58                      	POP	AX
 15543 00003686 E8E4E9                  	call	LcritDisk
 15544 00003689 EBC4                    	JMP	short _BAD_ACC 		; device
 15545                                  
 15546                                  set_check_share:
 15547 0000368B 58                      	POP	AX			; Get new attributes
 15548                                  
 15549                                  	; MSDOS 6.0
 15550 0000368C 833E[7405]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 15551 00003691 740A                    	je	short cannot_set_root	; M025: Y: return error
 15552                                  
 15553                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15554 00003693 E8F6FC                  	call	REN_DEL_Check
 15555 00003696 730B                    	JNC	short set_do
 15556 00003698 B82000                  	MOV	AX,error_sharing_violation
 15557 0000369B EB30                    	jmp	short OK_BYE
 15558                                  
 15559                                  	; MSDOS 6.0
 15560                                  cannot_set_root:			; M025:
 15561 0000369D B80500                  	mov	ax, error_access_denied	; M025: return error is attempting
 15562 000036A0 F9                      	stc				; M025: to set attr. of root
 15563 000036A1 EB2A                    	jmp	short OK_BYE		; M025:
 15564                                  
 15565                                  set_do:
 15566                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15567 000036A3 C43E[7405]              	LES	DI,[CURBUF]
 15568 000036A7 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 15569 000036AC 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 15570                                  
 15571                                  	; MSDOS 6.0
 15572                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15573                                  	;				;LB. if already dirty		  ;AN000;
 15574                                  	;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 15575                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15576                                  	
 15577 000036B0 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15578                                  ;yesdirty3:
 15579 000036B5 A0[1105]                	MOV	AL,[THISDRV]
 15580                                  ;;;; 10/1/86 F.C update fastopen cache
 15581 000036B8 52                      	PUSH	DX
 15582 000036B9 57                      	PUSH	DI
 15583 000036BA B400                    	MOV	AH,0		  ; dir entry update
 15584 000036BC 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 15585 000036BE 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 15586 000036C0 E846FD                  	call	FastOpen_Update
 15587 000036C3 5F                      	POP	DI
 15588 000036C4 5A                      	POP	DX
 15589                                  ;;;; 9/11/86 F.C update fastopen cache
 15590 000036C5 E86628                  	call	FLUSHBUF
 15591 000036C8 7303                    	JNC	short OK_BYE
 15592 000036CA B80200                  	MOV	AX,error_file_not_found
 15593                                  OK_BYE:
 15594 000036CD E89DE9                  	call	LcritDisk
 15595 000036D0 C3                      	retn
 15596                                  
 15597                                  	; MSDOS 6.0
 15598                                  ;GET_FAST_PATH:
 15599                                  ;hkn; use SS override for FastOpenFlg
 15600                                  	;OR	byte [FastOpenFlg],FastOpen_Set
 15601                                  	;				;FO. trigger fastopen	;AN000;
 15602                                  	;call	GETPATH
 15603                                  	;PUSHF			 	;FO.			;AN000;
 15604                                  	;AND	byte [FastOpenFlg],Fast_yes 
 15605                                  	;				;FO. clear all fastopen flags ;AN000;
 15606                                  	;POPF				;FO.			;AN000;
 15607                                  	;retn
 15608                                  
 15609                                  ;============================================================================
 15610                                  ; DUP.ASM, MSDOS 6.0, 1991
 15611                                  ;============================================================================
 15612                                  ; 08/08/2018 - Retro DOS v3.0
 15613                                  
 15614                                  ;**	Low level DUP routine for use by EXEC when creating a new process. Exports
 15615                                  ;	  the DUP to the server machine and increments the SFT ref count
 15616                                  ;
 15617                                  ;	DOS_DUP
 15618                                  ;
 15619                                  ;	Modification history:
 15620                                  ;
 15621                                  ;	  Created: ARR 30 March 1983
 15622                                  
 15623                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 15624                                  ;---------------------------------------------------------------------------
 15625                                  ; Procedure Name : DOS_DUP
 15626                                  ;
 15627                                  ; Inputs:
 15628                                  ;	[THISSFT] set to the SFT for the file being DUPed
 15629                                  ;		(a non net SFT is OK, in this case the ref
 15630                                  ;		 count is simply incremented)
 15631                                  ; Function:
 15632                                  ;	Signal to the devices that a logical open is occurring
 15633                                  ; Returns:
 15634                                  ;	ES:DI point to SFT
 15635                                  ;    Carry clear
 15636                                  ;	SFT ref_count is incremented
 15637                                  ; Registers modified: None.
 15638                                  ; NOTE:
 15639                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 15640                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 15641                                  ;	that time.
 15642                                  ;---------------------------------------------------------------------------
 15643                                  
 15644                                  DOS_DUP:
 15645 000036D1 2EC43E[3605]            	LES	DI,[CS:THISSFT]
 15646                                  
 15647                                  	;Entry	Dos_Dup_Direct
 15648                                  DOS_Dup_Direct:
 15649 000036D6 E803E9                  	call	IsSFTNet
 15650 000036D9 7503                    	JNZ	short DO_INC
 15651 000036DB E89817                  	call	DEV_OPEN_SFT
 15652                                  DO_INC:
 15653                                  
 15654                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 15655 000036DE 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 15656                                  					;   we're in big trouble anyway)
 15657 000036E1 C3                      	retn
 15658                                  
 15659                                  ;============================================================================
 15660                                  ; CREATE.ASM, MSDOS 6.0, 1991
 15661                                  ;============================================================================
 15662                                  ; 08/08/2018 - Retro DOS v3.0
 15663                                  
 15664                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 15665                                  ;NAME	DOS_CREATE
 15666                                  
 15667                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 15668                                  ;
 15669                                  ;	DOS_CREATE
 15670                                  ;	DOS_CREATE_NEW
 15671                                  ;	SET_MKND_ERR
 15672                                  ;	SET_Media_ID
 15673                                  ;	SET_EXT_Mode
 15674                                  ;
 15675                                  ;	Revision history:
 15676                                  ;
 15677                                  ;	    A000 version 4.00	  Jan. 1988
 15678                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 15679                                  
 15680                                  ;Installed = TRUE
 15681                                  
 15682                                  ;	i_need	THISSFT,DWORD
 15683                                  ;	i_need	THISCDS,DWORD
 15684                                  ;	I_need	EXTERR,WORD
 15685                                  ;	I_Need	ExtErr_locus,BYTE
 15686                                  ;	I_need	JShare,DWORD
 15687                                  ;	I_need	VOLCHNG_FLAG,BYTE
 15688                                  ;	I_need	SATTRIB,BYTE
 15689                                  ;	I_need	CALLVIDM,DWORD
 15690                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 15691                                  ;	I_need	NAME1,BYTE			  ;AN000;
 15692                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 15693                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 15694                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 15695                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 15696                                  
 15697                                  ;***	DOS_CREATE - Create a File
 15698                                  ;----------------------------------------------------------------------------
 15699                                  ;	DOS_Create is called to create the specified file, truncating
 15700                                  ;	the old one if it exists.
 15701                                  ;
 15702                                  ;
 15703                                  ;	ENTRY	AX is Attribute to create
 15704                                  ;		(ds) = DOSDATA
 15705                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15706                                  ;			terminated)
 15707                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 15708                                  ;			( = -1 if current dir not involved, else
 15709                                  ;			 Points to first char after last "/" of current dir part)
 15710                                  ;		[THISCDS] Points to CDS being used
 15711                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 15712                                  ;		[THISSFT] Points to SFT to fill in if file created
 15713                                  ;			(sf_mode field set so that FCB may be detected)
 15714                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 15715                                  ;
 15716                                  ;	EXIT	sf_ref_count is NOT altered
 15717                                  ;		CARRY CLEAR
 15718                                  ;		    THISSFT filled in.
 15719                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 15720                                  ;		CARRY SET
 15721                                  ;		    AX is error code
 15722                                  ;			error_path_not_found
 15723                                  ;				Bad path (not in curr dir part if present)
 15724                                  ;			error_bad_curr_dir
 15725                                  ;				Bad path in current directory part of path
 15726                                  ;			error_access_denied
 15727                                  ;				Attempt to re-create read only file , or
 15728                                  ;				create a second volume id or create a dir
 15729                                  ;			error_sharing_violation
 15730                                  ;				The sharing mode was correct but not allowed
 15731                                  ;				generates an INT 24
 15732                                  ;	USES	all but DS
 15733                                  ;----------------------------------------------------------------------------
 15734                                  
 15735                                  DOS_CREATE:
 15736                                  
 15737                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 15738                                  ;hkn; this point.
 15739                                  
 15740 000036E2 30E4                    	XOR	AH,AH		; Truncate is OK
 15741                                  
 15742                                  ;	Enter here from Dos_Create_New
 15743                                  ;
 15744                                  ;	(ah) = 0 iff truncate OK
 15745                                  
 15746                                  Create_inter:
 15747 000036E4 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 15748                                  				; Mask out any meaningless bits
 15749 000036E6 750C                    	JNZ	short AttErr
 15750 000036E8 A808                    	TEST	AL,attr_volume_id
 15751 000036EA 7402                    	JZ	short NoReset
 15752                                  	;
 15753                                  	; MSDOS 6.0
 15754                                  	;OR	[DOS34_FLAG],DBCS_VOLID      ;AN000;FOR dbcs volid
 15755                                  	;
 15756 000036EC B008                    	MOV	AL,attr_volume_id
 15757                                  NoReset:
 15758 000036EE 0C20                    	OR	AL,attr_archive ; File changed
 15759 000036F0 A850                    	TEST	AL,attr_directory+attr_device
 15760 000036F2 740A                    	JZ	short ATT_OK
 15761                                  AttErr:
 15762 000036F4 B80500                  	MOV	AX,5		; Attribute problem
 15763 000036F7 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15764 000036FC EB3D                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 15765                                  				   ;	attr_device to be set.
 15766                                  ATT_OK:
 15767 000036FE C43E[3605]              	LES	DI,[THISSFT]
 15768 00003702 06                      	PUSH	ES
 15769 00003703 C436[3A05]              	LES	SI,[THISCDS]
 15770 00003707 83FEFF                  	CMP	SI,-1
 15771 0000370A 7509                    	JNE	short TEST_RE_NET
 15772                                  
 15773                                  ;	No CDS, it must be redirected.
 15774                                  
 15775 0000370C 07                      	POP	ES
 15776                                  
 15777                                  	; MSDOS 6.0
 15778                                  ;Extended open hooks
 15779                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15780                                  	;JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 15781                                  ;IFS_extopen:				    ;AN000;EO.
 15782                                  	;PUSH	AX			    ;AN000;EO. pass create attr
 15783                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 15784                                  	;mov	ax,112Eh
 15785                                  	;INT	2FH			    ;AN000;EO.
 15786                                  	;POP	BX			    ;AN000;EO. trash bx
 15787                                  	;MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 15788                                  	;retn				    ;AN000;EO.
 15789                                  ;NOEXTOP:				    ;AN000;
 15790                                  ;Extended open hooks
 15791                                  
 15792                                  ;IF NOT Installed
 15793                                  ;	transfer NET_SEQ_CREATE
 15794                                  ;ELSE
 15795 0000370D 50                      	PUSH	AX
 15796                                  
 15797                                  	;MOV	AX,(MultNET SHL 8) OR 24
 15798                                  	;INT	2FH
 15799                                  
 15800 0000370E B81811                  	mov     ax,1118h
 15801 00003711 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 15802                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15803                                  			; SDA first filename pointer -> fully-qualified name of file
 15804                                  			; STACK: WORD file creation mode???
 15805                                  
 15806 00003713 5B                      	POP	BX			; BX is trashed anyway
 15807 00003714 C3                      	retn
 15808                                  ;ENDIF
 15809                                  
 15810                                  ;	We have a CDS. See if it's network
 15811                                  
 15812                                  TEST_RE_NET:
 15813 00003715 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 15814 0000371B 07                      	POP	ES
 15815 0000371C 7408                    	JZ	short LOCAL_CREATE
 15816                                  
 15817                                  	; MSDOS 6.0
 15818                                  	;CALL	Set_EXT_mode		    ;AN000;EO.
 15819                                  	;JC	SHORT dochk		    ;AN000;EO.
 15820                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 15821                                  
 15822                                  ;Extended open hooks
 15823                                  ;dochk:
 15824                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15825                                  	;JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 15826                                  ;Extended open hooks
 15827                                  
 15828                                  ;IF NOT Installed
 15829                                  ;	transfer NET_CREATE
 15830                                  ;ELSE
 15831 0000371E 50                      	PUSH	AX
 15832                                  	
 15833                                  	;MOV	AX,(MultNET SHL 8) OR 23
 15834                                  	;INT	2FH
 15835                                  	
 15836 0000371F B81711                  	mov     ax, 1117h
 15837 00003722 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 15838                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15839                                  			; SDA first filename pointer -> fully-qualified name of file to open
 15840                                  			; SDA CDS pointer -> current directory
 15841                                  			; Return: CF set on error
 15842                                  
 15843 00003724 5B                      	POP	BX			; BX is trashed anyway
 15844                                  ;nomore:
 15845 00003725 C3                      	retn
 15846                                  ;ENDIF
 15847                                  
 15848                                  
 15849                                  ;**	It's a local create.  We have a local CDS for it.
 15850                                  
 15851                                  LOCAL_CREATE:
 15852                                  	; MSDOS 6.0
 15853                                  	;CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 15854                                  	;JC	short setdone	;AN000;EO.
 15855                                  	
 15856                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15857 00003726 26834D0202              	OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15858                                  ;setdone:
 15859 0000372B E837E9                  	call	EcritDisk
 15860 0000372E E8FC18                  	call	MakeNode
 15861 00003731 730E                    	JNC	short Create_ok
 15862 00003733 C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 15863 00003738 E832E9                  	call	LcritDisk
 15864                                  
 15865                                  	;entry	SET_MKND_ERR
 15866                                  SET_MKND_ERR:
 15867                                  
 15868                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 15869                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 15870                                  
 15871                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 15872 0000373B BB[FD12]                	MOV     BX,CRTERRTAB
 15873 0000373E D7                      	XLAT
 15874                                  	;XLAT	byte [CS:BX]
 15875                                  CreatBadRet:
 15876 0000373F F9                      	STC
 15877 00003740 C3                      	retn
 15878                                  
 15879                                  ; We have just created a new file. This results in the truncation of old
 15880                                  ; files. We must inform the sharer to slash all the open SFT's for this
 15881                                  ; file to the current size.
 15882                                  
 15883                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 15884                                  ; drive number to force a Build BPB after Media Check.
 15885                                  
 15886                                  ;;; FASTOPEN 8/29/86
 15887                                  Create_ok:
 15888 00003741 E8B1FC                  	call	FastOpen_Delete
 15889                                  ;;; FASTOPEN 8/29/86
 15890 00003744 A0[0805]                	mov	al,[SATTRIB]
 15891 00003747 A808                    	test	al,attr_volume_id
 15892 00003749 7417                    	jz	short NoVolLabel
 15893 0000374B C43E[3A05]              	LES	DI,[THISCDS]
 15894                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 15895 0000374F 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 15896 00003752 80EC41                  	sub	ah,'A'                  ; convert to drive letter
 15897 00003755 8826[070A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 15898                                  	
 15899                                  	; MSDOS 6.0
 15900                                  	;MOV	BH,1			;AN000;>32mb set volume id to boot record
 15901                                  	;CALL	Set_Media_ID		;AN000;>32mb
 15902                                  	
 15903 00003759 E809E9                  	call	EcritDisk
 15904 0000375C E85D24                  	call	FATREAD_CDS		; force a media check
 15905 0000375F E80BE9                  	call	LcritDisk
 15906                                  
 15907                                  NoVolLabel:
 15908 00003762 B80200                  	MOV	ax,2
 15909 00003765 C43E[3605]              	LES	DI,[THISSFT]
 15910                                  ;if installed
 15911                                  	;call	JShare + 14 * 4
 15912 00003769 FF1E[9400]              	call	far [JShare+(14*4)] ; 14 = ShSU
 15913                                  ;else
 15914                                  ;	Call	ShSU
 15915                                  ;endif
 15916 0000376D E8FDE8                  	call	LcritDisk
 15917 00003770 E9D800                  	jmp	SET_SFT_MODE
 15918                                  
 15919                                  ;---------------------------------------------------------------------------
 15920                                  ; Procedure Name : Dos_Create_New
 15921                                  ;
 15922                                  ; Inputs:
 15923                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15924                                  ;		terminated)
 15925                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15926                                  ;		( = -1 if current dir not involved, else
 15927                                  ;		 Points to first char after last "/" of current dir part)
 15928                                  ;	[THISCDS] Points to CDS being used
 15929                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15930                                  ;	[THISSFT] Points to SFT to fill in if file created
 15931                                  ;		(sf_mode field set so that FCB may be detected)
 15932                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15933                                  ;	AX is Attribute to create
 15934                                  ; Function:
 15935                                  ;	Try to create the specified file truncating an old one that exists
 15936                                  ; Outputs:
 15937                                  ;	sf_ref_count is NOT altered
 15938                                  ;	CARRY CLEAR
 15939                                  ;	    THISSFT filled in.
 15940                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 15941                                  ;	CARRY SET
 15942                                  ;	    AX is error code
 15943                                  ;		error_path_not_found
 15944                                  ;			Bad path (not in curr dir part if present)
 15945                                  ;		error_bad_curr_dir
 15946                                  ;			Bad path in current directory part of path
 15947                                  ;		error_access_denied
 15948                                  ;			Create a second volume id or create a dir
 15949                                  ;		error_file_exists
 15950                                  ;			Already a file by this name
 15951                                  ; DS preserved, others destroyed
 15952                                  ;---------------------------------------------------------------------------
 15953                                  
 15954                                  DOS_Create_New:
 15955 00003773 B401                    	MOV	AH,1		; Truncate is NOT OK
 15956 00003775 E96CFF                  	JMP	Create_inter
 15957                                  
 15958                                  ; MSDOS 6.0
 15959                                  ;---------------------------------------------------------------------------
 15960                                  ; Procedure Name : Set_Media_ID
 15961                                  ;
 15962                                  ; Inputs:
 15963                                  ;	NAME1= Volume ID
 15964                                  ;	BH= 0, delete volume id
 15965                                  ;	    1, set new volume id
 15966                                  ;	DS= DOSGROUP
 15967                                  ; Function:
 15968                                  ;	Set Volume ID to DOS 4.00 Boot record.
 15969                                  ; Outputs:
 15970                                  ;	CARRY CLEAR
 15971                                  ;	    volume id set
 15972                                  ;	CARRY SET
 15973                                  ;	    AX is error code
 15974                                  ;---------------------------------------------------------------------------
 15975                                  ;
 15976                                  ;procedure   Set_Media_ID,NEAR
 15977                                  ;	DOSAssume   <DS>,"SetMedID"
 15978                                  ;
 15979                                  ;	PUSH	AX		;AN000;;>32mb
 15980                                  ;	PUSH	ES		;AN000;;>32mb
 15981                                  ;	PUSH	DI		;AN000;;>32mb
 15982                                  ;
 15983                                  ;	INC	AH		;AN000;;>32mb  bl=drive #
 15984                                  ;	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 15985                                  ;	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 15986                                  ;	MOV	CX,0866H	;AN001;;>32mb  get media id
 15987                                  ;
 15988                                  ;hkn; PACKET_TEMP is in DOSDATA
 15989                                  ;	MOV	DX,OFFSET DOSDATA:PACKET_TEMP	;AN000;>32mb
 15990                                  ;
 15991                                  ;	PUSH	BX		;AN000;;>32mb
 15992                                  ;	PUSH	DX		;AN000;;>32mb
 15993                                  ;	XOR	BH,BH		;AN000;;>32mb
 15994                                  ;
 15995                                  ;	invoke	$IOCTL		;AN000;;>32mb
 15996                                  ;	POP	DX		;AN000;;>32mb
 15997                                  ;	POP	BX		;AN000;;>32mb
 15998                                  ;	JC	geterr		;AN000;;>32mb
 15999                                  ;
 16000                                  ;	OR	BH,BH		;AN000;;>32mb delete volume id
 16001                                  ;	JZ	NoName		;AN000;>32mb yes
 16002                                  ;
 16003                                  ;hkn; NAME1 is in DOSDATA
 16004                                  ;	MOV	SI,OFFSET DOSDATA:NAME1   ;AN000;>32mb
 16005                                  ;
 16006                                  ;	JMP	SHORT doset	;AN000;>32mb yes
 16007                                  ;Noname: 			;AN000;
 16008                                  ;
 16009                                  ;hkn; NO_NAME_ID is in DOSDATA
 16010                                  ;	MOV	SI,OFFSET DOSDATA:NO_NAME_ID  ;AN000;>32mb
 16011                                  ;
 16012                                  ;doset:					       ;AN000;
 16013                                  ;	MOV	DI,DX		;AN000;;>32mb
 16014                                  ;	ADD	DI,MEDIA_LABEL	;AN000;;>32mb
 16015                                  ;
 16016                                  ;hkn; ES & DS must point to SS
 16017                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 16018                                  ;	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 16019                                  ;
 16020                                  ;	POP	DS		;AN000;;>32mb
 16021                                  ;
 16022                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 16023                                  ;	PUSH	SS		;AN000;;>32mb
 16024                                  ;
 16025                                  ;	POP	ES		;AN000;;>32mb
 16026                                  ;	MOV	CX,11		;AN000;;>32mb
 16027                                  ;	REP	MOVSB		;AN000;;>32mb
 16028                                  ;	MOV	CX,0846H	;AN001;;>32mb
 16029                                  ;	MOV	AL,0DH		;AN000;;>32mb
 16030                                  ;	XOR	BH,BH		;AN000;;>32mb
 16031                                  ;	invoke	$IOCTL		;AN000;;>32mb  set volume id
 16032                                  ;geterr: 			;AN000;
 16033                                  ;
 16034                                  ;hkn;	PUSH	CS		;AN000;>32mb
 16035                                  ;	PUSH	SS		;AN000;>32mb
 16036                                  ;
 16037                                  ;	POP	DS		;AN000;>32mb   ds= dosgroup
 16038                                  ;
 16039                                  ;	POP	DI		;AN000;;>32mb
 16040                                  ;	POP	ES		;AN000;;>32mb
 16041                                  ;	POP	AX		;AN000;;>32mb
 16042                                  ;	return			;AN000;>32mb
 16043                                  ;
 16044                                  ;EndProc Set_Media_ID		;AN000;
 16045                                  
 16046                                  ; MSDOS 6.0
 16047                                  ;---------------------------------------------------------------------------
 16048                                  ; Procedure Name : Set_EXT_mode
 16049                                  ;
 16050                                  ; Inputs:
 16051                                  ;	[EXTOPEN_ON]= flag for extended open
 16052                                  ;	SAVE_BX= mode specified in Extended Open
 16053                                  ; Function:
 16054                                  ;	Set mode in ThisSFT
 16055                                  ; Outputs:
 16056                                  ;	carry set,mode is set if from Extended Open
 16057                                  ;	carry clear, mode not set yet
 16058                                  ;---------------------------------------------------------------------------
 16059                                  ;
 16060                                  ;procedure   Set_EXT_mode,NEAR
 16061                                  ;
 16062                                  ;hkn; SS override
 16063                                  ;	TEST	[EXTOPEN_ON],ext_open_on    ;AN000;EO. from extended open
 16064                                  ;	JZ	NOTEX			    ;AN000;EO. no, do normal
 16065                                  ;	PUSH	AX			    ;AN000;EO.
 16066                                  ;
 16067                                  ;hkn; SS override
 16068                                  ;	MOV	AX,[SAVE_BX]		    ;AN000;EO.
 16069                                  ;	OR	ES:[DI.sf_mode],AX	    ;AN000;EO.
 16070                                  ;	POP	AX			    ;AN000;EO.
 16071                                  ;	STC				    ;AN000;EO.
 16072                                  ;NOTEX:					    ;AN000;
 16073                                  ;	return				    ;AN000;EO.
 16074                                  ;
 16075                                  ;EndProc Set_EXT_mode			    ;AN000;
 16076                                  
 16077                                  ;============================================================================
 16078                                  ; OPEN.ASM, MSDOS 6.0, 1991
 16079                                  ;============================================================================
 16080                                  ; 08/08/2018 - Retro DOS v3.0
 16081                                  
 16082                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 16083                                  ;	NAME	DOS_OPEN
 16084                                  
 16085                                  ;**	OPEN.ASM - File Open
 16086                                  ;----------------------------------------------------------------------------
 16087                                  ;	Low level routines for openning a file from a file spec.
 16088                                  ;	Also misc routines for sharing errors
 16089                                  ;
 16090                                  ;	DOS_Open
 16091                                  ;	Check_Access_AX
 16092                                  ;	SHARE_ERROR
 16093                                  ;	SET_SFT_MODE
 16094                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 16095                                  ;
 16096                                  ;	Revision history:
 16097                                  ;
 16098                                  ;	    Created: ARR 30 March 1983
 16099                                  ;	    A000	version 4.00   Jan. 1988
 16100                                  ;
 16101                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 16102                                  ; 	       remote extended opens and not save_cx.
 16103                                  ;
 16104                                  ;	M035 - if open made from exec then we must set the appropriate bits
 16105                                  ;	       on the stack before calling off to the redir.
 16106                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 16107                                  ;	       to handle open from exec. In this case set the appropriate bit
 16108                                  ;	       else do not.
 16109                                  ;----------------------------------------------------------------------------	
 16110                                  
 16111                                  ;Installed = TRUE
 16112                                  
 16113                                  ;	i_need	NoSetDir,BYTE
 16114                                  ;	i_need	THISSFT,DWORD
 16115                                  ;	i_need	THISCDS,DWORD
 16116                                  ;	i_need	CURBUF,DWORD
 16117                                  ;	i_need	CurrentPDB,WORD
 16118                                  ;	i_need	CURR_DIR_END,WORD
 16119                                  ;	I_need	RetryCount,WORD
 16120                                  ;	I_need	Open_Access,BYTE
 16121                                  ;	I_need	fSharing,BYTE
 16122                                  ;	i_need	JShare,DWORD
 16123                                  ;	I_need	FastOpenFlg,byte
 16124                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 16125                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 16126                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 16127                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 16128                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 16129                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 16130                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 16131                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 16132                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 16133                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 16134                                  ;	I_need	SAVE_BX,WORD			  ;M034
 16135                                  ;
 16136                                  ;	I_need	DOS_FLAG,BYTE
 16137                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 16138                                  
 16139                                  ;Break	<DOS_Open - internal file access>
 16140                                  ;---------------------------------------------------------------------------
 16141                                  ; Procedure Name : DOS_Open
 16142                                  ;
 16143                                  ; Inputs:
 16144                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16145                                  ;		terminated)
 16146                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16147                                  ;		( = -1 if current dir not involved, else
 16148                                  ;		 Points to first char after last "/" of current dir part)
 16149                                  ;	[THISCDS] Points to CDS being used
 16150                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16151                                  ;	[THISSFT] Points to SFT to fill in if file found
 16152                                  ;		(sf_mode field set so that FCB may be detected)
 16153                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16154                                  ;	AX is Access and Sharing mode
 16155                                  ;	  High NIBBLE of AL (Sharing Mode)
 16156                                  ;		sharing_compat	   file is opened in compatibility mode
 16157                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16158                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16159                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16160                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16161                                  ;	  Low NIBBLE of AL (Access Mode)
 16162                                  ;		open_for_read	file is opened for reading
 16163                                  ;		open_for_write	file is opened for writing
 16164                                  ;		open_for_both	file is opened for both reading and writing.
 16165                                  ;
 16166                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 16167                                  ;		(not checked)
 16168                                  ; Function:
 16169                                  ;	Try to open the specified file
 16170                                  ; Outputs:
 16171                                  ;	sf_ref_count is NOT altered
 16172                                  ;	CARRY CLEAR
 16173                                  ;	    THISSFT filled in.
 16174                                  ;	CARRY SET
 16175                                  ;	    AX is error code
 16176                                  ;		error_file_not_found
 16177                                  ;			Last element of path not found
 16178                                  ;		error_path_not_found
 16179                                  ;			Bad path (not in curr dir part if present)
 16180                                  ;		error_bad_curr_dir
 16181                                  ;			Bad path in current directory part of path
 16182                                  ;		error_invalid_access
 16183                                  ;			Bad sharing mode or bad access mode or bad combination
 16184                                  ;		error_access_denied
 16185                                  ;			Attempt to open read only file for writting, or
 16186                                  ;			open a directory
 16187                                  ;		error_sharing_violation
 16188                                  ;			The sharing mode was correct but not allowed
 16189                                  ;			generates an INT 24 on compatibility mode SFTs
 16190                                  ; DS preserved, others destroyed
 16191                                  ;----------------------------------------------------------------------------
 16192                                  
 16193                                  DOS_OPEN:
 16194                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 16195                                  
 16196 00003778 C606[F802]00            	MOV	byte [NoSetDir],0
 16197 0000377D E80001                  	CALL	Check_Access_AX
 16198 00003780 721C                    	JC	short do_ret_label		    ; retc
 16199                                  
 16200 00003782 C43E[3605]              	LES	DI,[THISSFT]
 16201 00003786 30E4                    	XOR	AH,AH
 16202                                  
 16203                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 16204                                  
 16205 00003788 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 16206 0000378C 06                      	PUSH	ES
 16207 0000378D C436[3A05]              	LES	SI,[THISCDS]
 16208                                  	; 18/08/2018
 16209 00003791 83FEFF                  	CMP	SI,-1
 16210 00003794 7509                    	JNZ	short TEST_RE_NET1
 16211 00003796 07                      	POP	ES
 16212                                  
 16213                                  	; MSDOS 6.0
 16214                                  ;Extended open hooks
 16215                                  	;TEST	byte [EXTOPEN_ON],ext_open_on	;FT. from extnded open		;AN000;
 16216                                  	;JZ	short NOEXTOP 		    ;FT. no, do normal			;AN000;
 16217                                  IFS_extopen:									;AN000;
 16218                                  	;MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 16219                                  	;				    ; with which call was made. This
 16220                                  	;				    ; has the open access bits. 
 16221                                  	;;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 16222                                  	;
 16223                                  	;PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 16224                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 16225                                  	;mov	ax,(MultNET*256)+46 
 16226                                  	;INT	2FH			    ;FT.				;AN000;
 16227                                  	;POP	BX			    ;FT. trash bx			;AN000;
 16228                                  	;MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 16229                                  
 16230                                  ;do_ret_label:
 16231                                  	;retn				    ;FT.				;AN000;
 16232                                  ;NOEXTOP:
 16233                                  ;Extended open hooks
 16234                                  	;
 16235                                  ;IF NOT Installed
 16236                                  	;transfer NET_SEQ_OPEN
 16237                                  ;ELSE
 16238                                  	;
 16239                                  do_net_int2f:
 16240                                  	;
 16241                                  	;test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 16242                                  	;jz	short not_exec_open	; N: just do net open
 16243                                  	;				; Y: check to see if redir is aware
 16244                                  	;				;    of this 
 16245                                  	;
 16246                                  	;				; M042 - start
 16247                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR
 16248                                  	;				; Q: does this redir know how to 
 16249                                  	;				;    this
 16250                                  	;jz	short not_exec_open	; N: just do net open
 16251                                  	;				; Y: set bit 3 of access byte and 
 16252                                  	;				;    set sharing mode to DENY_WRITE
 16253                                  	;				; M042 - end
 16254                                  	;
 16255                                  	; NOTE: This specific mode has not been set for the code assembled
 16256                                  	; under the "NOT Installed" conditional. Currently Installed is 
 16257                                  	; always one.
 16258                                  	;				; M035 - set the bits on the stack
 16259                                  	;mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 16260                                  	;
 16261                                  ;not_exec_open:
 16262                                  
 16263                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16264 00003797 50                      	PUSH	AX
 16265                                  
 16266                                  	;MOV	AX,(MultNET SHL 8) OR 22
 16267                                  	;INT	2FH
 16268                                  
 16269 00003798 B81611                  	mov     ax,1116h
 16270 0000379B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 16271                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16272                                  			; SDA first filename pointer -> fully-qualified name of file to open
 16273                                  			; STACK: WORD file open mode
 16274                                  			; Return: CF set on error
 16275                                  
 16276 0000379D 5B                      	POP	BX			; clean stack
 16277                                  do_ret_label: ; 09/08/2018
 16278 0000379E C3                      	retn
 16279                                  ;ENDIF
 16280                                  
 16281                                  TEST_RE_NET1:
 16282 0000379F 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 16283                                  	; 18/08/2018
 16284 000037A5 07                      	POP	ES
 16285                                  	;JZ	short LOCAL_OPEN
 16286                                  
 16287 000037A6 75EF                    	jnz	short do_net_int2f ; (*)
 16288                                  
 16289                                  ;Extended open hooks
 16290                                  	; MSDOS 6.0
 16291                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;FT. from extended open	;AN000;
 16292                                  	;JNZ	short IFS_extopen	      ;FT. isuue extended open	;AN000;
 16293                                  ;Extended open hooks
 16294                                  
 16295                                  ;IF NOT Installed
 16296                                  ;	transfer NET_OPEN
 16297                                  ;ELSE
 16298                                  	;jmp	short do_net_int2f (*)
 16299                                  ;ENDIF
 16300                                  
 16301                                  LOCAL_OPEN:
 16302                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16303 000037A8 E8BAE8                  	call	EcritDisk
 16304                                  
 16305                                  ; DOS 3.3 FastOPen 6/16/86
 16306                                  
 16307 000037AB 800E[6E0F]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 16308                                  
 16309 000037B0 E87F10                  	call	GETPATH
 16310                                  
 16311                                  ; DOS 3.3 FastOPen 6/16/86
 16312                                  
 16313 000037B3 731E                    	JNC	short Open_found
 16314 000037B5 7512                    	JNZ	short bad_path2
 16315 000037B7 08C9                    	OR	CL,CL
 16316 000037B9 740E                    	JZ	short bad_path2
 16317                                  
 16318                                  OpenFNF:
 16319 000037BB B80200                  	MOV	AX,error_file_not_found
 16320                                  
 16321                                  OpenBadRet:
 16322                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 16323                                  	; 12/08/2018
 16324                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 16325                                  	; MSDOS 6.0
 16326 000037BE 368026[6E0F]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16327 000037C4 F9                      	STC
 16328 000037C5 E8A5E8                  	call	LcritDisk
 16329                                  	;JMP	Clear_FastOpen ; 10/08/2018
 16330 000037C8 C3                      	retn 	; 08/09/2018
 16331                                  
 16332                                  bad_path2:
 16333 000037C9 B80300                  	MOV	AX,error_path_not_found
 16334 000037CC EBF0                    	JMP	short OpenBadRet
 16335                                  
 16336                                  Open_Bad_Access:
 16337 000037CE B80500                  	MOV	AX,error_access_denied
 16338 000037D1 EBEB                    	JMP	short OpenBadRet
 16339                                  
 16340                                  Open_found:
 16341 000037D3 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 16342 000037D5 08E4                    	OR	AH,AH
 16343 000037D7 783F                    	JS	short open_ok		; Devices don't have attributes
 16344 000037D9 8E06[7605]              	MOV	ES,[CURBUF+2]		; get buffer location
 16345 000037DD 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 16346 000037E1 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 16347 000037E3 75E9                    	JNZ	short Open_Bad_Access
 16348 000037E5 A801                    	TEST	AL,attr_read_only	; check write on read only
 16349 000037E7 742F                    	JZ	short open_ok
 16350                                  ;
 16351                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 16352                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 16353                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 16354                                  ; processing until the actual write operation:
 16355                                  ;
 16356                                  ; If FCB, then we change the mode to be read_only.
 16357                                  ; If net_FCB, then we change the mode to be read_only.
 16358                                  ; If not open for read then error.
 16359                                  ;
 16360 000037E9 1E                      	push	ds
 16361 000037EA 56                      	push	si
 16362 000037EB C536[3605]              	LDS	SI,[THISSFT]
 16363 000037EF 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 16364 000037F2 F7C10080                	TEST	CX,sf_isFCB		; is it FCB?
 16365 000037F6 750A                    	JNZ	short ResetAccess	; yes, reset the access
 16366 000037F8 88CA                    	MOV	DL,CL
 16367 000037FA 80E2F0                  	AND	DL,SHARING_MASK
 16368 000037FD 80FA70                  	CMP	DL,SHARING_NET_FCB	; is it net FCB?
 16369 00003800 7508                    	JNZ	short NormalOpen	; no
 16370                                  ResetAccess:
 16371 00003802 83E1F0                  	AND	CX,~access_mask	;0FFF0h	; clear access
 16372                                  ;	OR	CX,open_for_read	; stick in open_for_read
 16373 00003805 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 16374 00003808 EB0C                    	JMP	SHORT FillSFT
 16375                                  ;
 16376                                  ; The SFT is normal.  See if the requested access is open_for_read
 16377                                  ;
 16378                                  NormalOpen:
 16379 0000380A 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 16380 0000380D 80F900                  	CMP	CL,open_for_read	; is it open for read?
 16381 00003810 7404                    	JZ	short FillSFT
 16382 00003812 5E                      	pop	si
 16383 00003813 1F                      	pop	ds
 16384 00003814 EBB8                    	JMP	short Open_Bad_Access
 16385                                  ;
 16386                                  ; All done, restore registers and fill the SFT.
 16387                                  ;
 16388                                  FillSFT:
 16389 00003816 5E                      	pop	si
 16390 00003817 1F                      	pop	ds
 16391                                  open_ok:
 16392 00003818 E8A619                  	call	DOOPEN			; Fill in SFT
 16393                                  
 16394                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 16395                                  	;12/08/2018
 16396                                  	;AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16397 0000381B 8026[6E0F]80            	and	byte [FastOpenFlg],Fast_yes	
 16398                                  
 16399                                  	; MSDOS 6.0
 16400                                  	;CALL	DO_SHARE_CHECK
 16401                                  	;JNC	short SHARE_OK
 16402                                  	;call	LcritDisk
 16403                                  	;JMP	short Clear_FastOpen	
 16404                                  
 16405                                  	; MSDOS 3.3
 16406                                  DO_SHARE_CHECK:
 16407 00003820 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 16408                                  OpenShareRetry:
 16409 00003824 51                      	push	cx			; Save number left to do
 16410 00003825 E8FE3A                  	call	SHARE_CHECK		; Final Check
 16411 00003828 59                      	pop	cx			; CX = # left
 16412 00003829 7312                    	JNC	short SHARE_OK		; No problem with access
 16413 0000382B E854E7                  	call	Idle
 16414 0000382E E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 16415                                  OpenShareFail:
 16416 00003830 C43E[3605]              	LES	DI,[THISSFT]
 16417 00003834 E82B00                  	call	SHARE_ERROR
 16418 00003837 73E7                    	JNC	short DO_SHARE_CHECK	; User wants more retry
 16419                                  	
 16420                                  	;12/08/2018
 16421                                  	;mov	byte [ss:FastOpenFlg],0
 16422                                  	;08/09/2018
 16423                                  	;mov	byte [FastOpenFlg],0
 16424 00003839 E831E8                  	call	LcritDisk
 16425                                  	;JMP	short Clear_FastOpen
 16426 0000383C C3                      	retn
 16427                                  
 16428                                  SHARE_OK:
 16429                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16430 0000383D B80300                  	MOV	AX,3
 16431 00003840 C43E[3605]              	LES	DI,[THISSFT]
 16432                                  ;if installed
 16433                                  	;call	JShare + 14 * 4
 16434 00003844 FF1E[9400]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 16435                                  ;else
 16436                                  ;	Call	ShSU
 16437                                  ;endif
 16438 00003848 E822E8                  	call	LcritDisk
 16439                                  	
 16440                                  	;FallThru Set_SFT_Mode
 16441                                  
 16442                                  ;----------------------------------------------------------------------------
 16443                                  ; Procedure Name : SET_SFT_MODE
 16444                                  ;
 16445                                  ; Finish SFT initialization for new reference. Set the correct mode.
 16446                                  ;
 16447                                  ;   Inputs:
 16448                                  ;	ThisSFT points to SFT
 16449                                  ;
 16450                                  ;   Outputs:
 16451                                  ;	Carry clear
 16452                                  ;   Registers modified: AX.
 16453                                  ;---------------------------------------------------------------------------
 16454                                  
 16455                                  ;hkn; called from create. DS already set up to DOSDATA.
 16456                                  
 16457                                  SET_SFT_MODE:
 16458 0000384B C43E[3605]              	LES	DI,[THISSFT]
 16459 0000384F E82416                  	call	DEV_OPEN_SFT
 16460 00003852 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 16461 00003858 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 16462 0000385A A1[DE02]                	MOV	AX,[CurrentPDB]
 16463 0000385D 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 16464                                  
 16465                                  Clear_FastOpen:
 16466 00003861 C3                      	retn			       ;;;;; DOS 3.3
 16467                                  
 16468                                  ;----------------------------------------------------------------------------
 16469                                  ; Procedure Name : SHARE_ERROR
 16470                                  ;
 16471                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 16472                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 16473                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 16474                                  ; really ignore).  Carry clear
 16475                                  ; if user wants a retry. ES, DI, DS preserved
 16476                                  ;---------------------------------------------------------------------------
 16477                                  
 16478                                  SHARE_ERROR:
 16479 00003862 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 16480 00003868 750C                    	JNZ	short _HARD_ERR
 16481 0000386A 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 16482 0000386E 80E1F0                  	AND	CL,SHARING_MASK
 16483 00003871 80F900                  	CMP	CL,SHARING_COMPAT
 16484 00003874 7505                    	JNE	short _NO_HARD_ERR
 16485                                  _HARD_ERR:
 16486 00003876 E8B23A                  	call	SHARE_VIOLATION
 16487                                  	;retnc				; User wants retry
 16488 00003879 73E6                    	jnc	short Clear_FastOpen
 16489                                  _NO_HARD_ERR:
 16490 0000387B B82000                  	MOV	AX,error_sharing_violation
 16491 0000387E F9                      	STC
 16492 0000387F C3                      	retn
 16493                                  
 16494                                  ; MSDOS 6.0
 16495                                  ;----------------------------------------------------------------------------
 16496                                  ; Procedure Name : DO_SHARE_CHECK
 16497                                  ;
 16498                                  ; Input: THISDPB, WFP_Start, THISSFT set
 16499                                  ; Functions: check file sharing mode is valid
 16500                                  ; Output: carry set, error
 16501                                  ;	  carry clear, share ok
 16502                                  ;----------------------------------------------------------------------------
 16503                                  ;
 16504                                  ;DO_SHARE_CHECK:
 16505                                  ;	call	EcritDisk		; enter critical section
 16506                                  ;OPN_RETRY:
 16507                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 16508                                  ;OpenShareRetry:
 16509                                  ;	push	cx			; Save number left to do
 16510                                  ;	call	SHARE_CHECK		; Final Check
 16511                                  ;	pop	cx			; CX = # left
 16512                                  ;	JNC	short Share_Ok2		; No problem with access
 16513                                  ;	call	Idle
 16514                                  ;	LOOP	OpenShareRetry		; One more retry used up
 16515                                  ;OpenShareFail:
 16516                                  ;	LES	DI,[THISSFT]
 16517                                  ;	call	SHARE_ERROR
 16518                                  ;	JNC	short OPN_RETRY		; User wants more retry
 16519                                  ;Share_Ok2:
 16520                                  ;	call	LcritDisk		; leave critical section
 16521                                  ;	retn
 16522                                  
 16523                                  ;-----------------------------------------------------------------------------
 16524                                  ; Procedure Name : Check_Access
 16525                                  ;
 16526                                  ; Inputs:
 16527                                  ;	AX is mode
 16528                                  ;	  High NIBBLE of AL (Sharing Mode)
 16529                                  ;		sharing_compat	   file is opened in compatibility mode
 16530                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16531                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16532                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16533                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16534                                  ;	  Low NIBBLE of AL (Access Mode)
 16535                                  ;		open_for_read	file is opened for reading
 16536                                  ;		open_for_write	file is opened for writing
 16537                                  ;		open_for_both	file is opened for both reading and writing.
 16538                                  ; Function:
 16539                                  ;	Check this access mode for correctness
 16540                                  ; Outputs:
 16541                                  ;	[open_access] = AL input
 16542                                  ;	Carry Clear
 16543                                  ;		Mode is correct
 16544                                  ;		AX unchanged
 16545                                  ;	Carry Set
 16546                                  ;		Mode is bad
 16547                                  ;		AX = error_invalid_access
 16548                                  ; No other registers effected
 16549                                  ;----------------------------------------------------------------------------
 16550                                  
 16551                                  Check_Access_AX:
 16552                                  
 16553 00003880 A2[0905]                	MOV	[OPEN_ACCESS],AL
 16554 00003883 53                      	PUSH	BX
 16555                                  
 16556                                  ;	If sharing, then test for special sharing mode for FCBs
 16557                                  
 16558 00003884 88C3                    	MOV	BL,AL
 16559 00003886 80E3F0                  	AND	BL,SHARING_MASK
 16560 00003889 803E[0D05]FF            	CMP	byte [FSHARING],-1
 16561 0000388E 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 16562 00003890 80FB70                  	CMP	BL,SHARING_NET_FCB
 16563 00003893 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 16564                                  CheckShareMode:
 16565 00003895 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 16566 00003898 770D                    	JA	short Make_Bad_Access
 16567                                  CheckAccessMode:
 16568 0000389A 88C3                    	MOV	BL,AL
 16569 0000389C 80E30F                  	AND	BL,access_mask
 16570 0000389F 80FB02                  	CMP	BL,2
 16571 000038A2 7703                    	JA	short Make_Bad_Access
 16572 000038A4 5B                      	POP	BX
 16573 000038A5 F8                      	CLC
 16574 000038A6 C3                      	retn
 16575                                  
 16576                                  Make_Bad_Access:
 16577 000038A7 B80C00                  	MOV	AX,error_invalid_access
 16578 000038AA 5B                      	POP	BX
 16579 000038AB F9                      	STC
 16580 000038AC C3                      	retn
 16581                                  
 16582                                  ;============================================================================
 16583                                  ; DINFO.ASM, MSDOS 6.0, 1991
 16584                                  ;============================================================================
 16585                                  ; 08/08/2018 - Retro DOS v3.0
 16586                                  
 16587                                  ;**	Low level routine for returning disk drive information from a local
 16588                                  ;	  or NET device
 16589                                  ;
 16590                                  ;	DISK_INFO
 16591                                  ;
 16592                                  ;	  Modification history:
 16593                                  ;
 16594                                  ;		Created: ARR 30 March 1983
 16595                                  
 16596                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 16597                                  ;---------------------------------------------------------------------------
 16598                                  ; Procedure Name : DISK_INFO
 16599                                  ;
 16600                                  ; Inputs:
 16601                                  ;	[THISCDS] Points to the Macro List Structure of interest
 16602                                  ;		(It MAY NOT be NUL, error not detected)
 16603                                  ; Function:
 16604                                  ;	Get Interesting Drive Information
 16605                                  ; Returns:
 16606                                  ;	DX = Number of free allocation units
 16607                                  ;	BX = Total Number of allocation units on disk
 16608                                  ;	CX = Sector size
 16609                                  ;	AL = Sectors per allocation unit
 16610                                  ;	AH = FAT ID BYTE
 16611                                  ;	Carry set if error (currently user FAILed to I 24)
 16612                                  ; Segs except ES preserved, others destroyed
 16613                                  ;----------------------------------------------------------------------------
 16614                                  
 16615                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 16616                                  ;hkn; DOSDATA. 
 16617                                  
 16618                                  DISK_INFO:
 16619                                  	; 08/08/2018 - Retro DOS v3.0
 16620                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 16621                                  
 16622 000038AD E817E7                  	call	TestNet
 16623 000038B0 7306                    	JNC	short LOCAL_DSK_INFO
 16624                                  
 16625                                  ;IF NOT Installed
 16626                                  ;	transfer NET_DISK_INFO
 16627                                  ;ELSE
 16628                                  	;MOV	AX,(MultNET SHL 8) OR 12
 16629                                  	;INT	2FH
 16630                                  	;return
 16631                                  
 16632 000038B2 B80C11                  	mov     ax,110Ch
 16633 000038B5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 16634                                  			; ES:DI -> current directory
 16635                                  			; Return: AL = sectors per cluster, BX = total clusters
 16636                                  			; CX = bytes per sector, DX = number of available clusters
 16637 000038B7 C3                      	retn
 16638                                  ;ENDIF
 16639                                  
 16640                                  LOCAL_DSK_INFO:
 16641 000038B8 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16642 000038BD E8A5E7                  	call	EcritDisk
 16643 000038C0 E8F922                  	call	FATREAD_CDS		; perform media check.
 16644 000038C3 7241                    	JC	short CRIT_LEAVE
 16645 000038C5 BB0200                  	MOV	BX,2
 16646 000038C8 E88321                  	call	UNPACK			; Get first FAT sector into CURBUF
 16647 000038CB 7239                    	JC	short CRIT_LEAVE
 16648 000038CD C536[7405]              	LDS	SI,[CURBUF]
 16649 000038D1 8A6410                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 16650                                  
 16651                                  ;hkn; SS is DOSDATA
 16652 000038D4 16                      	push	ss
 16653 000038D5 1F                      	pop	ds
 16654 000038D6 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 16655                                  ;
 16656                                  ; Examine the current free count.  If it indicates that we have an invalid
 16657                                  ; count, do the expensive calculation.
 16658                                  ;
 16659 000038DA 268B561E                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 16660 000038DE 83FAFF                  	CMP	DX,-1			; is it valid?
 16661 000038E1 7404                    	JZ	short DoScan
 16662                                  ;
 16663                                  ; Check to see if it is in a reasonalbe range.	If so, trust it and return.
 16664                                  ; Otherwise, we need to blast out an internal error message and then recompute
 16665                                  ; the count.
 16666                                  ;
 16667 000038E3 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 16668 000038E5 7223                    	JB	short GotVal		; yes, trust it.
 16669                                  DoScan:
 16670 000038E7 31D2                    	XOR	DX,DX
 16671 000038E9 49                      	DEC	CX
 16672                                  SCANFREE:
 16673 000038EA E86121                  	call	UNPACK
 16674 000038ED 7217                    	JC	short CRIT_LEAVE
 16675 000038EF 7501                    	JNZ	short NOTFREECLUS
 16676 000038F1 42                      	INC	DX			; A free one
 16677                                  NOTFREECLUS:
 16678 000038F2 43                      	INC	BX			; Next cluster
 16679 000038F3 E2F5                    	LOOP	SCANFREE
 16680 000038F5 4B                      	DEC	BX			; BX was next cluster.	Convert to
 16681                                  ReturnVals:
 16682 000038F6 4B                      	DEC	BX			; count
 16683 000038F7 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK] 
 16684 000038FB FEC0                    	INC	AL			; Sectors/cluster
 16685 000038FD 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 16686 00003901 2689561E                	MOV	[ES:BP+DPB.FREE_CNT],DX
 16687 00003905 F8                      	CLC
 16688                                  CRIT_LEAVE:
 16689 00003906 E864E7                  	call	LcritDisk
 16690 00003909 C3                      	retn
 16691                                  ;
 16692                                  ; We have correctly computed everything previously. Load up registers for
 16693                                  ; return.
 16694                                  ;
 16695                                  GotVal: 
 16696 0000390A 89CB                    	MOV	BX,CX			; get cluster count
 16697 0000390C EBE8                    	JMP	short ReturnVals
 16698                                  
 16699                                  ;============================================================================
 16700                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 16701                                  ;============================================================================
 16702                                  ; 22/07/2018 - Retro DOS v3.0
 16703                                  
 16704                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 16705                                  ;	NAME	DOS_SEARCH
 16706                                  
 16707                                  ;**	Low level routines for doing local and NET directory searches
 16708                                  ;
 16709                                  ;	DOS_SEARCH_FIRST
 16710                                  ;	DOS_SEARCH_NEXT
 16711                                  ;	RENAME_NEXT
 16712                                  ;
 16713                                  ;	Revision history:
 16714                                  ;
 16715                                  ;	    Created: ARR 30 March 1983
 16716                                  ;	    A000	version 4.00  Jan. 1988
 16717                                  ;	    A001	PTM 3564 -- search for fastopen
 16718                                  
 16719                                  ;Installed = TRUE
 16720                                  
 16721                                  ;--------------------------------------------------------------------------
 16722                                  ;
 16723                                  ; Procedure Name : DOS_SEARCH_FIRST
 16724                                  ;
 16725                                  ; Inputs:
 16726                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16727                                  ;		terminated)
 16728                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16729                                  ;		( = -1 if current dir not involved, else
 16730                                  ;		 Points to first char after last "/" of current dir part)
 16731                                  ;	[THISCDS] Points to CDS being used
 16732                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16733                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16734                                  ;	[DMAADD] Points to 53 byte buffer
 16735                                  ; Function:
 16736                                  ;	Initiate a search for the given file spec
 16737                                  ; Outputs:
 16738                                  ;	CARRY CLEAR
 16739                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 16740                                  ;
 16741                                  ;	LOCAL
 16742                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 16743                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 16744                                  ;	    11 byte search name with Meta chars in it
 16745                                  ;	    Search Attribute Byte, attribute of search
 16746                                  ;	    WORD LastEnt value
 16747                                  ;	    WORD DirStart
 16748                                  ;	    4 byte pad
 16749                                  ;	    32 bytes of the directory entry found
 16750                                  ;	NET
 16751                                  ;	    21 bytes First byte has high bit set
 16752                                  ;	    32 bytes of the directory entry found
 16753                                  ;
 16754                                  ;	CARRY SET
 16755                                  ;	    AX = error code
 16756                                  ;		error_no_more_files
 16757                                  ;			No match for this file
 16758                                  ;		error_path_not_found
 16759                                  ;			Bad path (not in curr dir part if present)
 16760                                  ;		error_bad_curr_dir
 16761                                  ;			Bad path in current directory part of path
 16762                                  ; DS preserved, others destroyed
 16763                                  ;---------------------------------------------------------------------------
 16764                                  
 16765                                  DOS_SEARCH_FIRST:
 16766                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 16767                                  
 16768 0000390E C43E[3A05]              	LES	DI,[THISCDS]
 16769 00003912 83FFFF                  	CMP	DI,-1
 16770 00003915 7506                    	JNZ	short TEST_RE_NET2
 16771                                  
 16772                                  ;IF NOT Installed
 16773                                  ;	transfer NET_SEQ_SEARCH_FIRST
 16774                                  ;ELSE
 16775                                  	;mov	ax,1119h
 16776 00003917 B81911                  	MOV	AX,(MultNET<<8)|25
 16777 0000391A CD2F                    	INT	2Fh
 16778 0000391C C3                      	retn
 16779                                  ;ENDIF
 16780                                  
 16781                                  TEST_RE_NET2:
 16782                                  	;test	word [es:di+43h],8000h
 16783 0000391D 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 16784 00003923 7406                    	JZ	short LOCAL_SEARCH_FIRST
 16785                                  
 16786                                  ;IF NOT Installed
 16787                                  ;	transfer NET_SEARCH_FIRST
 16788                                  ;ELSE
 16789                                  	;mov	ax,111Bh
 16790 00003925 B81B11                  	MOV	AX,(MultNET<<8)|27
 16791 00003928 CD2F                    	INT	2FH
 16792 0000392A C3                      	retn
 16793                                  ;ENDIF
 16794                                  
 16795                                  LOCAL_SEARCH_FIRST:
 16796 0000392B E837E7                  	call	EcritDisk
 16797                                  	; MSDOS 6.0
 16798                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 16799                                  	;JZ	short NOFN			;AN000;
 16800                                  	;OR	byte [FastOpenflg],Fastopen_Set	;AN000;
 16801                                  ;NOFN:						;AN000;
 16802 0000392E C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16803                                  	; MSDOS 6.0
 16804                                  	;CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 16805                                  	;JNC	short norm_GETPATH	;AN000;;FO. no
 16806                                  	;AND	byte [FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16807                                  ;norm_GETPATH:
 16808 00003933 E8FC0E                  	call	GETPATH
 16809                                  	; BX = offset NAME1
 16810                                  ;_getdone:
 16811 00003936 7313                    	JNC	short find_check_dev
 16812 00003938 750C                    	JNZ	short bad_path3
 16813 0000393A 08C9                    	OR	CL,CL
 16814 0000393C 7408                    	JZ	short bad_path3
 16815                                  find_no_more:
 16816                                  	;mov	ax,12h
 16817 0000393E B81200                  	MOV	AX,error_no_more_files
 16818                                  BadBye:
 16819                                  	; MSDOS 6.0
 16820                                  	;AND	[SS:FastOpenflg],Fast_yes  ;AN000;;FO. reset fastopen
 16821                                  
 16822 00003941 F9                      	STC
 16823 00003942 E828E7                  	call	LcritDisk
 16824 00003945 C3                      	retn
 16825                                  
 16826                                  bad_path3:
 16827                                  	;mov	ax,3
 16828 00003946 B80300                  	MOV	AX,error_path_not_found
 16829 00003949 EBF6                    	JMP	short BadBye
 16830                                  
 16831                                  find_check_dev:
 16832 0000394B 08E4                    	OR	AH,AH
 16833 0000394D 790A                    	JNS	short found_entry
 16834 0000394F C706[F402]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 16835 00003955 FE06[0B05]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 16836                                  found_entry:
 16837                                  ;
 16838                                  ; We set the physical drive byte here Instead of after found_it; Doing
 16839                                  ; a search-next may not have wfp_start set correctly
 16840                                  ;
 16841 00003959 C43E[DA02]              	LES	DI,[DMAADD]
 16842 0000395D 8B36[4A05]              	MOV	SI,[WFP_START]		; get pointer to beginning
 16843 00003961 AC                      	LODSB
 16844 00003962 2C40                    	SUB	AL,'A'-1                ; logical drive
 16845 00003964 AA                      	STOSB				; High bit not set (local)
 16846                                  found_it:
 16847 00003965 C43E[DA02]              	LES	DI,[DMAADD]
 16848 00003969 47                      	INC	DI
 16849                                  
 16850                                  	; MSDOS 6.0
 16851                                  	;PUSH	DS				  ;FO.;AN001; save ds
 16852                                  	;TEST	byte [Fastopenflg],Set_For_Search ;FO.;AN001; from fastopen
 16853                                  	;JZ	short notfast 			  ;FO.;AN001;
 16854                                  	;MOV	SI,BX				  ;FO.;AN001;
 16855                                  	;MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 16856                                  	;JMP	SHORT movmov			  ;FO.;AN001;
 16857                                  
 16858                                  notfast:
 16859 0000396A BE[E604]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 16860                                  movmov:
 16861                                  ; Special E5 code
 16862 0000396D A4                      	MOVSB
 16863 0000396E 26807DFF05              	CMP	BYTE [ES:DI-1],5
 16864 00003973 7505                    	JNZ	short NOTKANJB
 16865 00003975 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 16866                                  NOTKANJB:
 16867 0000397A B90A00                  	MOV	CX,10
 16868 0000397D F3A4                    	REP	MOVSB
 16869                                  
 16870                                  	; 08/09/2018
 16871                                  	;POP	DS			;FO.;AN001; restore ds
 16872                                  
 16873 0000397F A0[0605]                	MOV	AL,[ATTRIB]
 16874 00003982 AA                      	STOSB
 16875 00003983 50                      	PUSH	AX			; Save AH device info
 16876 00003984 A1[F402]                	MOV	AX,[LASTENT]
 16877 00003987 AB                      	STOSW
 16878 00003988 A1[5805]                	MOV	AX,[DIRSTART]
 16879 0000398B AB                      	STOSW
 16880                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 16881 0000398C 83C704                  	ADD	DI,4
 16882 0000398F 58                      	POP	AX			; Recover AH device info
 16883 00003990 08E4                    	OR	AH,AH
 16884 00003992 7813                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 16885 00003994 833E[7405]FF            	CMP	WORD [CURBUF],-1
 16886 00003999 7508                    	JNZ	short OKSTORE
 16887                                  
 16888                                  	; MSDOS 6.0
 16889                                  	;TEST	byte [FastOPenFlg],Set_For_Search
 16890                                  					;AN000;;FO. from fastopen and is good
 16891                                  	;JNZ	short OKSTORE		;AN000;;FO.
 16892                                  
 16893                                  	; The user has specified the root directory itself, rather than some
 16894                                  	; contents of it. We can't "find" that.
 16895 0000399B 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 16896                                  					;   stuffing a -1 at Lastent
 16897 000039A1 EB9B                    	JMP	short find_no_more
 16898                                  
 16899                                  OKSTORE:
 16900 000039A3 8E1E[7605]              	MOV	DS,[CURBUF+2]
 16901                                  DOSREL:
 16902                                  	; BX = offset NAME1 (from GETPATH)
 16903 000039A7 89DE                    	MOV	SI,BX			; SI-> start of entry
 16904                                  
 16905                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 16906                                  
 16907                                  	;mov	cx,32
 16908 000039A9 B92000                  	MOV	CX,dir_entry.size
 16909                                  ;;;;; 7/29/86
 16910 000039AC 89F8                    	MOV	AX,DI			; save the 1st byte addr
 16911 000039AE F3A4                    	REP	MOVSB
 16912 000039B0 89C7                    	MOV	DI,AX			; restore 1st byte addr
 16913 000039B2 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 16914 000039B6 7504                    	JNZ	short NO05
 16915 000039B8 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 16916                                  NO05:
 16917                                  
 16918                                  ;;;;; 7/29/86
 16919                                  
 16920                                  ;hkn; FastOpenflg is in DOSDATA use SS
 16921                                  	; MSDOS 6.0
 16922                                  	;AND	byte [SS:FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16923                                  	;push	ss
 16924                                  	;pop	ds
 16925                                  	;AND	byte [FastOpenflg],Fast_yes
 16926                                  
 16927                                  ;hkn; SS is DOSDATA
 16928 000039BC 16                      	push	ss
 16929 000039BD 1F                      	pop	ds
 16930 000039BE F8                      	CLC
 16931 000039BF E8ABE6                  	call	LcritDisk
 16932 000039C2 C3                      	retn
 16933                                  
 16934                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 16935                                  ;----------------------------------------------------------------------------
 16936                                  ;
 16937                                  ; Procedure Name : DOS_SEARCH_NEXT
 16938                                  ;
 16939                                  ; Inputs:
 16940                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 16941                                  ;	    (only first 21 bytes must have valid information)
 16942                                  ; Function:
 16943                                  ;	Look for subsequent matches
 16944                                  ; Outputs:
 16945                                  ;	CARRY CLEAR
 16946                                  ;	    The 53 bytes at DMAADD are updated for next call
 16947                                  ;		(see DOS_SEARCH_FIRST)
 16948                                  ;	CARRY SET
 16949                                  ;	    AX = error code
 16950                                  ;		error_no_more_files
 16951                                  ;			No more files to find
 16952                                  ; DS preserved, others destroyed
 16953                                  ;---------------------------------------------------------------------------
 16954                                  
 16955                                  ;hkn; called from search.asm. DS already set up at this point.
 16956                                  
 16957                                  DOS_SEARCH_NEXT:
 16958 000039C3 C43E[DA02]              	LES	DI,[DMAADD]
 16959 000039C7 268A05                  	MOV	AL,[ES:DI]
 16960 000039CA A880                    	TEST	AL,80H			; Test for NET
 16961 000039CC 7406                    	JZ	short LOCAL_SEARCH_NEXT
 16962                                  ;IF NOT Installed
 16963                                  ;	transfer NET_SEARCH_NEXT
 16964                                  ;ELSE
 16965                                  	;mov	ax,111Ch
 16966 000039CE B81C11                  	MOV	AX,(MultNET<<8)|28
 16967 000039D1 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 16968                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 16969                                  		     ; Return: CF set on error, AX = DOS error code
 16970                                  		     ; CF clear if successful
 16971 000039D3 C3                      	retn
 16972                                  ;ENDIF
 16973                                  
 16974                                  LOCAL_SEARCH_NEXT:
 16975                                  	;AL is drive A=1
 16976                                  	;mov	byte [EXTERR_LOCUS],2
 16977 000039D4 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16978 000039D9 E889E6                  	call	EcritDisk
 16979                                  
 16980                                  ;hkn; DummyCDS is in DOSDATA
 16981 000039DC C706[3A05][9504]        	MOV     word [THISCDS],DUMMYCDS
 16982                                  ;hkn; Segment address is DOSDATA - use ds
 16983                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 16984 000039E2 8C1E[3C05]              	mov	[THISCDS+2],DS
 16985                                  
 16986 000039E6 0440                    	ADD	AL,'A'-1
 16987 000039E8 E8CD2E                  	call	InitCDS
 16988                                  
 16989                                  ;	call	GETTHISDRV		; Set CDS pointer
 16990                                  
 16991 000039EB 7236                    	JC	short No_files		; Bogus drive letter
 16992 000039ED C43E[3A05]              	LES	DI,[THISCDS]		; Get CDS pointer
 16993                                  	;les	bp,[es:di+45h]
 16994 000039F1 26C46D45                	LES	BP,[ES:DI+curdir.devptr]; Get DPB pointer
 16995 000039F5 E8FCDC                  	call	GOTDPB			; [THISDPB] = ES:BP
 16996                                  
 16997 000039F8 268A4600                	mov	al,[ES:BP]
 16998                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 16999 000039FC A2[1105]                	mov	[THISDRV],AL
 17000                                  	;mov	word [CREATING], 0E500h
 17001 000039FF C706[1805]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 17002 00003A05 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17003 00003A0A C536[DA02]              	LDS	SI,[DMAADD]
 17004 00003A0E AC                      	LODSB				; Drive Byte
 17005                                  
 17006                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 17007                                  RENAME_NEXT:
 17008                                  	;context ES
 17009 00003A0F 16                      	push	ss
 17010 00003A10 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 17011                                  
 17012                                  ;hkn; NAME1 is in DOSDATA
 17013 00003A11 BF[E604]                	MOV	DI,NAME1
 17014                                  
 17015 00003A14 B90B00                  	MOV	CX,11
 17016 00003A17 F3A4                    	REP	MOVSB			; Search name
 17017 00003A19 AC                      	LODSB				; Attribute
 17018                                  
 17019                                  ;hkn; SS override
 17020 00003A1A 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17021 00003A1E AD                      	LODSW				; LastEnt
 17022 00003A1F 09C0                    	OR	AX,AX
 17023 00003A21 7903                    	JNS	short cont_load
 17024                                  No_files:
 17025 00003A23 E918FF                  	JMP	find_no_more
 17026                                  
 17027                                  cont_load:
 17028 00003A26 50                      	PUSH	AX			; Save LastEnt
 17029 00003A27 AD                      	LODSW				; DirStart
 17030 00003A28 89C3                    	MOV	BX,AX
 17031                                  
 17032                                  ;hkn; SS is DOSDATA
 17033                                  	;context DS
 17034 00003A2A 16                      	push	ss
 17035 00003A2B 1F                      	pop	ds
 17036 00003A2C C42E[2405]              	LES	BP,[THISDPB]		; Recover ES:BP
 17037                                  	;invoke	SetDirSrch
 17038 00003A30 E8AA0D                  	call	SETDIRSRCH
 17039 00003A33 7303                    	JNC	short SEARCH_GOON
 17040 00003A35 58                      	POP	AX			; Clean stack
 17041 00003A36 EBEB                    	JMP	short No_files
 17042                                  
 17043                                  SEARCH_GOON:
 17044 00003A38 E88110                  	call	STARTSRCH
 17045 00003A3B 58                      	POP	AX
 17046 00003A3C E8700D                  	call	GETENT
 17047 00003A3F 72E2                    	JC	short No_files
 17048 00003A41 E8AF0C                  	call	NEXTENT
 17049 00003A44 72DD                    	JC	short No_files
 17050 00003A46 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 17051 00003A48 E91AFF                  	JMP	found_it ; 10/08/2018
 17052                                  
 17053                                  ; MSDOS6.0
 17054                                  ;---------------------------------------------------------------------------
 17055                                  ;
 17056                                  ; Procedure Name : CHECK_QUESTION
 17057                                  ;
 17058                                  ; Input: [WFP_START]= pointer to final path
 17059                                  ; Function: check '?' char
 17060                                  ; Output: carry clear, if no '?'
 17061                                  ;	 carry set, if '?' exists
 17062                                  ;---------------------------------------------------------------------------
 17063                                  
 17064                                  ;CHECK_QUESTION:
 17065                                  ;;hkn;	wfp_start is in DOSDATA;hkn;	MOV     WORD PTR ThisCDS+2,CS
 17066                                  ;;hkn;	PUSH	CS			;AN000;;FO.
 17067                                  ;	push	ss
 17068                                  ;
 17069                                  ;	POP	DS			;AN000;;FO. ds:si -> final path
 17070                                  ;	MOV	SI,[WFP_START]		;AN000;;FO.
 17071                                  ;getnext:				;AN000;
 17072                                  ;	LODSB				;AN000;;FO. get char
 17073                                  ;	OR	AL,AL			;AN000;;FO. is it null
 17074                                  ;	JZ	short NO_Question	;AN000;;FO. yes
 17075                                  ;	CMP	AL,'?'                  ;AN000;;FO. is '?'
 17076                                  ;	JNZ	short getnext 		;AN000;;FO. no
 17077                                  ;	STC				;AN000;;FO.
 17078                                  ;NO_Question:				;AN000;
 17079                                  ;	retn				;AN000;;FO.
 17080                                  
 17081                                  ;============================================================================
 17082                                  ; ABORT.ASM, MSDOS 6.0, 1991
 17083                                  ;============================================================================
 17084                                  ; 23/07/2018 - Retro DOS v3.0
 17085                                  
 17086                                  ;**
 17087                                  ;
 17088                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 17089                                  ;  If process has NET resources a close all is sent out over the net.
 17090                                  ;
 17091                                  ;   DOS_ABORT
 17092                                  ;
 17093                                  ;   Modification history:
 17094                                  ;
 17095                                  ;       Created: ARR 30 March 1983
 17096                                  ;
 17097                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 17098                                  ;				being terminated only if it is busy.
 17099                                  ;
 17100                                  
 17101                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 17102                                  ;--------------------------------------------------------------------------
 17103                                  ;
 17104                                  ; Procedure Name : DOS_ABORT
 17105                                  ;
 17106                                  ; Inputs:
 17107                                  ;       [CurrentPDB] set to PID of process aborting
 17108                                  ; Function:
 17109                                  ;       Close all files and free all SFTs for this PID
 17110                                  ; Returns:
 17111                                  ;       None
 17112                                  ; All destroyed except stack
 17113                                  ;---------------------------------------------------------------------------
 17114                                  
 17115                                  DOS_ABORT:
 17116 00003A4B 368E06[DE02]            	MOV     ES,[SS:CurrentPDB]	; SS override
 17117 00003A50 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 17118                                  reset_free_jfn:
 17119 00003A55 89CB                    	MOV     BX,CX
 17120 00003A57 51                      	PUSH    CX
 17121 00003A58 4B                      	DEC     BX                      ; get jfn (start with last one)
 17122                                  
 17123 00003A59 E86833                  	CALL	_$CLOSE
 17124 00003A5C 59                      	POP     CX
 17125 00003A5D E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 17126                                  ;
 17127                                  ; Note:  We do need to explicitly close FCBs. Reasons are as follows: If we
 17128                                  ; are running in the no-sharing no-network environment, we are simulating the
 17129                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 17130                                  ; BUT...  the cache remains in a state with garbage that may be reused by the
 17131                                  ; next process.  We scan the set and blast the ref counts of the FCBs we own.
 17132                                  ;
 17133                                  ; If sharing is loaded, then the following call to close process will
 17134                                  ; correctly close all FCBs.  We will then need to walk the list AFTER here.
 17135                                  ;
 17136                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 17137                                  ; known network resources.  These resources are then responsible for cleaning
 17138                                  ; up after this process.
 17139                                  ;
 17140                                  ; Sleazy, eh?
 17141                                  ;
 17142                                  	;context DS			; SS is DOSDATA
 17143 00003A5F 16                      	push	ss
 17144 00003A60 1F                      	pop	ds  ; 09/09/2018
 17145                                  
 17146                                  	;CallInstall Net_Abort, MultNET, 29
 17147 00003A61 B81D11                  	mov	ax, 111Dh
 17148 00003A64 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 17149                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 17150                                  			; DS???, SS = DOS CS
 17151                                  ;if installed
 17152 00003A66 FF1E[6C00]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 17153                                  ;else
 17154                                  ;	call 	mftCloseP
 17155                                  ;endif
 17156                                  
 17157                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 17158                                  ; counts.
 17159                                  					; SS override
 17160 00003A6A 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 17161                                  	;mov	cx,[es:di+4]
 17162 00003A6F 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 17163 00003A73 E317                    	jcxz    FCBScanDone
 17164                                  	;lea	di,[di+6]
 17165 00003A75 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 17166 00003A78 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17167                                  FCBTest:
 17168                                  	;cmp	[es:di+31h],ax
 17169 00003A7C 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 17170 00003A80 7505                    	jnz	short FCBNext		; no, skip it
 17171 00003A82 26C7050000              	mov	word [es:di],0
 17172                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 17173                                  FCBNext:
 17174 00003A87 83C735                  	add     di,SF_ENTRY.size
 17175 00003A8A E2F0                    	loop    FCBTest
 17176                                  FCBScanDone:
 17177                                  
 17178                                  ;
 17179                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 17180                                  ;
 17181 00003A8C 31DB                    	XOR     BX,BX
 17182                                  Scan:
 17183 00003A8E 53                      	push    bx
 17184 00003A8F E8812D                  	call	SFFromSFN
 17185 00003A92 5B                      	pop     bx
 17186 00003A93 7301                    	jnc     short Scan1
 17187 00003A95 C3                      	retn
 17188                                  
 17189                                  ;M038
 17190                                  ; Do what the comment above says, check for busy state
 17191                                  ;
 17192                                  Scan1:
 17193                                  	;cmp	word [es:di],0
 17194                                  	;jz	short scan_next  ; MSDOS 3.3
 17195                                  	; MSDOS6.0
 17196 00003A96 26833DFF                	cmp	word [es:di],sf_busy ; -1
 17197                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 17198                                  				; Is Sft busy? ;M038
 17199 00003A9A 7519                    	jnz	short scan_next
 17200                                  ;
 17201                                  ; we have a SFT that is busy. See if it is for the current process
 17202                                  ;
 17203 00003A9C 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17204                                  	;cmp	[es:di+31h],ax
 17205 00003AA0 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 17206 00003AA4 750F                    	jnz	short scan_next
 17207 00003AA6 36A1[EA02]              	mov     ax,[SS:USER_ID]		; SS override
 17208                                  	;cmp	[es:di+2Fh],ax
 17209 00003AAA 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 17210 00003AAE 7505                    	jnz	short scan_next
 17211                                  ;
 17212                                  ; This SFT is labelled as ours.
 17213                                  ;
 17214 00003AB0 26C7050000              	mov	word [es:di],0
 17215                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 17216                                  scan_next:
 17217 00003AB5 43                      	inc     bx
 17218 00003AB6 EBD6                    	jmp     short Scan
 17219                                  
 17220                                  
 17221                                  ;============================================================================
 17222                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 17223                                  ;============================================================================
 17224                                  ; 23/07/2018 - Retro DOS v3.0
 17225                                  
 17226                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 17227                                  ;
 17228                                  ;	DOS_CLOSE
 17229                                  ;	DOS_COMMIT
 17230                                  ;	FREE_SFT
 17231                                  ;	SetSFTTimes
 17232                                  ;
 17233                                  ;	Revision history:
 17234                                  ;
 17235                                  ;	   AN000  version 4.00	Jan. 1988
 17236                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 17237                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 17238                                  
 17239                                  ;Installed = TRUE
 17240                                  
 17241                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 17242                                  ;---------------------------------------------------------------------------
 17243                                  ;
 17244                                  ; Procedure Name : DOS_CLOSE
 17245                                  ;
 17246                                  ; Inputs:
 17247                                  ;	[THISSFT] set to the SFT for the file being used
 17248                                  ; Function:
 17249                                  ;	Close the indicated file via the SFT
 17250                                  ; Returns:
 17251                                  ;	sf_ref_count decremented otherwise
 17252                                  ;	ES:DI point to SFT
 17253                                  ;	Carry set if error
 17254                                  ;	    AX has error code
 17255                                  ; DS preserved, others destroyed
 17256                                  ;---------------------------------------------------------------------------
 17257                                  
 17258                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 17259                                  
 17260                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 17261                                  
 17262                                  DOS_CLOSE:
 17263 00003AB8 C43E[3605]              	LES	DI,[THISSFT]
 17264                                  	;mov	bx,[ES:DI+5]
 17265 00003ABC 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17266                                  
 17267                                  ;	Network closes are handled entirely by the net code.
 17268                                  
 17269                                  	;test	bx,8000h
 17270 00003AC0 F7C30080                	TEST	BX,sf_isnet
 17271 00003AC4 7406                    	JZ	short LocalClose
 17272                                  
 17273                                  	;CallInstall Net_Close,MultNET,6
 17274 00003AC6 B80611                  	mov     ax, 1106h
 17275 00003AC9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 17276                                  			; ES:DI -> SFT
 17277                                  			; SFT DPB field -> DPB of drive containing file
 17278                                  			; Return: CF set on error, AX = DOS error code
 17279                                  			; CF clear if successful
 17280 00003ACB C3                      	retn
 17281                                  
 17282                                  ;
 17283                                  ; All closes release the sharing information.
 17284                                  ; No commit releases sharing information
 17285                                  ;
 17286                                  ; All closes decrement the ref count.
 17287                                  ; No commit decrements the ref count.
 17288                                  ;
 17289                                  LocalClose:
 17290 00003ACC E896E5                  	call	EcritDisk
 17291 00003ACF E80E01                  	CALL	SetSFTTimes
 17292 00003AD2 E89D00                  	CALL	FREE_SFT		; dec ref count or mark as busy
 17293                                  
 17294                                  ;hkn; SS is DOSDATA
 17295                                  	;Context DS
 17296 00003AD5 16                      	push	ss
 17297 00003AD6 1F                      	pop	ds
 17298                                  
 17299 00003AD7 50                      	push	ax
 17300 00003AD8 53                      	push	bx
 17301 00003AD9 E87538                  	call	ShareEnd
 17302 00003ADC 5B                      	pop	bx
 17303 00003ADD 58                      	pop	ax
 17304                                  ;
 17305                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 17306                                  ;
 17307                                  CloseEntry:
 17308 00003ADE 50                      	PUSH	AX
 17309                                  ;
 17310                                  ; File clean or device does not get stamped nor disk looked at.
 17311                                  ;
 17312                                  	;test	bx,0C0h
 17313 00003ADF F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17314                                  	;JZ	short rdir
 17315                                  	;JMP	FREE_SFT_OK		; either clean or device
 17316 00003AE3 757A                    	jnz	short FREE_SFT_OK
 17317                                  ;
 17318                                  ; Retrieve the directory entry for the file
 17319                                  ;
 17320                                  rdir:
 17321 00003AE5 E89700                  	CALL	DirFromSFT
 17322                                  	;mov	al,5
 17323 00003AE8 B005                    	MOV	AL,error_access_denied
 17324                                  	;JNC	short clook
 17325                                  	;JMP	CloseFinish		; pretend the close worked.
 17326 00003AEA 7274                    	jc	short CloseFinish
 17327                                  clook:
 17328                                  ;
 17329                                  ; ES:DI points to entry
 17330                                  ; DS:SI points to SFT
 17331                                  ; ES:BX points to buffer header
 17332                                  ;
 17333 00003AEC 57                      	push	di
 17334 00003AED 56                      	push	si
 17335                                  	;lea	si,[si+20h] ; MSDOS 3.3
 17336 00003AEE 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 17337                                  ;
 17338                                  ; ES:DI point to directory entry
 17339                                  ; DS:SI point to unpacked name
 17340                                  ;
 17341 00003AF1 E887E4                  	call	XCHGP
 17342                                  ;
 17343                                  ; ES:DI point to unpacked name
 17344                                  ; DS:SI point to directory entry
 17345                                  ;
 17346 00003AF4 E85A0C                  	call	MetaCompare
 17347 00003AF7 E881E4                  	call	XCHGP
 17348 00003AFA 5E                      	pop	si
 17349 00003AFB 5F                      	pop	di
 17350 00003AFC 740B                    	JZ	short CLOSE_GO		; Name OK
 17351                                  Bye:	
 17352 00003AFE 89F7                    	MOV	DI,SI
 17353 00003B00 1E                      	PUSH	DS
 17354 00003B01 07                      	POP	ES			; ES:DI points to SFT
 17355 00003B02 16                      	PUSH	SS
 17356 00003B03 1F                      	POP	DS
 17357 00003B04 F9                      	STC
 17358                                  	;mov	al,2
 17359 00003B05 B002                    	MOV	AL,error_file_not_found
 17360 00003B07 EB57                    	JMP	short CloseFinish
 17361                                  
 17362                                  CLOSE_GO:
 17363                                  	; MSDOS 6.0
 17364                                  	;TEST	[SI+SF_ENTRY.sf_mode],sf_isFCB	; FCB ?
 17365                                  	;JZ	short nofcb		; no, set dir attr, sf_attr
 17366                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17367                                  	;mov	ch,[es:di+0Bh]
 17368 00003B09 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 17369                                  	;mov	al,[si+4]
 17370 00003B0D 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 17371                                  
 17372                                  ;hkn; SS override
 17373 00003B10 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17374                                  	; MSDOS 3.3
 17375 00003B14 E8B90F                  	call	MatchAttributes
 17376 00003B17 75E5                    	JNZ	short Bye		; attributes do not match
 17377                                  	;JMP	SHORT setattr		;FT.
 17378                                  	; MSDOS 6.0
 17379                                  ;nofcb:
 17380                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 17381                                  	;MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 17382                                  setattr:
 17383                                  	; MSDOS 3.3 (& MSDOS6.0)
 17384                                  	;or	byte [es:di+0Bh],20h
 17385 00003B19 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 17386                                  	; MSDOS6.0
 17387                                  	;MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 17388                                  					;F.O. save old first cluster
 17389                                  ;hkn; SS override
 17390                                  	;MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 17391                                  
 17392                                  	;mov	ax,[si+0Bh]
 17393 00003B1E 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 17394                                  	;mov	[es:di+1Ah],ax
 17395 00003B21 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 17396                                  	;mov	ax,[si+11h]
 17397 00003B25 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 17398                                  	;mov	[es:di+1Ch],ax
 17399 00003B28 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 17400                                  	;mov	ax,[si+13h]
 17401 00003B2C 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 17402                                  	;mov	[es:di+1Eh],ax
 17403 00003B2F 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 17404                                  	;mov	ax,[si+0Fh]
 17405 00003B33 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 17406                                  	;mov	[es:di+18h],ax
 17407 00003B36 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 17408                                  	;mov	ax,[si+0Dh]
 17409 00003B3A 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 17410                                  	;mov	[es:di+16h],ax
 17411 00003B3D 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 17412                                  
 17413                                  	; MSDOS 6.0
 17414                                  ;; File Tagging
 17415                                  	;TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 17416                                  	;			  ;LB. if already dirty		    ;AN000;
 17417                                  	;JNZ	short yesdirty	  ;LB.  don't increment dirty count ;AN000;
 17418                                  	;call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 17419                                  	; MSDOS 3.3 (& MSDOS6.0)
 17420                                  	;or	byte [es:bx+5],40h
 17421 00003B41 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 17422                                  yesdirty:
 17423 00003B46 1E                      	push	ds
 17424 00003B47 56                      	push	si
 17425                                  	; MSDOS 6.0
 17426                                  	;MOV	CX,[SI.sf_firclus]	; do this for Fastopen
 17427                                  
 17428                                  ;hkn; SS override
 17429                                  	;MOV	AL,[SS:THISDRV]
 17430                                  	; MSDOS3.3 
 17431 00003B48 16                      	push	ss
 17432 00003B49 1F                      	pop	ds
 17433 00003B4A A0[1105]                	MOV	AL,[THISDRV]
 17434                                  ;;; 10/1/86  update fastopen cache
 17435                                  	; MSDOS 3.3 (& MSDOS6.0)
 17436 00003B4D 52                      	PUSH	DX
 17437 00003B4E B400                    	MOV	AH,0			; dir entry update
 17438 00003B50 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 17439                                  	; MSDOS 6.0
 17440                                  	;OR	CX,CX			;AN005; first cluster 0; may be truncated
 17441                                  	;JNZ	short do_update2	;AN005; no, do update
 17442                                  	;MOV	AH,3			;AN005; do a delete cache entry
 17443                                  	;MOV	DI,[SI+SF_ENTRY.sf_dirsec]   ;AN005; cx:di = dir sector
 17444                                  	;MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 17445                                  	;MOV	DH,[SI+SF_ENTRY.sf_dirpos]   ;AN005; dh= dir pos
 17446                                  	;JMP	SHORT do_update 	;AN011;F.O.
 17447                                  ;do_update2:				;AN011;F.O.
 17448                                  ;hkn; SS override fort OLD_FIRSTCLUS
 17449                                  	;CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 17450                                  	;JZ	short do_update		;AN011;F.O. yes
 17451                                  	;MOV	AH,2			;AN011;F.O. delete the old entry
 17452                                  	;MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 17453                                  do_update:				;AN005;
 17454                                  ;hkn; SS is DOSDATA
 17455                                  	;Context DS
 17456                                  	;push	ss
 17457                                  	;pop	ds	
 17458                                  	; MSDOS 3.3 (& MSDOS6.0)
 17459 00003B52 E8B4F8                  	call	FastOpen_Update 	; invoke fastopen
 17460 00003B55 5A                      	POP	DX
 17461                                  
 17462                                  ;;; 10/1/86  update fastopen cache
 17463 00003B56 E8D523                  	call	FLUSHBUF		; flush all relevant buffers
 17464 00003B59 5F                      	pop	di
 17465 00003B5A 07                      	pop	es
 17466                                  	;mov	al,5
 17467 00003B5B B005                    	MOV	AL,error_access_denied
 17468 00003B5D 7201                    	JC	short CloseFinish
 17469                                  FREE_SFT_OK:
 17470 00003B5F F8                      	CLC				; signal no error.
 17471                                  CloseFinish:
 17472                                  ;
 17473                                  ; Indicate to the device that the SFT is being closed.
 17474                                  ;
 17475                                  ;;;; 7/21/86
 17476 00003B60 9C                      	PUSHF				; save flag from DirFromSFT
 17477 00003B61 E81913                  	call	DEV_CLOSE_SFT
 17478 00003B64 9D                      	POPF
 17479                                  ;;;; 7/21/86
 17480                                  ;
 17481                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 17482                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 17483                                  ; going to be moving from busy to free.
 17484                                  ;
 17485 00003B65 59                      	POP	CX			; get old ref count
 17486 00003B66 9C                      	PUSHF
 17487 00003B67 49                      	DEC	CX			; if cx != 1
 17488 00003B68 7503                    	JNZ	short NoFree		; then do NOT free SFT
 17489 00003B6A 26890D                  	mov	[es:di],cx
 17490                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 17491                                  NoFree:
 17492 00003B6D E8FDE4                  	call	LcritDisk
 17493 00003B70 9D                      	POPF
 17494 00003B71 C3                      	retn
 17495                                  
 17496                                  ;---------------------------------------------------------------------------
 17497                                  ;
 17498                                  ; Procedure Name : FREE_SFT
 17499                                  ;
 17500                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 17501                                  ; Flags preserved. Return old ref count in AX
 17502                                  ;
 17503                                  ; Note that busy is indicated by the SFT ref count being -1.
 17504                                  ;
 17505                                  ;---------------------------------------------------------------------------
 17506                                  
 17507                                  FREE_SFT:
 17508 00003B72 9C                      	PUSHF		; Save carry state
 17509 00003B73 268B05                  	mov	ax,[es:di]
 17510                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17511 00003B76 48                      	DEC	AX
 17512 00003B77 7501                    	JNZ	short SetCount
 17513 00003B79 48                      	DEC	AX
 17514                                  SetCount:
 17515 00003B7A 268705                  	xchg	ax,[es:di]
 17516                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17517 00003B7D 9D                      	POPF
 17518 00003B7E C3                      	retn
 17519                                  
 17520                                  ;----------------------------------------------------------------------------
 17521                                  ;
 17522                                  ; Procedure Name : DirFromSFT
 17523                                  ;
 17524                                  ;   DirFromSFT - locate a directory entry given an SFT.
 17525                                  ;
 17526                                  ;   Inputs:	ES:DI point to SFT
 17527                                  ;		DS = DOSDATA
 17528                                  ;   Outputs:
 17529                                  ;		EXTERR_LOCUS = errLOC_Disk
 17530                                  ;		CurBuf points to buffer
 17531                                  ;		Carry Clear -> operation OK
 17532                                  ;		    ES:DI point to entry
 17533                                  ;		    ES:BX point to buffer
 17534                                  ;		    DS:SI point to SFT
 17535                                  ;		Carry SET   -> operation failed
 17536                                  ;		    registers trashified
 17537                                  ;   Registers modified: ALL
 17538                                  ;----------------------------------------------------------------------------
 17539                                  
 17540                                  DirFromSFT:
 17541                                  	;mov	byte [EXTERR_LOCUS],2
 17542 00003B7F C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 17543 00003B84 06                      	push	es
 17544 00003B85 57                      	push	di
 17545                                  	; MSDOS 3.3
 17546                                  	;mov	dx,[es:di+1Dh]
 17547 00003B86 268B551D                	MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 17548                                  	; MSDOS 6.0
 17549                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 17550                                  	;MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 17551                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 17552                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 17553                                  	; MSDOS 3.3 (& MSDOS6.0)
 17554 00003B8A 52                      	PUSH	DX
 17555 00003B8B E81C20                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 17556                                  					; [THISDPB] set
 17557 00003B8E 5A                      	POP	DX
 17558                                  	;POP	word [HIGH_SECTOR]	;F.C. >32mb
 17559 00003B8F 7225                    	JC	short PopDone
 17560 00003B91 30C0                    	XOR	AL,AL			; Pre read
 17561                                  	;mov	byte [ALLOWED],18h
 17562 00003B93 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17563 00003B98 E8EB22                  	call	GETBUFFR
 17564 00003B9B 7219                    	JC	short PopDone
 17565 00003B9D 5E                      	pop	si
 17566 00003B9E 1F                      	pop	ds			; Get back SFT pointer
 17567                                  
 17568                                  ;hkn; SS override
 17569 00003B9F 36C43E[7405]            	LES	DI,[SS:CURBUF]
 17570                                  	;or	byte [es:di+5],4
 17571 00003BA4 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 17572 00003BA9 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 17573                                  	;lea	di,[di+10h]
 17574 00003BAB 8D7D10                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 17575                                  	;mov	al,32
 17576 00003BAE B020                    	MOV	AL,dir_entry.size
 17577 00003BB0 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 17578 00003BB3 01C7                    	ADD	DI,AX			; Point at the entry
 17579 00003BB5 C3                      	retn				; carry is clear
 17580                                  
 17581                                  PopDone:
 17582 00003BB6 5F                      	pop	di
 17583 00003BB7 07                      	pop	es
 17584                                  PopDone_retn:
 17585 00003BB8 C3                      	retn
 17586                                  
 17587                                  ;----------------------------------------------------------------------------
 17588                                  ;
 17589                                  ;**	DOS_Commit - UPdate Directory Entries
 17590                                  ;
 17591                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 17592                                  ;		(DS) = DOSGROUP
 17593                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 17594                                  ;	USES	all but DS
 17595                                  ;
 17596                                  ;----------------------------------------------------------------------------
 17597                                  ;
 17598                                  
 17599                                  DOS_COMMIT:
 17600                                  	;hkn; called from srvcall. DS already set up.
 17601 00003BB9 C43E[3605]              	LES	DI,[THISSFT]
 17602                                  	;mov	bx,[es:di+5]
 17603 00003BBD 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17604                                  	;test	bx,0C0h
 17605 00003BC1 F7C3C000                	TEST	BX,devid_file_clean+devid_device ;Clears carry
 17606 00003BC5 75F1                    	jnz	short PopDone_retn
 17607                                  	;test	bx,8000h
 17608 00003BC7 F7C30080                	TEST	BX,sf_isnet
 17609 00003BCB 7406                    	JZ	short LOCAL_COMMIT
 17610                                  
 17611                                  ;IF NOT Installed
 17612                                  ;	transfer NET_COMMIT
 17613                                  ;ELSE
 17614                                  	;mov	ax,1107h
 17615 00003BCD B80711                  	MOV	AX,(MultNET<<8)|7
 17616 00003BD0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 17617                                  			; ES:DI -> SFT
 17618                                  			; SFT DPB field -> DPB of drive containing file
 17619                                  			; Return: CF set on error, AX = DOS error code
 17620                                  			; CF clear if successful
 17621 00003BD2 C3                      	retn
 17622                                  ;ENDIF
 17623                                  
 17624                                  ;
 17625                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 17626                                  ; There are three ways we can do this.	One is to enter a critical section to
 17627                                  ; protect a potential free.  The second is to increment the ref count to mask
 17628                                  ; the close decrementing.
 17629                                  ;
 17630                                  ; The proper way is to let the caller's of close decide if a decrement should
 17631                                  ; be done.  We do this by providing another entry into close after the
 17632                                  ; decrement and after the share information release.
 17633                                  ;
 17634                                  LOCAL_COMMIT:
 17635 00003BD3 E88FE4                  	call	EcritDisk
 17636                                  	; MSDOS6.0
 17637                                  	;call	EcritDisk	;PTM.
 17638 00003BD6 E80700                  	call	SetSFTTimes
 17639 00003BD9 B8FFFF                  	MOV	AX,-1
 17640 00003BDC E8FFFE                  	call	CloseEntry
 17641                                  	; MSDOS 6.0
 17642                                  	;PUSHF			;PTM.				;AN000;
 17643                                  	;call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 17644                                  	;POPF			;PTM.				;AN000;
 17645                                  	;call	LcritDisk	;PTM.				;AN000;
 17646                                  localcommit_retn:
 17647 00003BDF C3                      	retn
 17648                                  
 17649                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 17650                                  ;----------------------------------------------------------------------------
 17651                                  ;
 17652                                  ; Procedure Name : SetSFTTimes
 17653                                  ;
 17654                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 17655                                  ;   Reflect these times in other SFT's for the same file.
 17656                                  ;
 17657                                  ;   Inputs:	ES:DI point to SFT
 17658                                  ;		BX = sf_flags set apprpriately
 17659                                  ;   Outputs:	Set sft times to current time iff File & dirty & !nodate
 17660                                  ;   Registers modified: All except ES:DI, BX, AX
 17661                                  ;
 17662                                  ;----------------------------------------------------------------------------
 17663                                  
 17664                                  SetSFTTimes:
 17665                                  ;	File clean or device does not get stamped nor disk looked at.
 17666                                  	
 17667                                  	;test	bx,0C0h
 17668 00003BE0 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17669                                  	;retnz				; clean or device => no timestamp
 17670 00003BE4 75F9                    	jnz	short localcommit_retn
 17671                                  
 17672                                  ;	file and dirty. See if date is good
 17673                                  
 17674                                  	;test	bx,4000h
 17675 00003BE6 F7C30040                	TEST	BX,sf_close_nodate
 17676                                  	;retnz				; nodate => no timestamp
 17677 00003BEA 75F3                    	jnz	short localcommit_retn
 17678                                  
 17679 00003BEC 50                      	push	ax
 17680 00003BED 53                      	push	bx
 17681 00003BEE E8C5DC                  	call	DATE16			; Date/Time to AX/DX
 17682                                  	;mov	[es:di+0Fh],ax
 17683 00003BF1 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 17684                                  	;mov	[es:di+0Dh],dx
 17685 00003BF5 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 17686 00003BF9 31C0                    	XOR	AX,AX
 17687                                  ;if installed
 17688                                  	;call	JShare + 14 * 4
 17689 00003BFB FF1E[9400]              	call	far [JShare+(14*4)]	; 14 = ShSU
 17690                                  ;else
 17691                                  ;	call	ShSU
 17692                                  ;endif
 17693 00003BFF 5B                      	pop	bx
 17694 00003C00 58                      	pop	ax
 17695 00003C01 C3                      	retn
 17696                                  
 17697                                  ;============================================================================
 17698                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 17699                                  ;============================================================================
 17700                                  ; 23/07/2018 - Retro DOS v3.0
 17701                                  
 17702                                  ;TITLE DIRCALL - Directory manipulation internal calls
 17703                                  ;NAME  DIRCALL
 17704                                  
 17705                                  ;**	Low level directory manipulation routines for making removing and
 17706                                  ;	  verifying local or NET directories
 17707                                  ;
 17708                                  ;	DOS_MKDIR
 17709                                  ;	DOS_CHDIR
 17710                                  ;	DOS_RMDIR
 17711                                  ;
 17712                                  ;	Modification history:
 17713                                  ;
 17714                                  ;		Created: ARR 30 March 1983
 17715                                  
 17716                                  ;BREAK <DOS_MkDir - Make a directory entry>
 17717                                  ;---------------------------------------------------------------------------
 17718                                  ;
 17719                                  ; Procedure Name : DOS_MkDir
 17720                                  ;
 17721                                  ; Inputs:
 17722                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17723                                  ;		terminated)
 17724                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17725                                  ;		( = -1 if current dir not involved, else
 17726                                  ;		 Points to first char after last "/" of current dir part)
 17727                                  ;	[THISCDS] Points to CDS being used
 17728                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17729                                  ; Function:
 17730                                  ;	Make a new directory
 17731                                  ; Returns:
 17732                                  ;	Carry Clear
 17733                                  ;		No error
 17734                                  ;	Carry Set
 17735                                  ;	    AX is error code
 17736                                  ;		error_path_not_found
 17737                                  ;			Bad path (not in curr dir part if present)
 17738                                  ;		error_bad_curr_dir
 17739                                  ;			Bad path in current directory part of path
 17740                                  ;		error_access_denied
 17741                                  ;			Already exists, device name
 17742                                  ; DS preserved, Others destroyed
 17743                                  ;---------------------------------------------------------------------------
 17744                                  
 17745                                  ;hkn; called from path.asm. DS already set up.
 17746                                  
 17747                                  DOS_MKDIR:
 17748 00003C02 E8C2E3                  	call	TestNet
 17749 00003C05 7314                    	JNC	short LOCAL_MKDIR
 17750                                  
 17751                                  ;IF NOT Installed
 17752                                  ;	transfer NET_MKDIR
 17753                                  ;ELSE
 17754                                  	;mov	ax,1103h
 17755 00003C07 B80311                  	MOV	AX,(MultNET<<8)|3
 17756 00003C0A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 17757                                  			; SS = DOS CS
 17758                                  			; SDA first filename pointer -> fully-qualified directory name
 17759                                  			; SDA CDS pointer -> current directory
 17760                                  			; Return: CF set on error, AX = DOS error code
 17761                                  			; CF clear if successful
 17762 00003C0C C3                      	retn
 17763                                  ;ENDIF
 17764                                  
 17765                                  NODEACCERRJ:
 17766                                  	;mov	ax,5
 17767 00003C0D B80500                  	MOV	AX,error_access_denied
 17768                                  _BadRet:
 17769 00003C10 F9                      	STC
 17770 00003C11 E859E4                  	call	LcritDisk
 17771 00003C14 C3                      	retn
 17772                                  
 17773                                  PATHNFJ:
 17774 00003C15 E855E4                  	call	LcritDisk
 17775 00003C18 E920FB                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 17776                                  
 17777                                  LOCAL_MKDIR:
 17778 00003C1B E847E4                  	call	EcritDisk
 17779                                  ;
 17780                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 17781                                  ;
 17782 00003C1E 8C16[3805]              	MOV	[THISSFT+2],SS
 17783                                  
 17784                                  ;hkn; DOSDATA
 17785 00003C22 C706[3605][E003]        	MOV	WORD [THISSFT],RENBUF
 17786                                  ;
 17787                                  ;  NOTE: Need WORD PTR because MASM takes type of
 17788                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 17789                                  ;
 17790 00003C28 C706[1304]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 17791                                  				; make sure SHARER won't complain.
 17792                                  	;mov	al,10h
 17793 00003C2E B010                    	MOV	AL,attr_directory
 17794 00003C30 E8FA13                  	call	MakeNode
 17795 00003C33 72E0                    	JC	short PATHNFJ
 17796 00003C35 83F803                  	CMP	AX,3
 17797 00003C38 74D3                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 17798 00003C3A C42E[2405]              	LES	BP,[THISDPB]	; Makenode zaps this
 17799 00003C3E C53E[7405]              	LDS	DI,[CURBUF]
 17800 00003C42 29FE                    	SUB	SI,DI
 17801 00003C44 56                      	PUSH	SI		; Pointer to dir_first
 17802                                  	; MSDOS 6.0
 17803                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 17804                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17805                                  	;push	word [di+6]
 17806 00003C45 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 17807 00003C48 16                      	push	ss
 17808 00003C49 1F                      	pop	ds
 17809 00003C4A FF36[5805]              	PUSH	word [DIRSTART]	; Parent for .. entry
 17810 00003C4E 31C0                    	XOR	AX,AX
 17811 00003C50 A3[5805]                	MOV	[DIRSTART],AX	; Null directory
 17812 00003C53 E81B13                  	call	NEWDIR
 17813 00003C56 7260                    	JC	short NODEEXISTSPOPDEL ; No room
 17814 00003C58 E8540B                  	call	GETENT		; First entry
 17815 00003C5B 725B                    	JC	short NODEEXISTSPOPDEL ; Screw up
 17816 00003C5D C43E[7405]              	LES	DI,[CURBUF]
 17817                                  
 17818                                  	; MSDOS 6.0
 17819                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17820                                  	;			 ;LB. if already dirty		    ;AN000;
 17821                                  	;JNZ	short yesdirty_	 ;LB.   don't increment dirty count ;AN000;
 17822                                  	;call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 17823                                  	
 17824                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17825                                  	;or	byte [es:di+5],40h
 17826 00003C61 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17827                                  ;yesdirty_:
 17828                                  	;add	di,16
 17829 00003C66 83C710                  	ADD	DI,BUFINSIZ	; Point at buffer
 17830 00003C69 B82E20                  	MOV	AX,202EH	; ". "
 17831 00003C6C 8B16[5805]              	MOV	DX,[DIRSTART]	; Point at itself
 17832 00003C70 E89613                  	call	SETDOTENT
 17833 00003C73 B82E2E                  	MOV	AX,2E2EH	; ".."
 17834 00003C76 5A                      	POP	DX		; Parent
 17835 00003C77 E88F13                  	call	SETDOTENT
 17836 00003C7A C42E[2405]              	LES	BP,[THISDPB]
 17837                                  	;mov	byte [ALLOWED],18h
 17838 00003C7E C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17839 00003C83 5A                      	POP	DX		; Entry sector
 17840                                  	; MSDOS 6.0
 17841                                  	;POP	word [HIGH_SECTOR] ;F.C. >32mb
 17842                                  
 17843 00003C84 30C0                    	XOR	AL,AL		; Pre read
 17844 00003C86 E8FD21                  	call	GETBUFFR
 17845 00003C89 7256                    	JC	short NODEEXISTSP
 17846 00003C8B 8B16[5805]              	MOV	DX,[DIRSTART]
 17847 00003C8F C53E[7405]              	LDS	DI,[CURBUF]
 17848                                  	;or	byte [di+5],4
 17849 00003C93 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17850 00003C97 5E                      	POP	SI		; dir_first pointer
 17851 00003C98 01FE                    	ADD	SI,DI
 17852 00003C9A 8914                    	MOV	[SI],DX
 17853 00003C9C 31D2                    	XOR	DX,DX
 17854 00003C9E 895402                  	MOV	[SI+2],DX	; Zero size
 17855 00003CA1 895404                  	MOV	[SI+4],DX
 17856                                  DIRUP:
 17857                                  	; MSDOS 6.0
 17858                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 17859                                  	;			 ;LB. if already dirty 		   ;AN000;
 17860                                  	;JNZ	short yesdirty2	 ;LB.  don't increment dirty count ;AN000;
 17861                                  	;call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 17862                                  	
 17863                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17864                                  	;or	byte [di+5],40h
 17865 00003CA4 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 17866                                  ;yesdirty2:
 17867 00003CA8 16                      	push	ss
 17868 00003CA9 1F                      	pop	ds
 17869 00003CAA 268A4600                	mov	al,[es:bp]
 17870                                  	; 18/05/2019
 17871                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 17872 00003CAE E87D22                  	call	FLUSHBUF
 17873                                  	;mov	ax,5
 17874 00003CB1 B80500                  	MOV	AX,error_access_denied
 17875 00003CB4 E8B6E3                  	call	LcritDisk
 17876 00003CB7 C3                      	retn
 17877                                  
 17878                                  NODEEXISTSPOPDEL:
 17879 00003CB8 5A                      	POP	DX		; Parent
 17880 00003CB9 5A                      	POP	DX		; Entry sector
 17881                                  	; MSDOS 6.0 
 17882                                  	;POP	word [HIGH_SECTOR] ; F.C. >32mb
 17883 00003CBA C42E[2405]              	LES	BP,[THISDPB]
 17884                                  	;mov	byte [ALLOWED],18h
 17885 00003CBE C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17886 00003CC3 30C0                    	XOR	AL,AL		; Pre read
 17887 00003CC5 E8BE21                  	call	GETBUFFR
 17888 00003CC8 7217                    	JC	short NODEEXISTSP
 17889 00003CCA C53E[7405]              	LDS	DI,[CURBUF]
 17890                                  	;or	byte [di+5],4
 17891 00003CCE 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17892 00003CD2 5E                      	POP	SI		; dir_first pointer
 17893 00003CD3 01FE                    	ADD	SI,DI
 17894                                  	;sub	si,1Ah ; 26
 17895 00003CD5 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 17896 00003CD8 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 17897 00003CDB E8C6FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 17898                                  NODEEXISTS:
 17899 00003CDE E92CFF                  	JMP	NODEACCERRJ ; 10/08/2018
 17900                                  
 17901                                  NODEEXISTSP:
 17902 00003CE1 5E                      	POP	SI		; Clean stack
 17903 00003CE2 EBFA                    	JMP	short NODEEXISTS
 17904                                  
 17905                                  ;BREAK <DOS_ChDir -- Verify a directory>
 17906                                  ;----------------------------------------------------------------------------
 17907                                  ;
 17908                                  ; Procedure Name : DOS_ChDir
 17909                                  ;
 17910                                  ; Inputs:
 17911                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17912                                  ;		terminated)
 17913                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17914                                  ;		( = -1 if current dir not involved, else
 17915                                  ;		 Points to first char after last "/" of current dir part)
 17916                                  ;	[THISCDS] Points to CDS being used May not be NUL
 17917                                  ; Function:
 17918                                  ;	Validate the path for potential new current directory
 17919                                  ; Returns:
 17920                                  ;	NOTE:
 17921                                  ;	    [SATTRIB] is modified by this call
 17922                                  ;	Carry Clear
 17923                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 17924                                  ;		Caller must NOT set ID fields on a NET CDS.
 17925                                  ;	Carry Set
 17926                                  ;	    AX is error code
 17927                                  ;		error_path_not_found
 17928                                  ;			Bad path
 17929                                  ;		error_access_denied
 17930                                  ;			device or file name
 17931                                  ; DS preserved, Others destroyed
 17932                                  ;----------------------------------------------------------------------------
 17933                                  
 17934                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 17935                                  
 17936                                  DOS_CHDIR:
 17937 00003CE4 E8E0E2                  	call	TestNet
 17938 00003CE7 7306                    	JNC	short LOCAL_CHDIR
 17939                                  
 17940                                  ;IF NOT Installed
 17941                                  ;	transfer NET_CHDIR
 17942                                  ;ELSE
 17943                                  	;mov	ax,1105h
 17944 00003CE9 B80511                  	MOV	AX,(MultNET<<8)|5
 17945 00003CEC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 17946                                  			; SS = DOS CS
 17947                                  			; SDA first filename pointer -> fully-qualified directory name
 17948                                  			; SDA CDS pointer -> current directory
 17949                                  			; Return: CF set on error, AX = DOS error code
 17950                                  			; CF clear if successful
 17951 00003CEE C3                      	retn
 17952                                  ;ENDIF
 17953                                  
 17954                                  LOCAL_CHDIR:
 17955 00003CEF E873E3                  	call	EcritDisk
 17956                                  	; MSDOS 6.0
 17957                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 17958                                  	;JZ	short nojoin			   ;PTM.
 17959                                  	;MOV	word [ES:DI+curdir.ID],0FFFFH	   ;PTM.
 17960                                  ;nojoin:
 17961                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17962 00003CF2 C606[F802]00            	MOV	byte [NoSetDir],0 ; FALSE
 17963                                  	;mov	byte [SATTRIB],16h
 17964 00003CF7 C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 17965                                  				; Dir calls can find these
 17966                                  ; DOS 3.3  6/24/86 FastOpen
 17967 00003CFC 800E[6E0F]01            	OR	byte [FastOpenFlg],FastOpen_Set	   ; set fastopen flag
 17968 00003D01 E82E0B                  	call	GETPATH
 17969                                  	;PUSHF							;AN000;
 17970                                  	;AND	byte [FastOpenFlg],Fast_yes	   ; clear it all ;AC000;
 17971                                  	;POPF							;AN000;
 17972                                  ; DOS 3.3  6/24/86 FastOpen
 17973                                  
 17974                                  	; MSDOS 3.3
 17975 00003D04 C606[6E0F]00            	mov	byte [FastOpenFlg],0
 17976                                  	;mov	ax,3
 17977 00003D09 B80300                  	MOV	AX,error_path_not_found
 17978 00003D0C 7207                    	JC	short ChDirDone
 17979 00003D0E 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 17980 00003D10 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get cluster number
 17981 00003D14 F8                      	CLC
 17982                                  ChDirDone:
 17983 00003D15 E855E3                  	call	LcritDisk
 17984 00003D18 C3                      	retn
 17985                                  
 17986                                  ;BREAK <DOS_RmDir -- Remove a directory>
 17987                                  ;----------------------------------------------------------------------------
 17988                                  ;
 17989                                  ; Procedure Name : DOS_RmDir
 17990                                  ;
 17991                                  ; Inputs:
 17992                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17993                                  ;		terminated)
 17994                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17995                                  ;		( = -1 if current dir not involved, else
 17996                                  ;		 Points to first char after last "/" of current dir part)
 17997                                  ;	[THISCDS] Points to CDS being used
 17998                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17999                                  ; Function:
 18000                                  ;	Remove a directory
 18001                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 18002                                  ; Returns:
 18003                                  ;	NOTE:
 18004                                  ;	    [SATTRIB] is modified by this call
 18005                                  ;	Carry Clear
 18006                                  ;		No error
 18007                                  ;	Carry Set
 18008                                  ;	    AX is error code
 18009                                  ;		error_path_not_found
 18010                                  ;			Bad path (not in curr dir part if present)
 18011                                  ;		error_bad_curr_dir
 18012                                  ;			Bad path in current directory part of path
 18013                                  ;		error_access_denied
 18014                                  ;			device or file name, root directory
 18015                                  ;			Bad directory ('.' '..' messed up)
 18016                                  ; DS preserved, Others destroyed
 18017                                  ;----------------------------------------------------------------------------
 18018                                  
 18019                                  ;hkn; called from path.asm. DS already set up.
 18020                                  
 18021                                  DOS_RMDIR:
 18022 00003D19 E8ABE2                  	call	TestNet
 18023 00003D1C 7306                    	JNC	short LOCAL_RMDIR
 18024                                  
 18025                                  ;IF NOT Installed
 18026                                  ;	transfer NET_RMDIR
 18027                                  ;ELSE
 18028                                  	;mov	ax,1101h
 18029 00003D1E B80111                  	MOV	AX,(MultNET<<8)|1
 18030 00003D21 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 18031                                  			; SS = DOS CS
 18032                                  			; SDA first filename pointer -> fully-qualified directory name
 18033                                  			; SDA CDS pointer -> current directory
 18034                                  			; Return: CF set on error, AX = DOS error code
 18035                                  			; CF clear if successful
 18036 00003D23 C3                      	retn
 18037                                  ;ENDIF
 18038                                  
 18039                                  LOCAL_RMDIR:
 18040 00003D24 E83EE3                  	call	EcritDisk
 18041 00003D27 C606[F802]00            	MOV	byte [NoSetDir],0
 18042                                  	;mov	byte [SATTRIB],16h
 18043 00003D2C C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 18044                                  					; Dir calls can find these
 18045 00003D31 E8FE0A                  	call	GETPATH
 18046 00003D34 720C                    	JC	short NOPATH		; Path not found
 18047 00003D36 7512                    	JNZ	short NOTDIRPATH	; Path not a DIR
 18048 00003D38 8B3E[5805]              	MOV	DI,[DIRSTART]
 18049 00003D3C 09FF                    	OR	DI,DI			; Root ?
 18050 00003D3E 750D                    	JNZ	short rmdir_get_buf	; No
 18051 00003D40 EB08                    	JMP	SHORT NOTDIRPATH
 18052                                  
 18053                                  NOPATH:
 18054                                  	;mov	ax,3
 18055 00003D42 B80300                  	MOV	AX,error_path_not_found
 18056 00003D45 E9C8FE                  	JMP	_BadRet
 18057                                  
 18058                                  NOTDIRPATHPOP:
 18059                                  	; MSDOS 6.0
 18060                                  	;POP	AX			  ;F.C. >32mb
 18061 00003D48 58                      	POP	AX
 18062                                  NOTDIRPATHPOP2:
 18063 00003D49 58                      	POP	AX
 18064                                  NOTDIRPATH:
 18065 00003D4A E9C0FE                  	JMP	NODEACCERRJ
 18066                                  
 18067                                  rmdir_get_buf:
 18068 00003D4D C53E[7405]              	LDS	DI,[CURBUF]
 18069 00003D51 29FB                    	SUB	BX,DI		; Compute true offset
 18070 00003D53 53                      	PUSH	BX		; Save entry pointer
 18071                                  	
 18072                                  	; MSDOS 6.0
 18073                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 18074                                  	
 18075                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18076                                  	;push	word [di+6]
 18077 00003D54 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 18078                                  
 18079                                  ;hkn; SS is DOSDATA
 18080                                  	;context DS
 18081 00003D57 16                      	push	ss
 18082 00003D58 1F                      	pop	ds
 18083                                  	;context ES
 18084 00003D59 16                      	push	ss
 18085 00003D5A 07                      	pop	es
 18086                                  
 18087                                  ;hkn; NAME1 is in DOSDATA
 18088 00003D5B BF[E604]                	MOV	DI,NAME1
 18089 00003D5E B03F                    	MOV	AL,'?'
 18090 00003D60 B90B00                  	MOV	CX,11
 18091 00003D63 F3AA                    	REP	STOSB
 18092 00003D65 30C0                    	XOR	AL,AL
 18093 00003D67 AA                      	STOSB				; Nul terminate it
 18094 00003D68 E8510D                  	call	STARTSRCH		; Set search
 18095 00003D6B E83E0A                  	call	GETENTRY		; Get start of directory
 18096 00003D6E 72D8                    	JC	short NOTDIRPATHPOP	; Screw up
 18097 00003D70 8E1E[7605]              	MOV	DS,[CURBUF+2]
 18098 00003D74 89DE                    	MOV	SI,BX
 18099 00003D76 AD                      	LODSW
 18100                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 18101 00003D77 3D2E20                  	cmp	ax,202Eh ; ". "
 18102 00003D7A 75CC                    	JNZ	short NOTDIRPATHPOP	; Nope
 18103                                  	;add     si,30
 18104 00003D7C 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 18105 00003D7F AD                      	LODSW
 18106                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 18107                                  	;cmp	ax, '..'
 18108 00003D80 3D2E2E                  	cmp	ax,2E2Eh
 18109 00003D83 75C3                    	JNZ	short NOTDIRPATHPOP	; Nope
 18110                                  
 18111                                  ;hkn; SS is DOSDATA
 18112                                  	;context DS
 18113 00003D85 16                      	push	ss
 18114 00003D86 1F                      	pop	ds
 18115 00003D87 C706[F402]0200          	MOV	word [LASTENT],2	; Skip . and ..
 18116 00003D8D E81C0A                  	call	GETENTRY		; Get next entry
 18117 00003D90 72B6                    	JC	short NOTDIRPATHPOP	; Screw up
 18118                                  	;mov	byte [ATTRIB],16h
 18119 00003D92 C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 18120 00003D97 E81F09                  	call	SRCH			; Do a search
 18121 00003D9A 73AC                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 18122 00003D9C 803E[F602]00            	CMP	byte [FAILERR],0
 18123 00003DA1 75A5                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 18124 00003DA3 C42E[2405]              	LES	BP,[THISDPB]
 18125 00003DA7 8B1E[5805]              	MOV	BX,[DIRSTART]
 18126 00003DAB E83C17                  	call	RELEASE 		; Release data in sub dir
 18127 00003DAE 7298                    	JC	short NOTDIRPATHPOP	; Screw up
 18128 00003DB0 5A                      	POP	DX			; Sector # of entry
 18129                                  	;POP	word [HIGH_SECTOR]	; F.C. >32mb
 18130                                  	;mov	byte [ALLOWED],18h
 18131 00003DB1 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18132 00003DB6 30C0                    	XOR	AL,AL			; Pre read
 18133 00003DB8 E8CB20                  	call	GETBUFFR		; Get sector back
 18134 00003DBB 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 18135 00003DBD C53E[7405]              	LDS	DI,[CURBUF]
 18136                                  	;or	byte [di+5],4
 18137 00003DC1 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18138 00003DC5 5B                      	POP	BX			; Pointer to start of entry
 18139 00003DC6 01FB                    	ADD	BX,DI			; Corrected
 18140 00003DC8 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 18141                                  
 18142                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18143 00003DCB 1E                      	PUSH	DS
 18144                                  
 18145                                  ;hkn; SS is DOSDATA
 18146                                  	;context DS
 18147 00003DCC 16                      	push	ss
 18148 00003DCD 1F                      	pop	ds
 18149                                  
 18150                                  	; MSDOS 6.0
 18151                                  	;call	FastOpen_Delete 	; call fastopen to delete an entry
 18152                                  
 18153                                  	; MSDOS 3.3
 18154                                  _FastOpen_Delete:
 18155 00003DCE 50                      	push	ax
 18156 00003DCF 8B36[4A05]              	mov	si,[WFP_START]
 18157 00003DD3 BB[430F]                	mov	bx,FastTable
 18158                                  	;mov	al,3  ; FONC_delete
 18159 00003DD6 B003                    	mov	al,FONC_delete
 18160 00003DD8 FF5F02                  	call	far [BX+2]  ; FastTable+2
 18161 00003DDB 58                      	pop	ax
 18162                                  
 18163 00003DDC 1F                      	POP	DS
 18164                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18165                                  
 18166 00003DDD E9C4FE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 18167                                  
 18168                                  ;============================================================================
 18169                                  ; DISK.ASM, MSDOS 6.0, 1991
 18170                                  ;============================================================================
 18171                                  ; 23/07/2018 - Retro DOS v3.0 
 18172                                  
 18173                                  ;	TITLE	DISK - Disk utility routines
 18174                                  ;	NAME	Disk
 18175                                  
 18176                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 18177                                  ;
 18178                                  ;	SWAPCON
 18179                                  ;	SWAPBACK
 18180                                  ;	DOS_READ
 18181                                  ;	DOS_WRITE
 18182                                  ;	get_io_sft
 18183                                  ;	DirRead
 18184                                  ;	FIRSTCLUSTER
 18185                                  ;	SET_BUF_AS_DIR
 18186                                  ;	FATSecRd
 18187                                  ;	DREAD
 18188                                  ;	CHECK_WRITE_LOCK
 18189                                  ;	CHECK_READ_LOCK
 18190                                  ;
 18191                                  ;	Revision history:
 18192                                  ;
 18193                                  ;		A000   version 4.00  Jan. 1988
 18194                                  ;
 18195                                  ;----------------------------------------------------------------------------
 18196                                  ;
 18197                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 18198                                  ;		error happens, DOS retries the entire block assuming that
 18199                                  ;		zero characters were transferred. Modified the code to take
 18200                                  ;		into account the number of characters transfered before
 18201                                  ;		retrying the operation.
 18202                                  ;
 18203                                  ;----------------------------------------------------------------------------
 18204                                  ;
 18205                                  
 18206                                  ;Installed = TRUE
 18207                                  
 18208                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 18209                                  
 18210                                  ; **** Drivers for file input from devices ****
 18211                                  ;----------------------------------------------------------------------------
 18212                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 18213                                  ;   of handles 0 and 1
 18214                                  ;
 18215                                  ;   Inputs:	DS is DOSDATA
 18216                                  ;   Outputs:	CONSWAP is set to false.
 18217                                  ;   Registers modified: none
 18218                                  ;----------------------------------------------------------------------------
 18219                                  
 18220                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 18221                                  
 18222                                  SWAPBACK:
 18223 00003DE0 C606[0303]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 18224 00003DE5 C3                      	retn
 18225                                  
 18226                                  ;----------------------------------------------------------------------------
 18227                                  ;
 18228                                  ; Procedure Name : SWAPCON
 18229                                  ;
 18230                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 18231                                  ;
 18232                                  ;   Inputs:	ThisSFT as the sft of the desired file
 18233                                  ;		DS is DOSDATA
 18234                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 18235                                  ;   Registers modified: none
 18236                                  ;--------------------------------------------------------------------------
 18237                                  
 18238                                  SWAPCON:
 18239                                  	; MSDOS 3.3
 18240                                  	;push	es
 18241                                  	;push	di
 18242                                  	;mov	byte [CONSWAP],1
 18243                                  	;les	di,[THISSFT]
 18244                                  	;mov	word [CONSFT],di
 18245                                  	;mov	word [CONSFT+2],es
 18246                                  	;pop	di
 18247                                  	;pop	es
 18248                                  	;retn
 18249                                  
 18250                                  	; MSDOS 6.0
 18251 00003DE6 C606[0303]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 18252 00003DEB 50                      	push	ax
 18253 00003DEC A1[3605]                	mov	ax,[THISSFT]
 18254 00003DEF A3[7805]                	mov	[CONSFT],ax
 18255 00003DF2 A1[3805]                	mov	ax,[THISSFT+2]
 18256 00003DF5 A3[7A05]                	mov	[CONSFT+2],ax
 18257 00003DF8 58                      	pop	ax
 18258 00003DF9 C3                      	retn
 18259                                  
 18260                                  
 18261                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 18262                                  ;-----------------------------------------------------------------------------
 18263                                  ;
 18264                                  ; Inputs:
 18265                                  ;	ThisSFT set to the SFT for the file being used
 18266                                  ;	[DMAADD] contains transfer address
 18267                                  ;	CX = No. of bytes to read
 18268                                  ;	DS = DOSDATA
 18269                                  ; Function:
 18270                                  ;	Perform read operation
 18271                                  ; Outputs:
 18272                                  ;    Carry clear
 18273                                  ;	SFT Position and cluster pointers updated
 18274                                  ;	CX = No. of bytes read
 18275                                  ;	ES:DI point to SFT
 18276                                  ;    Carry set
 18277                                  ;	AX is error code
 18278                                  ;	CX = 0
 18279                                  ;	ES:DI point to SFT
 18280                                  ; DS preserved, all other registers destroyed
 18281                                  ;
 18282                                  ;-----------------------------------------------------------------------------
 18283                                  
 18284                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 18285                                  
 18286                                  DOS_READ:
 18287 00003DFA C43E[3605]              	LES	DI,[THISSFT]
 18288                                  
 18289                                  ; Verify that the sft has been opened in a mode that allows reading.
 18290                                  
 18291                                  	;mov	al,[es:di+2]
 18292 00003DFE 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18293                                  	;and	al,0Fh
 18294 00003E02 240F                    	AND	AL,access_mask
 18295                                  	;cmp	al,1
 18296 00003E04 3C01                    	CMP	AL,open_for_write
 18297 00003E06 7503                    	JNE	short READ_NO_MODE		;Is read or both
 18298 00003E08 E94205                  	jmp	SET_ACC_ERR
 18299                                  
 18300                                  READ_NO_MODE:
 18301 00003E0B E81904                  	call	SETUP
 18302 00003E0E E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 18303 00003E10 E8C9E1                  	call	IsSFTNet
 18304 00003E13 7408                    	JZ	short LOCAL_READ
 18305                                  
 18306                                  ;IF NOT Installed
 18307                                  ;	transfer NET_READ
 18308                                  ;ELSE
 18309                                  	;mov	ax,1108h
 18310 00003E15 B80811                  	MOV	AX,(MultNET<<8)|8
 18311 00003E18 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 18312                                  			; ES:DI -> SFT
 18313                                  			; SFT DPB field -> DPB of drive containing file
 18314                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18315                                  			; Return: CF set on error, CX = bytes read
 18316 00003E1A C3                      	retn
 18317                                  ;ENDIF
 18318                                  
 18319                                  ; The user ended up requesting 0 bytes of input.  We do nothing for this case
 18320                                  ; except return immediately.
 18321                                  
 18322                                  NoIORet:
 18323 00003E1B F8                      	CLC
 18324 00003E1C C3                      	retn
 18325                                  
 18326                                  LOCAL_READ:
 18327                                  	;test	word [es:di+5],80h
 18328 00003E1D 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 18329 00003E23 750F                    	JNZ	short READDEV
 18330                                  	;mov	byte [EXTERR_LOCUS],2
 18331 00003E25 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18332 00003E2A E838E2                  	call	EcritDisk
 18333 00003E2D E8D804                  	call	DISKREAD
 18334                                  
 18335                                  critexit:
 18336 00003E30 E83AE2                  	call	LcritDisk
 18337 00003E33 C3                      	retn
 18338                                  
 18339                                  ; We are reading from a device. Examine the status of the device to see if we
 18340                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 18341                                  ; null device, we can safely indicate no transfer.
 18342                                  
 18343                                  READDEV:
 18344                                  	;mov	byte [EXTERR_LOCUS],4
 18345 00003E34 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18346                                  	;mov	bl,[es:di+5]
 18347 00003E39 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18348 00003E3D C43E[DA02]              	LES	DI,[DMAADD]
 18349                                  	;test	bl,40h
 18350 00003E41 F6C340                  	test	BL,devid_device_EOF	; End of file?
 18351 00003E44 7407                    	JZ	short ENDRDDEVJ3
 18352                                  	;test	bl,4
 18353 00003E46 F6C304                  	test	BL,devid_device_null	; NUL device?
 18354 00003E49 7405                    	JZ	short TESTRAW 		; NO
 18355 00003E4B 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 18356                                  ENDRDDEVJ3:
 18357 00003E4D E9BC00                  	JMP	ENDRDDEVJ2
 18358                                  
 18359                                  ;
 18360                                  ; We need to hit the device.  Figure out if we do a raw read or we do the
 18361                                  ; bizarre std_con_string_input.
 18362                                  ;
 18363                                  TESTRAW:
 18364                                  	;test	bl,20h
 18365 00003E50 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 18366 00003E53 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 18367                                  	;test	bl,1
 18368 00003E55 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 18369 00003E58 7447                    	JZ	short NOTRDCON
 18370 00003E5A E9E500                  	JMP	READCON
 18371                                  
 18372                                  DVRDRAW:
 18373 00003E5D 06                      	PUSH	ES
 18374 00003E5E 1F                      	POP	DS			; Xaddr to DS:DI
 18375                                  
 18376                                  	; MSDOS 6.0
 18377                                  ;SR;
 18378                                  ;Check for win386 presence -- if present, do polled read of characters
 18379                                  ;
 18380                                  	;test	byte [ss:IsWIN386],1
 18381                                  	;jz	short ReadRawRetry	;not present
 18382                                  	;test	bl,devid_device_con_in	;is it console device
 18383                                  	;jz	short ReadRawRetry	;no, do normal read
 18384                                  	;jmp	do_polling		;yes, do win386 polling loop
 18385                                  
 18386                                  ReadRawRetry:
 18387 00003E5F 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 18388 00003E61 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18389 00003E63 89C2                    	MOV	DX,AX			; Start at 0
 18390 00003E65 E8B710                  	call	SETREAD
 18391 00003E68 1E                      	PUSH	DS			; Save Seg part of Xaddr
 18392                                  
 18393                                  ;hkn; SS override
 18394 00003E69 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18395 00003E6E E88710                  	call	DEVIOCALL
 18396 00003E71 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 18397 00003E73 B486                    	MOV	AH,86H			; Read error
 18398                                  
 18399                                  ;hkn; SS override
 18400 00003E75 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18401                                  	; MSDOS 3.3
 18402                                  	;test	di,8000h
 18403                                  	;jz	short CRDROK
 18404                                  	; MSDOS 6.0
 18405 00003E7A 09FF                    	or	di,di
 18406 00003E7C 7919                    	jns	short CRDROK		; no errors
 18407                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18408 00003E7E E8AA19                  	call	CHARHARD
 18409 00003E81 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 18410                                  
 18411                                  	; MSDOS 6.0
 18412                                  	;add	di,[ss:callscnt]	; update ptr and count to reflect the	M065
 18413                                  	;sub	cx,[ss:callscnt]	; number of chars xferred		M065
 18414                                  
 18415                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18416 00003E83 08C0                    	OR	AL,AL
 18417 00003E85 7410                    	JZ	short CRDROK		; Ignore
 18418 00003E87 3C03                    	CMP	AL,3
 18419 00003E89 7403                    	JZ	short CRDFERR 		; fail.
 18420 00003E8B 1F                      	POP	DS			; Recover saved seg part of Xaddr
 18421                                  	; 19/05/2019
 18422 00003E8C EBD1                    	JMP	short ReadRawRetry	; Retry
 18423                                  
 18424                                  ;
 18425                                  ; We have encountered a device-driver error.  We have informed the user of it
 18426                                  ; and he has said for us to fail the system call.
 18427                                  ;
 18428                                  CRDFERR:
 18429 00003E8E 5F                      	POP	DI			; Clean stack
 18430                                  DEVIOFERR:
 18431                                  
 18432                                  ;hkn; SS override
 18433 00003E8F 36C43E[3605]            	LES	DI,[SS:THISSFT]
 18434 00003E94 E9B404                  	jmp	SET_ACC_ERR_DS
 18435                                  
 18436                                  CRDROK:
 18437 00003E97 5F                      	POP	DI			; Chuck saved seg of Xaddr
 18438 00003E98 89D7                    	MOV	DI,DX
 18439                                  
 18440                                  ;hkn; SS override
 18441 00003E9A 36033E[1803]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 18442 00003E9F EBAC                    	JMP	SHORT ENDRDDEVJ3
 18443                                  
 18444                                  ; We are going to do a cooked read on some character device. There is a
 18445                                  ; problem here, what does the data look like? Is it a terminal device, line
 18446                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 18447                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 18448                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 18449                                  ; included in data). this "simulates" the way con works in cooked mode
 18450                                  ; reading one line at a time. With file data, however, the lines will look
 18451                                  ; like, LF line CR. This is a little weird.
 18452                                  
 18453                                  NOTRDCON:
 18454 00003EA1 8CC0                    	MOV	AX,ES
 18455 00003EA3 8ED8                    	MOV	DS,AX
 18456 00003EA5 89FB                    	MOV	BX,DI
 18457 00003EA7 31D2                    	XOR	DX,DX
 18458 00003EA9 89D0                    	MOV	AX,DX
 18459 00003EAB 51                      	PUSH	CX
 18460 00003EAC B90100                  	MOV	CX,1
 18461 00003EAF E86D10                  	call	SETREAD
 18462 00003EB2 59                      	POP	CX
 18463                                  
 18464                                  ;hkn; SS override
 18465 00003EB3 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18466                                  	;lds	si,[si+7]
 18467 00003EB8 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18468                                  DVRDLP:
 18469 00003EBB E89817                  	call	DSKSTATCHK
 18470 00003EBE E83A10                  	call	DEVIOCALL2
 18471 00003EC1 57                      	PUSH	DI		; Save "count" done
 18472 00003EC2 B486                    	MOV	AH,86H
 18473                                  
 18474                                  ;hkn; SS override
 18475 00003EC4 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18476                                  	
 18477                                  	; MSDOS 3.3
 18478                                  	;test	di, 8000h
 18479                                  	;jz	short CRDOK
 18480                                  	; MSDOS 6.0
 18481 00003EC9 09FF                    	or	di,di
 18482 00003ECB 7917                    	jns	short CRDOK
 18483                                  	
 18484 00003ECD E85B19                  	call	CHARHARD
 18485 00003ED0 5F                      	POP	DI
 18486                                  
 18487                                  ;hkn; SS override
 18488 00003ED1 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18489 00003ED8 3C01                    	CMP	AL,1
 18490 00003EDA 74DF                    	JZ	short DVRDLP		;Retry
 18491 00003EDC 3C03                    	CMP	AL,3
 18492 00003EDE 74AF                    	JZ	short DEVIOFERR		; FAIL
 18493 00003EE0 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 18494 00003EE2 EB12                    	JMP	SHORT DVRDIGN
 18495                                  
 18496                                  CRDOK:
 18497 00003EE4 5F                      	POP	DI
 18498                                  
 18499                                  ;hkn; SS override
 18500 00003EE5 36833E[1803]01          	CMP	word [SS:CALLSCNT],1
 18501 00003EEB 751F                    	JNZ	short ENDRDDEVJ2
 18502 00003EED 1E                      	PUSH	DS
 18503                                  
 18504                                  ;hkn; SS override
 18505 00003EEE 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18506 00003EF3 8A05                    	MOV	AL,[DI]			; Get the character we just read
 18507 00003EF5 1F                      	POP	DS
 18508                                  DVRDIGN:
 18509                                  
 18510                                  ;hkn; SS override
 18511 00003EF6 36FF06[1403]            	INC	WORD [SS:CALLXAD]	; Next character
 18512 00003EFB 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18513 00003F02 47                      	INC	DI			; Next character
 18514 00003F03 3C1A                    	CMP	AL,1AH			; ^Z?
 18515 00003F05 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 18516 00003F07 3C0D                    	CMP	AL,c_CR 		; CR?
 18517 00003F09 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 18518 00003F0B 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 18519                                  					;  AX=FFFF which is not likely
 18520                                  ENDRDDEVJ2:
 18521 00003F0C EB1F                    	JMP	short ENDRDDEV		;changed short to long for win386
 18522                                  
 18523                                  	;  MSDOS 6.0
 18524                                  ;;SR;
 18525                                  ;;Polling code for raw read on CON when WIN386 is present
 18526                                  ;;
 18527                                  ;;At this point -- ds:di is transfer address
 18528                                  ;;		  cx is count
 18529                                  ;;
 18530                                  ;
 18531                                  ;do_polling:
 18532                                  ;	mov	bx,di			;ds:bx is Xfer address
 18533                                  ;	xor	ax,ax
 18534                                  ;	mov	dx,ax
 18535                                  ;	call	setread			;prepare device packet
 18536                                  ;
 18537                                  ;do_io:
 18538                                  ;;
 18539                                  ;;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 18540                                  ;;
 18541                                  ;	mov	byte ptr es:[bx+2],DEVRDND	;Change command code
 18542                                  ;	push	ds
 18543                                  ;	lds	si,[THISSFT]		;get device header
 18544                                  ;	call	deviocall		;call device driver
 18545                                  ;	pop	ds
 18546                                  ;	
 18547                                  ;	test	es:[bx.REQSTAT],STERR	;check if error
 18548                                  ;	jz	check_busy		;no
 18549                                  ;
 18550                                  ;	push	ds
 18551                                  ;	mov	dx,di
 18552                                  ;	invoke 	charhard		;invoke int 24h handler
 18553                                  ;	mov	di,dx
 18554                                  ;	or	al,al
 18555                                  ;	jz	pop_done_read		;ignore by user, assume read done
 18556                                  ;	cmp	al,3
 18557                                  ;	jz	devrderr		;user asked to fail
 18558                                  ;	pop	ds
 18559                                  ;	jmp	do_io			;user asked to retry
 18560                                  ;
 18561                                  ;check_busy:
 18562                                  ;	test	es:[bx.REQSTAT],0200h	;see if busy bit set
 18563                                  ;	jnz	no_char			;yes, no character available
 18564                                  ;;
 18565                                  ;;Character is available. Read in 1 character at a time until all characters
 18566                                  ;;are read in or no character is available
 18567                                  ;;
 18568                                  ;	mov	byte ptr es:[bx+2],DEVRD	;command code is READ now
 18569                                  ;	mov	word ptr es:[bx+18],1		;change count to 1 character
 18570                                  ;	push	ds
 18571                                  ;	lds	si,[THISSFT]
 18572                                  ;	call	deviocall
 18573                                  ;
 18574                                  ;	mov	dx,di
 18575                                  ;	mov	ah,86h
 18576                                  ;	mov	di,es:[bx.REQSTAT]	;get returned status
 18577                                  ;	test	di,STERR		;was there an error during read?
 18578                                  ;	jz	next_char		;no,read next character
 18579                                  ;
 18580                                  ;	invoke	charhard		;invoke int 24h handler
 18581                                  ;	mov	di,dx			;restore di
 18582                                  ;	or	al,al			;
 18583                                  ;	jz	pop_done_read		;ignore by user,assume read is done
 18584                                  ;	cmp	al,3
 18585                                  ;	jz	devrderr		;user issued a 'fail',indicate error
 18586                                  ;	pop	ds
 18587                                  ;	jmp	do_io			;user issued a retry
 18588                                  ;
 18589                                  ;next_char:
 18590                                  ;	pop	ds
 18591                                  ;	mov	di,dx
 18592                                  ;	dec	cx			;decrement count
 18593                                  ;	jcxz	done_read		;all characters read in
 18594                                  ;	inc	word ptr es:[bx+14]	;update transfer address
 18595                                  ;	jmp	do_io			;read next character in
 18596                                  ;
 18597                                  ;devrderr:
 18598                                  ;	pop	di			;discard segment address
 18599                                  ;	les	di,[THISSFT]
 18600                                  ;	transfer SET_ACC_ERR_DS		;indicate error
 18601                                  ;
 18602                                  ;no_char:
 18603                                  ;;
 18604                                  ;;Since no character is available, we let win386 switch the VM out
 18605                                  ;;
 18606                                  ;	push	ax
 18607                                  ;	mov	ah,84h
 18608                                  ;	int	2ah			;indicate idle to WIN386
 18609                                  ;;
 18610                                  ;;When control returns from WIN386, we continue the raw read
 18611                                  ;;
 18612                                  ;	pop	ax
 18613                                  ;	jmp	do_io
 18614                                  ;
 18615                                  ;pop_done_read:
 18616                                  ;	pop	ds
 18617                                  ;done_read:
 18618                                  ;	add	di,[CALLSCNT]
 18619                                  ;	jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 18620                                  
 18621                                  TRANBUF:
 18622 00003F0E AC                      	LODSB
 18623 00003F0F AA                      	STOSB
 18624 00003F10 3C0D                    	CMP	AL,c_CR 	; Check for carriage return
 18625 00003F12 7503                    	JNZ	short NORMCH
 18626 00003F14 C6040A                  	MOV	BYTE [SI],c_LF
 18627                                  NORMCH:
 18628 00003F17 3C0A                    	CMP	AL,c_LF
 18629 00003F19 E0F3                    	LOOPNZ	TRANBUF
 18630 00003F1B 7507                    	JNZ	short ENDRDCON
 18631 00003F1D 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 18632 00003F1F E85BE4                  	call	OUTT		; Transmit linefeed
 18633 00003F22 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 18634                                  ENDRDCON:
 18635                                  
 18636                                  ;hkn; SS is DOSDATA
 18637 00003F24 16                      	push	ss
 18638 00003F25 1F                      	pop	ds
 18639 00003F26 E8B7FE                  	CALL	SWAPBACK
 18640 00003F29 8936[2200]              	MOV	[CONTPOS],SI
 18641                                  ENDRDDEV:
 18642                                  
 18643                                  ;hkn; SS is DOSDATA
 18644 00003F2D 16                      	push	ss
 18645 00003F2E 1F                      	pop	ds
 18646                                  
 18647 00003F2F 893E[5005]              	MOV	[NEXTADD],DI
 18648 00003F33 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 18649 00003F35 C43E[3605]              	LES	DI,[THISSFT]
 18650                                  	;and	byte [es:di+5],0BFh
 18651 00003F39 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 18652                                  					; Mark as no more data available
 18653                                  SETSFTC:
 18654 00003F3E E8ED04                  	call	SETSFT
 18655 00003F41 C3                      	retn
 18656                                  
 18657                                  READCON:
 18658 00003F42 E8A1FE                  	CALL	SWAPCON
 18659 00003F45 8B36[2200]              	MOV	SI,[CONTPOS]
 18660 00003F49 09F6                    	OR	SI,SI
 18661 00003F4B 75C1                    	JNZ	short TRANBUF
 18662 00003F4D 803E[2902]80            	CMP	BYTE [CONBUF],128
 18663 00003F52 7406                    	JZ	short GETBUF
 18664 00003F54 C706[2902]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 18665                                  GETBUF:
 18666 00003F5A 51                      	PUSH	CX
 18667 00003F5B 06                      	PUSH	ES
 18668 00003F5C 57                      	PUSH	DI
 18669                                  
 18670                                  ;hkn; CONBUF is in DOSDATA
 18671 00003F5D BA[2902]                	MOV	DX,CONBUF
 18672                                  
 18673 00003F60 E89AE1                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 18674 00003F63 5F                      	POP	DI
 18675 00003F64 07                      	POP	ES
 18676 00003F65 59                      	POP	CX
 18677                                  
 18678                                  ;hkn; CONBUF is in DOSDATA
 18679 00003F66 BE[2B02]                	MOV	SI,CONBUF+2
 18680                                  
 18681 00003F69 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 18682 00003F6C 75A0                    	JNZ	short TRANBUF
 18683 00003F6E B01A                    	MOV	AL,1AH
 18684 00003F70 AA                      	STOSB
 18685 00003F71 4F                      	DEC	DI
 18686 00003F72 B00A                    	MOV	AL,c_LF
 18687 00003F74 E806E4                  	call	OUTT		; Send linefeed
 18688 00003F77 31F6                    	XOR	SI,SI
 18689 00003F79 EBA9                    	JMP	ENDRDCON
 18690                                  
 18691                                  ; 24/07/2018 - Retro DOS v3.0
 18692                                  
 18693                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 18694                                  ;---------------------------------------------------------------------------
 18695                                  ;
 18696                                  ; Procedure Name : DOS_WRITE
 18697                                  ;
 18698                                  ; Inputs:
 18699                                  ;	ThisSFT set to the SFT for the file being used
 18700                                  ;	[DMAADD] contains transfer address
 18701                                  ;	CX = No. of bytes to write
 18702                                  ; Function:
 18703                                  ;	Perform write operation
 18704                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 18705                                  ;		to current sf_position
 18706                                  ; Outputs:
 18707                                  ;    Carry clear
 18708                                  ;	SFT Position and cluster pointers updated
 18709                                  ;	CX = No. of bytes written
 18710                                  ;	ES:DI point to SFT
 18711                                  ;    Carry set
 18712                                  ;	AX is error code
 18713                                  ;	CX = 0
 18714                                  ;	ES:DI point to SFT
 18715                                  ; DS preserved, all other registers destroyed
 18716                                  ;---------------------------------------------------------------------------
 18717                                  
 18718                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 18719                                  ;hkn; point to DOSDATA.
 18720                                  
 18721                                  DOS_WRITE:
 18722 00003F7B C43E[3605]              	LES	DI,[THISSFT]
 18723                                  	;mov	al,[ES:DI+2]
 18724 00003F7F 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18725                                  	;and	al,0Fh
 18726 00003F83 240F                    	AND	AL,access_mask
 18727                                  	;cmp	al,0
 18728 00003F85 3C00                    	CMP	AL,open_for_read
 18729 00003F87 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 18730                                  BadMode:
 18731 00003F89 E9C103                  	jmp	SET_ACC_ERR
 18732                                  
 18733                                  ;
 18734                                  ; NOTE: The following check for writting to a Read Only File is performed
 18735                                  ;	    ONLY on FCBs!!!!
 18736                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 18737                                  ;	    of a read only file which can then be written to.
 18738                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 18739                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 18740                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 18741                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 18742                                  ;	    to a read-only file.
 18743                                  ;
 18744                                  Check_FCB_RO:
 18745                                  	;test	word [es:di+2],8000h
 18746 00003F8C 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 18747 00003F92 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 18748                                  	;test	byte [es:di+4],1
 18749 00003F94 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 18750 00003F99 75EE                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 18751                                  WRITE_NO_MODE:
 18752 00003F9B E88902                  	call	SETUP
 18753 00003F9E E83BE0                  	call	IsSFTNet
 18754 00003FA1 7406                    	JZ	short LOCAL_WRITE
 18755                                  
 18756                                  ;IF NOT Installed
 18757                                  ;	transfer NET_WRITE
 18758                                  ;ELSE
 18759                                  	;mov	ax,1109h
 18760 00003FA3 B80911                  	MOV	AX,(MultNET<<8)|9
 18761 00003FA6 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 18762                                  			; ES:DI -> SFT
 18763                                  			; SFT DPB field -> DPB of drive containing file
 18764                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18765                                  			; Return: CF set on error, CX = bytes written
 18766 00003FA8 C3                      	retn
 18767                                  ;ENDIF
 18768                                  
 18769                                  LOCAL_WRITE:
 18770                                  	;test	word [es:di+5],80h
 18771 00003FA9 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 18772 00003FAF 7552                    	jnz	short WRTDEV
 18773                                  	;mov	byte [EXTERR_LOCUS],2
 18774 00003FB1 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18775 00003FB6 E8ACE0                  	call	EcritDisk
 18776                                  
 18777 00003FB9 E8A104                  	call	DISKWRITE
 18778                                  
 18779                                  	; MSDOS 6.0
 18780                                  ;; Extended Open
 18781                                  	;JC	short nocommit
 18782                                  	;LES	DI,[THISSFT]
 18783                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],auto_commit_write
 18784                                  	;JZ	short nocommit
 18785                                  	;PUSH	CX
 18786                                  	;call	DOS_COMMIT
 18787                                  	;POP	CX
 18788                                  ;nocommit:
 18789                                  ;; Extended Open
 18790 00003FBC E8AEE0                  	call	LcritDisk
 18791 00003FBF C3                      	retn
 18792                                  
 18793                                  DVWRTRAW:
 18794 00003FC0 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18795 00003FC2 E88D0F                  	call	SETWRITE
 18796 00003FC5 1E                      	PUSH	DS			; Save seg of transfer
 18797                                  
 18798                                  ;hkn; SS override
 18799 00003FC6 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18800 00003FCB E82A0F                  	call	DEVIOCALL		; DS:SI -> DEVICE
 18801                                  
 18802 00003FCE 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 18803 00003FD0 B487                    	MOV	AH,87H
 18804                                  
 18805                                  ;hkn; SS override
 18806 00003FD2 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18807                                  
 18808                                  	; MSDOS 3.3
 18809                                  	;test	di,8000h
 18810                                  	;jz	short CWRTROK
 18811                                  
 18812                                  	; MSDOS 6.0
 18813 00003FD7 09FF                    	or	di,di
 18814 00003FD9 7914                    	jns	short CWRTROK
 18815                                  	
 18816                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18817 00003FDB E84D18                  	call	CHARHARD
 18818                                  
 18819                                  	; MSDOS 6.0
 18820                                  	;sub	cx,[ss:callscnt]	; update ptr & count to reflect	M065
 18821                                  	;mov	bx,dx			; number of chars xferred	M065
 18822                                  	;add	bx,[ss:callscnt]		;				M065
 18823                                  	;mov	di,bx			;				M065
 18824                                  	
 18825                                  	; MSDOS 3.3
 18826 00003FDE 89D3                    	MOV	BX,DX			; Recall transfer addr		M065
 18827                                  
 18828                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18829 00003FE0 08C0                    	OR	AL,AL
 18830 00003FE2 740B                    	JZ	short CWRTROK 		; Ignore
 18831 00003FE4 3C03                    	CMP	AL,3
 18832 00003FE6 7403                    	JZ	short CWRFERR
 18833 00003FE8 1F                      	POP	DS			; Recover saved seg of transfer
 18834 00003FE9 EBD5                    	JMP	short DVWRTRAW		; Try again
 18835                                  
 18836                                  CWRFERR:
 18837 00003FEB 58                      	POP	AX			; Chuck saved seg of transfer
 18838 00003FEC E99FFE                  	JMP	CRDFERR 		; Will pop one more stack element
 18839                                  
 18840                                  CWRTROK:
 18841 00003FEF 58                      	POP	AX			; Chuck saved seg of transfer
 18842 00003FF0 1F                      	POP	DS
 18843 00003FF1 A1[1803]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 18844                                  ENDWRDEV:
 18845 00003FF4 C43E[3605]              	LES	DI,[THISSFT]
 18846 00003FF8 89C1                    	MOV	CX,AX
 18847 00003FFA E85304                  	call	ADDREC
 18848 00003FFD C3                      	retn
 18849                                  
 18850                                  WRTNUL:
 18851 00003FFE 89CA                    	MOV	DX,CX			;Entire transfer done
 18852                                  WRTCOOKJ:
 18853 00004000 E98D00                  	JMP	WRTCOOKDONE
 18854                                  
 18855                                  WRTDEV:
 18856                                  	;mov	byte [EXTERR_LOCUS],4
 18857 00004003 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18858                                  	;or	byte [es:di+5],40h
 18859 00004008 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 18860                                  					; Reset EOF for input
 18861                                  	;mov	bl,[es:di+5]
 18862 0000400D 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18863 00004011 31C0                    	XOR	AX,AX
 18864 00004013 E3DF                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 18865 00004015 1E                      	PUSH	DS
 18866 00004016 88D8                    	MOV	AL,BL
 18867 00004018 C51E[DA02]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 18868 0000401C 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 18869 0000401E 31D2                    	XOR	DX,DX			; Set starting point
 18870                                  	;test	al,20h
 18871 00004020 A820                    	test	AL,devid_device_raw	; Raw?
 18872                                  	;JZ	short TEST_DEV_CON
 18873                                  	;JMP	DVWRTRAW
 18874 00004022 759C                    	jnz	short DVWRTRAW
 18875                                  
 18876                                  TEST_DEV_CON:
 18877                                  	;test	al,2
 18878 00004024 A802                    	test	AL,devid_device_con_out ; Console output device?
 18879 00004026 756E                    	jnz	short WRITECON
 18880                                  	;test	al,4
 18881 00004028 A804                    	test	AL,devid_device_null
 18882 0000402A 75D2                    	JNZ	short WRTNUL
 18883 0000402C 89D0                    	MOV	AX,DX
 18884 0000402E 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 18885 00004031 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 18886 00004033 51                      	PUSH	CX
 18887 00004034 B90100                  	MOV	CX,1
 18888 00004037 E8180F                  	call	SETWRITE
 18889 0000403A 59                      	POP	CX
 18890                                  
 18891                                  ;hkn; SS override
 18892 0000403B 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18893                                  ;
 18894                                  ;SR; Removed X25 support from here
 18895                                  ;
 18896                                  	;lds	si,[si+7]
 18897 00004040 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18898                                  DVWRTLP:
 18899 00004043 E81016                  	call	DSKSTATCHK
 18900 00004046 E8B20E                  	call	DEVIOCALL2
 18901 00004049 57                      	PUSH	DI
 18902 0000404A B487                    	MOV	AH,87H
 18903                                  
 18904                                  ;hkn; SS override
 18905 0000404C 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18906                                  	
 18907                                  	; MSDOS 3.3
 18908                                  	;test	di,8000h
 18909                                  	;jz	short CWROK
 18910                                  
 18911                                  	; MSDOS 6.0
 18912 00004051 09FF                    	or	di,di
 18913 00004053 7916                    	jns	short CWROK
 18914                                  	
 18915                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18916 00004055 E8D317                  	call	CHARHARD
 18917 00004058 5F                      	POP	DI
 18918                                  
 18919                                  ;hkn; SS override
 18920 00004059 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18921 00004060 3C01                    	CMP	AL,1
 18922 00004062 74DF                    	JZ	short DVWRTLP 	; Retry
 18923 00004064 08C0                    	OR	AL,AL
 18924 00004066 740C                    	JZ	short DVWRTIGN	; Ignore
 18925                                  	; 10/08/2018
 18926 00004068 E923FE                  	JMP	CRDFERR 	; Fail, pops one stack element
 18927                                  
 18928                                  CWROK:
 18929 0000406B 5F                      	POP	DI
 18930                                  
 18931                                  ;hkn; SS override
 18932 0000406C 36833E[1803]00          	CMP	word [SS:CALLSCNT],0
 18933 00004072 741C                    	JZ	short WRTCOOKDONE
 18934                                  DVWRTIGN:
 18935 00004074 42                      	INC	DX
 18936                                  
 18937                                  ;hkn; SS override for CALLXAD
 18938 00004075 36FF06[1403]            	INC	WORD [SS:CALLXAD]
 18939 0000407A 47                      	INC	DI
 18940 0000407B 1E                      	PUSH	DS
 18941 0000407C 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18942 00004081 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 18943 00004084 1F                      	POP	DS
 18944 00004085 7409                    	JZ	short WRTCOOKDONE
 18945                                  
 18946                                  ;hkn; SS override
 18947 00004087 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18948 0000408E E2B3                    	LOOP	DVWRTLP
 18949                                  WRTCOOKDONE:
 18950 00004090 89D0                    	MOV	AX,DX
 18951 00004092 1F                      	POP	DS
 18952 00004093 E95EFF                  	JMP	ENDWRDEV ; 10/08/2018
 18953                                  
 18954                                  WRITECON:
 18955 00004096 1E                      	PUSH	DS
 18956                                  
 18957                                  ;hkn; SS is DOSDATA
 18958 00004097 16                      	push	ss
 18959 00004098 1F                      	pop	ds
 18960 00004099 E84AFD                  	CALL	SWAPCON
 18961 0000409C 1F                      	POP	DS
 18962 0000409D 89DE                    	MOV	SI,BX
 18963 0000409F 51                      	PUSH	CX
 18964                                  WRCONLP:
 18965 000040A0 AC                      	LODSB
 18966 000040A1 3C1A                    	CMP	AL,1Ah		; ^Z?
 18967 000040A3 7405                    	JZ	short CONEOF
 18968 000040A5 E8D5E2                  	call	OUTT
 18969 000040A8 E2F6                    	LOOP	WRCONLP
 18970                                  CONEOF:
 18971 000040AA 58                      	POP	AX			; Count
 18972 000040AB 29C8                    	SUB	AX,CX			; Amount actually written
 18973 000040AD 1F                      	POP	DS
 18974 000040AE E82FFD                  	CALL	SWAPBACK
 18975 000040B1 E940FF                  	JMP	ENDWRDEV
 18976                                  
 18977                                  ;---------------------------------------------------------------------------
 18978                                  ;
 18979                                  ; Procedure Name : get_io_sft
 18980                                  ;
 18981                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 18982                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more.  Otherwise, we
 18983                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 18984                                  ;
 18985                                  ;---------------------------------------------------------------------------
 18986                                  
 18987                                  GET_IO_SFT:
 18988                                  	;test	byte [SS:CONSWAP],0FFh
 18989 000040B4 36803E[0303]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 18990 000040BA 7512                    	JNZ	short GetRedir
 18991                                  GetNormal:
 18992 000040BC 16                      	push	ss
 18993 000040BD 1F                      	pop	ds
 18994 000040BE 06                      	PUSH	ES
 18995 000040BF 57                      	PUSH	DI
 18996 000040C0 E83A27                  	call	SFFromHandle
 18997 000040C3 7206                    	JC	short RET44P
 18998 000040C5 8CC6                    	MOV	SI,ES
 18999 000040C7 8EDE                    	MOV	DS,SI
 19000 000040C9 89FE                    	MOV	SI,DI
 19001                                  RET44P:
 19002 000040CB 5F                      	POP	DI
 19003 000040CC 07                      	POP	ES
 19004 000040CD C3                      	retn
 19005                                  GetRedir:
 19006 000040CE 83FB01                  	CMP	BX,1
 19007 000040D1 77E9                    	JA	short GetNormal
 19008 000040D3 36C536[7805]            	LDS	SI,[SS:CONSFT]
 19009 000040D8 F8                      	CLC
 19010                                  get_io_sft_retn:
 19011 000040D9 C3                      	retn
 19012                                  
 19013                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 19014                                  ;---------------------------------------------------------------------------
 19015                                  ;
 19016                                  ; Procedure Name : DIRREAD
 19017                                  ;
 19018                                  ; Inputs:
 19019                                  ;	AX = Directory block number (relative to first block of directory)
 19020                                  ;	ES:BP = Base of drive parameters
 19021                                  ;	[DIRSEC] = First sector of first cluster of directory
 19022                                  ;	[CLUSNUM] = Next cluster
 19023                                  ;	[CLUSFAC] = Sectors/Cluster
 19024                                  ; Function:
 19025                                  ;	Read the directory block into [CURBUF].
 19026                                  ; Outputs:
 19027                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 19028                                  ;	[SECCLUSPOS] Set
 19029                                  ;	ES:BP unchanged
 19030                                  ;	[CURBUF] Points to Buffer with dir sector
 19031                                  ;	Carry set if error (user said FAIL to I 24)
 19032                                  ; DS preserved, all other registers destroyed.
 19033                                  ;---------------------------------------------------------------------------
 19034                                  
 19035                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 19036                                  
 19037                                  DIRREAD:
 19038                                  
 19039                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 19040                                  ; the same as what is in the DPB! In the case of the root directory, we have
 19041                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 19042                                  ; by DIRStart = 0.
 19043                                  
 19044 000040DA 31D2                    	XOR	DX,DX
 19045 000040DC 833E[5805]00            	CMP	word [DIRSTART],0
 19046 000040E1 7503                    	jnz	short SubDir
 19047 000040E3 92                      	XCHG	AX,DX
 19048 000040E4 EB0C                    	JMP	short DoRead
 19049                                  
 19050                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 19051                                  
 19052                                  SubDir:
 19053 000040E6 88C2                    	MOV	DL,AL
 19054                                  	;and	dl,[es:bp+4]
 19055 000040E8 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 19056                                  
 19057                                  ;	(DX) = sector-in-cluster
 19058                                  
 19059                                  	;mov	cl,[es:bp+5]
 19060 000040EC 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19061 000040F0 D3E8                    	SHR	AX,CL
 19062                                  
 19063                                  ;	(DX) = position in cluster
 19064                                  ;	(AX) = number of clusters to skip
 19065                                  
 19066                                  DoRead:
 19067 000040F2 8816[0E05]              	MOV	[SECCLUSPOS],DL
 19068 000040F6 89C1                    	MOV	CX,AX
 19069 000040F8 88D4                    	MOV	AH,DL
 19070                                  
 19071                                  ;	(CX) = number of clusters to skip.
 19072                                  ;	(AH) = remainder
 19073                                  
 19074                                  	; MSDOS 6.0
 19075                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 19076                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 19077 000040FA 8B16[5605]              	MOV	DX,[DIRSEC]
 19078 000040FE 00E2                    	ADD	DL,AH
 19079 00004100 80D600                  	ADC	DH,0
 19080                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 19081                                  
 19082 00004103 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19083 00004107 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19084 0000410B E319                    	JCXZ	FIRSTCLUSTER
 19085                                  SKPCLLP:
 19086 0000410D E83E19                  	call	UNPACK
 19087 00004110 72C7                    	jc	short get_io_sft_retn
 19088 00004112 87DF                    	XCHG	BX,DI
 19089 00004114 E82019                  	call	IsEOF			; test for eof based on fat size
 19090 00004117 7302                    	JAE	short HAVESKIPPED
 19091 00004119 E2F2                    	LOOP	SKPCLLP
 19092                                  HAVESKIPPED:
 19093 0000411B 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19094 0000411F 89FA                    	MOV	DX,DI
 19095 00004121 88E3                    	MOV	BL,AH
 19096 00004123 E80C13                  	call	FIGREC
 19097                                  
 19098                                  	;entry	FIRSTCLUSTER
 19099                                  
 19100                                  FIRSTCLUSTER:
 19101                                  	;mov	byte [ALLOWED],18h
 19102 00004126 C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 19103 0000412B 30C0                    	XOR	AL,AL		; Indicate pre-read
 19104 0000412D E8561D                  	call	GETBUFFR
 19105 00004130 72A7                    	jc	short get_io_sft_retn
 19106                                  
 19107                                  	;entry	SET_BUF_AS_DIR
 19108                                  
 19109                                  SET_BUF_AS_DIR:
 19110                                  
 19111                                  ;	Set the type of CURBUF to be a directory sector.
 19112                                  ;	Only flags are modified.
 19113                                  
 19114 00004132 1E                      	PUSH	DS
 19115 00004133 56                      	PUSH	SI
 19116 00004134 C536[7405]              	LDS	SI,[CURBUF]
 19117                                  	;or	byte [si+5],4
 19118 00004138 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 19119 0000413C 5E                      	POP	SI
 19120 0000413D 1F                      	POP	DS
 19121                                  dirread_retn:
 19122 0000413E C3                      	retn
 19123                                  
 19124                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 19125                                  ;----------------------------------------------------------------------------
 19126                                  ;
 19127                                  ; Procedure Name : FATSECRD
 19128                                  ; Inputs:
 19129                                  ;	Same as DREAD
 19130                                  ;	DS:BX = Transfer address
 19131                                  ;	CX = Number of sectors
 19132                                  ;	DX = Absolute record number
 19133                                  ;	ES:BP = Base of drive parameters
 19134                                  ; Function:
 19135                                  ;	Calls BIOS to perform FAT read.
 19136                                  ; Outputs:
 19137                                  ;	Same as DREAD
 19138                                  ;---------------------------------------------------------------------------
 19139                                  
 19140                                  FATSECRD:
 19141                                  ;hkn; SS override
 19142                                  	;mov	byte [ss:ALLOWED],18h
 19143 0000413F 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 19144 00004145 89CF                    	MOV	DI,CX
 19145                                  	;mov	cl,[es:bp+8]
 19146 00004147 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 19147                                  	; MSDOS 6.0
 19148                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE] 	;>32mb
 19149                                  	; MSDOS 3.3
 19150                                  	;mov	al,[es:bp+0Fh]
 19151 0000414B 268A460F                	MOV	AL,[ES:BP+DPB.FAT_SIZE] 
 19152 0000414F 30E4                    	XOR	AH,AH
 19153 00004151 30ED                    	XOR	CH,CH				;>32mb
 19154 00004153 52                      	PUSH	DX
 19155                                  NXTFAT:
 19156                                  	; MSDOS 6.0
 19157                                  ;hkn; SS override
 19158                                  	;MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 19159 00004154 51                      	PUSH	CX			;32mb
 19160 00004155 50                      	PUSH	AX
 19161 00004156 89F9                    	MOV	CX,DI
 19162 00004158 E85A00                  	call	DSKREAD
 19163 0000415B 58                      	POP	AX
 19164 0000415C 59                      	POP	CX
 19165 0000415D 7420                    	JZ	short RET41P		; Carry clear
 19166 0000415F 01C2                    	ADD	DX,AX
 19167 00004161 E2F1                    	LOOP	NXTFAT
 19168 00004163 5A                      	POP	DX
 19169 00004164 89F9                    	MOV	CX,DI
 19170                                  
 19171                                  ; NOTE FALL THROUGH
 19172                                  
 19173                                  ;Break	<DREAD -- DO A DISK READ>
 19174                                  ;---------------------------------------------------------------------------
 19175                                  ;
 19176                                  ; Procedure Name : DREAD
 19177                                  ;
 19178                                  ; Inputs:
 19179                                  ;	DS:BX = Transfer address
 19180                                  ;	CX = Number of sectors
 19181                                  ;	DX = Absolute record number	      (LOW)
 19182                                  ;	[HIGH_SECTOR]= Absolute record number (HIGH)
 19183                                  ;	ES:BP = Base of drive parameters
 19184                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 19185                                  ; Function:
 19186                                  ;	Calls BIOS to perform disk read. If BIOS reports
 19187                                  ;	errors, will call HARDERRRW for further action.
 19188                                  ; Outputs:
 19189                                  ;	Carry set if error (currently user FAILED to INT 24)
 19190                                  ; DS,ES:BP preserved. All other registers destroyed.
 19191                                  ;---------------------------------------------------------------------------
 19192                                  
 19193                                  	;entry	DREAD
 19194                                  DREAD:
 19195 00004166 E84C00                  	call	DSKREAD
 19196 00004169 74D3                    	jz	short dirread_retn	; Carry clear
 19197                                  ;hkn; SS override
 19198 0000416B 36C606[1005]00          	MOV	BYTE [SS:READOP],0
 19199 00004171 E89900                  	call	HARDERRRW
 19200 00004174 3C01                    	CMP	AL,1		; Check for retry
 19201 00004176 74EE                    	JZ	short DREAD
 19202 00004178 3C03                    	CMP	AL,3		; Check for FAIL
 19203 0000417A F8                      	CLC
 19204 0000417B 7501                    	JNZ	short NO_CAR		; Ignore
 19205 0000417D F9                      	STC
 19206                                  NO_CAR:
 19207 0000417E C3                      	retn
 19208                                  RET41P: 
 19209 0000417F 5A                      	POP	DX
 19210 00004180 C3                      	retn
 19211                                  
 19212                                  ; 24/07/2018 - Retro DOS v3.0
 19213                                  
 19214                                  ;Break	<CHECK_WRITE_LOCK>
 19215                                  ;---------------------------------------------------------------------------
 19216                                  ;
 19217                                  ; Procedure Name : CHECK_WRITE_LOCK
 19218                                  ;
 19219                                  ; Inputs:
 19220                                  ;	output of SETUP
 19221                                  ;	ES:DI -> SFT
 19222                                  ; Function:
 19223                                  ;	check write lock
 19224                                  ; Outputs:
 19225                                  ;	Carry set if error
 19226                                  ;	Carry clear if ok
 19227                                  ;
 19228                                  ;----------------------------------------------------------------------------
 19229                                  
 19230                                  CHECK_WRITE_LOCK:
 19231                                  	; MSDOS 6.0
 19232                                  	;test	byte [es:di+4],8
 19233 00004181 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19234                                  	;JZ	short write_cont			     ;no
 19235                                  	;call	SET_ACC_ERR_DS		;
 19236                                  	;retn
 19237                                  	;jnz	SET_ACC_ERR_DS
 19238                                  	; 19/08/2018
 19239 00004186 7403                    	jz	short write_cont
 19240 00004188 E9C001                  	jmp	SET_ACC_ERR_DS
 19241                                  write_cont:				;
 19242 0000418B 51                      	PUSH	CX			;save reg
 19243 0000418C 09C9                    	OR	CX,CX			;
 19244 0000418E 7501                    	JNZ	short Not_Truncate	;
 19245 00004190 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 19246                                  Not_Truncate:				;
 19247 00004191 B080                    	MOV	AL,80H			;check write access
 19248 00004193 E84F31                  	call	LOCK_CHECK		;check lock
 19249 00004196 59                      	POP	CX			;restore reg
 19250 00004197 7305                    	JNC	short WRITE_OK		;lock ok
 19251 00004199 E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 19252 0000419C 73ED                    	JNC	short write_cont	;retry
 19253                                  WRITE_OK:				;
 19254 0000419E C3                      	retn				;
 19255                                  
 19256                                  ;Break	<CHECK_READ_LOCK>
 19257                                  ;---------------------------------------------------------------------------
 19258                                  ;
 19259                                  ; Procedure Name : CHECK_READ_LOC
 19260                                  ;
 19261                                  ; Inputs:
 19262                                  ;	ES:DI -> SFT
 19263                                  ;	output of SETUP
 19264                                  ; Function:
 19265                                  ;	check read lock
 19266                                  ; Outputs:
 19267                                  ;	Carry set if error
 19268                                  ;	Carry clear if ok
 19269                                  ;----------------------------------------------------------------------------
 19270                                  
 19271                                  CHECK_READ_LOCK:
 19272                                  	; MSDOS 6.0
 19273                                  	;test	byte [es:di+4],8
 19274 0000419F 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19275                                  	;JZ	short do_retry			   	     ; no
 19276                                  	;call	SET_ACC_ERR		;
 19277                                  	;retn
 19278 000041A4 0F85A501                	jnz	SET_ACC_ERR		;
 19279                                  do_retry:				;
 19280 000041A8 30C0                    	xor	al,al			;check read access
 19281 000041AA E83831                  	call	LOCK_CHECK		;check lock
 19282 000041AD 7305                    	JNC	short READLOCK_OK 	;lock ok
 19283 000041AF E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 19284 000041B2 73F4                    	JNC	short do_retry		;retry
 19285                                  READLOCK_OK:				;
 19286 000041B4 C3                      	retn				;
 19287                                  
 19288                                  ;============================================================================
 19289                                  ; DISK2.ASM, MSDOS 6.0, 1991
 19290                                  ;============================================================================
 19291                                  ; 24/07/2018 - Retro DOS v3.0 
 19292                                  
 19293                                  ;	TITLE	DISK2 - Disk utility routines
 19294                                  ;	NAME	Disk2
 19295                                  
 19296                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19297                                  ;
 19298                                  ;	DskRead
 19299                                  ;	DWRITE
 19300                                  ;	DSKWRITE
 19301                                  ;	HarderrRW
 19302                                  ;	SETUP
 19303                                  ;	BREAKDOWN
 19304                                  ;	READ_LOCK_VIOLATION
 19305                                  ;	WRITE_LOCK_VIOLATION
 19306                                  ;	DISKREAD
 19307                                  ;	SET_ACC_ERR_DS
 19308                                  ;	SET_ACC_ERR
 19309                                  ;	SETSFT
 19310                                  ;	SETCLUS
 19311                                  ;	AddRec
 19312                                  ;
 19313                                  ;	Revision history:
 19314                                  ;
 19315                                  ;		AN000 version 4.00 Jan. 1988
 19316                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 19317                                  
 19318                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 19319                                  ;---------------------------------------------------------------------------
 19320                                  ;
 19321                                  ; Procedure Name : DSKREAD
 19322                                  ;
 19323                                  ; Inputs:
 19324                                  ;	DS:BX = Transfer addr
 19325                                  ;	CX = Number of sectors
 19326                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19327                                  ;	DX = Absolute record number	       (LOW)
 19328                                  ;	ES:BP = Base of drive parameters
 19329                                  ; Function:
 19330                                  ;	Call BIOS to perform disk read
 19331                                  ; Outputs:
 19332                                  ;	DI = CX on entry
 19333                                  ;	CX = Number of sectors unsuccessfully transfered
 19334                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19335                                  ;	Zero set if OK (from BIOS) (carry clear)
 19336                                  ;	Zero clear if error (carry clear)
 19337                                  ; SI Destroyed, others preserved
 19338                                  ;---------------------------------------------------------------------------
 19339                                  
 19340                                  DSKREAD:
 19341 000041B5 51                      	PUSH	CX
 19342                                  	;mov	ah,[es:bp+16h]
 19343 000041B6 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19344                                  	;mov	al,[es:bp+1]
 19345 000041BA 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19346 000041BE 53                      	PUSH	BX
 19347 000041BF 06                      	PUSH	ES
 19348 000041C0 E85C0D                  	call	SETREAD
 19349 000041C3 EB27                    	JMP	short DODSKOP
 19350                                  
 19351                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 19352                                  ;--------------------------------------------------------------------------
 19353                                  ;
 19354                                  ; Procedure Name : DWRITE
 19355                                  ;
 19356                                  ; Inputs:
 19357                                  ;	DS:BX = Transfer address
 19358                                  ;	CX = Number of sectors
 19359                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19360                                  ;	DX = Absolute record number	       (LOW)
 19361                                  ;	ES:BP = Base of drive parameters
 19362                                  ;	[ALLOWED] must be set in case HARDERR called
 19363                                  ; Function:
 19364                                  ;	Calls BIOS to perform disk write. If BIOS reports
 19365                                  ;	errors, will call HARDERRRW for further action.
 19366                                  ; Output:
 19367                                  ;	Carry set if error (currently, user FAILed to I 24)
 19368                                  ; BP preserved. All other registers destroyed.
 19369                                  ;----------------------------------------------------------------------------
 19370                                  
 19371                                  
 19372                                  	;entry	DWRITE
 19373                                  DWRITE:
 19374 000041C5 E81600                  	CALL	DSKWRITE
 19375 000041C8 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 19376                                  
 19377                                  ;hkn; SS override
 19378 000041CA 36C606[1005]01          	MOV	BYTE [SS:READOP],1
 19379 000041D0 E83A00                  	call	HARDERRRW
 19380 000041D3 3C01                    	CMP	AL,1		; Check for retry
 19381 000041D5 74EE                    	JZ	short DWRITE
 19382 000041D7 3C03                    	CMP	AL,3		; Check for FAIL
 19383 000041D9 F8                      	CLC
 19384 000041DA 7501                    	JNZ	short NO_CAR2 	; Ignore
 19385 000041DC F9                      	STC
 19386                                  NO_CAR2:
 19387                                  dw_ret_label:
 19388 000041DD C3                      	retn
 19389                                  
 19390                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 19391                                  ;---------------------------------------------------------------------------
 19392                                  ;
 19393                                  ; Procedure Name : DSKWRITE
 19394                                  ;
 19395                                  ; Inputs:
 19396                                  ;	DS:BX = Transfer addr
 19397                                  ;	CX = Number of sectors
 19398                                  ;	DX = Absolute record number	       (LOW)
 19399                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19400                                  ;	ES:BP = Base of drive parameters
 19401                                  ; Function:
 19402                                  ;	Call BIOS to perform disk read
 19403                                  ; Outputs:
 19404                                  ;	DI = CX on entry
 19405                                  ;	CX = Number of sectors unsuccessfully transfered
 19406                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19407                                  ;	Zero set if OK (from BIOS) (carry clear)
 19408                                  ;	Zero clear if error (carry clear)
 19409                                  ; SI Destroyed, others preserved
 19410                                  ;
 19411                                  ;----------------------------------------------------------------------------
 19412                                  
 19413                                  	;entry	DSKWRITE
 19414                                  DSKWRITE:
 19415 000041DE 51                      	PUSH	CX
 19416                                  	;mov	ah,[es:bp+16h]
 19417 000041DF 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19418                                  	;mov	al,[es:bp+1]
 19419 000041E3 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19420 000041E7 53                      	PUSH	BX
 19421 000041E8 06                      	PUSH	ES
 19422 000041E9 E8660D                  	call	SETWRITE
 19423                                  DODSKOP:
 19424 000041EC 8CD9                    	MOV	CX,DS		; Save DS
 19425 000041EE 1F                      	POP	DS		; DS:BP points to DPB
 19426 000041EF 1E                      	PUSH	DS
 19427                                  	;lds	si,[ds:bp+12h]
 19428 000041F0 3EC57612                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 19429 000041F4 E8040D                  	call	DEVIOCALL2
 19430 000041F7 8ED9                    	MOV	DS,CX		; Restore DS
 19431 000041F9 07                      	POP	ES		; Restore ES
 19432 000041FA 5B                      	POP	BX
 19433                                  
 19434                                  ;hkn; SS override
 19435 000041FB 368B0E[1803]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 19436 00004200 5F                      	POP	DI
 19437 00004201 29F9                    	SUB	CX,DI
 19438 00004203 F7D9                    	NEG	CX		; Number of sectors not transferred
 19439                                  
 19440                                  ;hkn; SS override
 19441 00004205 36A1[0903]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 19442                                  	;test	ax,8000h
 19443 00004209 A90080                  	test	AX,STERR
 19444 0000420C C3                      	retn
 19445                                  
 19446                                  ;Break	<HardErrRW - map extended errors and call harderr>
 19447                                  ;---------------------------------------------------------------------------
 19448                                  ;
 19449                                  ; Procedure Name : HardErrRW
 19450                                  ;
 19451                                  ; Inputs:
 19452                                  ;	AX is error code from read or write
 19453                                  ;	Other registers set as per HARDERR
 19454                                  ; Function:
 19455                                  ;	Checks the error code for special extended
 19456                                  ;	errors and maps them if needed. Then invokes
 19457                                  ;	Harderr
 19458                                  ; Outputs:
 19459                                  ;	Of HARDERR
 19460                                  ; AX may be modified prior to call to HARDERR.
 19461                                  ; No other registers altered.
 19462                                  ;
 19463                                  ;---------------------------------------------------------------------------
 19464                                  
 19465                                  HARDERRRW:
 19466                                  	;cmp	al,0Fh
 19467 0000420D 3C0F                    	CMP	AL,error_I24_wrong_disk
 19468 0000420F 7512                    	JNZ	short DO_ERR				; Nothing to do
 19469                                  
 19470                                  	; MSDOS 3.3
 19471                                  	;push	ds
 19472                                  	;push	si
 19473                                  	;lds	si,[ss:CALLVIDRW]
 19474                                  	;mov	[ss:EXTERRPT+2], ds
 19475                                  	;mov	[ss:EXTERRPT], si
 19476                                  	;pop	si
 19477                                  	;pop	ds
 19478                                  
 19479                                  	; MSDOS 6.0
 19480 00004211 50                      	push	ax
 19481 00004212 36A1[1C03]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 19482 00004216 36A3[D602]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 19483 0000421A 36A1[1E03]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 19484 0000421E 36A3[D802]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 19485 00004222 58                      	pop	ax
 19486                                  DO_ERR:
 19487 00004223 E82316                  	call	HARDERR
 19488 00004226 C3                      	retn
 19489                                  
 19490                                  ; 24/07/2018 - Retro DOS v3.0
 19491                                  
 19492                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 19493                                  ;----------------------------------------------------------------------------
 19494                                  ;
 19495                                  ; Procedure Name : SETUP
 19496                                  ;
 19497                                  ; Inputs:
 19498                                  ;	ES:DI point to SFT (value also in THISSFT)
 19499                                  ;	DMAAdd contains transfer address
 19500                                  ;	CX = Byte count
 19501                                  ;	DS = DOSDATA
 19502                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 19503                                  ;		2nd of caller of caller.
 19504                                  ; Outputs:
 19505                                  ;	    CX = byte count
 19506                                  ;	    [THISDPB] = Base of drive parameters if file
 19507                                  ;		      = Pointer to device header if device or NET
 19508                                  ;	    ES:DI Points to SFT
 19509                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 19510                                  ;	    [TRANS] = 0 (No transfers yet)
 19511                                  ;	    BytPos = Byte position in file
 19512                                  ;
 19513                                  ;	The following fields are relevant to local files (not devices) only:
 19514                                  ;
 19515                                  ;	    SecPos = Position of first sector (local files only)
 19516                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 19517                                  ;	    [CLUSNUM] = First cluster (local files only)
 19518                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 19519                                  ;	    [THISDRV] = Physical unit number (local files only)
 19520                                  ;
 19521                                  ;      RETURNS ONE LEVEL UP WITH:
 19522                                  ;	   CX = 0
 19523                                  ;	   CARRY = Clear
 19524                                  ;	IF AN ERROR IS DETECTED
 19525                                  ; All other registers destroyed
 19526                                  ;----------------------------------------------------------------------------
 19527                                  
 19528                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 19529                                  
 19530                                  SETUP:
 19531                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 19532                                  
 19533                                  	;lds 	si,[es:di+7]
 19534 00004227 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 19535                                  
 19536                                  ;hkn; SS override
 19537 0000422B 368C1E[2605]            	MOV	[SS:THISDPB+2],DS
 19538                                  
 19539                                  ;hkn; SS is DOSDATA
 19540 00004230 16                      	push	ss
 19541 00004231 1F                      	pop	ds
 19542                                  
 19543 00004232 8936[2405]              	MOV	[THISDPB],SI
 19544                                  
 19545 00004236 8B1E[DA02]              	MOV	BX,[DMAADD]
 19546 0000423A 891E[5005]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 19547 0000423E C606[0F05]00            	MOV	BYTE [TRANS],0		;No transferes
 19548                                  	;mov	ax,[es:di+15h]
 19549 00004243 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 19550                                  	;mov	dx,[es:di+17h]
 19551 00004247 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 19552 0000424B 8916[6205]              	MOV	[BYTPOS+2],DX	;Set it
 19553 0000424F A3[6005]                	MOV	[BYTPOS],AX
 19554                                  	;test	word [es:di+5],8080h
 19555 00004252 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 19556 00004258 7536                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 19557 0000425A 06                      	PUSH	ES
 19558 0000425B C42E[2405]              	LES	BP,[THISDPB]		;Point at the DPB
 19559                                  	;mov	bl,[es:bp+0]
 19560                                  	;MOV	BL,[ES:BP+DPB.drive]
 19561 0000425F 268A5E00                	mov	bl,[es:bp]
 19562 00004263 881E[1105]              	MOV	[THISDRV],BL		;Set THISDRV
 19563                                  	;mov	bx,[es:bp+2]
 19564 00004267 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 19565                                  
 19566                                  	; MSDOS 3.3
 19567 0000426B 39DA                    	cmp	dx, bx
 19568 0000426D 7336                    	jnb	short EOFERR
 19569 0000426F F7F3                    	div	bx
 19570 00004271 A3[5A05]                	mov	[SECPOS],ax
 19571 00004274 8916[5E05]              	mov	[BYTSECPOS],dx
 19572 00004278 89C2                    	mov	dx,ax
 19573                                  	;and	al,[es:bp+4]
 19574 0000427A 26224604                	AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 19575 0000427E A2[0E05]                	mov	[SECCLUSPOS],al
 19576 00004281 89C8                    	mov	ax,cx
 19577                                  	;mov	cl,[es:bp+5]
 19578 00004283 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19579 00004287 D3EA                    	shr	dx,cl
 19580 00004289 8916[5405]              	mov	[CLUSNUM],dx
 19581 0000428D 07                      	pop	es
 19582 0000428E 89C1                    	mov	cx,ax
 19583                                  
 19584                                  	; MSDOS 6.0
 19585                                  ;M039: Optimized this section.
 19586                                          ;PUSH    CX                            ;SHR32 and DIV32 use CX.
 19587                                  	;call	DIV32			      ;DX:AX/BX = CX:AX + DX (rem)
 19588                                  	;MOV	[BYTSECPOS],DX
 19589                                  	;MOV	[SecPos],AX
 19590                                  	;MOV	[SecPos+2],CX
 19591                                  	;MOV	DX,CX
 19592                                  
 19593                                  	;MOV	BX,AX
 19594                                  	;;and	bl,[es:bp+4]
 19595                                  	;AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 19596                                  	;MOV	[SECCLUSPOS],BL
 19597                                  
 19598                                  	;call	SHR32			     ;(DX:AX SHR dpb_cluster_shift)
 19599                                  	;POP	CX			     ;CX = byte count.
 19600                                  	;JNZ	short EOFERR		     ;cluster number above 64k
 19601                                  	;CMP	AX,[ES:BP+DPB.MAX_CLUSTER]   ;>32mb    if > disk size ;AN000;
 19602                                  	;JA	short EOFERR		     ;>32mb    then EOF       ;AN000;
 19603                                  
 19604                                  	;MOV	[CLUSNUM],AX
 19605                                  	;POP	ES			     ; ES:DI point to SFT
 19606                                  ;M039
 19607                                  
 19608                                  NOSETSTUFF:
 19609 00004290 89C8                    	MOV	AX,CX		; AX = Byte count.
 19610 00004292 0306[DA02]              	ADD	AX,[DMAADD]	 ; See if it will fit in one segment
 19611 00004296 730C                    	JNC	short setup_OK		; Must be less than 64K
 19612 00004298 A1[DA02]                	MOV	AX,[DMAADD]
 19613 0000429B F7D8                    	NEG	AX		; Amount of room left in segment (know
 19614                                  				;    less than 64K since max value of CX
 19615                                  				;    is FFFF).
 19616 0000429D 7501                    	JNZ	short NoDec
 19617 0000429F 48                      	DEC	AX
 19618                                  NoDec:
 19619 000042A0 89C1                    	MOV	CX,AX		; Can do this much
 19620 000042A2 E309                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 19621                                  setup_OK:
 19622 000042A4 C3                      	retn
 19623                                  
 19624                                  EOFERR:
 19625 000042A5 07                      	POP	ES		; ES:DI point to SFT
 19626 000042A6 31C9                    	XOR	CX,CX		; No bytes read
 19627                                  ;;;;;;;;;;; 7/18/86
 19628                                  	; MSDOS 3.3
 19629 000042A8 C606[8C0F]01            	MOV	BYTE [DISK_FULL],1 ; set disk full flag
 19630                                  ;;;;;;;;;;;
 19631                                  NOROOM:
 19632 000042AD 5B                      	POP	BX		; Kill return address
 19633 000042AE F8                      	CLC
 19634 000042AF C3                      	retn			; RETURN TO CALLER OF CALLER
 19635                                  
 19636                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 19637                                  ;---------------------------------------------------------------------------
 19638                                  ;
 19639                                  ; Procedure Name : BREAKDOWN
 19640                                  ;
 19641                                  ; Inputs:
 19642                                  ;	CX = Length of disk transfer in bytes
 19643                                  ;	ES:BP = Base of drive parameters
 19644                                  ;	[BYTSECPOS] = Byte position within first sector
 19645                                  ;	DS = DOSDATA
 19646                                  ; Outputs:
 19647                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 19648                                  ;	[SECCNT] = No. of whole sectors to transfer
 19649                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 19650                                  ; AX, BX, DX destroyed. No other registers affected.
 19651                                  ;---------------------------------------------------------------------------
 19652                                  
 19653                                  BREAKDOWN:
 19654 000042B0 A1[5E05]                	MOV	AX,[BYTSECPOS]
 19655 000042B3 89CB                    	MOV	BX,CX
 19656 000042B5 09C0                    	OR	AX,AX
 19657 000042B7 740E                    	JZ	short SAVFIR	; Partial first sector?
 19658                                  	;sub	ax,[es:bp+2]
 19659 000042B9 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 19660 000042BD F7D8                    	NEG	AX		; Max number of bytes left in first sector
 19661 000042BF 29C3                    	SUB	BX,AX		; Subtract from total length
 19662 000042C1 7304                    	JAE	short SAVFIR
 19663 000042C3 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 19664 000042C5 31DB                    	XOR	BX,BX		; And no bytes are left
 19665                                  SAVFIR:
 19666 000042C7 A3[6405]                	MOV	[BYTCNT1],AX
 19667 000042CA 89D8                    	MOV	AX,BX
 19668 000042CC 31D2                    	XOR	DX,DX
 19669                                  	;div	word [ES:BP+2]
 19670 000042CE 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 19671 000042D2 A3[6805]                	MOV	[SECCNT],AX
 19672 000042D5 8916[6605]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 19673                                  	; MSDOS 3.3
 19674                                  ;	OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 19675                                  ;	retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 19676                                  ;	CMP	AX,1
 19677                                  ;	retnz
 19678                                  ;	MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 19679                                  ;	MOV	[BYTCNT2],AX
 19680                                  ;	MOV	[SECCNT],DX	; DX = 0
 19681                                  _RET45:
 19682 000042D9 C3                      	retn
 19683                                  
 19684                                  ;----------------------------------------------------------------------------
 19685                                  ;
 19686                                  ; Procedure Name : READ_LOCK_VIOLATION
 19687                                  ;
 19688                                  ; ES:DI points to SFT. This entry used by NET_READ
 19689                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 19690                                  ; Else do retrys.
 19691                                  ; ES:DI,DS,CX preserved
 19692                                  ;
 19693                                  ;----------------------------------------------------------------------------
 19694                                  
 19695                                  READ_LOCK_VIOLATION:
 19696 000042DA C606[1005]00            	MOV	byte [READOP],0
 19697                                  ERR_ON_CHECK:
 19698                                  	;test	word [es:di+2],8000h
 19699 000042DF 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 19700 000042E5 750E                    	JNZ	short HARD_ERR
 19701 000042E7 51                      	PUSH	CX
 19702 000042E8 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 19703                                  	;and	cl,0F0h
 19704 000042EC 80E1F0                  	AND	CL,SHARING_MASK
 19705                                  	;cmp	cl,0
 19706 000042EF 80F900                  	CMP	CL,SHARING_COMPAT
 19707 000042F2 59                      	POP	CX
 19708 000042F3 7505                    	JNE	short NO_HARD_ERR
 19709                                  HARD_ERR:
 19710 000042F5 E80130                  	call	LOCK_VIOLATION
 19711 000042F8 73DF                    	jnc	short _RET45		; User wants Retrys
 19712                                  NO_HARD_ERR:
 19713 000042FA 31C9                    	XOR	CX,CX			;No bytes transferred
 19714                                  	;mov	ax, 21h
 19715 000042FC B82100                  	MOV	AX,error_lock_violation
 19716 000042FF F9                      	STC
 19717 00004300 C3                      	retn
 19718                                  
 19719                                  ;----------------------------------------------------------------------------
 19720                                  ;
 19721                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 19722                                  ;
 19723                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 19724                                  ; This entry used by NET_WRITE
 19725                                  ;
 19726                                  ;----------------------------------------------------------------------------
 19727                                  
 19728                                  WRITE_LOCK_VIOLATION:
 19729 00004301 C606[1005]01            	MOV	byte [READOP],1
 19730 00004306 EBD7                    	JMP	short ERR_ON_CHECK
 19731                                  
 19732                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 19733                                  ;----------------------------------------------------------------------------
 19734                                  ;
 19735                                  ; Procedure Name : DISKREAD
 19736                                  ;
 19737                                  ; Inputs:
 19738                                  ;	Outputs of SETUP
 19739                                  ; Function:
 19740                                  ;	Perform disk read
 19741                                  ; Outputs:
 19742                                  ;    Carry clear
 19743                                  ;	CX = No. of bytes read
 19744                                  ;	ES:DI point to SFT
 19745                                  ;	SFT offset and cluster pointers updated
 19746                                  ;    Carry set
 19747                                  ;	CX = 0
 19748                                  ;	ES:DI point to SFT
 19749                                  ;	AX has error code
 19750                                  ;----------------------------------------------------------------------------
 19751                                  
 19752                                  ;hkn; called from disk.asm. DS already set up.
 19753                                  
 19754                                  DISKREAD:
 19755                                  	;mov	ax,[es:di+11h]
 19756 00004308 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 19757                                  	;mov	bx,[es:di+13h]
 19758 0000430C 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 19759 00004310 2B06[6005]              	SUB	AX,[BYTPOS]
 19760 00004314 1B1E[6205]              	SBB	BX,[BYTPOS+2]
 19761 00004318 7226                    	JB	short RDERR		;Read starts past EOF
 19762 0000431A 750A                    	JNZ	short ENUF		;More than 64k to EOF
 19763 0000431C 09C0                    	OR	AX,AX
 19764 0000431E 7420                    	JZ	short RDERR		;Read starts at EOF
 19765 00004320 39C8                    	CMP	AX,CX
 19766 00004322 7302                    	JAE	short ENUF		;I/O fits
 19767 00004324 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 19768                                  ENUF:
 19769                                  	; MSDOS 3.3
 19770                                  	;test	byte [es:di+4],8
 19771                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 19772                                  	;jnz	short SET_ACC_ERR
 19773                                  	;call	LOCK_CHECK
 19774                                  	;jnb	short _READ_OK
 19775                                  	;call	READ_LOCK_VIOLATION
 19776                                  	;jnb	short ENUF
 19777                                  	;retn
 19778                                  
 19779                                  	; MSDOS 6.0
 19780 00004326 E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 19781 00004329 7301                    	JNC	short _READ_OK 		; There are no locks
 19782 0000432B C3                      	retn
 19783                                  
 19784                                  _READ_OK:
 19785 0000432C C42E[2405]              	LES	BP,[THISDPB]
 19786 00004330 E87DFF                  	CALL	BREAKDOWN
 19787 00004333 8B0E[5405]              	MOV	CX,[CLUSNUM]
 19788 00004337 E8750F                  	call	FNDCLUS
 19789                                       	; MSDOS 6.0			;M022 conditional removed here
 19790 0000433A 720F                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 19791                                  					; migrated from 330a - HKN
 19792 0000433C 09C9                    	OR	CX,CX
 19793 0000433E 7414                    	JZ	short SKIPERR
 19794                                  RDERR:
 19795 00004340 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 19796 00004342 E9A101                  	jmp	WRTERR22
 19797                                  
 19798                                  ;RDLASTJ: 
 19799                                  	;JMP	RDLAST                  ;M039
 19800                                  
 19801                                  SETSFTJ2: 
 19802 00004345 E9E600                  	JMP	SETSFT
 19803                                  
 19804                                  CANOT_READ:
 19805                                  	; MSDOS 3.3
 19806 00004348 59                      	POP	CX		;M039.
 19807                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19808 00004349 59                      	POP	CX              ;Clean stack.
 19809 0000434A 5B                      	POP	BX
 19810                                  
 19811                                  	;entry	SET_ACC_ERR_DS
 19812                                  SET_ACC_ERR_DS:
 19813                                  ;hkn; SS is DOSDATA
 19814                                  	;Context DS
 19815 0000434B 16                      	push	ss
 19816 0000434C 1F                      	pop	ds
 19817                                  
 19818                                  	;entry	SET_ACC_ERR
 19819                                  SET_ACC_ERR:
 19820 0000434D 31C9                    	XOR	CX,CX
 19821                                  	;mov	ax,5
 19822 0000434F B80500                  	MOV	AX,error_access_denied
 19823 00004352 F9                      	STC
 19824 00004353 C3                      	retn
 19825                                  
 19826                                  SKIPERR:
 19827 00004354 8916[5205]              	MOV	[LASTPOS],DX
 19828 00004358 891E[5405]              	MOV	[CLUSNUM],BX
 19829 0000435C 833E[6405]00            	CMP	word [BYTCNT1],0
 19830 00004361 7405                    	JZ	short RDMID
 19831 00004363 E8BF0F                  	call	BUFRD
 19832 00004366 72E3                    	JC	short SET_ACC_ERR_DS
 19833                                  RDMID:
 19834 00004368 833E[6805]00            	CMP	word [SECCNT],0
 19835 0000436D 0F84A000                	JZ	RDLAST ; 10/08/2018
 19836 00004371 E82D10                  	call	NEXTSEC
 19837 00004374 72CF                    	JC	short SETSFTJ2
 19838 00004376 C606[0F05]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 19839                                  ONSEC:
 19840 0000437B 8A16[0E05]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 19841 0000437F 8B0E[6805]              	MOV	CX,[SECCNT]
 19842 00004383 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19843                                  RDLP:
 19844 00004387 E84810                  	call	OPTIMIZE
 19845 0000438A 72BF                    	JC	short SET_ACC_ERR_DS
 19846 0000438C 57                      	PUSH	DI                      ;DI = Next physical cluster.
 19847 0000438D 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 19848 0000438E 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 19849                                  	;mov	byte [ALLOWED],38h
 19850 0000438F C606[F702]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 19851 00004394 8E1E[DC02]              	MOV	DS,[DMAADD+2]
 19852                                  
 19853 00004398 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 19854 00004399 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 19855                                  
 19856                                  	; MSDOS 6.0
 19857                                  	;call	SET_RQ_SC_PARMS 	 ;LB. do this for SC ;AN000;
 19858                                  
 19859                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19860 0000439A E8C9FD                  	call	DREAD
 19861                                  
 19862                                  	; MSDOS 3.3 
 19863 0000439D 5B                      	pop	bx
 19864 0000439E 5A                      	pop	dx
 19865 0000439F 72A7                    	jc	short CANOT_READ
 19866 000043A1 01D3                    	add	bx,dx	; (bx = Extent end)
 19867 000043A3 268A4600                	mov	al,[es:bp] ; mov al,[es:bp+0]
 19868                                  	;mov	al,[ES:BP+DPB.DRIVE] 
 19869 000043A7 E8F819                  	call	SETVISIT
 19870                                  	; ->***
 19871                                  
 19872                                  ;M039
 19873                                  	; MSDOS 6.0 
 19874                                  	;pop	cx
 19875                                  	;pop	dx
 19876                                  	;pop	WORD [TEMP_VAR]
 19877                                  	;jc	short CANOT_READ
 19878                                  
 19879                                  	;mov	[TEMP_VAR2],ds
 19880                                  
 19881                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 19882                                  ;            sectors, also termed an "Extent".)
 19883                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 19884                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 19885                                  ;       ES:BP -> Drive Parameter Block (DPB).
 19886                                  ;
 19887                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 19888                                  ;	buffers must be "read" into the transfer memory block, so that the
 19889                                  ;       transfer memory reflects the most recent data.
 19890                                  
 19891                                  	;call    DskRdBufScan
 19892                                  
 19893                                  	;;Context DS
 19894                                  	;push	ss
 19895                                  	;pop	ds
 19896                                          
 19897                                  	;pop	cx
 19898                                          ;pop	bx
 19899                                  
 19900                                  ;       CX = # of sector remaining.
 19901                                  ;       BX = Next physical cluster.
 19902                                  ;M039
 19903                                  	; 25/07/2018 - Retro DOS v3.0
 19904                                  	; ***->
 19905                                  	; MSDOS 3.3
 19906                                  	; IBMDOS.COM (1987) - Offset 42BDh
 19907                                  bufq:
 19908                                  ;	DX = Extent start.
 19909                                  ;	BX = Extent end.
 19910                                  ;	 AL = Drive #.
 19911                                  ;     DS:DI-> 1st buffer in queue.
 19912                                  
 19913                                  	;or	byte [di+5],20h
 19914 000043AA 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 19915                                  	;cmp	al,[di+4]	
 19916 000043AE 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 19917 000043B1 7544                    	jnz	short bufq3
 19918                                  	;cmp	[di+6],dx
 19919 000043B3 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 19920 000043B6 723F                    	jb	short bufq3	; Jump if Extent start > buffer sector.
 19921                                  	;cmp	[di+6],bx
 19922 000043B8 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 19923 000043BB 733A                    	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 19924                                  	
 19925                                  	; Buffer sector is in the Extent (contiguous sectors to read)
 19926                                  
 19927                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 19928                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 19929                                  ;       as MRU (Most Recently Used).
 19930                                  
 19931                                  	;test	byte [di+5],40h
 19932 000043BD F6450540                	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 19933 000043C1 7431                    	jz	short bufq2	; clear buffer, check the next buff sec
 19934 000043C3 58                      	pop	ax ; transfer address
 19935 000043C4 50                      	push	ax
 19936 000043C5 57                      	push	di
 19937 000043C6 52                      	push	dx
 19938                                  	;sub	dx,[di+6]
 19939 000043C7 2B5506                  	sub	dx,[DI+BUFFINFO.buf_sector]
 19940 000043CA F7DA                    	neg	dx
 19941                                  
 19942                                  ;       DX = offset (in sectors) of buffer sector within Transfer memory
 19943                                  ;            block.
 19944                                  
 19945 000043CC 89FE                    	mov	si,di
 19946 000043CE 89C7                    	mov	di,ax
 19947 000043D0 89D0                    	mov	ax,dx
 19948                                  	;mov	cx,[es:bp+6]	
 19949 000043D2 268B4E02                	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 19950 000043D6 F7E1                    	mul	cx
 19951 000043D8 01C7                    	add	di,ax
 19952                                  
 19953 000043DA 8D7410                  	lea	si,[si+16]
 19954 000043DD 8D7410                  	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 19955 000043E0 D1E9                           	shr	cx,1
 19956 000043E2 06                      	push	es
 19957 000043E3 368E06[DC02]            	mov	es,[SS:DMAADD+2]
 19958                                  
 19959                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 19960                                  ;       DS:SI-> Buffer sector data.
 19961                                  ;       ES:DI-> Destination within Transfer memory block.
 19962                                  
 19963 000043E8 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 19964                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 19965                                  	;rep	movsb                   ;Copy last byte.
 19966 000043EA 7301                    	jnc	short bufq1
 19967 000043EC A4                      	movsb
 19968                                  bufq1:
 19969 000043ED 07                      	pop	es
 19970 000043EE 5A                      	pop	dx
 19971 000043EF 5F                      	pop	di
 19972 000043F0 268A4600                	mov	al,[es:bp]  ; mov al,[es:bp+0]
 19973                                  	;mov	al,[ES:BP+DPB.DRIVE]
 19974                                  bufq2:
 19975 000043F4 E8D819                  	call	SCANPLACE
 19976                                  bufq3:
 19977 000043F7 E8C119                  	call	SKIPVISIT
 19978 000043FA 75AE                    	jnz	short bufq
 19979                                  	
 19980 000043FC 16                      	push	ss
 19981 000043FD 1F                      	pop	ds
 19982 000043FE 59                      	pop	cx
 19983 000043FF 59                      	pop	cx
 19984 00004400 5B                      	pop	bx	
 19985                                  bufq4:
 19986 00004401 E30E                    	JCXZ	RDLAST
 19987 00004403 E83116                  	call	IsEOF			; test for eof on fat size
 19988 00004406 7326                    	JAE	short SETSFT
 19989 00004408 B200                    	MOV	DL,0
 19990 0000440A FF06[5205]              	INC	word [LASTPOS]		; We'll be using next cluster
 19991 0000440E E976FF                  	JMP	RDLP
 19992                                  
 19993                                  RDLAST:
 19994 00004411 A1[6605]                	MOV	AX,[BYTCNT2]
 19995 00004414 09C0                    	OR	AX,AX
 19996 00004416 7416                    	JZ	short SETSFT
 19997 00004418 A3[6405]                	MOV	[BYTCNT1],AX
 19998 0000441B E8830F                  	call	NEXTSEC
 19999 0000441E 720E                    	JC	short SETSFT
 20000 00004420 C706[5E05]0000          	MOV	word [BYTSECPOS],0
 20001 00004426 E8FC0E                  	call	BUFRD
 20002                                  	; 10/08/2018
 20003 00004429 7303                    	JNC	short SETSFT
 20004 0000442B E91DFF                  	JMP	SET_ACC_ERR_DS
 20005                                  
 20006                                  ;------------------------------------------------------------------------------
 20007                                  ;
 20008                                  ; Procedure Name : SETSFT
 20009                                  ; Inputs:
 20010                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 20011                                  ;		and set cluster fields
 20012                                  ; Function:
 20013                                  ;	Update [THISSFT] based on the transfer
 20014                                  ; Outputs:
 20015                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 20016                                  ;	ES:DI points to [THISSFT]
 20017                                  ;	CX No. of bytes transferred
 20018                                  ;	Carry clear
 20019                                  ;
 20020                                  ;----------------------------------------------------------------------------
 20021                                  
 20022                                  	;entry	SETSFT
 20023                                  
 20024                                  ; 26/07/2018 - Retro DOS v3.0
 20025                                  SETSFT:
 20026 0000442E C43E[3605]              	LES	DI,[THISSFT]
 20027                                  
 20028                                  ; Same as SETSFT except ES:DI already points to SFT
 20029                                  	;entry	SETCLUS
 20030                                  SETCLUS:	
 20031 00004432 8B0E[5005]              	MOV	CX,[NEXTADD]
 20032 00004436 2B0E[DA02]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 20033                                  	;test	word [es:di+5],80h
 20034 0000443A 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20035 00004440 750E                    	JNZ	short ADDREC		; don't set clusters if device
 20036 00004442 A1[5405]                	MOV	AX,[CLUSNUM]
 20037                                  	;mov	[es:di+1Bh],ax
 20038 00004445 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 20039 00004449 A1[5205]                	MOV	AX,[LASTPOS]
 20040                                  	;mov	[es:di+19h],ax
 20041 0000444C 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 20042                                  
 20043                                  ;----------------------------------------------------------------------------
 20044                                  ;
 20045                                  ; Procedure : AddRec
 20046                                  ; Inputs:
 20047                                  ;	ES:DI points to SFT
 20048                                  ;	CX is No. Bytes transferred
 20049                                  ; Function:
 20050                                  ;	Update the SFT offset based on the transfer
 20051                                  ; Outputs:
 20052                                  ;	sf_position updated to point to first byte after transfer
 20053                                  ;	ES:DI points to SFT
 20054                                  ;	CX No. of bytes transferred
 20055                                  ;	Carry clear
 20056                                  ;----------------------------------------------------------------------------
 20057                                  
 20058                                  	;entry	AddRec
 20059                                  ADDREC:
 20060 00004450 E309                    	JCXZ	RET28		; If no records read,  don't change position
 20061                                  	;add	[es:di+15h],cx
 20062 00004452 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 20063                                  	;adc	word [es:di+17h], 0
 20064 00004456 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 20065                                  RET28:	
 20066 0000445B F8                      	CLC
 20067 0000445C C3                      	retn
 20068                                  
 20069                                  ; 25/07/2018
 20070                                  ; MSDOS 6.0
 20071                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 20072                                  ;----------------------------------------------------------------------------
 20073                                  ;
 20074                                  ; Procedure Name : DskRdBufScan
 20075                                  ;
 20076                                  ; Inputs:
 20077                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 20078                                  ;            sectors, also termed an "Extent".)
 20079                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20080                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 20081                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20082                                  ;
 20083                                  ; Function:
 20084                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 20085                                  ;	"read" into the transfer memory block, so that the transfer memory
 20086                                  ;	reflects the most recent data.
 20087                                  ;
 20088                                  ; Outputs:
 20089                                  ;       Transfer memory updated as required.
 20090                                  ;
 20091                                  ; Uses:
 20092                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 20093                                  ;       SS override for all global variables.
 20094                                  ;
 20095                                  ; Notes:
 20096                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 20097                                  ;	than the FIRST.
 20098                                  ;----------------------------------------------------------------------------
 20099                                  ;M039: Created
 20100                                  
 20101                                  ;procedure   DskRdBufScan,NEAR
 20102                                  ;
 20103                                  ;ASSUME  DS:NOTHING
 20104                                  ;
 20105                                  ;	cmp	[DirtyBufferCount],0	;Any dirty buffers?
 20106                                  ;	je	bufx			; -no, skip all work.
 20107                                  ;
 20108                                  ;       mov     bx,[HIGH_SECTOR]
 20109                                  ;       mov     si,bx
 20110                                  ;       add     cx,dx
 20111                                  ;       adc     si,0
 20112                                  ;
 20113                                  ;	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 20114                                  ;       mov     ax,[di].buf_prev
 20115                                  ;       mov     [FIRST_BUFF_ADDR],ax
 20116                                  ;
 20117                                  ;       Assert  ISDPB,<ES,BP>,"DISKREAD/bufchk"
 20118                                  ;	mov	al,es:[bp].dpb_drive
 20119                                  ;
 20120                                  ;;            BX:DX = Extent start.
 20121                                  ;;            SI:CX = Extent end + 1.
 20122                                  ;;               AL = Drive #.
 20123                                  ;;            DS:DI-> 1st buffer in queue.
 20124                                  ;;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 20125                                  ;
 20126                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20127                                  ;	jne     bufq1        		;  -no, jump.
 20128                                  ;
 20129                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20130                                  ;       ja	bufq1			;Jump if Extent start > buffer sector.
 20131                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20132                                  ;       ja	bufq2                   ;Jump if Extent end >= buffer sector.
 20133                                  ;
 20134                                  ;bufq1:	cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20135                                  ;       mov     di,[di].buf_next        ; Set-up for next buffer.
 20136                                  ;       jne     bufq                    ; -no, do next buffer
 20137                                  ;
 20138                                  ;bufx:   return                          ;Exit.
 20139                                  ;
 20140                                  ;;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 20141                                  ;;	transfer memory; otherwise, just re-position it in the buffer queue
 20142                                  ;;       as MRU (Most Recently Used).
 20143                                  ;
 20144                                  ;bufq2:	SaveReg <ax>
 20145                                  ;	testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20146                                  ;	jz      bufq3                    ; -no, jump.
 20147                                  ;
 20148                                  ;        SaveReg <cx,dx,si,di,es>
 20149                                  ;
 20150                                  ;	mov     ax,dx
 20151                                  ;	sub	ax, word ptr [di].buf_sector
 20152                                  ;	neg	ax
 20153                                  ;
 20154                                  ;;       AX = offset (in sectors) of buffer sector within Transfer memory
 20155                                  ;;            block.  (Note: the upper word of the sector # may be ignored
 20156                                  ;;	     since no more than 64k bytes will ever be read.  This 64k limit
 20157                                  ;;            is imposed by the input parameters of the disk read operation.)
 20158                                  ;
 20159                                  ;	lea	si,[di].BUFINSIZ	;DS:SI -> buffer data.
 20160                                  ;	mov     cx,es:[bp].dpb_sector_size ;CX = sector size (in bytes).
 20161                                  ;	mul     cx			;AX = offset (in bytes) of buf. sector
 20162                                  ;	mov     di,WORD PTR [TEMP_VAR]
 20163                                  ;	add	di,ax
 20164                                  ;	mov	es,WORD PTR [TEMP_VAR2]
 20165                                  ;	shr	cx,1
 20166                                  ;
 20167                                  ;;	   CX = sector size (in WORDs); CF=1 if odd # of bytes.
 20168                                  ;;       DS:SI-> Buffer sector data.
 20169                                  ;;       ES:DI-> Destination within Transfer memory block.
 20170                                  ;
 20171                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 20172                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 20173                                  ;	rep	movsb                   ;Copy last byte.
 20174                                  ;	RestoreReg <es,di,si,dx,cx>
 20175                                  ;
 20176                                  ;       DS:DI -> current buffer.
 20177                                  ;
 20178                                  ;bufq3:	mov     ax,di			;DS:AX -> Current buffer.
 20179                                  ;       invoke  SCANPLACE
 20180                                  ;       cmp	ax,[FIRST_BUFF_ADDR]    ;Last buffer?
 20181                                  ;       RestoreReg <ax>
 20182                                  ;       jnz    	bufq                   	; -no, jump.
 20183                                  ;       jmp     short bufx              ; -yes, exit.
 20184                                  ;
 20185                                  ;EndProc DskRdBufScan
 20186                                  
 20187                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 20188                                  ;----------------------------------------------------------------------------
 20189                                  ;
 20190                                  ; Procedure Name : DISKWRITE
 20191                                  ;
 20192                                  ; Inputs:
 20193                                  ;       Outputs of SETUP
 20194                                  ; Function:
 20195                                  ;       Perform disk write
 20196                                  ; Outputs:
 20197                                  ;    Carry clear
 20198                                  ;       CX = No. of bytes read
 20199                                  ;       ES:DI point to SFT
 20200                                  ;       SFT offset and cluster pointers updated
 20201                                  ;    Carry set
 20202                                  ;       CX = 0
 20203                                  ;       ES:DI point to SFT
 20204                                  ;       AX has error code
 20205                                  ;----------------------------------------------------------------------------
 20206                                  
 20207                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 20208                                  
 20209                                  DISKWRITE:
 20210                                  	; MSDOS 3.3
 20211                                  	; IBMDOS.COM - Offset 436Dh
 20212                                  	;;test	byte [es:di+4],8
 20213                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 20214                                  	;jz	short write_cont
 20215                                  	;jmp	SET_ACC_ERR_DS
 20216                                  ;write_cont:
 20217                                  	;push	cx
 20218                                  	;or	cx, cx
 20219                                  	;jnz	short Not_Truncate
 20220                                  	;;mov	cx,-1
 20221                                  	;dec	cx
 20222                                  ;Not_Truncate:
 20223                                  	;call	LOCK_CHECK
 20224                                  	;pop	cx
 20225                                  	;jnb	short _WRITE_OK
 20226                                  	;call	WRITE_LOCK_VIOLATION
 20227                                  	;jnb	short DISKWRITE
 20228                                  	;retn
 20229                                  
 20230                                  	; MSDOS 6.0
 20231 0000445D E821FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 20232                                  	; 19/08/2018
 20233 00004460 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 20234 00004462 C3                      	retn
 20235                                  
 20236                                  WRTEOFJ:
 20237 00004463 E99501                  	JMP     WRTEOF
 20238                                  
 20239                                  _WRITE_OK:
 20240                                   	; 27/07/2018
 20241                                  	; IBMDOS.COM - Offset 438Eh
 20242                                  	
 20243                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20244                                  	;and	word [es:di+5],0BFBFh
 20245 00004466 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 20246                                  				; Mark file as dirty, clear no date on close
 20247                                  	; MSDOS 6.0
 20248                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 20249                                          ;MOV	[TEMP_VAR],AX                           ;M039
 20250                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 20251                                          ;MOV	[TEMP_VAR2],AX                          ;M039
 20252                                  
 20253                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 20254                                  
 20255                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20256 0000446C C42E[2405]              	LES     BP,[THISDPB]
 20257                                  
 20258 00004470 E83DFE                  	call	BREAKDOWN
 20259                                  
 20260 00004473 A1[6005]                	MOV     AX,[BYTPOS]
 20261 00004476 8B16[6205]              	MOV     DX,[BYTPOS+2]
 20262 0000447A E3E7                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 20263 0000447C 01C8                    	ADD     AX,CX
 20264 0000447E 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 20265                                  
 20266                                  	;mov	bx,[es:bp+2]
 20267 00004481 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 20268                                  
 20269                                  	; MSDOS 6.0
 20270                                  	;CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 20271                                  	;MOV	SI,AX
 20272                                          ;MOV	[HIGH_SECTOR],CX
 20273                                  
 20274                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 20275                                  
 20276                                  	;OR	DX,DX
 20277                                  	;PUSH	DX			;M039: Free DX for use by SHR32
 20278                                  	;MOV	DX,CX			;M039
 20279                                  	;JNZ	short CALCLUS
 20280                                  	;SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 20281                                  	;SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 20282                                  
 20283                                  	; MSDOS 3.3
 20284 00004485 39DA                    	cmp	dx,bx
 20285 00004487 7360                    	jnb	short WRTERR33
 20286 00004489 F7F3                    	div	bx
 20287 0000448B 89C3                    	mov	bx,ax
 20288 0000448D 09D2                    	OR	DX,DX
 20289 0000448F 7501                    	JNZ	short CALCLUS
 20290 00004491 48                      	dec	ax
 20291                                  
 20292                                  CALCLUS:
 20293                                  	; MSDOS 3.3
 20294                                  	;mov	cl,[es:bp+5]
 20295 00004492 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20296 00004496 D3E8                    	shr	ax,cl
 20297 00004498 50                      	push	ax
 20298 00004499 52                      	push	dx
 20299 0000449A 06                      	push	es
 20300 0000449B C43E[3605]              	les	di,[THISSFT]
 20301                                  	;mov	ax,[es:di+11h]
 20302                                  	;mov	dx,[es:di+13h]
 20303 0000449F 268B4511                	mov	ax,[ES:DI+SF_ENTRY.sf_size]
 20304 000044A3 268B5513                	mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 20305 000044A7 07                      	pop	es
 20306                                  	;DX:AX = current file size (in bytes).
 20307                                  	;div	word [es:bp+2]
 20308 000044A8 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20309 000044AC 89C1                    	mov	cx,ax
 20310 000044AE 09D2                    	or	dx,dx
 20311 000044B0 7401                    	jz	short NORND
 20312 000044B2 40                      	inc	ax
 20313                                  
 20314                                  	; MSDOS 6.0
 20315                                  	;CALL	SHR32                   ;F.C. >32mb			;AN000;
 20316                                  	;POP	DX
 20317                                  
 20318                                  ;       AX = Last cluster to write.
 20319                                  ;       DX = # of bytes in last sector to write (the "tail").
 20320                                  ;       BX = ES:[BP.dpb_sector_size]
 20321                                  
 20322                                  	;PUSH	AX
 20323                                  	;PUSH	DX
 20324                                  ;M039
 20325                                  	;mov	dx,[TEMP_VAR2]
 20326                                  	;mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 20327                                  	;call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 20328                                  	;mov	[TEMP_VAR2],cx
 20329                                  	;mov	[VALSEC+2],cx
 20330                                  	;mov	cx,ax
 20331                                  	;mov	bx,si
 20332                                  
 20333                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 20334                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 20335                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 20336                                  ;                     DX = # of bytes in last sector of current file.
 20337                                  ;M039
 20338                                  	;OR	DX,DX
 20339                                  	;JZ	short NORND
 20340                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 20341                                  	;ADC	word [VALSEC+2],0
 20342                                  NORND:	
 20343                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20344 000044B3 A3[5C05]                	MOV     [VALSEC],AX
 20345                                  
 20346                                  ;       [VALSEC] = Last sector of current file.
 20347                                  
 20348 000044B6 31C0                    	XOR     AX,AX
 20349 000044B8 A3[7005]                	MOV     [GROWCNT],AX
 20350 000044BB A3[7205]                	MOV     [GROWCNT+2],AX
 20351 000044BE 58                      	POP     AX
 20352                                  
 20353                                  	; MSDOS 6.0
 20354                                  	;MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 20355                                  	;CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb			;AN000;
 20356                                  	;JB	short NOGROW		;F.C. >32mb                             ;AN000;
 20357                                  	;JZ	short lowsec		;F.C. >32mb                             ;AN000;
 20358                                  	;SUB	BX,CX                   ;F.C. >32mb                             ;AN000;
 20359                                  	;SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors	;AN000;
 20360                                  	;JMP	short yesgrow           ;F.C. >32mb                             ;AN000;
 20361                                  ;lowsec:
 20362                                  	;MOV	DI,0			;F.C. >32mb
 20363                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20364 000044BF 29CB                    	SUB	BX,CX			; Number of full sectors
 20365 000044C1 723D                    	JB	short NOGROW
 20366 000044C3 742E                    	JZ	short TESTTAIL
 20367                                  ;yesgrow:
 20368                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20369 000044C5 89D1                    	MOV     CX,DX
 20370 000044C7 93                      	XCHG    AX,BX
 20371                                  	;mul	word [es:bp+2]
 20372 000044C8 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 20373                                  	
 20374                                  	; MSDOS 6.0
 20375                                  	;MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 20376                                  	;MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 20377                                  	;MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 20378                                  	;;mul	word [es:bp+2]
 20379                                  	;MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 20380                                  	
 20381                                  	;ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 20382                                  	;MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 20383                                  	;MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 20384                                  
 20385                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20386 000044CC 29C8                    	SUB     AX,CX           ; Take off current "tail"
 20387 000044CE 83DA00                  	SBB     DX,0            ; 32-bit extension
 20388 000044D1 01D8                    	ADD     AX,BX           ; Add on new "tail"
 20389 000044D3 83D200                  	ADC     DX,0            ; ripple tim's head off
 20390 000044D6 EB21                    	JMP     SHORT SETGRW
 20391                                  
 20392                                  HAVSTART:
 20393                                  	;int 3
 20394 000044D8 89C1                    	MOV     CX,AX
 20395 000044DA E8F20D                  	call	SKPCLP
 20396                                  	;JCXZ	DOWRTJ
 20397 000044DD E357                    	jcxz	DOWRT
 20398                                  
 20399 000044DF E8610F                  	call	ALLOCATE
 20400                                  	;JNC	short DOWRTJ
 20401 000044E2 7352                    	jnc	short DOWRT
 20402                                  
 20403                                  	;entry   WRTERR
 20404                                  WRTERR:
 20405 000044E4 B40F                    	MOV     AH,0FH                          ;MS. write/data/fail/abort      ;AN000;
 20406                                  
 20407                                  	;entry WRTERR22
 20408                                  WRTERR22:
 20409 000044E6 A0[1105]                	MOV     AL,[THISDRV]                    ;MS.                            ;AN000;
 20410                                  
 20411                                  	; 27/07/2018
 20412                                  WRTERR33:
 20413                                  	;MOV	CX,0                    	;No bytes transferred
 20414 000044E9 31C9                    	XOR     CX,CX
 20415                                  					
 20416 000044EB C43E[3605]              	LES     DI,[THISSFT]
 20417                                  	;CLC	; 19/05/2019
 20418 000044EF C3                      	retn
 20419                                  
 20420                                  ;DOWRTJ: 
 20421                                  ;	JMP     short DOWRT
 20422                                  
 20423                                  ACC_ERRWJ:
 20424                                  	; 10/08/2018
 20425                                  	;JMP	SET_ACC_ERRW
 20426 000044F0 E958FE                  	jmp	SET_ACC_ERR_DS
 20427                                  
 20428                                  TESTTAIL:
 20429 000044F3 29D0                    	SUB     AX,DX
 20430 000044F5 7609                    	JBE	short NOGROW
 20431 000044F7 31D2                    	XOR     DX,DX
 20432                                  SETGRW:
 20433 000044F9 A3[7005]                	MOV	[GROWCNT],AX
 20434 000044FC 8916[7205]              	MOV	[GROWCNT+2],DX
 20435                                  NOGROW:
 20436 00004500 58                      	POP     AX
 20437 00004501 8B0E[5405]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 20438 00004505 E8A70D                  	call	FNDCLUS
 20439 00004508 72E6                    	JC	short ACC_ERRWJ
 20440 0000450A 891E[5405]              	MOV     [CLUSNUM],BX
 20441 0000450E 8916[5205]              	MOV     [LASTPOS],DX
 20442                                  
 20443 00004512 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 20444 00004514 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 20445 00004516 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 20446 00004518 51                      	PUSH    CX              ; No. of clusters short of first
 20447 00004519 89C1                    	MOV     CX,AX
 20448 0000451B E8250F                  	call	ALLOCATE
 20449 0000451E 59                      	POP     CX
 20450 0000451F 72C3                    	JC	short WRTERR
 20451 00004521 8B16[5205]              	MOV     DX,[LASTPOS]
 20452 00004525 42                      	INC     DX
 20453 00004526 49                      	DEC     CX
 20454 00004527 7405                    	JZ	short NOSKIP
 20455 00004529 E8A30D                  	call	SKPCLP
 20456 0000452C 72C2                    	JC	short ACC_ERRWJ
 20457                                  NOSKIP:
 20458 0000452E 891E[5405]              	MOV     [CLUSNUM],BX
 20459 00004532 8916[5205]              	MOV     [LASTPOS],DX
 20460                                  DOWRT:
 20461 00004536 833E[6405]00            	CMP     word [BYTCNT1],0
 20462 0000453B 7409                    	JZ	short WRTMID
 20463 0000453D 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20464 00004541 E8180E                  	call	BUFWRT
 20465 00004544 72AA                    	JC	short ACC_ERRWJ
 20466                                  	;JC	short SET_ACC_ERRW
 20467                                  WRTMID:
 20468 00004546 A1[6805]                	MOV     AX,[SECCNT]
 20469 00004549 09C0                    	OR      AX,AX
 20470 0000454B 7471                    	JZ	short WRTLAST		;M039
 20471 0000454D 0106[5A05]              	ADD     [SECPOS],AX
 20472                                  	; MSDOS 6.0
 20473                                  	;ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 20474 00004551 E84D0E                  	call	NEXTSEC
 20475 00004554 729A                    	JC	short ACC_ERRWJ
 20476                                  	;JC	short SET_ACC_ERRW	;M039
 20477 00004556 C606[0F05]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 20478 0000455B 8A16[0E05]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 20479 0000455F 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20480 00004563 8B0E[6805]              	MOV     CX,[SECCNT]
 20481                                  WRTLP:
 20482 00004567 E8680E                  	call	OPTIMIZE
 20483 0000456A 7284                    	JC	short ACC_ERRWJ
 20484                                  	;JC	short SET_ACC_ERRW
 20485                                  
 20486                                  ;M039
 20487                                  ;       DI = Next physical cluster.
 20488                                  ;       AX = # sectors remaining.
 20489                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 20490                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20491                                  ;	     sectors, also termed an "Extent".)
 20492                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20493                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20494                                  ;
 20495                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20496                                  ;	are in Extent; they are being over-written.
 20497                                  
 20498 0000456C 57                      	push    di
 20499 0000456D 50                      	push    ax
 20500                                  
 20501                                          ; MSDOS 6.0
 20502                                  	;call	DskWrtBufPurge          ;DS trashed.
 20503                                  ;ASSUME DS:NOTHING
 20504                                  ;M039
 20505                                  	; MSDOS 3.3
 20506                                  	; IBMDOS.COM (1987) - Offset 4497h
 20507 0000456E 52                      	push	dx
 20508 0000456F 53                      	push	bx
 20509 00004570 268A4600                	mov	al,[es:bp]
 20510                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 20511 00004574 89CB                    	mov	bx,cx
 20512 00004576 01D3                    	add	bx,dx	; (bx = Extent end)
 20513                                  
 20514                                  ;	DX = Extent start.
 20515                                  ;	BX = Extent end.
 20516                                  ;	 AL = Drive #.
 20517                                  
 20518 00004578 E82718                  	call	SETVISIT
 20519                                  
 20520                                  wbufq1:
 20521                                  	;or	byte [di+5],20h
 20522 0000457B 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 20523                                  	;cmp	al,[di+4]	
 20524 0000457F 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 20525 00004582 7512                    	jnz	short wbufq2	; Jump if Extent start > buffer sector.
 20526                                  	;cmp	[di+6],dx
 20527 00004584 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 20528 00004587 720D                    	jb	short wbufq2
 20529                                  	;cmp	[di+6],bx
 20530 00004589 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 20531 0000458C 7308                    	jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 20532                                  
 20533                                  	; Buffer sector is in the Extent
 20534                                  
 20535                                  	;mov	word [di+4],20FFh
 20536 0000458E C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],20FFh
 20537                                  					; .buf_ID,    AL = FFh (Free buffer)
 20538                                  					; .buf_flags, AH = 0, reset/clear
 20539 00004593 E83918                  	call	SCANPLACE
 20540                                  wbufq2:
 20541 00004596 E82218                  	call	SKIPVISIT
 20542 00004599 75E0                    	jnz	short wbufq1
 20543 0000459B 5B                      	pop	bx
 20544 0000459C 5A                      	pop	dx
 20545                                  	
 20546                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20547                                  ;hkn; SS override for DMAADD and ALLOWED
 20548 0000459D 368E1E[DC02]            	MOV     DS,[SS:DMAADD+2]
 20549                                  	;mov	byte [ss:ALLOWED],38h
 20550 000045A2 36C606[F702]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 20551                                  
 20552                                  ;	put logic from DWRITE in-line here so we can modify it
 20553                                  ;	for DISK FULL conditions.
 20554                                  
 20555                                  DWRITE_LUP:
 20556                                  	; MSDOS 6.0
 20557                                  	;call	DSKWRITE
 20558                                  	;jz	short DWRITE_OKAY
 20559                                  
 20560                                  ;;	int	3
 20561                                  	;cmp	al,error_handle_Disk_Full	; compressed volume full?
 20562                                  	;jz	short DWRITE_DISK_FULL
 20563                                  
 20564                                  ;;hkn; SS override
 20565                                  	;MOV	BYTE [SS:READOP],1
 20566                                  	;call	HARDERRRW
 20567                                  	;CMP	AL,1		; Check for retry
 20568                                  	;JZ	short DWRITE_LUP
 20569                                  	;CMP	AL,3		; Check for FAIL
 20570                                  	;CLC
 20571                                  	;JNZ	short DWRITE_OKAY ; Ignore
 20572                                  	;STC
 20573                                  
 20574                                  	; MSDOS 3.3
 20575 000045A8 E81AFC                  	call	DWRITE
 20576                                  
 20577                                  DWRITE_OKAY:
 20578                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20579                                  
 20580 000045AB 59                      	POP     CX
 20581 000045AC 5B                      	POP     BX
 20582                                  
 20583                                  ;       CX = # sectors remaining.
 20584                                  ;       BX = Next physical cluster.
 20585                                  
 20586                                  ;hkn; SS override
 20587                                          ;Context DS
 20588 000045AD 16                      	push	ss
 20589 000045AE 1F                      	pop	ds
 20590                                  
 20591 000045AF 720A                    	JC      short SET_ACC_ERRW ; 16/12/2022
 20592 000045B1 E30B                    	JCXZ    WRTLAST
 20593 000045B3 B200                    	MOV     DL,0
 20594 000045B5 FF06[5205]              	INC     word [LASTPOS]	; We'll be using next cluster
 20595 000045B9 EBAC                    	JMP     short WRTLP
 20596                                  
 20597                                  	; 09/08/2018
 20598                                  	; MSDOS 6.0
 20599                                  ;DWRITE_DISK_FULL:
 20600                                  	;;Context DS		;SQ 3-5-93 DS must be setup on return!
 20601                                  	;push	ss
 20602                                  	;pop	ds
 20603                                  	;pop	cx		; unjunk stack
 20604                                  	;pop	bx
 20605                                  	;mov	byte [DISK_FULL],1
 20606                                  	;stc
 20607                                  	;jmp	short WRTERR	; go to disk full exit
 20608                                  
 20609                                  SET_ACC_ERRW:
 20610 000045BB E98DFD                  	jmp	SET_ACC_ERR_DS
 20611                                  
 20612                                  WRTLAST:
 20613 000045BE A1[6605]                	MOV     AX,[BYTCNT2]
 20614 000045C1 09C0                    	OR      AX,AX
 20615 000045C3 7413                    	JZ	short FINWRT
 20616 000045C5 A3[6405]                	MOV     [BYTCNT1],AX
 20617 000045C8 E8D60D                  	call	NEXTSEC
 20618 000045CB 72EE                    	JC	short SET_ACC_ERRW
 20619 000045CD C706[5E05]0000          	MOV     word [BYTSECPOS],0
 20620 000045D3 E8860D                  	call	BUFWRT
 20621 000045D6 72E3                    	JC	short SET_ACC_ERRW
 20622                                  FINWRT:
 20623 000045D8 C43E[3605]              	LES     DI,[THISSFT]
 20624 000045DC A1[7005]                	MOV     AX,[GROWCNT]
 20625 000045DF 8B0E[7205]              	MOV     CX,[GROWCNT+2]
 20626 000045E3 09C0                    	OR      AX,AX
 20627 000045E5 7502                    	JNZ	short UPDATE_size
 20628 000045E7 E30F                    	JCXZ    SAMSIZ
 20629                                  UPDATE_size:
 20630                                  	;add	[es:di+11h],ax
 20631 000045E9 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 20632                                  	;adc	[es:di+13h],cx
 20633 000045ED 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 20634                                  ;
 20635                                  ; Make sure that all other SFT's see this growth also.
 20636                                  ;
 20637 000045F1 B80100                  	MOV     AX,1
 20638                                  ;if installed
 20639                                  	;Call	JShare + 14 * 4
 20640 000045F4 FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20641                                  ;else
 20642                                  ;	Call    ShSU
 20643                                  ;endif
 20644                                  
 20645                                  SAMSIZ:
 20646 000045F8 E937FE                  	jmp	SETCLUS	; ES:DI already points to SFT
 20647                                  
 20648                                  WRTEOF:
 20649 000045FB 89C1                    	MOV     CX,AX
 20650 000045FD 09D1                    	OR      CX,DX
 20651 000045FF 7464                    	JZ	short KILLFIL
 20652 00004601 83E801                  	SUB     AX,1
 20653 00004604 83DA00                  	SBB     DX,0
 20654                                  
 20655                                  	; MSDOS 3.3
 20656                                  	;div	word [es:bp+2]
 20657 00004607 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20658                                  	;mov	cl,[es:bp+5]
 20659 0000460B 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 20660 0000460F D3E8                    	shr     ax,cl
 20661                                  
 20662                                  	; MSDOS 6.0
 20663                                  	;PUSH	BX
 20664                                  	;MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 20665                                  	;CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 20666                                  	;POP	BX			      ;F.C. >32mb			;AN000;
 20667                                  	;MOV	DX,CX			      ;M039
 20668                                          ;MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 20669                                  	;CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 20670                                  
 20671 00004611 89C1                    	MOV     CX,AX
 20672 00004613 E8990C                  	call	FNDCLUS
 20673                                  SET_ACC_ERRWJ2:
 20674 00004616 72A3                    	JC	short SET_ACC_ERRW
 20675                                  
 20676 00004618 E326                    	JCXZ    RELFILE
 20677 0000461A E8260E                  	call	ALLOCATE
 20678 0000461D 721E                    	JC	short WRTERRJ              ;;;;;;;;; disk full
 20679                                  
 20680                                  UPDATE:
 20681 0000461F C43E[3605]              	LES	DI,[THISSFT]
 20682 00004623 A1[6005]                	MOV	AX,[BYTPOS]
 20683                                  	;mov	[es:di+11h],ax
 20684 00004626 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 20685 0000462A A1[6205]                	MOV	AX,[BYTPOS+2]
 20686                                  	;mov	[es:di+13h],ax
 20687 0000462D 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 20688                                  ;
 20689                                  ; Make sure that all other SFT's see this growth also.
 20690                                  ;
 20691 00004631 B80200                  	MOV     AX,2
 20692                                  ;if installed
 20693                                  	;Call	JShare + 14 * 4
 20694 00004634 FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20695                                  ;else
 20696                                  ;	Call    ShSU
 20697                                  ;endif
 20698 00004638 31C9                    	XOR     CX,CX
 20699 0000463A E913FE                  	jmp	ADDREC
 20700                                  
 20701                                  WRTERRJ: 
 20702 0000463D E9A4FE                  	JMP     WRTERR
 20703                                  
 20704                                  ;;;;;;;;;;;;;;;; 7/18/86
 20705                                  ;;;;;;;;;;;;;;;;
 20706                                  
 20707                                  RELFILE:
 20708                                  	; MSDOS 6.0
 20709 00004640 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 20710 00004641 C43E[3605]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 20711 00004645 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 20712 00004649 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 20713 0000464B 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 20714 00004651 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 20715 00004655 2689551B                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 20716                                  SKIPRESET:                            		;AN002; BL
 20717 00004659 07                      	POP     ES                    		;AN002; BL
 20718                                  ;
 20719 0000465A BAFFFF                  	MOV     DX,0FFFFH
 20720 0000465D E88C0E                  	call	RELBLKS
 20721 00004660 73BD                    	jnc	short UPDATE
 20722                                  SET_ACC_ERRWJJ:
 20723                                  	;JC	short SET_ACC_ERRWJ2
 20724                                  	;JMP	SHORT UPDATE
 20725 00004662 E9E6FC                  	jmp	SET_ACC_ERR_DS
 20726                                  
 20727                                  KILLFIL:
 20728 00004665 31DB                    	XOR     BX,BX
 20729 00004667 06                      	PUSH    ES
 20730 00004668 C43E[3605]              	LES     DI,[THISSFT]
 20731 0000466C 26895D19                	mov	[es:di+19h],bx
 20732 00004670 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 20733                                  	;mov	[es:di+1Bh],bx
 20734 00004674 26895D1B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 20735                                  	;xchg	bx,[es:di+0Bh]
 20736 00004678 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 20737 0000467C 07                      	POP	ES
 20738                                  
 20739 0000467D 09DB                    	OR	BX,BX
 20740                                  	;JZ	short UPDATEJ
 20741 0000467F 749E                    	jz	short UPDATE
 20742                                  ;; 10/23/86 FastOpen update
 20743 00004681 06                      	PUSH	ES              ; since first cluster # is 0
 20744 00004682 55                      	PUSH	BP              ; we must delete the old cache entry
 20745 00004683 50                      	PUSH	AX
 20746 00004684 51                      	PUSH	CX
 20747 00004685 52                      	PUSH	DX
 20748 00004686 C42E[2405]              	LES	BP,[THISDPB]             ; get current DPB
 20749 0000468A 268A5600                	mov	dl,[ES:BP] ; mov al,[es:bp+0]
 20750                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 20751 0000468E 89D9                    	MOV	CX,BX                    ; first cluster #
 20752 00004690 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 20753 00004692 E874ED                  	call	FastOpen_Update          ; call fastopen
 20754 00004695 5A                      	POP	DX
 20755 00004696 59                      	POP	CX
 20756 00004697 58                      	POP	AX
 20757 00004698 5D                      	POP	BP
 20758 00004699 07                      	POP	ES
 20759                                  ;; 10/23/86 FastOpen update
 20760                                  
 20761 0000469A E84D0E                  	call	RELEASE
 20762 0000469D 72C3                    	JC	short SET_ACC_ERRWJJ
 20763                                  UpDateJ:
 20764 0000469F E97DFF                  	JMP	UPDATE ; 10/08/2018
 20765                                  
 20766                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 20767                                  ;----------------------------------------------------------------------------
 20768                                  ;
 20769                                  ; Procedure Name : DskWrtBufPurge
 20770                                  ;
 20771                                  ; Inputs:
 20772                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20773                                  ;	     sectors, also termed an "Extent".)
 20774                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20775                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20776                                  ;
 20777                                  ; Function:
 20778                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20779                                  ;	are in Extent; they are being over-written.
 20780                                  ;
 20781                                  ; Outputs:
 20782                                  ;       (Same as Input.)
 20783                                  ; Uses:
 20784                                  ;       All registers except DS,AX,SI,DI preserved.
 20785                                  ;       SS override for all global variables.
 20786                                  ;----------------------------------------------------------------------------
 20787                                  ;M039: Created
 20788                                  
 20789                                  ;procedure   DskWrtBufPurge,NEAR
 20790                                  ;
 20791                                  ;ASSUME  DS:NOTHING
 20792                                  ;
 20793                                  ;       SaveReg <bx,cx>
 20794                                  ;       mov	bx,[HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 20795                                  ;       mov     si,bx
 20796                                  ;       add     cx,dx
 20797                                  ;       adc     si,0                    ;SI:CX = Extent end + 1.
 20798                                  ;
 20799                                  ;	Assert  ISDPB,<ES,BP>,"DskWrtBufPurge"
 20800                                  ;	mov     al,es:[bp.dpb_drive]
 20801                                  ;
 20802                                  ;;      BX:DX = Extent start.
 20803                                  ;;      SI:CX = Extent end + 1.
 20804                                  ;;      AL = Drive #
 20805                                  ;
 20806                                  ;	cmp     [SC_CACHE_COUNT],0      ;Secondary cache in-use?
 20807                                  ;	je      nosc                    ; -no, jump.
 20808                                  ;
 20809                                  ;;      If any of the sectors to be written are in the secondary cache (SC),
 20810                                  ;;      invalidate the entire SC. (This is an optimization; we really only
 20811                                  ;;	need to invalidate those sectors which intersect, but that's slower.)
 20812                                  ;
 20813                                  ;       cmp     al,[CURSC_DRIVE]        ;Same drive?
 20814                                  ;       jne     nosc                    ; -no, jump.
 20815                                  ;
 20816                                  ;       push    ax
 20817                                  ;       mov     ax,[CURSC_SECTOR]
 20818                                  ;       mov     di,[CURSC_SECTOR+2]     ;DI:AX = SC start.
 20819                                  ;       Cmp32   si,cx,di,ax             ;Extent end < SC start?
 20820                                  ;       jbe     sc5                     ; -yes, jump.
 20821                                  ;       add     ax,[SC_CACHE_COUNT]
 20822                                  ;       adc     di,0                    ;DI:AX = SC end + 1.
 20823                                  ;       Cmp32   bx,dx,di,ax             ;Extent start > SC end?
 20824                                  ;       jae     sc5                     ; -yes, jump.
 20825                                  ;       mov     [SC_STATUS],0           ;Extent intersects SC: invalidate SC.
 20826                                  ;sc5:	pop     ax
 20827                                  ;
 20828                                  ;;	Free any buffered sectors which are in Extent; they are being over-
 20829                                  ;;	written.
 20830                                  ;
 20831                                  ;nosc:	invoke  GETCURHEAD              ;DS:DI -> first buffer in queue.
 20832                                  ;
 20833                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20834                                  ;	jne     bufq5                   ; -no, jump.
 20835                                  ;
 20836                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20837                                  ;       ja	bufq5			;Jump if Extent start > buffer sector.
 20838                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20839                                  ;       jbe	bufq5                   ;Jump if Extent end < buffer sector.
 20840                                  ;
 20841                                  ;;      Buffer's sector is in Extent, so free it; it is being over-written.
 20842                                  ;
 20843                                  ;       testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20844                                  ;       jz      bufq2                    ; -no, jump.
 20845                                  ;       invoke  DEC_DIRTY_COUNT          ; -yes, decrement dirty count.
 20846                                  ;bufq2: mov     WORD PTR [di.buf_ID],((buf_visit SHL 8) OR 0FFh)
 20847                                  ;
 20848                                  ;       invoke  SCANPLACE
 20849                                  ;       jmp     short bufq6
 20850                                  ;
 20851                                  ;bufq5: mov     di,[di.buf_next]
 20852                                  ;bufq6: cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20853                                  ;       jne     bufq	                ; --no, go do next buffer.
 20854                                  ;
 20855                                  ;       RestoreReg <cx,bx>
 20856                                  ;       return
 20857                                  ;
 20858                                  ;EndProc DskWrtBufPurge
 20859                                  
 20860                                  
 20861                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 20862                                  ;----------------------------------------------------------------------------
 20863                                  ;
 20864                                  ; Procedure Name : DIV32
 20865                                  ;
 20866                                  ; Inputs:
 20867                                  ;       DX:AX = 32 bit dividend   BX= divisor
 20868                                  ; Function:
 20869                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 20870                                  ; Outputs:
 20871                                  ;       CX:AX = quotient , DX= remainder
 20872                                  ; Uses:
 20873                                  ;       All registers except AX,CX,DX preserved.
 20874                                  ;----------------------------------------------------------------------------
 20875                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 20876                                  
 20877                                  ;DIV32:
 20878                                  ;
 20879                                  ;       cmp     bx,512
 20880                                  ;       jne    	short div5
 20881                                  ;
 20882                                  ;	mov     cx,dx
 20883                                  ;       mov     dx,ax           ; CX:AX = Dividend
 20884                                  ;       and     dx,(512-1)      ; DX = Remainder
 20885                                  ;       mov     al,ah
 20886                                  ;       mov     ah,cl
 20887                                  ;       mov     cl,ch
 20888                                  ;       xor     ch,ch
 20889                                  ;       shr     cx,1
 20890                                  ;       rcr     ax,1
 20891                                  ;       retn
 20892                                  ;
 20893                                  ;div5:	mov     cx,ax
 20894                                  ;       mov     ax,dx
 20895                                  ;       xor     dx,dx
 20896                                  ;       div     bx              ; 0:AX/BX
 20897                                  ;       xchg    cx,ax
 20898                                  ;       div     bx              ; DX:AX/BX
 20899                                  ;       retn
 20900                                  
 20901                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 20902                                  ;----------------------------------------------------------------------------
 20903                                  ;
 20904                                  ; Procedure Name : SHR32
 20905                                  ;
 20906                                  ; Inputs:
 20907                                  ;	DX:AX = 32 bit sector number
 20908                                  ; Function:
 20909                                  ;       Perform 32 bit shift right
 20910                                  ; Outputs:
 20911                                  ;	AX = cluster number
 20912                                  ;	ZF = 1 if no error
 20913                                  ;	   = 0 if error (cluster number > 64k)
 20914                                  ; Uses:
 20915                                  ;       DX,CX
 20916                                  ;---------------------------------------------------------------------------
 20917                                  ; M017	- SHR32 rewritten for better performance
 20918                                  ; M039	- Additional optimization
 20919                                  
 20920                                  ;SHR32:
 20921                                  ;
 20922                                  ;	mov     cl,[ES:BP+DPB.CLUSTER_SHIFT]
 20923                                  ;	xor	ch,ch	    ;ZF=1
 20924                                  ;	jcxz	norota
 20925                                  ;
 20926                                  ;rotashft2:
 20927                                  ;	shr	dx,1	    ;ZF reflects state of DX.
 20928                                  ;	rcr	ax,1	    ;ZF not affected.
 20929                                  ;	loop	rotashft2
 20930                                  ;
 20931                                  ;norota:
 20932                                  ;	retn
 20933                                  
 20934                                  ;============================================================================
 20935                                  ; DIR.ASM, MSDOS 6.0, 1991
 20936                                  ;============================================================================
 20937                                  ; 27/07/2018 - Retro DOS v3.0 
 20938                                  
 20939                                  ;	TITLE	DIR - Directory and path cracking
 20940                                  ;	NAME	Dir
 20941                                  
 20942                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 20943                                  ;---------------------------------------------------------------------------
 20944                                  ;
 20945                                  ; Procedure Name : FINDENTRY,SEARCH
 20946                                  ;
 20947                                  ; Inputs:
 20948                                  ;	[THISDPB] set
 20949                                  ;	[SECCLUSPOS] = 0
 20950                                  ;	[DIRSEC] = Starting directory sector number
 20951                                  ;	[CLUSNUM] = Next cluster of directory
 20952                                  ;	[CLUSFAC] = Sectors/Cluster
 20953                                  ;	[NAME1] = Name to look for
 20954                                  ; Function:
 20955                                  ;	Find file name in disk directory.
 20956                                  ;	"?" matches any character.
 20957                                  ; Outputs:
 20958                                  ;	Carry set if name not found
 20959                                  ;	ELSE
 20960                                  ;	Zero set if attributes match (always except when creating)
 20961                                  ;	AH = Device ID (bit 7 set if not disk)
 20962                                  ;	[THISDPB] = Base of drive parameters
 20963                                  ;	DS = DOSGROUP
 20964                                  ;	ES = DOSGROUP
 20965                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 20966                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 20967                                  ;	[CURBUF] has directory record with match
 20968                                  ;	[NAME1] has file name
 20969                                  ;	[LASTENT] is entry number of the entry
 20970                                  ; All other registers destroyed.
 20971                                  ;----------------------------------------------------------------------------
 20972                                  
 20973                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 20974                                  ;hkn; this point.
 20975                                  
 20976                                  SEARCH:
 20977                                  	; 27/07/2018 - Retro DOS v3.0
 20978                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 20979                                  	; 15/03/2018 - Retro DOS v2.0
 20980                                  
 20981                                  	;entry	FindEntry
 20982                                  FINDENTRY:
 20983 000046A2 E81704                  	call	STARTSRCH
 20984 000046A5 A0[0605]                	MOV	AL,[ATTRIB]
 20985                                  	;and	al,9Eh
 20986 000046A8 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 20987                                  	;cmp	al,8
 20988 000046AA 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 20989 000046AC 7503                    	JNZ	short NOTVOLSRCH	; No
 20990 000046AE E86201                  	CALL	SETROOTSRCH		; Yes force search of root
 20991                                  NOTVOLSRCH:
 20992 000046B1 E8F800                  	CALL	GETENTRY
 20993 000046B4 7303                    	JNC	short SRCH
 20994 000046B6 E99500                  	JMP	SETESRET
 20995                                  
 20996                                  	;entry	Srch
 20997                                  SRCH:
 20998 000046B9 1E                      	PUSH	DS
 20999 000046BA 8E1E[7605]              	MOV	DS,[CURBUF+2]
 21000                                  
 21001                                  ;	(DS:BX) = directory entry address
 21002                                  
 21003 000046BE 8A27                    	mov	ah,[BX]
 21004                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 21005 000046C0 08E4                    	OR	AH,AH			; End of directory?
 21006 000046C2 743A                    	JZ	short FREE
 21007                                  
 21008                                  ;hkn; SS override
 21009 000046C4 363A26[1905]            	CMP	AH,[SS:DELALL]		; Free entry?
 21010 000046C9 7433                    	JZ	short FREE
 21011                                  	;test	byte [bx+0Bh],8
 21012 000046CB F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 21013                                  					; Volume ID file?
 21014 000046CF 7405                    	JZ	short CHKFNAM 		; NO
 21015                                  
 21016                                  ;hkn; SS override
 21017 000046D1 36FE06[1605]            	INC	BYTE [SS:VOLID]
 21018                                  CHKFNAM:
 21019                                  ;	Context ES
 21020 000046D6 8CD6                    	MOV	SI,SS
 21021 000046D8 8EC6                    	MOV	ES,SI
 21022 000046DA 89DE                    	MOV	SI,BX
 21023                                  
 21024                                  ;hkn; NAME1 is in DOSDATA
 21025 000046DC BF[E604]                	MOV	DI,NAME1
 21026                                  ;;;;; 7/29/86
 21027                                  
 21028                                  ;hkn; SS override for NAME1
 21029 000046DF 36803E[E604]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 21030 000046E5 7506                    	JNZ	short NO_E5
 21031 000046E7 36C606[E604]05          	MOV	BYTE [SS:NAME1],05H
 21032                                  NO_E5:
 21033                                  ;;;;; 7/29/86
 21034 000046ED E86100                  	CALL	MetaCompare
 21035 000046F0 7428                    	JZ	short FOUND
 21036 000046F2 1F                      	POP	DS
 21037                                  
 21038                                  	;entry	NEXTENT
 21039                                  NEXTENT:
 21040 000046F3 C42E[2405]              	LES	BP,[THISDPB]
 21041 000046F7 E86600                  	CALL	NEXTENTRY
 21042 000046FA 73BD                    	JNC	short SRCH
 21043 000046FC EB50                    	JMP	SHORT SETESRET
 21044                                  
 21045                                  FREE:
 21046 000046FE 1F                      	POP	DS
 21047 000046FF 8B0E[F402]              	MOV	CX,[LASTENT]
 21048 00004703 3B0E[6A05]              	CMP	CX,[ENTFREE]
 21049 00004707 7304                    	JAE	short TSTALL
 21050 00004709 890E[6A05]              	MOV	[ENTFREE],CX
 21051                                  TSTALL:
 21052 0000470D 3A26[1905]              	CMP	AH,[DELALL]		; At end of directory?
 21053                                  NEXTENTJ:
 21054 00004711 74E0                    	je	short NEXTENT 		; No - continue search
 21055 00004713 890E[6C05]              	MOV	[ENTLAST],CX
 21056 00004717 F9                      	STC
 21057 00004718 EB34                    	JMP	SHORT SETESRET
 21058                                  
 21059                                  FOUND:
 21060                                  ;
 21061                                  ; We have a file with a matching name.	We must now consider the attributes:
 21062                                  ; ATTRIB	Action
 21063                                  ; ------	------
 21064                                  ; Volume_ID	Is Volume_ID in test?
 21065                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 21066                                  ;		If create then Is ATTRIB equal to test?
 21067                                  ;
 21068 0000471A 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 21069 0000471C 1F                      	POP	DS
 21070 0000471D 8A26[0605]              	MOV	AH,[ATTRIB]		; Attributes of search
 21071                                  	;and	ah,9Eh
 21072 00004721 80E4DE                  	AND	AH,~attr_ignore
 21073                                  	;lea	si,[si+15]
 21074 00004724 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 21075                                  					; point to first cluster field
 21076                                  	;test	ch,8
 21077 00004727 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 21078 0000472A 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 21079                                  	;test	ah,8
 21080 0000472C F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 21081                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 21082 0000472F 74C2                    	jz	short NEXTENT ; 19/05/2019
 21083 00004731 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 21084 00004733 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 21085                                  check_one_volume_id:
 21086                                  	;CMP	ah,8
 21087 00004735 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 21088                                  	;JZ	short NEXTENTJ		; Yes, continue search
 21089 00004738 74B9                    	je	short NEXTENT ; 19/05/2019
 21090 0000473A E89303                  	CALL	MatchAttributes
 21091 0000473D 7407                    	JZ	SHORT RETFF
 21092 0000473F F606[1805]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 21093                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 21094 00004744 74AD                    	jz	short NEXTENT ; 19/05/2019
 21095                                  RETFF:
 21096 00004746 C42E[2405]              	LES	BP,[THISDPB]
 21097 0000474A 268A6600                	MOV	AH,[ES:BP]
 21098                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 21099                                  SETESRET:
 21100 0000474E 16                      	PUSH	SS
 21101 0000474F 07                      	POP	ES
 21102 00004750 C3                      	retn
 21103                                  
 21104                                  ;----------------------------------------------------------------------------
 21105                                  ;
 21106                                  ; Procedure Name : MetaCompare
 21107                                  ;
 21108                                  ; Inputs:
 21109                                  ;	DS:SI -> 11 character FCB style name NO '?'
 21110                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 21111                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 21112                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 21113                                  ; Function:
 21114                                  ;	Compare FCB style names allowing for ? match to any char
 21115                                  ; Outputs:
 21116                                  ;	Zero if match else NZ
 21117                                  ; Destroys CX,SI,DI all others preserved
 21118                                  ;----------------------------------------------------------------------------
 21119                                  
 21120                                  MetaCompare:
 21121 00004751 B90B00                  	MOV	CX,11
 21122                                  WILDCRD:
 21123 00004754 F3A6                    	REPE	CMPSB
 21124 00004756 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 21125                                  CHECK_META:
 21126 00004758 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 21127 0000475D 74F5                    	JZ	short WILDCRD
 21128                                  MetaRet:
 21129 0000475F C3                       	retn				; Zero set, Match
 21130                                  
 21131                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 21132                                  ;----------------------------------------------------------------------------
 21133                                  ;
 21134                                  ; Procedure Name : NEXTENTRY
 21135                                  ;
 21136                                  ; Inputs:
 21137                                  ;	Same as outputs of GETENTRY, above
 21138                                  ; Function:
 21139                                  ;	Update BX, and [LASTENT] for next directory entry.
 21140                                  ;	Carry set if no more.
 21141                                  ;----------------------------------------------------------------------------
 21142                                  
 21143                                  NEXTENTRY:
 21144                                  	; 27/07/2018 - Retro DOS v3.0
 21145                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 21146                                  	; 15/03/2018 - Retro DOS v2.0
 21147                                  
 21148 00004760 A1[F402]                	MOV	AX,[LASTENT]
 21149 00004763 3B06[6C05]              	CMP	AX,[ENTLAST]
 21150 00004767 7424                    	JZ	short NONE
 21151 00004769 40                      	INC	AX
 21152                                  	;ADD	BX,32
 21153 0000476A 8D5F20                  	LEA	BX,[BX+32]
 21154 0000476D 39D3                    	CMP	BX,DX
 21155 0000476F 721E                    	JB	short HAVIT
 21156 00004771 8A1E[0E05]              	MOV	BL,[SECCLUSPOS]
 21157 00004775 FEC3                    	INC	BL
 21158 00004777 3A1E[1205]              	CMP	BL,[CLUSFAC]
 21159 0000477B 7217                    	JB	short SAMECLUS
 21160 0000477D 8B1E[6E05]              	MOV	BX,[NXTCLUSNUM]
 21161 00004781 E8B312                  	call	IsEOF
 21162 00004784 7307                    	JAE	short NONE
 21163 00004786 83FB02                  	CMP	BX,2
 21164 00004789 7202                    	JB	short NONE
 21165 0000478B EB22                    	JMP	short GETENT
 21166                                  NONE:
 21167 0000478D F9                      	STC
 21168 0000478E C3                      	retn
 21169                                  HAVIT:
 21170 0000478F A3[F402]                	MOV	[LASTENT],AX
 21171 00004792 F8                      	CLC
 21172                                  nextentry_retn:
 21173 00004793 C3                      	retn
 21174                                  SAMECLUS:
 21175 00004794 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21176 00004798 A3[F402]                	MOV	[LASTENT],AX
 21177 0000479B 1E                      	PUSH	DS
 21178 0000479C C53E[7405]              	LDS	DI,[CURBUF]
 21179                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 21180                                  ;hkn; SS override
 21181                                  	;MOV	[HIGH_SECTOR],DX		;AN000; >32mb
 21182                                  	;mov	dx,[di+6]
 21183 000047A0 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 21184                                  	;ADD	DX,1				;AN000; >32mb
 21185                                  	;ADC	word [HIGH_SECTOR],0 		;AN000; >32mb
 21186 000047A3 42                      	inc	dx
 21187 000047A4 1F                      	POP	DS
 21188 000047A5 E87EF9                  	call	FIRSTCLUSTER
 21189 000047A8 31DB                    	XOR	BX,BX
 21190 000047AA EB23                    	JMP	short SETENTRY
 21191                                  
 21192                                  ;----------------------------------------------------------------------------
 21193                                  ;
 21194                                  ; Procedure Name : GETENTRY
 21195                                  ;
 21196                                  ; Inputs:
 21197                                  ;	[LASTENT] has directory entry
 21198                                  ;	ES:BP points to drive parameters
 21199                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 21200                                  ; Function:
 21201                                  ;	Locates directory entry in preparation for search
 21202                                  ;	GETENT provides entry for passing desired entry in AX
 21203                                  ; Outputs:
 21204                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 21205                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 21206                                  ;	[LASTENT] = New directory entry number
 21207                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 21208                                  ;	Carry set if error (currently user FAILed to I 24)
 21209                                  ;----------------------------------------------------------------------------
 21210                                  
 21211                                  GETENTRY:
 21212                                  	; 27/07/2018 - Retro DOS v3.0
 21213 000047AC A1[F402]                	MOV	AX,[LASTENT]
 21214                                  
 21215                                  	;entry	GETENT
 21216                                  GETENT:
 21217 000047AF A3[F402]                	MOV	[LASTENT],AX
 21218                                  ;
 21219                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 21220                                  ; directory.
 21221                                  ;
 21222 000047B2 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 21223 000047B4 D3C0                    	rol	ax,cl			; keep hight order bits
 21224 000047B6 89C2                    	mov	dx,ax
 21225                                  	;and	ax,0FFE0h
 21226                                  	;;and	ax,~(32-1)		; mask off high order bits
 21227 000047B8 24E0                    	and	al,0E0h ; ~31 ; 19/05/2019
 21228 000047BA 83E21F                  	and	dx,1Fh
 21229                                  	;and	dx,32-1			; mask off low order bits
 21230                                  ;
 21231                                  ; DX:AX contain the byte offset of the required directory entry from the
 21232                                  ; beginning of the directory. Convert this to a sector number. Round the
 21233                                  ; sector size down to a multiple of 32.
 21234                                  ;
 21235                                  	;mov	bx,[es:bp+2]
 21236 000047BD 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21237 000047C1 80E3E0                  	and	bl,0E0h
 21238                                  	;AND	BL,255-31		; Must be multiple of 32
 21239 000047C4 F7F3                    	DIV	BX
 21240 000047C6 89D3                    	MOV	BX,DX			; Position within sector
 21241 000047C8 53                      	PUSH	BX
 21242 000047C9 E80EF9                  	call	DIRREAD
 21243 000047CC 5B                      	POP	BX
 21244                                  	;retc
 21245 000047CD 72C4                    	jc	short nextentry_retn	
 21246                                  SETENTRY:
 21247 000047CF 8B16[7405]              	MOV	DX,[CURBUF]
 21248                                  	;add	dx,16
 21249 000047D3 83C210                  	ADD	DX,BUFINSIZ
 21250 000047D6 01D3                    	ADD	BX,DX
 21251                                  	;add	dx,[es:bp+2]
 21252 000047D8 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 21253 000047DC C3                      	retn
 21254                                  
 21255                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 21256                                  ;----------------------------------------------------------------------------
 21257                                  ;
 21258                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 21259                                  ;
 21260                                  ; Inputs:
 21261                                  ;	BX cluster number of start of directory
 21262                                  ;	ES:BP Points to DPB
 21263                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 21264                                  ; Function:
 21265                                  ;	Set up a directory search
 21266                                  ; Outputs:
 21267                                  ;	[DIRSTART] = BX
 21268                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 21269                                  ;	Carry set if error (currently user FAILed to I 24)
 21270                                  ; destroys AX,DX,BX
 21271                                  ;----------------------------------------------------------------------------
 21272                                  
 21273                                  SETDIRSRCH:
 21274 000047DD 09DB                    	OR	BX,BX
 21275 000047DF 7432                    	JZ	short SETROOTSRCH
 21276 000047E1 891E[5805]              	MOV	[DIRSTART],BX
 21277                                  	;mov	al,[es:bp+4]
 21278 000047E5 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 21279 000047E9 FEC0                    	INC	AL
 21280 000047EB A2[1205]                	MOV	[CLUSFAC],AL
 21281                                  
 21282                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21283                                  	;SAVE	<SI>
 21284 000047EE 56                      	push	si
 21285                                  	;test	byte [FastOpenFlg],2
 21286 000047EF F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21287 000047F4 7507                    	JNZ	short UNP_OK
 21288                                  
 21289                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21290                                  	;invoke	UNPACK
 21291 000047F6 E85512                  	call	UNPACK
 21292 000047F9 7302                    	JNC	short UNP_OK
 21293                                  	;RESTORE <SI>
 21294 000047FB 5E                      	pop	si
 21295                                  	;return
 21296 000047FC C3                      	retn
 21297                                  
 21298                                  UNP_OK:
 21299 000047FD 893E[5405]              	MOV	[CLUSNUM],DI
 21300 00004801 89DA                    	MOV	DX,BX
 21301 00004803 30DB                    	XOR	BL,BL
 21302 00004805 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21303                                  	;invoke	FIGREC
 21304 00004809 E8260C                  	call	FIGREC
 21305                                  	;RESTORE <SI>
 21306 0000480C 5E                      	pop	si
 21307                                  	
 21308                                  	; MSDOS 6.0
 21309                                  	;PUSH	DX			   ;AN000; >32mb
 21310                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 21311                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 21312                                  	;POP	DX			   ;AN000; >32mb
 21313                                  	
 21314 0000480D 8916[5605]              	MOV	[DIRSEC],DX
 21315 00004811 F8                      	CLC
 21316 00004812 C3                      	retn
 21317                                  
 21318                                  	;entry	SETROOTSRCH
 21319                                  SETROOTSRCH:
 21320 00004813 31C0                    	XOR	AX,AX
 21321 00004815 A3[5805]                	MOV	[DIRSTART],AX
 21322 00004818 A2[0E05]                	MOV	[SECCLUSPOS],AL
 21323 0000481B 48                      	DEC	AX
 21324 0000481C A3[5405]                	MOV	[CLUSNUM],AX
 21325                                  	;mov	ax,[es:bp+0Bh]
 21326 0000481F 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 21327                                  	;mov	dx,[es:bp+10h]
 21328 00004823 268B5610                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 21329 00004827 29D0                    	SUB	AX,DX
 21330 00004829 A2[1205]                	MOV	[CLUSFAC],AL
 21331 0000482C 8916[5605]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 21332                                  	; MSDOS 6.0
 21333                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 21334 00004830 F8                      	CLC
 21335 00004831 C3                      	retn
 21336                                  
 21337                                  ;============================================================================
 21338                                  ; DIR2.ASM, MSDOS 6.0, 1991
 21339                                  ;============================================================================
 21340                                  ; 27/07/2018 - Retro DOS v3.0 
 21341                                  
 21342                                  ;	TITLE	DIR2 - Directory and path cracking
 21343                                  ;	NAME	Dir2
 21344                                  
 21345                                  ;Break	<GETPATH -- PARSE A WFP>
 21346                                  ;----------------------------------------------------------------------------
 21347                                  ;
 21348                                  ; Procedure Name : GETPATH
 21349                                  ;
 21350                                  ; Inputs:
 21351                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 21352                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 21353                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21354                                  ;		( = -1 if current dir not involved, else
 21355                                  ;		 Points to first char after last "/" of current dir part)
 21356                                  ;	[THISCDS] Points to CDS being used
 21357                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 21358                                  ;	[NoSetDir] set
 21359                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 21360                                  ; Function:
 21361                                  ;	Crack the path
 21362                                  ; Outputs:
 21363                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 21364                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 21365                                  ;	ID1 field of [THISCDS] updated appropriately
 21366                                  ;	[ATTRIB] = [SATTRIB]
 21367                                  ;	ES:BP Points to DPB
 21368                                  ;	Carry set if bad path
 21369                                  ;	   SI Points to path element causing failure
 21370                                  ;	   Zero set
 21371                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21372                                  ;	      start a search on the last directory
 21373                                  ;	      CL is zero if there is a bad name in the path
 21374                                  ;	      CL is non-zero if the name was simply not found
 21375                                  ;		 [ENTFREE] may have free spot in directory
 21376                                  ;		 [NAME1] is the name.
 21377                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21378                                  ;	   Zero reset
 21379                                  ;	      File in middle of path or bad name in path or attribute mismatch
 21380                                  ;		or path too long or malformed path
 21381                                  ;	ELSE
 21382                                  ;	   [CurBuf] = -1 if root directory
 21383                                  ;	   [CURBUF] contains directory record with match
 21384                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21385                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 21386                                  ;	   AH = device ID
 21387                                  ;	      bit 7 of AH set if device SI and BX
 21388                                  ;	      will point DOSGROUP relative The firclus
 21389                                  ;	      field of the device entry contains the device pointer
 21390                                  ;	   [NAME1] Has name looked for
 21391                                  ;	   If last element is a directory zero is set and:
 21392                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21393                                  ;	      are set up to start a search on it.
 21394                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21395                                  ;	      like that for a file (except for zero flag)
 21396                                  ;	   If last element is a file zero is reset
 21397                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21398                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21399                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21400                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21401                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21402                                  ; DS preserved, Others destroyed
 21403                                  ;---------------------------------------------------------------------------
 21404                                  
 21405                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 21406                                  ;hkn; DS already set up at this point.
 21407                                  
 21408                                  GETPATH:
 21409                                  	;mov	word [CREATING],0E500h
 21410 00004832 C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 21411                                  
 21412                                  ; Same as GetPath only CREATING and DELALL already set
 21413                                  
 21414                                  	;entry	GetPathNoSet
 21415                                  GetPathNoSet:
 21416                                  	;mov	byte [EXTERR_LOCUS],2	
 21417 00004838 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21418 0000483D C706[7405]FFFF          	MOV	word [CURBUF],-1	; initial setting
 21419                                  
 21420                                  ; See if the input indicates a device that has already been detected. If so,
 21421                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 21422                                  
 21423 00004843 8B3E[4A05]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 21424                                  	;cmp	word [DI+1],5C3Ah
 21425                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 21426 00004847 817D013A5C              	cmp	word [DI+1],':\'
 21427 0000484C 7438                    	JZ	short CrackIt
 21428                                  
 21429                                  ; Let ChkDev find it in the device list
 21430                                  
 21431 0000484E 83C703                  	ADD	DI,3
 21432                                  	; 18/08/2018
 21433                                  	;MOV	SI,DI			; let CHKDEV see the original name
 21434 00004851 E8B000                  	CALL	CHKDEV
 21435 00004854 722E                    	JC	short InternalError
 21436                                  Build_devJ:
 21437                                  
 21438 00004856 A0[0805]                	MOV	AL,[SATTRIB]
 21439 00004859 A2[0605]                	MOV	[ATTRIB],AL
 21440                                  	;mov	byte [EXTERR_LOCUS],1
 21441 0000485C C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 21442                                  					; "finding" a char device
 21443                                  					; set LOCUS to Unknown. This makes
 21444                                  					; certain idiotic problems reported
 21445                                  					; by a certain 3 letter OEM go away.
 21446                                  
 21447                                  ; Take name in name1 and pack it back into where wfp_start points. This
 21448                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 21449                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 21450                                  ; wfp into the share set.
 21451                                  ;
 21452                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 21453                                  ; non-space seen +1.  This position is kept in DX.
 21454                                  
 21455                                  ;hkn; SS is DOSDATA
 21456 00004861 16                      	push	ss
 21457 00004862 07                      	pop	es
 21458                                  
 21459                                  ;hkn; NAME1 is in DOSDATA
 21460 00004863 BE[E604]                	mov	si,NAME1
 21461 00004866 8B3E[4A05]              	mov	di,[WFP_START]
 21462 0000486A 89FA                    	mov	dx,di
 21463 0000486C B90800                  	mov	cx,8			; 8 chars in device name
 21464                                  MoveLoop:
 21465 0000486F AC                      	lodsb
 21466 00004870 AA                      	stosb
 21467 00004871 3C20                    	cmp	al," "
 21468 00004873 7402                    	jz	short NoSave
 21469                                  
 21470 00004875 89FA                    	mov	dx,di
 21471                                  NoSave:
 21472 00004877 E2F6                    	loop	MoveLoop
 21473                                  ;
 21474                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 21475                                  ; at this point.
 21476                                  ;
 21477 00004879 89D7                    	mov	di,dx
 21478 0000487B C60500                  	mov	byte [di],0		; end of string
 21479 0000487E E8BC02                  	call	Build_device_ent	; Clears carry sets zero
 21480 00004881 FEC0                    	INC	AL			; reset zero
 21481 00004883 C3                      	retn
 21482                                  
 21483                                  InternalError:
 21484                                  InternalError_loop:
 21485 00004884 EBFE                    	JMP	short InternalError_loop	; freeze
 21486                                  
 21487                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 21488                                  
 21489                                  CrackIt:
 21490 00004886 8B36[4E05]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 21491 0000488A 83FEFF                  	CMP	SI,-1			; valid?
 21492 0000488D 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 21493 0000488F 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 21494                                  LOOK_SING:
 21495                                  	;mov	byte [ATTRIB],16h
 21496 00004892 C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 21497                                  					; Attributes to search through Dirs
 21498 00004897 C43E[3A05]              	LES	DI,[THISCDS]
 21499 0000489B B8FFFF                  	MOV	AX,-1
 21500                                  	;mov	bx,[es:di+73]
 21501 0000489E 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 21502 000048A2 8B36[4E05]              	MOV	SI,[CURR_DIR_END]
 21503                                  
 21504                                  ; AX = -1
 21505                                  ; BX = cluster number of current directory.  THis number is -1 if the media
 21506                                  ;      has been uncertainly changed.
 21507                                  ; SI = offset in DOSGroup into path to end of current directory text.  This
 21508                                  ;      may be -1 if no current directory part has been used.
 21509                                  
 21510 000048A6 39C6                    	CMP	SI,AX			; if Current directory is not part
 21511 000048A8 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 21512 000048AA 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 21513                                  
 21514                                  ; DOS 3.3  6/25/86
 21515 000048AC 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 21516                                  	;test	byte [FastOpenFlg],1
 21517 000048AE F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 21518 000048B3 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 21519 000048B5 06                      	PUSH	ES			; save registers
 21520 000048B6 57                      	PUSH	DI
 21521 000048B7 51                      	PUSH	CX
 21522 000048B8 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 21523 000048BB 56                      	PUSH	SI
 21524 000048BC 53                      	PUSH	BX
 21525                                  
 21526 000048BD C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 21527 000048C1 8B36[4A05]              	MOV	SI,[WFP_START]
 21528                                  
 21529                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 21530 000048C5 BB[430F]                	MOV	BX,FastOpenTable
 21531 000048C8 BF[4E0F]                	MOV	DI,Dir_Info_Buff
 21532 000048CB B9[490F]                	MOV	CX,FastOpen_Ext_Info
 21533                                  	;mov	al,1
 21534 000048CE B001                    	MOV	AL,FONC_Look_up
 21535 000048D0 1E                      	PUSH	DS
 21536 000048D1 07                      	POP	ES
 21537                                  	;call	far [BX+2]
 21538 000048D2 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 21539 000048D5 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 21540                                  					; Go to Got_Srch_cluster
 21541 000048D7 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 21542 000048DA 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 21543 000048DC F9                      	stc
 21544 000048DD EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 21545                                  GO_Chk_end1:
 21546 000048DF F8                      	clc
 21547                                  GO_Chk_end:				; restore registers
 21548 000048E0 5B                      	POP	BX
 21549 000048E1 5E                      	POP	SI
 21550 000048E2 8F44FF                  	POP	word [SI-1]
 21551 000048E5 59                      	POP	CX
 21552 000048E6 5F                      	POP	DI
 21553 000048E7 07                      	POP	ES
 21554 000048E8 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 21555                                  
 21556                                  ; DOS 3.3  6/25/86
 21557                                  ;
 21558                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 21559                                  ; of path and go crack from root.
 21560                                  
 21561                                  NO_CURR_D:
 21562 000048EA 8B36[4A05]              	MOV	SI,[WFP_START]
 21563 000048EE 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 21564 000048F1 C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21565 000048F5 EB3D                    	JMP	short ROOTPATH
 21566                                  
 21567                                  ; We are able to crack from the current directory part. Go set up for search
 21568                                  ; of specified cluster.
 21569                                  
 21570                                  GOT_SEARCH_CLUSTER:
 21571 000048F7 C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21572 000048FB E8DFFE                  	call	SETDIRSRCH
 21573                                  	;JC	short SETFERR
 21574                                  	;JMP	short FINDPATH
 21575 000048FE 7345                    	jnc	short FINDPATH ; 17/08/2018
 21576                                  SETFERR:
 21577 00004900 30C9                    	XOR	CL,CL			; set zero
 21578 00004902 F9                      	STC
 21579 00004903 C3                      	retn
 21580                                  
 21581                                  ;---------------------------------------------------------------------------
 21582                                  ;
 21583                                  ; Procedure Name : ChkDev
 21584                                  ;
 21585                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 21586                                  ;   device.
 21587                                  ; Blasts CX,SI,DI,AX,BX
 21588                                  ;---------------------------------------------------------------------------
 21589                                  
 21590                                  CHKDEV:
 21591 00004904 89FE                    	MOV	SI,DI
 21592 00004906 8CD7                    	MOV	DI,SS
 21593 00004908 8EC7                    	MOV	ES,DI
 21594                                  
 21595 0000490A BF[E604]                	MOV	DI,NAME1
 21596 0000490D B90900                  	MOV	CX,9
 21597                                  TESTLOOP:
 21598 00004910 E8F90C                  	call	GETLET
 21599                                  
 21600 00004913 3C2E                    	CMP	AL,'.'
 21601 00004915 740E                    	JZ	short TESTDEVICE
 21602 00004917 E82F0D                  	call	PATHCHRCMP
 21603 0000491A 7407                    	JZ	short NOTDEV
 21604 0000491C 08C0                    	OR	AL,AL
 21605 0000491E 7405                    	JZ	short TESTDEVICE
 21606                                  
 21607 00004920 AA                      	STOSB
 21608 00004921 E2ED                    	LOOP	TESTLOOP
 21609                                  NOTDEV:
 21610 00004923 F9                      	STC
 21611 00004924 C3                      	retn
 21612                                  
 21613                                  TESTDEVICE:
 21614 00004925 83C102                  	ADD	CX,2
 21615 00004928 B020                    	MOV	AL,' '
 21616 0000492A F3AA                    	REP	STOSB
 21617 0000492C 8CD0                    	MOV	AX,SS
 21618 0000492E 8ED8                    	MOV	DS,AX
 21619 00004930 E8AA01                  	call	DEVNAME
 21620 00004933 C3                      	retn
 21621                                  
 21622                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 21623                                  ;----------------------------------------------------------------------------
 21624                                  ;
 21625                                  ; Procedure Name : ROOTPATH,FINDPATH
 21626                                  ;
 21627                                  ; Inputs:
 21628                                  ;	Same as FINDPATH but,
 21629                                  ;	SI Points to asciz string of path which is assumed to start at
 21630                                  ;		the root (no leading '/').
 21631                                  ; Function:
 21632                                  ;	Search from root for path
 21633                                  ; Outputs:
 21634                                  ;	Same as FINDPATH but:
 21635                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 21636                                  ;	[NoSetDir] is ignored.
 21637                                  ;----------------------------------------------------------------------------
 21638                                  
 21639                                  ROOTPATH:
 21640 00004934 E8DCFE                  	call	SETROOTSRCH
 21641 00004937 803C00                  	CMP	BYTE [SI],0
 21642 0000493A 7509                    	JNZ	short FINDPATH
 21643                                  
 21644                                  ; Root dir specified
 21645 0000493C A0[0805]                	MOV	AL,[SATTRIB]
 21646 0000493F A2[0605]                	MOV	[ATTRIB],AL
 21647 00004942 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 21648                                  					; (dir), clears carry.
 21649 00004944 C3                      	retn
 21650                                  
 21651                                  ; Inputs:
 21652                                  ;	[ATTRIB] Set to get through directories
 21653                                  ;	[SATTRIB] Set to find last element
 21654                                  ;	ES:BP Points to DPB
 21655                                  ;	SI Points to asciz string of path (no leading '/').
 21656                                  ;	[SECCLUSPOS] = 0
 21657                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 21658                                  ;	[CLUSNUM] = Cluster # of next cluster
 21659                                  ;	[CLUSFAC] = Sectors per cluster
 21660                                  ;	[NoSetDir] set
 21661                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21662                                  ;		( = -1 if current dir not involved, else
 21663                                  ;		 Points to first char after last "/" of current dir part)
 21664                                  ;	[THISCDS] Points to CDS being used
 21665                                  ;	[CREATING] and [DELALL] set
 21666                                  ; Function:
 21667                                  ;	Parse path name
 21668                                  ; Outputs:
 21669                                  ;	ID1 field of [THISCDS] updated appropriately
 21670                                  ;	[ATTRIB] = [SATTRIB]
 21671                                  ;	ES:BP Points to DPB
 21672                                  ;	[THISDPB] = ES:BP
 21673                                  ;	Carry set if bad path
 21674                                  ;	   SI Points to path element causing failure
 21675                                  ;	   Zero set
 21676                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21677                                  ;	      start a search on the last directory
 21678                                  ;	      CL is zero if there is a bad name in the path
 21679                                  ;	      CL is non-zero if the name was simply not found
 21680                                  ;		 [ENTFREE] may have free spot in directory
 21681                                  ;		 [NAME1] is the name.
 21682                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21683                                  ;	   Zero reset
 21684                                  ;	      File in middle of path or bad name in path
 21685                                  ;		or path too long or malformed path
 21686                                  ;	ELSE
 21687                                  ;	   [CURBUF] contains directory record with match
 21688                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21689                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 21690                                  ;	   [NAME1] Has name looked for
 21691                                  ;	   AH = device ID
 21692                                  ;	      bit 7 of AH set if device SI and BX
 21693                                  ;	      will point DOSGROUP relative The firclus
 21694                                  ;	      field of the device entry contains the device pointer
 21695                                  ;	   If last element is a directory zero is set and:
 21696                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21697                                  ;	      are set up to start a search on it,
 21698                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21699                                  ;	      like that for a file (except for zero flag)
 21700                                  ;	   If last element is a file zero is reset
 21701                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21702                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21703                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21704                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21705                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21706                                  ; Destroys all other registers
 21707                                  
 21708                                      	;entry	FINDPATH
 21709                                  FINDPATH:
 21710 00004945 06                      	PUSH	ES			; Save ES:BP
 21711 00004946 56                      	PUSH	SI
 21712 00004947 89F7                    	MOV	DI,SI
 21713 00004949 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 21714 0000494D 833E[4E05]FF            	CMP	word [CURR_DIR_END],-1
 21715 00004952 740E                    	JZ	short NOIDS		; No current dir part
 21716 00004954 3B3E[4E05]              	CMP	DI,[CURR_DIR_END]
 21717 00004958 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 21718 0000495A C43E[3A05]              	LES	DI,[THISCDS]
 21719                                  	;mov	[es:di+73],cx
 21720 0000495E 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 21721                                  NOIDS:
 21722                                  
 21723                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 21724                                  ; character in the string. CX,DI may be destroyed.
 21725                                  ;
 21726                                  ;	invoke	NAMETRANS
 21727                                  ;	MOV	CL,AL
 21728                                  ;
 21729                                  ; The above is the slow method. The name has *already* been munged by
 21730                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 21731                                  ; the name until ., \ or 0 is hit.
 21732                                  
 21733 00004962 8CD0                    	MOV	AX,SS
 21734 00004964 8EC0                    	MOV	ES,AX
 21735                                  
 21736                                  ;hkn; Name1 is in DOSDATA
 21737 00004966 BF[E604]                	MOV	DI,NAME1
 21738 00004969 B82020                  	MOV	AX,'  ' ; 2020h
 21739 0000496C AA                      	STOSB
 21740 0000496D AB                      	STOSW
 21741 0000496E AB                      	STOSW
 21742 0000496F AB                      	STOSW
 21743 00004970 AB                      	STOSW
 21744 00004971 AB                      	STOSW
 21745                                  
 21746                                  ;hkn; Name1 is in DOSDATA
 21747 00004972 BF[E604]                	MOV	DI,NAME1
 21748 00004975 30E4                    	XOR	AH,AH			; bits for CL
 21749                                  GetNam:
 21750                                  	;INC	CL			;AN000; KK incrment volid count
 21751 00004977 AC                      	LODSB
 21752 00004978 3C2E                    	CMP	AL,'.'
 21753 0000497A 7412                    	JZ	short _SetExt
 21754 0000497C 08C0                    	OR	AL,AL
 21755 0000497E 7424                    	JZ	short _GetDone
 21756 00004980 3C5C                    	CMP	AL,'\'
 21757 00004982 7420                    	JZ	short _GetDone
 21758 00004984 3C3F                    	CMP	AL,'?'
 21759 00004986 7503                    	JNZ	short StoNam
 21760 00004988 80CC01                  	OR	AH,1
 21761                                  StoNam: 
 21762 0000498B AA                      	STOSB
 21763 0000498C EBE9                    	JMP	short GetNam
 21764                                  _SetExt:
 21765 0000498E BF[EE04]                	MOV	DI,NAME1+8
 21766                                  GetExt:
 21767 00004991 AC                      	LODSB
 21768 00004992 08C0                    	OR	AL,AL
 21769 00004994 740E                    	JZ	short _GetDone
 21770 00004996 3C5C                    	CMP	AL,'\'
 21771 00004998 740A                    	JZ	short _GetDone
 21772 0000499A 3C3F                    	CMP	AL,'?'
 21773 0000499C 7503                    	JNZ	short StoExt
 21774 0000499E 80CC01                  	OR	AH,1
 21775                                  StoExt: 
 21776 000049A1 AA                      	STOSB
 21777 000049A2 EBED                    	JMP	short GetExt
 21778                                  _GetDone:
 21779 000049A4 4E                      	DEC	SI
 21780 000049A5 88E1                    	MOV	CL,AH
 21781 000049A7 80C980                  	OR	CL,80H
 21782 000049AA 5F                      	POP	DI			; Start of this element
 21783 000049AB 07                      	POP	ES			; Restore ES:BP
 21784 000049AC 39FE                    	CMP	SI,DI
 21785 000049AE 7503                    	JNZ	short check_device
 21786 000049B0 E9D100                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 21787                                  check_device:
 21788 000049B3 56                      	PUSH	SI			; Start of next element
 21789 000049B4 8A04                    	MOV	AL,[SI]
 21790 000049B6 08C0                    	OR	AL,AL
 21791 000049B8 7508                    	JNZ	short NOT_LAST
 21792                                  
 21793                                  ; for last element of the path switch to the correct search attributes
 21794                                  
 21795 000049BA 8A3E[0805]              	MOV	BH,[SATTRIB]
 21796 000049BE 883E[0605]              	MOV	[ATTRIB],BH
 21797                                  
 21798                                  NOT_LAST:
 21799                                  
 21800                                  ; check name1 to see if we have a device...
 21801                                  
 21802 000049C2 06                      	PUSH	ES			; Save ES:BP
 21803                                  
 21804                                  ;hkn; SS is DOSDATA
 21805                                  	;context ES
 21806 000049C3 16                      	push	ss
 21807 000049C4 07                      	pop	es
 21808 000049C5 E81501                  	call	DEVNAME 		; blast BX
 21809 000049C8 07                      	POP	ES			; Restore ES:BP
 21810 000049C9 720B                    	JC	short FindFile		; Not a device
 21811 000049CB 08C0                    	OR	AL,AL			; Test next char again
 21812 000049CD 7403                    	JZ	short GO_BDEV
 21813 000049CF E9B600                  	JMP	FILEINPATH		; Device name in middle of path
 21814                                  
 21815                                  GO_BDEV:
 21816 000049D2 5E                      	POP	SI			; Points to NUL at end of path
 21817 000049D3 E980FE                  	JMP	Build_devJ
 21818                                  
 21819                                  FindFile:
 21820                                  ;;;; 7/28/86
 21821 000049D6 803E[E604]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 21822 000049DB 7505                    	JNZ	short NOE5		; no
 21823 000049DD C606[E604]05            	MOV	BYTE [NAME1],05H	; change it to 05
 21824                                  NOE5:
 21825                                  ;;;; 7/28/86
 21826 000049E2 57                      	PUSH	DI			; Start of this element
 21827 000049E3 06                      	PUSH	ES			; Save ES:BP
 21828 000049E4 51                      	PUSH	CX			; CL return from NameTrans
 21829                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21830                                  
 21831 000049E5 E87C02                  	CALL	LookupPath		; call fastopen to get dir entry
 21832 000049E8 7303                    	JNC	short DIR_FOUND		; found dir entry
 21833                                  
 21834                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21835 000049EA E8B5FC                  	call	FINDENTRY
 21836                                  DIR_FOUND:
 21837 000049ED 59                      	POP	CX
 21838 000049EE 07                      	POP	ES
 21839 000049EF 5F                      	POP	DI
 21840 000049F0 7303                    	JNC	short LOAD_BUF
 21841 000049F2 E9B800                  	JMP	BADPATHPOP
 21842                                  
 21843                                  LOAD_BUF:
 21844 000049F5 C53E[7405]              	LDS	DI,[CURBUF]
 21845                                  	;test	byte [bx+0Bh],10h
 21846 000049F9 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 21847 000049FD 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 21848 000049FF E98600                  	JMP	FILEINPATH		; Error or end of path
 21849                                  
 21850                                  ; if we are not setting the directory, then check for end of string
 21851                                  
 21852                                  GO_NEXT:
 21853                                  ;hkn; SS override
 21854 00004A02 36803E[F802]00          	CMP	BYTE [SS:NoSetDir],0
 21855 00004A08 7412                    	JZ	short SetDir
 21856 00004A0A 89FA                    	MOV	DX,DI			; Save pointer to entry
 21857 00004A0C 8CD9                    	MOV	CX,DS
 21858                                  
 21859                                  ;hkn; SS is DOSDATA
 21860                                  	;context DS
 21861 00004A0E 16                      	push	ss
 21862 00004A0F 1F                      	pop	ds
 21863 00004A10 5F                      	POP	DI			; Start of next element
 21864                                  	; MSDOS 6.0
 21865                                  	;TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 21866                                  	;JZ	short nofast			; the FastOpen
 21867                                  	;TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 21868                                  	;JZ	short nofast			; no
 21869                                  	;MOV	DI,[Next_Element_Start]	; no need to insert it again
 21870                                  ;nofast:
 21871 00004A11 803D00                  	CMP	BYTE [DI],0
 21872 00004A14 7501                    	JNZ	short NEXT_ONE		; DOS 3.3
 21873                                  	;JMP	_SETRET			; Got it
 21874 00004A16 C3                      	retn	; 05/09/2018
 21875                                  NEXT_ONE:
 21876 00004A17 57                      	PUSH	DI			; Put start of next element back on stack
 21877 00004A18 89D7                    	MOV	DI,DX
 21878 00004A1A 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 21879                                  SetDir:
 21880 00004A1C 8B14                    	MOV	DX,[SI] 		; Dir_first
 21881                                  
 21882                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21883 00004A1E 1E                      	PUSH	DS		      ; save [curbuf+2]
 21884                                  ;hkn; SS is DOSDATA
 21885 00004A1F 16                      	push	ss
 21886 00004A20 1F                      	pop	ds		      ; set DS Dosgroup
 21887                                  	;test	byte [FastOpenFlg],2
 21888 00004A21 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21889 00004A26 7410                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 21890 00004A28 89D3                    	MOV	BX,DX		      ; not found
 21891 00004A2A 8B3E[5405]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 21892 00004A2E 50                      	PUSH	AX		      ; save device id (AH)
 21893 00004A2F E8ABFD                  	call	SETDIRSRCH
 21894 00004A32 58                      	POP	AX		      ; restore device id (AH)
 21895 00004A33 83C402                  	ADD	SP,2		      ; pop ds in stack
 21896 00004A36 EB36                    	JMP	short FAST_OPEN_SKIP
 21897                                  
 21898                                  DO_NORMAL:
 21899 00004A38 1F                      	POP	DS			; DS = [curbuf + 2]
 21900                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21901                                  
 21902 00004A39 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 21903 00004A3B 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 21904 00004A3D 53                      	PUSH	BX
 21905 00004A3E 50                      	PUSH	AX
 21906 00004A3F 56                      	PUSH	SI
 21907 00004A40 51                      	PUSH	CX
 21908                                  	;push	word [di+6]
 21909 00004A41 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 21910                                  	; MSDOS 6.0
 21911                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 21912 00004A44 89D3                    	MOV	BX,DX
 21913                                  
 21914                                  ;hkn; SS is DOSDATA
 21915                                  	;context DS
 21916 00004A46 16                      	push	ss
 21917 00004A47 1F                      	pop	ds
 21918                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 21919 00004A48 E892FD                  	call	SETDIRSRCH		; the entry sector buffer
 21920                                  	; MSDOS 6.0
 21921                                  	;POP	word [HIGH_SECTOR]
 21922 00004A4B 5A                      	POP	DX
 21923 00004A4C 720A                    	JC	short SKIP_GETB
 21924                                  	;mov	byte [ALLOWED],18h
 21925 00004A4E C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 21926 00004A53 30C0                    	XOR	AL,AL
 21927                                  	;invoke	GETBUFFR		; Get the entry buffer back
 21928 00004A55 E82E14                  	call	GETBUFFR
 21929                                  SKIP_GETB:
 21930 00004A58 59                      	POP	CX
 21931 00004A59 5E                      	POP	SI
 21932 00004A5A 58                      	POP	AX
 21933 00004A5B 5B                      	POP	BX
 21934 00004A5C 7305                    	JNC	short SET_THE_BUF ; 19/05/2019
 21935 00004A5E 5F                      	POP	DI			; Start of next element
 21936 00004A5F 89FE                    	MOV	SI,DI			; Point with SI
 21937 00004A61 EB21                    	JMP	SHORT _BADPATH
 21938                                  
 21939                                  SET_THE_BUF:
 21940 00004A63 E8CCF6                  	call	SET_BUF_AS_DIR
 21941 00004A66 8B3E[7405]              	MOV	DI,[CURBUF]
 21942 00004A6A 01FE                    	ADD	SI,DI			; Get the offsets back
 21943 00004A6C 01FB                    	ADD	BX,DI
 21944                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21945                                  FAST_OPEN_SKIP:
 21946 00004A6E 5F                      	POP	DI			; Start of next element
 21947 00004A6F E86802                  	CALL	InsertPath		; insert dir entry info
 21948                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21949 00004A72 8A05                    	MOV	AL,[DI]
 21950 00004A74 08C0                    	OR	AL,AL
 21951 00004A76 7434                    	JZ	short _SETRET		; At end
 21952 00004A78 47                      	INC	DI			; Skip over "/"
 21953 00004A79 89FE                    	MOV	SI,DI			; Point with SI
 21954 00004A7B E8CB0B                  	call	PATHCHRCMP
 21955 00004A7E 7503                    	JNZ	short find_bad_name	; oops
 21956 00004A80 E9C2FE                  	JMP	FINDPATH		; Next element
 21957                                  
 21958                                  find_bad_name:
 21959 00004A83 4E                      	DEC	SI			; Undo above INC to get failure point
 21960                                  _BADPATH:
 21961 00004A84 30C9                    	XOR	CL,CL			; Set zero
 21962 00004A86 EB2C                    	JMP	SHORT BADPRET
 21963                                  
 21964                                  FILEINPATH:
 21965 00004A88 5F                      	POP	DI			; Start of next element
 21966                                  
 21967                                  ;hkn; SS is DOSDATA
 21968                                  	;context DS			; Got to from one place with DS gone
 21969 00004A89 16                      	push	ss
 21970 00004A8A 1F                      	pop	ds
 21971                                  
 21972                                  ; DOS 3.3 FastOpen
 21973                                  	;test	byte [FastOpenFlg],1
 21974 00004A8B F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 21975 00004A90 740B                    	JZ	short NO_FAST		; device info to fastopen
 21976                                  	;test	byte [FastOpenFlg],2
 21977 00004A92 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21978 00004A97 7404                    	JZ	short NO_FAST
 21979 00004A99 8B3E[6F0F]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 21980                                  					 ; success
 21981                                  NO_FAST:
 21982                                  ; DOS 3.3 FastOpen
 21983                                  
 21984 00004A9D 8A05                    	MOV	AL,[DI]
 21985 00004A9F 08C0                    	OR	AL,AL
 21986 00004AA1 7404                    	JZ	short INCRET
 21987 00004AA3 89FE                    	MOV	SI,DI			; Path too long
 21988 00004AA5 EB0D                    	JMP	SHORT BADPRET
 21989                                  
 21990                                  INCRET:
 21991                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 21992                                  
 21993 00004AA7 E83002                  	CALL   InsertPath		; insert dir entry info
 21994                                  
 21995                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 21996 00004AAA FEC0                    	INC	AL			; Reset zero
 21997                                  _SETRET:
 21998 00004AAC C3                      	retn
 21999                                  
 22000                                  BADPATHPOP:
 22001 00004AAD 5E                      	POP	SI			; Start of next element
 22002 00004AAE 8A04                    	MOV	AL,[SI]
 22003 00004AB0 89FE                    	MOV	SI,DI			; Start of bad element
 22004 00004AB2 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 22005                                  BADPRET:
 22006 00004AB4 A0[0805]                	MOV	AL,[SATTRIB]
 22007 00004AB7 A2[0605]                	MOV	[ATTRIB],AL		; Make sure return correct
 22008 00004ABA F9                      	STC
 22009 00004ABB C3                      	retn
 22010                                  
 22011                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 22012                                  ;---------------------------------------------------------------------------
 22013                                  ;
 22014                                  ; Procedure Name : STARTSRCH
 22015                                  ;
 22016                                  ; Inputs:
 22017                                  ;	[THISDPB] Set
 22018                                  ; Function:
 22019                                  ;	Set up a search for GETENTRY and NEXTENTRY
 22020                                  ; Outputs:
 22021                                  ;	ES:BP = Drive parameters
 22022                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 22023                                  ; Destroys ES,BP,AX
 22024                                  ;--------------------------------------------------------------------------
 22025                                  
 22026                                  STARTSRCH:
 22027 00004ABC C42E[2405]              	LES	BP,[THISDPB]
 22028 00004AC0 31C0                    	XOR	AX,AX
 22029 00004AC2 A3[F402]                	MOV	[LASTENT],AX
 22030 00004AC5 A2[1605]                	MOV	[VOLID],AL		; No volume ID found
 22031 00004AC8 48                      	DEC	AX
 22032 00004AC9 A3[6A05]                	MOV	[ENTFREE],AX
 22033 00004ACC A3[6C05]                	MOV	[ENTLAST],AX
 22034 00004ACF C3                      	retn
 22035                                  
 22036                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 22037                                  ;----------------------------------------------------------------------------
 22038                                  ; Procedure Name : MatchAttributes
 22039                                  ;
 22040                                  ; Input:    [Attrib] = attribute to search for
 22041                                  ;	    CH = found attribute
 22042                                  ; Output:   JZ <match>
 22043                                  ;	    JNZ <nomatch>
 22044                                  ; Registers modified: noneski
 22045                                  ;----------------------------------------------------------------------------
 22046                                  
 22047                                  MatchAttributes:
 22048 00004AD0 50                      	PUSH	AX
 22049                                  
 22050                                  ;hkn; SS override
 22051 00004AD1 36A0[0605]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 22052 00004AD5 F6D0                    	NOT	AL			; AL <- SearchSet'
 22053 00004AD7 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 22054                                  	;and	al,16h
 22055 00004AD9 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 22056                                  ;
 22057                                  ; the result is non-zero if an attribute is not in the search set
 22058                                  ; and in the found set and in the important set. This means that we do not
 22059                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 22060                                  ;
 22061 00004ADB 58                      	POP	AX
 22062 00004ADC C3                      	retn
 22063                                  
 22064                                  ;Break <DevName - Look for name of device>
 22065                                  ;---------------------------------------------------------------------------
 22066                                  ;
 22067                                  ; Procedure Name : DevName
 22068                                  ;
 22069                                  ; Inputs:
 22070                                  ;	DS,ES:DOSDATA
 22071                                  ;	Filename in NAME1
 22072                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 22073                                  ; Function:
 22074                                  ;	Determine if file is in list of I/O drivers
 22075                                  ; Outputs:
 22076                                  ;	Carry set if not a device
 22077                                  ;	ELSE
 22078                                  ;	Zero flag set
 22079                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 22080                                  ;	     bits 0-4 set from low byte of attribute word
 22081                                  ;	DEVPT = DWORD pointer to Device header of device
 22082                                  ; BX destroyed, others preserved
 22083                                  ;---------------------------------------------------------------------------
 22084                                  
 22085                                  DEVNAME:
 22086                                  	; 28/07/2018 - Retro DOS v3.0
 22087                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 22088                                  
 22089 00004ADD 56                      	PUSH	SI
 22090 00004ADE 57                      	PUSH	DI
 22091 00004ADF 51                      	PUSH	CX
 22092 00004AE0 50                      	PUSH	AX
 22093                                  
 22094                                  ; E5 special code
 22095 00004AE1 FF36[E604]              	PUSH	WORD [NAME1]
 22096 00004AE5 803E[E604]05            	CMP	byte [NAME1],5
 22097 00004AEA 7505                    	JNZ	short NOKTR
 22098 00004AEC C606[E604]E5            	MOV	byte [NAME1],0E5h
 22099                                  NOKTR:
 22100                                  	;test	byte [ATTRIB],8
 22101 00004AF1 F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 22102                                  					; If looking for VOL id don't find devs
 22103 00004AF6 7522                    	JNZ	short RET31
 22104                                  
 22105                                  ;hkn; NULDEV is in DOSDATA
 22106 00004AF8 BE[4800]                	MOV	SI,NULDEV
 22107                                  LOOKIO:
 22108                                  	;test	word [si+4],8000h
 22109 00004AFB F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 22110 00004B00 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 22111 00004B02 89F0                    	MOV	AX,SI
 22112                                  	;add	si,10
 22113 00004B04 83C60A                  	ADD	SI,SYSDEV.NAME
 22114                                  
 22115                                  ;hkn; NAME1 is in DOSDATA
 22116 00004B07 BF[E604]                	MOV	DI,NAME1
 22117 00004B0A B90400                  	MOV	CX,4			; All devices are 8 letters
 22118 00004B0D F3A7                    	REPE	CMPSW			; Check for name in list
 22119 00004B0F 89C6                    	MOV	SI,AX
 22120 00004B11 7415                    	JZ	short IOCHK		; Found it?
 22121                                  SKIPDEV:
 22122 00004B13 C534                    	LDS	SI,[SI]			; Get address of next device
 22123 00004B15 83FEFF                  	CMP	SI,-1			; At end of list?
 22124 00004B18 75E1                    	JNZ	short LOOKIO
 22125                                  RET31:	
 22126 00004B1A F9                      	STC				; Not found
 22127                                  RETNV:	
 22128 00004B1B 8CD1                    	MOV	CX,SS
 22129 00004B1D 8ED9                    	MOV	DS,CX
 22130                                  
 22131 00004B1F 8F06[E604]              	POP	WORD [NAME1]
 22132 00004B23 58                      	POP	AX
 22133 00004B24 59                      	POP	CX
 22134 00004B25 5F                      	POP	DI
 22135 00004B26 5E                      	POP	SI
 22136 00004B27 C3                      	RETN
 22137                                  
 22138                                  IOCHK:
 22139                                  ;hkn; SS override for DEVPT
 22140 00004B28 368C1E[3405]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 22141                                  	;mov	bh,[si+4]
 22142 00004B2D 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 22143 00004B30 80CFC0                  	OR	BH,0C0h
 22144 00004B33 80E7DF                  	and	bh,0DFh
 22145                                  	;AND	BH,~(020h)		; Clears Carry
 22146 00004B36 368936[3205]            	MOV	[SS:DEVPT],SI
 22147 00004B3B EBDE                    	JMP	short RETNV
 22148                                  
 22149                                  ;BREAK <Build_device_ent - Make a Directory entry>
 22150                                  ;---------------------------------------------------------------------------
 22151                                  ; Procedure Name : Build_device_ent
 22152                                  ;
 22153                                  ; Inputs:
 22154                                  ;	[NAME1] has name
 22155                                  ;	BH is attribute field (supplied by DEVNAME)
 22156                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 22157                                  ; Function:
 22158                                  ;	Build a directory entry for a device at DEVFCB
 22159                                  ; Outputs:
 22160                                  ;	BX points to DEVFCB
 22161                                  ;	SI points to dir_first field
 22162                                  ;	AH = input BH
 22163                                  ;	AL = 0
 22164                                  ;	dir_first = DEVPT
 22165                                  ;	Zero Set, Carry Clear
 22166                                  ; DS,ES,BP preserved, others destroyed
 22167                                  ;--------------------------------------------------------------------------
 22168                                  
 22169                                  Build_device_ent:
 22170 00004B3D B82020                  	MOV	AX,"  " ; 2020h
 22171                                  
 22172                                  ;hkn; DEVFCB is in DOSDATA
 22173 00004B40 BF[EE04]                	MOV	DI,DEVFCB+8		; Point to extent field
 22174                                  
 22175                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 22176                                  
 22177 00004B43 AB                      	STOSW
 22178 00004B44 AA                      	STOSB				; Blank out extent field
 22179                                  	;mov	al,40h
 22180 00004B45 B040                    	MOV	AL,attr_device
 22181                                  
 22182                                  ;	Fill Dir_attr
 22183                                  
 22184 00004B47 AA                      	STOSB				; Set attribute field
 22185 00004B48 31C0                    	XOR	AX,AX
 22186 00004B4A B90A00                  	MOV	CX,10
 22187                                  
 22188                                  ; Fill dir_pad
 22189                                  
 22190 00004B4D F3AB                    	REP	STOSW			; Fill rest with zeros
 22191 00004B4F E864CD                  	call	DATE16
 22192                                  
 22193                                  ;hkn; DEVFCB is in DOSDATA
 22194 00004B52 BF[FC04]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 22195 00004B55 92                      	XCHG	AX,DX
 22196                                  
 22197                                  ; Fill dir_time
 22198                                  
 22199 00004B56 AB                      	STOSW
 22200 00004B57 92                      	XCHG	AX,DX
 22201                                  
 22202                                  ; Fill dir_date
 22203                                  
 22204 00004B58 AB                      	STOSW
 22205 00004B59 89FE                    	MOV	SI,DI			; SI points to dir_first field
 22206 00004B5B A1[3205]                	MOV	AX,[DEVPT]
 22207                                  
 22208                                  ; Fill dir_first
 22209                                  
 22210 00004B5E AB                      	STOSW				; Dir_first points to device
 22211 00004B5F A1[3405]                	MOV	AX,[DEVPT+2]
 22212                                  ;
 22213                                  ; Fill dir_size_l
 22214                                  ;
 22215 00004B62 AB                      	STOSW
 22216 00004B63 88FC                    	MOV	AH,BH			; Put device atts in AH
 22217                                  
 22218                                  ;hkn; DEVFCB is in DOSDATA
 22219 00004B65 BB[E604]                	MOV	BX,DEVFCB
 22220 00004B68 30C0                    	XOR	AL,AL			; Set zero, clear carry
 22221 00004B6A C3                      	retn
 22222                                  
 22223                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 22224                                  ;----------------------------------------------------------------------------
 22225                                  ;
 22226                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 22227                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 22228                                  ;   If invalid, reset original CDS to root.
 22229                                  ;
 22230                                  ;   Inputs:	ThisCDS points to CDS of interest
 22231                                  ;		SS:DI points to temp buffer
 22232                                  ;   Outputs:	The current directory string is validated on the appropriate
 22233                                  ;		    drive
 22234                                  ;		ThisDPB changed
 22235                                  ;		ES:DI point to CDS
 22236                                  ;		Carry set if error (currently user FAILed to I 24)
 22237                                  ;   Registers modified: all
 22238                                  ;----------------------------------------------------------------------------
 22239                                  
 22240                                  ValidateCDS:
 22241                                  	; 28/07/2018 - Retro DOS v3.0
 22242                                  
 22243                                     %define  Temp	[bp-2]	; word
 22244                                     %define  SaveCDS	[bp-6]	; dword
 22245                                     %define  SaveCDSL	[bp-6]	; word
 22246                                     %define  SaveCDSH	[bp-4]	; word
 22247                                  
 22248                                  	;Enter
 22249 00004B6B 55                      	push	bp
 22250 00004B6C 89E5                    	mov	bp,sp
 22251 00004B6E 83EC06                  	sub	sp,6
 22252                                  
 22253 00004B71 897EFE                  	MOV	Temp,DI
 22254                                  
 22255                                  ;hkn; SS override
 22256 00004B74 36C536[3A05]            	LDS	SI,[SS:THISCDS]
 22257 00004B79 8976FA                  	MOV	SaveCDSL,SI
 22258 00004B7C 8C5EFC                  	MOV	SaveCDSH,DS
 22259                                  	;EnterCrit critDisk
 22260 00004B7F E8E3D4                  	call	EcritDisk
 22261                                  	;test	word [si+67],8000h
 22262 00004B82 F744430080              	TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 22263 00004B87 7403                    	JZ	short _DoSplice
 22264 00004B89 E98900                  	JMP	FatFail
 22265                                  _DoSplice:
 22266 00004B8C 30D2                    	XOR	DL,DL
 22267 00004B8E 368616[F802]            	XCHG	DL,[SS:NoSetDir]
 22268                                  
 22269                                  ;hkn; SS is DOSDATA
 22270                                  	;Context ES
 22271 00004B93 16                      	push	ss
 22272 00004B94 07                      	pop	es
 22273                                  	;Invoke	FStrcpy
 22274 00004B95 E8C2D3                  	call	FStrCpy
 22275 00004B98 8B76FE                  	MOV	SI,Temp
 22276                                  
 22277                                  ;hkn; SS is DOSDATA
 22278                                  	;Context DS
 22279 00004B9B 16                      	push	ss
 22280 00004B9C 1F                      	pop	ds	
 22281                                  	;Invoke	Splice
 22282 00004B9D E83621                  	call	Splice
 22283                                  
 22284                                   ;hkn; SS is DOSDATA
 22285                                  	;Context DS			;   FatReadCDS (ThisCDS);
 22286 00004BA0 16                      	push	ss
 22287 00004BA1 1F                      	pop	ds
 22288 00004BA2 8816[F802]              	MOV	[NoSetDir],DL
 22289 00004BA6 C43E[3A05]              	LES	DI,[THISCDS]
 22290                                  	;SAVE	<BP>
 22291 00004BAA 55                      	push	bp
 22292                                  	;Invoke	FATREAD_CDS
 22293 00004BAB E80E10                  	call	FATREAD_CDS	
 22294                                  	;RESTORE <BP>
 22295 00004BAE 5D                      	pop	bp
 22296 00004BAF 7264                    	JC	short FatFail
 22297                                  
 22298 00004BB1 C536[3A05]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 22299                                  	;cmp	word [si+73], -1
 22300 00004BB5 837C49FF                	CMP	word [SI+curdir.ID],-1
 22301 00004BB9 754C                    	JNZ	short RestoreCDS
 22302                                  
 22303                                  ;hkn; SS is DOSDATA
 22304                                  	;Context ES
 22305 00004BBB 16                      	push	ss
 22306 00004BBC 07                      	pop	es
 22307                                  
 22308                                  ;hkn; SS override
 22309                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 22310 00004BBD 36FF36[4A05]            	push	word [SS:WFP_START]
 22311                                  	;cmp	si,[bp-6]
 22312 00004BC2 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 22313 00004BC5 750B                    	JNZ	short DoChdir
 22314                                  	;mov	di,[bp-2]
 22315 00004BC7 8B7EFE                  	MOV	DI,Temp
 22316                                  
 22317                                  ;hkn; SS override
 22318 00004BCA 36893E[4A05]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 22319                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 22320 00004BCF E888D3                  	call	FStrCpy
 22321                                  DoChdir:
 22322                                  ;hkn; SS is DOSDATA
 22323                                  	;Context DS
 22324 00004BD2 16                      	push	ss
 22325 00004BD3 1F                      	pop	ds
 22326                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 22327 00004BD4 FF36[0805]              	push	word [SATTRIB]
 22328 00004BD8 55                      	push	bp
 22329                                  	;Invoke	DOS_ChDir
 22330 00004BD9 E808F1                  	call	DOS_CHDIR
 22331                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 22332 00004BDC 5D                      	pop	bp
 22333 00004BDD 5B                      	pop	bx
 22334 00004BDE 8F06[4A05]              	pop	word [WFP_START]
 22335 00004BE2 881E[0805]              	MOV	[SATTRIB],BL
 22336 00004BE6 C576FA                  	LDS	SI,SaveCDS
 22337 00004BE9 730F                    	JNC	short SetCluster	;	if (c == -1) {
 22338                                  
 22339                                  ;hkn; SS override for THISCDS
 22340 00004BEB 368936[3A05]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 22341 00004BF0 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS
 22342 00004BF5 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 22343 00004BF7 884C03                  	MOV	[SI+3],CL		;	    }
 22344                                  SetCluster:
 22345                                  	;mov	word [si+73],0FFFFh
 22346 00004BFA C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 22347 00004BFF 36C536[3A05]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 22348                                  	; MSDOS 6.0
 22349                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 22350                                  	;JZ	short setdirclus		     ;AN000;;MS.
 22351                                  	;MOV	CX,-1				     ;AN000;;MS.
 22352                                  setdirclus:
 22353                                  	;mov	[si+73],cx
 22354 00004C04 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 22355                                  RestoreCDS:
 22356 00004C07 C47EFA                  	LES	DI,SaveCDS
 22357 00004C0A 36893E[3A05]            	MOV	[SS:THISCDS],DI
 22358 00004C0F 368C06[3C05]            	MOV	[SS:THISCDS+2],ES
 22359 00004C14 F8                      	CLC
 22360                                  FatFail:
 22361                                  	;LeaveCrit critDisk
 22362 00004C15 E855D4                  	call	LcritDisk
 22363                                  
 22364                                  	;les	di,[bp-6]
 22365 00004C18 C47EFA                  	LES	DI,SaveCDS
 22366                                  	;Leave
 22367 00004C1B 89EC                    	mov	sp,bp
 22368 00004C1D 5D                      	pop	bp
 22369 00004C1E C3                      	retn
 22370                                  
 22371                                  ; 28/07/2018 - Retro DOS v3.0
 22372                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 22373                                  
 22374                                  ;Break	<CheckThisDevice - Check for being a device>
 22375                                  ;---------------------------------------------------------------------------
 22376                                  ;
 22377                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 22378                                  ;   device specified. We will return carry if there is a device present. 
 22379                                  ;   The forms of devices we will recognize are:
 22380                                  ;
 22381                                  ;	[path]device
 22382                                  ;
 22383                                  ;   Note that the drive letter has *already* been removed. All other forms
 22384                                  ;   are not considered to be devices. If such a device is found we change
 22385                                  ;   the source pointer to point to the device component.
 22386                                  ;
 22387                                  ;   Inputs:	ES is DOSDATA
 22388                                  ;		DS:SI contains name
 22389                                  ;   Outputs:	ES is DOSDATA
 22390                                  ;		DS:SI point to name or device
 22391                                  ;		Carry flag set if device was found
 22392                                  ;		Carry flag reset otherwise
 22393                                  ;   Registers Modified: all except ES:DI, DS
 22394                                  ;----------------------------------------------------------------------------
 22395                                  
 22396                                  CheckThisDevice:
 22397 00004C1F 57                      	push	di
 22398 00004C20 56                      	push	si
 22399 00004C21 89F7                    	MOV	DI,SI
 22400                                  ;
 22401                                  ; Check for presence of \dev\ (Dam multiplan!)
 22402                                  ;
 22403 00004C23 8A04                    	MOV	AL,[SI]
 22404 00004C25 E8210A                  	call	PATHCHRCMP		; is it a path char?
 22405 00004C28 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 22406 00004C2A 46                      	INC	SI			; simulate LODSB
 22407                                  ;
 22408                                  ; We have the leading path separator. Look for DEV part.
 22409                                  ;
 22410 00004C2B AD                      	LODSW
 22411 00004C2C 0D2020                  	OR	AX,2020h
 22412 00004C2F 3D6465                  	cmp	ax,"de"
 22413                                  	;CMP	AX,"e"<< 8 + "d"
 22414 00004C32 752D                    	JNZ	short NotDevice		; not "de", assume not device
 22415 00004C34 AC                      	LODSB
 22416 00004C35 0C20                    	OR	AL,20h
 22417 00004C37 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 22418 00004C39 7526                    	JNZ	short NotDevice
 22419 00004C3B AC                      	LODSB
 22420 00004C3C E80A0A                  	call	PATHCHRCMP		; do we have the last path separator?
 22421 00004C3F 7520                    	JNZ	short NotDevice		; no. go for it.
 22422                                  ;
 22423                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 22424                                  ; SI and DevName may destroy DS.
 22425                                  ;
 22426                                  ParseDev:
 22427 00004C41 1E                      	push	ds
 22428 00004C42 56                      	push	si			; preserve the source pointer
 22429 00004C43 E89909                  	call	NameTrans		; advance DS:SI
 22430 00004C46 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 22431 00004C49 F9                      	STC				; simulate a Carry return from DevName
 22432 00004C4A 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 22433                                  
 22434                                  ;hkn; SS is DOSDATA
 22435 00004C4C 16                      	push	ss
 22436 00004C4D 1F                      	pop	ds
 22437                                  
 22438                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 22439                                  ;
 22440                                  ; SR;
 22441                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 22442                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 22443                                  ; old call set the volume attribute bit.
 22444                                  ;
 22445 00004C4E A0[0805]                	mov	al,[SATTRIB]
 22446 00004C51 A2[0605]                	mov	[ATTRIB],al		;set Attrib for DevName
 22447                                  
 22448                                  ; M026 - end
 22449                                  
 22450 00004C54 E886FE                  	call	DEVNAME
 22451                                  
 22452                                  SkipSearch:
 22453 00004C57 5E                      	pop	si
 22454 00004C58 1F                      	pop	ds
 22455                                  ;
 22456                                  ; SI points to the beginning of the potential device. If we have a device
 22457                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 22458                                  ; original value. At this point Carry set indicates FILE.
 22459                                  ;
 22460                                  CheckReturn:
 22461 00004C59 5F                      	pop	di			; get original SI
 22462 00004C5A 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 22463 00004C5C 89FE                    	MOV	SI,DI
 22464                                  Check_Done:
 22465 00004C5E 5F                      	pop	di
 22466 00004C5F F5                      	CMC				; invert carry. Carry => device
 22467 00004C60 C3                      	retn
 22468                                  NotDevice:
 22469 00004C61 F9                      	STC
 22470 00004C62 EBF5                    	JMP	short CheckReturn
 22471                                  
 22472                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 22473                                  ;-----------------------------------------------------------------------------
 22474                                  ;
 22475                                  ; Procedure Name : LookupPath
 22476                                  ;
 22477                                  ; Output  DS:SI -> path name,
 22478                                  ;	  ES:DI -> dir entry info buffer
 22479                                  ;	  ES:CX -> extended dir info buffer
 22480                                  ;
 22481                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 22482                                  ;			     FastOpen, DS:SI points to char just one after
 22483                                  ;			     the last char of path name which is fully or
 22484                                  ;			     partially found in FastOPen
 22485                                  ;	  carry flag set : FastOpen not in memory or path name not found
 22486                                  ;
 22487                                  ;----------------------------------------------------------------------------
 22488                                  
 22489                                  LookupPath:
 22490                                  ;	PUSH	AX
 22491                                  
 22492                                  ;hkn; SS override
 22493                                  	;test	byte [ss:FastOpenFlg],1
 22494 00004C64 36F606[6E0F]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSPEN
 22495 00004C6A 7502                    	JNZ	short FASTINST			    ; and this routine is
 22496                                  NOLOOK:
 22497 00004C6C EB6A                    	JMP	NOLOOKUP			    ; executed once
 22498                                  
 22499                                  FASTINST:
 22500                                  ;hkn; SS override
 22501                                  	;test	byte [ss:FastOpenFlg],8
 22502 00004C6E 36F606[6E0F]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 22503 00004C74 75F6                    	JNZ	short NOLOOK			    ; yes
 22504                                  
 22505 00004C76 BB[430F]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 22506                                  
 22507                                  ;hkn; SS override
 22508 00004C79 368B36[4A05]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 22509 00004C7E BF[4E0F]                	MOV	DI,Dir_Info_Buff
 22510 00004C81 B9[490F]                	MOV	CX,FastOpen_Ext_Info
 22511 00004C84 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 22512 00004C86 1E                      	PUSH	DS
 22513 00004C87 07                      	POP	ES
 22514                                  
 22515                                  ;hkn; SS override
 22516                                  	;call	far [bx+2]
 22517 00004C88 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 22518 00004C8B 723A                    	JC	short NOTFOUND			    ; fastopen not in memory
 22519                                  
 22520 00004C8D 8D5CFE                  	LEA	BX,[SI-2]
 22521                                  
 22522                                  ;hkn; SS override
 22523 00004C90 363B1E[4A05]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 22524 00004C95 7430                    	JZ	short NOTFOUND			    ; no
 22525                                  
 22526                                  	; MSDOSD 6.0				    ; fully or partially found
 22527                                  	;CMP	BYTE [SI],0			    ;AN000;FO.
 22528                                  	;JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 22529                                  	;PUSH	CX				    ;AN000;FO.; is attribute matched ?
 22530                                  
 22531                                  ;hkn; SS override for attrib/sattrib
 22532                                  	;MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 22533                                  	;MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 22534                                  	;MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 22535                                  	;MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 22536                                  	;call	Matchattributes 		    ;AN000;FO.;
 22537                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 22538                                  	;POP	CX				    ;AN000;FO.;
 22539                                  	;JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 22540                                  ;parfnd:
 22541                                  
 22542                                  ;hkn; SS override
 22543 00004C97 368936[6F0F]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 22544 00004C9C 89CB                    	MOV	BX,CX
 22545                                  	; MSDOS 6.0
 22546                                  	;MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 22547                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 22548                                  	;MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 22549                                  	;MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 22550                                  	;MOV	[SS:DIRSTART],AX			    ;AN001;;FO.
 22551                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22552                                  	;mov	ax,[bx+3] ; MSDOS 3.3
 22553 00004C9E 8B4703                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 22554 00004CA1 36A3[5405]              	MOV	[SS:CLUSNUM],AX			    ;
 22555                                  
 22556 00004CA5 06                      	PUSH	ES				    ; save ES
 22557                                  ;hkn; SS override
 22558 00004CA6 36C41E[2405]            	LES	BX,[SS:THISDPB]			    ; put drive id
 22559 00004CAB 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 22560                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 22561 00004CAE 07                      	POP	ES				    ; pop ES
 22562                                  ;SR;
 22563                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 22564                                  ;indicate it is not a root dir
 22565                                  ;
 22566 00004CAF 36C706[7405]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 22567                                  
 22568 00004CB6 368C06[7605]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 22569 00004CBB 89FB                    	MOV	BX,DI				    ; start of entry
 22570                                  	;lea	si,[di+1Ah]
 22571 00004CBD 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 22572                                  						    ; dir_first field in the
 22573                                  						    ; dir entry
 22574                                  ;hkn; SS override for FastOpenFlg
 22575                                  	;or	byte [ss:FastOpenFlg],2
 22576 00004CC0 36800E[6E0F]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 22577                                  ;	POP	AX
 22578 00004CC6 C3                      	RETN
 22579                                  NOTFOUND:
 22580 00004CC7 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 22581 00004CCA 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 22582 00004CCC 36C606[6E0F]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 22583                                  Partial_Success:
 22584                                  	;and	byte [SS:FastOpenFlg],0FBh
 22585 00004CD2 368026[6E0F]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 22586                                  NOLOOKUP:
 22587                                  ;	POP	AX
 22588 00004CD8 F9                      	STC
 22589 00004CD9 C3                      	RETN
 22590                                  
 22591                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 22592                                  ;-----------------------------------------------------------------------------
 22593                                  ;
 22594                                  ; Procedure Name : InsertPath
 22595                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 22596                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 22597                                  ;	  DS = DOSDATA
 22598                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 22599                                  ;
 22600                                  ;-----------------------------------------------------------------------------
 22601                                  
 22602                                  InsertPath:
 22603 00004CDA 9C                      	PUSHF
 22604                                  ;hkn; SS override for FastOpenFlag
 22605                                  	;test	byte [SS:FastOpenFlg], 1
 22606 00004CDB 36F606[6E0F]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 22607 00004CE1 7469                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 22608                                  	;test	byte [ss:FastOpenFlg],2
 22609 00004CE3 36F606[6E0F]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 22610 00004CE9 740D                    	JZ	short INSERT_DIR_INFO		; no
 22611                                  	;and	byte [ss:FastOpenFlg],0FDh
 22612 00004CEB 368026[6E0F]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 22613 00004CF1 368B3E[6F0F]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 22614 00004CF6 EB4E                    	JMP	short GET_NEXT2
 22615                                  INSERT_DIR_INFO:				; save registers
 22616 00004CF8 1E                      	PUSH	DS
 22617 00004CF9 06                      	PUSH	ES
 22618 00004CFA 53                      	PUSH	BX
 22619 00004CFB 56                      	PUSH	SI
 22620 00004CFC 57                      	PUSH	DI
 22621 00004CFD 51                      	PUSH	CX
 22622 00004CFE 50                      	PUSH	AX
 22623                                  
 22624                                  ;hkn; SS override
 22625 00004CFF 36C53E[7405]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 22626 00004D04 BE[490F]                	MOV	SI,FastOpen_Ext_Info
 22627                                  	;mov	ax,[di+6]
 22628 00004D07 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 22629                                  	; MSDOS 6.0
 22630 00004D0A 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 22631                                  	;MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 22632                                  
 22633                                  ;hkn; SS is DOSDATA
 22634 00004D0E 16                      	push	ss
 22635 00004D0F 1F                      	pop	ds
 22636                                  	; MSDOS6.0
 22637                                  	;MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 22638                                  	; MSDOS 3.3	
 22639                                  	;mov	[si+1],ax	
 22640 00004D10 894401                  	MOV	[SI+FEI.dirsec],AX
 22641                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22642 00004D13 A1[5405]                	MOV	AX,[CLUSNUM]		; save next cluster number
 22643                                  	;;mov	[si+5],ax ; MSDOS 6.0
 22644                                  	;mov	[si+3],ax ; MSDOS 3.3
 22645 00004D16 894403                  	MOV	[SI+FEI.clusnum],AX
 22646                                  	;MSDOS 6.0
 22647                                  	;MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 22648                                  	;MOV	[SI+FEI.lastent],AX	;AN000;FO.
 22649                                  	;MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 22650                                  	;MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 22651                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22652 00004D19 89D8                    	MOV	AX,BX
 22653                                  	;add	di,16
 22654 00004D1B 83C710                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 22655 00004D1E 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 22656                                  	;mov	cl,32
 22657 00004D20 B120                    	MOV	CL,dir_entry.size
 22658 00004D22 F6F1                    	DIV	CL
 22659                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 22660 00004D24 8804                    	mov	[si],al
 22661                                  
 22662 00004D26 1E                      	PUSH	DS
 22663 00004D27 07                      	POP	ES
 22664                                  
 22665 00004D28 8E1E[7605]              	MOV	DS,[CURBUF+2]
 22666 00004D2C 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 22667                                  	;cmp	word [di+1Ah],0
 22668 00004D2E 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 22669                                  					; never insert info when file is empty
 22670 00004D32 740B                    	JZ	short SKIP_INSERT	; e.g. newly created file
 22671                                  
 22672 00004D34 56                      	PUSH	SI			; ES:BX -> extended info
 22673 00004D35 5B                      	POP	BX
 22674                                  
 22675                                  	;mov	al,2
 22676 00004D36 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 22677 00004D38 BE[430F]                	MOV	SI,FastOpenTable
 22678                                  	;call	far [es:si+2]
 22679 00004D3B FF5C02                  	CALL	far [SI+fastopen_entry.name_caching]
 22680                                  
 22681 00004D3E F8                      	CLC
 22682                                  SKIP_INSERT:
 22683 00004D3F 58                      	POP	AX
 22684 00004D40 59                      	POP	CX			; restore registers
 22685 00004D41 5F                      	POP	DI
 22686 00004D42 5E                      	POP	SI
 22687 00004D43 5B                      	POP	BX
 22688 00004D44 07                      	POP	ES
 22689 00004D45 1F                      	POP	DS
 22690                                  GET_NEXT2:
 22691                                  	;or	[ss:FastOpenFlg],8
 22692 00004D46 36800E[6E0F]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 22693                                  					; we got dir info from fastopen so
 22694                                  GET_NEXT_ELEMENT:
 22695 00004D4C 9D                      	POPF
 22696 00004D4D C3                      	RETN
 22697                                  
 22698                                  
 22699                                  ;============================================================================
 22700                                  ; DEV.ASM, MSDOS 6.0, 1991
 22701                                  ;============================================================================
 22702                                  ; 28/07/2018 - Retro DOS v3.0
 22703                                  
 22704                                  ; DEV.ASM: Retro DOS v2.0 - 14/03/2018
 22705                                  
 22706                                  ;TITLE   DEV - Device call routines
 22707                                  ;NAME    Dev
 22708                                  
 22709                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 22710                                  ;----------------------------------------------------------------------------
 22711                                  ;
 22712                                  ; Procedure Name : IOFUNC
 22713                                  ;
 22714                                  ; Inputs:
 22715                                  ;	DS:SI Points to SFT
 22716                                  ;	AH is function code
 22717                                  ;		= 0 Input
 22718                                  ;		= 1 Input Status
 22719                                  ;		= 2 Output
 22720                                  ;		= 3 Output Status
 22721                                  ;		= 4 Flush
 22722                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 22723                                  ;				   present.
 22724                                  ;	AL = character if output
 22725                                  ; Function:
 22726                                  ;	Perform indicated I/O to device or file
 22727                                  ; Outputs:
 22728                                  ;	AL is character if input
 22729                                  ;	If a status call
 22730                                  ;		zero set if not ready
 22731                                  ;		zero reset if ready (character in AL for input status)
 22732                                  ; For regular files:
 22733                                  ;	Input Status
 22734                                  ;		Gets character but restores position
 22735                                  ;		Zero set on EOF
 22736                                  ;	Input
 22737                                  ;		Gets character advances position
 22738                                  ;		Returns ^Z on EOF
 22739                                  ;	Output Status
 22740                                  ;		Always ready
 22741                                  ; AX altered, all other registers preserved
 22742                                  ;----------------------------------------------------------------------------
 22743                                  
 22744                                  IOFUNC:
 22745 00004D4E 368C16[3403]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 22746                                  					; DEVIOBUF
 22747 00004D53 36C706[3203][5E03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 22748 00004D5A 36C706[3603]0100        	MOV	WORD [SS:IOSCNT],1
 22749 00004D61 36A3[5E03]              	MOV	WORD [SS:DEVIOBUF],AX
 22750                                  	;test	word [si+5],8000h
 22751 00004D65 F744050080              	TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet
 22752 00004D6A 7403                    	JZ	short IOTO22		;AN000;
 22753 00004D6C E98500                  	JMP	IOTOFILE		;AN000;
 22754                                  IOTO22:
 22755                                  	;test	word [si+5],80h ; 17/05/2019
 22756 00004D6F F744058000              	TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 22757 00004D74 7502                    	JNZ	short IOTO33		;AN000;
 22758 00004D76 EB7C                    	JMP	IOTOFILE		;AN000;
 22759                                  IOTO33:
 22760 00004D78 E87DC8                  	call	save_world
 22761 00004D7B 8CDA                    	MOV	DX,DS
 22762 00004D7D 8CD3                    	MOV	BX,SS
 22763 00004D7F 8EDB                    	MOV	DS,BX
 22764 00004D81 8EC3                    	MOV	ES,BX
 22765 00004D83 31DB                    	XOR	BX,BX
 22766 00004D85 80FC05                  	cmp	ah,5		    ; system wait enabled?
 22767 00004D88 7504                    	jnz	short _no_sys_wait
 22768 00004D8A 81CB0004                	or	bx,0400H	    ; Set bit 10 in status word for driver
 22769                                  				    ; It is up to device driver to carry out
 22770                                  				    ; appropriate action.
 22771                                  _no_sys_wait:
 22772 00004D8E 891E[2703]              	MOV	[IOCALL_REQSTAT],BX
 22773 00004D92 31DB                    	XOR	BX,BX
 22774 00004D94 881E[3103]              	MOV	[IOMED],BL
 22775                                  
 22776 00004D98 88E3                    	MOV	BL,AH		 	; get function
 22777 00004D9A 8AA7[0413]              	MOV	AH,[BX+LenTab]
 22778 00004D9E D1E3                    	SHL	BX,1
 22779 00004DA0 8B8F[0A13]              	MOV	CX,[BX+CmdTab]
 22780 00004DA4 BB[2403]                	MOV	BX,IOCALL
 22781 00004DA7 8826[2403]              	MOV	[IOCALL_REQLEN],AH
 22782 00004DAB 882E[2603]              	MOV	[IOCALL_REQFUNC],CH
 22783                                  
 22784 00004DAF 8EDA                    	MOV	DS,DX
 22785 00004DB1 E84401                  	CALL	DEVIOCALL
 22786 00004DB4 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 22787                                  	;test	di,8000h
 22788                                  	;jnz	short DevErr
 22789 00004DB9 21FF                    	and	di,di
 22790 00004DBB 7820                    	js	short DevErr
 22791                                  
 22792                                  OKDevIO:
 22793 00004DBD 8CD0                    	MOV	AX,SS
 22794 00004DBF 8ED8                    	MOV	DS,AX
 22795                                  
 22796                                  	;cmp	ch, 5
 22797 00004DC1 80FD05                  	CMP	CH,DEVRDND
 22798 00004DC4 7506                    	JNZ	short DNODRD
 22799 00004DC6 A0[3103]                	MOV	AL,[IORCHR]
 22800 00004DC9 A2[5E03]                	MOV	[DEVIOBUF],AL
 22801                                  
 22802                                  DNODRD: 
 22803 00004DCC 8A26[2803]              	MOV	AH,[IOCALL_REQSTAT+1]
 22804 00004DD0 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 22805                                  	;and	ah,2
 22806 00004DD2 80E402                  	AND	AH,STBUI>>8
 22807                                  
 22808                                  QuickReturn:				;AN000; 2/13/KK
 22809 00004DD5 E80DC8                  	call	restore_world
 22810                                  
 22811                                  	; SR;
 22812                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 22813                                  	; IoStatFail = -1 (set after return from the I24)
 22814                                  	;
 22815                                  
 22816                                  	; MSDOS 6.0
 22817                                  	;pushf
 22818                                  	;mov	al,[ss:IoStatFail]	;assume fail error
 22819                                  	;cbw				;sign extend to word
 22820                                  	;cmp	ax,-1
 22821                                  	;jne	short not_fail_ret
 22822                                  	;inc	byte [ss:IoStatFail]
 22823                                  	;popf
 22824                                  	;retn
 22825                                  
 22826                                  ;not_fail_ret:
 22827 00004DD8 36A1[5E03]              	MOV	AX,[SS:DEVIOBUF]	;ss override
 22828                                  	;popf
 22829 00004DDC C3                      	retn
 22830                                  
 22831                                  ;IOTOFILEJ:
 22832                                  ;	JMP	SHORT IOTOFILE
 22833                                  
 22834                                  DevErr:
 22835 00004DDD 88CC                    	MOV	AH,CL
 22836 00004DDF E8490A                  	call	CHARHARD
 22837 00004DE2 3C01                    	CMP	AL,1
 22838 00004DE4 7506                    	JNZ	short NO_RETRY
 22839 00004DE6 E8FCC7                  	call	restore_world		
 22840 00004DE9 E962FF                  	JMP	IOFUNC	; 10/08/2018
 22841                                  
 22842                                  NO_RETRY:
 22843                                  
 22844                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 22845                                  	; ready so that DOS doesn't get caught in a status loop when user 
 22846                                  	; simply wants to ignore the error.
 22847                                  	;
 22848                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 22849                                  	; should be checked by the caller on return
 22850                                  	;
 22851                                  
 22852                                  					; SS override
 22853 00004DEC 368026[2803]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 22854                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI >> 8)
 22855                                  
 22856                                  	; SR;
 22857                                  	; Check if user failed
 22858                                  	;
 22859                                  
 22860                                  	; MSDOS 6.0
 22861                                  	;cmp	al,3
 22862                                  	;jnz	short not_fail
 22863                                  	;dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 22864                                  ;not_fail:
 22865 00004DF2 EBC9                    	JMP	short OKDevIO
 22866                                  
 22867                                  IOTOFILE:
 22868 00004DF4 08E4                    	OR	AH,AH
 22869 00004DF6 7423                    	JZ	short IOIN
 22870 00004DF8 FECC                    	DEC	AH
 22871 00004DFA 7405                    	JZ	short IOIST
 22872 00004DFC FECC                    	DEC	AH
 22873 00004DFE 7411                    	JZ	short IOUT
 22874 00004E00 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 22875                                  
 22876                                  IOIST:
 22877                                  	;push	word [si+15h]
 22878 00004E01 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 22879                                  	;push	word [si+17h]
 22880 00004E04 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 22881 00004E07 E81100                  	CALL	IOIN
 22882                                  	;pop	word [si+17h]
 22883 00004E0A 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 22884                                  	;pop	word [si+15h]
 22885 00004E0D 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 22886 00004E10 C3                      	retn
 22887                                  
 22888                                  IOUT:
 22889 00004E11 E81B00                  	CALL	SETXADDR
 22890 00004E14 E864F1                  	call	DOS_WRITE
 22891 00004E17 E84800                  	CALL	RESTXADDR	; If you change this into a jmp don't
 22892                                  IOUT_retn:
 22893 00004E1A C3                      	retn			; come crying to me when things don't
 22894                                  				; work ARR
 22895                                  IOIN:
 22896 00004E1B E81100                  	CALL	SETXADDR
 22897                                  					; SS override for DOS34_FLAG
 22898                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 22899 00004E1E E8D9EF                  	CALL	DOS_READ
 22900                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 22901 00004E21 09C9                    	OR	CX,CX			; Check EOF
 22902 00004E23 E83C00                  	CALL	RESTXADDR
 22903                                  					; SS override
 22904 00004E26 36A0[5E03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 22905 00004E2A 75EE                    	jnz	short IOUT_retn	
 22906 00004E2C B01A                    	MOV	AL,1AH			; ^Z if no bytes
 22907 00004E2E C3                      	retn
 22908                                  
 22909                                  SETXADDR:
 22910                                  					; SS override
 22911 00004E2F 368F06[1803]            	POP	WORD [SS:CALLSCNT]	; Return address
 22912                                  
 22913 00004E34 E8C1C7                  	call	save_world
 22914                                  
 22915                                  					; SS override for DMAADD and THISSFT
 22916 00004E37 36FF36[DA02]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 22917 00004E3C 36FF36[DC02]            	PUSH	WORD [SS:DMAADD+2]
 22918 00004E41 368C1E[3805]            	MOV	[SS:THISSFT+2],DS
 22919                                  
 22920 00004E46 16                      	push	ss
 22921 00004E47 1F                      	pop	ds
 22922                                  
 22923 00004E48 8936[3605]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 22924 00004E4C 8B0E[3403]              	MOV	CX,[IOXAD+2]
 22925 00004E50 890E[DC02]              	MOV	[DMAADD+2],CX
 22926 00004E54 8B0E[3203]              	MOV	CX,[IOXAD]
 22927 00004E58 890E[DA02]              	MOV	[DMAADD],CX		; Set byte trans addr
 22928 00004E5C 8B0E[3603]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 22929 00004E60 EB0F                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 22930                                  
 22931                                  RESTXADDR:
 22932 00004E62 8F06[1803]              	POP	WORD [CALLSCNT]		; Return address
 22933 00004E66 8F06[DC02]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 22934 00004E6A 8F06[DA02]              	POP	WORD [DMAADD]
 22935                                  
 22936 00004E6E E874C7                  	call	restore_world
 22937                                  					; SS override
 22938                                  RESTRET:
 22939 00004E71 36FF26[1803]            	JMP	WORD [SS:CALLSCNT]	; Return address
 22940                                  
 22941                                  
 22942                                  ; 29/07/2018 - Retro DOS v3.0
 22943                                  ; IBMDOS.COM (1987) - Offset 4D82h
 22944                                  
 22945                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 22946                                  
 22947                                  ;----------------------------------------------------------------------------
 22948                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 22949                                  ;
 22950                                  ;	Dev_Open_SFT issues an open call to the device associated with
 22951                                  ;	the SFT.
 22952                                  ;
 22953                                  ;	ENTRY	(ES:DI) = SFT
 22954                                  ;	EXIT	none
 22955                                  ;	USES	all
 22956                                  ;----------------------------------------------------------------------------
 22957                                  
 22958                                  DEV_OPEN_SFT:
 22959 00004E76 E87FC7                  	call	save_world
 22960                                  	;mov	al,0Dh	
 22961 00004E79 B00D                    	MOV	AL,DEVOPN
 22962 00004E7B EB05                    	JMP	SHORT DO_OPCLS
 22963                                  
 22964                                  ;----------------------------------------------------------------------------
 22965                                  ; Procedure Name : DEV_CLOSE_SFT
 22966                                  ;
 22967                                  ; Inputs:
 22968                                  ;	ES:DI Points to SFT
 22969                                  ; Function:
 22970                                  ;	Issue a CLOSE call to the correct device
 22971                                  ; Outputs:
 22972                                  ;	None
 22973                                  ; ALL preserved
 22974                                  ;----------------------------------------------------------------------------
 22975                                  
 22976                                  DEV_CLOSE_SFT:
 22977 00004E7D E878C7                  	call	save_world
 22978                                  	;mov	al,0Eh	
 22979 00004E80 B00E                    	MOV	AL,DEVCLS
 22980                                  
 22981                                  	; Main entry for device open and close. AL contains the function 
 22982                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 22983                                  	; open/close to block devices. This allows networks to function but 
 22984                                  	; does NOT hang up with bogus change-line code.
 22985                                  
 22986                                  	;entry	DO_OPCLS
 22987                                  DO_OPCLS:
 22988                                  	; Is the SFT for the net?  If so, no action necessary.
 22989                                  
 22990                                  	; MSDOS 3.3
 22991                                  	;call	IsSFTNet
 22992                                  	;jnz	short OPCLS_DONE
 22993                                  
 22994                                  	; MSDOS 6.0
 22995                                  	;test	word [es:di+5],8000h
 22996 00004E82 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 22997 00004E88 756A                    	JNZ	short OPCLS_DONE	; NOP on net SFTs
 22998 00004E8A 30E4                    	XOR	AH,AH			; Unit
 22999                                  	;test	word [es:di+5],80h
 23000 00004E8C 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 23001                                  	;les	di,[es:di+7]
 23002 00004E92 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 23003 00004E96 7513                    	JNZ	short GOT_DEV_ADDR
 23004                                  
 23005                                  	; We are about to call device open/close on a block driver. If no 
 23006                                  	; sharing then just short circuit to done.
 23007                                  	
 23008                                  ;;;;;	invoke	CheckShare
 23009                                  
 23010                                  	; MSDOS 3.3
 23011                                  	;call	CheckShare	; cmp byte [cs:fShare],0
 23012                                  	;jz	short OPCLS_DONE
 23013                                  
 23014                                  	; MSDOS 6.0
 23015                                  					; SS override
 23016 00004E98 36803E[B102]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 23017 00004E9E 7654                    	JBE	short OPCLS_DONE	;AN010; yes
 23018                                  
 23019                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23020                                  	;mov	ah,[es:di+1]
 23021 00004EA0 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 23022 00004EA4 268A0D                  	mov	cl,[es:di]
 23023                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 23024                                  	;les	di,[es:di+12h]
 23025 00004EA7 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 23026                                  GOT_DEV_ADDR:				; ES:DI -> device
 23027                                  	;test	word [es:di+4],800h
 23028 00004EAB 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 23029 00004EB1 7441                    	JZ	short OPCLS_DONE	; Device can't
 23030 00004EB3 06                      	PUSH	ES
 23031 00004EB4 1F                      	POP	DS
 23032 00004EB5 89FE                    	MOV	SI,DI			; DS:SI -> device
 23033                                  OPCLS_RETRY:
 23034                                  	;Context ES
 23035 00004EB7 16                      	push	ss
 23036 00004EB8 07                      	pop	es
 23037                                  					; DEVCALL is in DOSDATA
 23038 00004EB9 BF[0603]                	MOV	DI,DEVCALL
 23039                                  
 23040 00004EBC 89FB                    	MOV	BX,DI
 23041 00004EBE 50                      	PUSH	AX
 23042                                  	;mov	al,13
 23043 00004EBF B00D                    	MOV	AL,DOPCLHL
 23044 00004EC1 AA                      	STOSB				; Length
 23045 00004EC2 58                      	POP	AX
 23046 00004EC3 86E0                    	XCHG	AH,AL
 23047 00004EC5 AA                      	STOSB				; Unit
 23048 00004EC6 86E0                    	XCHG	AH,AL
 23049 00004EC8 AA                      	STOSB				; Command
 23050 00004EC9 26C7050000              	MOV	WORD [ES:DI],0		; Status
 23051 00004ECE 50                      	PUSH	AX			; Save Unit,Command
 23052                                  	;invoke	DEVIOCALL2
 23053 00004ECF E82900                  	call	DEVIOCALL2
 23054                                  
 23055                                  	;mov	di,[es:bx+3]
 23056 00004ED2 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 23057                                  	;test	di,8000h
 23058                                  	;jz	short OPCLS_DONEP	
 23059 00004ED6 21FF                    	and	di,di
 23060 00004ED8 7919                    	jns	short OPCLS_DONEP	; No error
 23061                                  	;test	word [si+4],8000h
 23062                                  	; 22/11/2022 (BugFix)
 23063                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVTYP
 23064 00004EDA F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 23065 00004EDF 7404                    	JZ	short BLKDEV
 23066 00004EE1 B486                    	MOV	AH,86H			; Read error in data, Char dev
 23067 00004EE3 EB04                    	JMP	SHORT HRDERR
 23068                                  
 23069                                  BLKDEV:
 23070 00004EE5 88C8                    	MOV	AL,CL			; Drive # in AL
 23071 00004EE7 B406                    	MOV	AH,6			; Read error in data, Blk dev
 23072                                  HRDERR:
 23073                                  	;invoke	CHARHARD
 23074 00004EE9 E83F09                  	call	CHARHARD
 23075 00004EEC 3C01                    	CMP	AL,1
 23076 00004EEE 7503                    	JNZ	short OPCLS_DONEP	; IGNORE or FAIL
 23077                                  					;  Note that FAIL is essentually IGNORED
 23078 00004EF0 58                      	POP	AX			; Get back Unit, Command
 23079 00004EF1 EBC4                    	JMP	short OPCLS_RETRY
 23080                                  
 23081                                  OPCLS_DONEP:
 23082 00004EF3 58                      	POP	AX			; Clean stack
 23083                                  OPCLS_DONE:
 23084 00004EF4 E8EEC6                  	call	restore_world
 23085 00004EF7 C3                      	retn
 23086                                  
 23087                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 23088                                  ;----------------------------------------------------------------------------
 23089                                  ;**	DevIoCall  - Call Device
 23090                                  ;
 23091                                  ;	ENTRY	DS:SI Points to device SFT
 23092                                  ;		ES:BX Points to request data
 23093                                  ;	EXIT	DS:SI -> Device driver
 23094                                  ;	USES	DS:SI,AX
 23095                                  ;----------------------------------------------------------------------------
 23096                                  ;**	DevIoCall2 - Call Device
 23097                                  ;
 23098                                  ;	ENTRY	DS:SI Points to DPB
 23099                                  ;		ES:BX Points to request data
 23100                                  ;	EXIT	DS:SI -> Device driver
 23101                                  ;	USES	DS:SI,AX
 23102                                  ;----------------------------------------------------------------------------
 23103                                  
 23104                                  DEVIOCALL:
 23105                                  					; SS override for CALLSSEC, 
 23106                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 23107 00004EF8 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 23108                                  
 23109                                  	;entry	DEVIOCALL2
 23110                                  DEVIOCALL2:
 23111                                  	;EnterCrit critDevice
 23112 00004EFB E877D1                  	call	EcritDevice
 23113                                  
 23114                                  	; MSDOS 6.0
 23115                                  	;TEST	word [SI+SYSDEV.ATT],DevTyp ;AN000; >32mb   block device ?
 23116                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23117                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb   read ?
 23118                                  	;JZ	short chkext		;AN000; >32mb   yes
 23119                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb   write ?
 23120                                  	;JZ	short chkex		;AN000; >32mb   yes
 23121                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 23122                                  	;				;AN000; >32mb   write/verify ?
 23123                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23124                                  ;chkext:
 23125                                  	;CALL	RW_SC			;AN000;LB. use secondary cache if there
 23126                                  	;JC	short dev_exit		;AN000;LB. done
 23127                                  	;
 23128                                  	;TEST	word [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb   extended driver?
 23129                                  	;JZ	short chksector		;AN000;>32mb   no
 23130                                  	;ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 23131                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 23132                                  	;MOV	[SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 23133                                  	;MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 23134                                  	;MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 23135                                  	;MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 23136                                  	;JMP	short chardev2		;AN000; >32mb
 23137                                  ;chksector:				;AN000; >32mb
 23138                                  	;CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 23139                                  	;JZ	short chardev2		;AN000; >32mb   then fake error
 23140                                  	;MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+ERROR_I24_NOT_DOS_DISK 
 23141                                  	;				;AN000; >32mb
 23142                                  	;JMP	SHORT dev_exit		;AN000; >32mb
 23143                                  
 23144                                  ;chardev2:				;AN000;
 23145                                  
 23146                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 23147                                  	; preserved
 23148                                  
 23149                                  	;mov	ax,[si+6]
 23150 00004EFE 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 23151 00004F01 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23152 00004F05 368C1E[2203]            	MOV	[SS:CALLDEVAD+2],DS
 23153 00004F0A 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23154                                  	;mov	ax,[si+8]
 23155 00004F0F 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 23156 00004F12 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23157 00004F16 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23158                                  	; MSDOS 6.0
 23159                                  	;CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 23160                                  	;JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 23161                                  dev_exit:
 23162                                  	;LeaveCrit critDevice
 23163 00004F1B E85FD1                  	call	LcritDevice
 23164 00004F1E C3                      	retn
 23165                                  
 23166                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 23167                                  ;---------------------------------------------------------------------------
 23168                                  ;
 23169                                  ; Procedure Name : SETREAD, SETWRITE
 23170                                  ;
 23171                                  ; Inputs:
 23172                                  ;	DS:BX = Transfer Address
 23173                                  ;	CX = Record Count
 23174                                  ;	DX = Starting Record
 23175                                  ;	AH = Media Byte
 23176                                  ;	AL = Unit Code
 23177                                  ; Function:
 23178                                  ;	Set up the device call header at DEVCALL
 23179                                  ; Output:
 23180                                  ;	ES:BX Points to DEVCALL
 23181                                  ; No other registers effected
 23182                                  ;
 23183                                  ;---------------------------------------------------------------------------
 23184                                  
 23185                                  SETREAD:
 23186 00004F1F 57                      	PUSH	DI
 23187 00004F20 51                      	PUSH	CX
 23188 00004F21 50                      	PUSH	AX
 23189 00004F22 B104                    	MOV	CL,DEVRD ; mov cl,4
 23190                                  SETCALLHEAD:
 23191 00004F24 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 23192 00004F26 16                      	PUSH	SS
 23193 00004F27 07                      	POP	ES
 23194                                  					; DEVCALL is in DOSDATA
 23195 00004F28 BF[0603]                	MOV	DI,DEVCALL
 23196                                  
 23197 00004F2B AA                      	STOSB				; length
 23198 00004F2C 58                      	POP	AX
 23199 00004F2D AA                      	STOSB				; Unit
 23200 00004F2E 50                      	PUSH	AX
 23201 00004F2F 88C8                    	MOV	AL,CL
 23202 00004F31 AA                      	STOSB				; Command code
 23203 00004F32 31C0                    	XOR	AX,AX
 23204 00004F34 AB                      	STOSW				; Status
 23205 00004F35 83C708                  	ADD	DI,8			; Skip link fields
 23206 00004F38 58                      	POP	AX
 23207 00004F39 86E0                    	XCHG	AH,AL
 23208 00004F3B AA                      	STOSB				; Media byte
 23209 00004F3C 86C4                    	XCHG	AL,AH
 23210 00004F3E 50                      	PUSH	AX
 23211 00004F3F 89D8                    	MOV	AX,BX
 23212 00004F41 AB                      	STOSW
 23213 00004F42 8CD8                    	MOV	AX,DS
 23214 00004F44 AB                      	STOSW				; Transfer addr
 23215 00004F45 59                      	POP	CX			; Real AX
 23216 00004F46 58                      	POP	AX			; Real CX
 23217 00004F47 AB                      	STOSW				; Count
 23218 00004F48 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 23219 00004F49 AB                      	STOSW				; Start
 23220 00004F4A 91                      	XCHG	AX,CX
 23221 00004F4B 87D1                    	XCHG	DX,CX
 23222 00004F4D 5F                      	POP	DI
 23223                                  					; DEVCALL is in DOSDATA
 23224 00004F4E BB[0603]                	MOV	BX,DEVCALL
 23225 00004F51 C3                      	retn
 23226                                  
 23227                                  	;entry	SETWRITE
 23228                                  SETWRITE:
 23229                                  
 23230                                  ; Inputs:
 23231                                  ;	DS:BX = Transfer Address
 23232                                  ;	CX = Record Count
 23233                                  ;	DX = Starting Record
 23234                                  ;	AH = Media Byte
 23235                                  ;	AL = Unit Code
 23236                                  ; Function:
 23237                                  ;	Set up the device call header at DEVCALL
 23238                                  ; Output:
 23239                                  ;	ES:BX Points to DEVCALL
 23240                                  ; No other registers effected
 23241                                  
 23242 00004F52 57                      	PUSH	DI
 23243 00004F53 51                      	PUSH	CX
 23244 00004F54 50                      	PUSH	AX
 23245 00004F55 B108                    	MOV	CL,DEVWRT ; mov cl,8
 23246 00004F57 36020E[AD02]            	ADD	CL,[SS:VERFLG]		; SS override
 23247 00004F5C EBC6                    	JMP	SHORT SETCALLHEAD
 23248                                  
 23249                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 23250                                  ;---------------------------------------------------------------------------
 23251                                  ;
 23252                                  ; Procedure Name : RW_SC
 23253                                  ;
 23254                                  ; Inputs:
 23255                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 23256                                  ;	 [SC_STATUS]= SC validity status
 23257                                  ;	 [SEQ_SECTOR]= last sector read
 23258                                  ; Function:
 23259                                  ;	Read from or write through secondary cache
 23260                                  ; Output:
 23261                                  ;	ES:BX Points to DEVCALL
 23262                                  ;	carry clear, I/O is not done
 23263                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 23264                                  ;	carry set, I/O is done
 23265                                  ;
 23266                                  ;----------------------------------------------------------------------------
 23267                                  
 23268                                  ;procedure   RW_SC,NEAR		;AN000;
 23269                                  ;
 23270                                  ;	; SS override for all variables used.
 23271                                  ;
 23272                                  ;	CMP	[SC_CACHE_COUNT],0	;AN000;LB. secondary cache exists?
 23273                                  ;	JZ	scexit4 		;AN000;LB. no, do nothing
 23274                                  ;	CMP	[CALLSCNT],1		;AN000;LB. sector count = 1 (buffer I/O)
 23275                                  ;	JNZ	scexit4 		;AN000;LB. no, do nothing
 23276                                  ;	PUSH	CX			    ;AN000;;LB.
 23277                                  ;	PUSH	DX			    ;AN000;;LB. yes
 23278                                  ;	PUSH	DS			    ;AN000;;LB. save registers
 23279                                  ;	PUSH	SI			    ;AN000;;LB.
 23280                                  ;	PUSH	ES			    ;AN000;;LB.
 23281                                  ;	PUSH	DI			    ;AN000;;LB.
 23282                                  ;	MOV	DX,WORD PTR [CALLSSEC]	    ;AN000;;LB.  starting sector
 23283                                  ;	CMP	BYTE PTR [DEVCALL.REQFUNC],DEVRD ;AN000;LB. read ?
 23284                                  ;	JZ	doread			    ;AN000;LB. yes
 23285                                  ;	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 23286                                  ;	JMP	scexit2 		    ;AN000;LB. back to normal
 23287                                  ;scexit4:				    ;AN000;
 23288                                  ;	CLC				    ;AN000;LB. I/O not done yet
 23289                                  ;	return				    ;AN000;LB.
 23290                                  ;doread: 				    ;AN000;
 23291                                  ;	CALL	SC2BUF			    ;AN000;LB. check if in SC
 23292                                  ;	JC	readSC			    ;AN000;LB.
 23293                                  ;	MOV	[DEVCALL.REQSTAT],STDON     ;AN000;LB. fake done and ok
 23294                                  ;	STC				    ;AN000;LB. set carry
 23295                                  ;	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 23296                                  ;readSC: 				    ;AN000;
 23297                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23298                                  ;	MOV	CX,WORD PTR [CALLSSEC]	    ;AN000;;LB. saved sequential sector
 23299                                  ;	SUB	CX,WORD PTR [SEQ_SECTOR]    ;AN000;;LB. number
 23300                                  ;	SBB	AX,WORD PTR [SEQ_SECTOR+2]  ;AN000;;LB.
 23301                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23302                                  ;	JNZ	saveseq2		    ;AN000;;LB. yes,save seq. sector #
 23303                                  ;chklow: 						
 23304                                  ;	CMP	CX,1			    ;AN000;;LB. <= 1
 23305                                  ;	JA	saveseq2		    ;AN000;;LB. no, not sequential
 23306                                  ;	MOV	[SC_STATUS],-1		    ;AN000;;LB. prsume all SC valid
 23307                                  ;	MOV	AX,[SC_CACHE_COUNT]	    ;AN000;;LB. yes, sequential
 23308                                  ;	MOV	[CALLSCNT],AX		    ;AN000;;LB. read continuous sectors
 23309                                  ;readsr:
 23310                                  ;	MOV	AX,WORD PTR [CALLXAD+2]     ;AN000;;LB. save buffer addr
 23311                                  ;	MOV	[TEMP_VAR2],AX		    ;AN000;;LB. in temp vars
 23312                                  ;	MOV	AX,WORD PTR [CALLXAD]	    ;AN000;;LB.
 23313                                  ;	MOV	[TEMP_VAR],AX		    ;AN000;;LB.
 23314                                  ;						
 23315                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;LB. use SC cache addr as
 23316                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;LB. transfer addr
 23317                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR+2] ;AN000;LB.
 23318                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;LB.
 23319                                  ;	MOV	[SC_FLAG],1		    ;AN000;LB. flag it for later;
 23320                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23321                                  ;	MOV	[CURSC_DRIVE],AL	    ;AN000;;LB. set current drive
 23322                                  ;	MOV	AX,WORD PTR [CALLSSEC]	    ;AN000;;LB. current sector
 23323                                  ;	MOV	[CURSC_SECTOR],AX	    ;AN000;;LB. set current sector
 23324                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB.
 23325                                  ;	MOV	[CURSC_SECTOR+2],AX	    ;AN000;;LB.
 23326                                  ;saveseq2:				    ;AN000;
 23327                                  ;	CLC				    ;AN000;LB. clear carry
 23328                                  ;saveseq:				    ;AN000;	
 23329                                  ;	MOV	AX,[HIGH_SECTOR]	    ;AN000;LB. save current sector #
 23330                                  ;	MOV	WORD PTR [SEQ_SECTOR+2],AX  ;AN000;LB. for access mode ref.
 23331                                  ;	MOV	AX,[CALLSSEC]		    ;AN000;LB.	
 23332                                  ;	MOV	WORD PTR [SEQ_SECTOR],AX    ;AN000;LB.	
 23333                                  ;	JMP	short scexit 		    ;AN000;LB.	
 23334                                  ;						
 23335                                  ;scexit2:				    ;AN000;LB.
 23336                                  ;	CLC				    ;AN000;LB.	clear carry
 23337                                  ;scexit: 				    ;AN000;		
 23338                                  ;	POP	DI			    ;AN000;;LB.
 23339                                  ;	POP	ES			    ;AN000;;LB. restore registers
 23340                                  ;	POP	SI			    ;AN000;;LB.
 23341                                  ;	POP	DS			    ;AN000;;LB.
 23342                                  ;	POP	DX			    ;AN000;;LB.
 23343                                  ;	POP	CX			    ;AN000;;LB.
 23344                                  ;	return				    ;AN000;;LB.
 23345                                  ;							
 23346                                  ;EndProc RW_SC				    ;AN000;
 23347                                  
 23348                                  ;Break	<IN_SC -- check if in secondary cache>
 23349                                  ;--------------------------------------------------------------------------
 23350                                  ;
 23351                                  ; Procedure Name : IN_SC
 23352                                  ;
 23353                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23354                                  ;	   [CURSC_DRIVE]= current SC drive
 23355                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23356                                  ;	   [SC_CACHE_COUNT] = SC count
 23357                                  ;	   [HIGH_SECTOR]:DX= sector number
 23358                                  ; Function:
 23359                                  ;	Check if the sector is in secondary cache
 23360                                  ; Output:
 23361                                  ;	carry clear, in SC
 23362                                  ;	   CX= the index in the secondary cache
 23363                                  ;	carry set, not in SC
 23364                                  ;
 23365                                  ;---------------------------------------------------------------------------
 23366                                  
 23367                                  ;procedure   IN_SC,NEAR		    ;AN000;
 23368                                  ;
 23369                                  ;	; SS override for all variables used
 23370                                  ;
 23371                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23372                                  ;	CMP	AL,[CURSC_DRIVE]	    ;AN000;;LB. same as SC drive
 23373                                  ;	JNZ	outrange2		    ;AN000;;LB. no
 23374                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23375                                  ;	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 23376                                  ;	SUB	CX,WORD PTR [CURSC_SECTOR]    ;AN000;;LB. number
 23377                                  ;	SBB	AX,WORD PTR [CURSC_SECTOR+2]  ;AN000;;LB.
 23378                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23379                                  ;	JNZ	outrange2		    ;AN000;;LB. yes
 23380                                  ;	CMP	CX,[SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 23381                                  ;	JAE	outrange2		    ;AN000;;LB. yes
 23382                                  ;	CLC				    ;AN000;;LB. clear carry
 23383                                  ;	JMP	short inexit		    ;AN000;;LB. in SC
 23384                                  ;outrange2:				    ;AN000;;LB. set carry
 23385                                  ;	STC				    ;AN000;;LB.
 23386                                  ;inexit: 				    ;AN000;;LB.
 23387                                  ;	return				    ;AN000;;LB.
 23388                                  ;
 23389                                  ;EndProc IN_SC				    ;AN000;
 23390                                  
 23391                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 23392                                  ;---------------------------------------------------------------------------
 23393                                  ;
 23394                                  ; Procedure Name : Invalidate_Sc
 23395                                  ;
 23396                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23397                                  ;	   [CURSC_DRIVE]= current SC drive
 23398                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23399                                  ;	   [SC_CACHE_COUNT] = SC count
 23400                                  ;	   [SC_STAUS] = SC status word
 23401                                  ;	   [HIGH_SECTOR]:DX= sector number
 23402                                  ;
 23403                                  ; Function:
 23404                                  ;	invalidate secondary cache if in there
 23405                                  ; Output:
 23406                                  ;	[SC_STATUS] is updated
 23407                                  ;---------------------------------------------------------------------------
 23408                                  
 23409                                  ;procedure   INVALIDATE_SC,NEAR	    ;AN000;
 23410                                  ;
 23411                                  ;	; SS override for all variables used
 23412                                  ;
 23413                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23414                                  ;	JC	outrange		    ;AN000;;LB. no
 23415                                  ;	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 23416                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23417                                  ;	NOT	AX			    ;AN000;;LB.
 23418                                  ;	AND	[SC_STATUS],AX		    ;AN000;;LB. save the status
 23419                                  ;outrange:				    ;AN000;;LB.
 23420                                  ;	return				    ;AN000;;LB.
 23421                                  ;
 23422                                  ;EndProc INVALIDATE_SC			    ;AN000;
 23423                                  
 23424                                  
 23425                                  ;Break	<VIRREAD- virtually read data into buffer>
 23426                                  ;--------------------------------------------------------------------------
 23427                                  ;
 23428                                  ; Procedure Name : SC_FLAG
 23429                                  ;
 23430                                  ; Inputs:  SC_FLAG = 0 , no sectors were read into SC
 23431                                  ;		     1, continous sectors were read into SC
 23432                                  ; Function:
 23433                                  ;	   Move data from SC to buffer
 23434                                  ; Output:
 23435                                  ;	 carry clear, data is moved to buffer
 23436                                  ;	 carry set, bad sector or exceeds maximum sector
 23437                                  ;	   SC_FLAG =0
 23438                                  ;	   CALLSCNT=1
 23439                                  ;	   SC_STATUS= -1 if succeeded
 23440                                  ;     
 23441                                  ;		       0 if failed
 23442                                  ;--------------------------------------------------------------------------
 23443                                  
 23444                                  ;procedure   VIRREAD,NEAR	    ;AN000;
 23445                                  ;
 23446                                  ;	; SS override for all variables used
 23447                                  ;
 23448                                  ;	CMP	[SC_FLAG],0		    ;AN000;;LB.  from SC fill
 23449                                  ;	JZ	sc2end			    ;AN000;;LB.  no
 23450                                  ;	MOV	AX,[TEMP_VAR2]		    ;AN000;;LB. restore buffer addr
 23451                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;;LB.
 23452                                  ;	MOV	AX,[TEMP_VAR]		    ;AN000;;LB.
 23453                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;;LB.
 23454                                  ;	MOV	[SC_FLAG],0		    ;AN000;;LB.  reset sc_flag
 23455                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB.  one sector transferred
 23456                                  ;
 23457                                  ;	TESTB	[DEVCALL.REQSTAT],STERR     ;AN000;;LB.  error?
 23458                                  ;	JNZ	scerror 		    ;AN000;;LB. yes
 23459                                  ;	PUSH	DS			    ;AN000;;LB.
 23460                                  ;	PUSH	SI			    ;AN000;;LB.
 23461                                  ;	PUSH	ES			    ;AN000;;LB.
 23462                                  ;	PUSH	DI			    ;AN000;;LB.
 23463                                  ;	PUSH	DX			    ;AN000;;LB.
 23464                                  ;	PUSH	CX			    ;AN000;;LB.
 23465                                  ;	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 23466                                  ;	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buffer
 23467                                  ;	POP	CX			    ;AN000;;LB.
 23468                                  ;	POP	DX			    ;AN000;;LB.
 23469                                  ;	POP	DI			    ;AN000;;LB.
 23470                                  ;	POP	ES			    ;AN000;;LB.
 23471                                  ;	POP	SI			    ;AN000;;LB.
 23472                                  ;	POP	DS			    ;AN000;;LB.
 23473                                  ;	JMP	SHORT sc2end		    ;AN000;;LB. return
 23474                                  ;
 23475                                  ;scerror:				    ;AN000;
 23476                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB. reset sector count to 1
 23477                                  ;	MOV	[SC_STATUS],0		    ;AN000;;LB. invalidate all SC sectors
 23478                                  ;	MOV	[CURSC_DRIVE],-1	    ;AN000;;LB. invalidate drive
 23479                                  ;	STC				    ;AN000;;LB. carry set
 23480                                  ;	return				    ;AN000;;LB.
 23481                                  ;
 23482                                  ;sc2end: 				    ;AN000;
 23483                                  ;	CLC				    ;AN000;;LB. carry clear
 23484                                  ;	return				    ;AN000;;LB.
 23485                                  ;
 23486                                  ;EndProc VIRREAD 			    ;AN000;
 23487                                  
 23488                                  ;Break	<SC2BUF- move data from SC to buffer>
 23489                                  ;----------------------------------------------------------------------------
 23490                                  ;
 23491                                  ; Procedure Name : SC2BUF
 23492                                  ;
 23493                                  ; Inputs:  [SC_STATUS] = SC validity status
 23494                                  ;	   [SC_SECTOR_SIZE] = request sector size
 23495                                  ;	   [SC_CACHE_PTR] = pointer to SC
 23496                                  ; Function:
 23497                                  ;	   Move data from SC to buffer
 23498                                  ; Output:
 23499                                  ;	   carry clear, in SC  and data is moved
 23500                                  ;	   carry set, not in SC and data is not moved
 23501                                  ;---------------------------------------------------------------------------
 23502                                  
 23503                                  ;procedure   SC2BUF,NEAR 	    ;AN000;
 23504                                  ;
 23505                                  ;	; SS override for all variables used
 23506                                  ;
 23507                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23508                                  ;	JC	noSC			    ;AN000;;LB. no
 23509                                  ;	MOV	AX,1			    ;AN000;;LB. check if valid sector
 23510                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23511                                  ;	TEST	[SC_STATUS],AX		    ;AN000;;LB.
 23512                                  ;	JZ	noSC			    ;AN000;;LB. invalid
 23513                                  ;entry SC2BUF2				    ;AN000;
 23514                                  ;	MOV	AX,CX			    ;AN000;;LB. times index with
 23515                                  ;	MUL	[SC_SECTOR_SIZE]	    ;AN000;;LB. sector size
 23516                                  ;	ADD	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;;LB. add SC starting addr
 23517                                  ;	ADC	DX,WORD PTR [SC_CACHE_PTR+2];AN000;;LB.
 23518                                  ;	MOV	DS,DX			    ;AN000;    ;LB. DS:SI-> SC sector addr
 23519                                  ;	MOV	SI,AX			    ;AN000;    ;LB.
 23520                                  ;	MOV	ES,WORD PTR [CALLXAD+2]     ;AN000;    ;LB. ES:DI-> buffer addr
 23521                                  ;	MOV	DI,WORD PTR [CALLXAD]	    ;AN000;    ;LB.
 23522                                  ;	MOV	CX,[SC_SECTOR_SIZE]	    ;AN000;    ;LB. count= sector size
 23523                                  ;	SHR	CX,1			    ;AN000;    ;LB. may use DWORD move for 386
 23524                                  ;entry MOVWORDS				    ;AN000;
 23525                                  ;	CMP	[DDMOVE],0		    ;AN000;    ;LB. 386 ?
 23526                                  ;	JZ	nodd			    ;AN000;    ;LB. no
 23527                                  ;	SHR	CX,1			    ;AN000;    ;LB. words/2
 23528                                  ;	DB	66H			    ;AN000;    ;LB. use double word move
 23529                                  ;nodd:
 23530                                  ;	REP	MOVSW			    ;AN000;    ;LB. move to buffer
 23531                                  ;	CLC				    ;AN000;    ;LB. clear carry
 23532                                  ;	return				    ;AN000;    ;LB. exit
 23533                                  ;noSC:					    ;AN000;
 23534                                  ;	STC				    ;AN000;    ;LB. set carry
 23535                                  ;sexit:					    ;AN000;
 23536                                  ;	return				    ;AN000;    ;LB.
 23537                                  ;
 23538                                  ;EndProc SC2BUF
 23539                                  
 23540                                  
 23541                                  ;============================================================================
 23542                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 23543                                  ;============================================================================
 23544                                  ; 29/07/2018 - Retro DOS v3.0
 23545                                  
 23546                                  ;	TITLE	MKNODE - Node maker
 23547                                  ;	NAME	MKNODE
 23548                                  
 23549                                  ;**	MKNODE.ASM
 23550                                  ;
 23551                                  ;	Low level routines for making a new local file system node
 23552                                  ;	and filling in an SFT from a directory entry
 23553                                  ;
 23554                                  ;	BUILDDIR
 23555                                  ;	SETDOTENT
 23556                                  ;	MakeNode
 23557                                  ;	NEWENTRY
 23558                                  ;	FREEENT
 23559                                  ;	NEWDIR
 23560                                  ;	DOOPEN
 23561                                  ;	RENAME_MAKE
 23562                                  ;	CHECK_VIRT_OPEN
 23563                                  ;
 23564                                  ;	Revision history:
 23565                                  ;
 23566                                  ;	 AN000	version 4.0  Jan. 1988
 23567                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 23568                                  
 23569                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 23570                                  ;----------------------------------------------------------------------------
 23571                                  ;
 23572                                  ; Procedure Name : BUILDDIR,NEWDIR
 23573                                  ;
 23574                                  ; Inputs:
 23575                                  ;       ES:BP Points to DPB
 23576                                  ;       [THISSFT] Set if using NEWDIR entry point
 23577                                  ;               (used by ALLOCATE)
 23578                                  ;       [LASTENT] current last valid entry number in directory if no free
 23579                                  ;               entries
 23580                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 23581                                  ; Function:
 23582                                  ;       Grow directory if no free entries and not root
 23583                                  ; Outputs:
 23584                                  ;       CARRY SET IF FAILURE
 23585                                  ;       ELSE
 23586                                  ;          AX entry number of new entry
 23587                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 23588                                  ;               AX = first entry of new dir
 23589                                  ;       GETENT should be called to set [LASTENT]
 23590                                  ;
 23591                                  ;----------------------------------------------------------------------------
 23592                                  
 23593                                  BUILDDIR:
 23594                                  	; 29/07/2018 - Retro DOS v3.0
 23595                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 23596                                  
 23597 00004F5E A1[6A05]                        MOV     AX,[ENTFREE]
 23598 00004F61 83F8FF                          CMP     AX,-1
 23599 00004F64 7402                            JZ	short CHECK_IF_ROOT
 23600 00004F66 F8                              CLC
 23601 00004F67 C3                              retn
 23602                                  
 23603                                  CHECK_IF_ROOT:
 23604 00004F68 833E[5805]00                    CMP     word [DIRSTART],0
 23605 00004F6D 7502                            JNZ	short NEWDIR
 23606 00004F6F F9                              STC
 23607                                  builddir_retn:
 23608 00004F70 C3                              retn				; Can't grow root
 23609                                  
 23610                                  	;entry   NEWDIR
 23611                                  NEWDIR:        
 23612 00004F71 8B1E[5805]              	MOV     BX,[DIRSTART]
 23613 00004F75 09DB                            OR      BX,BX
 23614 00004F77 7405                            JZ	short NULLDIR
 23615 00004F79 E89A05                  	call	GETEOF
 23616 00004F7C 72F2                            jc	short builddir_retn	; Screw up
 23617                                  NULLDIR:
 23618 00004F7E B90100                          MOV     CX,1
 23619 00004F81 E8BF04                  	call	ALLOCATE
 23620 00004F84 72EA                            jc	short  builddir_retn
 23621 00004F86 8B16[5805]                      MOV     DX,[DIRSTART]
 23622 00004F8A 09D2                            OR      DX,DX
 23623 00004F8C 750D                            JNZ	short ADDINGDIR
 23624 00004F8E E84CF8                  	call	SETDIRSRCH
 23625 00004F91 72DD                            jc	short  builddir_retn
 23626 00004F93 C706[F402]FFFF                  MOV     word [LASTENT],-1
 23627 00004F99 EB2B                            JMP     SHORT GOTDIRREC
 23628                                  ADDINGDIR:
 23629 00004F9B 53                              PUSH    BX
 23630 00004F9C 8B1E[5405]                      MOV     BX,[CLUSNUM]
 23631 00004FA0 E8940A                          call	IsEOF
 23632 00004FA3 5B                              POP     BX
 23633 00004FA4 7219                            JB	short NOTFIRSTGROW
 23634                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23635 00004FA6 891E[5405]                      MOV     [CLUSNUM],BX
 23636 00004FAA 51                              PUSH    CX
 23637 00004FAB 50                              PUSH    AX
 23638 00004FAC 55                              PUSH    BP
 23639 00004FAD B401                            MOV     AH,1			; CLUSNUM update
 23640                                  	;mov	dl,[es:bp+0]
 23641 00004FAF 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 23642                                          ;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 23643 00004FB3 8B0E[5805]                      MOV     CX,[DIRSTART]		; first cluster #
 23644 00004FB7 89DD                            MOV     BP,BX 			; CLUSNUM
 23645 00004FB9 E84DE4                  	call	FastOpen_Update
 23646 00004FBC 5D                              POP     BP
 23647 00004FBD 58                              POP     AX
 23648 00004FBE 59                              POP     CX
 23649                                  
 23650                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23651                                  NOTFIRSTGROW:
 23652 00004FBF 89DA                            MOV     DX,BX
 23653 00004FC1 30DB                            XOR     BL,BL
 23654 00004FC3 E86C04                  	call	FIGREC
 23655                                  GOTDIRREC:
 23656                                  	;mov	cl,[es:bp+4]
 23657 00004FC6 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 23658 00004FCA FEC1                            INC     CL
 23659 00004FCC 30ED                            XOR     CH,CH
 23660                                  ZERODIR:
 23661 00004FCE 51                              PUSH    CX
 23662                                  	;mov	byte [ALLOWED],18h
 23663 00004FCF C606[F702]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 23664 00004FD4 B0FF                            MOV     AL,0FFH
 23665 00004FD6 E8AD0E                          call	GETBUFFR
 23666 00004FD9 7302                            JNC	short GET_SSIZE
 23667 00004FDB 59                              POP     CX
 23668 00004FDC C3                              retn
 23669                                  
 23670                                  GET_SSIZE:
 23671                                  	;mov	cx,[es:bp+2]
 23672 00004FDD 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 23673 00004FE1 06                              PUSH    ES
 23674 00004FE2 C43E[7405]                      LES     DI,[CURBUF]
 23675                                  	;or	byte [es:di+5],4
 23676 00004FE6 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 23677 00004FEB 57                              PUSH    DI
 23678                                  	;add	di,16
 23679 00004FEC 83C710                          ADD     DI,BUFINSIZ
 23680 00004FEF 31C0                            XOR     AX,AX
 23681 00004FF1 D1E9                            SHR     CX,1
 23682 00004FF3 F3AB                            REP     STOSW
 23683 00004FF5 7301                            JNC	short EVENZ
 23684 00004FF7 AA                              STOSB
 23685                                  EVENZ:
 23686 00004FF8 5F                              POP     DI
 23687                                  
 23688                                  	; MSDOS 6.0
 23689                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23690                                  	;				;LB. if already dirty		  ;AN000;
 23691                                          ;JNZ	short _yesdirty_	;LB.  don't increment dirty count ;AN000;
 23692                                          ;call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 23693                                          
 23694                                  	;or	byte [es:di+5],40h
 23695 00004FF9 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23696                                  ;_yesdirty_:
 23697 00004FFE 07                              POP	ES
 23698 00004FFF 59                              POP	CX
 23699                                  
 23700                                  	; MSDOS 6.0
 23701                                  	;add	dx, 1
 23702                                  	;adc	word [HIGH_SECTOR],0
 23703                                  
 23704 00005000 42                      	INC	DX
 23705 00005001 E2CB                            LOOP    ZERODIR
 23706                                  
 23707 00005003 A1[F402]                        MOV     AX,[LASTENT]
 23708 00005006 40                              INC     AX
 23709 00005007 F8                              CLC
 23710 00005008 C3                              retn
 23711                                  
 23712                                  ;--------------------------------------------------------------------------
 23713                                  ;
 23714                                  ; Procedure Name : SETDOTENT
 23715                                  ;
 23716                                  ; set up a . or .. directory entry for a directory.
 23717                                  ;
 23718                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 23719                                  ;               AX contains ". " or ".."
 23720                                  ;               DX contains first cluster of entry
 23721                                  ;
 23722                                  ;----------------------------------------------------------------------------
 23723                                  
 23724                                  SETDOTENT:
 23725                                  ;	Fill in name field
 23726 00005009 AB                              STOSW
 23727 0000500A B90400                          MOV     CX,4
 23728 0000500D B82020                          MOV     AX,"  " ; 2020h
 23729 00005010 F3AB                            REP     STOSW
 23730 00005012 AA                              STOSB
 23731                                  
 23732                                  ;	Set up attribute
 23733                                  	;mov	al, 10h
 23734 00005013 B010                            MOV     AL,attr_directory
 23735 00005015 AA                              STOSB
 23736                                  
 23737                                  ;	Initialize time and date of creation
 23738 00005016 83C70A                          ADD     DI,10
 23739 00005019 8B36[3605]                      MOV     SI,[THISSFT]
 23740                                  	;mov	ax,[si+0Dh]
 23741 0000501D 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 23742 00005020 AB                              STOSW
 23743                                  	;mov	ax,[si+0Fh]
 23744 00005021 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 23745 00005024 AB                      	STOSW
 23746                                  
 23747                                  ;	Set up first cluster field
 23748 00005025 89D0                            MOV     AX,DX
 23749 00005027 AB                              STOSW
 23750                                  
 23751                                  ;	0 file size
 23752 00005028 31C0                            XOR     AX,AX
 23753 0000502A AB                              STOSW
 23754 0000502B AB                              STOSW
 23755 0000502C C3                              retn
 23756                                  
 23757                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 23758                                  ;---------------------------------------------------------------------------
 23759                                  ;
 23760                                  ; Procedure Name : MakeNode
 23761                                  ;
 23762                                  ; Inputs:
 23763                                  ;       AL - attribute to create
 23764                                  ;       AH = 0 if it is ok to truncate a file already by this name
 23765                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 23766                                  ;               (AH ignored on dirs and devices)
 23767                                  ;
 23768                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 23769                                  ;               a name already existant is ALWAYS an error in these cases.
 23770                                  ;
 23771                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 23772                                  ;               terminated)
 23773                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 23774                                  ;               ( = -1 if current dir not involved, else
 23775                                  ;                Points to first char after last "/" of current dir part)
 23776                                  ;       [THISCDS] Points to CDS being used
 23777                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 23778                                  ; Function:
 23779                                  ;       Make a new node
 23780                                  ; Outputs:
 23781                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 23782                                  ;       CARRY SET IF ERROR
 23783                                  ;          AX = 1 A node by this name exists and is a directory
 23784                                  ;          AX = 2 A new node could not be created
 23785                                  ;          AX = 3 A node by this name exists and is a disk file
 23786                                  ;               (AH was NZ on input)
 23787                                  ;          AX = 4 Bad Path
 23788                                  ;               SI return from GetPath maintained
 23789                                  ;          AX = 5 Attribute mismatch
 23790                                  ;          AX = 6 Sharing Violation
 23791                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 23792                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 23793                                  ;       ELSE
 23794                                  ;          AX = 0       Disk Node
 23795                                  ;          AX = 3       Device Node (error in some cases)
 23796                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 23797                                  ;               containing new node.
 23798                                  ;          [CURBUF+2]:BX Points to entry
 23799                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 23800                                  ;          [THISSFT] is filled in
 23801                                  ;               sf_mode = unchanged.
 23802                                  ;          Attribute byte in entry is input AL
 23803                                  ; DS preserved, others destroyed
 23804                                  ;
 23805                                  ;-------------------------------------------------------------------------
 23806                                  
 23807                                  MakeNode:
 23808                                  	;mov	word [CREATING],0E5FFh
 23809 0000502D C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 23810 00005033 50                              PUSH    AX              ; Save AH value
 23811 00005034 C606[F802]00            	MOV	byte [NoSetDir],0
 23812 00005039 A2[0805]                	MOV	[SATTRIB],AL
 23813 0000503C E8F9F7                  	call	GetPathNoSet
 23814 0000503F 88CA                            MOV     DL,CL           ; Save CL info
 23815 00005041 89C1                            MOV     CX,AX           ; Device ID to CH
 23816 00005043 58                              POP     AX              ; Get back AH
 23817 00005044 7316                            JNC	short make_exists ; File existed
 23818 00005046 7505                            JNZ	short make_err_4 ; Path bad
 23819 00005048 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 23820 0000504B 7406                            JZ	short make_type	; Name simply not found, and no metas
 23821                                  make_err_4:
 23822 0000504D B004                            MOV     AL,4            ; case 1 bad path
 23823                                  make_err_ret:
 23824 0000504F 30E4                            XOR     AH,AH
 23825 00005051 F9                              STC
 23826                                  make_retn:
 23827 00005052 C3                              retn
 23828                                  
 23829                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 23830                                  RENAME_MAKE:
 23831                                  make_type:
 23832                                  ;Extended Open hooks
 23833                                  	; MSDOS 6.0
 23834                                  	;TESTB	EXTOPEN_ON,ext_open_on	;FT. from extended open		;AN000;
 23835                                  	;JZ	make_type2		;FT. no				;AN000;
 23836                                  	;OR	EXTOPEN_ON,ext_file_not_exists ;FT. set for extended open ;AN000;
 23837                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 23838                                  	;JNZ    make_type2		;FT. no				;AN000;
 23839                                  	;STC				;FT. set carry			;AN000;
 23840                                  	;MOV    AX,7			;FT. file not found		;AN000;
 23841                                  	;return				;FT.				;AN000;
 23842                                  ;	Extended Open hooks
 23843                                  
 23844                                  make_type2:
 23845 00005053 C43E[3605]                      LES     DI,[THISSFT]
 23846 00005057 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 23847 00005059 F9                              STC                     ; Not found
 23848 0000505A EB5A                            JMP     short make_new
 23849                                  
 23850                                  ; The node exists.  It may be either a device, directory or file:
 23851                                  ;   Zero set => directory
 23852                                  ;   High bit of CH on => device
 23853                                  ;   else => file
 23854                                  make_exists:
 23855 0000505C 7448                            JZ	short make_exists_dir
 23856 0000505E B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 23857                                  	;test	byte [ATTRIB],18h
 23858 00005060 F606[0605]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 23859 00005065 753B                            JNZ	short make_err_ret_5
 23860                                  				; Cannot already exist as Disk or Device Node
 23861                                                                  ;       if making DIR or Volume ID
 23862 00005067 08ED                            OR      CH,CH
 23863 00005069 781A                            JS	short make_share ; No further checks on attributes if device
 23864 0000506B 08E4                            OR      AH,AH
 23865 0000506D 75E0                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 23866 0000506F 51                              PUSH    CX              ; Save device ID
 23867 00005070 8E06[7605]                      MOV     ES,[CURBUF+2]
 23868                                  	;mov	ch,[es:bx+0Bh]
 23869 00005074 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 23870                                  	;test	ch,1
 23871 00005078 F6C501                  	test	CH,attr_read_only
 23872 0000507B 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 23873 0000507D E850FA                  	call	MatchAttributes
 23874 00005080 59                              POP     CX              ; Devid back in CH
 23875 00005081 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 23876 00005083 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 23877                                  make_share:
 23878 00005085 30E4                            XOR     AH,AH
 23879 00005087 50                              PUSH    AX              ; Save Disk or Device node
 23880 00005088 51                              PUSH    CX              ; Save Device ID
 23881 00005089 88EC                            MOV     AH,CH           ; Device ID to AH
 23882 0000508B E83301                          CALL    DOOPEN          ; Fill in SFT for share check
 23883 0000508E C43E[3605]                      LES     DI,[THISSFT]
 23884 00005092 56                      	push	si
 23885 00005093 53                      	push	bx		; Save CURBUF pointers
 23886 00005094 E8BF22                  	call	ShareEnter
 23887 00005097 7350                            jnc	short MakeEndShare
 23888                                  
 23889                                  ; User failed request.
 23890 00005099 5B                      	pop	bx
 23891 0000509A 5E                      	pop	si
 23892 0000509B 59                      	pop	cx
 23893 0000509C 58                      	pop	ax
 23894                                  
 23895                                  Make_Share_ret:
 23896 0000509D B006                            MOV     AL,6
 23897 0000509F EBAE                            JMP	short make_err_ret
 23898                                  
 23899                                  make_err_ret_5P:
 23900 000050A1 59                              POP     CX              ; Get back device ID
 23901                                  make_err_ret_5:
 23902 000050A2 B005                            MOV     AL,5            ; Attribute mismatch
 23903 000050A4 EBA9                            JMP     make_err_ret
 23904                                  
 23905                                  make_exists_dir:
 23906 000050A6 B001                            MOV     AL,1            ; exists as directory, always an error
 23907 000050A8 EBA5                            JMP     make_err_ret
 23908                                  
 23909                                  make_save:
 23910 000050AA 50                              PUSH    AX              ; Save whether Disk or File
 23911 000050AB 89C8                            MOV     AX,CX           ; Device ID to AH
 23912 000050AD E86A00                          CALL    NEWENTRY
 23913 000050B0 58                              POP     AX              ; 0 if Disk, 3 if File
 23914 000050B1 739F                            jnc	short make_retn
 23915 000050B3 B002                            MOV     AL,2            ; create failed case 2
 23916                                  make_save_retn:
 23917 000050B5 C3                              retn
 23918                                  
 23919                                  make_new:
 23920 000050B6 E8F1FF                          call    make_save
 23921 000050B9 72FA                            jc	short make_save_retn	; case 2 fail
 23922 000050BB F606[0605]10            	test	BYTE [ATTRIB],attr_directory
 23923 000050C0 75F3                            jnz	short make_save_retn	; Don't "open" directories, so don't
 23924                                                                  ;   tell the sharer about them
 23925 000050C2 50                      	push	ax
 23926 000050C3 53                      	push	bx
 23927 000050C4 56                      	push	si		
 23928 000050C5 E88E22                          call	ShareEnter
 23929 000050C8 5E                      	pop	si
 23930 000050C9 5B                      	pop	bx
 23931 000050CA 58                      	pop	ax
 23932 000050CB 73E8                    	jnc	short make_save_retn
 23933                                  ;
 23934                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 23935                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 23936                                  ; possible: delete the newly created directory entry and return share_error.
 23937                                  ;
 23938 000050CD 50                              PUSH    AX
 23939 000050CE C43E[7405]                      LES     DI,[CURBUF]
 23940                                  	;mov	byte [es:bx],0E5h
 23941 000050D2 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 23942                                  	
 23943                                  	; MSDOS 6.0
 23944                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 23945                                  	;				;LB. if already dirty		  ;AN000;
 23946                                          ;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 23947                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 23948                                  	;or	byte [es:di+5],40h
 23949 000050D6 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 23950                                  ;yesdirty3:
 23951 000050DB C42E[2405]                      LES     BP,[THISDPB]
 23952 000050DF 268A4600                        mov	al,[ES:BP]
 23953                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 23954 000050E3 E8480E                          call	FLUSHBUF		; write out buffer.
 23955 000050E6 58                              POP     AX
 23956 000050E7 EBB4                            jmp	short Make_Share_ret
 23957                                  ;
 23958                                  ; We have found an existing file. We have also entered it into the share set.
 23959                                  ; At this point we need to call newentry to correctly address the problem of
 23960                                  ; getting rid of old data (create an existing file) or creating a new
 23961                                  ; directory entry (create a new file). Unfortunately, this operation may
 23962                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 23963                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 23964                                  ; the share set now, do the operation and then reassert the share access.
 23965                                  ;
 23966                                  ; We are allowed to do this! There is no window! After all, we are in
 23967                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 23968                                  ;
 23969                                  MakeEndShare:
 23970 000050E9 C43E[3605]                      LES     DI,[THISSFT]		; grab SFT
 23971 000050ED 31C0                            XOR     AX,AX
 23972 000050EF E873CF                  	call	EcritSFT
 23973 000050F2 268705                  	xchg	AX,[ES:DI]
 23974                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 23975 000050F5 50                      	push	ax
 23976 000050F6 57                      	push	di
 23977 000050F7 06                      	push	es
 23978 000050F8 9C                              PUSHF
 23979 000050F9 E85522                          call	ShareEnd                ; remove sharing
 23980 000050FC 9D                              POPF
 23981 000050FD 07                      	pop	es
 23982 000050FE 5F                      	pop	di
 23983 000050FF 268F05                          pop	word [ES:DI]	
 23984                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 23985 00005102 E868CF                  	call	LcritSFT
 23986 00005105 5B                      	pop	bx
 23987 00005106 5E                      	pop	si
 23988 00005107 59                      	pop	cx
 23989 00005108 58                      	pop	ax
 23990 00005109 E89EFF                          CALL    make_save
 23991                                  
 23992                                  ; If the user failed, we do not reenter into the sharing set.
 23993                                  
 23994 0000510C 72A7                            jc	short make_save_retn	; bye if error
 23995 0000510E 50                      	push	ax
 23996 0000510F 53                      	push	bx
 23997 00005110 56                      	push	si
 23998 00005111 9C                              PUSHF
 23999 00005112 E84122                          call	ShareEnter
 24000 00005115 9D                              POPF
 24001 00005116 5E                      	pop	si
 24002 00005117 5B                      	pop	bx
 24003 00005118 58                      	pop	ax
 24004                                  
 24005                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 24006                                  
 24007                                  makeendshare_retn:
 24008 00005119 C3                              retn
 24009                                  
 24010                                  ;---------------------------------------------------------------------------
 24011                                  ;
 24012                                  ; Procedure Name : NEWENTRY
 24013                                  ;
 24014                                  ; Inputs:
 24015                                  ;       [THISSFT] set
 24016                                  ;       [THISDPB] set
 24017                                  ;       [LASTENT] current last valid entry number in directory if no free
 24018                                  ;               entries
 24019                                  ;       [VOLID] set if a volume ID was found during search
 24020                                  ;	Attrib Contains attributes for new file
 24021                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 24022                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 24023                                  ;               NC means file existed (device)
 24024                                  ;               C  means file did not exist
 24025                                  ;       AH = Device ID byte
 24026                                  ;       If FILE
 24027                                  ;           [CURBUF+2]:BX points to start of directory entry
 24028                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24029                                  ;       If device
 24030                                  ;           DS:BX points to start of "fake" directory entry
 24031                                  ;           DS:SI points to dir_first of "fake" directory entry
 24032                                  ;               (has DWORD pointer to device header)
 24033                                  ; Function:
 24034                                  ;       Make a new directory entry
 24035                                  ;       If an old one existed it is truncated first
 24036                                  ; Outputs:
 24037                                  ;       Carry set if error
 24038                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 24039                                  ;               vol ID, user FAILed to I 24
 24040                                  ;       else
 24041                                  ;               outputs of DOOPEN
 24042                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 24043                                  ;
 24044                                  ;----------------------------------------------------------------------------
 24045                                  
 24046                                  NEWENTRY:
 24047 0000511A C42E[2405]                      LES     BP,[THISDPB]
 24048 0000511E 7316                            JNC	short EXISTENT	
 24049 00005120 803E[F602]00                    CMP     byte [FAILERR],0
 24050 00005125 F9                              STC
 24051 00005126 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 24052 00005128 E833FE                          CALL    BUILDDIR        ; Try to build dir
 24053 0000512B 72EC                            jc	short makeendshare_retn	; Failed
 24054 0000512D E87FF6                          call	GETENT          ; Point at that free entry
 24055 00005130 72E7                            jc	short makeendshare_retn	; Failed
 24056 00005132 EB0E                            JMP     SHORT FREESPOT
 24057                                  
 24058                                  ERRRET3:
 24059 00005134 F9                              STC
 24060                                  newentry_retn:
 24061 00005135 C3                              retn
 24062                                  
 24063                                  EXISTENT:
 24064 00005136 08E4                            OR      AH,AH           ; Check if file is I/O device
 24065 00005138 7903                            JNS	short NOT_DEV1
 24066 0000513A E98400                          JMP     DOOPEN          ; If so, proceed with open
 24067                                  
 24068                                  NOT_DEV1:
 24069 0000513D E81401                          call	FREEENT		; Free cluster chain
 24070 00005140 72F3                            jc	short newentry_retn ; Failed
 24071                                  FREESPOT:
 24072                                  	;test	byte [ATTRIB],8
 24073 00005142 F606[0605]08            	test	BYTE [ATTRIB],attr_volume_id
 24074 00005147 7407                            JZ	short NOTVOLID
 24075 00005149 803E[1605]00                    CMP     BYTE [VOLID],0
 24076 0000514E 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 24077                                  NOTVOLID:
 24078 00005150 8E06[7605]                      MOV     ES,[CURBUF+2]
 24079 00005154 89DF                            MOV     DI,BX
 24080                                  
 24081 00005156 BE[E604]                        MOV     SI,NAME1
 24082                                  
 24083 00005159 B90500                          MOV     CX,5
 24084 0000515C F3A5                            REP     MOVSW
 24085 0000515E A4                              MOVSB                   ; Move name into dir entry
 24086 0000515F A0[0605]                	MOV	AL,[ATTRIB]
 24087 00005162 AA                      	STOSB                   ; Attributes
 24088                                  
 24089                                  ;; File Tagging for Create DOS 4.00
 24090 00005163 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 24091                                  ;; File Tagging for Create DOS 4.00
 24092                                  
 24093 00005165 31C0                            XOR     AX,AX
 24094 00005167 F3AB                            REP     STOSW           ; Zero pad
 24095 00005169 E84AC7                          call	DATE16
 24096 0000516C 92                              XCHG    AX,DX
 24097 0000516D AB                              STOSW                   ; dir_time
 24098 0000516E 92                              XCHG    AX,DX
 24099 0000516F AB                              STOSW                   ; dir_date
 24100 00005170 31C0                            XOR     AX,AX
 24101 00005172 57                              PUSH    DI              ; Correct SI input value
 24102                                  				; 	(recomputed for new buffer)
 24103 00005173 AB                              STOSW                   ; Zero dir_first and size
 24104 00005174 AB                              STOSW
 24105 00005175 AB                              STOSW
 24106                                  updnxt:
 24107 00005176 8B36[7405]              	MOV	SI,[CURBUF]
 24108                                  
 24109                                  	; MSDOS 6.0
 24110                                  	;TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24111                                  	;			;LB. if already dirty		  ;AN000;
 24112                                          ;JNZ	short yesdirty4	;LB.  don't increment dirty count ;AN000;
 24113                                          ;call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 24114                                          
 24115                                  	;or	byte [es:si+5],40h
 24116 0000517A 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24117                                  ;yesdirty4:
 24118 0000517F C42E[2405]                      LES     BP,[THISDPB]
 24119 00005183 268A4600                	MOV	AL,[ES:BP]	; mov al,[es:bp+0] 
 24120                                          ;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 24121 00005187 50                              PUSH    AX
 24122 00005188 53                              PUSH    BX
 24123                                  ; If we have a file, we need to increment the open ref. count so that
 24124                                  ; we have some protection against invalid media changes if an Int 24
 24125                                  ; error occurs.
 24126                                  ; Do nothing for a device.
 24127 00005189 06                      	push	es
 24128 0000518A 57                      	push	di
 24129 0000518B C43E[3605]                      LES     DI,[THISSFT]
 24130                                  	;test	word [es:di+5],80h
 24131 0000518F 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 24132 00005195 751A                            jnz	short GotADevice
 24133 00005197 1E                      	push	ds
 24134 00005198 53                      	push	bx
 24135 00005199 C51E[2405]                      LDS     BX,[THISDPB]
 24136                                  	;mov	[es:di+7],bx
 24137 0000519D 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 24138 000051A1 8CDB                            MOV     BX,DS
 24139                                  	;mov	[es:di+9],bx
 24140 000051A3 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 24141 000051A7 5B                      	pop	bx
 24142 000051A8 1F                      	pop	ds ; need to use DS for segment later on
 24143 000051A9 E8CAFC                  	call	DEV_OPEN_SFT    ; increment ref. count
 24144 000051AC C606[080A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 24145                                  GotADevice:
 24146 000051B1 5F                      	pop	di
 24147 000051B2 07                      	pop	es
 24148                                  
 24149 000051B3 E8780D                          call	FLUSHBUF
 24150 000051B6 E8DA00                          Call    CHECK_VIRT_OPEN ; decrement ref. count                          ;AN000;
 24151 000051B9 5B                              POP     BX
 24152 000051BA 58                              POP     AX
 24153 000051BB 5E                              POP     SI              ; Get SI input back
 24154 000051BC 88C4                            MOV     AH,AL           ; Get I/O driver number back
 24155 000051BE 7301                            jnc	short DOOPEN    ; Failed
 24156 000051C0 C3                      	retn
 24157                                  
 24158                                  ;NOTE FALL THROUGH
 24159                                  
 24160                                  ; Inputs:
 24161                                  ;       [THISDPB] points to DPB if file
 24162                                  ;       [THISSFT] points to SFT being used
 24163                                  ;       AH = Device ID byte
 24164                                  ;       If FILE
 24165                                  ;           [CURBUF+2]:BX points to start of directory entry
 24166                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24167                                  ;       If device
 24168                                  ;           DS:BX points to start of "fake" directory entry
 24169                                  ;           DS:SI points to dir_first of "fake" directory entry
 24170                                  ;               (has DWORD pointer to device header)
 24171                                  ; Function:
 24172                                  ;       Fill in SFT from dir entry
 24173                                  ; Outputs:
 24174                                  ;       CARRY CLEAR
 24175                                  ;       sf_ref_count and sf_mode fields not altered
 24176                                  ;       sf_flags high byte = 0
 24177                                  ;       sf_flags low byte = AH except
 24178                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 24179                                  ;       sf_attr sf_date sf_time sf_name set from entry
 24180                                  ;       sf_position = 0
 24181                                  ;       If device
 24182                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 24183                                  ;           sf_size = 0
 24184                                  ;       If file
 24185                                  ;           sf_firclus sf_size set from entry
 24186                                  ;           sf_devptr = [THISDPB]
 24187                                  ;           sf_cluspos = 0
 24188                                  ;           sf_lstclus = sf_firclus
 24189                                  ;           sf_dirsec sf_dirpos set
 24190                                  ; DS,SI,BX preserved, others destroyed
 24191                                  
 24192                                  	;entry	DOOPEN
 24193                                  DOOPEN:
 24194                                  ;	Generate and store attribute
 24195                                  
 24196 000051C1 88E6                            MOV     DH,AH           ; AH to different place
 24197 000051C3 C43E[3605]                      LES     DI,[THISSFT]
 24198                                  	;add	di,4
 24199 000051C7 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 24200 000051CA 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 24201                                                                  ;   attribute of 0 (for R/O testing etc).
 24202 000051CC 08F6                            OR      DH,DH           ; See if our assumption good.
 24203 000051CE 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 24204 000051D0 8E1E[7605]                      MOV     DS,[CURBUF+2]
 24205                                  	;mov	al,[BX+0Bh]
 24206 000051D4 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 24207                                  				; If file, get attrib from dir entry
 24208                                  DEV_SFT1:
 24209 000051D7 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 24210                                  
 24211                                  ;	Generate and store flags word
 24212                                  
 24213 000051D8 31C0                            XOR     AX,AX
 24214 000051DA 88F0                            MOV     AL,DH
 24215                                  	;or	al,40h
 24216 000051DC 0C40                            OR      AL,devid_file_clean
 24217 000051DE AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 24218                                  
 24219                                  ;	Generate and store device pointer
 24220                                  
 24221 000051DF 1E                              PUSH    DS
 24222                                  	;lds	ax,[bx+1Ah]
 24223 000051E0 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 24224 000051E3 08F6                            OR      DH,DH
 24225 000051E5 7805                            JS	short DEV_SFT2
 24226                                  
 24227                                  ;hkn; SS override
 24228 000051E7 36C506[2405]                    LDS     AX,[SS:THISDPB]	; Was file
 24229                                  DEV_SFT2:
 24230 000051EC AB                              STOSW 			; store offset
 24231 000051ED 8CD8                            MOV     AX,DS
 24232 000051EF 1F                              POP     DS
 24233 000051F0 AB                      	STOSW			; store segment
 24234                                  				; ES:DI -> sf_firclus
 24235                                  
 24236                                  ;	Generate pointer to, generate and store first cluster 
 24237                                  ;	(irrelevant for devices)
 24238                                  
 24239 000051F1 56                              PUSH    SI              ; Save pointer to dir_first
 24240 000051F2 A5                              MOVSW                   ; dir_first -> sf_firclus
 24241                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 24242                                  
 24243                                  ;	Copy time/date of last modification
 24244                                  
 24245                                  	;sub	si,6
 24246 000051F3 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 24247                                  				; DS:SI->dir_time
 24248 000051F6 A5                              MOVSW                   ; dir_time -> sf_time
 24249                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 24250 000051F7 A5                              MOVSW                   ; dir_date -> sf_date
 24251                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 24252                                  
 24253                                  ;	Generate and store file size (0 for devices)
 24254                                  
 24255 000051F8 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 24256 000051F9 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 24257 000051FA 89C1                            MOV     CX,AX           ; dir_size_l in CX
 24258 000051FC AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 24259 000051FD 08F6                            OR      DH,DH
 24260 000051FF 7904                            JNS	short FILE_SFT1
 24261 00005201 31C0                            XOR     AX,AX
 24262 00005203 89C1                            MOV     CX,AX           ; Devices are open ended
 24263                                  FILE_SFT1:
 24264 00005205 91                              XCHG    AX,CX
 24265 00005206 AB                              STOSW                   ; Low word of sf_size
 24266 00005207 91                              XCHG    AX,CX
 24267 00005208 AB                              STOSW                   ; High word of sf_size
 24268                                                                  ; ES:DI -> sf_position
 24269                                  ; Initialize position to 0
 24270                                  
 24271 00005209 31C0                            XOR     AX,AX
 24272 0000520B AB                              STOSW
 24273 0000520C AB                              STOSW                   ; sf_position
 24274                                                                  ; ES:DI -> sf_cluspos
 24275                                  
 24276                                  ; Generate cluster optimizations for files
 24277                                  
 24278 0000520D 08F6                            OR      DH,DH
 24279 0000520F 7834                            JS	short DEV_SFT3
 24280 00005211 AB                              STOSW                   ; sf_cluspos
 24281                                  	;mov	ax,[bx+1Ah]
 24282 00005212 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 24283                                  	; MSDOS 3.3
 24284 00005215 AB                      	STOSW                   ; sf_lstclus
 24285                                  	; MSDOS 6.0
 24286                                          ;PUSH	DI              ;AN004; save dirsec offset
 24287                                          ;SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 24288                                          ;MOV	[ES:DI.sf_lstclus],AX	;AN004; save it
 24289                                          ;POP	DI              ;AN004; restore dirsec offset
 24290                                  
 24291                                  ; DOS 3.3  FastOpen  6/13/86
 24292                                  
 24293 00005216 1E                      	PUSH	DS
 24294                                  
 24295                                  ;hkn; SS is DOSDATA
 24296 00005217 16                      	push	ss
 24297 00005218 1F                      	pop	ds
 24298                                  	;test	byte [FastOpenFlg],4
 24299 00005219 F606[6E0F]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 24300 0000521E 740D                    	JZ	short Not_FastOpen
 24301                                  
 24302                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 24303 00005220 BE[490F]                        MOV     SI,FastOpen_Ext_Info
 24304                                  
 24305 00005223 8B4401                          MOV     AX,[SI+FEI.dirsec]
 24306 00005226 AB                              STOSW                   ; sf_dirsec
 24307                                  	; MSDOS 6.0
 24308                                          ;MOV	AX,[SI+FEI.dirsec+2]
 24309                                  				;;; changed for >32mb
 24310                                          ;STOSW                   ; sf_dirsec
 24311                                  	; 19/08//2018
 24312 00005227 8A04                    	mov	al,[SI]
 24313                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 24314 00005229 AA                              STOSB                   ; sf_dirpos
 24315 0000522A 1F                              POP	DS
 24316 0000522B EB16                            JMP     short Next_Name
 24317                                  
 24318                                  ; DOS 3.3  FastOpen  6/13/86
 24319                                  
 24320                                  Not_FastOpen:
 24321 0000522D 1F                              POP     DS		; normal path
 24322                                  
 24323                                  ;hkn; SS override
 24324 0000522E 368B36[7405]                    MOV     SI,[SS:CURBUF]	; DS:SI->buffer header
 24325                                  
 24326 00005233 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 24327 00005236 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24328                                          ; MSDOS 6.0
 24329                                  	;MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 24330                                          ;STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24331                                          
 24332 00005237 89D8                    	MOV     AX,BX
 24333                                  	;add	si,16
 24334 00005239 83C610                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 24335 0000523C 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 24336                                          ;mov	cl,32
 24337 0000523E B120                    	MOV     CL,dir_entry.size
 24338 00005240 F6F1                            DIV     CL
 24339 00005242 AA                              STOSB                   ; sf_dirpos
 24340                                  
 24341                                  Next_Name:
 24342 00005243 EB03                            JMP     SHORT FILE_SFT2
 24343                                  
 24344                                  DEV_SFT3:
 24345                                  	;add	di,7
 24346 00005245 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 24347                                  FILE_SFT2:
 24348                                  ;
 24349                                  ; Copy in the object's name
 24350                                  ;
 24351 00005248 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 24352 0000524A B90B00                          MOV     CX,11
 24353 0000524D F3A4                            REP     MOVSB           ; sf_name
 24354 0000524F 5E                              POP     SI              ; recover DS:SI -> dir_first
 24355                                  
 24356                                  ;hkn; SS is DOSDATA
 24357 00005250 16                              push	ss
 24358 00005251 1F                      	pop	ds
 24359 00005252 F8                              CLC
 24360 00005253 C3                              retn
 24361                                  
 24362                                  ;---------------------------------------------------------------------------
 24363                                  ;
 24364                                  ; Procedure Name : FREEENT
 24365                                  ;
 24366                                  ; Inputs:
 24367                                  ;       ES:BP -> DPB
 24368                                  ;       [CURBUF] Set
 24369                                  ;       [CURBUF+2]:BX points to directory entry
 24370                                  ;       [CURBUF+2]:SI points to above dir_first
 24371                                  ; Function:
 24372                                  ;       Free the cluster chain for the entry if present
 24373                                  ; Outputs:
 24374                                  ;       Carry set if error (currently user FAILed to I 24)
 24375                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 24376                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 24377                                  ;---------------------------------------------------------------------------
 24378                                  
 24379                                  FREEENT:
 24380 00005254 1E                              PUSH    DS
 24381 00005255 C53E[7405]                      LDS     DI,[CURBUF]
 24382 00005259 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 24383                                  	; 19/05/2019
 24384                                  	; MSDOS 6.0
 24385                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 24386                                  ;hkn; SS override
 24387                                          ;MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 24388 0000525B 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 24389 0000525E 1F                              POP     DS
 24390 0000525F 83F902                  	CMP	CX,2
 24391 00005262 722D                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 24392                                  	;cmp	cx,[es:bp+0Dh]
 24393 00005264 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 24394 00005268 7727                            JA	short RET1	; Treat like zero length file (firclus mucked)
 24395 0000526A 29FB                            SUB     BX,DI
 24396 0000526C 53                              PUSH    BX              ; Save offset
 24397                                  	;PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24398 0000526D 52                              PUSH    DX              ; Save sector number
 24399 0000526E 89CB                            MOV     BX,CX
 24400 00005270 E87702                          call	RELEASE         ; Free any data allocated
 24401 00005273 5A                              POP     DX
 24402                                          ;POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24403 00005274 7302                            JNC	short GET_BUF_BACK
 24404 00005276 5B                              POP     BX
 24405                                  freeent_retn:
 24406 00005277 C3                              retn			; Screw up
 24407                                  
 24408                                  GET_BUF_BACK:
 24409                                  	;mov	byte [ALLOWED],18h
 24410 00005278 C606[F702]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24411 0000527D 30C0                            XOR     AL,AL
 24412 0000527F E8040C                  	call	GETBUFFR        ; Get sector back
 24413 00005282 5B                              POP     BX              ; Get offset back
 24414 00005283 72F2                            jc	short freeent_retn
 24415 00005285 E8AAEE                  	call	SET_BUF_AS_DIR
 24416 00005288 031E[7405]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 24417 0000528C 89DE                            MOV     SI,BX
 24418                                  	;add	si,1Ah
 24419 0000528E 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 24420                                  RET1:
 24421 00005291 F8                              CLC
 24422 00005292 C3                              retn
 24423                                  
 24424                                  ;---------------------------------------------------------------------------
 24425                                  ;
 24426                                  ; Procedure Name : CHECK_VIRT_OPEN
 24427                                  ;
 24428                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 24429                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 24430                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 24431                                  ; flag [VIRTUAL_OPEN].
 24432                                  ; No registers affected (including flags).
 24433                                  ; On input, [THISSFT] points to current SFT.
 24434                                  ;
 24435                                  ;---------------------------------------------------------------------------
 24436                                  
 24437                                  CHECK_VIRT_OPEN:
 24438 00005293 50                      	        PUSH    AX
 24439 00005294 9F                              lahf                    ; preserve flags
 24440 00005295 803E[080A]00                    CMP     byte [VIRTUAL_OPEN],0
 24441 0000529A 7410                            JZ	short ALL_CLOSED
 24442 0000529C C606[080A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 24443 000052A1 06                      	push	es
 24444 000052A2 57                      	push	di
 24445 000052A3 C43E[3605]                      LES     DI,[THISSFT]
 24446 000052A7 E8D3FB                          call	DEV_CLOSE_SFT
 24447 000052AA 5F                      	pop	di
 24448 000052AB 07                      	pop	es
 24449                                  
 24450                                  ALL_CLOSED:
 24451 000052AC 9E                              sahf                    ; restore flags
 24452 000052AD 58                              POP     AX
 24453 000052AE C3                              retn
 24454                                  
 24455                                  ;============================================================================
 24456                                  ; ROM.ASM, MSDOS 6.0, 1991
 24457                                  ;============================================================================
 24458                                  ; 29/07/2018 - Retro DOS v3.0
 24459                                  
 24460                                  ;	TITLE	ROM - Miscellaneous routines
 24461                                  ;	NAME	ROM
 24462                                  
 24463                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 24464                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 24465                                  ;
 24466                                  ;	SKPCLP
 24467                                  ;	FNDCLUS
 24468                                  ;	BUFSEC
 24469                                  ;	BUFRD
 24470                                  ;	BUFWRT
 24471                                  ;	NEXTSEC
 24472                                  ;	OPTIMIZE
 24473                                  ;	FIGREC
 24474                                  ;	ALLOCATE
 24475                                  ;	RESTFATBYT
 24476                                  ;	RELEASE
 24477                                  ;	RELBLKS
 24478                                  ;	GETEOF
 24479                                  ;
 24480                                  ;	Modification history:
 24481                                  ;
 24482                                  ;		Created: ARR 30 March 1983
 24483                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 24484                                  
 24485                                  ;Break   <FNDCLUS -- Skip over allocation units>
 24486                                  ;--------------------------------------------------------------------------
 24487                                  ;
 24488                                  ; Procedure Name : FNDCLUS
 24489                                  ;
 24490                                  ; Inputs:
 24491                                  ;       CX = No. of clusters to skip
 24492                                  ;       ES:BP = Base of drive parameters
 24493                                  ;       [THISSFT] point to SFT
 24494                                  ; Outputs:
 24495                                  ;       BX = Last cluster skipped to
 24496                                  ;       CX = No. of clusters remaining (0 unless EOF)
 24497                                  ;       DX = Position of last cluster
 24498                                  ;       Carry set if error (currently user FAILed to I 24)
 24499                                  ; DI destroyed. No other registers affected.
 24500                                  ;--------------------------------------------------------------------------
 24501                                  
 24502                                  FNDCLUS:
 24503 000052AF 06                      	PUSH	ES
 24504 000052B0 C43E[3605]                      LES     DI,[THISSFT]		; setup addressability to SFT
 24505                                  	;mov	bx,[es:di+1Bh]
 24506 000052B4 268B5D1B                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 24507                                  	;mov	dx,[es:di+19h]
 24508 000052B8 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 24509 000052BC 09DB                    	OR	BX,BX
 24510 000052BE 7424                    	JZ	short NOCLUS
 24511                                  
 24512 000052C0 29D1                            SUB     CX,DX
 24513 000052C2 7308                            JNB	short FINDIT
 24514                                  
 24515 000052C4 01D1                            ADD     CX,DX
 24516 000052C6 31D2                            XOR     DX,DX
 24517                                  	;mov	bx,[es:di+0Bh]
 24518 000052C8 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 24519                                  FINDIT:
 24520 000052CC 07                              POP	ES
 24521 000052CD E313                    	JCXZ	RET9
 24522                                  
 24523                                  	;entry	SKPCLP
 24524                                  SKPCLP:
 24525 000052CF E87C07                  	call	UNPACK
 24526 000052D2 7214                            jc	short fndclus_retn	; retc
 24527                                  	
 24528                                  	; 09/09/2018
 24529                                  
 24530                                  	; MSDOS 6.0
 24531                                  	;xchg	bx,di
 24532                                  	;call	IsEOF
 24533                                  	;pop	bx
 24534                                  	;xchg	bx,di
 24535                                  	;jae	short RET9
 24536                                  
 24537                                  	; MSDOS 3.3
 24538 000052D4 53                      	push	bx
 24539 000052D5 89FB                    	mov	bx,di
 24540 000052D7 E85D07                  	call	IsEOF
 24541 000052DA 5B                      	pop	bx	
 24542 000052DB 7305                    	jae	short RET9
 24543                                  
 24544 000052DD 87DF                            XCHG    BX,DI
 24545 000052DF 42                              INC     DX
 24546 000052E0 E2ED                    	LOOP	SKPCLP			; RMFS
 24547                                  RET9:	
 24548 000052E2 F8                      	CLC
 24549 000052E3 C3                              retn
 24550                                  NOCLUS:
 24551 000052E4 07                              POP	ES
 24552 000052E5 41                              INC	CX
 24553 000052E6 4A                              DEC	DX
 24554 000052E7 F8                              CLC
 24555                                  
 24556                                  fndclus_retn:
 24557 000052E8 C3                              retn
 24558                                  
 24559                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 24560                                  ;--------------------------------------------------------------------------
 24561                                  ;
 24562                                  ; Procedure Name : BUFSEC
 24563                                  ;
 24564                                  ; Inputs:
 24565                                  ;       AH = priority of buffer
 24566                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 24567                                  ;       ES:BP = Base of drive parameters
 24568                                  ;       [CLUSNUM] = Physical cluster number
 24569                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 24570                                  ;       [BYTCNT1] = Size of transfer
 24571                                  ; Function:
 24572                                  ;       Insure specified sector is in buffer, flushing buffer before
 24573                                  ;       read if necessary.
 24574                                  ; Outputs:
 24575                                  ;       ES:DI = Pointer to buffer
 24576                                  ;       SI = Pointer to transfer address
 24577                                  ;       CX = Number of bytes
 24578                                  ;       [NEXTADD] updated
 24579                                  ;       [TRANS] set to indicate a transfer will occur
 24580                                  ;       Carry set if error (user FAILed to I 24)
 24581                                  ;--------------------------------------------------------------------------
 24582                                  
 24583                                  BUFSEC:
 24584 000052E9 8B16[5405]                      MOV     DX,[CLUSNUM]
 24585 000052ED 8A1E[0E05]                      MOV     BL,[SECCLUSPOS]
 24586                                  	;mov	byte [ALLOWED],38h
 24587 000052F1 C606[F702]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 24588 000052F6 E83901                          CALL    FIGREC
 24589 000052F9 E88A0B                  	call	GETBUFFR
 24590 000052FC 72EA                            jc	short fndclus_retn
 24591                                  
 24592 000052FE C606[0F05]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 24593 00005303 8B36[5005]                      MOV     SI,[NEXTADD]
 24594 00005307 89F7                            MOV     DI,SI
 24595 00005309 8B0E[6405]                      MOV     CX,[BYTCNT1]
 24596 0000530D 01CF                            ADD     DI,CX
 24597 0000530F 893E[5005]                      MOV     [NEXTADD],DI
 24598 00005313 C43E[7405]                      LES     DI,[CURBUF]
 24599                                  	;or	byte [es:di+5],8
 24600 00005317 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 24601                                  	;lea	di,[di+16]
 24602 0000531C 8D7D10                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 24603 0000531F 033E[5E05]                      ADD     DI,[BYTSECPOS]
 24604 00005323 F8                              CLC
 24605 00005324 C3                              retn
 24606                                  
 24607                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 24608                                  
 24609                                  ;---------------------------------------------------------------------------
 24610                                  ;
 24611                                  ; Procedure Name : BUFRD
 24612                                  ;
 24613                                  ; Do a partial sector read via one of the system buffers
 24614                                  ; ES:BP Points to DPB
 24615                                  ; Carry set if error (currently user FAILed to I 24)
 24616                                  ;
 24617                                  ; DS - set to DOSDATA
 24618                                  ;
 24619                                  ;----------------------------------------------------------------------------
 24620                                  
 24621                                  BUFRD:
 24622 00005325 06                              PUSH	ES
 24623 00005326 31C0                            xor	ax, ax			; pre-read sector
 24624 00005328 E8BEFF                          CALL    BUFSEC
 24625 0000532B 7303                            JNC	short BUF_OK
 24626                                  
 24627                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 24628 0000532D 07                              POP	ES
 24629 0000532E EB29                            JMP     SHORT RBUFPLACED
 24630                                  
 24631                                  BUF_OK:
 24632 00005330 8CC3                            MOV     BX,ES
 24633 00005332 8E06[DC02]                      MOV     ES,[DMAADD+2]
 24634 00005336 8EDB                            MOV     DS,BX
 24635 00005338 87FE                    	XCHG    DI,SI
 24636 0000533A D1E9                            SHR     CX,1
 24637                                  ;M039
 24638                                  	; MSDOS 3.3
 24639 0000533C 7301                    	JNC	short EVENRD
 24640 0000533E A4                      	MOVSB
 24641                                  EVENRD:
 24642 0000533F F3A5                    	REP     MOVSW
 24643                                  
 24644                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24645                                  ;       DS:SI-> Source within Buffer.
 24646                                  ;       ES:DI-> Destination within Transfer memory block.
 24647                                  
 24648                                  	; MSDOS 6.0
 24649                                  ;	rep	movsw			;Copy Buffer to Transfer memory.
 24650                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24651                                  ;	rep	movsb                   ;Copy last byte.
 24652                                  ;M039
 24653                                  
 24654 00005341 07                              POP	ES
 24655                                  ;hkn; SS override
 24656 00005342 36C53E[7405]                    LDS     DI,[SS:CURBUF]
 24657                                  	;lea	bx,[di+16]
 24658 00005347 8D5D10                  	LEA     BX,[DI+BUFINSIZ]
 24659 0000534A 29DE                            SUB     SI,BX                   ; Position in buffer
 24660 0000534C E88C0A                          call	PLACEBUF
 24661                                  	;cmp	si,[es:bp+2]
 24662 0000534F 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 24663 00005353 7203                            JB	short RBUFPLACEDC	; No, leave buf where it is
 24664                                  
 24665                                  ;M039
 24666                                  	; MSDOS 3.3
 24667 00005355 E8E50A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24668                                                                          ;  even though it is MRU.
 24669                                          ; MSDOS 6.0
 24670                                  	;MOV	[BufferQueue],DI	; Make it prime candidate for
 24671                                  ;M039					; chucking even though it is MRU.
 24672                                  
 24673                                  RBUFPLACEDC:
 24674 00005358 F8                              CLC
 24675                                  RBUFPLACED:
 24676 00005359 16                      	push	ss
 24677 0000535A 1F                      	pop	ds
 24678 0000535B C3                              retn
 24679                                  
 24680                                  ;----------------------------------------------------------------------------
 24681                                  ;
 24682                                  ; Procedure : BUFWRT
 24683                                  ;
 24684                                  ; Do a partial sector write via one of the system buffers
 24685                                  ; ES:BP Points to DPB
 24686                                  ; Carry set if error (currently user FAILed to I 24)
 24687                                  ;
 24688                                  ; DS - set to DOSDATA
 24689                                  ;
 24690                                  ;----------------------------------------------------------------------------
 24691                                  
 24692                                  BUFWRT:
 24693 0000535C A1[5A05]                        MOV     AX,[SECPOS]
 24694                                          ; MSDOS 6.0
 24695                                  	;ADD	AX,1            	; Set for next sector
 24696                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 24697                                          ;ADC	[SECPOS+2],0		;F.C. >32mb	;AN000;
 24698                                          ;MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 24699                                          ;CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 24700                                          ;MOV	AL,1			;F.C. >32mb	;AN000;
 24701                                          ;JA	short NOREAD		;F.C. >32mb	;AN000;
 24702                                          ;JB	short doread		;F.C. >32mb	;AN000;
 24703                                          ;MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 24704                                  	; MSDOS 3.3
 24705 0000535F 40                      	INC	AX
 24706 00005360 A3[5A05]                	MOV	[SECPOS],AX ; 09/09/2018
 24707                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24708 00005363 3B06[5C05]                      CMP     AX,[VALSEC]		; Has sector been written before?
 24709 00005367 B001                            MOV     AL,1
 24710 00005369 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 24711                                  ;doread:
 24712 0000536B 30C0                            XOR     AL,AL
 24713                                  NOREAD:
 24714 0000536D 06                              PUSH	ES
 24715 0000536E E878FF                          CALL    BUFSEC
 24716 00005371 72BA                    	JC	short BUF_IO_FAIL
 24717 00005373 8E1E[DC02]                      MOV     DS,[DMAADD+2]
 24718 00005377 D1E9                            SHR     CX,1
 24719                                  
 24720                                  ;M039
 24721                                  	; MSDOS 3.3
 24722 00005379 7301                    	JNC     short EVENWRT ; 09/09/2018
 24723 0000537B A4                      	MOVSB
 24724                                  EVENWRT:
 24725 0000537C F3A5                    	REP     MOVSW
 24726                                  
 24727                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24728                                  ;       DS:SI-> Source within Transfer memory block.
 24729                                  ;       ES:DI-> Destination within Buffer.
 24730                                  
 24731                                  	; MSDOS 6.0
 24732                                  	;rep	movsw			;Copy Transfer memory to Buffer.
 24733                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24734                                  	;rep	movsb                   ;Copy last byte.
 24735                                  ;M039
 24736 0000537E 07                              POP	ES
 24737                                  
 24738                                  ;hkn; SS override
 24739 0000537F 36C51E[7405]                    LDS     BX,[SS:CURBUF]
 24740                                  
 24741                                  	; MSDOS 6.0
 24742                                          ;TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24743                                  	;				;LB. if already dirty		  ;AN000;
 24744                                          ;JNZ	short yesdirty5		;LB.  don't increment dirty count ;AN000;
 24745                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 24746                                  	
 24747                                  	;or	byte [bx+5],40h
 24748 00005384 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24749                                  ;yesdirty5:
 24750                                  	;lea	si,[bx+16]
 24751 00005388 8D7710                          LEA     SI,[BX+BUFINSIZ]
 24752 0000538B 29F7                            SUB     DI,SI                   ; Position in buffer
 24753                                  ;M039
 24754                                  	; MSDOS 3.3
 24755 0000538D 89FE                    	MOV     SI,DI
 24756 0000538F 89DF                    	MOV     DI,BX
 24757 00005391 E8470A                  	call	PLACEBUF
 24758                                  	;cmp	si,[es:bp+2]
 24759 00005394 263B7602                	CMP     SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24760 00005398 7203                    	JB	short WBUFPLACED	; No, leave buf where it is
 24761 0000539A E8A00A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24762                                                                          ;  even though it is MRU.
 24763                                  	; MSDOS 6.0
 24764                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24765                                          ;JB	short WBUFPLACED	; No, leave buf where it is
 24766                                          ;MOV	[BufferQueue],BX	; Make it prime candidate for
 24767                                  					; chucking even though it is MRU.
 24768                                  ;M039
 24769                                  
 24770                                  WBUFPLACED:
 24771 0000539D F8                              CLC
 24772 0000539E 16                      	push	ss
 24773 0000539F 1F                      	pop	ds
 24774 000053A0 C3                              retn
 24775                                  
 24776                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 24777                                  ;---------------------------------------------------------------------------
 24778                                  ;
 24779                                  ; Procedure Name : NEXTSEC
 24780                                  ;
 24781                                  ; Compute the next sector to read or write
 24782                                  ; ES:BP Points to DPB
 24783                                  ;
 24784                                  ;---------------------------------------------------------------------------
 24785                                  
 24786                                  NEXTSEC:
 24787 000053A1 F606[0F05]FF            	test	byte [TRANS],0FFh ; -1 
 24788 000053A6 7426                            JZ	short CLRET
 24789                                  
 24790 000053A8 A0[0E05]                        MOV     AL,[SECCLUSPOS]
 24791 000053AB FEC0                            INC     AL
 24792                                  	;cmp	al,[es:bp+4]
 24793 000053AD 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 24794 000053B1 7618                            JBE	short SAVPOS
 24795                                  
 24796 000053B3 8B1E[5405]                      MOV     BX,[CLUSNUM]
 24797 000053B7 E87D06                          call	IsEOF
 24798 000053BA 7314                            JAE	short NONEXT
 24799                                  
 24800 000053BC E88F06                          call	UNPACK
 24801 000053BF 720F                            JC	short NONEXT
 24802                                  clusgot:
 24803 000053C1 893E[5405]                      MOV     [CLUSNUM],DI
 24804 000053C5 FF06[5205]                      INC     word [LASTPOS]
 24805 000053C9 B000                            MOV     AL,0
 24806                                  SAVPOS:
 24807 000053CB A2[0E05]                        MOV     [SECCLUSPOS],AL
 24808                                  CLRET:
 24809 000053CE F8                              CLC
 24810 000053CF C3                              retn
 24811                                  NONEXT:
 24812 000053D0 F9                              STC
 24813 000053D1 C3                              retn
 24814                                  
 24815                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 24816                                  ;----------------------------------------------------------------------------
 24817                                  ;
 24818                                  ; Procedure Name : OPTIMIZE
 24819                                  ;
 24820                                  ; Inputs:
 24821                                  ;       BX = Physical cluster
 24822                                  ;       CX = No. of records
 24823                                  ;       DL = sector within cluster
 24824                                  ;       ES:BP = Base of drives parameters
 24825                                  ;       [NEXTADD] = transfer address
 24826                                  ; Outputs:
 24827                                  ;       AX = No. of records remaining
 24828                                  ;       BX = Transfer address
 24829                                  ;       CX = No. or records to be transferred
 24830                                  ;       DX = Physical sector address            (LOW)
 24831                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 24832                                  ;       DI = Next cluster
 24833                                  ;       [CLUSNUM] = Last cluster accessed
 24834                                  ;       [NEXTADD] updated
 24835                                  ;       Carry set if error (currently user FAILed to I 24)
 24836                                  ; ES:BP unchanged. Note that segment of transfer not set.
 24837                                  ;
 24838                                  ;---------------------------------------------------------------------------
 24839                                  
 24840                                  OPTIMIZE:
 24841 000053D2 52                      	PUSH    DX
 24842 000053D3 53                              PUSH    BX
 24843                                  	;mov	al,[es:bp+4]
 24844 000053D4 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 24845 000053D8 FEC0                            INC     AL              ; Number of sectors per cluster
 24846 000053DA 88C4                            MOV     AH,AL
 24847 000053DC 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 24848 000053DE 89CA                            MOV     DX,CX
 24849 000053E0 B90000                          MOV     CX,0
 24850                                  OPTCLUS:
 24851                                  ; AL has number of sectors available in current cluster
 24852                                  ; AH has number of sectors available in next cluster
 24853                                  ; BX has current physical cluster
 24854                                  ; CX has number of sequential sectors found so far
 24855                                  ; DX has number of sectors left to transfer
 24856                                  ; ES:BP Points to DPB
 24857                                  ; ES:SI has FAT pointer
 24858                                  
 24859                                  do_norm3:
 24860 000053E3 E86806                          call	UNPACK
 24861 000053E6 7237                            JC	short OP_ERR
 24862                                  clusgot2:
 24863 000053E8 00C1                    	ADD	CL,AL
 24864 000053EA 80D500                          ADC     CH,0
 24865 000053ED 39D1                            CMP     CX,DX
 24866 000053EF 7333                            JAE	short BLKDON
 24867 000053F1 88E0                            MOV     AL,AH
 24868 000053F3 43                              INC     BX
 24869 000053F4 39DF                            CMP     DI,BX
 24870 000053F6 74EB                            JZ	short OPTCLUS
 24871 000053F8 4B                              DEC     BX
 24872                                  FINCLUS:
 24873 000053F9 891E[5405]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 24874 000053FD 29CA                            SUB     DX,CX           ; Number of sectors still needed
 24875 000053FF 52                              PUSH    DX
 24876 00005400 89C8                            MOV     AX,CX
 24877                                  	;mul	word[ES:BP+2]
 24878 00005402 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 24879                                  				; Number of sectors times sector size
 24880 00005406 8B36[5005]                      MOV     SI,[NEXTADD]
 24881 0000540A 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 24882 0000540C A3[5005]                        MOV     [NEXTADD],AX
 24883 0000540F 58                              POP     AX              ; Number of sectors still needed
 24884 00005410 5A                              POP     DX              ; Starting cluster
 24885 00005411 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 24886 00005413 011E[5205]                      ADD     [LASTPOS],BX
 24887 00005417 5B                              POP     BX              ; BL = sector postion within cluster
 24888 00005418 E81700                  	call	FIGREC
 24889 0000541B 89F3                            MOV     BX,SI
 24890 0000541D F8                      	CLC
 24891 0000541E C3                              retn
 24892                                  
 24893                                  OP_ERR:
 24894 0000541F 83C404                          ADD     SP,4
 24895 00005422 F9                      	STC
 24896 00005423 C3                              retn
 24897                                  
 24898                                  BLKDON:
 24899 00005424 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 24900 00005426 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 24901 00005428 FECC                            DEC     AH              ; Adjust to mean position within cluster
 24902 0000542A 8826[0E05]                      MOV     [SECCLUSPOS],AH
 24903 0000542E 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 24904 00005430 EBC7                            JMP     SHORT FINCLUS
 24905                                  
 24906                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 24907                                  ;---------------------------------------------------------------------------
 24908                                  ;
 24909                                  ; Procedure Name : FIGREC
 24910                                  ;
 24911                                  ; Inputs:
 24912                                  ;       DX = Physical cluster number
 24913                                  ;       BL = Sector position within cluster
 24914                                  ;       ES:BP = Base of drive parameters
 24915                                  ; Outputs:
 24916                                  ;       DX = physical sector number           (LOW)
 24917                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 24918                                  ; No other registers affected.
 24919                                  ;
 24920                                  ;---------------------------------------------------------------------------
 24921                                  
 24922                                  FIGREC:
 24923 00005432 51                              PUSH    CX
 24924                                  	;mov	cl,[es:bp+5]
 24925 00005433 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 24926 00005437 4A                              DEC     DX
 24927 00005438 4A                              DEC     DX
 24928                                  
 24929                                  ;hkn; SS override HIGH_SECTOR
 24930                                  	; MSDOS 6.0
 24931                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 24932                                  	;OR	CL,CL				;F.C. >32mb
 24933                                  	;JZ	short noshift			;F.C. >32mb
 24934                                  	;XOR	CH,CH 				;F.C. >32mb
 24935                                  ;rotleft:					;F.C. >32mb
 24936                                  	;CLC					;F.C. >32mb
 24937                                  	;RCL	DX,1				;F.C. >32mb
 24938                                  	;RCL	word [HIGH_SECTOR],1		;F.C. >32mb
 24939                                  	;LOOP	rotleft				;F.C. >32mb
 24940                                  ;noshift:
 24941                                  
 24942                                  	; MSDOS 3.3
 24943 00005439 D3E2                    	SHL     DX,CL
 24944                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24945 0000543B 08DA                            OR      DL,BL
 24946                                  	;add	dx,[es:bp+0Bh]
 24947 0000543D 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 24948                                  	; MSDOS 6.0
 24949                                          ;ADC	word [HIGH_SECTOR],0		;F.C. >32mb
 24950                                  	; MSDOS 3.3 (& MSDOS 6.0)        
 24951 00005441 59                      	POP     CX
 24952                                  figrec_retn:
 24953 00005442 C3                              retn
 24954                                  
 24955                                  ; 30/07/2018 - Retro DOS v3.0
 24956                                  ; IBMDOS.COM (MSDOS3.3, 1987) - Offset 
 24957                                  
 24958                                  ;Break   <ALLOCATE -- Assign disk space>
 24959                                  ;---------------------------------------------------------------------------
 24960                                  ;
 24961                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 24962                                  ;
 24963                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 24964                                  ;   FAT-chained onto the end of the existing file.
 24965                                  ;
 24966                                  ;   The DPB contains the cluster # of the last free cluster allocated
 24967                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 24968                                  ;   numbered clusters, looking for the necessary free blocks.
 24969                                  ;
 24970                                  ;   Once again, fancy terminology gets in the way of corrct coding. When
 24971                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 24972                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 24973                                  ;
 24974                                  ;       If we get to the end of the disk without satisfaction:
 24975                                  ;
 24976                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 24977                                  ;               return (insufficient_disk_space)
 24978                                  ;           ELSE
 24979                                  ;               dpb_next_free = 2; start scan over from the beginning.
 24980                                  ;
 24981                                  ;   Note that there is no multitasking interlock. There is no race when
 24982                                  ;   examining the entrys in an in-core FAT block since there will be no
 24983                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 24984                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 24985                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 24986                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 24987                                  ;   satisfied. We can't allow another activation to think this cluster is
 24988                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 24989                                  ;   allocated.
 24990                                  ;
 24991                                  ;   Note that when we run out of space this algorithem will scan from
 24992                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 24993                                  ;   redundantly scanning the later part of the disk. This only happens when
 24994                                  ;   we run out of space, so sue me.
 24995                                  ;
 24996                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 24997                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 24998                                  ;                                                                          ;
 24999                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 25000                                  ;   explanation:
 25001                                  ;
 25002                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 25003                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 25004                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 25005                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 25006                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 25007                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 25008                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 25009                                  ;   the
 25010                                  ;           LOOP   findfre         ; alloc more if needed
 25011                                  ;   instruction when the first cluster is allocated to the nul file. The
 25012                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 25013                                  ;
 25014                                  ;   This method is obviously useless (because it is non-reentrant) for
 25015                                  ;   multitasking, and will have to be changed. Storing the required value on
 25016                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 25017                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 25018                                  ;   problems with INT 24 well.
 25019                                  ;
 25020                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 25021                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 25022                                  ;                                                                          ;
 25023                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 25024                                  ;               CX = No. of clusters to allocate
 25025                                  ;               ES:BP = Base of drive parameters
 25026                                  ;               [THISSFT] = Points to SFT
 25027                                  ;
 25028                                  ;       EXIT    'C' set if insufficient space
 25029                                  ;                 [FAILERR] can be tested to see the reason for failure
 25030                                  ;                 CX = max. no. of clusters that could be added to file
 25031                                  ;               'C' clear if space allocated
 25032                                  ;                 BX = First cluster allocated
 25033                                  ;                 FAT is fully updated
 25034                                  ;                 sf_FIRCLUS field of SFT set if file was null
 25035                                  ;
 25036                                  ;       USES    ALL but SI, BP
 25037                                  
 25038                                  ;callmagic  proc near
 25039                                  ;       push    ds                             ;push segment of routine 
 25040                                  ;       push    Offset MagicPatch              ;push offset for routine
 25041                                  ;       retf                                   ;simulate jmp far
 25042                                  ;                                              ;far return address is on
 25043                                  ;                                              ;stack, so far return from
 25044                                  ;                                              ;call will return this routine
 25045                                  ;callmagic  endp
 25046                                  
 25047                                  ALLOCATE:
 25048                                  	; 10/09/2018
 25049                                  ;BEGIN MAGICDRV MODIFICATIONS
 25050                                  ;
 25051                                  ;7/5/92 scottq
 25052                                  ;
 25053                                  ;This is the disk compression patch location which allows
 25054                                  ;the disk compression software to fail allocations if the
 25055                                  ;FAT would allows allocation, but the free space for compressed
 25056                                  ;data would not.
 25057                                  ;        
 25058                                  ;;;	call    far ptr MAGICPATCH
 25059                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 25060                                  ;;; but we do know the segment and offset of the routine
 25061                                  ;;; so simulate a far call to dosdata:magicpatch
 25062                                  ;;; note dosassume above, so DS -> dosdata
 25063                                  
 25064                                  	; MSDOS 6.0
 25065                                          ;clc				;clear carry so we fall through
 25066                                  	;				;if no patch is present
 25067                                  	;push	cs			;push segment for far return
 25068                                          ;call	callmagic		;this is a near call
 25069                                          ;jnc	short Regular_Allocate_Path
 25070                                  	;jmp	Disk_Full_Return
 25071                                  
 25072                                  	; MSDOS 6.0
 25073                                          ;clc				;clear carry so we fall through
 25074                                  	;				;if no patch is present
 25075                                  	;push	cs			;push segment for far return
 25076                                          ;call	callmagic		;this is a near call
 25077                                          ;jnc	short Regular_Allocate_Path
 25078                                  	;jmp	Disk_Full_Return ; 10/09/2018 !
 25079                                  
 25080                                  ;Regular_Allocate_Path:
 25081                                  ;END MAGICDRV MODIFICATIONS
 25082                                  
 25083 00005443 53                              PUSH    BX                      ; save (bx)
 25084 00005444 31DB                            XOR     BX,BX
 25085 00005446 E80506                  	call	UNPACK
 25086 00005449 893E[2E05]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 25087 0000544D 5B                              POP     BX
 25088 0000544E 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 25089                                  
 25090 00005450 51                              PUSH    CX
 25091 00005451 53                              PUSH    BX
 25092                                  
 25093 00005452 89DA                            MOV     DX,BX
 25094                                  	;mov	bx,[es:bp+1Ch]
 25095 00005454 268B5E1C                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 25096 00005458 83FB02                          cmp     bx,2
 25097 0000545B 7709                            ja	short FINDFRE
 25098                                  
 25099                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 25100                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 25101                                  
 25102                                  ads1:
 25103                                  	;mov	word [es:bp+1Ch],2
 25104 0000545D 26C7461C0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 25105 00005463 BB0100                          mov     bx,1                    ; Counter next instruction so first
 25106                                                                          ;       cluster examined is 2
 25107                                  
 25108                                  ;   Scanning both forwards and backwards for a free cluster
 25109                                  ;
 25110                                  ;       (BX) = forwards scan pointer
 25111                                  ;       (CX) = clusters remaining to be allocated
 25112                                  ;       (DX) = current last cluster in file
 25113                                  ;       (TOS) = last cluster of file
 25114                                  
 25115                                  FINDFRE:
 25116 00005466 43                              INC     BX
 25117                                  	;cmp	bx,[es:bp+0Dh]
 25118 00005467 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 25119 0000546B 7757                    	ja	short ads7	; at end of disk
 25120 0000546D E8DE05                          call	UNPACK          ; check out this cluster
 25121 00005470 722F                            jc	short ads4	; FAT error             [INTERR?]
 25122 00005472 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 25123                                  
 25124                                  ;   Have found a free cluster. Chain it to the file
 25125                                  ;
 25126                                  ;       (BX) = found free cluster #
 25127                                  ;       (DX) = current last cluster in file
 25128                                  
 25129                                  	;mov	[es:bp+1Ch],bx
 25130 00005474 26895E1C                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 25131 00005478 92                              xchg    ax,dx           ; save (dx) in ax
 25132 00005479 BA0100                          mov     dx,1            ; mark this free guy as "1"
 25133 0000547C E81806                  	call	PACK            ; set special "temporary" mark
 25134 0000547F 7220                            jc	short ads4	; FAT error             [INTERR?]
 25135                                  	;cmp	word [es:bp+1Eh],-1
 25136 00005481 26837E1EFF                      CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25137 00005486 7404                            JZ	short NO_ALLOC	; No
 25138                                  	;dec	word [es:bp+1Eh]
 25139 00005488 26FF4E1E                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 25140                                  NO_ALLOC:
 25141 0000548C 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 25142 0000548D 87DA                            XCHG    BX,DX
 25143 0000548F 89D0                            MOV     AX,DX
 25144 00005491 E80306                  	call	PACK            ; link free cluster onto file
 25145                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 25146                                                                  ;    cluster 0 with FIRCLUS value.
 25147 00005494 720B                            jc	short ads4	; FAT error [INTERR?]
 25148 00005496 93                              xchg    BX,AX           ; (BX) = last one we looked at
 25149 00005497 89DA                            mov     dx,bx           ; (dx) = current end of file
 25150 00005499 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 25151                                  
 25152                                  ;   We've successfully extended the file. Clean up and exit
 25153                                  ;
 25154                                  ;       (BX) = last cluster in file
 25155                                  
 25156 0000549B BAFFFF                          MOV     DX,0FFFFH
 25157 0000549E E8F605                  	call	PACK            ; mark last cluster EOF
 25158                                  
 25159                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 25160                                  ;   2 whole bytes.  Hope its worth it...
 25161                                  ;
 25162                                  ;       'C' set iff error
 25163                                  ;       calling (BX) and (CX) pushed on stack
 25164                                  
 25165                                  ads4:   
 25166 000054A1 5B                      	POP     BX
 25167 000054A2 59                              POP     CX              ; Don't need this stuff since we're successful
 25168 000054A3 729D                            jc	short figrec_retn
 25169 000054A5 E8A605                          call	UNPACK          ; Get first cluster allocated for return
 25170                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 25171 000054A8 7298                            jc	short figrec_retn
 25172 000054AA E82D00                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 25173 000054AD 7293                            jc	short figrec_retn
 25174 000054AF 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 25175 000054B1 09FF                            OR      DI,DI           ; clear 'C'
 25176 000054B3 758D                    	jnz	short figrec_retn ; we were extending an existing file
 25177                                  
 25178                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 25179                                  ;   info
 25180                                  dofastk:
 25181 000054B5 06                              PUSH	ES
 25182 000054B6 C43E[3605]                      LES     DI,[THISSFT]
 25183                                  	;mov	[es:di+0Bh],bx
 25184 000054BA 26895D0B                        MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 25185                                  	;mov	[es:di+1Bh],bx
 25186 000054BE 26895D1B                        MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 25187 000054C2 07                              POP	ES
 25188 000054C3 C3                              retn
 25189                                  
 25190                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 25191                                  ;   of the disk...
 25192                                  
 25193                                  ads7:   
 25194 000054C4 26837E1C02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 25195 000054C9 7592                    	jnz	short ads1	; start scan from front of disk
 25196                                  
 25197                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 25198                                  ;   the space back to the free list and tell the caller how much he could have
 25199                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 25200                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 25201                                  ;
 25202                                  ;       (CX) = clusters remaining to be allocated
 25203                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 25204                                  ;       (TOS+1) = # of clusters wanted to allocate
 25205                                  
 25206 000054CB 5B                              POP     BX              ; (BX) = last cluster of file
 25207 000054CC BAFFFF                          MOV     DX,0FFFFH
 25208 000054CF E81A00                  	call	RELBLKS         ; give back any clusters just alloced
 25209 000054D2 58                              POP     AX              ; No. of clusters requested
 25210                                                                  ; Don't "retc". We are setting Carry anyway,
 25211                                                                  ;   Alloc failed, so proceed with return CX
 25212                                                                  ;   setup.
 25213 000054D3 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 25214 000054D5 E80200                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 25215                                                                  ;   Alloc failed.
 25216                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 25217                                          ; MSDOS 6.0
 25218                                  	;MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 25219 000054D8 F9                              STC
 25220 000054D9 C3                              retn
 25221                                  
 25222                                  ;-----------------------------------------------------------------------
 25223                                  ;
 25224                                  ; Procedure Name : RESTFATBYT
 25225                                  ;
 25226                                  ; SEE ALLOCATE CAVEAT
 25227                                  ;       Carry set if error (currently user FAILed to I 24)
 25228                                  ;-----------------------------------------------------------------------
 25229                                  
 25230                                  RESTFATBYT:
 25231 000054DA 53                              PUSH    BX
 25232 000054DB 52                              PUSH    DX
 25233 000054DC 57                              PUSH    DI
 25234 000054DD 31DB                            XOR     BX,BX
 25235 000054DF 8B16[2E05]                      MOV     DX,[FATBYT]
 25236 000054E3 E8B105                  	call	PACK
 25237 000054E6 5F                              POP     DI
 25238 000054E7 5A                              POP     DX
 25239 000054E8 5B                              POP     BX
 25240                                  RELEASE_flush:
 25241 000054E9 C3                      	retn
 25242                                  
 25243                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 25244                                  ;---------------------------------------------------------------------------
 25245                                  ;
 25246                                  ; Procedure Name : RELEASE
 25247                                  ;
 25248                                  ; Inputs:
 25249                                  ;       BX = Cluster in file
 25250                                  ;       ES:BP = Base of drive parameters
 25251                                  ; Function:
 25252                                  ;       Frees cluster chain starting with [BX]
 25253                                  ;       Carry set if error (currently user FAILed to I 24)
 25254                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 25255                                  ;
 25256                                  ;-----------------------------------------------------------------------------
 25257                                  
 25258                                  RELEASE:
 25259 000054EA 31D2                            XOR     DX,DX
 25260                                  
 25261                                  	;entry	RELBLKS
 25262                                  RELBLKS:
 25263                                  
 25264                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 25265                                  ;   and free the rest in the chain.
 25266                                  
 25267 000054EC E85F05                  	call	UNPACK
 25268 000054EF 72F8                    	jc	short RELEASE_flush
 25269 000054F1 74F6                    	jz	short RELEASE_flush
 25270 000054F3 89F8                            MOV     AX,DI
 25271 000054F5 52                              PUSH    DX
 25272 000054F6 E89E05                  	call	PACK
 25273 000054F9 5A                              POP     DX
 25274 000054FA 72ED                    	jc	short RELEASE_flush
 25275 000054FC 09D2                            OR      DX,DX
 25276 000054FE 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 25277                                  	;cmp	word [es:bp+1Eh],-1
 25278 00005500 26837E1EFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25279 00005505 7404                            JZ	short NO_DEALLOC	; No
 25280 00005507 26FF461E                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 25281                                  NO_DEALLOC:
 25282 0000550B 89C3                            MOV     BX,AX
 25283 0000550D 48                              dec     ax              ; check for "1"
 25284 0000550E 74D9                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 25285 00005510 E82405                  	call	IsEOF
 25286 00005513 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 25287                                  
 25288                                  ;RELEASE_flush:
 25289                                  	; MSDOS 6.0
 25290                                  	;mov	al,[es:bp]
 25291                                  	;;MOV	AL,[ES:BP+DPB.DRIVE]
 25292                                  	;push	si		; FLUSHBUF may trash these and we guarantee
 25293                                  	;push	cx		;  them to be preserved.
 25294                                  	;push	es
 25295                                  	;push	bp
 25296                                  	;call	FLUSHBUF	; commit buffers for this drive
 25297                                  	;pop	bp
 25298                                  	;pop	es
 25299                                  	;pop	cx
 25300                                  	;pop	si
 25301                                  RET12:
 25302 00005515 C3                      	retn
 25303                                  
 25304                                  ;Break	<GETEOF -- Find the end of a file>
 25305                                  ;------------------------------------------------------------------------
 25306                                  ;
 25307                                  ; Procedure Name : GETEOF
 25308                                  ;
 25309                                  ; Inputs:
 25310                                  ;       ES:BP Points to DPB
 25311                                  ;       BX = Cluster in a file
 25312                                  ;       DS = CS
 25313                                  ; Outputs:
 25314                                  ;       BX = Last cluster in the file
 25315                                  ;       Carry set if error (currently user FAILed to I 24)
 25316                                  ; DI destroyed. No other registers affected.
 25317                                  ;
 25318                                  ;--------------------------------------------------------------------------
 25319                                  
 25320                                  GETEOF:
 25321 00005516 E83505                  	call	UNPACK
 25322 00005519 72FA                            jc	short RET12
 25323 0000551B 53                              PUSH    BX
 25324 0000551C 89FB                            MOV     BX,DI
 25325 0000551E E81605                  	call	IsEOF
 25326 00005521 5B                              POP     BX
 25327 00005522 73F1                            JAE     short RET12
 25328 00005524 89FB                            MOV     BX,DI
 25329 00005526 EBEE                            JMP     short GETEOF
 25330                                  
 25331                                  ;============================================================================
 25332                                  ; FCB.ASM, MSDOS 6.0, 1991
 25333                                  ;============================================================================
 25334                                  ; 30/07/2018 - Retro DOS v3.0
 25335                                  
 25336                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 25337                                  ;	NAME	FCB
 25338                                  
 25339                                  ;**	FCB.ASM -  Low level routines for parsing names into FCBs and analyzing
 25340                                  ;		   filename characters
 25341                                  ;
 25342                                  ;	MakeFcb
 25343                                  ;	NameTrans
 25344                                  ;	PATHCHRCMP
 25345                                  ;	GetLet
 25346                                  ;	UCase
 25347                                  ;	GetLet3
 25348                                  ;	GetCharType
 25349                                  ;	TESTKANJ
 25350                                  ;	NORMSCAN
 25351                                  ;	DELIM
 25352                                  ;
 25353                                  ;	Revision history:
 25354                                  ;
 25355                                  ;		A000  version 4.00  Jan. 1988
 25356                                  ;	
 25357                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 25358                                  
 25359                                  TableLook	EQU -1
 25360                                  
 25361                                  SCANSEPARATOR	EQU	1
 25362                                  DRVBIT		EQU	2
 25363                                  NAMBIT		EQU	4
 25364                                  EXTBIT		EQU	8
 25365                                  
 25366                                  ;
 25367                                  ;----------------------------------------------------------------------------
 25368                                  ;
 25369                                  ; Procedure : MakeFcb
 25370                                  ;
 25371                                  ;----------------------------------------------------------------------------
 25372                                  ;
 25373                                  
 25374                                  MAKEFCB:
 25375                                  ;hkn; SS override
 25376 00005528 36C606[FA02]00          	MOV	BYTE [SS:SpaceFlag],0
 25377 0000552E 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 25378                                  	;test	al,2
 25379 00005530 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 25380 00005532 7504                    	JNZ	short DEFDRV
 25381 00005534 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 25382                                  DEFDRV:
 25383 00005538 47                      	INC	DI
 25384 00005539 B90800                  	MOV	CX,8
 25385                                  	;test	al,4
 25386 0000553C A804                    	test	AL,NAMBIT	; Use current name fields as default?
 25387 0000553E 93                      	XCHG	AX,BX		; Save bits in BX
 25388 0000553F B020                    	MOV	AL," "
 25389 00005541 7404                    	JZ	short FILLB	; If not, go fill with blanks
 25390 00005543 01CF                    	ADD	DI,CX
 25391 00005545 31C9                    	XOR	CX,CX		; Don't fill any
 25392                                  FILLB:
 25393 00005547 F3AA                    	REP	STOSB
 25394 00005549 B103                    	MOV	CL,3
 25395 0000554B F6C308                  	test	BL,EXTBIT	; Use current extension as default
 25396 0000554E 7404                    	JZ	short FILLB2
 25397 00005550 01CF                    	ADD	DI,CX
 25398 00005552 31C9                    	XOR	CX,CX
 25399                                  FILLB2:
 25400 00005554 F3AA                    	REP	STOSB
 25401 00005556 91                      	XCHG	AX,CX		; Put zero in AX
 25402 00005557 AB                      	STOSW
 25403 00005558 AB                      	STOSW			; Initialize two words after to zero
 25404 00005559 83EF10                  	SUB	DI,16		; Point back at start
 25405                                  	;test	bl,1
 25406 0000555C F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 25407 0000555F 7409                    	JZ	short SKPSPC
 25408 00005561 E87300                  	CALL	SCANB		; Peel off blanks and tabs
 25409 00005564 E8CA00                  	CALL	DELIM		; Is it a one-time-only delimiter?
 25410 00005567 7504                    	JNZ	short NOSCAN
 25411 00005569 46                      	INC	SI		; Skip over the delimiter
 25412                                  SKPSPC:
 25413 0000556A E86A00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 25414                                  NOSCAN:
 25415 0000556D E89C00                  	CALL	GETLET
 25416 00005570 7616                    	JBE	short NODRV	; Quit if termination character
 25417 00005572 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 25418 00005575 7511                    	JNZ	short NODRV
 25419 00005577 46                      	INC	SI		; Skip over colon
 25420 00005578 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 25421 0000557A 7607                    	JBE	short BADDRV	; Drive letter out of range
 25422                                  
 25423 0000557C 50                      	PUSH	AX
 25424 0000557D E8DB13                  	call	GetVisDrv
 25425 00005580 58                      	POP	AX
 25426 00005581 7302                    	JNC	short HAVDRV
 25427                                  
 25428                                  	; MSDOS 6.0
 25429                                  ;hkn; SS override
 25430                                  	;CMP	byte [SS:DrvErr],error_not_DOS_disk
 25431                                  	;				; if not FAT drive ;AN000;
 25432                                  	;JZ	short HAVDRV		; assume ok	   ;AN000;
 25433                                  BADDRV:
 25434 00005583 B2FF                    	MOV	DL,-1
 25435                                  HAVDRV:
 25436 00005585 AA                      	STOSB			; Put drive specifier in first byte
 25437 00005586 46                      	INC	SI
 25438 00005587 4F                      	DEC	DI		; Counteract next two instructions
 25439                                  NODRV:
 25440 00005588 4E                      	DEC	SI		; Back up
 25441 00005589 47                      	INC	DI		; Skip drive byte
 25442                                  
 25443                                  	;entry	NORMSCAN
 25444                                  NORMSCAN:
 25445 0000558A B90800                  	MOV	CX,8
 25446 0000558D E81300                  	CALL	GETWORD 	; Get 8-letter file name
 25447 00005590 803C2E                  	CMP	BYTE [SI],"."
 25448 00005593 7507                    	JNZ	short NODOT
 25449 00005595 46                      	INC	SI		; Skip over dot if present
 25450                                  
 25451                                  	; MSDOS6.0
 25452                                  ;hkn; SS override
 25453                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2	;AN000;
 25454                                  	;JZ	short VOLOK				;AN000;
 25455                                  	;MOVSB			; 2nd byte of DBCS	;AN000;
 25456                                  	;MOV	CX,2					;AN000;
 25457                                  	;JMP	SHORT contvol				;AN000;
 25458                                  ;VOLOK:
 25459 00005596 B90300                  	MOV	CX,3		; Get 3-letter extension
 25460                                  contvol:
 25461 00005599 E80D00                  	CALL	MUSTGETWORD
 25462                                  NODOT:
 25463 0000559C 88D0                    	MOV	AL,DL
 25464                                  
 25465                                  	; MSDOS 6.0
 25466                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 25467                                  
 25468 0000559E C3                      	retn
 25469                                  
 25470                                  NONAM:
 25471 0000559F 01CF                    	ADD	DI,CX
 25472 000055A1 4E                      	DEC	SI
 25473 000055A2 C3                      	retn
 25474                                  
 25475                                  GETWORD:
 25476 000055A3 E86600                  	CALL	GETLET		
 25477 000055A6 76F7                    	JBE	short NONAM	; Exit if invalid character
 25478 000055A8 4E                      	DEC	SI
 25479                                  
 25480                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 25481                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 25482                                  
 25483                                  MUSTGETWORD:
 25484 000055A9 E86000                  	CALL	GETLET
 25485                                  
 25486                                  ;	If spaceFlag is set then we allow spaces in a pathname
 25487                                  
 25488                                  ;IF NOT TABLELOOK
 25489 000055AC 7223                    	JB	short FILLNAM
 25490                                  ;ENDIF
 25491 000055AE 750C                    	JNZ	short MustCheckCX
 25492                                  
 25493                                  ;hkn; SS override
 25494 000055B0 36F606[FA02]FF          	test	BYTE [SS:SpaceFlag],0FFh
 25495 000055B6 7419                    	JZ	short FILLNAM
 25496 000055B8 3C20                    	CMP	AL," "
 25497 000055BA 7515                    	JNZ	short FILLNAM
 25498                                  
 25499                                  MustCheckCX:
 25500 000055BC E3EB                    	JCXZ	MUSTGETWORD
 25501 000055BE 49                      	DEC	CX
 25502 000055BF 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 25503 000055C1 7504                    	JNZ	short NOSTAR
 25504 000055C3 B03F                    	MOV	AL,"?"
 25505 000055C5 F3AA                    	REP	STOSB
 25506                                  NOSTAR:
 25507 000055C7 AA                      	STOSB
 25508 000055C8 3C3F                    	CMP	AL,"?"
 25509 000055CA 75DD                    	JNZ	short MUSTGETWORD
 25510 000055CC 80CA01                  	OR	DL,1		; Flag ambiguous file name
 25511 000055CF EBD8                    	JMP	short MUSTGETWORD
 25512                                  FILLNAM:
 25513 000055D1 B020                    	MOV	AL," "
 25514 000055D3 F3AA                    	REP	STOSB
 25515 000055D5 4E                      	DEC	SI
 25516 000055D6 C3                      	retn
 25517                                  
 25518                                  SCANB:
 25519 000055D7 AC                      	LODSB
 25520 000055D8 E86200                  	CALL	SPCHK
 25521 000055DB 74FA                    	JZ	short SCANB
 25522 000055DD 4E                      	DEC	SI
 25523                                  scanb_retn:
 25524 000055DE C3                      	retn
 25525                                  
 25526                                  ;----------------------------------------------------------------------------
 25527                                  ;
 25528                                  ; Procedure Name : NameTrans
 25529                                  ;
 25530                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 25531                                  ; allow spaces in pathnames
 25532                                  ;
 25533                                  ;   Inputs:	DS:SI points to start of path element
 25534                                  ;   Outputs:	Name1 has unpacked name, uppercased
 25535                                  ;		ES = DOSGroup
 25536                                  ;		DS:SI advanced after name
 25537                                  ;   Registers modified: DI,AX,DX,CX
 25538                                  ;
 25539                                  ;----------------------------------------------------------------------------
 25540                                  
 25541                                  NameTrans:
 25542                                  ;hkn; SS override
 25543 000055DF 36C606[FA02]01          	MOV	BYTE [SS:SpaceFlag],1
 25544 000055E5 16                      	push	ss
 25545 000055E6 07                      	pop	es
 25546                                  
 25547                                  ;hkn; NAME1 is in DOSDATA
 25548 000055E7 BF[E604]                	MOV	DI,NAME1
 25549 000055EA 57                      	PUSH	DI
 25550 000055EB B82020                  	MOV	AX,'  '
 25551 000055EE B90500                  	MOV	CX,5
 25552 000055F1 AA                      	STOSB
 25553 000055F2 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 25554 000055F4 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 25555 000055F6 88C2                    	MOV	DL,AL
 25556 000055F8 AA                      	STOSB
 25557 000055F9 5F                      	POP	DI
 25558                                  
 25559 000055FA E88DFF                  	CALL	NORMSCAN
 25560                                  
 25561                                  ;hkn; SS override for NAME1
 25562 000055FD 36803E[E604]E5          	CMP	byte [SS:NAME1],0E5H
 25563 00005603 75D9                    	jnz	short scanb_retn
 25564 00005605 36C606[E604]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 25565 0000560B C3                      	retn
 25566                                  
 25567                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 25568                                  
 25569                                  ;----------------------------------------------------------------------------
 25570                                  ;
 25571                                  ; Procedure Names : GetLet, UCase, GetLet3
 25572                                  ;
 25573                                  ; These routines take a character, convert it to upper case, and check
 25574                                  ; for delimiters.  Three different entry points:
 25575                                  ;	GetLet -  DS:[SI] = character to convert
 25576                                  ;	UCase  -  AL = character to convert
 25577                                  ;	GetLet3 - AL = character
 25578                                  ;		  [BX] = translation table to use
 25579                                  ;
 25580                                  ;	Exit (in all cases) : AL = upper case character
 25581                                  ;			      CY set if char is control char other than TAB
 25582                                  ;			      ZF set if char is a delimiter
 25583                                  ;	Uses : AX, flags
 25584                                  ;
 25585                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 25586                                  ; inline version.  Return with carry set is only possible in the inline
 25587                                  ; version.  The table lookup version is the one in use.
 25588                                  ;
 25589                                  ;----------------------------------------------------------------------------
 25590                                  
 25591                                  
 25592                                  ; This entry point has character at [SI]
 25593                                  
 25594                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 25595                                  GETLET:	
 25596 0000560C AC                      	LODSB
 25597                                  
 25598                                  ; This entry point has character in AL
 25599                                  
 25600                                  	;entry	UCase
 25601                                  UCase:	
 25602                                  	; 09/08/2018
 25603                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 25604                                  _UCase:
 25605 0000560D 53                      	PUSH	BX
 25606 0000560E BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2
 25607                                  
 25608                                  ; Convert the character in AL to upper case
 25609                                  
 25610                                  gl_0:
 25611 00005611 3C61                    	CMP	AL,"a"
 25612 00005613 720E                    	JB	short gl_2	; Already upper case, go check type
 25613 00005615 3C7A                    	CMP	AL,"z"
 25614 00005617 7702                    	JA	short gl_1
 25615 00005619 2C20                    	SUB	AL,20H		; Convert to upper case
 25616                                  
 25617                                  ; Map European character to upper case
 25618                                  
 25619                                  gl_1:
 25620 0000561B 3C80                    	CMP	AL,80H
 25621 0000561D 7204                    	JB	short gl_2	; Not EuroChar, go check type
 25622 0000561F 2C80                    	SUB	AL,80H		; translate to upper case with this index
 25623                                  
 25624                                  	; M048 - Start 
 25625                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 25626                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 25627                                  	; preserve it.
 25628                                  	;
 25629                                  
 25630                                  	;push	ds
 25631                                  	;push	cs
 25632                                  	;pop	ds
 25633                                  
 25634                                  	; 09/08/2018
 25635                                  	;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 25636 00005621 2ED7                    	CS	XLAT
 25637                                  
 25638                                  	;pop	ds
 25639                                  
 25640                                  	; M048 - End
 25641                                  
 25642                                  ; Now check the type
 25643                                  
 25644                                  ;If TableLook
 25645                                  
 25646                                  gl_2:
 25647 00005623 50                      	PUSH	AX
 25648                                  	
 25649                                  	; MSDOS 6.0
 25650                                  	;CALL	GetCharType	; returns type flags in AL
 25651                                  	
 25652                                  	; MSDOS 3.3
 25653 00005624 BB[1613]                	mov	bx,CharType
 25654                                  	; 09/08/2018
 25655                                  	;xlat	byte [cs:bx]
 25656 00005627 2ED7                    	cs	xlat	
 25657                                  
 25658                                  	;test	al,1	
 25659 00005629 A801                    	TEST	AL,FCHK 	; test for normal character
 25660 0000562B 58                      	POP	AX
 25661 0000562C 5B                      	POP	BX
 25662 0000562D C3                      	RETN
 25663                                  
 25664                                  ; This entry has character in AL and lookup table in BX
 25665                                  
 25666                                  	; MSDOS 6.0
 25667                                  ;	;entry GetLet3
 25668                                  GETLET3: ; 10/08/2018
 25669 0000562E 53                      	PUSH	BX
 25670 0000562F EBE0                    	JMP	short gl_0
 25671                                  
 25672                                  ;ELSE
 25673                                  ;
 25674                                  ;gl_2:
 25675                                  ;	POP	BX
 25676                                  ;	CMP	AL,"."
 25677                                  ;	retz
 25678                                  ;	CMP	AL,'"'
 25679                                  ;	retz
 25680                                  ;	CALL	PATHCHRCMP
 25681                                  ;	retz
 25682                                  ;	CMP	AL,"["
 25683                                  ;	retz
 25684                                  ;	CMP	AL,"]"
 25685                                  ;	retz
 25686                                  ;ENDIF
 25687                                  
 25688                                  ;---------------------------------------------------------------------
 25689                                  ;
 25690                                  ; DELIM - check if character is a delimiter
 25691                                  ;	Entry : AX = character to check
 25692                                  ;	Exit  : ZF set if character is not a delimiter
 25693                                  ;	Uses  : Flags
 25694                                  ;
 25695                                  ;--------------------------------------------------------------------
 25696                                  
 25697                                  	;entry	DELIM
 25698                                  DELIM:
 25699                                  ;IF TableLook
 25700 00005631 50                      	PUSH	AX
 25701                                  
 25702                                  	; MSDOS 6.0
 25703                                  	;CALL	GetCharType
 25704                                  	
 25705                                  	; MSDOS 3.3
 25706 00005632 53                      	push	bx
 25707 00005633 BB[1613]                	mov	bx,CharType
 25708                                  	;09/08/2018
 25709                                  	;xlat	byte [cs:bx]
 25710 00005636 2ED7                    	cs	xlat
 25711 00005638 5B                      	pop	bx
 25712                                  
 25713                                  	;test	al,2
 25714 00005639 A802                    	TEST	AL,FDELIM
 25715 0000563B 58                      	POP	AX
 25716 0000563C C3                      	RETN
 25717                                  ;ELSE
 25718                                  ;	CMP	AL,":"
 25719                                  ;	retz
 25720                                  ;
 25721                                  ;	CMP	AL,"<"
 25722                                  ;	retz
 25723                                  ;	CMP	AL,"|"
 25724                                  ;	retz
 25725                                  ;	CMP	AL,">"
 25726                                  ;	retz
 25727                                  ;
 25728                                  ;	CMP	AL,"+"
 25729                                  ;	retz
 25730                                  ;	CMP	AL,"="
 25731                                  ;	retz
 25732                                  ;	CMP	AL,";"
 25733                                  ;	retz
 25734                                  ;	CMP	AL,","
 25735                                  ;	retz
 25736                                  ;ENDIF
 25737                                  
 25738                                  ;-------------------------------------------------------------------------
 25739                                  ;
 25740                                  ;  SPCHK - checks to see if a character is a space or equivalent
 25741                                  ;	Entry : AL = character to check
 25742                                  ;	Exit  : ZF set if character is a space
 25743                                  ;	Uses  : flags
 25744                                  ;
 25745                                  ;-------------------------------------------------------------------------
 25746                                  
 25747                                  	;entry SPCHK
 25748                                  SPCHK:
 25749                                  ;IF TableLook
 25750 0000563D 50                      	PUSH	AX
 25751                                  
 25752                                  	; MSDOS 6.0
 25753                                  	;CALL	GetCharType
 25754                                  	
 25755                                  	; MSDOS 3.3
 25756 0000563E 53                      	push	bx
 25757 0000563F BB[1613]                	mov	bx,CharType
 25758                                  	; 09/08/2018
 25759                                  	;xlat	byte [cs:bx]
 25760 00005642 2ED7                    	cs	xlat
 25761 00005644 5B                      	pop	bx
 25762                                  
 25763                                  	;test	al,4
 25764 00005645 A804                    	TEST	AL,FSPCHK
 25765 00005647 58                      	POP	AX
 25766 00005648 C3                      	RETN
 25767                                  ;ELSE
 25768                                  ;	CMP	AL,9		; Filter out tabs too
 25769                                  ;	retz
 25770                                  ;; WARNING! " " MUST be the last compare
 25771                                  ;	CMP	AL," "
 25772                                  ;	return
 25773                                  ;ENDIF
 25774                                  
 25775                                  ; MSDOS 6.0
 25776                                  ;-------------------------------------------------------------------------
 25777                                  ;
 25778                                  ;  GetCharType - return flag bits indicating character type
 25779                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 25780                                  ;	defined above at label CharType.
 25781                                  ;
 25782                                  ;	Entry : AL = character to return type flags for
 25783                                  ;	Exit  : AL = type flags
 25784                                  ;	Uses  : AL, flags
 25785                                  ;
 25786                                  ;-------------------------------------------------------------------------
 25787                                  ;
 25788                                  ;GetCharType:
 25789                                  ;	cmp	al,CharType_last	; beyond end of table?
 25790                                  ;	jae	short gct_90		; return standard value
 25791                                  ;
 25792                                  ;	push	bx
 25793                                  ;	mov	bx,CharType		; load lookup table
 25794                                  ;	shr	al,1			; adjust for half-byte table entry size
 25795                                  ;	;xlat	cs:[bx] 		; get flags
 25796                                  ;	cs	xlat	
 25797                                  ;	pop	bx
 25798                                  ;
 25799                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 25800                                  ; we have to shift the flags down to the low nibble
 25801                                  ;
 25802                                  ;	jnc	short gct_80		; carry clear, no shift needed
 25803                                  ;
 25804                                  ;	shr	al,1			; we want high nibble, shift it down
 25805                                  ;	shr	al,1
 25806                                  ;	shr	al,1
 25807                                  ;	shr	al,1
 25808                                  ;
 25809                                  ;gct_80:
 25810                                  ;	and	al,0Fh			; clear the unused nibble
 25811                                  ;	retn
 25812                                  ;
 25813                                  ;gct_90:
 25814                                  ;	mov	al,0Fh			; set all flags
 25815                                  ;	retn
 25816                                  
 25817                                  ;----------------------------------------------------------------------------
 25818                                  ;
 25819                                  ; Procedure : PATHCHRCMP
 25820                                  ;
 25821                                  ;----------------------------------------------------------------------------
 25822                                  
 25823                                  PATHCHRCMP:
 25824 00005649 3C2F                    	CMP	AL,'/'
 25825 0000564B 7606                    	JBE	short PathRet
 25826 0000564D 3C5C                    	CMP	AL,'\'
 25827 0000564F C3                      	retn
 25828                                  GotFor:
 25829 00005650 B05C                    	MOV	AL,'\'
 25830 00005652 C3                      	retn
 25831                                  PathRet:
 25832 00005653 74FB                    	JZ	short GotFor
 25833 00005655 C3                      	retn
 25834                                  
 25835                                  
 25836                                  ;============================================================================
 25837                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 25838                                  ;============================================================================
 25839                                  ; 30/07/2018 - Retro DOS v3.0
 25840                                  
 25841                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 25842                                  
 25843                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 25844                                  
 25845                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 25846                                  ;	NAME	IBMCTRLC
 25847                                  
 25848                                  ;**	Low level routines for detecting special characters on CON input,
 25849                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 25850                                  ;	process termination code, and the INT 0 divide overflow handler.
 25851                                  ;
 25852                                  ;	FATAL
 25853                                  ;	FATAL1
 25854                                  ;	reset_environment
 25855                                  ;	DSKSTATCHK
 25856                                  ;	SPOOLINT
 25857                                  ;	STATCHK
 25858                                  ;	CNTCHAND
 25859                                  ;	DIVOV
 25860                                  ;	CHARHARD
 25861                                  ;	HardErr
 25862                                  ;
 25863                                  ;	Revision history:
 25864                                  ;
 25865                                  ;	    AN000	version 4.0   Jan 1988
 25866                                  ;	    A002	PTM    -- dir >lpt3 hangs
 25867                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 25868                                  ;
 25869                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 25870                                  ;	      flags register. In order to return to user normally DOS used to
 25871                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 25872                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 25873                                  ;
 25874                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 25875                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 25876                                  ;	      charhard.
 25877                                  
 25878                                  
 25879                                  	; MSDOS 6.0
 25880                                  ;		public	LowInt23Addr		
 25881                                  ;LowInt23Addr	LABEL	DWORD
 25882                                  ;	DW	offset DOSDATA:LowInt23, 0
 25883                                  ;
 25884                                  ;		public	LowInt24Addr
 25885                                  ;LowInt24Addr	LABEL	DWORD
 25886                                  ;	DW	offset DOSDATA:LowInt24, 0
 25887                                  ;
 25888                                  ;		public	LowInt28Addr
 25889                                  ;LowInt28Addr	LABEL	DWORD
 25890                                  ;	DW	offset DOSDATA:LowInt28, 0
 25891                                  
 25892                                  ;Break	<Checks for ^C in CON I/O>
 25893                                  
 25894                                  ;---------------------------------------------------------------------------
 25895                                  ;
 25896                                  ; Procedure Name : DSKSTATCHK
 25897                                  ;
 25898                                  ; Check for ^C if only one level in
 25899                                  ;
 25900                                  ;---------------------------------------------------------------------------
 25901                                  
 25902                                          ;procedure   DSKSTATCHK,NEAR ; Check for ^C if only one level in
 25903                                  
 25904                                  DSKSTATCHK:        
 25905                                  	;CMP	BYTE [INDOS],1
 25906 00005656 36803E[CF02]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 25907                                  	;retnz			; Do NOTHING
 25908 0000565C 7535                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 25909                                  
 25910 0000565E 51                      	PUSH    CX
 25911 0000565F 06                              PUSH    ES
 25912 00005660 53                              PUSH    BX
 25913 00005661 1E                              PUSH    DS
 25914 00005662 56                              PUSH    SI
 25915                                          
 25916                                  	;PUSH	CS
 25917                                          ;POP	ES
 25918                                          ;PUSH	CS
 25919                                          ;POP	DS
 25920                                  
 25921 00005663 8CD3                    	MOV	BX, SS		; SS is DOSDATA. ES:BX must be set up
 25922 00005665 8EC3                    	MOV	ES, BX		; for deviocall2
 25923 00005667 8EDB                    	MOV	DS, BX
 25924                                  
 25925                                  	; 09/09/2018
 25926 00005669 C606[3C03]05                    MOV     BYTE [DSKSTCOM],DEVRDND
 25927 0000566E C606[3A03]0E                    MOV     BYTE [DSKSTCALL],DRDNDHL
 25928 00005673 C706[3D03]0000          	mov	word [DSKSTST],0
 25929                                  
 25930 00005679 BB[3A03]                        MOV     BX,DSKSTCALL
 25931 0000567C C536[3200]                      LDS     SI,[BCON]
 25932 00005680 E878F8                          CALL	DEVIOCALL2
 25933                                   	; 15/03/2018
 25934                                  	;test	word [ss:DSKSTST],200h
 25935 00005683 36F706[3D03]0002                TEST    WORD [SS:DSKSTST],STBUI
 25936                                  	;JNZ	SHORT ZRET		; No characters available
 25937                                  	; 30/07/2018
 25938 0000568A 7408                    	jz	short _GotCh
 25939                                  ;ZRET:
 25940 0000568C 30C0                            XOR     AL,AL                   ; Set zero
 25941                                  RET36:
 25942 0000568E 5E                              POP     SI
 25943 0000568F 1F                              POP     DS
 25944 00005690 5B                              POP     BX
 25945 00005691 07                              POP     ES
 25946 00005692 59                              POP     CX
 25947                                  _RET37:
 25948 00005693 C3                              RETN
 25949                                  
 25950                                  _GotCh:
 25951 00005694 36A0[4703]                      MOV     AL,[SS:DSKCHRET]	; SS override
 25952                                  
 25953 00005698 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 25954 0000569A 75F2                            JNZ     SHORT RET36
 25955 0000569C 36C606[3C03]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 25956 000056A2 36C606[3A03]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 25957 000056A8 36880E[4703]                    MOV     [SS:DSKCHRET],CL
 25958                                  	; 09/09/2018
 25959 000056AD 36C706[3D03]0000        	MOV	word [SS:DSKSTST],0
 25960 000056B4 36C706[4C03]0100        	MOV	word [SS:DSKSTCNT],1
 25961 000056BB E83DF8                  	CALL	DEVIOCALL2              ; Eat the ^C
 25962 000056BE 5E                              POP     SI
 25963 000056BF 1F                              POP     DS
 25964 000056C0 5B                              POP     BX                      ; Clean stack
 25965 000056C1 07                              POP     ES
 25966 000056C2 59                              POP     CX
 25967 000056C3 E9BF00                          JMP	CNTCHAND ; 10/08/2018
 25968                                  
 25969                                  NOSTOP:
 25970                                  	; MSDOS 6.0
 25971                                  	;CMP	AL,"P"-"@"
 25972                                  	;JNZ	short check_next
 25973                                  				    	; SS override
 25974                                  	;CMP	BYTE [SS:Scan_Flag],0	; ALT_Q ?
 25975                                  	;JZ	short INCHKJ		; no
 25976                                  	;retn
 25977                                  ;check_next:
 25978                                  	;;IF	NOT TOGLPRN
 25979                                  	;CMP	AL,"N"-"@"
 25980                                  	;JZ	short INCHKJ
 25981                                  	;;ENDIF
 25982                                  
 25983                                  	;CMP	AL,"C"-"@"
 25984                                  	;JZ	short INCHKJ
 25985                                  ;check_end:
 25986                                  	;retn
 25987                                  
 25988                                  	; MSDOS 3.3
 25989 000056C6 3C10                            CMP     AL,"P"-"@"  ; cmp al,16	
 25990 000056C8 7405                            JZ	short INCHKJ
 25991                                  
 25992                                  	; 15/04/2018
 25993                                          ;;IF	NOT TOGLPRN
 25994                                          ;CMP	AL,"N"-"@"
 25995                                          ;JZ	SHORT INCHKJ
 25996                                          ;;ENDIF
 25997                                  
 25998 000056CA 3C03                            CMP     AL,"C"-"@"  ; cmp al,3	
 25999 000056CC 7401                            JZ	short INCHKJ
 26000 000056CE C3                      	RETN
 26001                                  
 26002                                  	; 08/09/2018
 26003                                  INCHKJ:	; 10/08/2018
 26004 000056CF E98F00                  	JMP	INCHK
 26005                                  
 26006                                  ;----------------------------------------------------------------------------
 26007                                  ;
 26008                                  ; Procedure Name : SpoolInt
 26009                                  ;
 26010                                  ; SpoolInt - signal processes that the DOS is truly idle.  We are allowed to
 26011                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 26012                                  ; the middle of an INT 24.
 26013                                  ;
 26014                                  ;----------------------------------------------------------------------------
 26015                                  
 26016                                  SPOOLINT:
 26017 000056D2 9C                              PUSHF
 26018                                  	; 15/03/2018
 26019 000056D3 36803E[0403]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 26020 000056D9 7414                            JZ      SHORT POPFRET
 26021 000056DB 36803E[CE02]00                  CMP     BYTE [SS:ERRORMODE],0
 26022 000056E1 750C                            JNZ     SHORT POPFRET		;No spool ints in error mode
 26023                                  
 26024                                  	; 30/07/2018
 26025                                  
 26026                                  	; Note that we are going to allow an external program to issue system 
 26027                                  	; calls at this time.  We MUST preserve IdleInt across this.
 26028                                  
 26029                                  
 26030 000056E3 36FF36[0403]            	PUSH	WORD [SS:IDLEINT]
 26031                                   
 26032                                  	; MSDOS 6.0
 26033                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 26034                                  	;jne	short do_low_int28	; Y: the int must be done from low mem
 26035                                  	;INT	int_spooler		; N: Execute user int 28 handler
 26036                                  	;jmp	short spool_ret_addr
 26037                                  
 26038                                  ;do_low_int28:
 26039                                  	;call	far [SS:LowInt28Addr]
 26040                                  
 26041                                  ;spool_ret_addr:
 26042                                  
 26043 000056E8 CD28                            INT     int_spooler		; INT 28h
 26044                                  
 26045 000056EA 368F06[0403]            	POP	WORD [SS:IDLEINT]
 26046                                  
 26047                                  POPFRET:
 26048 000056EF 9D                              POPF
 26049                                  _RET18:  
 26050 000056F0 C3                      	RETN
 26051                                  
 26052                                  ;----------------------------------------------------------------------------
 26053                                  ;
 26054                                  ; Procedure Name : STATCHK
 26055                                  ;
 26056                                  ;----------------------------------------------------------------------------
 26057                                  
 26058                                  STATCHK:
 26059 000056F1 E862FF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 26060                                                                          ; input redirection
 26061 000056F4 53                              PUSH    BX
 26062 000056F5 31DB                            XOR     BX,BX
 26063 000056F7 E8BAE9                          CALL	GET_IO_SFT
 26064 000056FA 5B                              POP     BX
 26065 000056FB 72F3                            JC      SHORT _RET18
 26066 000056FD B401                            MOV     AH,1
 26067 000056FF E84CF6                          CALL	IOFUNC
 26068 00005702 74CE                            JZ      SHORT SPOOLINT
 26069 00005704 3C13                            CMP     AL,'S'-'@'
 26070 00005706 75BE                            JNZ     SHORT NOSTOP
 26071                                  
 26072                                  	; MSDOS 6.0			; SS override
 26073                                  	;CMP	BYTE [SS:Scan_Flag],0	; AN000; ALT_R ?
 26074                                  	;JNZ	short check_end		; AN000; yes
 26075                                  
 26076 00005708 30E4                            XOR     AH,AH
 26077 0000570A E841F6                          CALL	IOFUNC                  ; Eat Cntrl-S
 26078 0000570D EB4B                            JMP     SHORT PAUSOSTRT
 26079                                  
 26080                                  PRINTOFF:
 26081                                  PRINTON:
 26082 0000570F 36F616[AC02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 26083                                  
 26084                                  	; 30/07/2018 - Retro DOS v3.0
 26085 00005714 53                      	PUSH	BX
 26086 00005715 BB0400                  	MOV	BX,4
 26087 00005718 E899E9                  	call	GET_IO_SFT
 26088 0000571B 5B                      	POP	BX
 26089 0000571C 72D2                    	jc	short _RET18
 26090 0000571E 06                      	PUSH	ES
 26091 0000571F 57                      	PUSH	DI
 26092 00005720 1E                      	PUSH	DS
 26093 00005721 07                      	POP	ES
 26094 00005722 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 26095                                  	;test	word [es:di+5],800h
 26096 00005724 26F745050008            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 26097 0000572A 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 26098                                  
 26099                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 26100                                  					; See if allowed
 26101 0000572C 50                      	push	ax
 26102 0000572D B82611                  	mov	ax, 1126h
 26103 00005730 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26104                                  			; Return: CF set on error, AX = error code
 26105                                  			; STACK unchanged
 26106 00005732 58                      	pop	ax
 26107                                  
 26108 00005733 730F                    	JNC	short NORM_PR 		; Echo is OK
 26109                                  
 26110                                  					; SS override
 26111 00005735 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 26112                                  
 26113                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 26114                                  
 26115 0000573B 50                      	push    ax
 26116 0000573C B82411                  	mov     ax, 1124h
 26117 0000573F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26118                                  			; ES:DI -> SFT, SS = DOS CS
 26119 00005741 58                      	pop     ax
 26120                                  
 26121 00005742 EB10                    	JMP	SHORT RETP6
 26122                                  
 26123                                  NORM_PR:
 26124 00005744 36803E[AC02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 26125 0000574A 7505                    	JNZ	short PRNOPN
 26126 0000574C E82EF7                  	call	DEV_CLOSE_SFT
 26127 0000574F EB03                    	JMP	SHORT RETP6
 26128                                  
 26129                                  PRNOPN:
 26130 00005751 E822F7                  	call	DEV_OPEN_SFT
 26131                                  RETP6:
 26132 00005754 5F                      	POP	DI
 26133 00005755 07                      	POP	ES
 26134                                  
 26135                                  STATCHK_RETN:
 26136 00005756 C3                              RETN
 26137                                  
 26138                                  PAUSOLP:
 26139 00005757 E878FF                          CALL    SPOOLINT
 26140                                  PAUSOSTRT:
 26141 0000575A B401                            MOV     AH,1
 26142 0000575C E8EFF5                          CALL	IOFUNC
 26143 0000575F 74F6                            JZ      SHORT PAUSOLP
 26144                                  INCHK:
 26145 00005761 53                              PUSH    BX
 26146 00005762 31DB                            XOR     BX,BX
 26147 00005764 E84DE9                          CALL	GET_IO_SFT
 26148 00005767 5B                              POP     BX
 26149 00005768 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 26150 0000576A 30E4                            XOR     AH,AH
 26151 0000576C E8DFF5                          CALL	IOFUNC
 26152                                  	; 30/07/2018
 26153                                  	; MSDOS 3.3
 26154 0000576F 3C10                            CMP     AL,'P'-'@' ;cmp al,16
 26155 00005771 750E                            JNZ	SHORT NOPRINT
 26156                                  
 26157 00005773 36803E[8B0F]00          	cmp	byte [SS:SCAN_FLAG],0
 26158 00005779 7494                    	JZ	SHORT PRINTON	
 26159 0000577B 36C606[8B0F]00          	mov	byte [ss:SCAN_FLAG],0
 26160                                  
 26161                                  	; MSDOS 6.0
 26162                                  	;CMP	AL,"P"-"@"
 26163                                  	;;;;;  7/14/86	ALT_Q key fix
 26164                                  	;JZ	short PRINTON		; no! must be CTRL_P
 26165                                  
 26166                                  NOPRINT:	
 26167                                  	;IF	NOT TOGLPRN
 26168                                  	;CMP	AL,"N"-"@"
 26169                                  	;JZ	short PRINTOFF
 26170                                  	;ENDIF
 26171 00005781 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 26172                                  	;retnz
 26173 00005783 75D1                    	jnz	short STATCHK_RETN
 26174                                  
 26175                                  ;	!! NOTE: FALL THROUGH !!
 26176                                  
 26177                                  ;---------------------------------------------------------------------------
 26178                                  ;
 26179                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 26180                                  ;
 26181                                  ; "^C" and CR/LF is printed.  Then the user registers are restored and the
 26182                                  ; user CTRL-C handler is executed.  At this point the top of the stack has 1)
 26183                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 26184                                  ; processing to continue; 2) the original interrupt return address to the code
 26185                                  ; that performed the function call in the first place.	If the user CTRL-C
 26186                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 26187                                  ; (not IRET) with carry CLEAR.	If carry is SET then an terminate system call
 26188                                  ; is simulated.
 26189                                  ;
 26190                                  ;---------------------------------------------------------------------------
 26191                                  
 26192                                  CNTCHAND:
 26193                                  	; MSDOS 6.0			; SS override
 26194                                  					; AN002; from RAWOUT
 26195                                  	;TEST	word [SS:Dos34_Flag],CTRL_BREAK_FLAG  
 26196                                  	;JNZ	short around_deadlock 	; AN002;
 26197                                  
 26198 00005785 B003                            MOV     AL,3			; Display "^C"
 26199 00005787 E88DCC                          CALL	BUFOUT
 26200 0000578A E82DCB                          CALL	CRLF
 26201                                  ;around_deadlock:
 26202 0000578D 16                              PUSH    SS
 26203 0000578E 1F                              POP     DS
 26204 0000578F 803E[0303]00                    CMP     BYTE [CONSWAP],0
 26205 00005794 7403                            JZ      SHORT NOSWAP
 26206 00005796 E847E6                          CALL	SWAPBACK
 26207                                  NOSWAP:
 26208 00005799 FA                      	CLI				; Prepare to play with stack
 26209 0000579A 8E16[2005]              	MOV	SS,[USER_SS]		; User stack now restored
 26210 0000579E 8B26[1E05]              	MOV	SP,[USER_SP]
 26211 000057A2 E840BE                          CALL	restore_world       ; User registers now restored
 26212                                  
 26213                                  	; 30/07/2018 - Retro DOS v3.0 
 26214                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 26215                                          ; 14/03/2018 - Retro DOS v2.0
 26216 000057A5 2EC606[CF02]00          	MOV     BYTE [CS:INDOS],0	
 26217 000057AB 2EC606[CE02]00                  MOV     BYTE [CS:ERRORMODE],0
 26218 000057B1 2E8926[E002]                    MOV     [CS:ConC_Spsave],SP
 26219 000057B6 F8                      	clc	;30/07/2018
 26220 000057B7 CD23                            INT     int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 26221                                  	;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 26222                                  			; Return: return via RETF 2 with CF set
 26223                                  			; DOS will abort program with errorlevel 0
 26224                                  			; else
 26225                                  			; interrupted DOS call continues
 26226                                  
 26227                                  	; 30/07/2018 
 26228                                  
 26229                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 26230                                  
 26231                                  ; The user has returned to us.	The circumstances we allow are:
 26232                                  ;
 26233                                  ;   IRET	We retry the operation by redispatching the system call
 26234                                  ;   CLC/RETF	POP the stack and retry
 26235                                  ;   ... 	Exit the current process with ^C exit
 26236                                  ;
 26237                                  ; User's may RETURN to us and leave interrupts on. 
 26238                                  ; Turn 'em off just to be sure
 26239                                  
 26240 000057B9 FA                      	CLI
 26241                                  
 26242 000057BA 2EA3[E602]              	MOV	[CS:USER_IN_AX],ax	; save the AX
 26243 000057BE 9C                      	PUSHF				; and the flags (maybe new call)
 26244 000057BF 58                      	POP	AX
 26245                                  
 26246                                  ; See if the input stack is identical to the output stack
 26247                                  
 26248 000057C0 2E3B26[E002]                    CMP	SP,[CS:ConC_Spsave]
 26249 000057C5 7507                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 26250                                  
 26251                                  ; Repeat the operation by redispatching the system call.
 26252                                  
 26253                                  ctrlc_repeat:
 26254 000057C7 2EA1[E602]                      MOV     AX,[CS:USER_IN_AX]
 26255                                  	;transfer COMMAND           ; Repeat command otherwise
 26256                                  COMMANDJ:
 26257 000057CB E9DCBC                  	JMP	COMMAND
 26258                                  
 26259                                  ; The current SP is NOT the same as the input SP. Presume that he 
 26260                                  ; RETF'd leaving some flags on the stack and examine the input
 26261                                  
 26262                                  ctrlc_try_new:
 26263 000057CE 83C402                  	ADD	SP,2			; pop those flags
 26264                                  	;test	ax,1
 26265 000057D1 A90100                  	TEST	AX,f_Carry		; did he return with carry?
 26266 000057D4 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 26267                                  
 26268                                  	; Well...  time to abort the user.  
 26269                                  	; Signal a ^C exit and use the EXIT system call..
 26270                                  
 26271                                  ctrlc_abort:
 26272                                          ;MOV	AX,(EXIT SHL 8) + 0
 26273 000057D6 B8004C                          MOV	AX, (EXIT*256) + 0  ; 4C00h
 26274 000057D9 2EC606[F902]FF          	mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 26275                                          ;transfer COMMAND	    ; give up by faking $EXIT
 26276                                  	;JMP	SHORT COMMANDJ
 26277 000057DF E9C8BC                  	JMP	COMMAND
 26278                                  
 26279                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 26280                                  ;----------------------------------------------------------------------------
 26281                                  ;
 26282                                  ; Procedure Name : DIVOV
 26283                                  ;
 26284                                  ; Default handler for division overflow trap
 26285                                  ;
 26286                                  ;----------------------------------------------------------------------------
 26287                                  
 26288                                  DIVOV: 
 26289                                  	; 30/07/2018
 26290                                  	; 07/07/2018 - Retro DOS v3.0
 26291 000057E2 BE[BC12]                	mov	si,DIVMES
 26292 000057E5 2E8B1E[CF12]            	mov	bx,[cs:DivMesLen]
 26293 000057EA 8CC8                    	mov     ax,cs
 26294 000057EC 8ED0                    	mov	ss,ax
 26295 000057EE BC[0607]                	mov     sp,AUXSTACK
 26296 000057F1 E80200                  	call	RealDivOv
 26297                                  	;call	_outmes ; MSDOS 6.0
 26298 000057F4 EBE0                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 26299                                  
 26300                                  ; 30/07/2018
 26301                                  
 26302                                  ; MSDOS 6.0
 26303                                  ;---------------------------------------------------------------------------
 26304                                  ;
 26305                                  ; Procedure Name : OutMes
 26306                                  ;
 26307                                  ;
 26308                                  ; OutMes: perform message output
 26309                                  ; Inputs:   SS:SI points to message
 26310                                  ;	    BX has message length
 26311                                  ; Outputs:  message to BCON
 26312                                  ;
 26313                                  ;Actually, cs:si points to the message now. The segment address is filled in
 26314                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 26315                                  ;NB. This procedure is called only from DIVOV. -SR
 26316                                  ;
 26317                                  ;---------------------------------------------------------------------------
 26318                                  
 26319                                  ;MSDOS 3.3
 26320                                  ;---------------------------------------------------------------------------
 26321                                  ; RealDivOv: perform actual divide overflow stuff.
 26322                                  ; Inputs:   none
 26323                                  ; Outputs:  message to BCON
 26324                                  ;---------------------------------------------------------------------------
 26325                                  
 26326                                  	; 30/07/2018
 26327                                  	; MSDOS 6.0
 26328                                  ;_OUTMES:
 26329                                  	;MSDOS 3.3
 26330                                  RealDivOv:
 26331                                  	 
 26332                                  	; 07/07/2018 - Retro DOS v3.0
 26333                                          ;Context ES
 26334                                          ;push	ss ; 30/07/2018
 26335 000057F6 0E                      	PUSH	CS			; get ES addressability
 26336 000057F7 07                      	POP	ES
 26337                                          ;Context DS
 26338                                  	;push	ss ; 30/07/2018
 26339 000057F8 0E                      	PUSH	CS			; get DS addressability
 26340 000057F9 1F                      	POP	DS
 26341 000057FA C606[3C03]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 26342 000057FF C606[3A03]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 26343 00005804 C706[3D03]0000                  MOV     WORD [DSKSTST],0
 26344                                  	; BX = [DivMesLen] = 19
 26345 0000580A 891E[4C03]                      MOV     [DSKSTCNT],BX
 26346 0000580E BB[3A03]                        MOV     BX,DSKSTCALL
 26347                                          ;MOV     [DSKCHRET+1],SI	; transfer address (need an EQU)
 26348                                  	; 08/09/2018
 26349 00005811 8936[4803]              	mov	[DEVIOBUF_PTR],si
 26350                                  	; MSDOS 6.0
 26351                                  					; CS is used for string, fill in 
 26352                                  					; segment address 
 26353                                  	;MOV	[DskChRet+3],CS
 26354                                  
 26355 00005815 C536[3200]                      LDS     SI,[BCON]
 26356 00005819 E8DFF6                          CALL	DEVIOCALL2
 26357                                  	; 14/03/2018
 26358                                          ;MOV     WORD [CS:DSKCHRET+1],DEVIOBUF
 26359                                  	; 08/09/2018
 26360 0000581C 2EC706[4803][5E03]      	mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 26361 00005823 2EC706[4C03]0100                MOV     WORD [CS:DSKSTCNT],1
 26362 0000582A C3                              RETN
 26363                                  
 26364                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 26365                                  ;---------------------------------------------------------------------------
 26366                                  ;
 26367                                  ; Procedure Name : CHARHARD
 26368                                  ;
 26369                                  ;
 26370                                  ; Character device error handler
 26371                                  ; Same function as HARDERR
 26372                                  ;
 26373                                  ;---------------------------------------------------------------------------
 26374                                  
 26375                                  CHARHARD:
 26376                                  	; 30/07/2018
 26377                                  	; 08/07/2018 - Retro DOS v3.0
 26378                                  
 26379                                  	; MSDOS 6.0
 26380                                  ;		   			; M024 - start
 26381                                  ;	cmp	byte ptr [ERRORMODE], 0	; Q: are we in the middle of int 24
 26382                                  ;	jne	@f			; Y: allow fail
 26383                                  ;
 26384                                  ;	OR	AH, Allowed_RETRY	; assume ctrl p
 26385                                  ;
 26386                                  ;	test	byte ptr [PFLAG], -1	; Q: has ctrl p been pressed
 26387                                  ;	jnz	ctrlp			; Y: 
 26388                                  ;@@:					; M024 - end
 26389                                  
 26390                                  ; Character device error handler
 26391                                  ; Same function as HARDERR
 26392                                  
 26393                                  	;or	ah,38h
 26394 0000582B 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 26395                                  ;ctrlp:			; SS override for Allowed and EXITHOLD
 26396 0000582E 368826[F702]            	mov	[SS:ALLOWED],ah
 26397                                  
 26398                                  	; 15/03/2018
 26399 00005833 368C06[1C05]                    MOV     [SS:EXITHOLD+2],ES
 26400 00005838 36892E[1A05]                    MOV     [SS:EXITHOLD],BP
 26401 0000583D 56                              PUSH    SI
 26402                                  	;and	di,0FFh
 26403 0000583E 81E7FF00                        AND     DI,STECODE
 26404 00005842 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 26405 00005844 E86400                          CALL    FATALC
 26406 00005847 5E                              POP     SI
 26407                                  	;return
 26408 00005848 C3                              RETN
 26409                                  
 26410                                  ;---------------------------------------------------------------------------
 26411                                  ;
 26412                                  ; Procedure Name : HardErr
 26413                                  ;
 26414                                  ; Hard disk error handler. Entry conditions:
 26415                                  ;	DS:BX = Original disk transfer address
 26416                                  ;	DX = Original logical sector number
 26417                                  ;	CX = Number of sectors to go (first one gave the error)
 26418                                  ;	AX = Hardware error code
 26419                                  ;	DI = Original sector transfer count	
 26420                                  ;	ES:BP = Base of drive parameters
 26421                                  ;	[READOP] = 0 for read, 1 for write
 26422                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 26423                                  ; Output:
 26424                                  ;	[FAILERR] will be set if user responded FAIL
 26425                                  ;
 26426                                  ;--------------------------------------------------------------------------
 26427                                  
 26428                                  HARDERR:
 26429                                  	; 30/07/2018
 26430                                  	; 08/07/2018 - Retro DOS v3.0
 26431 00005849 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 26432                                          ;and	di,0FFh
 26433 0000584A 81E7FF00                	AND     DI,STECODE              ; And off status bits
 26434                                          ;CMP	DI,WRECODE		; Write Protect Error?
 26435                                  	;cmp	di,0
 26436 0000584E 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 26437 00005851 750A                            JNZ     short NOSETWRPERR
 26438 00005853 50                              PUSH    AX
 26439                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26440                                          ;MOV	AL,[ES:BP+0]
 26441 00005854 268A4600                	mov	al,[ES:BP]
 26442                                          	; 15/03/2018
 26443 00005858 36A2[D002]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 26444 0000585C 58                              POP     AX
 26445                                  NOSETWRPERR:
 26446 0000585D 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 26447 0000585F 01C2                            ADD     DX,AX                   ; First sector number to retry
 26448 00005861 52                              PUSH    DX
 26449                                  	; 08/07/2018
 26450                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 26451 00005862 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 26452 00005866 5A                              POP     DX
 26453 00005867 01C3                            ADD     BX,AX                   ; First address for retry
 26454 00005869 30E4                            XOR     AH,AH                   ; Flag disk section in error
 26455                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 26456 0000586B 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 26457 0000586F 721A                            JB      SHORT ERRINT
 26458 00005871 FEC4                            INC     AH                      ; Flag for FAT
 26459                                          ;CMP	DX,[ES:BP+10H] 		; In FAT?
 26460 00005873 263B5610                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]   
 26461 00005877 7308                    	JAE	short TESTDIR 		; No
 26462                                  		 ; Err in FAT must force recomp of freespace
 26463                                  	;mov	word[ES:BP+1Eh],-1
 26464 00005879 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 26465 0000587F EB0A                    	JMP	SHORT ERRINT
 26466                                  TESTDIR:
 26467 00005881 FEC4                            INC     AH
 26468                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 26469 00005883 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 26470 00005887 7202                            JB      SHORT ERRINT
 26471 00005889 FEC4                            INC     AH                      ; Must be in data area
 26472                                  ERRINT:
 26473 0000588B D0E4                            SHL     AH,1                    ; Make room for read/write bit
 26474 0000588D 360A26[1005]                    OR      AH,[SS:READOP] ; 15/03/2018
 26475                                  
 26476                                  	; 15/08/2018
 26477                                  					; SS override for allowed and EXITHOLD
 26478 00005892 360A26[F702]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 26479                                  
 26480                                          ;entry   FATAL
 26481                                  FATAL:
 26482                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26483                                          ;MOV	AL,[ES:BP+0]		; Get drive number
 26484 00005897 268A4600                	MOV	AL,[ES:BP]        
 26485                                  
 26486                                  	;entry   FATAL1
 26487                                  FATAL1:  
 26488                                  	; 15/03/2018      
 26489 0000589B 368C06[1C05]            	MOV     [SS:EXITHOLD+2],ES
 26490 000058A0 36892E[1A05]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 26491                                  	;LES	SI,[ES:BP+12H]
 26492 000058A5 26C47612                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 26493 000058A9 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 26494                                  
 26495                                  	; DI has the INT-24-style extended error. We now map the error code 
 26496                                  	; for this into the normalized get extended error set by using the 
 26497                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 26498                                  	; the device returned codes and leave all others beyond the look up 
 26499                                  	; table alone.
 26500                                  
 26501                                  	; 08/07/2018 - Retro DOS v3.0
 26502                                  FATALC:
 26503 000058AB E86701                  	call	SET_I24_EXTENDED_ERROR
 26504                                  	;cmp	di,0Ch
 26505 000058AE 83FF0C                  	CMP	DI,error_I24_gen_failure
 26506 000058B1 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 26507 000058B3 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 26508                                  					;  Only come via GetExtendedError
 26509                                  ;**
 26510                                  ;
 26511                                  ; Entry point used by REDIRector on Network I 24 errors.
 26512                                  ;
 26513                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 26514                                  ;
 26515                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 26516                                  ;     EXITHOLD set for restore of ES:BP.
 26517                                  ;
 26518                                  	;entry	NET_I24_ENTRY
 26519                                  NET_I24_ENTRY:
 26520                                  GOT_RIGHT_CODE:
 26521 000058B6 36803E[CE02]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 26522 000058BC 7404                            JZ	SHORT NoSetFail
 26523 000058BE B003                    	MOV	AL,3
 26524 000058C0 EB51                    	JMP	short FailRet
 26525                                  NoSetFail:
 26526 000058C2 368926[2205]                    MOV     [SS:CONTSTK],SP		; SS override
 26527 000058C7 16                              PUSH	SS
 26528 000058C8 07                              POP	ES
 26529                                      
 26530                                  	; Wango!!! We may need to free some user state info... In 
 26531                                  	; particular, we may have locked down a JFN for a user and he may 
 26532                                  	; NEVER return to us. Thus,we need to free it here and then 
 26533                                  	; reallocate it when we come back.
 26534                                  
 26535 000058C9 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26536 000058CF 740C                    	JZ	short _NoFree
 26537 000058D1 1E                      	push	ds
 26538 000058D2 56                      	push	si
 26539 000058D3 36C536[4605]            	LDS	SI,[SS:PJFN]
 26540 000058D8 C604FF                  	MOV	BYTE [SI],0FFH
 26541 000058DB 5E                      	pop	si
 26542 000058DC 1F                      	pop	ds
 26543                                  
 26544                                  _NoFree:
 26545 000058DD FA                      	CLI
 26546                                  					; Prepare to play with stack
 26547 000058DE 36FE06[CE02]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 26548 000058E3 36FE0E[CF02]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 26549 000058E8 368E16[2005]                    MOV     SS,[SS:USER_SS]
 26550 000058ED 268B26[1E05]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 26551                                  	;int	24h	
 26552 000058F2 CD24                            INT     int_fatal_abort         ; Fatal error interrupt vector, must preserve ES
 26553 000058F4 268926[1E05]                    MOV     [ES:USER_SP],SP         ; restore our stack
 26554 000058F9 268C16[2005]                    MOV     [ES:USER_SS],SS
 26555 000058FE 8CC5                            MOV     BP,ES
 26556 00005900 8ED5                            MOV     SS,BP
 26557 00005902 368B26[2205]                    MOV     SP,[SS:CONTSTK]
 26558 00005907 36FE06[CF02]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 26559 0000590C 36C606[CE02]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 26560 00005912 FB                              STI
 26561                                  FailRet:
 26562 00005913 36C42E[1A05]                    LES     BP,[SS:EXITHOLD]
 26563                                  	
 26564                                  	; 08/07/2018
 26565                                  
 26566                                  	; Triage the user's reply.
 26567                                  
 26568 00005918 3C01                    	CMP	AL,1
 26569 0000591A 7235                    	JB	short CheckIgnore	; 0 => ignore
 26570 0000591C 743D                    	JZ	short CheckRetry	; 1 => retry
 26571 0000591E 3C03                    	CMP	AL,3			; 3 => fail
 26572 00005920 7543                    	JNZ	short DoAbort 		; 2, invalid => abort
 26573                                  
 26574                                  	; The reply was fail.  See if we are allowed to fail.
 26575                                  
 26576                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 26577                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 26578                                  	;test	byte [ss:ALLOWED],8
 26579 00005922 36F606[F702]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 26580 00005928 743B                    	jz	short DoAbort	; No, do abort
 26581                                  DoFail:
 26582 0000592A B003                    	MOV	AL,3		; just in case...
 26583                                  				; AN000;EO. I24 error disabled
 26584                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 26585                                  	;test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 26586                                  	;jnz	short Cleanup 		; AN000;EO. no
 26587                                  	
 26588 0000592C 36FE06[F602]            	inc	byte [SS:FAILERR]	; Tell everybody
 26589                                  
 26590                                  CleanUp:
 26591 00005931 36C606[D002]FF          	MOV	byte [SS:WPERR],-1
 26592 00005937 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26593                                  	;jnz	short CleanUp2
 26594                                  	;retn
 26595 0000593D 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 26596                                  ;CleanUp2:
 26597 0000593F 1E                      	push	ds
 26598 00005940 56                      	push	si
 26599 00005941 50                      	push	ax
 26600 00005942 36A1[4205]              	MOV	AX,[ss:SFN]
 26601 00005946 36C536[4605]            	LDS	SI,[ss:PJFN]
 26602 0000594B 8804                    	MOV	[SI],AL
 26603 0000594D 58                      	pop	ax
 26604 0000594E 5E                      	pop	si
 26605 0000594F 1F                      	pop	ds
 26606                                  Cleanup_retn:
 26607 00005950 C3                      	retn
 26608                                  
 26609                                  	; The reply was IGNORE. See if we are allowed to ignore.
 26610                                  
 26611                                  CheckIgnore:
 26612                                  	;test	byte [ss:ALLOWED],20h
 26613 00005951 36F606[F702]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 26614 00005957 74D1                    	jz	short DoFail			 ; No, do fail
 26615 00005959 EBD6                    	jmp	short CleanUp
 26616                                  
 26617                                  	; The reply was RETRY. See if we are allowed to retry.
 26618                                  
 26619                                  CheckRetry:
 26620                                  	;test	byte [ss:ALLOWED],10h
 26621 0000595B 36F606[F702]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 26622 00005961 74C7                    	jz	short DoFail			; No, do fail
 26623 00005963 EBCC                    	JMP	short CleanUp
 26624                                  
 26625                                  	; The reply was ABORT.
 26626                                  
 26627                                  DoAbort:
 26628 00005965 16                      	push	ss
 26629 00005966 1F                      	pop	ds
 26630                                  
 26631 00005967 803E[0303]00            	CMP	byte [CONSWAP],0
 26632 0000596C 7403                    	JZ	short NOSWAP2
 26633 0000596E E86FE4                  	call	SWAPBACK
 26634                                  NOSWAP2:
 26635                                  	; See if we are to truly abort. If we are in the process of aborting, 
 26636                                  	; turn this abort into a fail.
 26637                                  
 26638                                  	;test	byte [fAborting],0FFh
 26639                                  	;jnz	short DoFail
 26640                                  
 26641 00005971 803E[0503]00            	cmp	byte [fAborting],0
 26642 00005976 75B2                    	JNZ	short DoFail
 26643                                  
 26644                                  	; Set return code
 26645                                  
 26646 00005978 C606[1705]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR
 26647 0000597D 30C0                    	XOR	AL,AL
 26648                                  
 26649                                  	; we are truly aborting the process. Go restore information from 
 26650                                  	; the PDB as necessary.
 26651                                  
 26652 0000597F E93B0B                  	jmp	exit_inner
 26653                                  
 26654                                  ;**
 26655                                  ;
 26656                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 26657                                  ; different, then an old-style return is performed. If they are the same,
 26658                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 26659                                  ; the source of the terminate addresses.
 26660                                  ;
 26661                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 26662                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 26663                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 26664                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 26665                                  ; flag that will indicate that if any abort code is seen, we just continue the
 26666                                  ; operation. In essence, we dis-allow the abort response.
 26667                                  ;
 26668                                  ; output:   none.
 26669                                  ;
 26670                                  	;entry	reset_environment
 26671                                  	
 26672                                  reset_environment:
 26673                                  	; 30/07/2018 - Retro DOS v3.0
 26674                                  	; IBMDOS.COM (MSDOS3.3) - Offset 588Ah 
 26675                                  
 26676                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 26677                                  
 26678 00005982 1E                      	PUSH	DS			; save PDB of process
 26679                                  
 26680                                  	; There are no critical sections in force. Although we may enter 
 26681                                  	; here with critical sections locked down, they are no longer 
 26682                                  	; relevant. We may safely free all allocated resources.
 26683                                  
 26684 00005983 B482                    	MOV	AH,82h
 26685                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 26686                                  	;int	2Ah 	
 26687 00005985 CD2A                    	INT	int_IBM
 26688                                  
 26689                                  					; SS override
 26690 00005987 36C606[0503]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 26691                                  
 26692                                  					; DOS 4.00 doesn't need it
 26693                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 26694                                  					; Allow REDIR to clear some stuff
 26695                                  					; On process exit.
 26696 0000598D B82211                  	mov     ax, 1122h
 26697 00005990 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 26698                                  			; SS = DOS CS
 26699                                  	;mov	al,22h	
 26700 00005992 B022                    	MOV	AL,int_terminate
 26701 00005994 E8C9C2                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 26702                                  
 26703 00005997 59                      	POP	CX			; get ThisPDB
 26704 00005998 06                      	push	es
 26705 00005999 53                      	push	bx			; save return address
 26706                                  
 26707 0000599A 368B1E[DE02]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 26708 0000599F 8EDB                    	MOV	DS,BX
 26709 000059A1 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 26710                                  
 26711                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 26712                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 26713                                  	; is not Exit_keep_process
 26714                                  	
 26715 000059A4 39D8                    	CMP	AX,BX
 26716 000059A6 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 26717 000059A8 39CB                    	CMP	BX,CX
 26718 000059AA 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 26719 000059AC 50                      	PUSH	AX			; save parent
 26720                                  
 26721                                  					; SS override
 26722                                  	;cmp	byte [SS:EXIT_TYPE],3
 26723 000059AD 36803E[1705]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 26724 000059B3 7406                    	JZ	short reset_to_parent 	; keeping this process
 26725                                  
 26726                                  	; We are truly removing a process. Free all allocation blocks 
 26727                                  	; belonging to this PDB
 26728                                  
 26729                                  	;invoke	arena_free_process
 26730 000059B5 E83C0B                  	call	arena_free_process
 26731                                  
 26732                                  	; Kill off remainder of this process. Close file handles and signal 
 26733                                  	; to relevant network folks that this process is dead. Remember that 
 26734                                  	; CurrentPDB is STILL the current process!
 26735                                  
 26736                                  	;invoke	DOS_ABORT
 26737 000059B8 E890E0                  	call	DOS_ABORT
 26738                                  
 26739                                  reset_to_parent:
 26740                                  					; SS override
 26741 000059BB 368F06[DE02]            	POP	word [SS:CurrentPDB]	; set up process as parent
 26742                                  
 26743                                  reset_return:				; come here for normal return
 26744                                  	;Context DS			; DS is used to refer to DOSDATA  
 26745 000059C0 16                      	push	ss
 26746 000059C1 1F                      	pop	ds	
 26747                                  
 26748 000059C2 B0FF                    	MOV	AL,-1
 26749                                  
 26750                                  	; make sure that everything is clean In this case ignore any errors, 
 26751                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 26752                                  
 26753                                  	;EnterCrit critDisk
 26754 000059C4 E89EC6                  	call	EcritDisk
 26755                                  	;invoke	FLUSHBUF
 26756 000059C7 E86405                  	call	FLUSHBUF
 26757                                  	;LeaveCrit critDisk
 26758 000059CA E8A0C6                  	call	LcritDisk
 26759                                  
 26760                                  	; Decrement open ref. count if we had done a virtual open earlier.
 26761                                  
 26762 000059CD E8C3F8                  	call	CHECK_VIRT_OPEN
 26763 000059D0 FA                      	CLI
 26764 000059D1 C606[CF02]00            	MOV	BYTE [INDOS],0		; Go to known state
 26765 000059D6 C606[D002]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 26766 000059DB C606[0503]00            	MOV	byte [fAborting],0	; let aborts occur
 26767 000059E0 8F06[1A05]              	POP	WORD [EXITHOLD]
 26768 000059E4 8F06[1C05]              	POP	WORD [EXITHOLD+2]
 26769                                  
 26770                                  	; Snake into multitasking... Get stack from CurrentPDB person
 26771                                  
 26772 000059E8 8E1E[DE02]              	MOV	DS,[CurrentPDB]
 26773 000059EC 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 26774 000059F0 8B262E00                	MOV	SP,[PDB.USER_STACK]
 26775                                  
 26776 000059F4 E8EEBB                  	call	restore_world
 26777                                  
 26778                                  	; MSDOS 6.0
 26779                                  	;push	ax			; set up ds, but save ds in TEMPSEG 
 26780                                  	;mov	ax, ds			; and not on stack.
 26781                                  	;getdseg <ds>			; ds -> dosdata
 26782                                  	;mov	TempSeg, ax
 26783                                  	;pop	ax
 26784                                  					; set up ds to DOSDATA
 26785 000059F7 2EA3[1E05]              	MOV	[CS:USER_SP],AX
 26786                                  
 26787 000059FB 58                      	POP	AX			; suck off CS:IP of interrupt...
 26788 000059FC 58                      	POP	AX
 26789 000059FD 58                      	POP	AX
 26790                                  
 26791                                  ; M011 : BEGIN
 26792                                  
 26793                                  	; MSDOS 3.3
 26794                                  ;	MOV	AX,0F202h	; STI
 26795                                  
 26796                                  	; MSDOS 6.0
 26797 000059FE 9F                      	LAHF
 26798 000059FF 86E0                    	XCHG	AH, AL
 26799 00005A01 2402                    	AND	AL, 02
 26800 00005A03 B4F2                    	MOV	AH, 0F2h
 26801                                  
 26802                                  ; M011 : END
 26803                                  
 26804                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26805 00005A05 50                      	PUSH	AX
 26806                                   
 26807 00005A06 2EFF36[1C05]            	PUSH	word [CS:EXITHOLD+2]
 26808 00005A0B 2EFF36[1A05]            	PUSH	word [CS:EXITHOLD]
 26809                                  
 26810 00005A10 2EA1[1E05]              	MOV	AX,[CS:USER_SP]
 26811                                  
 26812                                  	; MSDOS 6.0
 26813                                  	;mov	ds,TempSeg	; restore ds
 26814                                  
 26815 00005A14 CF                      	IRET			; Long return back to user terminate address
 26816                                  
 26817                                  ;---------------------------------------------------------------------------
 26818                                  ;
 26819                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 26820                                  ;
 26821                                  ; This routine handles extended error codes.
 26822                                  ; Input : DI = error code from device
 26823                                  ; Output: All EXTERR fields are set
 26824                                  ;
 26825                                  ;--------------------------------------------------------------------------
 26826                                  
 26827                                  SET_I24_EXTENDED_ERROR:
 26828 00005A15 50                      	PUSH	AX
 26829                                  					; ErrMap24End is in DOSDATA
 26830 00005A16 B8[030E]                	MOV	AX,ErrMap24End
 26831 00005A19 2D[F30D]                	SUB	AX,ErrMap24
 26832                                  					; Change to dosdata to access 
 26833                                  					; ErrMap24 and EXTERR -SR
 26834                                  	; MSDOS 6.0
 26835                                  	;push	ds
 26836                                  	;getdseg <ds>			; ds ->dosdata
 26837                                  
 26838                                  	; AX is the index of the first unavailable error. Do not translate 
 26839                                  	; if greater or equal to AX.
 26840                                  
 26841 00005A1C 39C7                    	CMP	DI,AX
 26842 00005A1E 89F8                    	MOV	AX,DI
 26843 00005A20 7307                    	JAE	short NoTrans
 26844                                  
 26845 00005A22 2E8A85[F30D]            	MOV	AL,[CS:DI+ErrMap24]
 26846 00005A27 30E4                    	XOR	AH,AH
 26847                                  NoTrans:
 26848 00005A29 2EA3[D202]              	MOV	[CS:EXTERR],AX
 26849                                  	;pop	ds
 26850                                  	;assume	ds:nothing
 26851 00005A2D 58                      	POP	AX
 26852                                  
 26853                                  	; Now Extended error is set correctly. Translate it to get correct 
 26854                                  	; error locus class and recommended action.
 26855                                  
 26856 00005A2E 56                      	PUSH	SI
 26857                                  					; ERR_TABLE_24 is in DOSCODE 
 26858 00005A2F BE[A30D]                	MOV	SI,ERR_TABLE_24
 26859 00005A32 E80BBD                  	call	CAL_LK			; Set other extended error fields
 26860 00005A35 5E                      	POP	SI
 26861 00005A36 C3                      	retn
 26862                                  
 26863                                  ;============================================================================
 26864                                  ; FAT.ASM, MSDOS 6.0, 1991
 26865                                  ;============================================================================
 26866                                  ; 30/07/2018 - Retro DOS v3.0
 26867                                  
 26868                                  ;	TITLE	FAT - FAT maintenance routines
 26869                                  ;	NAME	FAT
 26870                                  
 26871                                  ;**	FAT.ASM
 26872                                  ;
 26873                                  ;	Low level local device routines for performing disk change sequence,
 26874                                  ;	setting cluster validity, and manipulating the FAT
 26875                                  ;
 26876                                  ;	IsEof
 26877                                  ;	UNPACK
 26878                                  ;	PACK
 26879                                  ;	MAPCLUSTER
 26880                                  ;	FATREAD_SFT
 26881                                  ;	FATREAD_CDS
 26882                                  ;	FAT_operation
 26883                                  ;
 26884                                  ;	Revision history:
 26885                                  ;
 26886                                  ;	  AN000  version Jan. 1988
 26887                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 26888                                  ;
 26889                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 26890                                  ;	       from CL0FATENTRY rather than disk.
 26891                                  ;
 26892                                  
 26893                                  ;Break <IsEOF - check the quantity in BX for EOF>
 26894                                  ;----------------------------------------------------------------------------
 26895                                  ;
 26896                                  ; Procedure Name : IsEOF
 26897                                  ;
 26898                                  ; IsEOF - check the fat value in BX for eof.
 26899                                  ;
 26900                                  ;   Inputs:	ES:BP point to DPB
 26901                                  ;		BX has fat value
 26902                                  ;   Outputs:	JAE eof
 26903                                  ;   Registers modified: none
 26904                                  ;
 26905                                  ;---------------------------------------------------------------------------
 26906                                  
 26907                                  IsEOF:
 26908                                  	;cmp	word [es:bp+0Dh],0FF6h
 26909 00005A37 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 26910 00005A3D 730B                    	JAE	short EOF16			; yes, check for eof there
 26911                                  
 26912                                  ;J.K. 8/27/86
 26913                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 26914                                  ;of any media that has "F0"(Other) as a MediaByte.
 26915                                  ;Hopely, this does not create any side effect for those who may use any value
 26916                                  ;other than "FF8-FFF" as an EOF for their own file.
 26917                                  
 26918 00005A3F 81FBF00F                	cmp	bx,0FF0h
 26919 00005A43 7404                    	je	short IsEOF_other
 26920                                  
 26921 00005A45 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 26922                                  IsEOF_other:
 26923 00005A49 C3                      	retn
 26924                                  EOF16:
 26925 00005A4A 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 26926 00005A4D C3                      	retn
 26927                                  
 26928                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 26929                                  ;---------------------------------------------------------------------------
 26930                                  ;
 26931                                  ; Procedur Name : UNPACK
 26932                                  ;
 26933                                  ; Inputs:
 26934                                  ;	BX = Cluster number (may be full 16-bit quantity)
 26935                                  ;	ES:BP = Base of drive parameters
 26936                                  ; Outputs:
 26937                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 26938                                  ;	Zero set means DI=0 (free cluster)
 26939                                  ;	Carry set means error (currently user FAILed to I 24)
 26940                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 26941                                  ;
 26942                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 26943                                  ;
 26944                                  ;----------------------------------------------------------------------------
 26945                                  
 26946                                  UNPACK:
 26947                                  	; MSDOS 6.0			; M014 - Start
 26948                                  	;or	bx, bx			; Q: are we unpacking cluster 0
 26949                                  	;jnz	short up_cont		; N: proceed with normal unpack
 26950                                  	;mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 26951                                  	;or	di,di 			; return z if di=0
 26952                                  	;retn				; done
 26953                                  ;up_cont:				; M014 - End
 26954                                  	;cmp	bx,[es:bp+0Dh]
 26955 00005A4E 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 26956 00005A52 7726                    	JA	short HURTFAT
 26957 00005A54 E8B900                  	CALL	MAPCLUSTER
 26958 00005A57 721E                    	jc	short _DoContext
 26959 00005A59 8B3D                    	MOV	DI,[DI]
 26960 00005A5B 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 26961 00005A5D 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 26962 00005A61 81FEF60F                	CMP	SI,4096-10
 26963 00005A65 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 26964 00005A67 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 26965 00005A69 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 26966                                  
 26967                                  High12:
 26968 00005A6B D1EF                    	SHR	DI,1
 26969 00005A6D D1EF                    	SHR	DI,1
 26970 00005A6F D1EF                    	SHR	DI,1
 26971 00005A71 D1EF                    	SHR	DI,1
 26972                                  Unpack12:
 26973 00005A73 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 26974                                  _DoContext:
 26975 00005A77 16                      	PUSH	SS
 26976 00005A78 1F                      	POP	DS
 26977 00005A79 C3                      	retn
 26978                                  
 26979                                  HURTFAT:
 26980                                  	;mov	word [es:bp+1Eh],0FFFFh
 26981 00005A7A 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 26982 00005A80 50                      	PUSH	AX
 26983 00005A81 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 26984                                  
 26985                                  ;hkn; SS override
 26986 00005A83 36C606[F702]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 26987                                  ;
 26988                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 26989                                  ;
 26990 00005A89 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 26991 00005A8C E808FE                  	call	FATAL
 26992 00005A8F 3C03                    	CMP	AL,3
 26993 00005A91 F8                      	CLC
 26994 00005A92 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 26995 00005A94 F9                      	STC				; User said FAIL
 26996                                  OKU_RET:
 26997 00005A95 58                      	POP	AX
 26998                                  hurtfat_retn:
 26999 00005A96 C3                      	retn
 27000                                  
 27001                                  ;Break	<PACK -- PACK FAT ENTRIES>
 27002                                  ;----------------------------------------------------------------------------
 27003                                  ;
 27004                                  ; Procedure Name : PACK
 27005                                  ;
 27006                                  ; Inputs:
 27007                                  ;	BX = Cluster number
 27008                                  ;	DX = Data
 27009                                  ;	ES:BP = Pointer to drive DPB
 27010                                  ; Outputs:
 27011                                  ;	The data is stored in the FAT at the given cluster.
 27012                                  ;	SI,DX,DI all destroyed
 27013                                  ;	Carry set means error (currently user FAILed to I 24)
 27014                                  ;	No other registers affected
 27015                                  ;
 27016                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 27017                                  ;
 27018                                  ;---------------------------------------------------------------------------
 27019                                  
 27020                                  PACK:
 27021                                  	; MSDOS 6.0			; M014 - start
 27022                                  	;or	bx, bx			; Q: are we packing cluster 0
 27023                                  	;jnz	short p_cont		; N: proceed with normal pack
 27024                                  	;mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 27025                                  	;retn				; done
 27026                                  ;p_cont:				; M014 - end
 27027 00005A97 E87600                  	CALL	MAPCLUSTER
 27028 00005A9A 72DB                    	JC	short _DoContext
 27029 00005A9C 8B35                    	MOV	SI,[DI]
 27030 00005A9E 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 27031 00005AA0 51                      	PUSH	CX			; move data to upper 12 bits
 27032 00005AA1 B104                    	MOV	CL,4
 27033 00005AA3 D3E2                    	SHL	DX,CL
 27034 00005AA5 59                      	POP	CX
 27035 00005AA6 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 27036 00005AA9 EB14                    	JMP	SHORT PACKIN
 27037                                  ALIGNED:
 27038                                  	;cmp	word [es:bp+0Dh],0FF6h
 27039 00005AAB 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 27040 00005AB1 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 27041 00005AB3 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 27042 00005AB7 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 27043 00005ABB EB02                    	JMP	SHORT PACKIN		; MZ go store
 27044                                  Pack16:
 27045 00005ABD 31F6                    	XOR	SI,SI			; MZ no original data
 27046                                  PACKIN:
 27047 00005ABF 09D6                    	OR	SI,DX
 27048 00005AC1 8935                    	MOV	[DI],SI
 27049                                  
 27050                                  ;hkn; SS override
 27051 00005AC3 36C536[7405]            	LDS	SI,[SS:CURBUF]
 27052                                  	; MSDOS 6.0
 27053                                  	;TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27054                                  					;LB. if already dirty		  ;AN000;
 27055                                  	;JNZ	short yesdirty6		;LB.  don't increment dirty count ;AN000;
 27056                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27057                                  	
 27058                                  	;or	byte [si+5],40h
 27059 00005AC8 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27060                                  ;yesdirty6:				;LB.				  ;AN000;
 27061                                  ;hkn; SS override
 27062 00005ACC 36803E[1305]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 27063                                  ;hkn; SS is DOSDATA
 27064 00005AD2 16                      	push	ss
 27065 00005AD3 1F                      	pop	ds
 27066 00005AD4 74C0                    	jz	short hurtfat_retn	; Carry clear
 27067 00005AD6 50                      	PUSH	AX
 27068 00005AD7 53                      	PUSH	BX
 27069 00005AD8 51                      	PUSH	CX
 27070 00005AD9 A1[2805]                	MOV	AX,[CLUSSAVE]
 27071 00005ADC 8E1E[7605]              	MOV	DS,[CURBUF+2]
 27072 00005AE0 83C610                  	ADD	SI,BUFINSIZ  ; add si,16
 27073 00005AE3 8824                    	MOV	[SI],AH
 27074                                  ;hkn; SS is DOSDATA
 27075                                  	;Context DS
 27076 00005AE5 16                      	push	ss
 27077 00005AE6 1F                      	pop	ds	
 27078 00005AE7 50                      	PUSH	AX
 27079                                  	; MSDOS 6.0
 27080                                  	;MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 27081                                  	;MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 27082                                  
 27083 00005AE8 8B16[2A05]              	MOV	DX,[CLUSSEC]
 27084 00005AEC BE0100                  	MOV	SI,1
 27085 00005AEF 30C0                    	XOR	AL,AL
 27086 00005AF1 E89403                  	call	GETBUFFRB
 27087 00005AF4 58                      	POP	AX
 27088 00005AF5 7213                    	JC	short POPP_RET
 27089 00005AF7 C53E[7405]              	LDS	DI,[CURBUF]
 27090                                  	; MSDOS 6.0
 27091                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 27092                                  	;				;LB. if already dirty		  ;AN000;
 27093                                  	;JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27094                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 27095                                  	
 27096                                  	;or	byte [di+5],40h
 27097 00005AFB 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 27098                                  yesdirty7:
 27099 00005AFF 83C710                  	ADD	DI,BUFINSIZ ; add di,16
 27100 00005B02 4F                      	DEC	DI
 27101                                  	;add	di,[es:bp+2]
 27102 00005B03 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 27103 00005B07 8805                    	MOV	[DI],AL
 27104 00005B09 F8                      	CLC
 27105                                  POPP_RET:
 27106 00005B0A 16                      	PUSH	SS
 27107 00005B0B 1F                      	POP	DS
 27108 00005B0C 59                      	POP	CX
 27109 00005B0D 5B                      	POP	BX
 27110 00005B0E 58                      	POP	AX
 27111 00005B0F C3                      	retn
 27112                                  
 27113                                  ; 31/07/2018 - Retro DOS v3.0
 27114                                  
 27115                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 27116                                  ;---------------------------------------------------------------------------
 27117                                  ;
 27118                                  ; Procedure Name : MAPCLUSTER
 27119                                  ;
 27120                                  ; Inputs:
 27121                                  ;	ES:BP Points to DPB
 27122                                  ;	BX Is cluster number
 27123                                  ; Function:
 27124                                  ;	Get a pointer to the cluster
 27125                                  ; Outputs:
 27126                                  ;	DS:DI Points to contents of FAT for given cluster
 27127                                  ;	DS:SI Points to start of buffer
 27128                                  ;	Zero Not set if cluster data is in high 12 bits of word
 27129                                  ;	Zero set if cluster data is in low 12 or 16 bits
 27130                                  ;	Carry set if failed.
 27131                                  ; SI is destroyed.
 27132                                  ;
 27133                                  ;---------------------------------------------------------------------------
 27134                                  
 27135                                  MAPCLUSTER:
 27136                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 27137 00005B10 C606[1305]00            	MOV	BYTE [CLUSSPLIT],0
 27138                                  	;SAVE	<AX,BX,CX,DX>
 27139 00005B15 50                      	push	ax
 27140 00005B16 53                      	push	bx
 27141 00005B17 51                      	push	cx
 27142 00005B18 52                      	push	dx
 27143 00005B19 89D8                    	MOV	AX,BX			; AX = BX
 27144 00005B1B 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 27145 00005B21 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 27146 00005B23 D1E8                    	SHR	AX,1			; AX = BX/2
 27147                                  Map16:	
 27148                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 27149                                  	;XOR	DI,DI			; >32mb fat ;AN000;
 27150                                  	
 27151 00005B25 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 27152                                  	;ADC	DI,DI			; >32mb fat ;DI is zero before op;AN000;
 27153 00005B27 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 27154                                  
 27155                                  ;IF FastDiv
 27156                                  ;
 27157                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 27158                                  ; case and apply a really fast algorithm to get the desired results
 27159                                  ;
 27160                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 27161                                  ; Fast method takes 39+20*4=119
 27162                                  ;
 27163                                  ; This saves a bunch.
 27164                                  ;
 27165 00005B2B 81F90002                	CMP	CX,512			; 4	Is this 512 byte sector?
 27166 00005B2F 750E                    	jne	short _DoDiv		; 4     for no jump
 27167 00005B31 89C2                    	MOV	DX,AX			; 2	get set for remainder
 27168 00005B33 81E2FF01                	AND	DX,512-1		; 4	Form remainder
 27169 00005B37 88E0                    	MOV	AL,AH			; 2     Quotient in formation in AL
 27170                                  	; MDOS 6.0
 27171                                  	;shr	di,1			; 2
 27172                                  	;rcr	al,1			; 2
 27173                                  	; MDOS 3.3
 27174 00005B39 D0E8                    	shr	al,1	
 27175                                  	; MDOS 3.3 (& MSDOS 6.0)
 27176 00005B3B 30E4                    	xor	ah,ah			; 3
 27177 00005B3D EB04                    	jmp	short DivDone		; 16
 27178                                  _DoDiv:
 27179                                  ;ENDIF
 27180                                  	; MSDOS 6.0
 27181                                  	;mov	dx,di			; 2
 27182                                  	; MSDOS 3.3
 27183 00005B3F 31D2                    	xor	dx,dx
 27184                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 27185 00005B41 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 27186                                  ;IF FastDiv
 27187                                  DivDone:
 27188                                  ;ENDIF
 27189 00005B43 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 27190 00005B47 49                      	DEC	CX			; CX is sector size - 1
 27191                                  	;SAVE	<AX,DX,CX>
 27192 00005B48 50                      	push	ax
 27193 00005B49 52                      	push	dx
 27194 00005B4A 51                      	push	cx
 27195 00005B4B 89C2                    	MOV	DX,AX
 27196                                  	; MSDOS 6.0
 27197                                  	;MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 27198 00005B4D 30C0                    	XOR	AL,AL
 27199 00005B4F BE0100                  	MOV	SI,1
 27200                                  	;invoke	GETBUFFRB
 27201 00005B52 E83303                  	call	GETBUFFRB
 27202                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 27203 00005B55 59                      	pop	cx
 27204 00005B56 58                      	pop	ax
 27205 00005B57 5A                      	pop	dx
 27206 00005B58 724B                    	JC	short MAP_POP
 27207 00005B5A C536[7405]              	LDS	SI,[CURBUF]
 27208 00005B5E 8D7C10                  	LEA	DI,[SI+BUFINSIZ]  ; [si+16]
 27209 00005B61 01C7                    	ADD	DI,AX
 27210 00005B63 39C8                    	CMP	AX,CX
 27211 00005B65 752B                    	JNZ	short MAPRET
 27212 00005B67 8A05                    	MOV	AL,[DI]
 27213                                  	;Context DS		 	;hkn; SS is DOSDATA
 27214 00005B69 16                      	push	ss
 27215 00005B6A 1F                      	pop	ds	
 27216 00005B6B FE06[1305]              	INC	BYTE [CLUSSPLIT]
 27217 00005B6F A2[2805]                	MOV	[CLUSSAVE],AL
 27218 00005B72 8916[2A05]              	MOV	[CLUSSEC],DX
 27219                                  	; MSDOS 6.0
 27220                                  	;MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 27221 00005B76 42                      	INC	DX
 27222                                  	;MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 27223 00005B77 30C0                    	XOR	AL,AL
 27224 00005B79 BE0100                  	MOV	SI,1
 27225                                  	;invoke	GETBUFFRB
 27226 00005B7C E80903                  	call	GETBUFFRB
 27227 00005B7F 7224                    	JC	short MAP_POP
 27228 00005B81 C536[7405]              	LDS	SI,[CURBUF]
 27229 00005B85 8D7C10                  	LEA	DI,[SI+BUFINSIZ]
 27230 00005B88 8A05                    	MOV	AL,[DI]
 27231                                  	;Context DS			;hkn; SS is DOSDATA
 27232 00005B8A 16                      	push	ss
 27233 00005B8B 1F                      	pop	ds
 27234 00005B8C A2[2905]                	MOV	[CLUSSAVE+1],AL
 27235                                  
 27236                                  ;hkn; CLUSSAVE is in DOSDATA
 27237 00005B8F BF[2805]                	MOV	DI,CLUSSAVE
 27238                                  MAPRET:
 27239                                  	;RESTORE <DX,CX,BX>
 27240 00005B92 5A                      	pop	dx
 27241 00005B93 59                      	pop	cx
 27242 00005B94 5B                      	pop	bx
 27243 00005B95 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 27244 00005B97 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 27245 00005B9D 7302                    	JAE	short MapSet		; MZ no, set flags
 27246 00005B9F 89D8                    	MOV	AX,BX
 27247                                  MapSet:
 27248 00005BA1 A801                    	TEST	AL,1			; set zero flag if not on boundary
 27249                                  	;RESTORE <AX>
 27250 00005BA3 58                      	pop	ax
 27251 00005BA4 C3                      	retn
 27252                                  
 27253                                  MAP_POP:
 27254                                  	;RESTORE <DX,CX,BX,AX>
 27255 00005BA5 5A                      	pop	dx
 27256 00005BA6 59                      	pop	cx
 27257 00005BA7 5B                      	pop	bx
 27258 00005BA8 58                      	pop	ax
 27259 00005BA9 C3                      	retn
 27260                                  
 27261                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 27262                                  ;----------------------------------------------------------------------------
 27263                                  ;
 27264                                  ; Procedure Name : FATREAD_SFT
 27265                                  ;
 27266                                  ; Inputs:
 27267                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 27268                                  ;		giving a NET SFT will produce system crashing results).
 27269                                  ;	DS DOSDATA
 27270                                  ; Function:
 27271                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 27272                                  ;	if disk changed.
 27273                                  ;	In other respects, same as FATREAD_CDS.
 27274                                  ;	(note ES:DI destroyed!)
 27275                                  ; Outputs:
 27276                                  ;	Carry set if error (currently user FAILed to I 24)
 27277                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 27278                                  ;	as far as invalidating curdir_ID is concerned.
 27279                                  ;	Since getting a true disk changed on this call is a screw up
 27280                                  ;	anyway, that's the way it goes.
 27281                                  ;
 27282                                  ;---------------------------------------------------------------------------
 27283                                  
 27284                                  FATREAD_SFT:
 27285 00005BAA 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 27286                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27287 00005BAE 268A4600                	mov	AL,[ES:BP]
 27288 00005BB2 A2[1105]                	MOV	[THISDRV],AL
 27289 00005BB5 E83CBB                  	call	GOTDPB			;Set THISDPB
 27290 00005BB8 E87A00                  	CALL	FAT_GOT_DPB
 27291                                  fatread_sft_retn:
 27292 00005BBB C3                      	retn
 27293                                  
 27294                                  ;----------------------------------------------------------------------------
 27295                                  ;
 27296                                  ; Procedure Name : FATREAD_CDS
 27297                                  ;
 27298                                  ; Inputs:
 27299                                  ;	DS:DOSDATA
 27300                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 27301                                  ;		giving a NET or NUL CDS will produce system crashing results).
 27302                                  ; Function:
 27303                                  ;	If disk may have been changed, media is determined and buffers are
 27304                                  ;	flagged invalid. If not, no action is taken.
 27305                                  ; Outputs:
 27306                                  ;	ES:BP = Drive parameter block
 27307                                  ;	THISDPB = ES:BP
 27308                                  ;	THISDRV set
 27309                                  ;	Carry set if error (currently user FAILed to I 24)
 27310                                  ; DS preserved , all other registers destroyed
 27311                                  ;
 27312                                  ;---------------------------------------------------------------------------
 27313                                  
 27314                                  FATREAD_CDS:
 27315 00005BBC 06                      	PUSH	ES
 27316 00005BBD 57                      	PUSH	DI
 27317                                  	;les	bp,[es:di+45h]
 27318 00005BBE 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 27319                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27320 00005BC2 268A4600                	mov	AL,[ES:BP]
 27321 00005BC6 A2[1105]                	MOV	[THISDRV],AL
 27322 00005BC9 E828BB                  	call	GOTDPB			;Set THISDPB
 27323 00005BCC E86600                  	CALL	FAT_GOT_DPB
 27324 00005BCF 5F                      	POP	DI			;Get back CDS pointer
 27325 00005BD0 07                      	POP	ES
 27326 00005BD1 72E8                    	jc	short fatread_sft_retn
 27327 00005BD3 7539                    	JNZ	short NO_CHANGE		;Media NOT changed
 27328                                  
 27329                                  ;	Media changed. We now need to find all CDS structures which use this
 27330                                  ;	DPB and invalidate their ID pointers.
 27331                                  
 27332                                  MED_CHANGE:
 27333 00005BD5 31C0                    	XOR	AX,AX
 27334 00005BD7 48                      	DEC	AX			; AX = -1
 27335 00005BD8 1E                      	PUSH	DS
 27336 00005BD9 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 27337 00005BDD 30ED                    	XOR	CH,CH			; CX is number of structures
 27338                                  	;lds	si,[es:di+45h]
 27339 00005BDF 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 27340                                  
 27341                                  ;hkn; SS override
 27342                                  
 27343                                  ;	Find all CDSs with this DevPtr
 27344                                  ;
 27345                                  ;	(ax) = -1
 27346                                  ;	(ds:si) = DevPtr
 27347                                  
 27348 00005BE3 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 27349                                  frcd20: 
 27350                                  	;test	word [es:di+43h],8000h
 27351 00005BE8 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 27352 00005BEE 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 27353                                  
 27354                                  	; MSDOS 3.3
 27355                                  	;push	es
 27356                                  	;push	di
 27357                                  	;les	di,[es:di+45h]
 27358                                  	;;les	di,[ES:DI+curdir.devptr]
 27359                                  	;call	POINTCOMP
 27360                                  	;pop	di
 27361                                  	;pop	es
 27362                                  	;jnz	short frcd25
 27363                                  
 27364                                  	; MSDOS 6.0
 27365 00005BF0 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 27366 00005BF4 7512                    	jne	short frcd25		; no match
 27367 00005BF6 8CDB                    	mov	bx,ds
 27368 00005BF8 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 27369 00005BFC 750A                    	jne	short frcd25		; CDS not for this drive
 27370                                  
 27371                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27372                                  	;test	[es:di+49h],ax
 27373 00005BFE 26854549                	test	[ES:DI+curdir.ID],AX
 27374 00005C02 7404                    	JZ	short frcd25		; If root (0), leave root
 27375                                  	;mov	[es:di+49h],ax
 27376 00005C04 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 27377                                  frcd25:	
 27378                                  	;add	di,81
 27379 00005C08 83C751                  	ADD	DI,curdir.size		; Point to next CDS
 27380 00005C0B E2DB                    	LOOP	frcd20
 27381 00005C0D 1F                      	POP	DS
 27382                                  NO_CHANGE:
 27383 00005C0E C42E[2405]              	LES	BP,[THISDPB]
 27384 00005C12 F8                      	CLC
 27385 00005C13 C3                      	retn
 27386                                  
 27387                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 27388                                  ;----------------------------------------------------------------------------
 27389                                  ;
 27390                                  ; Procedure Name : FAT_operation
 27391                                  ;
 27392                                  ;----------------------------------------------------------------------------
 27393                                  FAT_operation:
 27394                                  	; 31/07/2018 - Retro DOS v3.0
 27395                                  FATERR:
 27396                                  	;mov	word [es:bp+1Eh],-1
 27397 00005C14 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 27398                                  					; Err in FAT must force recomp of freespace
 27399                                  	;and	di,0FFh
 27400 00005C1A 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 27401                                  	;mov	byte [ALLOWED],18h
 27402 00005C1E C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27403                                  	;mov	ah,1Ah
 27404 00005C23 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 27405 00005C25 A0[1105]                	MOV	AL,[THISDRV]		; Tell which drive
 27406 00005C28 E870FC                  	call	FATAL1
 27407 00005C2B C42E[2405]              	LES	BP,[THISDPB]
 27408 00005C2F 3C03                    	CMP	AL,3
 27409 00005C31 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 27410 00005C33 F9                      	STC				; User said FAIL
 27411 00005C34 C3                      	retn
 27412                                  
 27413                                  FAT_GOT_DPB:
 27414                                  	;Context DS			;hkn; SS is DOSDATA
 27415 00005C35 16                      	push	ss			
 27416 00005C36 1F                      	pop	ds
 27417                                  	;mov	al,0Fh
 27418 00005C37 B00F                    	MOV	AL,DMEDHL
 27419                                  	;mov	al,[es:bp+1]
 27420 00005C39 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 27421 00005C3D A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 27422 00005C40 C606[0803]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 27423 00005C45 C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27424                                  	;mov	al,[es:bp+16h]
 27425 00005C4B 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27426 00005C4F A2[1303]                	MOV	[CALLMED],AL
 27427 00005C52 06                      	PUSH	ES
 27428 00005C53 1E                      	PUSH	DS
 27429                                  
 27430                                  ;hkn; DEVCALL is in DOSDATA
 27431 00005C54 BB[0603]                	MOV	BX,DEVCALL
 27432                                  	;lds	si,[es:bp+12h]
 27433 00005C57 26C57612                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 27434 00005C5B 07                      	POP	ES			; ES:BX Points to call header
 27435 00005C5C E89CF2                  	call	DEVIOCALL2
 27436                                  	;Context DS		 	;hkn; SS is DOSDATA
 27437 00005C5F 16                      	push	ss
 27438 00005C60 1F                      	pop	ds
 27439 00005C61 07                      	POP	ES			; Restore ES:BP
 27440 00005C62 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27441                                  	;test	di,8000h
 27442                                  	;jnz	short FATERR
 27443 00005C66 09FF                    	or	di,di
 27444 00005C68 78AA                    	js	short FATERR		; have error
 27445 00005C6A 30E4                    	XOR	AH,AH
 27446                                  	;xchg	ah,[es:bp+17h]
 27447 00005C6C 26866617                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 27448 00005C70 A0[1105]                	MOV	AL,[THISDRV]		; Use physical unit number
 27449                                  ; See if we had changed volume id by creating one on the diskette
 27450 00005C73 3806[070A]              	cmp	[VOLCHNG_FLAG],AL
 27451 00005C77 7508                    	jnz	short CHECK_BYT
 27452 00005C79 C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1
 27453 00005C7E E98800                  	jmp	GOGETBPB		; Need to get device driver to read in
 27454                                  					; new volume label.
 27455                                  CHECK_BYT:
 27456 00005C81 0A26[1403]              	OR	AH,[CALLRBYT]
 27457                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 27458                                  	;JMP	short NEWDSK
 27459 00005C85 785D                    	js	short NEWDSK
 27460                                  
 27461                                  CHECK_ZR:
 27462 00005C87 743D                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 27463 00005C89 F8                      	CLC
 27464 00005C8A C3                      	retn				; If Media not changed (NZ)
 27465                                  
 27466                                  DISK_CHNG_ERR:
 27467 00005C8B 06                      	PUSH	ES
 27468 00005C8C 55                      	PUSH	BP
 27469                                  	;les	bp,[es:bp+12h]
 27470 00005C8D 26C46E12                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 27471                                  	;test	word [es:bp+4],800h
 27472 00005C91 26F746040008            	TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 27473 00005C97 5D                      	POP	BP
 27474 00005C98 07                      	POP	ES
 27475 00005C99 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 27476 00005C9B 1E                      	PUSH	DS			; Save buffer pointer for ignore
 27477 00005C9C 57                      	PUSH	DI
 27478 00005C9D 16                      	push	ss			;hkn; SS is DOSDATA
 27479 00005C9E 1F                      	pop	ds
 27480                                  	;mov	byte [ALLOWED],18h
 27481 00005C9F C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27482 00005CA4 06                      	PUSH	ES
 27483 00005CA5 C43E[1503]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 27484 00005CA9 8C06[D802]              	MOV	[EXTERRPT+2],ES
 27485 00005CAD 07                      	POP	ES
 27486 00005CAE 893E[D602]              	MOV	[EXTERRPT],DI
 27487                                  	;mov	ax,0Fh
 27488 00005CB2 B80F00                  	MOV	AX,error_I24_wrong_disk
 27489 00005CB5 C606[1005]01            	MOV	byte [READOP],1		; Write
 27490                                  	;invoke	HARDERR
 27491 00005CBA E88CFB                  	call	HARDERR
 27492 00005CBD 5F                      	POP	DI			; Get back buffer for ignore
 27493 00005CBE 1F                      	POP	DS
 27494 00005CBF 3C03                    	CMP	AL,3
 27495                                  FAIL_OPJ2:
 27496 00005CC1 7416                    	JZ	short FAIL_OP
 27497 00005CC3 E96FFF                  	JMP	FAT_GOT_DPB		; Retry
 27498                                  
 27499                                  CHKBUFFDIRT:
 27500                                  	; MSDOS 6.0
 27501                                  	;cmp	word [DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 27502                                  	;je	short NEWDSK			; no, skip the check
 27503                                  	;call	GetCurHead			; get pointer to first buffer
 27504                                  
 27505                                  	; MSDOS 3.3
 27506 00005CC6 C53E[3800]              	lds	di,[BUFFHEAD]
 27507                                  nbuffer:
 27508                                  	;cmp	al,[di+4]
 27509 00005CCA 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 27510 00005CCD 750E                    	jne	short lfnxt			; no, go for next buffer
 27511                                  	;test   byte [di+5],40h
 27512 00005CCF F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 27513 00005CD3 7408                    	jz	short lfnxt			; no, go for next buffer
 27514                                  	;Context DS
 27515 00005CD5 16                      	push	ss
 27516 00005CD6 1F                      	pop	ds
 27517 00005CD7 F8                      	clc
 27518 00005CD8 C3                      	retn
 27519                                  
 27520                                  FAIL_OP:					; This label & code is here
 27521                                  	;Context DS				;  for reachability
 27522 00005CD9 16                      	push	ss
 27523 00005CDA 1F                      	pop	ds
 27524 00005CDB F9                      	STC
 27525 00005CDC C3                      	retn
 27526                                  
 27527                                  lfnxt:
 27528                                  	; 15/08/2018
 27529                                  	;mov	di,[di]
 27530                                  	;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 27531                                  	;
 27532 00005CDD C53D                    	lds	di,[di]
 27533                                  	;
 27534                                  	; MSDOS 6.0
 27535                                  	;cmp	[FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 27536                                  	;jne	short nbuffer			; no, check this guy also
 27537                                  	; MSDOS 3.3
 27538 00005CDF 83FFFF                  	cmp	di,-1
 27539 00005CE2 75E6                    	jne	short nbuffer
 27540                                  
 27541                                  ; If no dirty buffers, assume Media changed
 27542                                  NEWDSK:
 27543                                  	;mov	word [es:bp+1Eh],0FFFFh
 27544 00005CE4 26C7461EFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 27545                                  	; MSDOS 6.0				;  recompute
 27546                                  	;call	GetCurHead
 27547                                  	; MSDOS 3.3
 27548 00005CEA E8B500                  	call	SETVISIT
 27549                                  nxbuffer:
 27550                                  	; MSDOS 3.3
 27551 00005CED 804D0520                	or 	byte [di+5],20h
 27552                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27553                                  	;cmp	[di+4],al
 27554 00005CF1 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 27555 00005CF4 750E                    	jne	short lfnxt2
 27556                                  	;test	byte [di+5],40h
 27557 00005CF6 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 27558 00005CFA 758F                    	jnz	short DISK_CHNG_ERR
 27559                                  	;mov	word [di+4],20FFh
 27560 00005CFC C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 27561 00005D01 E8CB00                  	call	SCANPLACE
 27562                                  	; MSDOS 6.0
 27563                                  	;jmp	short skpbuff
 27564                                  ;lfnxt2:
 27565                                  	;;mov	di,[di+BUFFINFO.buf_next]
 27566                                  	;mov	di,[di]
 27567                                  ;skpbuff:
 27568                                  	;cmp	di,[FIRST_BUFF_ADDR]					;hkn;
 27569                                  	;jne	short nxbuffer
 27570                                  
 27571                                  	;CMP	word [SC_CACHE_COUNT],0	;LB.  look ahead buffers ?	;AN001;
 27572                                  	;JZ	short GOGETBPB		;LB.  no			;AN001;
 27573                                  	;CMP	AL,[CURSC_DRIVE]	;LB.  same as changed drive	;AN001;
 27574                                  	;JNZ	short GOGETBPB		;LB.  no			;AN001;
 27575                                  	;MOV	byte [CURSC_DRIVE],-1	;LB.  invalidate look ahead buffers ;AN000;
 27576                                  lfnxt2:
 27577                                  	; MSDOS 3.3
 27578 00005D04 E8B400                  	call	SKIPVISIT
 27579 00005D07 75E4                    	jnz	short nxbuffer
 27580                                  GOGETBPB:
 27581                                  	;lds	di,[es:bp+12h]
 27582 00005D09 26C57E12                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 27583                                  	;test	word [di+4],2000h
 27584 00005D0D F745040020              	TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 27585 00005D12 7510                    	JNZ	short GETFREEBUF
 27586                                  	;context DS	    		;hkn; SS is DOSDATA
 27587 00005D14 16                      	push	ss
 27588 00005D15 1F                      	pop	ds
 27589 00005D16 BB0200                  	MOV	BX,2
 27590 00005D19 E832FD                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 27591                                  FAIL_OPJ:
 27592 00005D1C 72BB                    	JC	short FAIL_OP
 27593 00005D1E C53E[7405]              	LDS	DI,[CURBUF]
 27594 00005D22 EB0E                    	JMP	SHORT GOTGETBUF
 27595                                  
 27596                                  GETFREEBUF:
 27597 00005D24 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 27598 00005D25 55                      	PUSH	BP
 27599                                  	; MSDOS 3.3
 27600 00005D26 36C53E[3800]            	LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 27601                                  	; MSDOS 6.0
 27602                                  	;XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 27603                                  ;hkn; SS override
 27604                                  	;MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 27605                                  	;call	GETCURHEAD		;LB.			  ;AN000;
 27606                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27607 00005D2B E84F02                  	call	BUFWRITE
 27608 00005D2E 5D                      	POP	BP
 27609 00005D2F 07                      	POP	ES
 27610                                  	;JC	short FAIL_OPJ
 27611 00005D30 72A7                    	jc	short FAIL_OP
 27612                                  GOTGETBUF:
 27613                                  	;add	di,16
 27614 00005D32 83C710                  	ADD	DI,BUFINSIZ
 27615                                  
 27616                                  ;hkn; SS override
 27617 00005D35 368C1E[1603]            	MOV	[SS:CALLXAD+2],DS
 27618                                  	;Context DS			;hkn; SS is DOSDATA
 27619 00005D3A 16                      	push	ss
 27620 00005D3B 1F                      	pop	ds
 27621 00005D3C 893E[1403]              	MOV	[CALLXAD],DI
 27622                                  	;mov	al,16h
 27623 00005D40 B016                    	MOV	AL,DBPBHL
 27624                                  	;mov	ah,[es:bp+1]
 27625 00005D42 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 27626 00005D46 A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 27627 00005D49 C606[0803]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 27628 00005D4E C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27629                                  	;mov	al,[es:bp+16h]
 27630 00005D54 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27631 00005D58 A2[1303]                	MOV	[CALLMED],AL
 27632 00005D5B 06                      	PUSH	ES
 27633 00005D5C 1E                      	PUSH	DS
 27634                                  	;push	word [es:bp+14h]
 27635 00005D5D 26FF7614                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 27636                                  	;push	word [es:bp+12h]
 27637 00005D61 26FF7612                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 27638                                  
 27639                                  ;hkn; DEVCALL is in DOSDATA
 27640 00005D65 BB[0603]                	MOV	BX,DEVCALL
 27641 00005D68 5E                      	POP	SI
 27642 00005D69 1F                      	POP	DS			; DS:SI Points to device header
 27643 00005D6A 07                      	POP	ES			; ES:BX Points to call header
 27644                                  	;invoke	DEVIOCALL2
 27645 00005D6B E88DF1                  	call	DEVIOCALL2
 27646 00005D6E 07                      	POP	ES			; Restore ES:BP
 27647                                  	;Context DS
 27648 00005D6F 16                      	push	ss		 	;hkn; SS is DOSDATA
 27649 00005D70 1F                      	pop	ds
 27650 00005D71 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27651                                  	; MSDOS 3.3
 27652                                  	;test	di,8000h
 27653                                  	;jnz	short FATERRJ
 27654                                  	; MSDOS 6.0
 27655 00005D75 09FF                    	or	di,di
 27656 00005D77 7826                    	js	short FATERRJ 		; have error
 27657                                  	;;mov	al,[es:bp+16h]
 27658 00005D79 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27659 00005D7D C536[1803]              	LDS	SI,[CALLBPB]
 27660                                  	;mov	word [es:bp+1Ch],0
 27661 00005D81 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 27662                                  	;invoke	$SETDPB
 27663 00005D87 E8F8BF                  	call	_$SETDPB
 27664                                  
 27665                                  ;hkn; SS override
 27666 00005D8A 36C53E[1403]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 27667                                  	;mov	al,[es:bp+8]
 27668 00005D8F 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 27669                                  
 27670                                  	; MSDOS 6.0
 27671                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL ;>32mb		  ;AN000;
 27672                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb			  ;AC000;
 27673                                  	;MOV	[DI.buf_wrtcntinc-BUFINSIZ],AX ;>32mb Correct buffer info ;AC000;
 27674                                  
 27675                                  	; MSDOS 3.3
 27676                                  	;mov	ah,[es:bp+0Fh]
 27677 00005D93 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 27678                                  	;mov	[DI-8],ax
 27679 00005D97 8945F8                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 27680                                  
 27681                                  	;Context DS			;hkn; SS is DOSDATA
 27682 00005D9A 16                      	push	ss
 27683 00005D9B 1F                      	pop	ds
 27684 00005D9C 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 27685 00005D9E C3                      	retn
 27686                                  
 27687                                  FATERRJ: 
 27688 00005D9F E972FE                  	JMP	FATERR
 27689                                  
 27690                                  
 27691                                  ;============================================================================
 27692                                  ; STDBUF.ASM
 27693                                  ;============================================================================
 27694                                  ; Retro DOS v2.0 - 12/03/2018
 27695                                  
 27696                                  ;
 27697                                  ; Standard buffer management for MSDOS
 27698                                  ;
 27699                                  
 27700                                  ;.xlist
 27701                                  ;.xcref
 27702                                  ;INCLUDE STDSW.ASM
 27703                                  ;.cref
 27704                                  ;.list
 27705                                  
 27706                                  ;TITLE	STDBUF - MSDOS buffer management
 27707                                  ;NAME	STDBUF
 27708                                  
 27709                                  ;INCLUDE BUF.ASM
 27710                                  
 27711                                  ;============================================================================
 27712                                  ; BUF.ASM
 27713                                  ;============================================================================
 27714                                  ; 31/07/2018 - Retro DOS v3.0
 27715                                  ; Retro DOS v2.0 - 12/03/2018
 27716                                  
 27717                                  ;
 27718                                  ; buffer management for MSDOS
 27719                                  ;
 27720                                  
 27721                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 27722                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 27723                                  
 27724                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 27725                                  
 27726                                  SETVISIT:
 27727                                  	; 31/07/2018 - Retro DOS v3.0
 27728                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 27729                                  ; Inputs:
 27730                                  ;       None
 27731                                  ; Function:
 27732                                  ;       Set up a scan of I/O buffers
 27733                                  ; Outputs:
 27734                                  ;       All visit flags = 0
 27735                                  ;               NOTE: This pre-scan is needed because a hard disk error
 27736                                  ;                     may cause a scan to stop in the middle leaving some
 27737                                  ;                     visit flags set, and some not set.
 27738                                  ;       DS:DI Points to [BUFFHEAD]
 27739                                  ; No other registers altered
 27740                                  
 27741 00005DA2 36C53E[3800]                    LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27742 00005DA7 50                      	PUSH    AX
 27743                                          ;;XOR	AX,AX	  ;; MSDOS 2.11
 27744                                  	;mov	al,0DFh
 27745 00005DA8 B0DF                    	mov	al,~buf_visit
 27746                                  SETLOOP:
 27747                                          ;;MOV	[DI+7],AL ;; MSDOS 2.11
 27748                                  	;and	[DI+5],al
 27749 00005DAA 204505                  	AND	[DI+BUFFINFO.buf_flags],AL
 27750 00005DAD C53D                            LDS     DI,[DI]
 27751 00005DAF 83FFFF                          CMP     DI,-1
 27752 00005DB2 75F6                            JNZ     SHORT SETLOOP
 27753 00005DB4 58                              POP     AX ; 09/09/2018
 27754 00005DB5 36C53E[3800]            	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27755                                  SVISIT_RETN:
 27756 00005DBA C3                              RETN
 27757                                  
 27758                                  SKIPVISIT:
 27759                                  	; 31/07/2018 - Retro DOS v3.0
 27760                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 27761                                  
 27762                                  ; Inputs:
 27763                                  ;       DS:DI Points to a buffer
 27764                                  ; Function:
 27765                                  ;       Skip visited buffers
 27766                                  ; Outputs:
 27767                                  ;       DS:DI Points to next unvisited buffer
 27768                                  ;       Zero is set if skip to LAST buffer
 27769                                  ; No other registers altered
 27770                                  
 27771 00005DBB 83FFFF                          CMP     DI,-1
 27772                                          ;retz
 27773 00005DBE 74FA                            JZ	SHORT SVISIT_RETN
 27774                                  
 27775                                  	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 27776                                          ;;;retnz
 27777                                          ;;JNZ	SHORT SVISIT_RETN
 27778                                  
 27779                                  	;test	byte [di+5],20h
 27780 00005DC0 F6450520                	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 27781 00005DC4 7505                    	JNZ	short SKIPLOOP
 27782                                  	
 27783 00005DC6 50                      	push	ax
 27784 00005DC7 0C01                    	or	al,1
 27785 00005DC9 58                      	pop	ax
 27786 00005DCA C3                      	retn	
 27787                                  
 27788                                  SKIPLOOP:
 27789 00005DCB C53D                    	LDS     DI,[DI]
 27790 00005DCD EBEC                            JMP     SHORT SKIPVISIT
 27791                                  
 27792                                  ;============================================================================
 27793                                  ; BUF.ASM, MSDOS 6.0, 1991
 27794                                  ;============================================================================
 27795                                  ; 31/07/2018 - Retro DOS v3.0
 27796                                  
 27797                                  ;	TITLE	BUF - MSDOS buffer management
 27798                                  ;	NAME	BUF
 27799                                  
 27800                                  ;**	BUF.ASM - Low level routines for buffer cache management
 27801                                  ;
 27802                                  ;	GETCURHEAD
 27803                                  ;	ScanPlace
 27804                                  ;	PLACEBUF
 27805                                  ;	PLACEHEAD
 27806                                  ;	PointComp
 27807                                  ;	GETBUFFR
 27808                                  ;	GETBUFFRB
 27809                                  ;	FlushBuf
 27810                                  ;	BufWrite
 27811                                  ;	SET_RQ_SC_PARMS
 27812                                  ;
 27813                                  ;	Revision history:
 27814                                  ;
 27815                                  ;		AN000  version 4.00  Jan. 1988
 27816                                  ;		A004   PTM 3765 -- Disk reset failed
 27817                                  ;		M039 DB 10/17/90 - Disk write optimization
 27818                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 27819                                  
 27820                                  ;Break	<GETCURHEAD -- Get current buffer header>
 27821                                  ;----------------------------------------------------------------------------
 27822                                  ; Procedure Name : GetCurHead
 27823                                  ; Inputs:
 27824                                  ;	 No Inputs
 27825                                  ; Function:
 27826                                  ;	Returns the pointer to the first buffer in Queue
 27827                                  ;	and updates FIRST_BUFF_ADDR
 27828                                  ;       and invalidates LASTBUFFER (recency pointer)
 27829                                  ; Outputs:
 27830                                  ;	DS:DI = pointer to the first buffer in Queue
 27831                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 27832                                  ;       LASTBUFFER = -1
 27833                                  ; No other registers altered
 27834                                  ;----------------------------------------------------------------------------
 27835                                  
 27836                                  ;procedure   GETCURHEAD,NEAR
 27837                                  ;
 27838                                  ;	lds	di, BufferQueue		; Pointer to the first buffer;smr;SS Override
 27839                                  ;	mov	word ptr [LastBuffer],-1; invalidate last buffer;smr;SS Override
 27840                                  ;	mov	[FIRST_BUFF_ADDR],di	;save first buffer addr;smr;SS Override
 27841                                  ;	ret
 27842                                  ;
 27843                                  ;EndProc GETCURHEAD
 27844                                  
 27845                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 27846                                  ;----------------------------------------------------------------------------
 27847                                  ; Procedure Name : ScanPlace
 27848                                  ; Inputs:
 27849                                  ;	Same as PLACEBUF
 27850                                  ; Function:
 27851                                  ;	Save scan location and call PLACEBUF
 27852                                  ; Outputs:
 27853                                  ;	DS:DI Points to saved scan location
 27854                                  ; All registers, except DS:DI, preserved.
 27855                                  ;----------------------------------------------------------------------------
 27856                                  ;M039: Rewritten to preserve registers.
 27857                                  
 27858                                  SCANPLACE:
 27859                                  	; 31/07/2018 - Retro DOS v3.0
 27860                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27861 00005DCF 06                      	push	es
 27862 00005DD0 C435                    	les	si,[di]
 27863                                  	;les	si,[DI+BUFFINFO.buf_link]
 27864 00005DD2 E80600                  	call	PLACEBUF
 27865 00005DD5 06                      	push	es
 27866 00005DD6 1F                      	pop	ds
 27867 00005DD7 89F7                    	mov	di,si
 27868 00005DD9 07                      	pop	es
 27869                                  scanplace_retn:
 27870 00005DDA C3                      	retn	
 27871                                  	
 27872                                  	; MSDOS 6.0
 27873                                  ;ScanPlace:
 27874                                  	;push	[di].buf_next		;Save scan location
 27875                                  	;call	PLACEBUF
 27876                                  	;pop	di
 27877                                  	;retn
 27878                                  
 27879                                  ;----------------------------------------------------------------------------
 27880                                  ; Procedure Name : PlaceBuf
 27881                                  ; Input:
 27882                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 27883                                  ; Function:
 27884                                  ;	Remove buffer from queue and re-insert it in proper place.
 27885                                  ; NO registers altered
 27886                                  ;----------------------------------------------------------------------------
 27887                                  
 27888                                  ;procedure   PLACEBUF,NEAR
 27889                                  
 27890                                  ;PLACEBUF:
 27891                                  	; 31/07/2018 - Retro DOS v3.0
 27892                                  
 27893                                  	; MSDOS 6.0
 27894                                  	;push	AX			;Save only regs we modify	;AN000;
 27895                                  	;push	BX							;AN000;
 27896                                  	;push	SI							;AN000;
 27897                                  	;mov	ax, [di].BUF_NEXT
 27898                                  	;mov	bx, word ptr[BufferQueue]	; bx = offset of head of list;smr;SS Override
 27899                                  	;
 27900                                  	;cmp	ax,bx				;Buf = last?		;AN000;
 27901                                  	;je	nret				;Yes, special case	;AN000;
 27902                                  	;cmp	di,bx				;Buf = first?		;AN000;
 27903                                  	;jne	not_first 			;Yes, special case	;AN000;
 27904                                  	;mov	word ptr [BufferQueue],ax	;smr;SS Override
 27905                                  	;jmp	short nret 			;Continue with repositioning;AN000;
 27906                                  ;not_first:
 27907                                  	;mov	SI,[DI].BUF_PREV		;No, SI = prior Buf	;AN000;
 27908                                  	;mov	[SI].BUF_NEXT,AX		; ax has di->buf_next	;AN000;
 27909                                  	;xchg	si, ax
 27910                                  	;mov	[SI].BUF_PREV,AX		;			;AN000;
 27911                                  	;
 27912                                  	;mov	SI,[BX].BUF_PREV		;SI-> last buffer	;AN000;
 27913                                  	;mov	[SI].BUF_NEXT,DI		;Add Buf to end of list ;AN000;
 27914                                  	;mov	[BX].BUF_PREV,DI					;AN000;
 27915                                  	;mov	[DI].BUF_PREV,SI		;Update link in Buf too	;AN000;
 27916                                  	;mov	[DI].BUF_NEXT,BX					;AN000;
 27917                                  ;nret:									;AN000;
 27918                                  	;pop	SI							;AN000;
 27919                                  	;pop	BX							;AN000;
 27920                                  	;pop	AX							;AN000;
 27921                                  	;								;AN000;
 27922                                  	;cmp	[di.buf_ID],-1			; Buffer FREE?		;AN000;
 27923                                          ;jne	pbx                             ; M039: -no, jump.
 27924                                  	;mov	WORD PTR [BufferQueue],di	; M039: -yes, make it LRU.
 27925                                  ;pbx:	
 27926                                  ;	ret								;AN000;
 27927                                  
 27928                                  	; 31/07/2018 - Retro DOS v3.0
 27929                                  
 27930                                  	; MSDOS 3.3
 27931                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27932                                  
 27933                                  PLACEBUF:
 27934                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 27935                                  	
 27936 00005DDB E81AB8                          CALL	save_world
 27937 00005DDE C40D                            LES     CX,[DI]
 27938 00005DE0 83F9FF                          CMP     CX,-1           	; Buf is LAST?
 27939 00005DE3 744B                            JZ      SHORT NRET		; Buffer already last
 27940 00005DE5 8CC5                            MOV     BP,ES           	; Pointsave = Buf.nextbuf
 27941 00005DE7 1E                              PUSH    DS
 27942 00005DE8 07                              POP     ES              	; Buf is ES:DI
 27943                                  	; 15/03/2018
 27944 00005DE9 36C536[3800]                    LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 27945 00005DEE E88600                          CALL    POINTCOMP       	; Buf == HEAD?
 27946 00005DF1 750C                            JNZ     SHORT BUFLOOP
 27947 00005DF3 36890E[3800]                    MOV     [SS:BUFFHEAD],CX
 27948 00005DF8 36892E[3A00]                    MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 27949 00005DFD EB14                            JMP     SHORT LOOKEND
 27950                                  
 27951                                  BUFLOOP:
 27952                                  	; 31/07/2018
 27953 00005DFF 8CD8                    	mov	ax,ds
 27954 00005E01 89F3                    	mov	bx,si
 27955                                  	;lds	si,[SI+BUFFINFO.buf_link]
 27956 00005E03 C534                            LDS     SI,[SI]
 27957 00005E05 E86F00                          CALL    POINTCOMP
 27958 00005E08 75F5                            jnz	short BUFLOOP
 27959                                  	;
 27960 00005E0A 8ED8                    	mov	ds,ax
 27961 00005E0C 89DE                    	mov	si,bx
 27962 00005E0E 890C                    	mov	[SI],cx
 27963                                  	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 27964 00005E10 896C02                  	mov	[SI+2],bp
 27965                                  	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 27966                                  LOOKEND:
 27967 00005E13 8CD8                    	mov	ax,ds
 27968 00005E15 89F3                    	mov	bx,si
 27969 00005E17 C534                            LDS     SI,[SI]
 27970 00005E19 83FEFF                          CMP     SI,-1
 27971 00005E1C 75F5                            jnz     short LOOKEND
 27972                                  
 27973                                  GOTHEEND:
 27974 00005E1E 8ED8                            mov	ds,ax
 27975 00005E20 893F                    	mov	[BX],di
 27976 00005E22 8C4702                          MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 27977 00005E25 26C705FFFF                      MOV     WORD [ES:DI],-1
 27978                                  	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 27979 00005E2A 26C74502FFFF                    MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 27980                                  	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 27981                                  NRET:
 27982 00005E30 E8B2B7                          CALL	restore_world
 27983                                  	
 27984                                  	;cmp	byte [di+4],-1
 27985 00005E33 807D04FF                	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 27986 00005E37 75A1                    	jnz     short scanplace_retn
 27987 00005E39 E80100                  	call    PLACEHEAD
 27988 00005E3C C3                      	retn
 27989                                  
 27990                                  ;EndProc PLACEBUF
 27991                                  
 27992                                  ;M039 - Removed PLACEHEAD.
 27993                                  ;----------------------------------------------------------------------------
 27994                                  ; places buffer at head
 27995                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 27996                                  ;	ONE IN THE LIST!!!!!!!
 27997                                  ; BUGBUG ---- this routine can be removed because it has only
 27998                                  ; BUGBUG ---- one instruction. This routine is called from
 27999                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 28000                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 28001                                  ; BUGBUG ---- But kept as it is for modularity
 28002                                  ;----------------------------------------------------------------------------
 28003                                  ;procedure   PLACEHEAD,NEAR
 28004                                  ;	mov	word ptr [BufferQueue], di
 28005                                  ;	ret
 28006                                  ;EndProc PLACEHEAD
 28007                                  ;M039
 28008                                  
 28009                                  ;----------------------------------------------------------------------------
 28010                                  ; Procedure Name : PLACEHEAD
 28011                                  ;
 28012                                  ; SAME AS PLACEBUF except places buffer at head
 28013                                  ;----------------------------------------------------------------------------
 28014                                  
 28015                                  	; MSDOS 3.3 (Retro DOS v3.0)
 28016                                  	; 05/09/2018
 28017                                  	; MSDOS 2.11 (Retro DOS v2.0)
 28018                                  PLACEHEAD:
 28019                                  	; 31/07/2018 - Retro DOS v3.0
 28020                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 28021                                  
 28022 00005E3D E8B8B7                          CALL	save_world
 28023 00005E40 1E                              PUSH	DS
 28024 00005E41 07                              POP	ES
 28025                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 28026 00005E42 36C536[3800]                    LDS     SI,[SS:BUFFHEAD]
 28027                                  	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 28028 00005E47 E82D00                  	CALL    POINTCOMP
 28029 00005E4A 7427                            JZ      SHORT GOTHEEND2
 28030 00005E4C 268935                  	MOV	[ES:DI],SI
 28031                                  	;mov	[ES:DI+BUFFINFO.buf_link],si
 28032 00005E4F 268C5D02                        MOV	[ES:DI+2],DS
 28033                                  	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 28034 00005E53 36893E[3800]                    MOV	[SS:BUFFHEAD],DI
 28035 00005E58 368C06[3A00]                    MOV	[SS:BUFFHEAD+2],ES
 28036                                  LOOKEND2:
 28037 00005E5D 8CD8                            mov	ax,ds
 28038 00005E5F 89F3                    	mov	bx,si
 28039                                  	;lds	si,[SI+BUFFINFO.buf_link]
 28040 00005E61 C534                            LDS     SI,[SI]
 28041 00005E63 E81100                          CALL    POINTCOMP
 28042 00005E66 75F5                            JNZ	SHORT LOOKEND2 ; 05/09/2018
 28043 00005E68 8ED8                            mov	ds,ax
 28044 00005E6A C707FFFF                	mov	word [bx],-1
 28045                                  	;mov	word [BX+BUFFINFO.buf_link],-1
 28046 00005E6E C74702FFFF              	mov	word [bx+2],-1
 28047                                  	;mov	word [BX+BUFFINFO.buf_link+2],-1
 28048                                  GOTHEEND2:
 28049 00005E73 E86FB7                         	call	restore_world
 28050                                  placehead_retn:
 28051 00005E76 C3                      	retn
 28052                                  
 28053                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 28054                                  ;----------------------------------------------------------------------------
 28055                                  ;
 28056                                  ; Procedure Name : PointComp
 28057                                  ; Inputs:
 28058                                  ;         DS:SI & ES:DI
 28059                                  ; Function:
 28060                                  ;          Checks for ((SI==DI) && (ES==DS))
 28061                                  ;	   Assumes that pointers are normalized for the
 28062                                  ;	   same segment
 28063                                  ;
 28064                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 28065                                  ; DO NOT USE FOR < or >
 28066                                  ; No Registers altered
 28067                                  ;
 28068                                  ;----------------------------------------------------------------------------
 28069                                  
 28070                                  POINTCOMP:
 28071                                  	; 31/07/2018 - Retro DOS v3.0
 28072                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 28073 00005E77 39FE                    	CMP	SI,DI
 28074                                  	;jnz	short _ret_label	; return if nz
 28075 00005E79 75FB                    	jnz	short placehead_retn 
 28076 00005E7B 51                      	PUSH	CX
 28077 00005E7C 52                      	PUSH	DX
 28078 00005E7D 8CD9                    	MOV	CX,DS
 28079 00005E7F 8CC2                    	MOV	DX,ES
 28080 00005E81 39D1                    	CMP	CX,DX
 28081 00005E83 5A                      	POP	DX
 28082 00005E84 59                      	POP	CX
 28083                                  ;_ret_label:
 28084 00005E85 C3                      	retn
 28085                                  
 28086                                  
 28087                                  ; 01/08/2018 - Retro DOS v3.0
 28088                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 28089                                  
 28090                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 28091                                  
 28092                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 28093                                  ;----------------------------------------------------------------------------
 28094                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 28095                                  ;	It gets the specified local sector into one of the I/O buffers
 28096                                  ;	and shuffles the queue
 28097                                  ; 
 28098                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28099                                  ;		       ELSE no pre-read
 28100                                  ;		(DX) = Desired physical sector number	      (LOW)
 28101                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28102                                  ;		(ES:BP) = Pointer to drive parameters
 28103                                  ;		ALLOWED set in case of INT 24
 28104                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28105                                  ;		'C' clear if OK
 28106                                  ;		CURBUF Points to the Buffer for the sector
 28107                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28108                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28109                                  ;----------------------------------------------------------------------------
 28110                                  
 28111                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 28112                                  ;----------------------------------------------------------------------------
 28113                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 28114                                  ;	It gets the specified sector into one of the I/O buffers
 28115                                  ;	and shuffles the queue. We need a special entry point so that
 28116                                  ;	we can read the alternate FAT sector if the first read fails, also
 28117                                  ;	so we can mark the buffer as a FAT sector.
 28118                                  ; 
 28119                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28120                                  ;		       ELSE no pre-read
 28121                                  ;		(DX) = Desired physical sector number	      (LOW)
 28122                                  ;		(SI) != 0
 28123                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28124                                  ;		(ES:BP) = Pointer to drive parameters
 28125                                  ;		ALLOWED set in case of INT 24
 28126                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28127                                  ;		'C' clear if OK
 28128                                  ;		CUR ddBUF Points to the Buffer for the sector
 28129                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28130                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28131                                  ;----------------------------------------------------------------------------
 28132                                  
 28133                                  GETBUFFR:
 28134 00005E86 31F6                    	XOR	SI,SI
 28135                                  
 28136                                  ;	This entry point is called for FAT buffering with SI != 0
 28137                                  
 28138                                  GETBUFFRB:
 28139 00005E88 A3[2C05]                	MOV	[PREREAD],AX			; save pre-read flag
 28140 00005E8B 268A4600                	mov	al,[ES:BP]
 28141                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 28142 00005E8F C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 28143                                  	; MSDOS 6.0
 28144                                  ;hkn; SS override
 28145                                  	;MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 28146                                  
 28147                                  ;	See if this is the buffer that was most recently returned.
 28148                                  ;	A big performance win if it is.
 28149                                  
 28150 00005E93 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 28151 00005E96 740A                    	je	short getb5			; No
 28152                                  	;cmp	dx,[di+6]
 28153 00005E98 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28154 00005E9B 7505                    	JNZ	short getb5			; Wrong sector
 28155                                  	
 28156                                  	; MSDOS 6.0
 28157                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 28158                                  	;JNZ	short getb5			; F.C. >32mb		;AN000;
 28159                                  	
 28160                                  	;cmp	al,[di+4]
 28161 00005E9D 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28162 00005EA0 7474                    	JZ	getb35				; Just asked for same buffer
 28163                                  
 28164                                  ;	It's not the buffer most recently returned.  See if it's in the
 28165                                  ;	cache.
 28166                                  ;
 28167                                  ;	(cx:dx) = sector #
 28168                                  ;	(al) = drive #
 28169                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28170                                  ;	??? list may be incomplete ???
 28171                                  
 28172                                  getb5:	
 28173                                  	; MSDOS 6.0
 28174                                  	;CALL	GETCURHEAD			; get Q Head
 28175                                  	; MSDOS 3.3
 28176 00005EA2 36C53E[3800]            	lds	di,[SS:BUFFHEAD]
 28177                                  getb10:	
 28178                                  	;cmp	dx,[di+6]
 28179 00005EA7 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28180 00005EAA 7505                    	jne	short getb12			; wrong sector lo
 28181                                  	
 28182                                  	; MSDOS 6.0
 28183                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]
 28184                                  	;jne	short getb12			; wrong sector hi
 28185                                  	
 28186                                  	;cmp	al,[di+4]
 28187 00005EAC 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28188 00005EAF 7450                    	je	short getb25 ; 05/09/2018	; Found the requested sector
 28189                                  getb12:	
 28190                                  	; MSDOS 6.0
 28191                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 28192                                  	;cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 28193                                  	;jne	short getb10			; no, continue looking
 28194                                  
 28195                                  	; MSDOS 3.3
 28196                                  	;mov	di,[DI]
 28197                                  	;mov	di,[DI+BUFFINFO.buf_link]
 28198                                  	;
 28199                                  	; 15/08/2018
 28200 00005EB1 C53D                    	lds	di,[di]
 28201                                  	;
 28202 00005EB3 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28203 00005EB6 75EF                    	jne	short getb10
 28204 00005EB8 36C53E[3800]            	lds	di,[SS:BUFFHEAD]		
 28205                                  
 28206                                  ;	The requested sector is not available in the buffers. DS:DI now points
 28207                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 28208                                  ;	new sector into it.
 28209                                  ;
 28210                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 28211                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 28212                                  ;	him, we should take LRU. And the above lookup shouldn't be
 28213                                  ;	down a chain, but should be hashed.
 28214                                  ;
 28215                                  ;	(DS:DI) = first buffer in the queue
 28216                                  ;	(CX:DX) = sector # we want
 28217                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28218                                  
 28219                                  ;hkn; SS override
 28220                                  	;PUSH	cx
 28221 00005EBD 56                      	push	si
 28222 00005EBE 52                      	push	dx
 28223 00005EBF 55                      	push	bp
 28224 00005EC0 06                      	push	es
 28225 00005EC1 E8B900                  	CALL	BUFWRITE			; Write out the dirty buffer
 28226 00005EC4 07                      	pop	es
 28227 00005EC5 5D                      	pop	bp
 28228 00005EC6 5A                      	pop	dx
 28229 00005EC7 5E                      	pop	si
 28230                                  	;POP	word [SS:HIGH_SECTOR]
 28231 00005EC8 7261                    	jc	short getbx			; if got hard error
 28232                                  
 28233                                  	; MSDOS 6.0
 28234                                  	;CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 28235                                  
 28236                                  ;	We're ready to read in the buffer, if need be. If the caller
 28237                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 28238                                  
 28239 00005ECA 30E4                    	XOR	AH,AH				; initial flags
 28240                                  ;hkn; SS override
 28241                                  	;test	byte [ss:PREREAD],0FFh
 28242                                  	;jnz	short getb20
 28243 00005ECC 363826[2C05]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 28244 00005ED1 751E                    	JNZ	short getb20			; no, we're done
 28245 00005ED3 8D5D10                  	LEA	BX,[DI+BUFINSIZ] ; [DI+16]	; (ds:bx) = data address
 28246 00005ED6 B90100                  	MOV	CX,1
 28247 00005ED9 56                      	push	si
 28248 00005EDA 57                      	push	di
 28249 00005EDB 52                      	push	dx
 28250                                  	; MSDOS 6.0
 28251                                  	;push	es
 28252                                  ; Note:  As far as I can tell, all disk reads into buffers go through
 28253                                  ;	 this point.  -mrw 10/88
 28254                                  	;cmp	BuffInHMA, 0		; is buffers in HMA?
 28255                                  	;jz	@f
 28256                                  	;push	ds
 28257                                  	;push	bx
 28258                                  	;lds	bx, dword ptr LoMemBuff	; Then let's read it into scratch buff
 28259                                  ;@@:
 28260                                  ;M039: Eliminated redundant HMA code.
 28261                                  
 28262                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28263 00005EDC 09F6                    	OR	SI,SI			; FAT sector ?
 28264 00005EDE 7407                    	JZ	short getb15		
 28265                                  
 28266 00005EE0 E85CE2                  	call	FATSECRD
 28267                                  	;mov	ah,2
 28268 00005EE3 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 28269                                  
 28270 00005EE5 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 28271                                  
 28272                                  getb15:
 28273 00005EE7 E87CE2                  	call	DREAD			; Buffer is marked free if read barfs
 28274 00005EEA B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 28275                                  getb17:	
 28276                                  	; MSDOS 6.0							  ;I001
 28277                                  	;pushf								  ;I001
 28278                                  	;cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 28279                                  	;jz	short not_in_hma	; no				  ;I001
 28280                                  	;mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 28281                                  	;shr	cx,1							  ;I001
 28282                                  	;popf				; Retreive possible CY from DREAD ;I001
 28283                                  	;mov	si,bx							  ;I001
 28284                                  	;pop	di							  ;I001
 28285                                  	;pop	es							  ;I001
 28286                                  	;cld								  ;I001
 28287                                  	;pushf				; Preserve possible CY from DREAD ;I001
 28288                                  	;rep	movsw			; move the contents of scratch buf;I001
 28289                                  	;push	es							  ;I001
 28290                                  	;pop	ds							  ;I001
 28291                                  ;not_in_hma:								  ;I001
 28292                                  	;popf							 	  ;I001
 28293                                  	;pop	es
 28294                                  	;
 28295 00005EEC 5A                      	pop	dx
 28296 00005EED 5F                      	pop	di
 28297 00005EEE 5E                      	pop	si
 28298 00005EEF 723A                    	JC	short getbx
 28299                                  
 28300                                  ;	The buffer has the data setup in it (if we were to read)
 28301                                  ;	Setup the various buffer fields
 28302                                  ;
 28303                                  ;	(ds:di) = buffer address
 28304                                  ;	(es:bp) = DPB address
 28305                                  ;	(HIGH_SECTOR:DX) = sector #
 28306                                  ;	(ah) = BUF_FLAGS value
 28307                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 28308                                  
 28309                                  ;hkn; SS override
 28310                                  getb20:	; MSDOS 6.0
 28311                                  	;MOV	CX,[SS:HIGH_SECTOR]
 28312                                  	;MOV	WORD [DI+BUFFINFO.buf_sector+2],CX
 28313                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 28314                                   	;mov	[di+6],dx
 28315 00005EF1 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 28316                                  	;mov	[di+0Ah],bp
 28317 00005EF4 896D0A                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 28318                                  	;mov	[di+0Ch], es
 28319 00005EF7 8C450C                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 28320 00005EFA 268A4600                	mov	al,[es:bp]
 28321                                  	;mov	al,[es:bp+0]
 28322                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28323                                  	;mov	[di+4],ax
 28324 00005EFE 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 28325                                  getb25:	
 28326                                  	; MSDOS 6.0
 28327                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 28328                                  	;XOR	AX,AX
 28329                                  
 28330                                  	; MSDOS 3.3
 28331 00005F01 B80100                  	mov     ax,1
 28332                                  
 28333 00005F04 09F6                    	OR	SI,SI				; FAT sector ?
 28334 00005F06 7408                    	JZ	short getb30
 28335                                  
 28336                                  	;mov	al,[es:bp+8]
 28337 00005F08 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 28338                                  	; MSDOS 6.0
 28339                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 28340                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 28341                                  						;  sectors
 28342                                  	; MSDOS 3.3
 28343                                  	;mov	ah,[es:bp+0Fh]
 28344 00005F0C 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 28345                                  
 28346                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 28347                                  ;		is set
 28348                                  
 28349                                  getb30:	
 28350                                  	; MSDOS 6.0
 28351                                  	;MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 28352                                  
 28353                                  	; MSDOS 3.3
 28354                                  	;mov	[di+8],ax ; 15/08/2018	
 28355 00005F10 894508                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 28356                                  
 28357 00005F13 E8C5FE                  	CALL	PLACEBUF
 28358                                  
 28359                                  ;hkn; SS override for next 4
 28360                                  getb35: 
 28361 00005F16 368C1E[7605]            	MOV	[SS:CURBUF+2],DS
 28362 00005F1B 368C1E[2000]            	MOV	[SS:LastBuffer+2],DS
 28363 00005F20 36893E[7405]            	MOV	[SS:CURBUF],DI
 28364 00005F25 36893E[1E00]            	MOV	[SS:LastBuffer],DI
 28365 00005F2A F8                      	CLC
 28366                                  
 28367                                  ;	Return with 'C' set appropriately
 28368                                  ;
 28369                                  ;	(dx) = caller's original value
 28370                                  
 28371                                  getbx:	
 28372 00005F2B 16                      	push	ss
 28373 00005F2C 1F                      	pop	ds
 28374 00005F2D C3                      	retn
 28375                                  
 28376                                  
 28377                                  
 28378                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 28379                                  ;----------------------------------------------------------------------------
 28380                                  ; Input:
 28381                                  ;	DS = DOSGROUP
 28382                                  ;	AL = Physical unit number local buffers only
 28383                                  ;	   = -1 for all units and all remote buffers
 28384                                  ; Function:
 28385                                  ;	Write out all dirty buffers for unit, and flag them as clean
 28386                                  ;	Carry set if error (user FAILed to I 24)
 28387                                  ;	    Flush operation completed.
 28388                                  ; DS Preserved, all others destroyed (ES too)
 28389                                  ;----------------------------------------------------------------------------
 28390                                  
 28391                                  FLUSHBUF:
 28392                                  	; MSDOS 6.0
 28393                                  	;call	GetCurHead
 28394                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28395                                  	;jnz	short scan_buf_queue
 28396                                  	;cmp	word [DirtyBufferCount], 0			;hkn;
 28397                                  	;je	short end_scan
 28398                                  	
 28399                                  	; MSDOS 3.3
 28400                                  	;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 28401 00005F2E C53E[3800]              	lds	di,[BUFFHEAD]
 28402                                  scan_buf_queue:
 28403 00005F32 E81F00                  	call	CHECKFLUSH
 28404                                  	;push	ax  ; MSDOS 3.3
 28405                                  	; MSDOS 6.0
 28406 00005F35 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 28407 00005F38 363826[D002]            	cmp	[SS:WPERR],ah					;hkn;
 28408                                  	;je	short free_the_buf
 28409                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28410                                  	;jz	short dont_free_the_buf
 28411                                  	; MSDOS 3.3
 28412                                  	;mov	al,[di+4]
 28413                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 28414                                  	;cmp	[SS:WPERR],al					;hkn;
 28415                                  	; 15/08/2018
 28416 00005F3D 7505                    	jne	short dont_free_the_buf	
 28417                                  free_the_buf:
 28418                                  	; MSDOS 6.0 (& MSDOS 3.3)
 28419 00005F3F C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 28420                                  dont_free_the_buf:
 28421                                  	;pop	ax  ; MSDOS 3.3 	   	
 28422                                  	
 28423                                  	; MSDOS 6.0
 28424                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 28425                                  	;cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 28426                                  	;jne	short scan_buf_queue
 28427                                  
 28428                                  	; MSDOS 3.3
 28429                                  	;mov	di,[DI]
 28430                                  	;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 28431                                  	;
 28432                                  	; 15/08/2018
 28433 00005F44 C53D                    	lds	di,[di]
 28434                                  	;
 28435 00005F46 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28436 00005F49 75E7                    	jnz	short scan_buf_queue 
 28437                                  
 28438                                  end_scan:
 28439 00005F4B 16                      	push	ss
 28440 00005F4C 1F                      	pop	ds
 28441                                  	; 01/08/2018 - Retro DOS v3.0
 28442                                  	;cmp	byte [FAILERR],0
 28443                                  	;jne	short bad_flush
 28444                                  	;retn
 28445                                  ;bad_flush:
 28446                                  	;stc
 28447                                  	;retn
 28448                                  	; 01/08/2018 - Retro DOS v3.0
 28449 00005F4D 803E[F602]01            	cmp	byte [FAILERR],1
 28450 00005F52 F5                      	cmc
 28451                                  flushbuf_retn:
 28452 00005F53 C3                      	retn
 28453                                  
 28454                                  ;----------------------------------------------------------------------------
 28455                                  ;
 28456                                  ; Procedure Name : CHECKFLUSH
 28457                                  ;
 28458                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 28459                                  ;	   DS:DI - pointer to buffer
 28460                                  ;
 28461                                  ; Function : Write out a buffer if it is dirty
 28462                                  ;
 28463                                  ; Carry set if problem (currently user FAILed to I 24)
 28464                                  ;
 28465                                  ;----------------------------------------------------------------------------
 28466                                  
 28467                                  CHECKFLUSH:
 28468                                  	; MSDOS 6.0
 28469 00005F54 B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 28470                                  	;cmp	[di+4],ah
 28471 00005F56 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 28472 00005F59 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 28473 00005F5B 38C4                    	CMP	AH,AL			; 
 28474 00005F5D 7406                    	JZ	short DOBUFFER		; do this buffer
 28475                                  	;cmp	al,[di+4]
 28476 00005F5F 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28477 00005F62 F8                      	CLC
 28478 00005F63 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 28479                                  DOBUFFER:
 28480                                  	;test	byte [di+5],40h
 28481 00005F65 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 28482 00005F69 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 28483 00005F6B 50                      	PUSH	AX
 28484                                  	;push	word [di+4]
 28485 00005F6C FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 28486 00005F6F E80B00                  	CALL	BUFWRITE
 28487 00005F72 58                      	POP	AX
 28488 00005F73 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 28489                                  	;and	ah,0BFh
 28490 00005F75 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 28491                                  	;mov	[di+4],ax
 28492 00005F78 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 28493                                  LEAVE_BUF:
 28494 00005F7B 58                      	POP	AX			; Search info
 28495                                  checkflush_retn:
 28496 00005F7C C3                      	retn
 28497                                  
 28498                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 28499                                  ;----------------------------------------------------------------------------
 28500                                  ;
 28501                                  ;	BufWrite writes a buffer to the disk, iff it's dirty.
 28502                                  ;
 28503                                  ;	ENTRY	DS:DI Points to the buffer
 28504                                  ;
 28505                                  ;	EXIT	Buffer marked free
 28506                                  ;		Carry set if error (currently user FAILed to I 24)
 28507                                  ;
 28508                                  ;	USES	All buf DS:DI
 28509                                  ;		HIGH_SECTOR
 28510                                  ;----------------------------------------------------------------------------
 28511                                  
 28512                                  BUFWRITE:
 28513                                  	; 10/09/2018
 28514                                  	; 01/08/2018 - Retro DOS v3.0
 28515                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 28516 00005F7D B8FF00                  	MOV	AX,00FFH
 28517                                  	;xchg	ax,[di+4]
 28518 00005F80 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 28519 00005F83 3CFF                    	CMP	AL,0FFH
 28520 00005F85 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 28521                                  	;test	ah,40h
 28522 00005F87 F6C440                  	test	AH,buf_dirty
 28523 00005F8A 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 28524                                  	; MSDOS 6.0
 28525                                  	;call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 28526                                  
 28527                                  ;hkn; SS override
 28528 00005F8C 363A06[D002]            	CMP	AL,[SS:WPERR]
 28529 00005F91 74E9                    	jz      short checkflush_retn	; If in WP error zap buffer
 28530                                  
 28531                                  ;hkn; SS override
 28532                                  	; MSDOS 6.0
 28533                                  	;MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 28534                                  	
 28535                                  	;les	bp,[di+10]
 28536 00005F93 C46D0A                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 28537                                  	;lea	bx,[di+16]
 28538 00005F96 8D5D10                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 28539                                  	;mov	dx,[di+6]
 28540 00005F99 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 28541                                  	; MSDOS 6.0
 28542                                  	;MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 28543                                  
 28544                                  ;hkn; SS override
 28545                                  	;MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 28546                                  	;MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 28547                                  	; MSDOS 3.3
 28548                                  	; mov	cx,[DI+8]
 28549 00005F9C 8B4D08                  	mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 28550 00005F9F 88E8                    	MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 28551 00005FA1 30ED                    	XOR	CH,CH
 28552                                  	;mov	ah,ch ; MSDOS 3.3
 28553                                  
 28554                                  ;hkn; SS override for ALLOWED
 28555                                  	;mov	byte [SS:ALLOWED],18h
 28556 00005FA3 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 28557                                  	;test	byte [di+5],8
 28558                                  	;test	ah,8
 28559 00005FA9 F6C408                  	test	AH,buf_isDATA
 28560 00005FAC 7406                    	JZ	short NO_IGNORE
 28561                                  	;or	byte [SS:ALLOWED],20h
 28562 00005FAE 36800E[F702]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 28563                                  NO_IGNORE:
 28564 00005FB4 30E4                    	xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 28565                                  	; MSDOS 6.0
 28566                                  	;MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 28567                                  
 28568 00005FB6 57                      	PUSH	DI		; Save buffer pointer
 28569 00005FB7 31FF                    	XOR	DI,DI		; Indicate failure
 28570                                  
 28571                                  	;push	ds
 28572                                  	;push	bx
 28573                                  WRTAGAIN:
 28574 00005FB9 57                      	push	di
 28575 00005FBA 51                      	push	cx
 28576 00005FBB 50                      	push	ax
 28577 00005FBC B90100                  	MOV	CX,1
 28578 00005FBF 53                      	push	bx
 28579 00005FC0 52                      	push	dx
 28580 00005FC1 1E                      	push	ds
 28581                                  
 28582                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point.  -mrw 10/88
 28583                                  
 28584                                  	; MSDOS 6.0
 28585                                  	;cmp	byte [BuffInHMA], 0
 28586                                  	;jz	short NBUFFINHMA
 28587                                  	;push	cx
 28588                                  	;push	es
 28589                                  	;mov	si,bx
 28590                                  	;mov	cx,[es:bp+DPB.SECTOR_SIZE]
 28591                                  	;shr	cx,1
 28592                                  	;les	di,[LoMemBuff]
 28593                                  	;mov	bx,di
 28594                                  	;cld
 28595                                  	;rep	movsw
 28596                                  	;push	es
 28597                                  	;pop	ds
 28598                                  	;pop	es
 28599                                  	;pop	cx
 28600                                  ;NBUFFINHMA:
 28601 00005FC2 E800E2                  	call	DWRITE		; Write out the dirty buffer
 28602 00005FC5 1F                      	pop	ds
 28603 00005FC6 5A                      	pop	dx
 28604 00005FC7 5B                      	pop	bx
 28605 00005FC8 58                      	pop	ax
 28606 00005FC9 59                      	pop	cx
 28607 00005FCA 5F                      	pop	di
 28608 00005FCB 7201                    	JC	short NOSET
 28609 00005FCD 47                      	INC	DI		; If at least ONE write succeedes, the operation
 28610                                  NOSET:				;	succeedes.
 28611 00005FCE 01C2                    	ADD	DX,AX
 28612 00005FD0 E2E7                    	LOOP	WRTAGAIN
 28613                                  	;pop	bx
 28614                                  	;pop	ds
 28615 00005FD2 09FF                    	OR	DI,DI		; Clears carry
 28616 00005FD4 7501                    	JNZ	short BWROK	; At least one write worked
 28617 00005FD6 F9                      	STC			; DI never got INCed, all writes failed.
 28618                                  BWROK:	
 28619 00005FD7 5F                      	POP	DI
 28620 00005FD8 C3                      	retn
 28621                                  
 28622                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 28623                                  ;----------------------------------------------------------------------------
 28624                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 28625                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 28626                                  ;	SC_DRIVE even if SC is disabled to save the testing
 28627                                  ;	code and time
 28628                                  ;
 28629                                  ;	ENTRY	ES:BP = drive parameter block
 28630                                  ;
 28631                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 28632                                  ;		[SC_DRIVE]= drive #
 28633                                  ;
 28634                                  ;	USES	Flags
 28635                                  ;----------------------------------------------------------------------------
 28636                                  
 28637                                  ;procedure   SET_RQ_SC_PARMS,NEAR
 28638                                  ;
 28639                                  ;;hkn; SS override for all variables used in this procedure.
 28640                                  ;
 28641                                  ;	SAVE	<ax>
 28642                                  ;
 28643                                  ;	MOV	ax,ES:[BP].DPB_SECTOR_SIZE	; save sector size
 28644                                  ;	MOV	SC_SECTOR_SIZE,ax
 28645                                  ;
 28646                                  ;	MOV	al,ES:[BP].DPB_DRIVE		; save drive #
 28647                                  ;	MOV	SC_DRIVE,al
 28648                                  ;
 28649                                  ;	RESTORE <ax>
 28650                                  ;
 28651                                  ;srspx:	return
 28652                                  ;
 28653                                  ;EndProc SET_RQ_SC_PARMS 			;LB. return
 28654                                  
 28655                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 28656                                  ;----------------------------------------------------------------------------
 28657                                  ; Input:
 28658                                  ;	none
 28659                                  ; Function:
 28660                                  ;	increment dirty buffers count
 28661                                  ; Output:
 28662                                  ;	dirty buffers count is incremented
 28663                                  ;
 28664                                  ; All registers preserved
 28665                                  ;----------------------------------------------------------------------------
 28666                                  
 28667                                  ;procedure   INC_DIRTY_COUNT,NEAR
 28668                                  ;
 28669                                  ;; BUGBUG  ---- remove this routine
 28670                                  ;; BUGBUG ---- only one instruction is needed   (speed win, space loose)
 28671                                  ;	inc	[DirtyBufferCount]			;hkn;
 28672                                  ;	ret
 28673                                  ;EndProc INC_DIRTY_COUNT
 28674                                  
 28675                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 28676                                  ;----------------------------------------------------------------------------
 28677                                  ; Input:
 28678                                  ;	none
 28679                                  ; Function:
 28680                                  ;	decrement dirty buffers count
 28681                                  ; Output:
 28682                                  ;	dirty buffers count is decremented
 28683                                  ;
 28684                                  ; All registers preserved
 28685                                  ;----------------------------------------------------------------------------
 28686                                  
 28687                                  ;procedure   DEC_DIRTY_COUNT,NEAR
 28688                                  ;	cmp	[DirtyBufferCount], 0	;hkn;
 28689                                  ;	jz	ddcx			; BUGBUG - shouldn't it be an
 28690                                  ;	dec	[DirtyBufferCount]	; error condition to underflow here? ;hkn;
 28691                                  ;ddcx:	ret
 28692                                  ;
 28693                                  ;EndProc DEC_DIRTY_COUNT
 28694                                  
 28695                                  ;============================================================================
 28696                                  ; MSPROC.ASM, MSDOS 6.0, 1991
 28697                                  ;============================================================================
 28698                                  ; 02/08/2018 - Retro DOS v3.0
 28699                                  
 28700                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 28701                                  
 28702                                  ; Pseudo EXEC system call for DOS
 28703                                  
 28704                                  ;	TITLE	MSPROC - process maintenance
 28705                                  ;	NAME	MSPROC
 28706                                  
 28707                                  ; =========================================================================
 28708                                  ;**	Process related system calls and low level routines for DOS 2.X.
 28709                                  ;	I/O specs are defined in DISPATCH.
 28710                                  ;
 28711                                  ;	$WAIT
 28712                                  ;	$EXEC
 28713                                  ;	$Keep_process
 28714                                  ;	Stay_resident
 28715                                  ;	$EXIT
 28716                                  ;	$ABORT
 28717                                  ;	abort_inner
 28718                                  ;
 28719                                  ;	Modification history:
 28720                                  ;
 28721                                  ;		Created: ARR 30 March 1983
 28722                                  ;		AN000	version 4.0 jan. 1988
 28723                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 28724                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 28725                                  ;
 28726                                  ;		M000	added support for loading programs into UMBs 7/9/90
 28727                                  ;
 28728                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 28729                                  ;		       dossym.inc. 7/30/90
 28730                                  ;		M005 - Support for EXE programs with out STACK segment and 
 28731                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 28732                                  ;		       stack is provided at the end of the program. Note that
 28733                                  ;		       only SP is changed.
 28734                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 28735                                  ;
 28736                                  ;		M028 - 4b04 implementation
 28737                                  ;
 28738                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 28739                                  ;			in memory block >= 64K, sp = 0. If memory block
 28740                                  ;			obtained is <64K, point sp at the end of the memory
 28741                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 28742                                  ;			added for a stack segment which may be needed if it
 28743                                  ;			is loaded in low memory situations.
 28744                                  ;
 28745                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 28746                                  ;
 28747                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 28748                                  ;			a bad environment if it reached 32767 bytes. Changed
 28749                                  ;			to allow 32768 bytes of environment.
 28750                                  ;
 28751                                  ;		M047 - Release the allocated UMB when we failed to load a 
 28752                                  ;		       COM file high. Also ensure that if the biggest block
 28753                                  ;		       into which we load the com file is less than 64K then
 28754                                  ;		       we provide atleast 256 bytes of stack to the user.
 28755                                  ;
 28756                                  ;		M050 - Made Lie table search CASE insensitive
 28757                                  ;
 28758                                  ;		M060 - Removed special version table from the kernal and
 28759                                  ;                      put it in a device drive which puts the address
 28760                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 28761                                  ;		       as a DWORD.
 28762                                  ;
 28763                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 28764                                  ;		       entry do not try to load low if there is no space in
 28765                                  ;		       UMBs.
 28766                                  ;
 28767                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 28768                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 28769                                  ;		       change return address to LeaveDos if AL=5.
 28770                                  ;
 28771                                  ;               20-Jul-1992 bens    Added ifdef RESTRICTED_BUILD code that
 28772                                  ;                      controls building a version of MSDOS.SYS that only
 28773                                  ;                      runs programs from a fixed list (defined in the
 28774                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 28775                                  ;                      for details.  This feature is used to build a
 28776                                  ;                      "special" version of DOS that can be handed out to
 28777                                  ;                      OEM/ISV customers as part of a "service" disk.
 28778                                  ;
 28779                                  ; =========================================================================
 28780                                  
 28781                                  ;SAVEXIT 	EQU	10
 28782                                  
 28783                                  ;BREAK	<$WAIT - return previous process error code>
 28784                                  ; =========================================================================
 28785                                  ;	$WAIT - Return previous process error code.
 28786                                  ;
 28787                                  ;	Assembler usage:
 28788                                  ;
 28789                                  ;	    MOV     AH, WaitProcess
 28790                                  ;	    INT     int_command
 28791                                  ;
 28792                                  ;	ENTRY	none
 28793                                  ;	EXIT	(ax) = exit code
 28794                                  ;	USES	all
 28795                                  ; =========================================================================
 28796                                  
 28797                                  _$WAIT:
 28798                                  	; 02/08/2018 - Retro DOS v3.0
 28799                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 28800                                  
 28801 00005FD9 31C0                    	xor	AX,AX
 28802 00005FDB 368706[E202]            	xchg	AX,[ss:exit_code]
 28803 00005FE0 E91AB7                  	jmp	SYS_RET_OK
 28804                                  
 28805                                  ; =========================================================================
 28806                                  ;BREAK <$exec - load/go a program>
 28807                                  ;	EXEC.ASM - EXEC System Call
 28808                                  ;
 28809                                  ;
 28810                                  ; Assembler usage:
 28811                                  ;	    lds     DX, Name
 28812                                  ;	    les     BX, Blk
 28813                                  ;	    mov     AH, Exec
 28814                                  ;	    mov     AL, FUNC
 28815                                  ;	    int     INT_COMMAND
 28816                                  ;
 28817                                  ;	AL  Function
 28818                                  ;	--  --------
 28819                                  ;	 0  Load and execute the program.
 28820                                  ;	 1  Load, create  the  program	header	but  do  not
 28821                                  ;	    begin execution.
 28822                                  ;	 3  Load overlay. No header created.
 28823                                  ;
 28824                                  ;	    AL = 0 -> load/execute program
 28825                                  ;
 28826                                  ;	    +---------------------------+
 28827                                  ;	    | WORD segment address of	|
 28828                                  ;	    | environment.		|
 28829                                  ;	    +---------------------------+
 28830                                  ;	    | DWORD pointer to ASCIZ	|
 28831                                  ;	    | command line at 80h	|
 28832                                  ;	    +---------------------------+
 28833                                  ;	    | DWORD pointer to default	|
 28834                                  ;	    | FCB to be passed at 5Ch	|
 28835                                  ;	    +---------------------------+
 28836                                  ;	    | DWORD pointer to default	|
 28837                                  ;	    | FCB to be passed at 6Ch	|
 28838                                  ;	    +---------------------------+
 28839                                  ;
 28840                                  ;	    AL = 1 -> load program
 28841                                  ;
 28842                                  ;	    +---------------------------+
 28843                                  ;	    | WORD segment address of	|
 28844                                  ;	    | environment.		|
 28845                                  ;	    +---------------------------+
 28846                                  ;	    | DWORD pointer to ASCIZ	|
 28847                                  ;	    | command line at 80h	|
 28848                                  ;	    +---------------------------+
 28849                                  ;	    | DWORD pointer to default	|
 28850                                  ;	    | FCB to be passed at 5Ch	|
 28851                                  ;	    +---------------------------+
 28852                                  ;	    | DWORD pointer to default	|
 28853                                  ;	    | FCB to be passed at 6Ch	|
 28854                                  ;	    +---------------------------+
 28855                                  ;	    | DWORD returned value of	|
 28856                                  ;	    | CS:IP			|
 28857                                  ;	    +---------------------------+
 28858                                  ;	    | DWORD returned value of	|
 28859                                  ;	    | SS:IP			|
 28860                                  ;	    +---------------------------+
 28861                                  ;
 28862                                  ;	    AL = 3 -> load overlay
 28863                                  ;
 28864                                  ;	    +---------------------------+
 28865                                  ;	    | WORD segment address where|
 28866                                  ;	    | file will be loaded.	|
 28867                                  ;	    +---------------------------+
 28868                                  ;	    | WORD relocation factor to |
 28869                                  ;	    | be applied to the image.	|
 28870                                  ;	    +---------------------------+
 28871                                  ;
 28872                                  ; Returns:
 28873                                  ;	    AX = error_invalid_function
 28874                                  ;	       = error_bad_format
 28875                                  ;	       = error_bad_environment
 28876                                  ;	       = error_not_enough_memory
 28877                                  ;	       = error_file_not_found
 28878                                  ; =========================================================================
 28879                                  ;
 28880                                  ;   Revision history:
 28881                                  ;
 28882                                  ;	 A000	version 4.00  Jan. 1988
 28883                                  ;
 28884                                  ; =========================================================================
 28885                                  
 28886                                  Exec_Internal_Buffer		EQU	OPENBUF
 28887                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 28888                                  
 28889                                  ; =========================================================================
 28890                                  
 28891                                  ;IF1		; warning message on buffers
 28892                                  ;%out	Please make sure that the following are contiguous and of the
 28893                                  ;%out	following sizes:
 28894                                  ;%out
 28895                                  ;%out	OpenBuf     128
 28896                                  ;%out	RenBuf	    128
 28897                                  ;%out	SearchBuf    53
 28898                                  ;%out	DummyCDS    curdirLen
 28899                                  ;ENDIF
 28900                                  
 28901                                  ; =========================================================================
 28902                                  
 28903                                  ; =========================================================================
 28904                                  ;
 28905                                  ; =========================================================================
 28906                                  
 28907                                  _$EXEC:
 28908                                  	; 02/08/2018 - Retro DOS v3.0
 28909                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 28910                                  
 28911                                  EXEC001S:
 28912                                  
 28913                                  	;LocalVar    Exec_Blk		,DWORD
 28914                                  	;LocalVar    Exec_Func		,BYTE
 28915                                  	;LocalVar    Exec_Load_High	,BYTE
 28916                                  	;LocalVar    Exec_FH		,WORD
 28917                                  	;LocalVar    Exec_Rel_Fac	,WORD
 28918                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 28919                                  	;LocalVar    Exec_Environ	,WORD
 28920                                  	;LocalVar    Exec_Size		,WORD
 28921                                  	;LocalVar    Exec_Load_Block	,WORD
 28922                                  	;LocalVar    Exec_DMA		,WORD
 28923                                  	;LocalVar    ExecNameLen 	,WORD
 28924                                  	;LocalVar    ExecName		,DWORD
 28925                                  	;
 28926                                  	;LocalVar    Exec_DMA_Save	,WORD
 28927                                  	;LocalVar    Exec_NoStack	,BYTE
 28928                                  
 28929                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28930                                  	;%define	Exec_Blk	dword [bp-4]
 28931                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 28932                                  	%define		Exec_BlkL	word [bp-4]	
 28933                                  	%define		Exec_BlkH	word [bp-2]
 28934                                  	%define		Exec_Func	byte [bp-5]
 28935                                  	%define		Exec_Load_High	byte [bp-6]
 28936                                  	%define		Exec_FH		word [bp-8]
 28937                                  	%define		Exec_Rel_Fac	word [bp-10]
 28938                                  	%define		Exec_Res_Len_Para word [bp-12]
 28939                                  	%define		Exec_Environ	word [bp-14]
 28940                                  	%define		Exec_Size	word [bp-16]
 28941                                  	%define		Exec_Load_Block	word [bp-18]
 28942                                  	%define		Exec_DMA	word [bp-20]
 28943                                  	%define		ExecNameLen	word [bp-22]
 28944                                  	;%define	ExecName	dword [bp-26]
 28945                                  	%define		ExecName	[bp-26] ; 09/08/2018
 28946                                  	%define		ExecNameL	word [bp-26]	
 28947                                  	%define		ExecNameH	word [bp-24]
 28948                                  	; MSDOS 6.0
 28949                                  	%define		Exec_DMA_Save	word [bp-28]
 28950                                  	%define		Exec_NoStack	byte [bp-29]
 28951                                  	
 28952                                  	; ==================================================================
 28953                                  	; validate function
 28954                                  	; ==================================================================
 28955                                  		      	
 28956                                  	;
 28957                                  	; M068 - Start
 28958                                  	;
 28959                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 28960                                  	; possibility that the count may not be decremented all the way to
 28961                                  	; 0. A typical case is if the program for which we intended to keep 
 28962                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 28963                                  	; calls), exits pre-maturely due to error conditions.
 28964                                  	;
 28965                                  
 28966                                  	; MSDOS 6.0
 28967                                  	;mov	byte [SS:A20OFF_COUNT], 0
 28968                                  
 28969                                  	;
 28970                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 28971                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 28972                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 28973                                  	;
 28974                                  	
 28975                                  	;cmp	al, 5			; Q: is this ExecReady call
 28976                                  	;jne	@f			; N: continue
 28977                                  					; Y: change ret addr. to LeaveDos.
 28978                                  	;pop	cx			; Note CX is not input to ExecReady
 28979                                  	;mov	cx, offset DOSCODE:LeaveDos
 28980                                  	;push	cx
 28981                                  ;@@:
 28982                                  	;
 28983                                  	; M068 - End
 28984                                  	;
 28985                                  
 28986                                  	;Enter
 28987                                  
 28988 00005FE3 55                      	push	bp
 28989 00005FE4 89E5                    	mov	bp,sp
 28990 00005FE6 83EC1E                  	sub	sp,30 ; MSDOS 6.0
 28991                                  	;sub	sp,26 ; MSDOS 3.3
 28992                                  
 28993                                  	; MSDOS 6.0
 28994                                  	;cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 28995                                  					; M030
 28996                                  	;jna	short Exec_Check_2
 28997                                  
 28998                                  	; MSDOS 3.3
 28999 00005FE9 3C03                    	cmp	AL,3
 29000 00005FEB 760E                    	jna	short Exec_Check_2
 29001                                  
 29002                                  Exec_Bad_Fun:
 29003 00005FED 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk 
 29004                                  					; Extended Error Locus	;smr;SS Override
 29005                                  	;mov	al,1
 29006 00005FF3 B001                    	mov	al,error_invalid_function
 29007                                  
 29008                                  Exec_Ret_Err:
 29009                                  	;Leave
 29010 00005FF5 89EC                    	mov	sp,bp
 29011 00005FF7 5D                      	pop	bp
 29012                                  	;transfer SYS_RET_ERR
 29013 00005FF8 E90BB7                  	jmp	SYS_RET_ERR
 29014                                  
 29015                                  	; MSDOS 6.0
 29016                                  ;ExecReadyJ:
 29017                                  	;call	ExecReady		; M028
 29018                                  	;jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 29019                                  
 29020                                  Exec_Check_2:
 29021 00005FFB 3C02                    	cmp	AL,2			
 29022 00005FFD 74EE                    	jz	short Exec_Bad_Fun
 29023                                  
 29024                                  	; MSDOS 6.0
 29025                                  	;cmp	al,4			; 2 & 4 are not allowed
 29026                                  	;je	short Exec_Bad_Fun
 29027                                  	;
 29028                                  	;cmp	al,5			; M028 ; M030
 29029                                  	;je	short ExecReadyJ		; M028
 29030                                  
 29031                                  	;mov	[bp-4],bx
 29032 00005FFF 895EFC                  	mov	Exec_BlkL,BX		; stash args
 29033                                  	;mov	[bp-2],es
 29034 00006002 8C46FE                  	mov	Exec_BlkH,ES
 29035                                  	;mov	[bp-5],al
 29036 00006005 8846FB                  	mov	Exec_Func,AL
 29037                                  	;mov	byte [bp-6],0
 29038 00006008 C646FA00                	mov	Exec_Load_High,0
 29039                                  
 29040                                  	;mov	[bp-26],dx
 29041 0000600C 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 29042                                  	;mov	[bp-24],ds
 29043 0000600F 8C5EE8                  	mov	ExecNameH,DS
 29044 00006012 89D6                    	mov	SI,DX			; move pointer to convenient place
 29045                                  	;invoke	DStrLen
 29046 00006014 E85ABF                  	call	DStrLen
 29047                                  	;mov	[bp-22],cx
 29048 00006017 894EEA                  	mov	ExecNameLen,CX		; save length
 29049                                  
 29050                                  	; MSDOS 6.0
 29051                                  	;mov	al, [AllocMethod]	; M063: save alloc method in 
 29052                                  	;mov	[AllocMsave], al	; M063: AllocMsave
 29053                                  
 29054 0000601A 30C0                    	xor	AL,AL			; open for reading
 29055 0000601C 55                      	push	BP
 29056                                  
 29057                                  	; MSDOS 6.0
 29058                                  	;or	byte [DOS_FLAG], EXECOPEN ; this flag is set to indicate to 
 29059                                  					; the redir that this open call is
 29060                                  					; due to an exec.
 29061                                  
 29062                                  	;invoke	$OPEN			; is the file there?
 29063 0000601D E81510                  	call	_$OPEN
 29064                                  
 29065                                  	; MSDOS 6.0
 29066                                  	;pushf
 29067                                  	;and	byte [DOS_FLAG],~EXECOPEN; reset flag
 29068                                  	;popf
 29069                                  
 29070 00006020 5D                      	pop	BP
 29071                                  	;MSDOS 3.3
 29072 00006021 72D2                    	jc	short Exec_Ret_Err
 29073                                  
 29074                                  	;mov	[bp-8],ax
 29075 00006023 8946F8                  	mov	Exec_FH,AX
 29076 00006026 89C3                    	mov	BX,AX
 29077 00006028 30C0                    	xor	AL,AL
 29078                                  	;invoke	$Ioctl
 29079 0000602A E880CF                  	call	_$IOCTL
 29080 0000602D 7207                    	jc	short Exec_BombJ
 29081                                  
 29082                                  	;test	dl,80h
 29083 0000602F F6C280                  	test	DL,devid_ISDEV
 29084 00006032 740A                    	jz	short Exec_Check_Environ
 29085                                  
 29086                                  	;mov	al,2
 29087 00006034 B002                    	mov	AL,error_file_not_found
 29088                                  Exec_BombJ:
 29089 00006036 E9CC00                  	jmp	Exec_Bomb
 29090                                  
 29091                                  BadEnv:
 29092                                  	;mov	al,0Ah
 29093 00006039 B00A                    	mov	AL,error_bad_environment
 29094 0000603B E9C700                  	jmp	Exec_Bomb
 29095                                  
 29096                                  Exec_Check_Environ:
 29097                                  	;mov	word [bp-18],0
 29098 0000603E C746EE0000              	mov	Exec_Load_Block,0
 29099                                  	;mov	word [bp-14],0
 29100 00006043 C746F20000              	mov	Exec_Environ,0
 29101                                  					; overlays... no environment
 29102                                  	;test	byte [bp-5],2
 29103 00006048 F646FB02                	test	Exec_Func,exec_func_overlay
 29104 0000604C 7554                    	jnz	short Exec_Read_Header
 29105                                  
 29106                                  	;lds	si,[bp-4]
 29107 0000604E C576FC                  	lds	SI,Exec_Blk		; get block
 29108 00006051 8B04                    	mov	ax,[SI]
 29109                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 29110 00006053 09C0                    	or	AX,AX
 29111 00006055 750C                    	jnz	short Exec_Scan_Env
 29112                                  
 29113 00006057 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 29114                                  	;mov	ax,[44]
 29115 0000605C A12C00                  	mov	AX,[PDB.ENVIRON]
 29116                                  
 29117                                  ; MSDOS 6.0
 29118                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 29119                                  ;
 29120                                  ; Exec_environ is being correctly initialized after the environment has been
 29121                                  ; allocated and copied form the parent's env. It must not be initialized here.
 29122                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 29123                                  ; parent's environment.
 29124                                  ;	mov	Exec_Environ,AX
 29125                                  ;
 29126                                  ;----------------------------------------------------------------------------
 29127                                  
 29128                                  	;mov	[bp-14],ax
 29129                                  	;mov	Exec_Environ,ax
 29130                                  
 29131 0000605F 09C0                    	or	AX,AX
 29132 00006061 743F                    	jz	short Exec_Read_Header
 29133                                  
 29134                                  Exec_Scan_Env:
 29135 00006063 8EC0                    	mov	ES,AX
 29136 00006065 31FF                    	xor	DI,DI
 29137                                  	;mov	cx,7FFFh ; MSDOS 3.3
 29138 00006067 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 29139 0000606A 30C0                    	xor	AL,AL
 29140                                  
 29141                                  Exec_Get_Environ_Len:
 29142 0000606C F2AE                    	repnz	scasb			; find that nul byte
 29143 0000606E 75C9                    	jnz	short BadEnv
 29144                                  
 29145 00006070 49                      	dec	CX			; Dec CX for the next nul byte test
 29146 00006071 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 29147                                  
 29148 00006073 AE                      	scasb				; is there another nul byte?
 29149 00006074 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 29150                                  
 29151 00006076 57                      	push	DI
 29152                                  	;lea	bx,[DI+11h]
 29153 00006077 8D5D11                  	lea	BX,[DI+0Fh+2]
 29154                                  	;add	bx,[bp-22]
 29155 0000607A 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 29156                                  					; remember argv[0] length
 29157                                  					; round up and remember argc
 29158 0000607D B104                    	mov	CL,4
 29159 0000607F D3EB                    	shr	BX,CL			; number of paragraphs needed
 29160 00006081 06                      	push	ES
 29161                                  	;invoke	$Alloc			; can we get the space?
 29162 00006082 E8CA04                  	call	_$ALLOC
 29163 00006085 1F                      	pop	DS
 29164 00006086 59                      	pop	CX
 29165 00006087 7302                    	jnc	short Exec_Save_Environ
 29166                                  
 29167 00006089 EB74                    	jmp	SHORT Exec_No_Mem	; nope... cry and sob
 29168                                  
 29169                                  Exec_Save_Environ:
 29170 0000608B 8EC0                    	mov	ES,AX
 29171                                  	;mov	[bp-14],ax
 29172 0000608D 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 29173 00006090 31F6                    	xor	SI,SI
 29174 00006092 89F7                    	mov	DI,SI
 29175 00006094 F3A4                    	rep	movsb			; copy the environment
 29176 00006096 B80100                  	mov	AX,1
 29177 00006099 AB                      	stosw
 29178                                  	;lds	si,[bp-26]
 29179 0000609A C576E6                  	lds	SI,ExecName
 29180                                  	;mov	cx,[bp-22]
 29181 0000609D 8B4EEA                  	mov	CX,ExecNameLen
 29182 000060A0 F3A4                    	rep	movsb
 29183                                  
 29184                                  Exec_Read_Header:
 29185                                  	; We read in the program header into the above data area and
 29186                                  	; determine where in this memory the image will be located.
 29187                                  
 29188                                  	;Context DS
 29189 000060A2 16                      	push	ss
 29190 000060A3 1F                      	pop	ds
 29191                                  	;mov	cx,26
 29192 000060A4 B91A00                  	mov	CX,Exec_Header_Len	; header size
 29193 000060A7 BA[1E14]                	mov	DX,exec_signature
 29194 000060AA 06                      	push	ES
 29195 000060AB 1E                      	push	DS
 29196 000060AC E87803                  	call	ExecRead
 29197 000060AF 1F                      	pop	DS
 29198 000060B0 07                      	pop	ES
 29199 000060B1 7250                    	jc	short Exec_Bad_File
 29200                                  
 29201 000060B3 09C0                    	or	AX,AX
 29202 000060B5 744C                    	jz	short Exec_Bad_File
 29203                                  	;cmp	ax,26
 29204 000060B7 83F81A                  	cmp	AX,Exec_Header_Len	; did we read the right number?
 29205 000060BA 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 29206                                  
 29207 000060BC F706[2A14]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 29208 000060C2 7504                    	jnz	short Exec_Check_Sig
 29209                                  
 29210                                  	;mov	byte [bp-6],0FFh
 29211 000060C4 C646FAFF                	mov	Exec_Load_High,-1
 29212                                  
 29213                                  Exec_Check_Sig:
 29214 000060C8 A1[1E14]                	mov	AX,[exec_signature]	; rms;NSS
 29215                                  	;cmp	ax,5A4Dh ; 'MZ'
 29216 000060CB 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 29217 000060CE 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29218                                  
 29219                                  	;cmp	ax,4D5Ah ; 'ZM'
 29220 000060D0 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 29221 000060D3 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29222                                  
 29223                                  Exec_Com_Filej:
 29224 000060D5 E9A201                  	jmp	Exec_Com_File
 29225                                  
 29226                                  	; We have the program header... determine memory requirements
 29227                                  
 29228                                  Exec_Save_Start:
 29229 000060D8 A1[2214]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 29230 000060DB B105                    	mov	CL,5			; convert to paragraphs
 29231 000060DD D3E0                    	shl	AX,CL
 29232 000060DF 2B06[2614]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs;rms;NSS
 29233                                  	;mov	[bp-12],ax
 29234 000060E3 8946F4                  	mov	Exec_Res_Len_Para,AX
 29235                                  
 29236                                  		; Do we need to allocate memory?
 29237                                  		; Yes if function is not load-overlay
 29238                                  
 29239                                  	;test	byte [bp-5],2
 29240 000060E6 F646FB02                	test	Exec_Func,exec_func_overlay
 29241 000060EA 742C                    	jz	short Exec_Allocate	; allocation of space
 29242                                  
 29243                                  		; get load address from block
 29244                                  
 29245                                  	;les	di,[bp-4]
 29246 000060EC C47EFC                  	les	DI,Exec_Blk
 29247 000060EF 268B05                  	mov	ax,[es:di]
 29248                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 29249                                  	;mov	[bp-20],ax
 29250 000060F2 8946EC                  	mov	Exec_DMA,AX
 29251 000060F5 268B4502                	mov	AX,[ES:DI+EXEC3.reloc_fac]
 29252                                  	;mov	[bp-10],ax
 29253 000060F9 8946F6                  	mov	Exec_Rel_Fac,AX
 29254                                  	; 10/08/2018
 29255 000060FC E9AB00                  	jmp	Exec_Find_Res		; M000
 29256                                  
 29257                                  Exec_No_Mem:
 29258                                  	;mov	al,8
 29259 000060FF B008                    	mov	AL,error_not_enough_memory
 29260 00006101 EB02                    	jmp	short Exec_Bomb
 29261                                  
 29262                                  Exec_Bad_File:
 29263                                  	;mov	al,0Bh
 29264 00006103 B00B                    	mov	AL,error_bad_format
 29265                                  
 29266                                  Exec_Bomb:
 29267                                  	;mov	bx,[bp-8]
 29268 00006105 8B5EF8                  	mov	BX,Exec_FH
 29269 00006108 E82B03                  	call	Exec_Dealloc
 29270                                  	;LeaveCrit CritMem
 29271 0000610B E85FBF                  	call	LcritMem
 29272                                  	;save	<AX,BP>
 29273 0000610E 50                      	push	ax
 29274 0000610F 55                      	push	bp
 29275                                  	;invoke	$CLOSE
 29276 00006110 E8B10C                  	call	_$CLOSE
 29277                                  	;restore <BP,AX>
 29278 00006113 5D                      	pop	bp
 29279 00006114 58                      	pop	ax
 29280 00006115 E9DDFE                  	jmp	Exec_Ret_Err
 29281                                  
 29282                                  Exec_Chk_Mem: 
 29283                                  	; MSDOS 6.0    			; M063 - Start
 29284                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29285                                  	;mov	bl,[AllocMsave]
 29286                                  	;mov	[AllocMethod], bl	; restore original allocmethod
 29287                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29288                                  	;jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 29289                                  	;				; N: continue
 29290                                  	;
 29291                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29292                                  	;jz	short Exec_No_Mem	; N: no memory 
 29293                                  	;mov	ax,[save_AX]		; Y: restore ax and
 29294                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 29295                                  	;				; M063 - End
 29296                                  
 29297                                  Exec_Allocate:
 29298                                  	; 09/09/2018
 29299                                  
 29300                                  	; M005 - START
 29301                                  	; If there is no STACK segment for this exe file and if this
 29302                                  	; not an overlay and the resident size is less than 64K - 
 29303                                  	; 256 bytes we shall add 256bytes bytes to the programs 
 29304                                  	; resident memory requirement and set Exec_SP to this value.
 29305                                  
 29306                                  	; MSDOS 6.0
 29307 00006118 C646E300                	mov	Exec_NoStack,0
 29308 0000611C 833E[2C14]00            	cmp	word [exec_SS],0	; Q: is there a stack seg
 29309 00006121 7512                    	jne	short ea1		; Y: continue normal processing
 29310 00006123 833E[2E14]00            	cmp	word [exec_SP],0	; Q: is there a stack ptr
 29311 00006128 750B                    	jne	short ea1		; Y: continue normal processing
 29312                                  
 29313 0000612A FE46E3                  	inc	Exec_NoStack
 29314 0000612D 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 29315 00006130 7303                    	jae	short ea1		; Y: don't set Exec_SP
 29316                                  
 29317 00006132 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 29318                                  ea1:
 29319                                  	; M005 - END
 29320                                  
 29321                                  	; MSDOS 6.0			; M000 - start
 29322                                  	;test	byte [AllocMethod],HIGH_FIRST
 29323                                  	;				; Q: is the alloc strat high_first
 29324                                  	;jz	short Exec_Norm_Alloc	; N: normal allocate
 29325                                  	;				; Y: set high_only bit
 29326                                  	;or	byte [AllocMethod],HIGH_ONLY
 29327                                  	;				; M000 - end
 29328                                  
 29329                                  ;Exec_Norm_Alloc:
 29330                                  	;mov	[save_ax],ax		; M000: save ax for possible 2nd  
 29331                                  					; M000: attempt at allocating memory
 29332                                  	;;push	ax			; M000
 29333                                  
 29334                                  	; MSDOS 3.3
 29335 00006135 50                      	push	ax	
 29336                                  
 29337 00006136 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 29338 00006139 1E                      	push	DS
 29339                                  	;invoke	$Alloc			; should have carry set and BX has max
 29340 0000613A E81204                  	call	_$ALLOC
 29341 0000613D 1F                      	pop	DS
 29342                                  
 29343                                  	; MSDOS 6.0
 29344                                  	;mov	ax,[save_ax]		; M000
 29345                                  	;;pop	AX			; M000
 29346                                  
 29347                                  	; MSDOS 3.3
 29348 0000613E 58                      	pop	ax
 29349                                  
 29350 0000613F 83C010                  	add	AX,10h			; room for header
 29351 00006142 83FB11                  	cmp	BX,11h			; enough room for a header
 29352                                  	; MSDOS 6.0
 29353                                  	;jb	short Exec_Chk_Mem	; M000
 29354                                  	; MSDOS 3.3	
 29355 00006145 72B8                    	jb	short Exec_No_Mem
 29356                                  
 29357 00006147 39D8                    	cmp	AX,BX			; is there enough for bare image?
 29358                                  	; MSDOS 6.0
 29359                                  	;ja	short Exec_Chk_Mem	; M000
 29360                                  	; MSDOS 3.3
 29361 00006149 77B4                    	ja	short Exec_No_Mem
 29362                                  
 29363                                  	;test	byte [bp-6],0FFh
 29364 0000614B F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 29365 0000614F 7518                    	jnz	short Exec_BX_Max	; use max
 29366                                  
 29367                                  	; 09/09/2018
 29368                                  
 29369 00006151 0306[2814]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 29370                                  	; MSDOS 6.0
 29371                                  	;jc	short Exec_Chk_Mem		; M000
 29372                                  	; MSDOS 3.3
 29373 00006155 72A8                    	jc	short Exec_No_Mem
 29374                                  
 29375 00006157 39D8                    	cmp	AX,BX			; enough space?
 29376                                  	; MSDOS 6.0
 29377                                  	;ja	short Exec_Chk_Mem	; M000: nope...	
 29378                                  	; MSDOS 3.3
 29379 00006159 77A4                    	ja	short Exec_No_Mem
 29380                                  
 29381 0000615B 2B06[2814]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 29382 0000615F 0306[2A14]              	add	AX,[exec_max_BSS] 	; go for the MAX
 29383 00006163 7204                    	jc	short Exec_BX_Max
 29384                                  
 29385 00006165 39D8                    	cmp	AX,BX
 29386 00006167 7602                    	jbe	short Exec_Got_Block
 29387                                  
 29388                                  Exec_BX_Max:
 29389 00006169 89D8                    	mov	AX,BX
 29390                                  
 29391                                  Exec_Got_Block:
 29392                                  	; 03/08/2018 - Retro DOS v3.0
 29393                                  
 29394 0000616B 1E                      	push	DS
 29395 0000616C 89C3                    	mov	BX,AX
 29396                                  	;mov	[bp-16],bx
 29397 0000616E 895EF0                  	mov	Exec_Size,BX
 29398                                  	;invoke	$Alloc			; get the space
 29399 00006171 E8DB03                  	call	_$ALLOC
 29400 00006174 1F                      	pop	DS
 29401                                  	; MSDOS 6.0
 29402                                  	;jc	short Exec_Chk_Mem	; M000
 29403                                  	; MSDOS 3.3
 29404 00006175 7288                    	jc	short Exec_No_Mem
 29405                                  
 29406                                  	; MSDOS 6.0
 29407                                  	;mov	cl,[AllocMsave]		; M063: 
 29408                                  	;mov	[AllocMethod],cl	; M063: restore allocmethod
 29409                                  
 29410                                  ;M029; Begin changes
 29411                                  ; This code does special handling for programs with no stack segment. If so,
 29412                                  ;check if the current block is larger than 64K. If so, we do not modify
 29413                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 29414                                  ;case Exec_SS is not changed.
 29415                                  ;
 29416                                  	; MSDOS 6.0
 29417 00006177 807EE300                	cmp	Exec_NoStack,0
 29418                                  	;je	@f
 29419 0000617B 7412                    	je	short ea2
 29420                                  
 29421 0000617D 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 29422                                  	;jae	@f			; Y: Exec_SP = 0
 29423 00006181 730C                    	jae	short ea2
 29424                                  ;
 29425                                  ;Make Exec_SP point at the top of the memory block
 29426                                  ;
 29427 00006183 B104                    	mov	cl,4
 29428 00006185 D3E3                    	shl	bx,cl			; get byte offset
 29429 00006187 81EB0001                	sub	bx,100h			; take care of PSP
 29430 0000618B 891E[2E14]              	mov	[exec_SP],bx		; Exec_SP = top of block
 29431                                  ea2:
 29432                                  ;@@:
 29433                                  ;
 29434                                  ;M029; end changes
 29435                                  ;
 29436                                  	;mov	[bp-18],ax
 29437 0000618F 8946EE                  	mov	Exec_Load_Block,AX
 29438 00006192 83C010                  	add	AX,10h
 29439                                  	;test	byte [bp-6],0FFh
 29440 00006195 F646FAFF                	test	Exec_Load_High,-1
 29441 00006199 7409                    	jz	short Exec_Use_AX	; use ax for load info
 29442                                  
 29443                                  	;add	ax,[bp-16]
 29444 0000619B 0346F0                  	add	AX,Exec_Size		; go to end
 29445                                  	;sub	ax,[bp-12]
 29446 0000619E 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 29447 000061A1 83E810                  	sub	AX,10h			; drop off pdb
 29448                                  
 29449                                  Exec_Use_AX:
 29450                                  	;mov	[bp-10],ax
 29451 000061A4 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 29452                                  	;mov	[bp-20],ax
 29453 000061A7 8946EC                  	mov	Exec_DMA,AX		; beginning of dma
 29454                                  
 29455                                  	; Determine the location in the file of the beginning of
 29456                                  	; the resident
 29457                                  
 29458                                  Exec_Find_Res:
 29459                                  	; MSDOS 6.0
 29460                                  	;mov	dx,[bp-20]
 29461 000061AA 8B56EC                  	mov	DX,Exec_DMA
 29462                                  	;mov	[bp-28],dx
 29463 000061AD 8956E4                  	mov	Exec_DMA_Save,DX
 29464                                  
 29465                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29466 000061B0 8B16[2614]              	mov	DX,[exec_par_dir]
 29467 000061B4 52                      	push	DX
 29468 000061B5 B104                    	mov	CL,4
 29469 000061B7 D3E2                    	shl	DX,CL			; low word of location
 29470 000061B9 58                      	pop	AX
 29471 000061BA B10C                    	mov	CL,12
 29472 000061BC D3E8                    	shr	AX,CL			; high word of location
 29473 000061BE 89C1                    	mov	CX,AX			; CX <- high
 29474                                  
 29475                                  		; Read in the resident image (first, seek to it)
 29476                                  	;mov	bx,[bp-8]
 29477 000061C0 8B5EF8                  	mov	BX,Exec_FH
 29478 000061C3 1E                      	push	DS
 29479 000061C4 30C0                    	xor	AL,AL
 29480                                  	;invoke	$Lseek			; Seek to resident
 29481 000061C6 E86D0D                  	call	_$LSEEK
 29482 000061C9 1F                      	pop	DS
 29483 000061CA 7303                    	jnc	short Exec_Big_Read
 29484                                  
 29485 000061CC E936FF                  	jmp	Exec_Bomb
 29486                                  
 29487                                  Exec_Big_Read:				; Read resident into memory
 29488                                  	;mov	bx,[bp-12]
 29489 000061CF 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 29490 000061D2 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 29491 000061D6 7203                    	jb	short Exec_Read_OK
 29492                                  
 29493 000061D8 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 29494                                  
 29495                                  Exec_Read_OK:
 29496                                  	;sub	[bp-12],bx
 29497 000061DB 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 29498 000061DE 53                      	push	BX
 29499 000061DF B104                    	mov	CL,4
 29500 000061E1 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 29501 000061E3 89D9                    	mov	CX,BX			; Count in correct register
 29502 000061E5 1E                      	push	DS
 29503                                  	;mov	ds,[bp-20]
 29504 000061E6 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 29505                                  
 29506 000061E9 31D2                    	xor	DX,DX
 29507 000061EB 51                      	push	CX			; Save our count
 29508 000061EC E83802                  	call	ExecRead
 29509 000061EF 59                      	pop	CX			; Get old count to verify
 29510 000061F0 1F                      	pop	DS
 29511 000061F1 7248                    	jc	short Exec_Bad_FileJ
 29512                                  
 29513 000061F3 39C1                    	cmp	CX,AX			; Did we read enough?
 29514 000061F5 5B                      	pop	BX			; Get paragraph count back
 29515 000061F6 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 29516                                  
 29517                                  	; The read did not match the request. If we are off by 512
 29518                                  	; bytes or more then the header lied and we have an error.
 29519                                  
 29520 000061F8 29C1                    	sub	CX,AX
 29521 000061FA 81F90002                	cmp	CX,512
 29522 000061FE 733B                    	jae	short Exec_Bad_FileJ
 29523                                  
 29524                                  	; We've read in CX bytes... bump DTA location
 29525                                  
 29526                                  ExecCheckEnd:
 29527                                  	;add	[bp-20],bx
 29528 00006200 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 29529                                  	;test	word [bp-12],0FFFFh
 29530 00006203 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 29531 00006208 75C5                    	jnz	short Exec_Big_Read
 29532                                  
 29533                                  	; The image has now been read in. We must perform relocation
 29534                                  	; to the current location.
 29535                                  
 29536                                  exec_do_reloc:
 29537                                  	;mov	cx,[bp-10]
 29538 0000620A 8B4EF6                  	mov	CX,Exec_Rel_Fac
 29539 0000620D A1[2C14]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 29540 00006210 01C8                    	add	AX,CX			; and relocate him
 29541 00006212 A3[1814]                	mov	[exec_init_SS],AX 	; rms;NSS
 29542                                  
 29543 00006215 A1[2E14]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 29544 00006218 A3[1614]                	mov	[exec_init_SP],AX 	; rms;NSS
 29545                                  
 29546 0000621B C406[3214]              	les	AX,[exec_IP]		; rms;NSS
 29547 0000621F A3[1A14]                	mov	[exec_init_IP],AX 	; rms;NSS
 29548 00006222 8CC0                    	mov	AX,ES			; rms;NSS
 29549 00006224 01C8                    	add	AX,CX			; relocated...
 29550 00006226 A3[1C14]                	mov	[exec_init_CS],AX 	; rms;NSS
 29551                                  
 29552 00006229 31C9                    	xor	CX,CX
 29553 0000622B 8B16[3614]              	mov	DX,[exec_rle_table]	; rms;NSS
 29554                                  	;mov	bx,[bp-8]
 29555 0000622F 8B5EF8                  	mov	BX,Exec_FH
 29556 00006232 1E                      	push	DS
 29557 00006233 31C0                    	xor	AX,AX
 29558                                  	;invoke	$Lseek
 29559 00006235 E8FE0C                  	call	_$LSEEK
 29560 00006238 1F                      	pop	DS
 29561 00006239 7303                    	jnc	short exec_get_entries
 29562                                  
 29563                                  Exec_Bad_FileJ:
 29564 0000623B E9C5FE                  	jmp	Exec_Bad_File
 29565                                  
 29566                                  exec_get_entries:
 29567 0000623E 8B16[2414]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 29568                                  
 29569                                  exec_read_reloc:
 29570 00006242 52                      	push	DX
 29571                                  	;mov	dx,OPENBUF
 29572 00006243 BA[6003]                	mov	DX,Exec_Internal_Buffer
 29573                                  	;mov	cx,388
 29574 00006246 B98401                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (390>>2)<<2
 29575 00006249 1E                      	push	DS
 29576 0000624A E8DA01                  	call	ExecRead
 29577 0000624D 07                      	pop	ES
 29578 0000624E 5A                      	pop	DX
 29579 0000624F 72EA                    	jc	short Exec_Bad_FileJ
 29580                                  
 29581                                  	;mov	cx,97
 29582 00006251 B96100                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (390>>2)
 29583                                  					; Pointer to byte location in header
 29584                                  	;mov	di,OPENBUF
 29585 00006254 BF[6003]                	mov	DI,Exec_Internal_Buffer
 29586                                  	;mov	si,[bp-10]
 29587 00006257 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 29588                                  
 29589                                  exec_reloc_one:
 29590 0000625A 09D2                    	or	DX,DX			; Any more entries?
 29591 0000625C 7416                    	jz	short Exec_Set_PDBJ
 29592                                  
 29593                                  exec_get_addr:
 29594 0000625E 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 29595 00006261 8CD8                    	mov	AX,DS			; Relocate address of item
 29596                                  
 29597                                  	; MSDOS 6.0
 29598                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 29599                                  	;add	ax,[bp-28]
 29600 00006263 0346E4                  	add	AX,Exec_DMA_Save
 29601                                  
 29602 00006266 8ED8                    	mov	DS,AX
 29603 00006268 0137                    	add	[BX],SI
 29604 0000626A 83C704                  	add	DI,4
 29605 0000626D 4A                      	dec	DX
 29606 0000626E E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 29607                                  
 29608                                  	; We've exhausted a single buffer's worth. Read in the next
 29609                                  	; piece of the relocation table.
 29610                                  
 29611 00006270 06                      	push	ES
 29612 00006271 1F                      	pop	DS
 29613 00006272 EBCE                    	jmp	short exec_read_reloc
 29614                                  
 29615                                  Exec_Set_PDBJ:
 29616                                  
 29617                                  	; MSDOS 6.0
 29618                                  	;
 29619                                  	; We now determine if this is a buggy exe packed file and if 
 29620                                  	; so we patch in the right code. Note that fixexepatch will
 29621                                  	; point to a ret if dos loads low. The load segment as 
 29622                                  	; determined above will be in exec_dma_save
 29623                                  	;
 29624                                  	;push	es
 29625                                  	;push	ax			; M030
 29626                                  	;push	cx			; M030
 29627                                  	;mov	es,Exec_DMA_Save
 29628                                  	;mov	ax,[exec_init_CS]	; M030
 29629                                  	;mov	cx,[exec_init_IP]	; M030
 29630                                  	;call	word [fixexepatch]
 29631                                  	;call	word [Rational386PatchPtr]
 29632                                  	;pop	cx			; M030
 29633                                  	;pop	ax			; M030
 29634                                  	;pop	es
 29635                                  
 29636 00006274 E99D00                  	jmp	Exec_Set_PDB
 29637                                  
 29638                                  Exec_No_Memj:
 29639 00006277 E985FE                  	jmp	Exec_No_Mem
 29640                                  
 29641                                  	; we have a .COM file.	First, determine if we are merely
 29642                                  	; loading an overlay.
 29643                                  
 29644                                  Exec_Com_File:
 29645                                  	;test	byte [bp-5],2
 29646 0000627A F646FB02                	test	Exec_Func,exec_func_overlay
 29647 0000627E 740C                    	jz	short Exec_Alloc_Com_File
 29648                                  	;lds	si,[bp-4]
 29649 00006280 C576FC                  	lds	SI,Exec_Blk		; get arg block
 29650 00006283 AD                      	lodsw				; get load address
 29651                                  	;mov	[bp-20],ax
 29652 00006284 8946EC                  	mov	Exec_DMA,AX
 29653 00006287 B8FFFF                  	mov	AX,0FFFFh
 29654 0000628A EB34                    	jmp	SHORT Exec_Read_Block	; read it all!
 29655                                  
 29656                                  Exec_Chk_Com_Mem:			
 29657                                  	; MSDOS 6.0	     		; M063 - Start
 29658                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29659                                  	;mov	bl,[AllocMsave]
 29660                                  	;mov	[AllocMethod],bl	; restore original allocmethod
 29661                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29662                                  	;jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 29663                                  	;				; N: continue
 29664                                  	;
 29665                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29666                                  	;jz	short Exec_No_Memj	; N: no memory 
 29667                                  	;
 29668                                  	;mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 29669                                  	;xor	bx,bx			; M047: bx => free arena
 29670                                  	;call	ChangeOwner		; M047: free this block
 29671                                  	;
 29672                                  	;jmp	short Exec_Norm_Com_Alloc
 29673                                  	;				; M063 - End
 29674                                  	
 29675                                  	; We must allocate the max possible size block (ick!)
 29676                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 29677                                  	; size of block.
 29678                                  
 29679                                  Exec_Alloc_Com_File:
 29680                                  
 29681                                  	; MSDOS 6.0			; M000 -start
 29682                                  	;test	byte [AllocMethod],HIGH_FIRST
 29683                                  	;				; Q: is the alloc strat high_first
 29684                                  	;jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 29685                                  	;				; Y: set high_only bit
 29686                                  	;or	byte [AllocMethod],HIGH_ONLY
 29687                                  	;				; M000 - end
 29688                                  ;Exec_Norm_Com_Alloc:			; M000
 29689                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29690 0000628C BBFFFF                  	mov	BX,0FFFFh
 29691                                  	;invoke	$Alloc			; largest piece available as error
 29692 0000628F E8BD02                  	call	_$ALLOC
 29693 00006292 09DB                    	or	BX,BX
 29694                                  	; MSDOS 6.0
 29695                                  	;jz	short Exec_Chk_Com_Mem	; M000
 29696                                  	; MSDOS 3.3
 29697 00006294 74E1                    	jz	short Exec_No_Memj
 29698                                  
 29699                                  	;mov	[bp-16],bx
 29700 00006296 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 29701 00006299 53                      	push	BX
 29702                                  	;invoke	$ALLOC			; largest piece available as error
 29703 0000629A E8B202                  	call	_$ALLOC
 29704 0000629D 5B                      	pop	BX			; get size of block...
 29705                                  	;mov	[bp-18],ax
 29706 0000629E 8946EE                  	mov	Exec_Load_Block,AX
 29707 000062A1 83C010                  	add	AX,10h			; increment for header
 29708                                  	;mov	[bp-20],ax
 29709 000062A4 8946EC                  	mov	Exec_DMA,AX
 29710 000062A7 31C0                    	xor	AX,AX			; presume 64K read...
 29711 000062A9 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 29712 000062AD 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 29713                                  
 29714 000062AF 89D8                    	mov	AX,BX			; convert size to bytes
 29715 000062B1 B104                    	mov	CL,4
 29716 000062B3 D3E0                    	shl	AX,CL
 29717                                  	; MSDOS 6.0
 29718 000062B5 3D0002                          cmp     AX,200h                 ; enough memory for PSP and stack?
 29719                                  ;	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29720                                  ;	;jbe	short Exec_No_Memj	; M000: jump if not
 29721                                  	; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 29722                                  	;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29723 000062B8 76BD                    	jbe	short Exec_No_Memj	; M000: jump if not
 29724                                  
 29725                                  					; M047: size of the block is < 64K
 29726 000062BA 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 29727                                  
 29728                                  Exec_Read_Com:
 29729                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29730 000062BD 2D0001                  	sub	AX,100h 		; remember size of psp
 29731                                  
 29732                                  Exec_Read_Block:
 29733 000062C0 50                      	push	AX			; save number to read
 29734                                  	;mov	bx,[bp-8]
 29735 000062C1 8B5EF8                  	mov	BX,Exec_FH		; of com file
 29736 000062C4 31C9                    	xor	CX,CX			; but seek to 0:0
 29737 000062C6 89CA                    	mov	DX,CX
 29738 000062C8 31C0                    	xor	AX,AX			; seek relative to beginning
 29739                                  	;invoke	$Lseek			; back to beginning of file
 29740 000062CA E8690C                  	call	_$LSEEK
 29741 000062CD 59                      	pop	CX			; number to read
 29742                                  	;mov	ds,[bp-20]
 29743 000062CE 8E5EEC                  	mov	DS,Exec_DMA
 29744 000062D1 31D2                    	xor	DX,DX
 29745 000062D3 51                      	push	CX
 29746 000062D4 E85001                  	call	ExecRead
 29747 000062D7 5E                      	pop	SI			; get number of bytes to read
 29748 000062D8 7303                    	jnc	short OkRead
 29749                                  
 29750 000062DA E926FE                  	jmp	Exec_Bad_File
 29751                                  
 29752                                  	; 10/09/2018
 29753                                  OkRead:
 29754 000062DD 39F0                    	cmp	AX,SI			; did we read them all?
 29755                                  	; MSDOS 6.0
 29756                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 29757                                  	; MSDOS 3.3
 29758 000062DF 7496                    	jz	short Exec_No_Memj	; M00: exactly the wrong number...
 29759                                  	
 29760                                  	; MSDOS 6.0
 29761                                  	;mov	bl,[AllocMsave]		; M063
 29762                                  	;mov	[AllocMethod],bl	; M063: restore allocmethod
 29763                                  
 29764                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29765                                  	;test	byte [bp-5],2
 29766 000062E1 F646FB02                	test	Exec_Func,exec_func_overlay
 29767 000062E5 752D                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 29768                                  
 29769                                  	;mov	ax,[bp-20]
 29770 000062E7 8B46EC                  	mov	AX,Exec_DMA
 29771 000062EA 83E810                  	sub	AX,10h
 29772 000062ED 36A3[1C14]              	mov	[SS:exec_init_CS],AX
 29773 000062F1 36C706[1A14]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 29774                                  
 29775                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 29776                                  	; of 0 on stack.
 29777                                  
 29778 000062F8 81C6FE00                	add	SI,0FEh 		; make room for stack
 29779                                  
 29780                                  	; MSDOS 6.0
 29781 000062FC 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 29782 000062FF 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 29783 00006301 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 29784                                  
 29785                                  Exec_St_Ok:
 29786                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29787 00006305 368936[1614]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 29788 0000630A 36A3[1814]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 29789 0000630E 8ED8                    	mov	DS,AX
 29790 00006310 C7040000                	mov	WORD [SI],0		; 0 for return
 29791                                  
 29792                                  	; MSDOS 6.0
 29793                                  	;
 29794                                  	; M068
 29795                                  	;
 29796                                  	; We now determine if this is a Copy Protected App. If so the 
 29797                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 29798                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 29799                                  
 29800                                  	;call	word ptr [ChkCopyProt]	
 29801                                  
 29802                                  Exec_Set_PDB:
 29803                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29804                                  	;mov	bx,[bp-8]
 29805 00006314 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 29806 00006317 E81C01                  	call	Exec_Dealloc
 29807 0000631A 55                      	push	BP
 29808                                  	;invoke	$Close			; release the jfn
 29809 0000631B E8A60A                  	call	_$CLOSE
 29810 0000631E 5D                      	pop	BP
 29811 0000631F E81F01                  	call	Exec_Alloc
 29812                                  	;test	byte [bp-5],2
 29813 00006322 F646FB02                	test	Exec_Func,exec_func_overlay
 29814 00006326 7406                    	jz	short Exec_Build_Header
 29815                                  
 29816                                  	; MSDOS 6.0
 29817                                  	;call	Scan_Execname
 29818                                  	;call	Scan_Special_Entries
 29819                                  	;
 29820                                  ;SR;
 29821                                  ;The current lie strategy uses the PSP to store the lie version. However,
 29822                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 29823                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 29824                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 29825                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 29826                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 29827                                  ;issues the version check, it gets the lie version until the next overlay
 29828                                  ;call is issued.
 29829                                  ;
 29830                                  	;cmp	DriverLoad,0		;was Sysinit processing done?
 29831                                  	;je	norm_ovl		;yes, no special handling
 29832                                  	;push	si
 29833                                  	;push	es
 29834                                  	;les	si,BiosDataPtr		;get ptr to BIOS data block
 29835                                  	;cmp	byte ptr es:[si],0		;in Sysinit?
 29836                                  	;je	sysinit_done		;no, Sysinit is finished
 29837                                  	;
 29838                                  	;mov	es,CurrentPDB		;es = current PSP (Sysinit PSP)
 29839                                  	;push	Special_Version
 29840                                  	;pop	es:PDB_Version		;store lie version in Sysinit PSP
 29841                                  		;;; PDB.VERSION
 29842                                  	;jmp	short setver_done
 29843                                  ;sysinit_done:
 29844                                  	;mov	DriverLoad,0		;Sysinit done,special handling off
 29845                                  ;setver_done:
 29846                                  	;pop	es
 29847                                  	;pop	si
 29848                                  ;norm_ovl:
 29849                                  
 29850                                  	;leave
 29851 00006328 89EC                    	mov	sp,bp		
 29852 0000632A 5D                      	pop	bp
 29853                                  
 29854                                  	;transfer SYS_RET_OK		; overlay load -> done
 29855 0000632B E9CFB3                  	jmp	SYS_RET_OK
 29856                                  
 29857                                  Exec_Build_Header:
 29858                                  	;mov	dx,[bp-18]
 29859 0000632E 8B56EE                  	mov	DX,Exec_Load_Block
 29860                                  					; assign the space to the process
 29861                                  	;mov	si,1
 29862 00006331 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 29863                                  	;mov	ax,[bp-14]
 29864 00006334 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 29865 00006337 09C0                    	or	AX,AX
 29866 00006339 7405                    	jz	short No_Owner		; no environment
 29867                                  
 29868 0000633B 48                      	dec	AX			; point to header
 29869 0000633C 8ED8                    	mov	DS,AX
 29870 0000633E 8914                    	mov	[SI],DX 		; assign ownership
 29871                                  
 29872                                  No_Owner:
 29873                                  	;mov	ax,[bp-18]
 29874 00006340 8B46EE                  	mov	AX,Exec_Load_Block	; get load block pointer
 29875 00006343 48                      	dec	AX
 29876 00006344 8ED8                    	mov	DS,AX			; point to header
 29877 00006346 8914                    	mov	[SI],DX 		; assign ownership
 29878                                  
 29879                                  	; MSDOS 6.0
 29880                                  	;push	DS			;AN000;MS. make ES=DS
 29881                                  	;pop	ES			;AN000;MS.
 29882                                  	;mov	DI,Arena_Name		;AN000;MS. ES:DI points to destination
 29883                                  	;call	Scan_Execname		;AN007;MS. parse execname
 29884                                  	;				;	   ds:si->name, cx=name length
 29885                                  	;push	CX			;AN007;;MS. save for fake version
 29886                                  	;push	SI			;AN007;;MS. save for fake version
 29887                                  	;
 29888                                  ;MoveName:				;AN000;
 29889                                  	;lodsb				;AN000;;MS. get char
 29890                                  	;cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 29891                                  	;jz	Mem_Done		;AN000;;MS. no, move to header
 29892                                  	;				;AN000;
 29893                                  	;stosb				;AN000;;MS. move char
 29894                                  	;				; MSKK bug fix - limit length copied
 29895                                  	;cmp	di,16			; end of memory arena block?
 29896                                  	;jae	mem_done		; jump if so
 29897                                  	;
 29898                                  	;loop	movename		;AN000;;MS. continue
 29899                                  ;Mem_Done:				;AN000;
 29900                                  	;xor	AL,AL			;AN000;;MS. make ASCIIZ
 29901                                  	;cmp	DI,SIZE ARENA		;AN000;MS. if not all filled
 29902                                  	;jae	Fill8			;AN000;MS.
 29903                                  	;
 29904                                  	;stosb				;AN000;MS.
 29905                                  	;
 29906                                  ;Fill8:					;AN000;
 29907                                  	;pop	SI			;AN007;MS. ds:si -> file name
 29908                                  	;pop	CX			;AN007;MS.
 29909                                  	;
 29910                                  	;call	Scan_Special_Entries	;AN007;MS.
 29911                                  
 29912                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29913 00006348 52                      	push	DX
 29914                                  	;mov	si,[bp-16]
 29915 00006349 8B76F0                  	mov	SI,Exec_Size
 29916 0000634C 01D6                    	add	SI,DX
 29917                                  	;Invoke	$Dup_PDB		; ES is now PDB
 29918 0000634E E8DBBA                  	call	_$DUP_PDB
 29919 00006351 5A                      	pop	DX
 29920                                  
 29921                                  	;push	word [bp-14]
 29922 00006352 FF76F2                  	push	Exec_Environ
 29923                                  	;pop	WORD [ES:2Ch]
 29924 00006355 268F062C00              	pop	word [ES:PDB.ENVIRON]
 29925                                  
 29926                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 29927                                  					; version number in PSP
 29928                                   	;push	word [Special_Version]	; Set the DOS version number to
 29929                                  	;pop	word [ES:PDB_Version]	; to be used for this application
 29930                                  		; PDB.VERSION
 29931                                  
 29932                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 29933                                  	;lds	si,[bp-4]
 29934 0000635A C576FC                  	lds	SI,Exec_Blk		; get the block
 29935 0000635D 1E                      	push	DS			; save its location
 29936 0000635E 56                      	push	SI
 29937                                  	;lds	si, [si+6]
 29938 0000635F C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 29939                                  
 29940                                  	; DS points to user space 5C FCB
 29941                                  
 29942 00006362 B90C00                  	mov	CX,12			; copy drive, name and ext
 29943 00006365 51                      	push	CX
 29944 00006366 BF5C00                  	mov	DI,5Ch
 29945 00006369 8A1C                    	mov	BL,[SI]
 29946 0000636B F3A4                    	rep	movsb
 29947                                  
 29948                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 29949                                  
 29950 0000636D 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 29951 0000636F AB                      	stosw
 29952 00006370 AB                      	stosw
 29953                                  
 29954                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 29955                                  
 29956 00006371 59                      	pop	CX
 29957 00006372 5E                      	pop	SI			; get block
 29958 00006373 1F                      	pop	DS
 29959 00006374 1E                      	push	DS			; save (again)
 29960 00006375 56                      	push	SI
 29961                                  	;lds	si,[si+0Ah]
 29962 00006376 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 29963                                  
 29964                                  	; DS points to user space 6C FCB
 29965                                  
 29966 00006379 8A3C                    	mov	BH,[SI] 		; do same as above
 29967 0000637B F3A4                    	rep	movsb
 29968 0000637D AB                      	stosw
 29969 0000637E AB                      	stosw
 29970 0000637F 5E                      	pop	SI			; get block (last time)
 29971 00006380 1F                      	pop	DS
 29972                                  	;ld	si,[si+2]
 29973 00006381 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 29974                                  
 29975                                  	; DS points to user space 80 command line
 29976                                  
 29977 00006384 80C980                  	or	CL,80h
 29978 00006387 89CF                    	mov	DI,CX
 29979 00006389 F3A4                    	rep	movsb			; Wham!
 29980                                  
 29981                                  	; Process BX into default AX (validity of drive specs on args).
 29982                                  	; We no longer care about DS:SI.
 29983                                  
 29984 0000638B FEC9                    	dec	CL			; get 0FFh in CL
 29985 0000638D 88F8                    	mov	AL,BH
 29986 0000638F 30FF                    	xor	BH,BH
 29987                                  	;invoke	GetVisDrv
 29988 00006391 E8C705                  	call	GetVisDrv
 29989 00006394 7302                    	jnc	short Exec_BL
 29990                                  
 29991 00006396 88CF                    	mov	BH,CL
 29992                                  
 29993                                  Exec_BL:
 29994 00006398 88D8                    	mov	AL,BL
 29995 0000639A 30DB                    	xor	BL,BL
 29996                                  	;invoke	GetVisDrv
 29997 0000639C E8BC05                  	call	GetVisDrv
 29998 0000639F 7302                    	jnc	short Exec_Set_Return
 29999                                  
 30000 000063A1 88CB                    	mov	BL,CL
 30001                                  
 30002                                  Exec_Set_Return:
 30003                                  	;invoke	Get_User_Stack			; get his return address
 30004 000063A3 E865B2                  	call	Get_User_Stack
 30005                                  
 30006                                  	;push	word [si+14h]
 30007 000063A6 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30008                                  	;push	word [si+12h]
 30009 000063A9 FF7412                  	push	word [SI+user_env.user_IP]
 30010                                  	;push	word [si+14h]
 30011 000063AC FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30012                                  	;push	word [si+12h]
 30013 000063AF FF7412                  	push	word [SI+user_env.user_IP]
 30014                                  	;pop	word [ES:0Ah]
 30015 000063B2 268F060A00              	pop	WORD [ES:PDB.EXIT]
 30016                                  	;pop	word [ES:0Ch]
 30017 000063B7 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 30018                                  
 30019 000063BC 31C0                    	xor	AX,AX
 30020 000063BE 8ED8                    	mov	DS,AX
 30021                                  					; save them where we can get them
 30022                                  					; later when the child exits.
 30023                                  	;pop	word [88h]
 30024 000063C0 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 30025                                  	;pop	word [90h]
 30026 000063C4 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 30027                                  
 30028 000063C8 36C706[DA02]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 30029 000063CF 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	; SS Override
 30030 000063D4 368C1E[DC02]            	mov	[SS:DMAADD+2],DS	; SS Override
 30031                                  
 30032                                  	;test	byte [bp-5],1
 30033 000063D9 F646FB01                	test	Exec_Func,exec_func_no_execute
 30034 000063DD 7427                    	jz	short exec_go
 30035                                  
 30036 000063DF 36C536[1614]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 30037                                  	;les	di,[bp-4]
 30038 000063E4 C47EFC                  	les	DI,Exec_Blk		; and block for return
 30039                                  	;mov	[es:di+10h],ds
 30040 000063E7 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 30041                                  
 30042 000063EB 4E                      	dec	SI			; 'push' default AX
 30043 000063EC 4E                      	dec	SI
 30044 000063ED 891C                    	mov	[SI],BX 		; save default AX reg
 30045                                  	;mov	[es:di+0Eh], si
 30046 000063EF 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 30047                                  
 30048 000063F3 36C506[1A14]            	lds	AX,[SS:exec_init_IP]	; SS Override
 30049                                  	;mov	[es:di+14h],ds
 30050 000063F8 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 30051                                  	;mov	[es:di+12h],ax
 30052 000063FC 26894512                	mov	[ES:DI+EXEC1.IP],AX
 30053                                  	
 30054                                  	;leave
 30055 00006400 89EC                    	mov	sp,bp
 30056 00006402 5D                      	pop	bp	
 30057                                  
 30058                                  	;transfer SYS_RET_OK
 30059 00006403 E9F7B2                  	jmp	SYS_RET_OK
 30060                                  
 30061                                  exec_go:
 30062 00006406 36C536[1A14]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 30063 0000640B 36C43E[1614]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 30064 00006410 8CC0                    	mov	AX,ES
 30065                                  
 30066                                  	; MSDOS 6.0
 30067                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 30068                                  	;je	short Xfer_To_User	; N: transfer control to user
 30069                                  
 30070                                  	;push	ds			; Y: control must go to low mem stub
 30071                                  	;	
 30072                                  	;push	cs			;    where we disable a20 and Xfer 
 30073                                  	;pop	ds			;    control to user 
 30074                                  	;
 30075                                  	;or	byte [DOS_FLAG],EXECA20OFF ; M068:
 30076                                  	;				; M004: Set bit to signal int 21
 30077                                  	;				; ah = 25 & ah= 49. See dossym.inc 
 30078                                  	;				; under TAG M003 & M009 for 
 30079                                  	;				; explanation
 30080                                  	;mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 30081                                  	;				; M068: going to be turned OFF.
 30082                                  	;
 30083                                  	;mov	ax,ds			; ax = segment of low mem stub
 30084                                  	;pop	ds
 30085                                  	;
 30086                                  	;push	ax			; ret far into the low mem stub
 30087                                  	;mov	ax,Disa20_Xfer
 30088                                  	;push	ax
 30089                                  	;mov	AX,ES			; restore ax
 30090                                  	;retf
 30091                                  
 30092                                  Xfer_To_User:
 30093                                  	; DS:SI points to entry point
 30094                                  	; AX:DI points to initial stack
 30095                                  	; DX has PDB pointer
 30096                                  	; BX has initial AX value
 30097                                  
 30098 00006412 FA                      	cli
 30099                                  	; 15/08/2018
 30100 00006413 36C606[CF02]00          	mov	BYTE [SS:INDOS],0	; SS Override
 30101                                  
 30102 00006419 8ED0                    	mov	SS,AX			; set up user's stack
 30103 0000641B 89FC                    	mov	SP,DI			; and SP
 30104 0000641D FB                      	sti
 30105                                  
 30106 0000641E 1E                      	push	DS			; fake long call to entry
 30107 0000641F 56                      	push	SI
 30108 00006420 8EC2                    	mov	ES,DX			; set up proper seg registers
 30109 00006422 8EDA                    	mov	DS,DX
 30110 00006424 89D8                    	mov	AX,BX			; set up proper AX
 30111                                  
 30112 00006426 CB                      	retf
 30113                                  
 30114                                  ; 04/08/2018 - Retro DOS v3.0
 30115                                  
 30116                                  ;----------------------------------------------------------------------------
 30117                                  ;
 30118                                  ;----------------------------------------------------------------------------
 30119                                  
 30120                                  ExecRead:
 30121 00006427 E80C00                  	CALL	Exec_Dealloc
 30122                                  	;mov	bx,[bp-8]
 30123 0000642A 8B5EF8                  	MOV	bx,Exec_FH
 30124 0000642D 55                      	PUSH	BP
 30125 0000642E E8AB0A                  	call	_$READ
 30126 00006431 5D                      	POP	BP
 30127 00006432 E80C00                  	CALL	Exec_Alloc
 30128 00006435 C3                      	retn
 30129                                  
 30130                                  ;----------------------------------------------------------------------------
 30131                                  ;
 30132                                  ;----------------------------------------------------------------------------
 30133                                  
 30134                                  Exec_Dealloc:
 30135 00006436 53                      	push	BX
 30136                                  	;mov	bx,0
 30137 00006437 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 30138 00006439 E829BC                  	call	EcritMem
 30139 0000643C E81000                  	call	ChangeOwners
 30140 0000643F 5B                      	pop	BX
 30141 00006440 C3                      	retn
 30142                                  
 30143                                  ;----------------------------------------------------------------------------
 30144                                  ;
 30145                                  ;----------------------------------------------------------------------------
 30146                                  
 30147                                  Exec_Alloc:
 30148 00006441 53                      	push	BX
 30149                                  	;mov	bx,[SS:CurrentPDB]	; SS Override
 30150 00006442 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 30151 00006447 E80500                  	call	ChangeOwners
 30152 0000644A E820BC                  	call	LcritMem
 30153 0000644D 5B                      	pop	BX
 30154 0000644E C3                      	retn
 30155                                  
 30156                                  ;----------------------------------------------------------------------------
 30157                                  ;
 30158                                  ;----------------------------------------------------------------------------
 30159                                  
 30160                                  ChangeOwners:
 30161 0000644F 9C                      	pushf
 30162 00006450 50                      	push	AX
 30163                                  	;mov	ax,[bp-14]
 30164 00006451 8B46F2                  	mov	AX,Exec_Environ
 30165 00006454 E80900                  	call	ChangeOwner
 30166                                  	;mov	ax,[bp-18]
 30167 00006457 8B46EE                  	mov	AX,Exec_Load_Block
 30168 0000645A E80300                  	call	ChangeOwner
 30169 0000645D 58                      	pop	AX
 30170 0000645E 9D                      	popf
 30171                                  chgown_retn:
 30172 0000645F C3                      	retn
 30173                                  
 30174                                  ;----------------------------------------------------------------------------
 30175                                  ;
 30176                                  ;----------------------------------------------------------------------------
 30177                                  
 30178                                  ChangeOwner:
 30179 00006460 09C0                    	or	AX,AX			; is area allocated?
 30180 00006462 74FB                    	jz	short chgown_retn	; no, do nothing
 30181 00006464 48                      	dec	AX
 30182 00006465 1E                      	push	DS
 30183 00006466 8ED8                    	mov	DS,AX
 30184 00006468 891E0100                	mov	[ARENA.OWNER],BX
 30185 0000646C 1F                      	pop	DS
 30186 0000646D C3                      	retn
 30187                                  
 30188                                  
 30189                                  ; MSDOS 6.0
 30190                                  ;----------------------------------------------------------------------------
 30191                                  ;
 30192                                  ;----------------------------------------------------------------------------
 30193                                  
 30194                                  ;Procedure	Scan_Execname,near
 30195                                  ;	ASSUME	SS:DosData
 30196                                  ;
 30197                                  ;	lds	SI,ExecName		; DS:SI points to name
 30198                                  ;Entry	Scan_Execname1			; M028
 30199                                  ;Save_Begin:				;
 30200                                  ;	mov	CX,SI			; CX= starting addr
 30201                                  ;Scan0:					;
 30202                                  ;	lodsb				; get char
 30203                                  ;
 30204                                  ;	cmp	AL,':'			; is ':' , may be A:name
 30205                                  ;	jz	save_begin		; yes, save si
 30206                                  ;	cmp	AL,'\'                  ; is '\', may be A:\name
 30207                                  ;	jz	save_begin		; yes, save si
 30208                                  ;	cmp	AL,0			; is end of name
 30209                                  ;	jnz	scan0			; no, continue scanning
 30210                                  ;	sub	SI,CX			; get name's length
 30211                                  ;	xchg	SI,CX			; cx= length, si= starting addr
 30212                                  ;
 30213                                  ;	return
 30214                                  ;
 30215                                  ;EndProc Scan_Execname
 30216                                  
 30217                                  ; MSDOS 6.0
 30218                                  ;----------------------------------------------------------------------------
 30219                                  ;
 30220                                  ;----------------------------------------------------------------------------
 30221                                  
 30222                                  ;Procedure    Scan_Special_Entries,near
 30223                                  ;	assume	SS:DOSDATA
 30224                                  ;
 30225                                  ;	dec	CX			; cx= name length
 30226                                  ;;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 30227                                  ;					;reset to current version
 30228                                  ;	mov    [Special_Version],(Minor_Version SHL 8) + Major_Version
 30229                                  ;;***	call	Reset_Version
 30230                                  ;
 30231                                  ;;M060	push	SS
 30232                                  ;;M060	pop	ES
 30233                                  ;
 30234                                  ;	les	DI,SS:UU_IFS_DOS_CALL	;M060; ES:DI --> Table in SETVER.SYS
 30235                                  ;	mov	AX,ES			;M060; First do a NULL ptr check to
 30236                                  ;	or	AX,DI			;M060; be sure the table exists
 30237                                  ;	jz	End_List		;M060; If ZR then no table
 30238                                  ;
 30239                                  ;GetEntries:
 30240                                  ;	mov	AL,ES:[DI]		; end of list
 30241                                  ;	or	AL,AL
 30242                                  ;	jz	End_List		; yes
 30243                                  ;
 30244                                  ;	mov	[Temp_Var2],DI		; save di
 30245                                  ;	cmp	AL,CL			; same length ?
 30246                                  ;	jnz	SkipOne 		; no
 30247                                  ;
 30248                                  ;	inc	DI			; es:di -> special name
 30249                                  ;	push	CX			; save length and name addr
 30250                                  ;	push	SI
 30251                                  ;
 30252                                  ;;
 30253                                  ;; M050 - BEGIN
 30254                                  ;;
 30255                                  ;	push	ax			; save len
 30256                                  ;sse_next_char:
 30257                                  ;	lodsb
 30258                                  ;	call	UCase
 30259                                  ;	scasb
 30260                                  ;	jne	Not_Matched
 30261                                  ;	loop	sse_next_char
 30262                                  ;	
 30263                                  ;;
 30264                                  ;;	repz	cmpsb			; same name ?
 30265                                  ;;
 30266                                  ;;	jnz	Not_Matched		; no
 30267                                  ;;
 30268                                  ;	pop	ax			; take len off the stack
 30269                                  ;;
 30270                                  ;; M050 - END
 30271                                  ;;
 30272                                  ;	mov	AX,ES:[DI]		; get special version
 30273                                  ;	mov	[Special_Version],AX	; save it
 30274                                  ;
 30275                                  ;;***	mov	AL,ES:[DI+2]		; get fake count
 30276                                  ;;***	mov	[Fake_Count],AL 	; save it
 30277                                  ;
 30278                                  ;	pop	SI
 30279                                  ;	pop	CX
 30280                                  ;	jmp	SHORT end_list
 30281                                  ;
 30282                                  ;Not_Matched:
 30283                                  ;	pop	ax			; get len from stack ; M050
 30284                                  ;	pop	SI			; restore si,cx
 30285                                  ;	pop	CX
 30286                                  ;
 30287                                  ;SkipOne:
 30288                                  ;	mov	DI,[Temp_Var2]		; restore old di use SS Override
 30289                                  ;	xor	AH,AH			; position to next entry
 30290                                  ;	add	DI,AX
 30291                                  ;
 30292                                  ;	add	DI,3			; DI -> next entry length
 30293                                  ;;***	add	DI,4			; DI -> next entry length
 30294                                  ;
 30295                                  ;	jmp	Getentries
 30296                                  ;
 30297                                  ;End_List:
 30298                                  ;	return
 30299                                  ;
 30300                                  ;EndProc Scan_Special_Entries
 30301                                  
 30302                                  
 30303                                  ; 04/08/2018 - Retro DOS v3.0
 30304                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 30305                                  
 30306                                  ;----------------------------------------------------------------------------
 30307                                  ;SUBTTL Terminate and stay resident handler
 30308                                  ;
 30309                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 30310                                  ;	    truncate the current block.
 30311                                  ;
 30312                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 30313                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 30314                                  ;	    and restoring the vectors.
 30315                                  ;
 30316                                  ;----------------------------------------------------------------------------
 30317                                  
 30318                                  _$KEEP_PROCESS:
 30319 0000646E 50                      	push	AX			; keep exit code around
 30320                                  	;mov	byte [SS:EXIT_TYPE],3
 30321 0000646F 36C606[1705]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 30322 00006475 368E06[DE02]            	mov	ES,[SS:CurrentPDB]
 30323 0000647A 83FA06                  	cmp	DX,6h			; keep enough space around for system
 30324 0000647D 7303                    	jae	short Keep_Shrink	; info
 30325                                  
 30326 0000647F BA0600                  	mov	DX,6h
 30327                                  
 30328                                  Keep_Shrink:
 30329 00006482 89D3                    	mov	BX,DX
 30330 00006484 53                      	push	BX
 30331 00006485 06                      	push	ES
 30332 00006486 E8BF01                  	call	_$SETBLOCK		; ignore return codes.
 30333 00006489 1F                      	pop	DS
 30334 0000648A 5B                      	pop	BX
 30335 0000648B 7207                    	jc	short Keep_Done		; failed on modification
 30336                                  
 30337 0000648D 8CD8                    	mov	AX,DS
 30338 0000648F 01D8                    	add	AX,BX
 30339                                  	;mov	[2],ax
 30340 00006491 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 30341                                  
 30342                                  Keep_Done:
 30343 00006494 58                      	pop	AX
 30344 00006495 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 30345                                  
 30346                                  ;----------------------------------------------------------------------------
 30347                                  ;
 30348                                  ;----------------------------------------------------------------------------
 30349                                  
 30350                                  STAY_RESIDENT:
 30351                                  	;mov	ax,3100h
 30352 00006497 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 30353 0000649A 83C20F                  	add	DX,15
 30354 0000649D D1DA                    	rcr	DX,1
 30355 0000649F B103                    	mov	CL,3
 30356 000064A1 D3EA                    	shr	DX,CL
 30357                                  
 30358 000064A3 E904B0                  	jmp	COMMAND
 30359                                  
 30360                                  ;----------------------------------------------------------------------------
 30361                                  ;SUBTTL $EXIT - return to parent process
 30362                                  ;   Assembler usage:
 30363                                  ;	    MOV     AL, code
 30364                                  ;	    MOV     AH, Exit
 30365                                  ;	    INT     int_command
 30366                                  ;   Error return:
 30367                                  ;	    None.
 30368                                  ;
 30369                                  ;----------------------------------------------------------------------------
 30370                                  
 30371                                  _$EXIT:
 30372                                  	; 04/08/2018 - Retro DOS v3.0
 30373                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 30374 000064A6 30E4                    	xor	AH,AH
 30375 000064A8 368626[F902]            	xchg	AH,[SS:DidCTRLC]
 30376 000064AD 08E4                    	or	AH,AH
 30377                                  	;mov	BYTE [SS:EXIT_TYPE],0
 30378 000064AF 36C606[1705]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 30379 000064B5 7406                    	jz	short exit_inner
 30380                                  	;mov	BYTE [SS:EXIT_TYPE],1
 30381 000064B7 36C606[1705]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 30382                                  
 30383                                  	;entry	Exit_inner
 30384                                  exit_inner:
 30385 000064BD E84BB1                  	call	Get_User_Stack		;PBUGBUG
 30386                                  
 30387 000064C0 36FF36[DE02]            	push	word [ss:CurrentPDB]
 30388                                  	;pop	word [si+14h]
 30389 000064C5 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 30390 000064C8 EB08                    	jmp	short abort_inner
 30391                                  
 30392                                  ;BREAK <$ABORT -- Terminate a process>
 30393                                  ;----------------------------------------------------------------------------
 30394                                  ; Inputs:
 30395                                  ;	user_CS:00 must point to valid program header block
 30396                                  ; Function:
 30397                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 30398                                  ;	to the terminate address
 30399                                  ; Returns:
 30400                                  ;	TO THE TERMINATE ADDRESS
 30401                                  ;----------------------------------------------------------------------------
 30402                                  
 30403                                  _$ABORT:
 30404 000064CA 30C0                    	xor	AL,AL
 30405                                  	;mov	byte [SS:EXIT_TYPE],0
 30406                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 30407 000064CC 36C606[1705]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 30408                                  
 30409                                  	; abort_inner must have AL set as the exit code! The exit type
 30410                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 30411                                  	; to be correct as the one that is terminating.
 30412                                  
 30413                                  abort_inner:
 30414 000064D2 368A26[1705]            	mov	AH,[SS:EXIT_TYPE]
 30415 000064D7 36A3[E202]              	mov	[SS:exit_code],AX
 30416 000064DB E82DB1                  	call	Get_User_Stack
 30417                                  
 30418                                  	;mov	ds,[si+14h]
 30419 000064DE 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 30420 000064E1 31C0                    	xor	AX,AX
 30421 000064E3 8EC0                    	mov	ES,AX
 30422                                  	;mov	si,10
 30423 000064E5 BE0A00                  	mov	SI,SAVEXIT
 30424                                  	;mov	di,88h
 30425 000064E8 BF8800                  	mov	DI,addr_int_terminate
 30426 000064EB A5                      	movsw
 30427 000064EC A5                      	movsw
 30428 000064ED A5                      	movsw
 30429 000064EE A5                      	movsw
 30430 000064EF A5                      	movsw
 30431 000064F0 A5                      	movsw
 30432 000064F1 E98EF4                  	jmp	reset_environment
 30433                                  
 30434                                  ; MSDOS 6.0
 30435                                  ;----------------------------------------------------------------------------
 30436                                  ;
 30437                                  ; fixexepatch will point to this is DOS loads low. 
 30438                                  ;
 30439                                  ;----------------------------------------------------------------------------
 30440                                  
 30441                                  ;retexepatch	proc	near
 30442                                  ;	
 30443                                  ;	ret
 30444                                  ;
 30445                                  ;retexepatch 	endp
 30446                                  
 30447                                  
 30448                                  ;============================================================================
 30449                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 30450                                  ;============================================================================
 30451                                  ; 04/08/2018 - Retro DOS v3.0
 30452                                  
 30453                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 30454                                  
 30455                                  ;**
 30456                                  ;	Microsoft Confidential
 30457                                  ;	Copyright (C) Microsoft Corporation 1991
 30458                                  ;	All Rights Reserved.
 30459                                  ;
 30460                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 30461                                  ;	I/O specs are defined in DISPATCH.
 30462                                  ;
 30463                                  ;	$ALLOC
 30464                                  ;	$SETBLOCK
 30465                                  ;	$DEALLOC
 30466                                  ;	$AllocOper
 30467                                  ;	arena_free_process
 30468                                  ;	arena_next
 30469                                  ;	check_signature
 30470                                  ;	Coalesce
 30471                                  ;
 30472                                  ;	Modification history:
 30473                                  ;
 30474                                  ;	    Created: ARR 30 March 1983
 30475                                  ;
 30476                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 30477                                  ;		      M003 - added support for link/unlink UMBs from
 30478                                  ;			     DOS arena chain. 7/18/90
 30479                                  ;		      M009 - Added error returns invalid function and 
 30480                                  ;			     arena trashed in set link state call.
 30481                                  ;		      M010 - Release UMB arenas allocated to current PDB
 30482                                  ;			     if UMB_HEAD is initialized.
 30483                                  ;
 30484                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 30485                                  ;			     support. Please see under M009 in 
 30486                                  ;			     ..\inc\dossym.inc. 8/31/90.
 30487                                  ;
 30488                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 30489                                  ;			     sure that umb_head arena is valid and also make
 30490                                  ;			     sure that the previous arena is pointing to 
 30491                                  ;			     umb_head.
 30492                                  ;
 30493                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 30494                                  ;			     set allloc strategy.
 30495                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 30496                                  ;			     bx in AllocSetStrat.
 30497                                  ;
 30498                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 30499                                  ;			     a bit to indicate to dos dispatcher to turn
 30500                                  ;			     a20 off before iret. See M016.
 30501                                  ;
 30502                                  
 30503                                  ;	BREAK	<memory allocation utility routines>
 30504                                  
 30505                                  
 30506                                  ; 15/04/2018 - Retro DOS v2.0
 30507                                  ;----------------------------------------------------------------------------
 30508                                  ; xenix memory calls for MSDOS
 30509                                  ;
 30510                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 30511                                  ; arena_owner_system are all equal to zero and are contained in DI.
 30512                                  ;
 30513                                  ;INCLUDE DOSSEG.ASM
 30514                                  
 30515                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30516                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30517                                  
 30518                                  ;.xlist
 30519                                  ;.xcref
 30520                                  ;INCLUDE DOSSYM.ASM
 30521                                  ;INCLUDE DEVSYM.ASM
 30522                                  ;.cref
 30523                                  ;.list
 30524                                  
 30525                                  ;TITLE ALLOC.ASM - memory arena manager
 30526                                  ;NAME Alloc
 30527                                  
 30528                                  ;SUBTTL memory allocation utility routines
 30529                                  ;PAGE
 30530                                  ;
 30531                                  ; arena data
 30532                                  ;
 30533                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 30534                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 30535                                  ;       i_need  FirstArena,WORD         ; first free block found
 30536                                  ;       i_need  BestArena,WORD          ; best free block found
 30537                                  ;       i_need  LastArena,WORD          ; last free block found
 30538                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 30539                                  
 30540                                  ;**	Arena_Free_Process
 30541                                  ;----------------------------------------------------------------------------
 30542                                  ;	Free all arena blocks allocated to a prOcess
 30543                                  ;
 30544                                  ;	ENTRY	(bx) = PID of process
 30545                                  ;	EXIT	none
 30546                                  ;	USES	????? BUGBUG
 30547                                  ;----------------------------------------------------------------------------
 30548                                  
 30549                                  arena_free_process:
 30550                                  	; 04/08/2018 - Retro DOS v3.0
 30551 000064F4 36A1[2400]                      MOV	AX,[SS:arena_head]
 30552                                  arena_free_process_start:
 30553 000064F8 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 30554                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 30555 000064FB E81F00                          CALL    check_signature         ; ES <- AX, check for valid block
 30556                                  
 30557                                  arena_free_process_loop:
 30558                                          ;retc
 30559 000064FE 722C                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 30560 00006500 06                      	PUSH    ES
 30561 00006501 1F                              POP     DS
 30562                                  	;cmp	[1],bx 
 30563 00006502 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 30564 00006506 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 30565                                  	; 20/05/2019
 30566                                  	;mov	[1],di
 30567 00006508 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 30568                                  
 30569                                  arena_free_next:
 30570                                  	;cmp	byte [di],5Ah ;'Z'
 30571 0000650C 803D5A                          CMP     BYTE [DI],arena_signature_end
 30572                                                                          ; end of road, Jack?
 30573                                          ;retz				; never come back no more
 30574 0000650F 741B                    	JZ	SHORT AFP_RETN  ;msdos 3.3 (& MSDOS 2.11)
 30575                                  	; MSDOS 6.0
 30576                                  	;jz	short arena_chk_umbs
 30577                                          
 30578 00006511 E80200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 30579 00006514 EBE8                            JMP     SHORT arena_free_process_loop
 30580                                  
 30581                                  	; MSDOS 6.0
 30582                                  ;arena_chk_umbs:			; M010 - Start
 30583                                  	;mov	ax,[umb_head]		; ax = umb_head
 30584                                  	;cmp	ax,0FFFFh		; Q: is umb_head initialized
 30585                                  	;je	short ret_label		; N: we're done
 30586                                  	;
 30587                                  	;mov	di,ds			; di = last arena
 30588                                  	;cmp	di,ax			; Q: is last arena above umb_head
 30589                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 30590                                  	;jmp	short arena_free_process_start
 30591                                  					; M010 - End
 30592                                  
 30593                                  ;AFP_RETN:
 30594                                  ;	RETN
 30595                                  
 30596                                  ;	BREAK	<Arena Helper Routines>
 30597                                  
 30598                                  ;**	Arena_Next - Find Next item in Arena
 30599                                  ;----------------------------------------------------------------------------
 30600                                  ;	ENTRY	DS - pointer to block head
 30601                                  ;		(di) = 0
 30602                                  ;	EXIT	AX,ES - pointers to next head
 30603                                  ;		'C' set iff arena damaged
 30604                                  ;----------------------------------------------------------------------------
 30605                                  
 30606                                  arena_next:
 30607 00006516 8CD8                            MOV     AX,DS                   ; AX <- current block
 30608 00006518 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 30609 0000651C 40                              INC     AX                      ; remember that header!
 30610                                  ;
 30611                                  ;       fall into check_signature and return
 30612                                  ;
 30613                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 30614                                  ;       RET
 30615                                  
 30616                                  ;**	Check_Signature - Check Memory Block Signature
 30617                                  ;----------------------------------------------------------------------------
 30618                                  ;	ENTRY	(AX) = address of block header
 30619                                  ;		(di) = 0
 30620                                  ;	EXIT	 ES = AX
 30621                                  ;		'C' clear if signature good
 30622                                  ;		'C' set if signature bad
 30623                                  ;	USES	ES, Flags
 30624                                  ;----------------------------------------------------------------------------
 30625                                  
 30626                                  check_signature:        
 30627                                  
 30628 0000651D 8EC0                    	MOV     ES,AX                   ; ES <- AX
 30629                                  	;cmp	byte [es:di],4Dh ; 'M'
 30630 0000651F 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 30631                                                                          ; IF next signature = not_end THEN
 30632 00006523 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 30633                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 30634 00006525 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 30635                                                                          ; IF next signature = end then
 30636 00006529 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 30637 0000652B F9                              STC                             ; set error
 30638                                  ;ret_label: ; MSDOS 6.0
 30639                                  AFP_RETN:
 30640                                   	;  Retro DOS v.20 - 05/03/2018
 30641                                  check_signature_ok:
 30642                                  COALESCE_RETN:
 30643 0000652C C3                      	RETN
 30644                                  
 30645                                  ;**	Coalesce - Combine free blocks ahead with current block
 30646                                  ;----------------------------------------------------------------------------
 30647                                  ;	Coalesce adds the block following the argument to the argument block,
 30648                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 30649                                  ;	some callers (such as $setblock) use it to join a free block to it's
 30650                                  ;	preceeding allocated block.
 30651                                  ;
 30652                                  ;	ENTRY	(ds) = pointer to the head of a free block
 30653                                  ;		(di) = 0
 30654                                  ;	EXIT	'C' clear if OK
 30655                                  ;		  (ds) unchanged, this block updated
 30656                                  ;		  (ax) = address of next block, IFF not at end
 30657                                  ;		'C' set if arena trashed
 30658                                  ;	USES	(cx)
 30659                                  ;----------------------------------------------------------------------------
 30660                                          
 30661                                  Coalesce:
 30662                                  	;cmp	byte [di],5Ah ; 'Z'
 30663 0000652D 803D5A                  	CMP     BYTE [DI],arena_signature_end
 30664                                                                          ; IF current signature = END THEN
 30665                                          ;retz				;   GOTO ok
 30666 00006530 74FA                            jz	short COALESCE_RETN
 30667 00006532 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 30668                                          ;retc				; IF no error THEN GOTO check
 30669 00006535 72F5                    	jc	short COALESCE_RETN
 30670                                  
 30671                                  coalesce_check:
 30672                                  	;cmp	[es:1],di
 30673 00006537 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 30674                                          ;retnz				; IF next block isnt free THEN return
 30675 0000653C 75EE                            JNZ	SHORT COALESCE_RETN
 30676                                  	;mov	cx,[ES:3]
 30677 0000653E 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 30678 00006543 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 30679                                          ;ADD	[3],CX
 30680 00006544 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 30681 00006548 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 30682 0000654B 880D                            MOV     [DI],CL
 30683 0000654D EBDE                            JMP     SHORT Coalesce		; try again
 30684                                  
 30685                                  ; 04/08/2018 - Retro DOS v3.0
 30686                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 30687                                  
 30688                                  ;	BREAK  <$Alloc - allocate space in memory>
 30689                                  
 30690                                  ; MSDOS 6.0
 30691                                  ;----------------------------------------------------------------------------
 30692                                  ;**	$Alloc - Allocate Memory Space
 30693                                  ;
 30694                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 30695                                  ;	Alloc returns a pointer to a free block of memory that
 30696                                  ;	has the requested size in paragraphs.
 30697                                  ;
 30698                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 30699                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 30700                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 30701                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 30702                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 30703                                  ;
 30704                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 30705                                  ;	starts from arena_head.
 30706                                  ;
 30707                                  ;	Assembler usage:
 30708                                  ;           MOV     BX,size
 30709                                  ;           MOV     AH,Alloc
 30710                                  ;           INT     21h
 30711                                  ;
 30712                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 30713                                  ;	so that we start searching the arena at it's first non-trivial free
 30714                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 30715                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 30716                                  ;	doesn't have too many memory objects in it beyond the first free one.
 30717                                  ;	verify that this is true; if so, this can stay as is
 30718                                  ;
 30719                                  ;	ENTRY	(bx) = requested size, in bytes
 30720                                  ;		(DS) = (ES) = DOSGROUP
 30721                                  ;	EXIT	'C' clear if memory allocated
 30722                                  ;		  (ax:0) = address of requested memory
 30723                                  ;		'C' set if request failed
 30724                                  ;		  (AX) = error_not_enough_memory
 30725                                  ;		    (bx) = max size we could have allocated
 30726                                  ;		  (ax) = error_arena_trashed
 30727                                  ;	USES	All
 30728                                  ;----------------------------------------------------------------------------
 30729                                  
 30730                                  ; MSDOS 2.11 (& MSDOS 3.3)
 30731                                  ;----------------------------------------------------------------------------
 30732                                  ;SUBTTL $Alloc - allocate space in memory
 30733                                  ;
 30734                                  ;   Assembler usage:
 30735                                  ;           MOV     BX,size
 30736                                  ;           MOV     AH,Alloc
 30737                                  ;           INT     21h
 30738                                  ;         AX:0 is pointer to allocated memory
 30739                                  ;         BX is max size if not enough memory
 30740                                  ;
 30741                                  ;   Description:
 30742                                  ;           Alloc returns  a  pointer  to  a  free  block of
 30743                                  ;       memory that has the requested  size  in  paragraphs.
 30744                                  ;
 30745                                  ;   Error return:
 30746                                  ;           AX = error_not_enough_memory
 30747                                  ;              = error_arena_trashed
 30748                                  ;----------------------------------------------------------------------------
 30749                                  
 30750                                  _$ALLOC:
 30751                                  	; 04/08/2018 - Retro DOS v3.0
 30752                                  	;EnterCrit critMem
 30753 0000654F E813BB                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 30754                                  
 30755                                  	; MSDOS 6.0
 30756                                  	;mov	ax,[arena_head]
 30757                                  	;mov	[start_arena],ax	; assume LOW_FIRST
 30758                                  	;			
 30759                                  	;test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 30760                                  	;				; Q: should we start scanning from 
 30761                                  	;				;    UMB's
 30762                                  	;jz	short norm_alloc	; N: scan from arena_head
 30763                                  	;	
 30764                                  	;;cmp	word [umb_head],-1	; Q: Has umb_head been initialized
 30765                                  	;;je	short norm_alloc	; N: scan from arena_head
 30766                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30767                                  	;jz	short norm_alloc	; N: scan from arena_head
 30768                                  	;
 30769                                  	;mov	ax,[umb_head]
 30770                                  	;mov	[start_arena],ax	; start_arena = umb_head
 30771                                  	;
 30772                                  					; M000 - end
 30773                                  ;norm_alloc:
 30774 00006552 31C0                            XOR     AX,AX
 30775 00006554 89C7                            MOV     DI,AX
 30776                                  	; 15/03/2018
 30777 00006556 36A3[EC02]                      MOV     [SS:FirstArena],AX	; init the options
 30778 0000655A 36A3[EE02]                      MOV     [SS:BestArena],AX
 30779 0000655E 36A3[F002]                      MOV     [SS:LastArena],AX
 30780 00006562 50                              PUSH    AX                      ; alloc_max <- 0
 30781                                  	; 04/08/2018
 30782                                  start_scan:
 30783                                  	; MSDOS 6.0
 30784                                  	;mov	ax,[SS:start_arena]	; M000: AX <- beginning of arena
 30785                                  	;
 30786 00006563 36A1[2400]              	MOV     AX,[SS:arena_head]	; AX <- beginning of arena
 30787 00006567 E8B3FF                  	CALL    check_signature         ; ES <- AX, carry set if error
 30788 0000656A 7212                            JC      SHORT alloc_err		; IF error THEN GOTO err
 30789                                  
 30790                                  alloc_scan:
 30791 0000656C 06                              PUSH    ES
 30792 0000656D 1F                              POP     DS                      ; DS <- ES
 30793 0000656E 393E0100                        CMP     [ARENA.OWNER],DI
 30794 00006572 742A                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 30795                                  
 30796                                  alloc_next:
 30797                                  	; MSDOS 6.0			; M000 - start 
 30798                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30799                                  	;jz	short norm_strat	; N: see if we reached last arena
 30800                                  	;
 30801                                  	;test	byte [AllocMethod],HIGH_FIRST
 30802                                  	;				; Q: is alloc strategy high_first
 30803                                  	;jz	short norm_strat	; N: see if we reached last arena
 30804                                  	;mov	ax,[start_arena]
 30805                                  	;cmp	ax,[arena_head]		; Q: did we start scan from 
 30806                                  					;    arena_head
 30807                                  	;jne	short norm_strat	; N: see if we reached last arena
 30808                                  	;mov	ax,ds			; ax = current block
 30809                                  	;cmp	ax,[umb_head]		; Q: check against umb_head 
 30810                                  	;jmp	short alloc_chk_end
 30811                                  
 30812                                  ;norm_strat:
 30813                                  	;cmp	byte [di],5Ah ; 'Z'
 30814 00006574 803D5A                          CMP     BYTE [DI],arena_signature_end
 30815                                                                          ; IF current block is last THEN
 30816 00006577 740E                            JZ      SHORT alloc_end		;   GOTO end
 30817 00006579 E89AFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 30818 0000657C 73EE                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 30819                                  
 30820                                  alloc_err:
 30821 0000657E 58                              POP     AX
 30822                                  
 30823                                  alloc_trashed:
 30824                                  	;LeaveCrit critMem
 30825 0000657F E8EBBA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0	
 30826                                          ;error	error_arena_trashed
 30827                                  	;mov	al,7
 30828 00006582 B007                    	MOV	AL,error_arena_trashed
 30829                                  alloc_errj:
 30830 00006584 E97FB1                  	JMP	SYS_RET_ERR
 30831                                  
 30832                                  alloc_end:
 30833 00006587 36833E[EC02]00                  CMP	WORD [SS:FirstArena],0	; 15/03/2018
 30834 0000658D 756B                    	JNZ     SHORT alloc_do_split
 30835                                  
 30836                                  	; MSDOS 6.0
 30837                                  	;mov	ax,[arena_head]
 30838                                  	;cmp	ax,[start_arena]	; Q: started scanning from arena_head
 30839                                  	;je	short alloc_fail	; Y: not enough memory
 30840                                  	;				; N:
 30841                                  	;				; Q: is the alloc strat HIGH_ONLY
 30842                                  	;test 	byte [AllocMethod],HIGH_ONLY
 30843                                  	;jnz	short alloc_fail	; Y: return size of largest UMB
 30844                                  	;
 30845                                  	;mov	[start_arena],ax	; N: start scanning from arena_head
 30846                                  	;jmp	short start_scan
 30847                                  	;				; M000 - end
 30848                                  
 30849                                  alloc_fail:
 30850                                          ;invoke Get_User_Stack
 30851 0000658F E879B0                          CALL	Get_User_Stack
 30852 00006592 5B                      	POP     BX
 30853                                          ;MOV	[SI].user_BX,BX
 30854                                  	;MOV	[SI+2],BX
 30855 00006593 895C02                  	mov	[SI+user_env.user_BX],bx
 30856                                  	;LeaveCrit critMem
 30857 00006596 E8D4BA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30858                                  	;error	error_not_enough_memory
 30859                                  	;mov	al,8
 30860 00006599 B008                    	MOV	AL,error_not_enough_memory
 30861                                  	;jmp	short alloc_errj
 30862 0000659B E968B1                  	JMP	SYS_RET_ERR
 30863                                  
 30864                                  alloc_free:
 30865 0000659E E88CFF                          CALL    Coalesce		; add following free block to current
 30866 000065A1 72DB                            JC	SHORT alloc_err		; IF error THEN GOTO err
 30867 000065A3 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30868 000065A7 5A                              POP     DX                      ; check for max found size
 30869 000065A8 39D1                            CMP     CX,DX
 30870 000065AA 7602                            JNA     SHORT alloc_test
 30871 000065AC 89CA                            MOV     DX,CX
 30872                                  
 30873                                  alloc_test:
 30874 000065AE 52                              PUSH    DX
 30875 000065AF 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 30876 000065B1 77C1                            JA      SHORT alloc_next	;   GOTO next
 30877                                  
 30878                                  	; 15/03/2018
 30879 000065B3 36833E[EC02]00                  CMP     WORD [SS:FirstArena],0
 30880 000065B9 7505                    	JNZ	SHORT alloc_best
 30881 000065BB 368C1E[EC02]                    MOV     [SS:FirstArena],DS	; save first one found	
 30882                                  alloc_best:
 30883 000065C0 36833E[EE02]00                  CMP     WORD [SS:BestArena],0
 30884 000065C6 740E                            JZ      SHORT alloc_make_best	; initial best
 30885 000065C8 06                              PUSH	ES
 30886 000065C9 368E06[EE02]                    MOV     ES,[SS:BestArena]
 30887 000065CE 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 30888 000065D3 07                              POP	ES
 30889 000065D4 7605                            JBE     SHORT alloc_last
 30890                                  alloc_make_best:
 30891 000065D6 368C1E[EE02]                    MOV     [SS:BestArena],DS	; assign best
 30892                                  alloc_last:
 30893 000065DB 368C1E[F002]                    MOV     [SS:LastArena],DS 	; assign last
 30894 000065E0 EB92                            JMP     SHORT alloc_next
 30895                                  ;
 30896                                  ; split the block high
 30897                                  ;
 30898                                  alloc_do_split_high:
 30899 000065E2 368E1E[F002]                    MOV     DS,[SS:LastArena]
 30900 000065E7 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30901 000065EB 29D9                            SUB     CX,BX
 30902 000065ED 8CDA                            MOV     DX,DS
 30903 000065EF 7444                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 30904 000065F1 01CA                            ADD     DX,CX                   ; point to next block
 30905 000065F3 8EC2                            MOV     ES,DX                   ; no decrement!
 30906 000065F5 49                              DEC     CX
 30907 000065F6 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 30908 000065F8 EB26                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 30909                                  ;
 30910                                  ; we have scanned memory and have found all appropriate blocks
 30911                                  ; check for the type of allocation desired; first and best are identical
 30912                                  ; last must be split high
 30913                                  ;
 30914                                  alloc_do_split:
 30915                                  	; 04/08/2018
 30916                                  	; MSDOS 6.0			; M000 - start
 30917                                  	;xor	cx,cx
 30918                                  	;mov	cl,[AllocMethod]
 30919                                  	;and	cx,STRAT_MASK		; mask off bit 7
 30920                                  	;cmp	cx,BEST_FIT		; Q; is the alloc strategy best_fit
 30921                                  
 30922                                  	; 15/03/2018
 30923                                          ;CMP     BYTE [SS:AllocMethod], 1
 30924                                  	; 04/08/2018
 30925 000065FA 36803E[B002]01          	CMP     BYTE [SS:AllocMethod],BEST_FIT
 30926 00006600 77E0                            JA      SHORT alloc_do_split_high
 30927 00006602 368E1E[EC02]                    MOV     DS,[SS:FirstArena]        
 30928 00006607 7205                    	JB      SHORT alloc_get_size
 30929 00006609 368E1E[EE02]            	MOV     DS,[SS:BestArena]
 30930                                  
 30931                                  alloc_get_size:
 30932 0000660E 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30933 00006612 29D9                            SUB     CX,BX                   ; get room left over
 30934 00006614 8CD8                            MOV     AX,DS
 30935 00006616 89C2                            MOV     DX,AX                   ; save for owner setting
 30936 00006618 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 30937 0000661A 01D8                            ADD     AX,BX
 30938 0000661C 40                              INC     AX                      ; remember the header
 30939 0000661D 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 30940 0000661F 49                              DEC     CX                      ; CX <- size of split block
 30941                                  alloc_set_sizes:
 30942 00006620 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 30943 00006624 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 30944                                  	;mov	bl,4Dh ; 'M'
 30945 00006629 B34D                            MOV     BL,arena_signature_normal
 30946 0000662B 861D                            XCHG    BL,[DI]			; current signature <- 4D
 30947 0000662D 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 30948 00006630 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 30949                                  
 30950                                  alloc_set_owner:
 30951 00006635 8EDA                            MOV     DS,DX
 30952 00006637 36A1[DE02]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 30953 0000663B A30100                          MOV     [ARENA.OWNER],AX
 30954 0000663E 8CD8                            MOV     AX,DS
 30955 00006640 40                              INC     AX
 30956 00006641 5B                              POP     BX
 30957                                  	;LeaveCrit critMem
 30958 00006642 E828BA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30959                                          ;transfer SYS_RET_OK
 30960 00006645 E9B5B0                  	JMP	SYS_RET_OK
 30961                                  
 30962                                  
 30963                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 30964                                  
 30965                                  ; MSDOS 6.0
 30966                                  ;----------------------------------------------------------------------------
 30967                                  ;**	$SETBLOCK - Change size of an Alocated Block
 30968                                  ;
 30969                                  ;	Setblock changes the size of an allocated block.  First, we coalesce
 30970                                  ;	any following free space onto this block; then we try to trim the
 30971                                  ;	block down to the size requested.
 30972                                  ;
 30973                                  ;	Note that if the guy wants to grow the block but that growth fails,
 30974                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 30975                                  ;	Thus the maximum-size-possible value that we return has already
 30976                                  ;	been allocated!  This is a bug, dare we fix it?  BUGBUG
 30977                                  ;
 30978                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 30979                                  ;		finish it's work.  FOr this reason we build the allocsf
 30980                                  ;		structure on the frame, to make us compatible with $ALLOCs
 30981                                  ;		code.
 30982                                  ;
 30983                                  ;	ENTRY	(es) = segment of old block
 30984                                  ;		(bx) = newsize
 30985                                  ;		(ah) = SETBLOCK
 30986                                  ;
 30987                                  ;	EXIT	'C' clear if OK
 30988                                  ;		'C' set if error
 30989                                  ;		  (ax) = error_invalid_block
 30990                                  ;		       = error_arena_trashed
 30991                                  ;		       = error_not_enough_memory
 30992                                  ;		       = error_invalid_function
 30993                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 30994                                  ;	USES	???? BUGBUG
 30995                                  ;----------------------------------------------------------------------------
 30996                                  
 30997                                  ; MSDOS 2.11 (& MSDOS 3.3)
 30998                                  ;----------------------------------------------------------------------------
 30999                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 31000                                  ;
 31001                                  ;   Assembler usage:
 31002                                  ;           MOV     ES,block
 31003                                  ;           MOV     BX,newsize
 31004                                  ;           MOV     AH,setblock
 31005                                  ;           INT     21h
 31006                                  ;         if setblock fails for growing, BX will have the maximum
 31007                                  ;         size possible
 31008                                  ;   Error return:
 31009                                  ;           AX = error_invalid_block
 31010                                  ;              = error_arena_trashed
 31011                                  ;              = error_not_enough_memory
 31012                                  ;              = error_invalid_function
 31013                                  ;----------------------------------------------------------------------------
 31014                                  
 31015                                  _$SETBLOCK:        
 31016                                  	; 04/08/2018 - Retro DOS v3.0
 31017                                  	;EnterCrit   critMem
 31018 00006648 E81ABA                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31019                                  
 31020 0000664B BF0000                  	MOV     DI,ARENA.SIGNATURE
 31021 0000664E 8CC0                            MOV     AX,ES
 31022 00006650 48                              DEC     AX
 31023 00006651 E8C9FE                          CALL    check_signature
 31024 00006654 7303                            JNC     SHORT setblock_grab
 31025                                  
 31026                                  setblock_bad:
 31027 00006656 E926FF                          JMP     alloc_trashed
 31028                                  
 31029                                  setblock_grab:
 31030 00006659 8ED8                            MOV     DS,AX
 31031 0000665B E8CFFE                          CALL    Coalesce
 31032 0000665E 72F6                            JC      SHORT setblock_bad
 31033 00006660 8B0E0300                        MOV     CX,[ARENA.SIZE]
 31034 00006664 51                              PUSH    CX
 31035 00006665 39CB                            CMP     BX,CX
 31036 00006667 76A5                            JBE     SHORT alloc_get_size
 31037 00006669 E923FF                          JMP     alloc_fail
 31038                                  
 31039                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 31040                                  
 31041                                  ; MSDOS 6.0
 31042                                  ;----------------------------------------------------------------------------
 31043                                  ;**	$DEALLOC - Free Heap Memory
 31044                                  ;
 31045                                  ;	ENTRY	(es) = address of item
 31046                                  ;
 31047                                  ;	EXIT	'C' clear of OK
 31048                                  ;		'C' set if error
 31049                                  ;		  (AX) = error_invalid_block
 31050                                  ;	USES	???? BUGBUG
 31051                                  
 31052                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31053                                  ;----------------------------------------------------------------------------
 31054                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 31055                                  ;
 31056                                  ;   Assembler usage:
 31057                                  ;           MOV     ES,block
 31058                                  ;           MOV     AH,dealloc
 31059                                  ;           INT     21h
 31060                                  ;
 31061                                  ;   Error return:
 31062                                  ;           AX = error_invalid_block
 31063                                  ;              = error_arena_trashed
 31064                                  ;---------------------------------------------------------------------------- 
 31065                                  
 31066                                  _$DEALLOC:    
 31067                                  	; 04/08/2018 - Retro DOS v3.0
 31068                                  	;EnterCrit   critMem
 31069 0000666C E8F6B9                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31070                                  
 31071                                  	; MSDOS 6.0			; M016, M068 - Start
 31072                                  	;test	byte [DOS_FLAG],EXECA20OFF
 31073                                  					; Q: was the previous call an int 21
 31074                                  					;    exec call
 31075                                  	;jz	short deallocate	; N: continue
 31076                                  	;cmp	byte [A20OFF_COUNT], 0	; Q: is count 0
 31077                                  	;jne	short deallocate	; N: continue
 31078                                  	;mov	byte [A20OFF_COUNT], 1	; Y: set count to 1
 31079                                  ;deallocate:				; M016, M068 - End
 31080                                      
 31081 0000666F BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 31082 00006672 8CC0                            MOV     AX,ES
 31083 00006674 48                              DEC     AX
 31084 00006675 E8A5FE                          CALL    check_signature
 31085 00006678 720B                            JC      SHORT dealloc_err
 31086 0000667A 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 31087                                  	;LeaveCrit critMem
 31088 0000667F E8EBB9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31089                                          ;transfer SYS_RET_OK
 31090 00006682 E978B0                  	JMP	SYS_RET_OK
 31091                                  
 31092                                  dealloc_err:
 31093                                  	;LeaveCrit critMem
 31094 00006685 E8E5B9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31095                                          ;error	error_invalid_block
 31096                                  	;mov	al,9
 31097 00006688 B009                    	MOV	AL,error_invalid_block
 31098 0000668A E979B0                  	JMP	SYS_RET_ERR
 31099                                  
 31100                                  ;	BREAK $AllocOper - get/set allocation mechanism
 31101                                  
 31102                                  ; MSDOS 6.0
 31103                                  ;----------------------------------------------------------------------------
 31104                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 31105                                  ;
 31106                                  ;	Assembler usage:
 31107                                  ;           MOV     AH,AllocOper
 31108                                  ;           MOV     BX,method
 31109                                  ;           MOV     AL,func
 31110                                  ;           INT     21h
 31111                                  ;
 31112                                  ;	ENTRY	
 31113                                  ;		(al) = 0
 31114                                  ;		  Get allocation Strategy in (ax)
 31115                                  ;
 31116                                  ;		(al) = 1, (bx) = method = zw0000xy
 31117                                  ;		  Set allocation strategy.
 31118                                  ;		   w  = 1  => HIGH_ONLY
 31119                                  ;		   z  = 1  => HIGH_FIRST
 31120                                  ;		   xy = 00 => FIRST_FIT
 31121                                  ;		      = 01 => BEST_FIT
 31122                                  ;		      = 10 => LAST_FIT
 31123                                  ;
 31124                                  ;		(al) = 2
 31125                                  ;		  Get UMB link state in (al)
 31126                                  ;
 31127                                  ;		(al) = 3
 31128                                  ;		  Set UMB link state
 31129                                  ;		   (bx) = 0 => Unlink UMBs
 31130                                  ;		   (bx) = 1 => Link UMBs
 31131                                  ;
 31132                                  ;
 31133                                  ;	EXIT	'C' clear if OK
 31134                                  ;
 31135                                  ;		 if (al) = 0
 31136                                  ;		  (ax) = existing method
 31137                                  ;		 if (al) = 1
 31138                                  ;		  Sets allocation strategy
 31139                                  ;		 if (al) = 2
 31140                                  ;		  (al) = 0 => UMBs not linked
 31141                                  ;		  (al) = 1 => UMBs linked in
 31142                                  ;		 if (al) = 3
 31143                                  ;		  Links/Unlinks the UMBs into DOS chain
 31144                                  ;
 31145                                  ;		'C' set if error
 31146                                  ;		  AX = error_invalid_function
 31147                                  ;
 31148                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 31149                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 31150                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 31151                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 31152                                  ;		    arena' if an arena sig is damaged.
 31153                                  ;----------------------------------------------------------------------------
 31154                                  
 31155                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31156                                  ;----------------------------------------------------------------------------
 31157                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 31158                                  ;
 31159                                  ;   Assembler usage:
 31160                                  ;           MOV     AH,AllocOper
 31161                                  ;           MOV     BX,method
 31162                                  ;           MOV     AL,func
 31163                                  ;           INT     21h
 31164                                  ;
 31165                                  ;   Error return:
 31166                                  ;           AX = error_invalid_function
 31167                                  ;----------------------------------------------------------------------------
 31168                                  
 31169                                  _$ALLOCOPER:
 31170                                  	; MSDOS 6.0
 31171                                  	;or	al, al
 31172                                  	;jz	short AllocGetStrat
 31173                                  	;cmp	al, 1
 31174                                  	;jz	short AllocSetStrat
 31175                                  	;cmp	al, 2
 31176                                  	;jz	short AllocGetLink
 31177                                  	;cmp	al, 3
 31178                                  	;jz	short AllocSetLink
 31179                                  
 31180                                  	; 15/04/2018
 31181 0000668D 3C01                    	CMP     AL,1
 31182 0000668F 720D                            JB      SHORT AllocOperGet
 31183 00006691 7414                            JZ      SHORT AllocOperSet
 31184                                  
 31185                                  AllocOperError:
 31186                                  	; 04/08/2018 - Retro DOS v3.0
 31187                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 31188                                  	;mov	byte [ss:EXTERR_LOCUS],5
 31189 00006693 36C606[D102]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31190                                  	;error	error_invalid_function
 31191                                  	;mov	al,1
 31192 00006699 B001                    	MOV	AL,error_invalid_function
 31193                                  AllocOperErrj:
 31194 0000669B E968B0                  	JMP	SYS_RET_ERR
 31195                                  
 31196                                  ;AllocArenaError:
 31197                                  	; MSDOS 6.0
 31198                                  	;MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31199                                  	;				; M009: Extended Error Locus
 31200                                  	;;error   error_arena_trashed	; M009:
 31201                                  	;MOV	AL,error_arena_trashed
 31202                                  	;;JMP	SYS_RET_ERR
 31203                                  	;jmp	short AllocOperErrj
 31204                                  
 31205                                  ;AllocGetStrat: 
 31206                                  	; MSDOS 6.0
 31207                                  AllocOperGet:
 31208 0000669E 36A0[B002]                      MOV     AL,[SS:AllocMethod]
 31209 000066A2 30E4                            XOR     AH,AH
 31210                                          ;transfer SYS_RET_OK
 31211 000066A4 E956B0                  	JMP	SYS_RET_OK
 31212                                  
 31213                                  ;AllocSetStrat: 
 31214                                  	; MSDOS 6.0
 31215                                  	;push	bx			; M000 - start
 31216                                  	;and	bx,STRAT_MASK 		; M064: mask off bit 6 & 7
 31217                                  	;cmp	bx,2			; BX must be 0-2
 31218                                  	;pop	bx			; M000 - end
 31219                                  	;ja	short AllocOperError
 31220                                  
 31221                                  AllocOperSet:
 31222 000066A7 36881E[B002]                    MOV     [SS:AllocMethod],BL
 31223                                          ;transfer SYS_RET_OK
 31224 000066AC E94EB0                  	JMP	SYS_RET_OK
 31225                                  
 31226                                  ;AllocGetLink:
 31227                                  	; MSDOS 6.0
 31228                                  	;mov	al,[UmbFlag]		; return link state in al
 31229                                  	;and 	al,LINKSTATE		
 31230                                  	;;transfer SYS_RET_OK
 31231                                  	;jmp	SYS_RET_OK
 31232                                  
 31233                                  ;AllocSetLink:
 31234                                  	; MSDOS 6.0			; M009 - start
 31235                                  	;mov	cx,[umb_head]		; cx = umb_head
 31236                                  	;cmp	cx,0FFFFh		; Q: has umb_head been initialized
 31237                                  	;je	short AllocOperError	; N: error
 31238                                  	;				; Y: continue
 31239                                  	;				; M009 - end
 31240                                  	;cmp	bx,1			
 31241                                  	;jb	short UnlinkUmbs
 31242                                  	;jz	short LinkUmbs
 31243                                  	;
 31244                                  	;jmp	short AllocOperError
 31245                                  	;
 31246                                  ;UnlinkUmbs:
 31247                                  	;test	byte[UmbFlag],LINKSTATE	; Q: umbs unlinked?
 31248                                  	;jz	short unlinked		; Y: return 
 31249                                  	;
 31250                                  	;call	GetLastArena		; get arena before umb_head in DS
 31251                                  	;jc	short AllocArenaError	; M009: arena trashed
 31252                                  	;
 31253                                  	;				; make it last
 31254                                  	;mov	byte [0],arena_signature_end
 31255                                  	;
 31256                                  	;and	byte [UmbFlag],~LINKSTATE ; indicate unlink'd state in umbflag
 31257                                  	;
 31258                                  ;unlinked:
 31259                                  	;;transfer SYS_RET_OK
 31260                                  	;jmp	SYS_RET_OK
 31261                                  
 31262                                  ;LinkUmbs:
 31263                                  	;test	byte [UmbFlag],LINKSTATE ; Q: umbs linked?
 31264                                  	;jnz	short linked		; Y: return
 31265                                  	;
 31266                                  	;call	GetLastArena		; get arena before umb_head
 31267                                  	;jc	short AllocArenaError	; M009: arena trashed
 31268                                  	;
 31269                                  	;				; make it normal. M061: ds points to
 31270                                  	;				; arena before umb_head
 31271                                  	;mov	byte [0],arena_signature_normal
 31272                                  	;
 31273                                  	;or	byte [UmbFlag],LINKSTATE ; indicate link'd state in umbflag
 31274                                  ;linked:
 31275                                  	;;transfer SYS_RET_OK
 31276                                  	;jmp	SYS_RET_OK
 31277                                  
 31278                                  ; MSDOS 6.0
 31279                                  ;--------------------------------------------------------------------------
 31280                                  ; Procedure Name : GetLastArena		-  M003
 31281                                  ;
 31282                                  ; Inputs	 : cx = umb_head
 31283                                  ;
 31284                                  ;
 31285                                  ; Outputs	 : If UMBs are linked
 31286                                  ;			ES = umb_head
 31287                                  ;			DS = arena before umb_head
 31288                                  ;		   else
 31289                                  ;			DS = last arena
 31290                                  ;			ES = next arena. will be umb_head if NC.
 31291                                  ;
 31292                                  ;		   CY if error
 31293                                  ;
 31294                                  ; Uses		 : DS, ES, DI, BX
 31295                                  ;--------------------------------------------------------------------------
 31296                                  	
 31297                                  ;Procedure	GetLastArena, NEAR
 31298                                  ;
 31299                                  ;	push	ax			; save ax
 31300                                  ;
 31301                                  ;	mov	ax, [arena_head]
 31302                                  ;	mov	es, ax			; es = arena_head
 31303                                  ;	xor	di, di
 31304                                  ;
 31305                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31306                                  ;					; Q: is this the last arena
 31307                                  ;	je	GLA_done		; Y: return last arena in ES		
 31308                                  ;					
 31309                                  ;
 31310                                  ;GLA_next:
 31311                                  ;	mov	ds, ax
 31312                                  ;	call	arena_next		; ax, es -> next arena
 31313                                  ;	jc	GLA_err
 31314                                  ;
 31315                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31316                                  ;	jnz	GLA_chkumb		; Y: terminating condition is 
 31317                                  ;					;    umb_head
 31318                                  ;					; N: terminating condition is 05Ah
 31319                                  ;
 31320                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31321                                  ;					; Q: is this the last arena
 31322                                  ;	jmp	short @f
 31323                                  ;GLA_chkumb:
 31324                                  ;	cmp	ax, cx			; Q: is this umb_head
 31325                                  ;@@:
 31326                                  ;	jne	GLA_next		; N: get next arena
 31327                                  ;
 31328                                  ;GLA_done:
 31329                                  ;					; M061 - Start
 31330                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31331                                  ;	jnz	GLA_ret			; Y: we're done
 31332                                  ;					; N: let us confirm that the next 
 31333                                  ;					;    arena is umb_head
 31334                                  ;	mov	ds, ax
 31335                                  ;	call	arena_next		; ax, es -> next arena
 31336                                  ;	jc	GLA_err
 31337                                  ;	cmp	ax, cx			; Q: is this umb_head
 31338                                  ;	jne	GLA_err			; N: error
 31339                                  ;					; M061 - End
 31340                                  ;
 31341                                  ;GLA_ret:				
 31342                                  ;	clc
 31343                                  ;	pop	ax			; M061
 31344                                  ;	ret				; M061
 31345                                  ;
 31346                                  ;GLA_err:
 31347                                  ;	stc				; M061
 31348                                  ;	pop	ax
 31349                                  ;	ret
 31350                                  ;
 31351                                  ;EndProc GetLastArena
 31352                                  
 31353                                  ;============================================================================
 31354                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 31355                                  ;============================================================================
 31356                                  ; 04/08/2018 - Retro DOS v3.0
 31357                                  
 31358                                  ;	TITLE SRVCALL - Server DOS call
 31359                                  ;	NAME  SRVCALL
 31360                                  
 31361                                  ;**	SRVCALL.ASM - Server DOS call functions
 31362                                  ;
 31363                                  ;
 31364                                  ;	$ServerCall
 31365                                  ;
 31366                                  ;	Modification history:
 31367                                  ;
 31368                                  ;	    Created: ARR 08 August 1983
 31369                                  
 31370                                  ;AsmVars <Installed>
 31371                                  
 31372                                  ;include dpl.asm
 31373                                  
 31374                                  ;Installed = TRUE
 31375                                  
 31376                                  ;BREAK <ServerCall -- Server DOS call>
 31377                                  ;----------------------------------------------------------------------------
 31378                                  ;
 31379                                  ; Procedure Name : $ServerCall
 31380                                  ;
 31381                                  ; Inputs:
 31382                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 31383                                  ; Function:
 31384                                  ;	AL=0	Server DOS call
 31385                                  ;	AL=1	Commit All files
 31386                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 31387                                  ;	AL=3	Close all files for DPL_UID
 31388                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 31389                                  ;	AL=5	Get open file list entry
 31390                                  ;		    IN: BX File Index
 31391                                  ;			CX User Index
 31392                                  ;		    OUT:ES:DI -> Name
 31393                                  ;			BX = UID
 31394                                  ;		    CX = # locked blocks held by this UID
 31395                                  ;	AL=6	Get DOS data area
 31396                                  ;		    OUT: DS:SI -> Start
 31397                                  ;			CX size in bytes of swap if indos
 31398                                  ;			DX size in bytes of swap always
 31399                                  ;	AL=7	Get truncate flag
 31400                                  ;	AL=8	Set truncate flag
 31401                                  ;	AL=9	Close all spool files
 31402                                  ;	AL=10	SetExtendedError
 31403                                  ;
 31404                                  ;----------------------------------------------------------------------------
 31405                                  
 31406                                  _$ServerCall:
 31407                                  	; 05/08/2018 - Retro DOS v3.0
 31408                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 31409 000066AF 3C07                    	CMP	AL,7
 31410 000066B1 7204                    	JB	short SET_STUFF
 31411 000066B3 3C09                    	CMP	AL,9
 31412 000066B5 7612                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 31413                                  SET_STUFF:
 31414 000066B7 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 31415                                  	;mov	bx,[si+12h]
 31416 000066B9 8B5C12                  	MOV	BX,[SI+DPL.UID]
 31417                                  
 31418                                  	; MSDOS 6.0
 31419                                  ;SR;
 31420                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 31421                                  ; of USER_ID
 31422                                  ;
 31423                                  	;test	byte [SS:IsWin386],1
 31424                                  	;jnz	short skip_win386
 31425                                  
 31426                                  ;hkn; SS override for user_id and proc_id
 31427                                  	; 15/08/2018
 31428 000066BC 36891E[EA02]            	MOV	[SS:USER_ID],BX		; Set UID
 31429                                  
 31430                                  ;skip_win386:
 31431                                  
 31432 000066C1 8B5C14                  	MOV	BX,[SI+DPL.PID]
 31433 000066C4 36891E[E802]            	MOV	[SS:PROC_ID],BX		; Set process ID
 31434                                  NO_SET_ID:
 31435 000066C9 36FF36[3A14]            	PUSH	word [SS:SERVERLEAVE]	; push return address
 31436 000066CE 36FF36[3814]            	PUSH	word [SS:SERVERTAB]	; push table address
 31437 000066D3 50                      	PUSH	AX
 31438 000066D4 E8C5B8                  	call	TableDispatch
 31439                                  
 31440                                  ;hkn; SS override
 31441                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 31442 000066D7 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 31443                                  	;error	error_invalid_function
 31444                                  	;mov	al,1
 31445 000066DD B001                    	MOV	AL,error_invalid_function
 31446                                  servercall_error:
 31447 000066DF E924B0                  	JMP	SYS_RET_ERR
 31448                                  
 31449                                  SERVERRETURN:
 31450 000066E2 C3                      	retn
 31451                                  
 31452                                  ; Commit - iterate through the open file list and make sure that the
 31453                                  ; directory entries are correctly updated.
 31454                                  
 31455                                  COMMIT_ALL:
 31456 000066E3 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 31457 000066E5 16                      	push	ss
 31458 000066E6 1F                      	pop	ds
 31459 000066E7 E87BB9                  	call	EcritSFT		; Gonna scan SFT cache, lock it down
 31460                                  CommitLoop:
 31461 000066EA 53                      	push	bx
 31462 000066EB E82501                  	call	SFFromSFN
 31463 000066EE 7223                    	JC	short CommitDone
 31464 000066F0 26833D00                	cmp	word [es:di],0
 31465                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 31466                                  					; if (ThisSFT->refcount != 0)
 31467 000066F4 7419                    	JZ	short CommitNext
 31468                                  	;cmp	word [es:di],0FFFFh ; -1
 31469 000066F6 26833DFF                	cmp	word [ES:DI],sf_busy
 31470                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 31471                                  					; BUSY SFTs have god knows what
 31472 000066FA 7413                    	JZ	short CommitNext	;   in them.
 31473 000066FC 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 31474 00006702 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 31475                                  					;	doesn't deadlock
 31476 00006704 893E[3605]              	MOV	[THISSFT],DI
 31477 00006708 8C06[3805]              	MOV	[THISSFT+2],ES
 31478 0000670C E8AAD4                  	call	DOS_COMMIT		;	DOSCommit ();
 31479                                  CommitNext:
 31480 0000670F 5B                      	pop	bx
 31481 00006710 43                      	INC	BX
 31482 00006711 EBD7                    	JMP	short CommitLoop
 31483                                  CommitDone:
 31484 00006713 E857B9                  	call	LcritSFT
 31485 00006716 5B                      	pop	bx
 31486 00006717 E9E3AF                  	jmp	SYS_RET_OK
 31487                                  
 31488                                  CLOSE_NAME:
 31489                                  
 31490                                  ;if installed
 31491                                  
 31492                                  ;hkn; SS override
 31493 0000671A 36FF1E[7000]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 31494                                  ;else
 31495                                  ;	Call	MFTcloN
 31496                                  ;endif
 31497                                  
 31498                                  CheckReturns:
 31499 0000671F 7203                    	JC	short func_err
 31500 00006721 E9D9AF                  	jmp	SYS_RET_OK
 31501                                  func_err:
 31502                                  	;transfer SYS_RET_ERR
 31503                                  	;jmp	SYS_RET_ERR
 31504 00006724 EBB9                    	jmp	short servercall_error
 31505                                  
 31506                                  CLOSE_UID:
 31507                                  
 31508                                  ;if installed
 31509                                  ;hkn; SS override
 31510 00006726 36FF1E[6800]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 31511                                  ;else
 31512                                  ;	Call	MFTclU
 31513                                  ;endif
 31514 0000672B EBF2                    	JMP	short CheckReturns
 31515                                  
 31516                                  CLOSE_UID_PID:
 31517                                  
 31518                                  ;if installed
 31519                                  ;hkn; SS override
 31520 0000672D 36FF1E[6C00]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 31521                                  ;else
 31522                                  ;	Call	MFTCloseP
 31523                                  ;endif
 31524 00006732 EBEB                    	JMP	CheckReturns
 31525                                  
 31526                                  GET_LIST:
 31527                                  
 31528                                  ;if installed
 31529                                  ;hkn; SS override
 31530 00006734 36FF1E[8000]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 31531                                  ;else
 31532                                  ;	Call	MFT_get
 31533                                  ;endif
 31534 00006739 72E9                    	JC	short func_err
 31535 0000673B E8CDAE                  	call	Get_User_Stack
 31536                                  	;mov	[si+2],bx
 31537 0000673E 895C02                  	MOV	[SI+user_env.user_BX],BX
 31538                                  	;mov	[si+10],di
 31539 00006741 897C0A                  	MOV	[SI+user_env.user_DI],DI
 31540                                  	;mov	[si+16],es
 31541 00006744 8C4410                  	MOV	[SI+user_env.user_ES],ES
 31542                                  SetCXOK:
 31543                                  	;mov	[si+4],cx
 31544 00006747 894C04                  	MOV	[SI+user_env.user_CX],CX
 31545 0000674A E9B0AF                  	jmp	SYS_RET_OK
 31546                                  
 31547                                  SRV_CALL:
 31548 0000674D 58                      	POP	AX			; get rid of call to $srvcall
 31549 0000674E 1E                      	push	ds
 31550 0000674F 56                      	push	si
 31551 00006750 E8B8AE                  	call	Get_User_Stack
 31552 00006753 5F                      	pop	di
 31553 00006754 07                      	pop	es
 31554                                  ;
 31555                                  ; DS:SI point to stack
 31556                                  ; ES:DI point to DPL
 31557                                  ;
 31558 00006755 E823B8                  	call	XCHGP
 31559                                  ;
 31560                                  ; DS:SI point to DPL
 31561                                  ; ES:DI point to stack
 31562                                  ;
 31563                                  ; We now copy the registers from DPL to save stack
 31564                                  ;
 31565 00006758 56                      	push	si
 31566 00006759 B90600                  	MOV	CX,6
 31567 0000675C F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 31568 0000675E 47                      	INC	DI
 31569 0000675F 47                      	INC	DI			; Skip user_BP
 31570 00006760 A5                      	MOVSW				; DS
 31571 00006761 A5                      	MOVSW				; ES
 31572 00006762 5E                      	pop	si			; DS:SI -> DPL
 31573 00006763 8B04                    	mov	ax,[SI]
 31574                                  	;MOV	AX,[SI+DPL.AX]
 31575                                  	;mov	bx,[si+2]
 31576 00006765 8B5C02                  	MOV	BX,[SI+DPL.BX]
 31577                                  	;mov	cx,[si+4]
 31578 00006768 8B4C04                  	MOV	CX,[SI+DPL.CX]
 31579                                  	;mov	dx,[si+6]
 31580 0000676B 8B5406                  	MOV	DX,[SI+DPL.DX]
 31581                                  	;mov	di,[si+10]
 31582 0000676E 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 31583                                  	;mov	es,[si+14]
 31584 00006771 8E440E                  	MOV	ES,[SI+DPL.ES]
 31585                                  	;push	word [si+8]
 31586 00006774 FF7408                  	PUSH	word [SI+DPL.SI]
 31587                                  	;mov	ds,[si+12]
 31588 00006777 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 31589 0000677A 5E                      	POP	SI
 31590                                  
 31591                                  ;hkn; SS override for next 3
 31592 0000677B 368C1E[7E05]            	MOV	[SS:SAVEDS],DS
 31593 00006780 36891E[7C05]            	MOV	[SS:SAVEBX],BX
 31594 00006785 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 31595 0000678B E9B7AD                  	jmp	REDISP
 31596                                  
 31597                                  GET_DOS_DATA:
 31598 0000678E 16                      	push	ss
 31599 0000678F 07                      	pop	es
 31600 00006790 BF[CE02]                	MOV     DI,SWAP_START
 31601 00006793 B9[090A]                	MOV     CX,SWAP_END
 31602 00006796 BA[E602]                	MOV     DX,SWAP_ALWAYS
 31603 00006799 29F9                    	SUB     CX,DI
 31604 0000679B 29FA                    	SUB     DX,DI
 31605 0000679D D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 31606 0000679F 83D100                  	ADC     CX,0                    ; div by 2 + round up
 31607 000067A2 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 31608 000067A4 E864AE                  	call	Get_User_Stack
 31609                                  	;mov	[si+14],es
 31610 000067A7 8C440E                  	MOV     [SI+user_env.user_DS],ES
 31611                                  	;mov	[si+8],di
 31612 000067AA 897C08                  	MOV     [SI+user_env.user_SI],DI
 31613                                  	;mov	[si+6],dx
 31614 000067AD 895406                  	MOV     [SI+user_env.user_DX],DX
 31615 000067B0 EB95                    	JMP	short SetCXOK
 31616                                  
 31617                                  SPOOL_OPER:
 31618                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 31619                                  
 31620 000067B2 50                      	push    ax
 31621 000067B3 B82511                  	mov     ax, 1125h
 31622 000067B6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 31623                                  			; STACK: WORD subfunction
 31624                                  			; Return: CF set on error, AX = error code
 31625                                  			; STACK unchanged
 31626 000067B8 5B                      	pop	bx
 31627 000067B9 7203                    	JC	short func_err2
 31628 000067BB E93FAF                  	jmp	SYS_RET_OK
 31629                                  func_err2:
 31630 000067BE E945AF                  	jmp	SYS_RET_ERR
 31631                                  
 31632                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 31633                                  ;--------------------------------------------------------------------------
 31634                                  ;
 31635                                  ; Procedure Name : $SetExtendedError
 31636                                  ;
 31637                                  ; $SetExtendedError takes extended error information and loads it up for the
 31638                                  ; next extended error call.  This is used by interrupt-level proccessors to
 31639                                  ; mask their actions.
 31640                                  ;
 31641                                  ;   Inputs: DS:SI points to DPL which contains all registers
 31642                                  ;   Outputs: none
 31643                                  ;
 31644                                  ;---------------------------------------------------------------------------
 31645                                  
 31646                                  _$SetExtendedError:
 31647                                  
 31648                                  ;hkn; SS override for all variables used
 31649                                  
 31650 000067C1 8B04                    	mov	ax,[si]
 31651                                  	;MOV	AX,[SI+DPL.AX]
 31652 000067C3 36A3[D202]              	MOV	[SS:EXTERR],AX
 31653                                  	;mov	ax,[si+10]
 31654 000067C7 8B440A                  	MOV	AX,[SI+DPL.DI]
 31655 000067CA 36A3[D602]              	MOV	[SS:EXTERRPT],AX
 31656                                  	;mov	ax,[si+14]
 31657 000067CE 8B440E                  	MOV	AX,[SI+DPL.ES]
 31658 000067D1 36A3[D802]              	MOV	[SS:EXTERRPT+2],AX
 31659                                  	;mov	ax,[si+2]
 31660 000067D5 8B4402                  	MOV	AX,[SI+DPL.BX]
 31661 000067D8 36A3[D402]              	MOV	[SS:EXTERR_ACTION],AX
 31662                                  	;mov	ax,[si+4]
 31663 000067DC 8B4404                  	MOV	AX,[SI+DPL.CX]
 31664 000067DF 368826[D102]            	MOV	[SS:EXTERR_LOCUS],AH
 31665 000067E4 C3                      	retn
 31666                                  
 31667                                  ;============================================================================
 31668                                  ; UTIL.ASM, MSDOS 6.0, 1991
 31669                                  ;============================================================================
 31670                                  ; 05/08/2018 - Retro DOS v3.0
 31671                                  
 31672                                  ;**	Handle related utilities for MSDOS 2.X.
 31673                                  ;
 31674                                  ;	pJFNFromHandle	written
 31675                                  ;	SFFromHandle	written
 31676                                  ;	SFFromSFN	written
 31677                                  ;	JFNFree 	written
 31678                                  ;	SFNFree 	written
 31679                                  ;
 31680                                  ;	Modification history:
 31681                                  ;
 31682                                  ;	    Created: MZ 1 April 1983
 31683                                  
 31684                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 31685                                  
 31686                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 31687                                  ;----------------------------------------------------------------------------
 31688                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 31689                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 31690                                  ;
 31691                                  ;	NOTE:
 31692                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31693                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 31694                                  ;
 31695                                  ;	ENTRY	(bx) = handle
 31696                                  ;	EXIT	'C' clear if ok
 31697                                  ;		  (es:di) = address of JFN value
 31698                                  ;		'C' set if error
 31699                                  ;		  (ax) = error code
 31700                                  ;	USES	AX, DI, ES, Flags
 31701                                  ;----------------------------------------------------------------------------
 31702                                  
 31703                                  pJFNFromHandle:
 31704                                  
 31705 000067E5 2E8E06[DE02]            	MOV	ES,[cs:CurrentPDB]	; get user process data block
 31706                                  	;cmp	bx,[ES:32h]
 31707 000067EA 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 31708 000067EF 7204                    	JB	short pjfn10		; no, get offset
 31709                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 31710                                  	;mov	al,6
 31711 000067F1 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 31712                                  ReturnCarry:
 31713 000067F3 F9                      	STC                             ; signal error
 31714 000067F4 C3                      	retn				; go back
 31715                                  pjfn10: 
 31716                                  	;les	di,[es:34h]
 31717 000067F5 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 31718 000067FA 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 31719                                  	;clc
 31720                                  pJFNFromHandle_error:
 31721 000067FC C3                      	retn
 31722                                  
 31723                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 31724                                  ;----------------------------------------------------------------------------
 31725                                  ;
 31726                                  ; Procedure Name : SFFromHandle
 31727                                  ;
 31728                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 31729                                  ;
 31730                                  ;   Input:      BX has handle
 31731                                  ;   Output:     Carry Set
 31732                                  ;                   AX has error code
 31733                                  ;               Carry Reset
 31734                                  ;                   ES:DI has pointer to SF entry
 31735                                  ;   Registers modified: If error, AX,ES, else ES:DI
 31736                                  ; NOTE:
 31737                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31738                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31739                                  ;
 31740                                  ;----------------------------------------------------------------------------
 31741                                  
 31742                                  SFFromHandle:
 31743 000067FD E8E5FF                  	CALL    pJFNFromHandle          ; get jfn pointer
 31744                                  	;retc				; return if error
 31745 00006800 72FA                    	jc	short pJFNFromHandle_error
 31746 00006802 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 31747                                  	;JNZ	short GetSF		; nope, suck out SF
 31748                                  	;;mov	al,6
 31749                                  	;MOV	AL,error_invalid_handle ; appropriate error
 31750                                  	;jmp	short ReturnCarry	; signal it
 31751 00006806 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 31752                                  GetSF:
 31753 00006808 53                      	push	bx			; save handle
 31754 00006809 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 31755 0000680C 30FF                    	XOR     BH,BH                   ; ignore upper half
 31756 0000680E E80200                  	CALL    SFFromSFN               ; get real sf spot
 31757 00006811 5B                      	pop	bx			; restore
 31758 00006812 C3                      	retn                          ; say goodbye
 31759                                  
 31760                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 31761                                  
 31762                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 31763                                  ;----------------------------------------------------------------------------
 31764                                  ;	SFFromSfn uses an SFN to index an entry into the SF table.  This
 31765                                  ;	is more than just a simple index instruction because the SF table
 31766                                  ;	can be made up of multiple pieces chained together. We follow the
 31767                                  ;	chain to the right piece and then do the index operation.
 31768                                  ;
 31769                                  ;   NOTE:
 31770                                  ;	This routine is called from SFFromHandle which is called
 31771                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31772                                  ;
 31773                                  ;	ENTRY	BX has SF index
 31774                                  ;	EXIT	'C' clear if OK
 31775                                  ;		  ES:DI points to SF entry
 31776                                  ;		'C' set if index too large
 31777                                  ;	USES	BX, DI, ES
 31778                                  ;----------------------------------------------------------------------------
 31779                                  
 31780                                  SFFromSFN:
 31781 00006813 2EC43E[2A00]            	LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 31782                                  sfsfn5:	
 31783                                  	;cmp	bx,[es:di+4]
 31784 00006818 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 31785 0000681C 720E                    	JB	short sfsfn7		; yes, go grab it
 31786                                  	;sub	bx,[es:di+4]
 31787 0000681E 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 31788 00006822 26C43D                  	les	di,[es:di] ; 14/08/2018
 31789                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 31790 00006825 83FFFF                  	CMP     DI,-1                   ; end of tables?
 31791 00006828 75EE                    	JNZ	short sfsfn5		; no, try again
 31792 0000682A F9                      	STC
 31793 0000682B C3                      	retn				; return with error, not found
 31794                                  
 31795                                  sfsfn7:
 31796 0000682C 50                      	push	ax
 31797                                  	;mov	ax,53
 31798 0000682D B83500                  	MOV     AX,SF_ENTRY.size	; put it in a nice place
 31799 00006830 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 31800 00006832 01C7                    	ADD	DI,AX			; add base of SF block
 31801 00006834 58                      	pop	ax
 31802                                  	;add	di,6
 31803 00006835 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 31804 00006838 C3                      	retn				; return with 'C' clear
 31805                                  
 31806                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 31807                                  
 31808                                  ;**	JFNFree - Find a Free JFN Slot
 31809                                  ;----------------------------------------------------------------------------
 31810                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 31811                                  ;
 31812                                  ;	ENTRY	(ss) = DOSDATA
 31813                                  ;	EXIT	'C' clear if OK
 31814                                  ;		  (bx) = new handle
 31815                                  ;		  (es:di) = pointer to JFN slot
 31816                                  ;		'C' set if error
 31817                                  ;		  (al) = error code
 31818                                  ;	USES	bx, di, es, flags
 31819                                  ;----------------------------------------------------------------------------
 31820                                  
 31821                                  JFNFree:
 31822 00006839 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 31823                                  jfnf1:	
 31824 0000683B E8A7FF                  	CALL	pJFNFromHandle		; get the appropriate handle
 31825 0000683E 7209                    	JC	short jfnf5		; no more handles
 31826 00006840 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 31827 00006844 7405                    	je	short jfnfx		; yes, carry is clear
 31828 00006846 43                      	INC     BX                      ; no, next handle
 31829 00006847 EBF2                    	JMP	short jfnf1		; and try again
 31830                                  
 31831                                  ;	Error.	'C' set
 31832                                  jfnf5:	
 31833                                  	;mov	al,4
 31834 00006849 B004                    	MOV	AL,error_too_many_open_files
 31835                                  jfnfx:	
 31836 0000684B C3                      	retn				; bye
 31837                                  
 31838                                  ;	BREAK <SFNFree - Allocate a free SFN>
 31839                                  
 31840                                  ;**	SFNFree - Allocate a Free SFN/SFT
 31841                                  ;----------------------------------------------------------------------------
 31842                                  ;	SFNFree scans through the sf table looking for a free entry
 31843                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 31844                                  ;
 31845                                  ;	The problem is that we want to mark the SFT busy so that other threads
 31846                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 31847                                  ;	we can't just mark it busy because we may get blown out of our open
 31848                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 31849                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 31850                                  ;	an SFT with this value we look to see if it belongs to this user
 31851                                  ;	and process.  If it does belong to us then it must be an orphan
 31852                                  ;	and we reclaim it.
 31853                                  ;
 31854                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 31855                                  ;		over and over, but we could at least set a high water mark...
 31856                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 31857                                  ;		even though this is not a frequently called routine - jgl
 31858                                  ;
 31859                                  ;	ENTRY	(ss) = DOSDATA
 31860                                  ;	EXIT	'C' clear if no error
 31861                                  ;		  (bx) = SFN
 31862                                  ;		  (es:di) = pointer to SFT
 31863                                  ;		  es:[di].SFT_REF_COUNT = -1
 31864                                  ;		'C' set if error
 31865                                  ;		  (al) = error code
 31866                                  ;	USES	bx, di, es, Flags
 31867                                  ;----------------------------------------------------------------------------
 31868                                  
 31869                                  SFNFree:
 31870                                  	;12/08/2018
 31871                                  	;05/08/2018 - Retro DOS v3.0
 31872                                  	; MSDOS 6.0
 31873 0000684C 50                      	push	ax
 31874 0000684D 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 31875                                  sfnf5:	
 31876 0000684F 53                      	push	bx
 31877 00006850 E8C0FF                  	call	SFFromSFN		; get the potential handle
 31878 00006853 5B                      	pop	bx
 31879 00006854 723A                    	jc	short sfnf95		; no more free SFNs
 31880 00006856 26833D00                	cmp	word [ES:DI],0
 31881                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 31882 0000685A 741D                    	je	short sfnf20			; yep, got one
 31883                                  	
 31884                                  	;cmp	word [es:di],0FFFFh ; -1
 31885 0000685C 26833DFF                	cmp	word [ES:DI],sf_busy
 31886                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31887 00006860 7403                    	je	short sfnf10		; special busy mark
 31888                                  sfnf7:	
 31889 00006862 43                      	inc	bx			; try the next one
 31890 00006863 EBEA                    	jmp	short sfnf5
 31891                                  
 31892                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 31893                                  ;	it was abandoned during a earlier call and we can use it.
 31894                                  ;
 31895                                  ;	(bx)	= SFN
 31896                                  ;	(es:di) = pointer to SFT
 31897                                  ;	(TOS)	= caller's (ax)
 31898                                  
 31899                                  sfnf10:	
 31900 00006865 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31901                                  	;cmp	[es:di+2Fh],ax
 31902 00006869 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 31903 0000686D 75F3                    	jnz	short sfnf7		; not ours
 31904 0000686F 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31905                                  	;cmp	[es:di+31h],ax
 31906 00006873 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 31907 00006877 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 31908                                  
 31909                                  ;	We have an SFT to allocate
 31910                                  ;
 31911                                  ;	(bx)	= SFN
 31912                                  ;	(es:di) = pointer to SFT
 31913                                  ;	(TOS)	= caller's (ax)
 31914                                  
 31915                                  sfnf20:
 31916                                  	; cf = 0 ;; Retro DOS v3.0
 31917                                  
 31918                                  	;mov	word [es:di],0FFFFh
 31919 00006879 26C705FFFF              	mov	word [ES:DI],sf_busy
 31920                                  					; make sure that this is allocated
 31921                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31922                                  
 31923 0000687E 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31924                                  	;mov	[es:di+2Fh],ax
 31925 00006882 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 31926 00006886 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31927                                  	;mov	[es:di+31h],ax
 31928 0000688A 26894531                	mov	[es:DI+SF_ENTRY.sf_PID],ax
 31929                                  sfnf21: ;; Retro DOS v3.0
 31930 0000688E 58                      	pop	ax
 31931                                  	;clc
 31932 0000688F C3                      	retn				; return with no error
 31933                                  
 31934                                  ;**	Error - no more free SFNs
 31935                                  ;
 31936                                  ;	'C' set
 31937                                  ;	(TOS) = saved ax
 31938                                  
 31939                                  sfnf95: 
 31940 00006890 58                      	pop	ax
 31941                                  	;mov	al,4
 31942 00006891 B004                    	mov	al,error_too_many_open_files
 31943 00006893 C3                      	retn				; return with 'C' and error
 31944                                  
 31945                                  ;============================================================================
 31946                                  ; MACRO.ASM, MSDOS 6.0, 1991
 31947                                  ;============================================================================
 31948                                  ; Retro	DOS v3.0 - 11/07/2018
 31949                                  
 31950                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 31951                                  ;	NAME	MACRO
 31952                                  
 31953                                  ;	Microsoft Confidential
 31954                                  ;	Copyright (C) Microsoft Corporation 1991
 31955                                  ;	All Rights Reserved.
 31956                                  
 31957                                  ;**	MACRO.ASM
 31958                                  ;
 31959                                  ;	$AssignOper
 31960                                  ;	FIND_DPB
 31961                                  ;	InitCDS
 31962                                  ;	$UserOper
 31963                                  ;	GetVisDrv
 31964                                  ;	GetThisDrv
 31965                                  ;	GetCDSFromDrv
 31966                                  ;
 31967                                  ;   Revision history:
 31968                                  ;
 31969                                  ;	Created: MZ 4 April 1983
 31970                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 31971                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 31972                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 31973                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 31974                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 31975                                  ;				    aliasing.
 31976                                  ;
 31977                                  ;   MSDOS performs several types of name translation. First, we maintain for
 31978                                  ;   each valid drive letter the text of the current directory on that drive.
 31979                                  ;   For invalid drive letters, there is no current directory so we pretend to
 31980                                  ;   be at the root. A current directory is either the raw local directory
 31981                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 31982                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 31983                                  ;
 31984                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 31985                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 31986                                  ;   this and all * are expanded into ?'s.
 31987                                  ;
 31988                                  ;   The second part of name translation involves subtree aliasing. A list of
 31989                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 31990                                  ;   the previous 'canonicalization' are then examined to see if any of the
 31991                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 31992                                  ;   replaced with the other subtree in the pair.
 31993                                  ;
 31994                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 31995                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 31996                                  ;   The output of the previous translation is examined to see if any of the
 31997                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 31998                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 31999                                  ;   'mount' one device under another.
 32000                                  ;
 32001                                  ;   The final form of name translation involves the mapping of a user's
 32002                                  ;   logical drive number into the internal physical drive. This is
 32003                                  ;   accomplished by converting the drive number into letter:CON, performing
 32004                                  ;   the above translation and then converting the character back into a drive
 32005                                  ;   number.
 32006                                  ;
 32007                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 32008                                  ;   take a path and form the real text of the pathname with all . and ..
 32009                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 32010                                  ;   TransPath.
 32011                                  ;
 32012                                  ;	A000	version 4.00  Jan. 1988
 32013                                  
 32014                                  ;Installed = TRUE
 32015                                  
 32016                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 32017                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 32018                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 32019                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 32020                                  ;					; current drive)
 32021                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 32022                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 32023                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 32024                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 32025                                  ;	I_need	MYNAME,16		; machine name
 32026                                  ;	I_need	MYNUM,WORD		; machine number
 32027                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 32028                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 32029                                  ;	I_need	DrvErr,BYTE		; drive error
 32030                                  
 32031                                  ;BREAK <$AssignOper -- Set up a Macro>
 32032                                  ;----------------------------------------------------------------------------
 32033                                  ; Inputs:
 32034                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 32035                                  ;	AL = 01 set assign mode 		    (SetMode)
 32036                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 32037                                  ;	AL = 03 Define Macro (attch start)
 32038                                  ;	    BL = Macro type
 32039                                  ;	       = 0 alias
 32040                                  ;	       = 1 file/device
 32041                                  ;	       = 2 drive
 32042                                  ;	       = 3 Char device -> network
 32043                                  ;	       = 4 File device -> network
 32044                                  ;	    DS:SI -> ASCIZ source name
 32045                                  ;	    ES:DI -> ASCIZ destination name
 32046                                  ;	AL = 04 Cancel Macro
 32047                                  ;	    DS:SI -> ASCIZ source name
 32048                                  ;	AL = 05 Modified get attach list entry
 32049                                  ;	AL = 06 Get ifsfunc item
 32050                                  ;	AL = 07 set in_use of a drive's CDS
 32051                                  ;	     DL = drive number, 0=default  0=A,,
 32052                                  ;	AL = 08 reset in_use of a drive's CDS
 32053                                  ;	     DL = drive number, 0=A, 1=B,,,
 32054                                  ; Function:
 32055                                  ;	Do macro stuff
 32056                                  ; Returns:
 32057                                  ;	Std Xenix style error return
 32058                                  ;----------------------------------------------------------------------------
 32059                                  
 32060                                  _$AssignOper:
 32061                                  	; MSDOS 6.0
 32062                                  	;CMP	AL,7			      ; set in_use ?		;AN000;
 32063                                  	;JNZ	short chk08		      ; no			;AN000;
 32064                                  ;srinuse:								;AN000;
 32065                                  	;PUSH	AX			      ; save al 		;AN000;
 32066                                  	;MOV	AL,DL			      ; AL= drive id		;AN000;
 32067                                  	;CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 32068                                  	;POP	AX			      ; 			;AN000;
 32069                                  	;JC	short baddrv		      ; bad drive		;AN000;
 32070                                  	;CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 32071                                  	;JZ	short baddrv		      ;     no			;AN000;
 32072                                  	;CMP	AL,7			      ; set ?			;AN000;
 32073                                  	;JNZ	short resetdrv		      ; no			;AN000;
 32074                                  	;OR	word [SI+curdir.flags],curdir_inuse; set in_use		;AN000;
 32075                                  	;JMP	SHORT okdone		      ; 			;AN000;
 32076                                  ;resetdrv:								;AN000;
 32077                                  	;AND	word [SI+curdir_flags],~curdir_inuse ; reset in_use	;AN000;
 32078                                  	;JMP	SHORT okdone			; 			;AN000;
 32079                                  ;baddrv: 								;AN000;
 32080                                  	;MOV	AX,error_invalid_drive	      ; error			;AN000;
 32081                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 32082                                  ;chk08:									;AN000;
 32083                                  	;CMP	AL,8			      ; reset inuse ?		;AN000;
 32084                                  	;JZ	short srinuse 		      ; yes			;AN000;
 32085                                  
 32086                                  	;IF	NOT INSTALLED
 32087                                  	;transfer NET_ASSOPER
 32088                                  	;ELSE
 32089                                  
 32090                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32091 00006894 50                      	PUSH	AX
 32092                                  	;mov	ax,111Eh
 32093                                  	;MOV	AX,(MultNET SHL 8) OR 30
 32094 00006895 B81E11                  	mov	ax,(MultNET*256)+30
 32095 00006898 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 32096                                  			; SS = DOS CS
 32097                                  			; STACK: WORD function to execute
 32098                                  			; Return: CF set on error, AX = error code
 32099                                  			; STACK unchanged
 32100 0000689A 5B                      	POP	BX			; Don't zap error code in AX
 32101 0000689B 7203                    	JC	short ASS_ERR
 32102                                  okdone:
 32103 0000689D E95DAE                  	jmp	SYS_RET_OK
 32104                                  
 32105                                  ASS_ERR:
 32106 000068A0 E963AE                  	jmp	SYS_RET_ERR
 32107                                  
 32108                                  	;ENDIF
 32109                                  
 32110                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 32111                                  ;----------------------------------------------------------------------------
 32112                                  ;**	FIND_DPB - Find a DPB from a Drive #
 32113                                  ;
 32114                                  ;	ENTRY	AL has drive number A = 0
 32115                                  ;	EXIT	'C' set
 32116                                  ;		    No DPB for this drive number
 32117                                  ;		'C' clear
 32118                                  ;		    DS:SI points to DPB for drive
 32119                                  ;	USES	SI, DS, Flags
 32120                                  ;----------------------------------------------------------------------------
 32121                                  
 32122                                  FIND_DPB:
 32123 000068A3 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 32124                                  fdpb5:	
 32125 000068A8 83FEFF                  	CMP	SI,-1
 32126 000068AB 7409                    	JZ	short fdpb10
 32127 000068AD 3A04                    	cmp	al,[si]
 32128                                  	;CMP	AL,[SI+DPB.DRIVE]
 32129 000068AF 7406                    	jz	short ret_label15	; Carry clear (retz)
 32130                                  	;lds	si,[si+18h]
 32131 000068B1 C57418                  	LDS	SI,[SI+DPB.NEXT_DPB]
 32132 000068B4 EBF2                    	JMP	short fdpb5
 32133                                  
 32134                                  fdpb10:	
 32135 000068B6 F9                      	STC
 32136                                  
 32137                                  ret_label15:
 32138 000068B7 C3                      	retn
 32139                                  
 32140                                  ;	Break <InitCDS - set up an empty CDS>
 32141                                  ;----------------------------------------------------------------------------
 32142                                  ;**	InitCDS - Setup an Empty CDS
 32143                                  ;
 32144                                  ;	ENTRY	ThisCDS points to CDS
 32145                                  ;		AL has uppercase drive letter
 32146                                  ;	EXIT	ThisCDS is now empty
 32147                                  ;		(ES:DI) = CDS
 32148                                  ;		'C' set if no DPB associated with drive
 32149                                  ;	USES	AH,ES,DI, Flags
 32150                                  ;----------------------------------------------------------------------------
 32151                                  
 32152                                  InitCDS:
 32153                                  	; 19/08/2018
 32154                                  	; 05/08/2018 - Retro DOS v3.0
 32155                                  	; MSDOS 6.0
 32156 000068B8 50                      	push	ax			; save (AL) for caller
 32157 000068B9 36C43E[3A05]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 32158                                  	;mov	word [es:di+67],0
 32159 000068BE 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 32160 000068C4 2C40                    	SUB	AL,"A"-1                ; A = 1
 32161 000068C6 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 32162 000068CB 7236                    	JC	short icdsx		; Drive does not map a physical drive
 32163 000068CD 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 32164 000068CE 50                      	PUSH	AX			; save drive number for later
 32165 000068CF 0441                    	add	al,"A"
 32166 000068D1 B43A                    	MOV	AH,':'
 32167 000068D3 268905                  	mov	[ES:DI],ax
 32168                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 32169                                  	;mov	ax,"\"
 32170                                  	;mov	[es:di+2],ax
 32171                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 32172 000068D6 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 32173                                  	;or	word [es:di+67],4000h
 32174                                  	;or	byte [es:di+68],40h
 32175 000068DC 26804D4440              	OR	byte [ES:DI+curdir.flags+1],curdir_inuse>>8
 32176 000068E1 29C0                    	sub	ax,ax
 32177                                  	;MOV	[es:di+73],ax ; 0
 32178 000068E3 26894549                	MOV	[ES:DI+curdir.ID],ax
 32179                                  	;mov	[es:di+75],ax ; 0
 32180 000068E7 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 32181 000068EB B002                    	mov	al,2
 32182                                  	;mov	[es:di+79],aX ; 2
 32183 000068ED 2689454F                	MOV	[ES:DI+curdir.end],ax
 32184 000068F1 58                      	POP	AX			; (al) = drive number
 32185 000068F2 1E                      	push	ds
 32186 000068F3 56                      	push	si
 32187 000068F4 E8ACFF                  	call	FIND_DPB
 32188 000068F7 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 32189                                  	;mov	[es:di+69],si
 32190 000068F9 26897545                	MOV	[ES:DI+curdir.devptr],SI
 32191                                  	;mov	[es:di+71],ds
 32192 000068FD 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 32193                                  icds5:	
 32194 00006901 5E                      	pop	si
 32195 00006902 1F                      	pop	ds
 32196                                  icdsx:	
 32197 00006903 58                      	pop	ax
 32198                                  RET45:
 32199 00006904 C3                      	retn
 32200                                  
 32201                                  ;Break <$UserOper - get/set current user ID (for net)>
 32202                                  ;----------------------------------------------------------------------------
 32203                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 32204                                  ;	maintain this string and do no verifications.
 32205                                  ;
 32206                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 32207                                  ;				      4-printer-set-flags,5-printer-get-flags)
 32208                                  ;		DS:DX is user string pointer (calls 1,2)
 32209                                  ;		ES:DI is user buffer (call 3)
 32210                                  ;		BX is assign index (calls 2,3,4,5)
 32211                                  ;		CX is user number (call 1)
 32212                                  ;		DX is flag word (call 4)
 32213                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 32214                                  ;			and user CX is set to the user number
 32215                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 32216                                  ;		If AL = 5 then DX is flag word
 32217                                  ;----------------------------------------------------------------------------
 32218                                  
 32219                                  _$UserOper:
 32220                                  	; 05/08/2018 - Retro DOS v3.0
 32221                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32222 00006905 50                      	PUSH	AX
 32223 00006906 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 32224 00006908 58                      	POP	AX
 32225 00006909 7211                    	JB	short UserGet 		; return to user the string
 32226 0000690B 742E                    	JZ	short UserSet 		; set the current user
 32227 0000690D 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 32228 0000690F 763D                    	JBE	short UserPrint		; yep
 32229                                  	;mov	byte [ss:EXTERR_LOCUS],1
 32230 00006911 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 32231                                  					; Extended Error Locus
 32232                                  	;error	error_invalid_function	; not 0,1,2,3
 32233                                  	;mov	al,1
 32234 00006917 B001                    	MOV	AL,error_invalid_function
 32235                                  useroper_error:
 32236 00006919 E9EAAD                  	JMP	SYS_RET_ERR
 32237                                  
 32238                                  UserGet:
 32239                                  ; Transfer MYNAME to DS:DX
 32240                                  ; Set Return CX to MYNUM
 32241 0000691C 1E                      	PUSH	DS			; switch registers
 32242 0000691D 07                      	POP	ES
 32243 0000691E 89D7                    	MOV	DI,DX			; destination
 32244 00006920 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 32245 00006925 E8E3AC                  	call	Get_User_Stack
 32246 00006928 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 32247 0000692B 16                      	push	ss			; point to DOSDATA
 32248 0000692C 1F                      	pop	ds
 32249 0000692D BE[B302]                	MOV	SI,MYNAME		; point source to user string
 32250                                  UserMove:
 32251 00006930 B90F00                  	MOV	CX,15
 32252 00006933 F3A4                    	REP	MOVSB			; blam.
 32253 00006935 31C0                    	XOR	AX,AX			; 16th byte is 0
 32254 00006937 AA                      	STOSB
 32255                                  UserBye:
 32256 00006938 E9C2AD                  	jmp	SYS_RET_OK		; no errors here
 32257                                  
 32258                                  UserSet:
 32259                                  ; Transfer DS:DX to MYNAME
 32260                                  ; CX to MYNUM
 32261 0000693B 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 32262 00006940 89D6                    	MOV	SI,DX			; user space has source
 32263 00006942 16                      	push	ss
 32264 00006943 07                      	pop	es
 32265 00006944 BF[B302]                	MOV	DI,MYNAME		; point dest to user string
 32266 00006947 36FE06[B202]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 32267 0000694C EBE2                    	JMP	short UserMove
 32268                                  
 32269                                  UserPrint:
 32270                                  
 32271                                  ;IF NOT Installed
 32272                                  ;	transfer PRINTER_GETSET_STRING
 32273                                  ;ELSE
 32274 0000694E 50                      	PUSH	AX
 32275                                  	;mov	ax,111Fh
 32276                                  	;MOV	AX,(MultNET SHL 8) OR 31
 32277 0000694F B81F11                  	mov	ax,(MultNET<<8)|31
 32278 00006952 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 32279                                  			; STACK: WORD function
 32280                                  			; Return: CF set on error, AX = error code
 32281                                  			; STACK unchanged
 32282 00006954 5A                      	POP	DX			; Clean stack
 32283 00006955 7302                    	JNC	short OKPA
 32284 00006957 EBC0                    	jmp	short useroper_error
 32285                                  OKPA:
 32286 00006959 EBDD                    	jmp	short UserBye
 32287                                  ;ENDIF
 32288                                  
 32289                                  
 32290                                  ;Break	<GetVisDrv - return visible drive>
 32291                                  ;----------------------------------------------------------------------------
 32292                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 32293                                  ;
 32294                                  ;   Inputs:	AL has drive identifier (0=default)
 32295                                  ;   Outputs:	Carry Set - invalid drive/macro
 32296                                  ;		Carry Clear - AL has physical drive (0=A)
 32297                                  ;		    ThisCDS points to CDS
 32298                                  ;   Registers modified: AL
 32299                                  ;----------------------------------------------------------------------------
 32300                                  
 32301                                  GetVisDrv:
 32302                                  	; 05/08/2018 - Retro DOS v3.0
 32303                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 32304 0000695B E81400                  	CALL	GETTHISDRV		; get inuse drive
 32305 0000695E 72A4                    	jc	short RET45
 32306 00006960 1E                      	push	ds
 32307 00006961 56                      	push	si
 32308 00006962 36C536[3A05]            	LDS	SI,[SS:THISCDS]			;smr;SS Override
 32309                                  	;test	word [si+67],2000h
 32310 00006967 F744430020              	TEST	word [SI+curdir.flags],curdir_splice
 32311 0000696C 5E                      	pop	si
 32312 0000696D 1F                      	pop	ds
 32313 0000696E 7494                    	jz	short RET45		; if not spliced, return OK
 32314                                  	; MSDOS 6.0
 32315                                  	;MOV	[SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 32316                                  	;
 32317 00006970 F9                      	STC				; signal error
 32318 00006971 C3                      	retn
 32319                                  
 32320                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 32321                                  ;----------------------------------------------------------------------------
 32322                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 32323                                  ;	macro pointer
 32324                                  ;
 32325                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 32326                                  ;   Outputs:
 32327                                  ;		Carry Set - invalid drive/macro
 32328                                  ;		Carry Clear - AL has physical drive (0=A)
 32329                                  ;		   ThisCDS points to macro
 32330                                  ;   Registers modified: AL
 32331                                  ;----------------------------------------------------------------------------
 32332                                  
 32333                                  GETTHISDRV:
 32334                                  	; 05/08/2018
 32335                                  	; 12/07/2018 - Retro DOS v3.0
 32336                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 32337                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32338 00006972 08C0                    	OR	AL,AL			; are we using default drive?
 32339 00006974 7506                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 32340 00006976 36A0[E402]              	MOV	AL,[SS:CURDRV]		; get the current drive
 32341                                  	;INC	ax			; Counteract next instruction
 32342                                  	; 04/09/2018
 32343 0000697A FEC0                    	inc	al
 32344                                  GTD10:	
 32345                                  	;DEC	ax			; 0 = A
 32346 0000697C FEC8                    	dec	al
 32347 0000697E 1E                      	PUSH	DS			; save world
 32348 0000697F 56                      	PUSH	SI
 32349                                  	;mov	byte [ss:EXTERR_LOCUS],2
 32350 00006980 36C606[D102]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 32351 00006986 36F606[0D05]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 32352 0000698C 7421                    	JZ	SHORT GTD20		; Logical
 32353 0000698E 50                      	PUSH	AX
 32354 0000698F 06                      	PUSH	ES
 32355 00006990 57                      	PUSH	DI
 32356 00006991 36C706[3A05][9504]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 32357 00006998 368C0E[3C05]            	mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 32358                                  	;MOV	[SS:THISCDS+2],SS	;ThisCDS = &DummyCDS;smr;
 32359 0000699D 0441                    	ADD	AL,'A'
 32360 0000699F E816FF                  	CALL	InitCDS			;	InitCDS(c);
 32361                                  	;test	word [es:di+67],4000h
 32362 000069A2 26F745430040            	TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 32363 000069A8 5F                      	POP	DI
 32364 000069A9 07                      	POP	ES
 32365 000069AA 58                      	POP	AX
 32366 000069AB 740E                    	JZ	SHORT GTD30		; Not a physical drive.
 32367 000069AD EB13                    	JMP	SHORT GTDX		; carry clear
 32368                                  GTD20:
 32369 000069AF E81300                  	CALL	GetCDSFromDrv
 32370 000069B2 7207                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 32371                                  	;test	word [si+43h],4000h
 32372 000069B4 F744430040              	TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 32373 000069B9 7507                    	JNZ	SHORT GTDX		; carry clear
 32374                                  GTD30:	
 32375                                  	; 14/08/2018
 32376                                  	;MOV	AL,error_invalid_drive	; invalid FAT drive
 32377                                  	;MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 32378 000069BB 36C606[D102]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 32379 000069C1 F9                      	STC
 32380                                  GTDX:	
 32381 000069C2 5E                      	POP	SI			; restore world
 32382 000069C3 1F                      	POP	DS
 32383 000069C4 C3                      	RETN
 32384                                   
 32385                                  
 32386                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 32387                                  ;----------------------------------------------------------------------------
 32388                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 32389                                  ;	pointer, returning an error if the drive number is greater than the
 32390                                  ;	number of CDS's
 32391                                  ;
 32392                                  ;   Inputs:	AL is physical unit # A=0...
 32393                                  ;   Outputs:	Carry Set if Bad Drive
 32394                                  ;		Carry Clear
 32395                                  ;		    DS:SI -> CDS
 32396                                  ;		    [THISCDS] = DS:SI
 32397                                  ;   Registers modified: DS,SI
 32398                                  ;----------------------------------------------------------------------------
 32399                                  
 32400                                  GetCDSFromDrv:
 32401 000069C5 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 32402 000069CA 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 32403 000069CC F9                      	STC				; signal error
 32404 000069CD C3                      	RETN				; bye
 32405                                  GetCDS:
 32406 000069CE 53                      	PUSH	BX
 32407 000069CF 50                      	PUSH	AX
 32408 000069D0 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 32409                                  	;mov	bl,81
 32410 000069D5 B351                    	MOV	BL,curdir.size		; size in convenient spot
 32411 000069D7 F6E3                    	MUL	BL			; get net offset
 32412 000069D9 01C6                    	ADD	SI,AX			; convert to true pointer
 32413 000069DB 368936[3A05]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 32414 000069E0 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 32415 000069E5 58                      	POP	AX
 32416 000069E6 5B                      	POP	BX
 32417 000069E7 F8                      	CLC				; no error
 32418 000069E8 C3                      	RETN				; bye!
 32419                                  
 32420                                  ;============================================================================
 32421                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 32422                                  ;============================================================================
 32423                                  ; Retro	DOS v3.0 - 12/07/2018
 32424                                  
 32425                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 32426                                  ;----------------------------------------------------------------------------
 32427                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 32428                                  ;       gritty substitution.
 32429                                  ;
 32430                                  ;   Inputs:     DS:DX - pointer to FCB
 32431                                  ;               ES:DI - point to destination
 32432                                  ;   Outputs:    Carry Set - invalid path in final map
 32433                                  ;               Carry Clear - FCB has been mapped into ES:DI
 32434                                  ;                   Sattrib is set from possibly extended FCB
 32435                                  ;                   ExtFCB set if extended FCB found
 32436                                  ;   Registers modified: most
 32437                                  ;----------------------------------------------------------------------------
 32438                                  
 32439                                  TransFCB:
 32440                                  	; 12/07/2018 - Retro DOS v3.0
 32441                                  	;LocalVar FCBTmp,16
 32442                                  	;ENTER
 32443 000069E9 55                      	push	bp
 32444 000069EA 89E5                    	mov	bp,sp
 32445                                  	;sub	sp,15	; MSDOS 3.3
 32446 000069EC 83EC10                  	sub	sp,16	; MSDOS 6.0
 32447 000069EF 16                      	push	ss
 32448 000069F0 07                      	pop	es
 32449 000069F1 06                      	push	es
 32450 000069F2 57                      	push	di
 32451                                  	;lea	di,[bp-15] ; MSDOS 3.3
 32452                                  	;LEA	DI,FCBTmp 
 32453 000069F3 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 32454 000069F6 36C606[0705]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 32455 000069FC 36C606[0805]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 32456 00006A02 E8BDBF                  	call	GetExtended             ; get FCB, extended or not
 32457 00006A05 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 32458 00006A07 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 32459 00006A0A 36A2[0805]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 32460 00006A0E 36C606[0705]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 32461                                  GetDrive:
 32462 00006A14 AC                      	lodsb				; get drive byte
 32463 00006A15 E85AFF                  	call	GETTHISDRV
 32464 00006A18 722C                    	jc	short BadPack
 32465 00006A1A E87C03                  	call	TextFromDrive           ; convert 0-based drive to text
 32466                                  ;
 32467                                  ; Scan the source to see if there are any illegal chars
 32468                                  ;
 32469 00006A1D BB[1613]                	mov	bx,CharType		; load lookup table
 32470 00006A20 B90B00                  	mov	cx,11
 32471 00006A23 56                      	push	si			; back over name, ext
 32472                                  FCBScan:
 32473 00006A24 AC                      	lodsb				; get a byte
 32474                                  	; 09/08/2018
 32475                                  	;xlat	byte [es:bx]
 32476 00006A25 26D7                    	es	xlat			; get flags
 32477                                  	;test	al,8	
 32478 00006A27 A808                    	test	al,FFCB
 32479 00006A29 741B                    	jz	short BadPack
 32480                                  NextCh: 
 32481 00006A2B E2F7                    	loop	FCBScan
 32482 00006A2D 5E                      	pop	si
 32483 00006A2E 89FB                    	mov	bx,di
 32484 00006A30 E8DDC3                  	call	PackName                ; crunch the path
 32485 00006A33 5F                      	pop	di			; get original destination
 32486 00006A34 07                      	pop	es
 32487 00006A35 16                      	push	ss			; get DS addressability
 32488 00006A36 1F                      	pop	ds
 32489                                  	;lea	si,[bp-15] ; MSDOS 3.3
 32490                                  	;LEA	SI,FCBTmp		; point at new pathname
 32491 00006A37 8D76F0                  	lea	si,[bp-16]
 32492 00006A3A 803F00                  	cmp	byte [bx],0
 32493 00006A3D 7407                    	jz	short BadPack
 32494 00006A3F 55                      	push	bp
 32495 00006A40 E80E00                  	call	TransPathSet            ; convert the path
 32496 00006A43 5D                      	pop	bp
 32497 00006A44 7303                    	jnc	short FCBRet		; bye with transPath error code
 32498                                  BadPack:
 32499 00006A46 F9                      	STC
 32500                                  	;mov	al,3
 32501 00006A47 B003                    	MOV     AL,error_path_not_found
 32502                                  FCBRet: 
 32503                                  	;LEAVE
 32504 00006A49 89EC                    	mov	sp,bp
 32505 00006A4B 5D                      	pop	bp
 32506                                  TransPath_retn:
 32507 00006A4C C3                      	retn
 32508                                  
 32509                                  ; 12/07/2018 - Retro DOS v3.0
 32510                                  
 32511                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 32512                                  ;----------------------------------------------------------------------------
 32513                                  ;
 32514                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 32515                                  ;       substitution, insertion of current directory and fixing . and ..
 32516                                  ;       entries. Perform splicing. Allow input string to match splice
 32517                                  ;       exactly.
 32518                                  ;
 32519                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 32520                                  ;       matches splice.
 32521                                  ;
 32522                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 32523                                  ;
 32524                                  ;   The following anomalous behaviour is required:
 32525                                  ;
 32526                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 32527                                  ;       Paths on devices are ignored. (truncate to 0-length)
 32528                                  ;       Raw net I/O sets ThisCDS => NULL.
 32529                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 32530                                  ;
 32531                                  ;   Other behaviour:
 32532                                  ;
 32533                                  ;       ThisCDS set up.
 32534                                  ;       FatRead done on local CDS.
 32535                                  ;       ValidateCDS done on local CDS.
 32536                                  ;
 32537                                  ;   Brief flowchart:
 32538                                  ;
 32539                                  ;       if fSharing then
 32540                                  ;           set up DummyCDS (ThisCDS)
 32541                                  ;           canonicalize (sets cMeta)
 32542                                  ;           splice
 32543                                  ;           fatRead
 32544                                  ;           return
 32545                                  ;       if \\ or d:\\ lead then
 32546                                  ;           set up null CDS (ThisCDS)
 32547                                  ;           canonicalize (sets cMeta)
 32548                                  ;           return
 32549                                  ;       if device then
 32550                                  ;           set up dummyCDS (ThisCDS)
 32551                                  ;           canonicalize (sets cMeta)
 32552                                  ;           return
 32553                                  ;       if file then
 32554                                  ;           getCDS (sets (ThisCDS) from name)
 32555                                  ;           validateCDS (may reset current dir)
 32556                                  ;           Copy current dir
 32557                                  ;           canonicalize (set cMeta)
 32558                                  ;           splice
 32559                                  ;           generate correct CDS (ThisCDS)
 32560                                  ;           if local then
 32561                                  ;               fatread
 32562                                  ;           return
 32563                                  ;
 32564                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32565                                  ;               DI - point to buffer in DOSDATA
 32566                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32567                                  ;                   syntax, etc. or user FAILed to I 24.
 32568                                  ;               WFP_Start - points to beginning of buffer
 32569                                  ;               Curr_Dir_End - points to end of current dir in path
 32570                                  ;               DS - DOSDATA
 32571                                  ;   Registers modified: most
 32572                                  ;
 32573                                  ;----------------------------------------------------------------------------
 32574                                  
 32575                                  TransPath:
 32576 00006A4D 30C0                    	XOR     AL,AL
 32577 00006A4F EB02                    	JMP     SHORT SetSplice
 32578                                  TransPathSet:
 32579 00006A51 B0FF                    	MOV     AL,-1
 32580                                  SetSplice:
 32581 00006A53 36A2[F802]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 32582 00006A57 B0FF                    	MOV     AL,-1
 32583                                  TransPathNoSet:
 32584 00006A59 36A2[0C05]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 32585 00006A5D 36C606[1505]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 32586 00006A63 36893E[4A05]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 32587 00006A68 36C706[4E05]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 32588 00006A6F 16                      	push	ss
 32589 00006A70 07                      	pop	es
 32590                                  	;lea	bp,[di+134]
 32591 00006A71 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 32592                                  ;
 32593                                  ; if this is through the server dos call, fsharing is set. We set up a
 32594                                  ; dummy cds and let the operation go.
 32595                                  ;
 32596 00006A75 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 32597 00006A7B 7435                    	JZ	short CheckUNC		; skip to UNC check
 32598                                  ;
 32599                                  ; ES:DI point to buffer
 32600                                  ;
 32601 00006A7D E80203                  	CALL	DriveFromText           ; get drive and advance DS:SI
 32602 00006A80 E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 32603 00006A83 722A                    	jc	short NoPath
 32604 00006A85 E81103                  	CALL	TextFromDrive		; drop in new
 32605 00006A88 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 32606 00006A8B E83801                  	CALL	Canonicalize            ; copy and canonicalize
 32607 00006A8E 72BC                    	jc	short TransPath_retn	; errors
 32608                                  ;
 32609                                  ; Perform splices for net guys.
 32610                                  ;
 32611 00006A90 16                      	push	ss
 32612 00006A91 1F                      	pop	ds
 32613 00006A92 8B36[4A05]              	MOV     SI,[WFP_START] 		; point to name
 32614 00006A96 F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32615 00006A9B 7403                    	JZ	short NoServerSplice
 32616 00006A9D E83602                  	CALL    Splice
 32617                                  NoServerSplice:
 32618 00006AA0 16                      	push	ss
 32619 00006AA1 1F                      	pop	ds                      ; for FATREAD
 32620 00006AA2 C43E[3A05]              	LES     DI,[THISCDS]		; for fatread
 32621 00006AA6 E8BCB5                  	call	EcritDisk
 32622 00006AA9 E810F1                  	call	FATREAD_CDS
 32623 00006AAC E8BEB5                  	call	LcritDisk
 32624                                  NoPath:
 32625                                  	;mov	al,3
 32626 00006AAF B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32627 00006AB1 C3                      	retn				; any errors are in Carry flag
 32628                                  
 32629                                  ;
 32630                                  ; Let the network decide if the name is for a spooled device. It will map
 32631                                  ; the name if so.
 32632                                  ;
 32633                                  CheckUNC:
 32634 00006AB2 36C706[3A05]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 32635                                  	;CallInstall NetSpoolCheck,MultNET,35
 32636 00006AB9 B82311                  	mov	ax,1123h
 32637 00006ABC CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 32638                                  			; DS:SI -> ASCIZ filename to canonicalize
 32639                                  			; ES:DI -> 128-byte buffer for qualified name
 32640                                  			; Return: CF set if not resolved
 32641 00006ABE 7329                    	JNC	short UNCDone
 32642                                  ;
 32643                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 32644                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 32645                                  ; input, then the name has been changed to the remote spooler by the above net
 32646                                  ; call. Also, there may be a drive in front of the \\.
 32647                                  ;
 32648                                  NO_CHECK:
 32649 00006AC0 E8BF02                  	CALL    DriveFromText		; eat drive letter
 32650 00006AC3 50                      	PUSH    AX                      ; save it
 32651 00006AC4 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 32652 00006AC6 E880EB                  	call    PATHCHRCMP              ; convert to normal form
 32653 00006AC9 86E0                    	XCHG    AH,AL                   ; swap for second byte
 32654 00006ACB E87BEB                  	call    PATHCHRCMP              ; convert to normal form
 32655 00006ACE 751F                    	JNZ	short CheckDevice	; not a path char
 32656 00006AD0 38C4                    	CMP     AH,AL                   ; are they same?
 32657 00006AD2 751B                    	JNZ	short CheckDevice	; nope
 32658                                  ;
 32659                                  ; We have a UNC request. We must copy the string up to the beginning of the
 32660                                  ; local machine root path
 32661                                  ;
 32662                                  
 32663 00006AD4 58                      	POP     AX
 32664 00006AD5 A5                      	MOVSW                           ; get the lead \\.
 32665                                  UNCCpy:
 32666 00006AD6 AC                      	LODSB                           ; get a byte
 32667 00006AD7 E833EB                   	call	UCase                   ;AN000;; convert the char
 32668 00006ADA 08C0                    	OR      AL,AL
 32669 00006ADC 740E                    	JZ	short UNCTerm		; end of string. All done.
 32670 00006ADE E868EB                  	call    PATHCHRCMP              ; is it a path char?
 32671 00006AE1 89FB                    	MOV     BX,DI                   ; backup position
 32672 00006AE3 AA                      	STOSB
 32673 00006AE4 75F0                    	JNZ	short UNCCpy		; no, go copy
 32674 00006AE6 E8DD00                  	CALL    Canonicalize            ; wham (and set cMeta)
 32675                                  UNCDone:
 32676 00006AE9 16                      	push	ss
 32677 00006AEA 1F                      	pop	ds
 32678 00006AEB C3                       	retn				; return error code
 32679                                  UNCTerm:
 32680 00006AEC AA                      	STOSB                           ;AN000;
 32681 00006AED EBFA                    	JMP	short UNCDone		;AN000;
 32682                                  
 32683                                  CheckDevice:
 32684                                  ;
 32685                                  ; Check DS:SI for device. First eat any path stuff
 32686                                  ;
 32687 00006AEF 58                      	POP     AX                      ; retrieve drive info
 32688 00006AF0 803C00                  	CMP     BYTE [SI],0		; check for null file
 32689 00006AF3 7504                    	JNZ	short CheckPath
 32690                                  	;mov	al,2 
 32691 00006AF5 B002                    	MOV     AL,error_file_not_found ; bad file error
 32692 00006AF7 F9                      	STC                             ; signal error on null input
 32693 00006AF8 C3                      	RETN				; bye!
 32694                                  CheckPath:
 32695 00006AF9 50                      	push	ax
 32696 00006AFA 55                      	push	bp			; save drive number
 32697                                  
 32698                                  	; MSDOS 6.0
 32699                                  ;;;BUGBUG BUG 10-26-1992 scottq
 32700                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 32701                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 32702                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 32703                                  ;;;end up having a 5D in the opcode's displacement field. The
 32704                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 32705                                  ;;;
 32706                                  ;;;What we do here is do a call to a function that is less than 5Dh
 32707                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 32708                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 32709                                  ;;;
 32710                                  ;;;More info:
 32711                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 32712                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 32713                                  ;;;
 32714 00006AFB E82000                  	call	no5Dshere
 32715                                  start5Dhack:
 32716                                  ;following is replaced with 5Dhack code--Invoke  CheckThisDevice         
 32717                                  backfrom5Dhack:
 32718 00006AFE 5D                      	pop	bp
 32719 00006AFF 58                      	pop	ax			; get drive letter back
 32720 00006B00 731F                    	JNC	short DoFile		; yes we have a file.
 32721                                  ;
 32722                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 32723                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 32724                                  ; call.
 32725                                  ;
 32726 00006B02 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 32727 00006B08 E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 32728 00006B0B 36C606[0D05]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 32729                                  ;
 32730                                  ; Now that we have noted that we have a device, we put it into a form that
 32731                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 32732                                  ; string. We relax this to state that if the d:\ is present then the path
 32733                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 32734                                  ; a device.
 32735                                  ;
 32736 00006B11 E88502                  	CALL    TextFromDrive
 32737 00006B14 B02F                    	MOV     AL,'/'                  ; path sep.
 32738 00006B16 AA                      	STOSB
 32739 00006B17 E831B4                  	call	StrCpy			; move remainder of string
 32740                                  
 32741 00006B1A F8                      	CLC                             ; everything OK.
 32742 00006B1B 16                      	push	ss
 32743 00006B1C 1F                      	pop	ds                      ; remainder of OK stuff
 32744                                  DoFile_retn:
 32745 00006B1D C3                      	retn
 32746                                  
 32747                                  no5Dshere:
 32748                                  	; 10/08/2018
 32749 00006B1E E9FEE0                  	jmp	CheckThisDevice		; snoop for device
 32750                                  
 32751                                  ;.erre (no5Dshere - start5Dhack - 5D)
 32752                                  
 32753                                  ;
 32754                                  ; We have a file. Get the raw CDS.
 32755                                  ;
 32756                                  
 32757                                  DoFile:
 32758                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32759                                  
 32760 00006B21 E837FE                  	call	GetVisDrv               ; get proper CDS
 32761                                  	;mov	al,3 
 32762 00006B24 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 32763 00006B26 72F5                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 32764                                  ;
 32765                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 32766                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 32767                                  ; Use the one that we are going to use (ES:DI).
 32768                                  ;
 32769                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 32770 00006B28 1E                      	push	ds
 32771 00006B29 56                      	push	si
 32772 00006B2A 06                      	push	es
 32773 00006B2B 57                      	push	di
 32774 00006B2C E83CE0                  	call	ValidateCDS             ; poke CDS and make everything OK
 32775                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 32776 00006B2F 5F                      	pop	di
 32777 00006B30 07                      	pop	es
 32778 00006B31 5E                      	pop	si
 32779 00006B32 1F                      	pop	ds
 32780                                  	;mov	al,3
 32781 00006B33 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32782                                  	;retc				; someone failed an operation
 32783 00006B35 72E6                    	jc	short DoFile_retn
 32784                                  ;
 32785                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 32786                                  ; current directory. Copy it in.
 32787                                  ;
 32788 00006B37 1E                      	push	ds
 32789 00006B38 56                      	push	si
 32790 00006B39 36C536[3A05]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 32791 00006B3E 89FB                    	MOV     BX,DI                   ; point to destination
 32792 00006B40 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 32793                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32794                                  	;lea	bp,[di+134]
 32795 00006B43 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 32796                                  					;AN000;
 32797 00006B47 E810B4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 32798 00006B4A 4F                      	DEC     DI                      ; point to NUL byte
 32799                                  
 32800                                  ;
 32801                                  ; Make sure that there is a path char at end.
 32802                                  ;
 32803 00006B4B B05C                    	MOV     AL,'\'
 32804 00006B4D 263845FF                	CMP     [ES:DI-1],AL
 32805 00006B51 7401                    	JZ	short GetOrig
 32806 00006B53 AA                      	STOSB
 32807                                  ;
 32808                                  ; Now get original string.
 32809                                  ;
 32810                                  GetOrig:
 32811 00006B54 4F                      	DEC     DI                      ; point to path char
 32812 00006B55 5E                      	pop	si
 32813 00006B56 1F                      	pop	ds
 32814                                  ;
 32815                                  ; BX points to the end of the root part of the CDS (at where a path char
 32816                                  ; should be). Now, we decide whether we use this root or extend it with the
 32817                                  ; current directory.  See if the input string begins with a leading ;
 32819 00006B57 E8D100                  	CALL    PathSep                 ; is DS:SI a path sep?
 32820 00006B5A 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 32821 00006B5C 08C0                    	OR      AL,AL                   ; end of string?
 32822 00006B5E 7410                    	JZ	short DoCanon		; yes, skip.
 32823                                  ;
 32824                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 32825                                  ; to this root. Make sure that there is a path char there and advance the
 32826                                  ; source string over all leading \'s.
 32827                                  ;
 32828 00006B60 89DF                    	MOV     DI,BX                   ; back up to root point.
 32829                                  SkipPath:
 32830 00006B62 AC                      	LODSB
 32831 00006B63 E8E3EA                  	call    PATHCHRCMP
 32832 00006B66 74FA                    	JZ	short SkipPath
 32833 00006B68 4E                      	DEC     SI
 32834 00006B69 08C0                    	OR      AL,AL
 32835 00006B6B 7403                    	JZ	short DoCanon
 32836                                  ;
 32837                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 32838                                  ; for yucks.
 32839                                  ;
 32840                                  PathAssure:
 32841 00006B6D B05C                    	MOV     AL,'\'
 32842 00006B6F AA                      	STOSB
 32843                                  ;
 32844                                  ; ES:DI point to the correct spot for canonicalization to begin.
 32845                                  ; BP is the max extent to advance DI
 32846                                  ; BX is the backup limit for ..
 32847                                  ;
 32848                                  DoCanon:
 32849 00006B70 E85300                  	CALL    Canonicalize            ; wham.
 32850                                  	;retc				; badly formatted path.
 32851 00006B73 72A8                    	jc	short DoFile_retn
 32852                                  
 32853                                  ;
 32854                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 32855                                  ; to wfp_start and do string substitution. BP is still the max position in
 32856                                  ; buffer.
 32857                                  ;
 32858 00006B75 16                      	push	ss
 32859 00006B76 1F                      	pop	ds
 32860 00006B77 8B3E[4A05]              	MOV     DI,[WFP_START]		; DS:SI point to string
 32861 00006B7B C536[3A05]              	LDS     SI,[THISCDS]		; point to CDS
 32862                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32863 00006B7F E81F02                  	CALL    PathPref                ; is there a prefix?
 32864 00006B82 7514                    	JNZ	short DoSplice		; no, do splice
 32865                                  ;
 32866                                  ; We have a match. Check to see if we ended in a path char.
 32867                                  ;
 32868 00006B84 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 32869 00006B87 E8BFEA                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 32870 00006B8A 740C                    	JZ	short DoSplice		; yes, no current dir here.
 32871                                  Pathline:                               ; 2/13/KK
 32872 00006B8C 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 32873 00006B90 7406                    	JZ	short DoSplice
 32874 00006B92 47                      	INC     DI                      ; point to after current path char
 32875 00006B93 36893E[4E05]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 32876                                  ;
 32877                                  ; Splice the result.
 32878                                  ;
 32879                                  DoSplice:
 32880 00006B98 16                      	push	ss
 32881 00006B99 1F                      	pop	ds			; back to DOSDATA
 32882 00006B9A 8B36[4A05]              	MOV     SI,[WFP_START]		; point to beginning of string
 32883 00006B9E 31C9                    	XOR     CX,CX
 32884 00006BA0 F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32885 00006BA5 7403                    	JZ	short SkipSplice
 32886 00006BA7 E82C01                  	CALL    Splice                  ; replaces in place.
 32887                                  SkipSplice:
 32888                                  ;
 32889                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 32890                                  ; device.
 32891                                  ;
 32892 00006BAA 16                      	push	ss
 32893 00006BAB 1F                      	pop	ds
 32894 00006BAC C43E[3A05]              	LES     DI,[THISCDS]		; point to correct drive
 32895                                  	;test	word [es:di+67],8000h
 32896 00006BB0 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 32897 00006BB6 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 32898 00006BB8 E30B                    	JCXZ    Done
 32899 00006BBA E8A8B4                  	call	EcritDisk
 32900 00006BBD E8FCEF                  	call	FATREAD_CDS
 32901 00006BC0 E8AAB4                  	call	LcritDisk
 32902                                  	;mov	al, 3
 32903 00006BC3 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32904                                  Done:   
 32905 00006BC5 C3                      	retn                         ; any errors in carry flag.
 32906                                  
 32907                                  ; 13/07/2018
 32908                                  
 32909                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 32910                                  ;----------------------------------------------------------------------------
 32911                                  ;   Canonicalize - copy path removing . and .. entries.
 32912                                  ;
 32913                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32914                                  ;               ES:DI - point to buffer
 32915                                  ;               BX - backup limit (offset from ES) points to slash
 32916                                  ;               BP - end of buffer
 32917                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32918                                  ;                   syntax, etc.
 32919                                  ;               Carry Clear -
 32920                                  ;                   DS:DI - advanced to end of string
 32921                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 32922                                  ;   Registers modified: AX CX DX (in addition to those above)
 32923                                  ;----------------------------------------------------------------------------
 32924                                  
 32925                                  Canonicalize:
 32926                                  ;
 32927                                  ; We copy all leading path separators.
 32928                                  ;
 32929 00006BC6 AC                      	LODSB                           ;   while (PathChr (*s))
 32930 00006BC7 E87FEA                  	call    PATHCHRCMP
 32931 00006BCA 7507                    	JNZ	short CanonDec
 32932 00006BCC 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 32933 00006BCE 7319                    	JAE	short CanonBad		;           goto error;
 32934 00006BD0 AA                      	STOSB
 32935 00006BD1 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 32936                                  CanonDec:
 32937 00006BD3 4E                      	DEC     SI
 32938                                  ;
 32939                                  ; Main canonicalization loop.  We come here with DS:SI pointing to a textual
 32940                                  ; component (no leading path separators) and ES:DI being the destination
 32941                                  ; buffer.
 32942                                  ;
 32943                                  CanonLoop:
 32944                                  ;
 32945                                  ; If we are at the end of the source string, then we need to check to see that
 32946                                  ; a potential drive specifier is correctly terminated with a path sep char.
 32947                                  ; Otherwise, do nothing
 32948                                  ;
 32949 00006BD4 31C0                    	XOR     AX,AX
 32950 00006BD6 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 32951 00006BD8 751A                    	JNZ	short DoComponent
 32952 00006BDA 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 32953 00006BDF 7505                    	JNZ	short DoTerminate
 32954 00006BE1 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 32955 00006BE3 AA                      	STOSB
 32956 00006BE4 88E0                    	MOV     AL,AH
 32957                                  DoTerminate:
 32958 00006BE6 AA                      	STOSB                           ;           *d++ = 0;
 32959 00006BE7 F8                      	CLC                             ;           return (0);
 32960 00006BE8 C3                      	retn
 32961                                  
 32962                                  CanonBad:
 32963 00006BE9 E8CE01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 32964                                  	;mov	al,3
 32965 00006BEC B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 32966 00006BEE 7402                    	JZ	short PathEnc		; path character encountered in string
 32967                                  	;mov	al,2
 32968 00006BF0 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 32969                                  PathEnc:
 32970 00006BF2 F9                      	STC
 32971                                  CanonBad_retn:
 32972 00006BF3 C3                      	retn
 32973                                  ;
 32974                                  ; We have a textual component that we must copy.  We uppercase it and truncate
 32975                                  ; it to 8.3
 32976                                  ;
 32977                                  DoComponent:                            ;           }
 32978 00006BF4 E85100                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 32979 00006BF7 72FA                    	jc	short CanonBad_retn	;           return (-1);
 32980                                  ;
 32981                                  ; We special case the . and .. cases.  These will be backed up.
 32982                                  ;
 32983                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 32984 00006BF9 26833D2E                	CMP	WORD [ES:DI],002Eh
 32985 00006BFD 7408                    	JZ	short Skip1
 32986                                  	;CMP	WORD PTR ES:[DI],'..'
 32987 00006BFF 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 32988 00006C04 750A                    	JNZ	short CanonNormal
 32989 00006C06 4F                      	DEC     DI                      ;           d--;
 32990                                  Skip1:  
 32991 00006C07 E82B00                  	CALL    SkipBack                ;           SkipBack ();
 32992                                  	;mov	al,3
 32993 00006C0A B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32994 00006C0C 72E5                    	jc	short CanonBad_retn
 32995 00006C0E EB02                    	JMP     short CanonPath         ;           }
 32996                                  ;
 32997                                  ; We have a normal path.  Advance destination pointer over it.
 32998                                  ;
 32999                                  CanonNormal:                            ;       else
 33000 00006C10 01CF                    	ADD     DI,CX                   ;           d += ct;
 33001                                  ;
 33002                                  ; We have successfully copied a component.  We are now pointing at a path
 33003                                  ; sep char or are pointing at a nul or are pointing at something else.
 33004                                  ; If we point at something else, then we have an error.
 33005                                  ;
 33006                                  CanonPath:
 33007 00006C12 E81600                  	CALL    PathSep
 33008 00006C15 75D2                    	JNZ	short CanonBad		; something else...
 33009                                  ;
 33010                                  ; Copy the first path char we see.
 33011                                  ;
 33012 00006C17 AC                      	LODSB                           ; get the char
 33013 00006C18 E82EEA                  	call    PATHCHRCMP              ; is it path char?
 33014 00006C1B 75B6                    	JNZ	short CanonDec		; no, go test for nul
 33015 00006C1D 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 33016 00006C1F 73C8                    	JAE	short CanonBad		; yep, error.
 33017 00006C21 AA                      	STOSB                           ; copy the one byte
 33018                                  ;
 33019                                  ; Skip all remaining path chars
 33020                                  ;
 33021                                  CanonPathLoop:
 33022 00006C22 AC                      	LODSB                           ; get next byte
 33023 00006C23 E823EA                  	call    PATHCHRCMP              ; path char again?
 33024 00006C26 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 33025 00006C28 4E                      	DEC     SI                      ; back up
 33026 00006C29 EBA9                    	JMP	short  CanonLoop	; go copy component
 33027                                  
 33028                                  ;BREAK <PathSep - determine if char is a path separator>
 33029                                  ;----------------------------------------------------------------------------
 33030                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 33031                                  ;   Inputs:     DS:SI - point to a char
 33032                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 33033                                  ;               Zero set if AL is / \ or NUL
 33034                                  ;               Zero reset otherwise
 33035                                  ;   Registers modified: AL
 33036                                  ;----------------------------------------------------------------------------
 33037                                  
 33038                                  PathSep:
 33039 00006C2B 8A04                    	MOV     AL,[SI]                 ; get the character
 33040                                  PathSepGotCh:				; already have character
 33041 00006C2D 08C0                    	OR      AL,AL                   ; test for zero
 33042 00006C2F 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 33043 00006C31 E815EA                  	call    PATHCHRCMP              ; check for path character
 33044 00006C34 C3                      	retn				; and return HIS determination
 33045                                  
 33046                                  ;BREAK <SkipBack - move backwards to a path separator>
 33047                                  ;----------------------------------------------------------------------------
 33048                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 33050                                  ;               BX has current directory back up limit (point to a / \)
 33051                                  ;   Outputs:    ES:DI backed up to point to a path char
 33052                                  ;               AL has char from output ES:DI (path sep if carry clear)
 33053                                  ;               Carry set if illegal backup
 33054                                  ;               Carry Clear if ok
 33055                                  ;   Registers modified: DI,AL
 33056                                  ;----------------------------------------------------------------------------
 33057                                  
 33058                                  SkipBack:
 33059 00006C35 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 33060 00006C37 720B                    	JB	short SkipBad		;       if (d < dlim)
 33061 00006C39 4F                      	DEC     DI                      ;           goto err;
 33062 00006C3A 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 33063 00006C3D E809EA                  	call    PATHCHRCMP              ;           break;
 33064 00006C40 75F3                    	JNZ	short SkipBack		;       }
 33065 00006C42 F8                      	CLC                             ;   return (0);
 33066 00006C43 C3                      	retn				;
 33067                                  SkipBad:                                ;err:
 33068                                  	;mov	al,3
 33069 00006C44 B003                    	MOV     AL,error_path_not_found ; bad path error
 33070 00006C46 F9                      	STC                             ;   return (-1);
 33071 00006C47 C3                      	retn                          ;
 33072                                  
 33073                                  ;Break <CopyComponent - copy out a file path component>
 33074                                  ;----------------------------------------------------------------------------
 33075                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 33076                                  ;
 33077                                  ;   Inputs:     DS:SI - source path
 33078                                  ;               ES:DI - destination
 33079                                  ;               ES:BP - end of buffer
 33080                                  ;   Outputs:    Carry Set - too long
 33081                                  ;               Carry Clear - DS:SI moved past component
 33082                                  ;                   CX has length of destination
 33083                                  ;   Registers modified: AX,CX,DX
 33084                                  ;----------------------------------------------------------------------------
 33085                                  
 33086                                  CopyComponent:
 33087                                  
 33088                                  %define CopyBP	 [BP]		; word
 33089                                  %define CopyD	 [BP+2]		; dword
 33090                                  %define CopyDoff [BP+2]		; word
 33091                                  %define CopyS	 [BP+6]		; dword
 33092                                  %define CopySoff [BP+6]		; word
 33093                                  %define CopyTemp [BP+10]	; byte
 33094                                  
 33095 00006C48 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 33096 00006C4B 1E                      	push	ds
 33097 00006C4C 56                      	push	si
 33098 00006C4D 06                      	push	es
 33099 00006C4E 57                      	push	di
 33100 00006C4F 55                      	push	bp
 33101 00006C50 89E5                    	MOV     BP,SP
 33102 00006C52 B42E                    	MOV     AH,'.'
 33103 00006C54 AC                      	LODSB
 33104 00006C55 AA                      	STOSB
 33105 00006C56 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 33106 00006C58 7518                    	JNZ	short NormalComp
 33107 00006C5A E8CEFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 33108 00006C5D 740B                    	JZ	short NulTerm
 33109                                  TryTwoDot:
 33110 00006C5F AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 33111 00006C60 AA                      	STOSB
 33112 00006C61 38E0                    	CMP     AL,AH
 33113 00006C63 7557                    	JNZ	short CopyBad
 33114 00006C65 E8C3FF                  	CALL    PathSep
 33115 00006C68 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 33116                                  NulTerm:                                ;               return -1;
 33117 00006C6A 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 33118 00006C6C AA                      	STOSB
 33119 00006C6D 897606                  	MOV     CopySoff,SI
 33120 00006C70 EB47                    	JMP     SHORT _GoodRet		;       }
 33121                                  NormalComp:                             ;   else {
 33122 00006C72 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 33123 00006C75 E867E9                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 33124 00006C78 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 33125 00006C7B 743F                    	JZ	short CopyBad		;           return (-1);
 33126 00006C7D 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 33127 00006C83 7510                    	JNZ	short DoPack
 33128 00006C85 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 33129 00006C88 360016[1505]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 33130 00006C8D 7F2D                    	JG	short CopyBad		;               return (-1);
 33131 00006C8F 7504                    	JNZ	short DoPack		;           else
 33132 00006C91 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 33133 00006C93 742F                    	JZ	short CopyBadPath	;               return (-1);
 33134                                  DoPack:                                 ;           }
 33135 00006C95 897606                  	MOV     CopySoff,SI ; [bp+6]
 33136 00006C98 16                      	push	ss
 33137 00006C99 1F                      	pop	ds
 33138 00006C9A BE[E604]                	MOV     SI,NAME1
 33139 00006C9D 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 33140 00006CA0 57                      	push	di
 33141 00006CA1 E86CC1                  	call	PackName                ;       PackName (Name1, temp);
 33142 00006CA4 5F                      	pop	di
 33143 00006CA5 E8BBB2                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 33144 00006CA8 49                      	DEC     CX
 33145 00006CA9 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 33146 00006CAC 3B4E00                  	CMP     CX,CopyBP   ; [bp+0]
 33147 00006CAF 730B                    	JAE	short CopyBad		;           return (-1);
 33148 00006CB1 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 33149 00006CB3 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 33150 00006CB6 E8A1B2                  	call	FStrCpy
 33151                                  _GoodRet:				;       }
 33152 00006CB9 F8                      	CLC
 33153 00006CBA EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 33154                                  CopyBad:
 33155 00006CBC F9                      	STC
 33156 00006CBD E8FA00                  	CALL    ScanPathChar            ; check for path chars in rest of string
 33157                                  	;mov	al,2
 33158 00006CC0 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 33159 00006CC2 7503                    	JNZ	short CopyEnd
 33160                                  CopyBadPath:
 33161 00006CC4 F9                      	STC
 33162                                  	;mov	al,3
 33163 00006CC5 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 33164                                  CopyEnd:
 33165 00006CC7 5D                      	pop	bp
 33166 00006CC8 5F                      	pop	di
 33167 00006CC9 07                      	pop	es
 33168 00006CCA 5E                      	pop	si
 33169 00006CCB 1F                      	pop	ds
 33170 00006CCC 9F                      	LAHF
 33171 00006CCD 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 33172 00006CD0 E890B2                  	call	StrLen
 33173 00006CD3 49                      	DEC     CX
 33174 00006CD4 9E                      	SAHF
 33175 00006CD5 C3                      	retn
 33176                                  
 33177                                  ;Break <Splice - pseudo mount by string substitution>
 33178                                  ;----------------------------------------------------------------------------
 33179                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 33180                                  ;       ThisCDS to point to physical drive CDS.
 33181                                  ;   Inputs:     DS:SI point to string
 33182                                  ;               NoSetDir = TRUE => exact matches with splice fail
 33183                                  ;   Outputs:    DS:SI points to thisCDS
 33184                                  ;               ES:DI points to DPB
 33185                                  ;               String at DS:SI may be reduced in length by removing prefix
 33186                                  ;               and substituting drive letter.
 33187                                  ;               CX = 0 If no splice done
 33188                                  ;               CX <> 0 otherwise
 33189                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 33190                                  ;                   left alone
 33191                                  ;               ThisDPB points to proper DPB
 33192                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 33193                                  ;----------------------------------------------------------------------------
 33194                                  
 33195                                  Splice:
 33196 00006CD6 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 33197 00006CDC 746A                    	JZ	short AllDone
 33198 00006CDE 36FF36[3A05]            	push	word [SS:THISCDS]
 33199 00006CE3 36FF36[3C05]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 33200 00006CE8 1E                      	push	ds
 33201 00006CE9 56                      	push	si
 33202 00006CEA 5F                      	pop	di
 33203 00006CEB 07                      	pop	es
 33204 00006CEC 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 33205                                  SpliceScan:
 33206 00006CEE E8D4FC                  	call	GetCDSFromDrv
 33207 00006CF1 724B                    	JC	short SpliceDone
 33208 00006CF3 FEC0                    	INC     AL
 33209                                  	;test	word [si+67],2000h
 33210 00006CF5 F744430020              	TEST    word [SI+curdir.flags],curdir_splice
 33211 00006CFA 74F2                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 33212 00006CFC 57                      	push	di
 33213 00006CFD E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 33214 00006D00 7403                    	JZ	short SpliceFound	;
 33215                                  SpliceSkip:
 33216 00006D02 5F                      	pop	di
 33217 00006D03 EBE9                    	JMP	short SpliceScan	;               continue;
 33218                                  SpliceFound:
 33219 00006D05 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 33220 00006D09 7508                    	JNZ	short SpliceDo
 33221 00006D0B 36F606[F802]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 33222 00006D11 75EF                    	JNZ	short SpliceSkip
 33223                                  SpliceDo:
 33224 00006D13 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 33225 00006D15 06                      	push	es
 33226 00006D16 1F                      	pop	ds
 33227 00006D17 5F                      	pop	di
 33228 00006D18 E88000                  	CALL    TextFromDrive1          ;               src = TextFromDrive1(src,i);
 33229 00006D1B 36A1[4E05]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 33230 00006D1F 09C0                    	OR      AX,AX
 33231 00006D21 7808                    	JS	short NoPoke
 33232 00006D23 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 33233 00006D25 29F0                    	SUB     AX,SI
 33234 00006D27 36A3[4E05]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 33235                                  NoPoke:
 33236 00006D2B 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 33237 00006D2E 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 33238 00006D30 B05C                    	MOV     AL,"\"
 33239 00006D32 AA                      	STOSB
 33240                                  SpliceCopy:                             ;               strcpy (src, p);
 33241 00006D33 E824B2                  	call	FStrCpy
 33242 00006D36 83C404                  	ADD     SP,4                    ; throw away saved stuff
 33243 00006D39 80C901                  	OR      CL,1                    ; signal splice done.
 33244 00006D3C EB0C                    	JMP     SHORT DoSet             ;               return;
 33245                                  SpliceDone:                             ;               }
 33246 00006D3E 368F06[3C05]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 33247 00006D43 368F06[3A05]            	pop	word [SS:THISCDS]			;smr;SS Override
 33248                                  AllDone:
 33249 00006D48 31C9                    	XOR     CX,CX
 33250                                  DoSet:
 33251 00006D4A 36C536[3A05]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 33252                                  	;les	di,[si+69]
 33253 00006D4F C47C45                  	LES     DI,[SI+curdir.devptr]	
 33254 00006D52 36893E[2405]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 33255 00006D57 368C06[2605]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 33256                                  Splice_retn:
 33257 00006D5C C3                      	retn
 33258                                  
 33259                                  ;Break <$NameTrans - partially process a name>
 33260                                  ;----------------------------------------------------------------------------
 33261                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 33262                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 33263                                  ;   to Transpath playing games with devices, we need to insure that the output
 33264                                  ;   has drive letter and : in it.
 33265                                  ;
 33266                                  ;   Inputs:     DS:SI - source string for translation
 33267                                  ;               ES:DI - pointer to buffer
 33268                                  ;   Outputs:
 33269                                  ;       Carry Clear
 33270                                  ;               Buffer at ES:DI is filled in with data
 33271                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 33272                                  ;       Carry Set
 33273                                  ;               AX = error_path_not_found
 33274                                  ;   Registers modified: all
 33275                                  ;----------------------------------------------------------------------------
 33276                                  
 33277                                  _$NameTrans:
 33278 00006D5D 1E                      	push	ds
 33279 00006D5E 56                      	push	si
 33280 00006D5F 06                      	push	es
 33281 00006D60 57                      	push	di
 33282 00006D61 51                      	push	cx ; MSDOS 6.0
 33283                                  	
 33284                                  	; MSDOS 6.0	
 33285                                  ; M027 - Start
 33286                                  ;
 33287                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 33288                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 33289                                  ; device if the old call set the volume attribute bit. Note that devname in
 33290                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 33291                                  ; and restore CX.
 33292                                  ;
 33293 00006D62 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 33294 00006D64 E81A05                  	call	SetAttrib
 33295                                  
 33296                                  ; M027 - End
 33297                                  
 33298                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33299 00006D67 BF[6003]                	MOV     DI,OPENBUF
 33300 00006D6A E8E0FC                  	CALL    TransPath               ; to translation (everything)
 33301 00006D6D 59                      	pop	cx ; MSDOS 6.0
 33302 00006D6E 5F                      	pop     di
 33303 00006D6F 07                      	pop	es
 33304 00006D70 5E                      	pop     si
 33305 00006D71 1F                      	pop     ds
 33306 00006D72 7303                    	JNC	short TransOK
 33307 00006D74 E98FA9                  	jmp	SYS_RET_ERR
 33308                                  TransOK:
 33309 00006D77 BE[6003]                	MOV     SI,OPENBUF
 33310 00006D7A 16                      	push	ss
 33311 00006D7B 1F                      	pop	ds
 33312                                  GotText:
 33313 00006D7C E8DBB1                  	call	FStrCpy
 33314 00006D7F E97BA9                  	jmp	SYS_RET_OK
 33315                                  
 33316                                  ;Break   <DriveFromText - return drive number from a text string>
 33317                                  ;----------------------------------------------------------------------------
 33318                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 33319                                  ;   pointer.
 33320                                  ;
 33321                                  ;   Inputs:     DS:SI point to a text string
 33322                                  ;   Outputs:    AL has drive number
 33323                                  ;               DS:SI advanced
 33324                                  ;   Registers modified: AX,SI.
 33325                                  ;----------------------------------------------------------------------------
 33326                                  
 33327                                  DriveFromText:
 33328 00006D82 30C0                    	XOR     AL,AL                   ;       drive = 0;
 33329 00006D84 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 33330 00006D87 74D3                    	jz	short Splice_retn
 33331 00006D89 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 33332 00006D8D 75CD                    	jnz	short Splice_retn
 33333 00006D8F AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 33334 00006D90 0C20                    	OR      AL,20h
 33335                                  	;sub	al,60h
 33336 00006D92 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 33337 00006D94 75C6                    	jnz	short Splice_retn
 33338 00006D96 B0FF                    	MOV     AL,-1                   ; nuke AL...
 33339 00006D98 C3                      	retn				;           }
 33340                                  
 33341                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 33342                                  ;----------------------------------------------------------------------------
 33343                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 33344                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 33345                                  ;
 33346                                  ;   Inputs:     AL has 0-based drive number
 33347                                  ;   Outputs:    ES:DI advanced
 33348                                  ;   Registers modified: AX
 33349                                  ;----------------------------------------------------------------------------
 33350                                  
 33351                                  TextFromDrive:
 33352 00006D99 FEC0                    	INC     AL
 33353                                  TextFromDrive1:
 33354                                  	;add	al,40h
 33355 00006D9B 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 33356 00006D9D B43A                    	MOV     AH,":"                  ;   strcat (d, ":");
 33357 00006D9F AB                      	STOSW
 33358                                  PathPref_retn:
 33359 00006DA0 C3                      	retn
 33360                                  
 33361                                  ;Break   <PathPref - see if one path is a prefix of another>
 33362                                  ;----------------------------------------------------------------------------
 33363                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 33364                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 33365                                  ;   prefix: A:\ and A:\FOO
 33366                                  ;
 33367                                  ;   Inputs:     DS:SI potential prefix
 33368                                  ;               ES:DI string
 33369                                  ;   Outputs:    Zero set => prefix found
 33370                                  ;                   DI/SI advanced past matching part
 33371                                  ;               Zero reset => no prefix, DS/SI garbage
 33372                                  ;   Registers modified: CX
 33373                                  ;----------------------------------------------------------------------------
 33374                                  
 33375                                  PathPref:
 33376 00006DA1 E8CDB1                  	call	DStrLen                 ; get length
 33377 00006DA4 49                      	DEC     CX                      ; do not include nul byte
 33378 00006DA5 F3A6                    	REPZ    CMPSB                   ; compare
 33379 00006DA7 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 33380 00006DA9 50                      	push	ax			; save char register
 33381 00006DAA 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 33382 00006DAD E899E8                  	call    PATHCHRCMP              ; is it a path char (Root!)
 33383 00006DB0 7406                    	JZ	short Prefix		; yes, match root (I hope)
 33384                                  NotSep:                                 ; 2/13/KK
 33385 00006DB2 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 33386 00006DB5 E875FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 33387                                  Prefix:
 33388 00006DB8 58                      	pop	ax			; get back original
 33389 00006DB9 C3                      	retn
 33390                                  
 33391                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 33392                                  ;----------------------------------------------------------------------------
 33393                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 33394                                  ;     a path separator.
 33395                                  ;
 33396                                  ;     Input:    DS:SI target string (null terminated)
 33397                                  ;     Output:   Zero set => path separator encountered in string
 33398                                  ;               Zero clear => null encountered
 33399                                  ;     Registers modified: SI
 33400                                  ;----------------------------------------------------------------------------
 33401                                  
 33402                                  ScanPathChar:
 33403 00006DBA AC                      	LODSB                           ; fetch a character
 33404 00006DBB E86FFE                  	call    PathSepGotCh
 33405 00006DBE 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 33406 00006DC0 E886E8                  	call    PATHCHRCMP              ; path separator?
 33407 00006DC3 C3                      	retn
 33408                                  
 33409                                  ;============================================================================
 33410                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 33411                                  ;============================================================================
 33412                                  ; 13/07/2018 - Retro DOS v3.0
 33413                                  
 33414                                  ;	BREAK <$Close - return a handle to the system>
 33415                                  ;----------------------------------------------------------------------------
 33416                                  ;
 33417                                  ;**	$Close - Close a file Handle
 33418                                  ;
 33419                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 33420                                  ;		path
 33421                                  ;
 33422                                  ;	Assembler usage:
 33423                                  ;	    MOV     BX, handle
 33424                                  ;	    MOV     AH, Close
 33425                                  ;	    INT     int_command
 33426                                  ;
 33427                                  ;	ENTRY	(bx) = handle
 33428                                  ;	EXIT	<normal INT21 return convention>
 33429                                  ;	USES	all
 33430                                  ;
 33431                                  ;----------------------------------------------------------------------------
 33432                                  
 33433                                  _$CLOSE:
 33434                                  ;	Grab the SFT pointer from the JFN.
 33435                                  
 33436 00006DC4 E85902                  	call	CheckOwner		; get system file entry
 33437 00006DC7 722B                    	jc	short CloseError	; error return
 33438 00006DC9 16                      	push	ss
 33439 00006DCA 1F                      	pop	ds			; For DOS_CLOSE
 33440 00006DCB 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33441 00006DCF 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33442                                  
 33443                                  ; DS:SI point to JFN table entry.
 33444                                  ; ES:DI point to SFT
 33445                                  ;
 33446                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 33447                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 33448                                  ; If the file was not a net FCB, we free the JFN too.
 33449                                  
 33450                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 33451 00006DD3 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 33452 00006DD7 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 33453                                  	;mov	al,[ES:DI+2]
 33454 00006DD9 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 33455                                  	;and	al,0F0h
 33456 00006DDD 24F0                    	AND	AL,SHARING_MASK
 33457                                  	;cmp	al,70h
 33458 00006DDF 3C70                    	CMP	AL,SHARING_NET_FCB
 33459 00006DE1 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 33460                                  
 33461                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 33462                                  ; -1.
 33463                                  
 33464                                  FreeJFN:
 33465 00006DE3 E8FFF9                  	call	pJFNFromHandle		;   d = pJFN (handle);
 33466 00006DE6 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 33467                                  PostFree:
 33468                                  
 33469                                  ; ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_CLOSE!
 33470                                  
 33471 00006DEA E8CBCC                  	call	DOS_CLOSE
 33472                                  
 33473                                  ; DOS_Close may return an error.  If we see such an error, we report it but
 33474                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 33475                                  
 33476 00006DED 7205                    	JC	short CloseError
 33477                                  	;mov	ah,3Eh
 33478 00006DEF B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 33479 00006DF1 E909A9                  	jmp	SYS_RET_OK
 33480                                  CloseError:
 33481 00006DF4 E90FA9                  	jmp	SYS_RET_ERR
 33482                                  
 33483                                  
 33484                                  ;	BREAK <$Commit - commit the file>
 33485                                  ;----------------------------------------------------------------------------
 33486                                  ;
 33487                                  ;**	$Commit - Commit a File
 33488                                  ;
 33489                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 33490                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 33491                                  ;	the directory entry, etc., so this commit is pretty useless. check
 33492                                  ;	and fix this!! jgl
 33493                                  ;
 33494                                  ;	Assembler usage:
 33495                                  ;	    MOV     BX, handle
 33496                                  ;	    MOV     AH, Commit
 33497                                  ;	    INT     int_command
 33498                                  ;
 33499                                  ;	ENTRY	(bx) = handle
 33500                                  ;	EXIT	none
 33501                                  ;	USES	all
 33502                                  ;;----------------------------------------------------------------------------
 33503                                  
 33504                                  _$COMMIT:
 33505                                  ;	Grab the SFT pointer from the JFN.
 33506                                  
 33507 00006DF7 E82602                  	call	CheckOwner		; get system file entry
 33508 00006DFA 7214                    	JC	short CommitError	; error return
 33509 00006DFC 16                      	push	ss
 33510 00006DFD 1F                      	pop	ds			; For DOS_COMMIT
 33511 00006DFE 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33512 00006E02 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33513                                  
 33514                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 33515                                  ;
 33516                                  ;	ES:DI point to SFT
 33517                                  
 33518 00006E06 E8B0CD                  	call	DOS_COMMIT
 33519 00006E09 7205                    	JC	short CommitError
 33520                                  	;mov	ah,68h
 33521 00006E0B B468                    	MOV	AH,COMMIT		;
 33522 00006E0D E9EDA8                  	jmp	SYS_RET_OK
 33523                                  CommitError:
 33524 00006E10 E9F3A8                  	jmp	SYS_RET_ERR
 33525                                  
 33526                                  ;	BREAK <$ExtHandle - extend handle count>
 33527                                  
 33528                                  ;**	$ExtHandle - Extend Handle Count
 33529                                  ;----------------------------------------------------------------------------
 33530                                  ;	Assembler usage:
 33531                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 33532                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 33533                                  ;	    INT     int_command 		 busy )
 33534                                  ;
 33535                                  ;	ENTRY	(bx) = new number of handles
 33536                                  ;	EXIT	'C' clear if OK
 33537                                  ;		'C' set iff err
 33538                                  ;		  (ax) = error code
 33539                                  ;			 AX = error_not_enough_memory
 33540                                  ;			      error_too_many_open_files
 33541                                  ;	USES	all
 33542                                  ;----------------------------------------------------------------------------
 33543                                  
 33544                                  _$ExtHandle:
 33545 00006E13 31ED                    	XOR	BP,BP			; 0: enlarge  1: shrink  2:psp
 33546                                  	;cmp	bx,20
 33547 00006E15 83FB14                  	CMP	BX,FILPERPROC
 33548 00006E18 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 33549 00006E1A BB1400                  	MOV	BX,FILPERPROC
 33550                                  exth2:	
 33551 00006E1D 368E06[DE02]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 33552                                  	;mov	cx,[ES:32h]
 33553 00006E22 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 33554 00006E27 39CB                    	CMP	BX,CX			; the requested == current
 33555 00006E29 7452                    	JE	short ok_done 		; yes and exit
 33556 00006E2B 7722                    	JA	short larger		; go allocate new table
 33557                                  
 33558                                  ;	We're going to shrink the # of handles available
 33559                                  
 33560 00006E2D BD0100                  	MOV	BP,1			; shrink
 33561                                  	;mov	ds,[ES:36h]
 33562 00006E30 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 33563 00006E35 89DE                    	MOV	SI,BX			;
 33564 00006E37 29D9                    	SUB	CX,BX			; get difference
 33565                                  
 33566                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 33567                                  chck_handles:
 33568 00006E39 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 33569 00006E3C 7542                    	JNZ	short too_many_files	; status
 33570 00006E3E 46                      	INC	SI
 33571 00006E3F E2F8                    	LOOP	chck_handles
 33572 00006E41 83FB14                  	CMP	BX,FILPERPROC		; = 20
 33573 00006E44 7709                    	JA	short larger		; no
 33574                                  
 33575 00006E46 BD0200                  	MOV	BP,2			; psp
 33576                                  	;mov	di,24
 33577 00006E49 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 33578 00006E4C 53                      	PUSH	BX
 33579 00006E4D EB1F                    	JMP	short movhandl
 33580                                  
 33581                                  larger:
 33582 00006E4F 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 33583 00006E52 0F848100                	JZ	invalid_func ; 10/08/2018
 33584 00006E56 F8                      	CLC
 33585 00006E57 53                      	PUSH	BX			; save requested number
 33586 00006E58 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 33587 00006E5B B104                    	MOV	CL,4
 33588                                  	;ror	bx,cl			; MSDOS 3.3
 33589 00006E5D D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 33590 00006E5F 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 33591                                  
 33592 00006E63 55                      	PUSH	BP
 33593 00006E64 E8E8F6                  	call	_$ALLOC			; allocate memory
 33594 00006E67 5D                      	POP	BP
 33595 00006E68 7267                    	JC	short no_memory		; not enough meory
 33596                                  
 33597 00006E6A 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 33598 00006E6C 31FF                    	XOR	DI,DI
 33599                                  movhandl:
 33600 00006E6E 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 33601                                  
 33602 00006E73 F7C50300                	test	BP,3			; enlarge ?
 33603 00006E77 740C                    	JZ	short enlarge 		; yes
 33604 00006E79 59                      	POP	CX			; cx = the amount you shrink
 33605 00006E7A 51                      	PUSH	CX
 33606 00006E7B EB0C                    	JMP	short copy_hand
 33607                                  
 33608                                  ;	Done.  'C' clear
 33609                                  
 33610                                  ok_done:
 33611 00006E7D E97DA8                  	jmp	SYS_RET_OK
 33612                                  
 33613                                  too_many_files:
 33614                                  	;mov	al,4
 33615 00006E80 B004                    	MOV	AL,error_too_many_open_files
 33616 00006E82 E981A8                  	jmp	SYS_RET_ERR
 33617                                  
 33618                                  enlarge:
 33619                                  	;mov	cx,[32h]
 33620 00006E85 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 33621                                  copy_hand:
 33622 00006E89 89CA                    	MOV	DX,CX
 33623                                  	;lds	si,[34h]
 33624 00006E8B C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 33625 00006E8F F3A4                    	REP	MOVSB			; copy information to new table
 33626 00006E91 59                      	POP	CX			; get new number of handles
 33627 00006E92 51                      	PUSH	CX			; save it again
 33628 00006E93 29D1                    	SUB	CX,DX			; get the difference
 33629 00006E95 B0FF                    	MOV	AL,-1			; set availability to handles
 33630 00006E97 F3AA                    	REP	STOSB
 33631 00006E99 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 33632                                  	;cmp	word [34h],0
 33633 00006E9E 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 33634 00006EA3 750D                    	JNZ	short update_info	; yes, go update PDB entries
 33635 00006EA5 55                      	PUSH	BP
 33636 00006EA6 1E                      	PUSH	DS			; save old table segment
 33637 00006EA7 06                      	PUSH	ES			; save new table segment
 33638 00006EA8 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 33639 00006EAC E8BDF7                  	call	_$DEALLOC		; deallocate old table meomory
 33640 00006EAF 07                      	POP	ES			; restore new table segment
 33641 00006EB0 1F                      	POP	DS			; restore old table segment
 33642 00006EB1 5D                      	POP	BP
 33643                                  
 33644                                  update_info:
 33645 00006EB2 F7C50200                	test	BP,2			; psp?
 33646 00006EB6 7408                    	JZ	short non_psp 		; no
 33647                                  	;mov	word [34h],18h ; 24
 33648 00006EB8 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 33649 00006EBE EB06                    	JMP	short final
 33650                                  non_psp:
 33651                                  	;mov	word [34h],0
 33652 00006EC0 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 33653                                  final:
 33654                                  	;mov	word [36h],es	
 33655 00006EC6 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 33656                                  	;pop	word [32h]
 33657 00006ECA 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 33658 00006ECE E92CA8                  	jmp	SYS_RET_OK
 33659                                  
 33660                                  no_memory:
 33661 00006ED1 5B                      	POP	BX			; clean stack
 33662                                  	;mov	al,8
 33663 00006ED2 B008                    	MOV	AL,error_not_enough_memory
 33664 00006ED4 E92FA8                  	jmp	SYS_RET_ERR
 33665                                  invalid_func:
 33666                                  	;mov	al,1
 33667 00006ED7 B001                    	MOV	AL,error_invalid_function
 33668 00006ED9 E92AA8                  	jmp	SYS_RET_ERR
 33669                                  
 33670                                  
 33671                                  ;	BREAK <$READ - Read from a file handle>
 33672                                  ;----------------------------------------------------------------------------
 33673                                  ;
 33674                                  ;**	$Read - Read from a File Handle
 33675                                  ;
 33676                                  ;   Assembler usage:
 33677                                  ;
 33678                                  ;	LDS	DX, buf
 33679                                  ;	MOV	CX, count
 33680                                  ;	MOV	BX, handle
 33681                                  ;	MOV	AH, Read
 33682                                  ;	INT	int_command
 33683                                  ;	  AX has number of bytes read
 33684                                  ;
 33685                                  ;	ENTRY	(bx) = file handle
 33686                                  ;		(cx) = byte count
 33687                                  ;		(ds:dx) = buffer address
 33688                                  ;	EXIT	Through system call return so that to user:
 33689                                  ;		  'C' clear if OK
 33690                                  ;		    (ax) = bytes read
 33691                                  ;		  'C' set if error
 33692                                  ;		    (ax) = error code
 33693                                  ;
 33694                                  ;----------------------------------------------------------------------------
 33695                                  
 33696                                  _$READ:
 33697 00006EDC BE[FA3D]                	MOV	SI,DOS_READ
 33698                                  ReadDo:
 33699 00006EDF E803F9                  	call	pJFNFromHandle
 33700 00006EE2 7208                    	JC	short ReadError
 33701 00006EE4 268A05                  	MOV	AL,[ES:DI]
 33702 00006EE7 E83601                  	call	CheckOwner		; get the handle
 33703 00006EEA 7303                    	JNC	short ReadSetup		; no errors do the operation
 33704                                  
 33705                                  ;	Have an error.	'C' set
 33706                                  
 33707                                  ReadError:
 33708 00006EEC E917A8                  	jmp	SYS_RET_ERR		; go to error traps
 33709                                  
 33710                                  ReadSetup:
 33711 00006EEF 36893E[3605]            	MOV	[SS:THISSFT],DI		; save offset of pointer;smr;SS Override
 33712 00006EF4 368C06[3805]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 33713                                  	;;; MSDOS 6.0 
 33714                                  ;; Extended Open
 33715                                  	;;;testb [ES:DI+SF_ENTRY.sf_mode],INT_24_ERROR  ;AN000;;EO. need i24
 33716                                  	;;;JZ	short needi24 		      ;AN000;;EO. yes
 33717                                  	;;;OR	byte [EXTOPEN_ON],EXT_OPEN_I24_OFF 
 33718                                  					;AN000;;EO. set it off;smr;SS Override
 33719                                  needi24:				;AN000;
 33720                                  ;; Extended Open
 33721 00006EF9 36FF36[DA02]            	push	word [SS:DMAADD]
 33722 00006EFE 36FF36[DC02]            	push	word [SS:DMAADD+2]	;smr;SS Override
 33723                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33724                                  	;;; MSDOS 6.0
 33725                                  	;;; CALL Align_Buffer		;AN000;MS. align user's buffer
 33726                                  	; MSDOS 3.3
 33727 00006F03 89D3                    	MOV	BX,DX			; copy offset
 33728 00006F05 51                      	push	cx			; don't stomp on count
 33729 00006F06 B104                    	MOV	CL,4			; bits to shift bytes->para
 33730 00006F08 D3EB                    	SHR	BX,CL			; get number of paragraphs
 33731 00006F0A 59                      	pop	cx			; get count back
 33732 00006F0B 8CD8                    	MOV	AX,DS			; get original segment
 33733 00006F0D 01D8                    	ADD	AX,BX			; get new segment
 33734 00006F0F 8ED8                    	MOV	DS,AX			; in seg register
 33735 00006F11 83E20F                  	AND	DX,0Fh			; normalize offset
 33736 00006F14 368916[DA02]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33737 00006F19 368C1E[DC02]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33738                                  						;smr;SS Override
 33739                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33740 00006F1E 16                      	push	ss			; go for DOS addressability
 33741 00006F1F 1F                      	pop	ds
 33742 00006F20 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 33743 00006F22 8F06[DC02]              	pop	word [DMAADD+2]
 33744 00006F26 8F06[DA02]              	pop	word [DMAADD]
 33745                                  	;JNC	short READ_OK		;AN002;
 33746                                  	;JMP	ReadError		;AN002; if error, say bye bye
 33747 00006F2A 72C0                    	jc	short ReadError
 33748                                  READ_OK:
 33749 00006F2C 89C8                    	MOV	AX,CX			; get correct return in correct reg
 33750 00006F2E E9CCA7                  	jmp	SYS_RET_OK		; successful return
 33751                                  
 33752                                  
 33753                                  
 33754                                  ; 13/07/2018 - Retro DOS v3.0
 33755                                  
 33756                                  ;
 33757                                  ;   Input: DS:DX points to user's buffer addr
 33758                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 33759                                  ;   Output: [DMAADD] set
 33760                                  ;
 33761                                  
 33762                                  ;Align_Buffer:
 33763                                  ;	MOV	BX,DX			; copy offset
 33764                                  ;	push	cx			; don't stomp on count
 33765                                  ;	MOV	CL,4			; bits to shift bytes->para
 33766                                  ;	SHR	BX,CL			; get number of paragraphs
 33767                                  ;	pop	cx			; get count back
 33768                                  ;	MOV	AX,DS			; get original segment
 33769                                  ;	ADD	AX,BX			; get new segment
 33770                                  ;	MOV	DS,AX			; in seg register
 33771                                  ;	AND	DX,0Fh			; normalize offset
 33772                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33773                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33774                                  ;						;smr;SS Override
 33775                                  ;	retn
 33776                                  
 33777                                  ;BREAK <$WRITE - write to a file handle>
 33778                                  ;----------------------------------------------------------------------------
 33779                                  ;
 33780                                  ;   Assembler usage:
 33781                                  ;	    LDS     DX, buf
 33782                                  ;	    MOV     CX, count
 33783                                  ;	    MOV     BX, handle
 33784                                  ;	    MOV     AH, Write
 33785                                  ;	    INT     int_command
 33786                                  ;	  AX has number of bytes written
 33787                                  ;   Errors:
 33788                                  ;	    AX = write_invalid_handle
 33789                                  ;	       = write_access_denied
 33790                                  ;
 33791                                  ;   Returns in register AX
 33792                                  ;
 33793                                  ;----------------------------------------------------------------------------
 33794                                  
 33795                                  _$WRITE:
 33796 00006F31 BE[7B3F]                	MOV	SI,DOS_WRITE
 33797 00006F34 EBA9                    	JMP	short ReadDo
 33798                                  
 33799                                  ;BREAK <$LSEEK - move r/w pointer>
 33800                                  ;----------------------------------------------------------------------------
 33801                                  ;
 33802                                  ;   Assembler usage:
 33803                                  ;	    MOV     DX, offsetlow
 33804                                  ;	    MOV     CX, offsethigh
 33805                                  ;	    MOV     BX, handle
 33806                                  ;	    MOV     AL, method
 33807                                  ;	    MOV     AH, LSeek
 33808                                  ;	    INT     int_command
 33809                                  ;	  DX:AX has the new location of the pointer
 33810                                  ;   Error returns:
 33811                                  ;	    AX = error_invalid_handle
 33812                                  ;	       = error_invalid_function
 33813                                  ;   Returns in registers DX:AX
 33814                                  ;
 33815                                  ;----------------------------------------------------------------------------
 33816                                  
 33817                                  _$LSEEK:
 33818 00006F36 E8E700                  	call	CheckOwner		; get system file entry
 33819                                  LSeekError:
 33820                                  	;JNC	short CHKOWN_OK		;AN002;
 33821                                  	;JMP	short ReadError		;AN002; error return
 33822 00006F39 72B1                    	jc	short ReadError ; 24/07/2019
 33823                                  CHKOWN_OK:				;AN002;
 33824 00006F3B 3C02                    	CMP	AL,2			; is the seek value correct?
 33825 00006F3D 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 33826                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 33827 00006F3F 36C606[D102]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33828                                  					;smr;SS Override
 33829                                  	;mov	al,1
 33830 00006F45 B001                    	mov	al, error_invalid_function ; invalid method
 33831 00006F47 EBA3                    	jmp	short ReadError
 33832                                  LSeekDisp:
 33833 00006F49 3C01                    	CMP	AL,1			; best way to dispatch ; check middle
 33834 00006F4B 720A                    	JB	short LSeekStore	; just store CX:DX
 33835 00006F4D 771C                    	JA	short LSeekEOF		; seek from end of file
 33836                                  	;add	dx,[es:di+21]
 33837 00006F4F 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 33838                                  	;adc	cx,[es:di+23]
 33839 00006F53 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 33840                                  LSeekStore:
 33841 00006F57 89C8                    	MOV	AX,CX			; AX:DX
 33842 00006F59 92                      	XCHG	AX,DX			; DX:AX is the correct value
 33843                                  LSeekSetpos:
 33844                                  	;mov	[es:di+21],ax
 33845 00006F5A 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 33846                                  	;mov	[es:di+23],dx
 33847 00006F5E 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 33848 00006F62 E8A6A6                  	call	Get_User_Stack
 33849                                  	;mov	[si+6],dx
 33850 00006F65 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 33851                                  	;jmp	SYS_RET_OK		; successful return
 33852                                  	; 26/07/2019
 33853 00006F68 E995A7                  	jmp	SYS_RET_OK_clc
 33854                                  
 33855                                  LSeekEOF:
 33856                                  	;test	word [es:di+5],8000h
 33857 00006F6B 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 33858 00006F71 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 33859                                  LOCAL_LSeek:
 33860                                  	;add	dx,[es:di+17]
 33861 00006F73 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 33862                                  	;adc	cx,[es:di+19]
 33863 00006F77 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 33864 00006F7B EBDA                    	JMP	short LSeekStore	; go and set the position
 33865                                  
 33866                                  Check_LSeek_Mode:
 33867                                  	;test	word [es:di+2],8000h
 33868 00006F7D 26F745020080            	test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 33869 00006F83 75EE                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 33870                                  	;mov	ax,[es:di+2]
 33871 00006F85 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 33872                                  	;and	ax, 0F0h
 33873 00006F89 25F000                  	AND	AX,SHARING_MASK
 33874                                  	;cmp	ax,40h
 33875 00006F8C 83F840                  	CMP	AX,SHARING_DENY_NONE
 33876 00006F8F 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 33877                                  	;cmp	ax,30h
 33878 00006F91 83F830                  	CMP	AX,SHARING_DENY_READ
 33879 00006F94 75DD                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 33880                                  NET_LSEEK:
 33881                                  ;	JMP	short LOCAL_LSeek
 33882                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 33883                                  	;CallInstall Net_Lseek,MultNET,33
 33884                                  	;JNC	short LSeekSetPos
 33885                                  
 33886 00006F96 B82111                  	mov     ax, 1121h
 33887 00006F99 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 33888                                  			; CX:DX = offset (in bytes) from end
 33889                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 33890                                  			; SS = DOS CS
 33891                                  			; Return: CF set on error
 33892                                  			; CF clear if successful, DX:AX = new file position
 33893 00006F9B 73BD                    	jnb     short LSeekSetpos
 33894 00006F9D E966A7                  	jmp	SYS_RET_ERR
 33895                                  
 33896                                  ;BREAK <FileTimes - modify write times on a handle>
 33897                                  ;----------------------------------------------------------------------------
 33898                                  ;
 33899                                  ;   Assembler usage:
 33900                                  ;	    MOV AH, FileTimes (57H)
 33901                                  ;	    MOV AL, func
 33902                                  ;	    MOV BX, handle
 33903                                  ;	; if AL = 1 then then next two are mandatory
 33904                                  ;	    MOV CX, time
 33905                                  ;	    MOV DX, date
 33906                                  ;	    INT 21h
 33907                                  ;	; if AL = 0 then CX/DX has the last write time/date
 33908                                  ;	; for the handle.
 33909                                  ;
 33910                                  ;	AL=02		 get extended attributes
 33911                                  ;	   BX=handle
 33912                                  ;	   CX=size of buffer (0, return max size )
 33913                                  ;	   DS:SI query list (si=-1, selects all EA)
 33914                                  ;	   ES:DI buffer to hold EA list
 33915                                  ;
 33916                                  ;	AL=03		 get EA name list
 33917                                  ;	   BX=handle
 33918                                  ;	   CX=size of buffer (0, return max size )
 33919                                  ;	   ES:DI buffer to hold name list
 33920                                  ;
 33921                                  ;	AL=04		 set extended attributes
 33922                                  ;	   BX=handle
 33923                                  ;	   ES:DI buffer of EA list
 33924                                  ;
 33925                                  ;
 33926                                  ;   Error returns:
 33927                                  ;	    AX = error_invalid_function
 33928                                  ;	       = error_invalid_handle
 33929                                  ;
 33930                                  ;----------------------------------------------------------------------------
 33931                                  
 33932                                  _$FILE_TIMES:
 33933                                  	; 13/07/2018 - Retro DOS v3.0
 33934                                  
 33935                                  	; MSDOS 3.3
 33936 00006FA0 3C02                    	cmp	al,2			; correct subfunction ?
 33937 00006FA2 720B                    	jb	short ft1
 33938                                  
 33939                                          ;mov	byte [ss:EXTERR_LOCUS], 1
 33940 00006FA4 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33941                                  						;SS Overr
 33942                                  	;mov	al,1
 33943 00006FAA B001                    	mov	al,error_invalid_function ; give bad return
 33944 00006FAC E957A7                  	jmp     SYS_RET_ERR
 33945                                  
 33946                                  	; MSDOS 6.0
 33947                                  	;cmp	al,2			; correct subfunction ?
 33948                                  	;jae	short inval_func
 33949                                  ft1:
 33950 00006FAF E86E00                  	call	CheckOwner		; get sft
 33951 00006FB2 7285                    	jc	short LSeekError	; bad handle
 33952                                  
 33953 00006FB4 08C0                    	or	al,al			; get time/date ?
 33954 00006FB6 7515                    	jnz	short ft_set_time
 33955                                  
 33956                                  ;------ here we get the time & date from the sft for the user
 33957                                  
 33958 00006FB8 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 33959                                  	;mov	cx,[es:di+13]
 33960 00006FB9 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 33961                                  	;mov	dx,[es:di+15]
 33962 00006FBD 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 33963 00006FC1 FB                      	sti
 33964 00006FC2 E846A6                  	call	Get_User_Stack
 33965                                  	;mov	[si+4],cx
 33966 00006FC5 894C04                  	mov	[si+user_env.user_CX],cx
 33967                                  	;mov	[si+6],dx
 33968 00006FC8 895406                  	mov	[si+user_env.user_DX],dx
 33969 00006FCB EB20                    	jmp	short ok_ret
 33970                                  
 33971                                  ;------ here we set the time in sft
 33972                                  
 33973                                  ft_set_time:
 33974 00006FCD E895B0                  	call    EcritSFT
 33975                                  	;mov	[es:di+13],cx
 33976 00006FD0 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 33977                                  	;mov	[es:di+15],dx
 33978 00006FD4 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 33979                                  
 33980 00006FD8 31C0                    	xor	ax, ax
 33981 00006FDA 36FF1E[9400]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 33982                                  
 33983                                  ;------ set the flags in SFT entry
 33984                                  	;and	word [es:di+5],0FFBFh
 33985 00006FDF 26836505BF              	and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 33986                                  							; mark file as dirty
 33987                                  	;or	word [es:di+5],4000h
 33988 00006FE4 26814D050040            	or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 33989                                  							; ask close not to
 33990                                  							;   bother about date
 33991                                  							;   and time
 33992 00006FEA E880B0                  	call	LcritSFT
 33993                                  ok_ret:
 33994 00006FED E90DA7                  	jmp	SYS_RET_OK
 33995                                  
 33996                                  ;inval_func:
 33997                                  ;	mov	byte [ss:EXTERR_LOCUS], 1
 33998                                  ;	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33999                                  ;						;SS Overr
 34000                                  ;	;mov	al,1
 34001                                  ;	mov	al,error_invalid_function ; give bad return
 34002                                  ;	jmp     SYS_RET_ERR
 34003                                  
 34004                                  ;BREAK <$DUP - duplicate a jfn>
 34005                                  ;----------------------------------------------------------------------------
 34006                                  ;
 34007                                  ;   Assembler usage:
 34008                                  ;	    MOV     BX, fh
 34009                                  ;	    MOV     AH, Dup
 34010                                  ;	    INT     int_command
 34011                                  ;	  AX has the returned handle
 34012                                  ;   Errors:
 34013                                  ;	    AX = dup_invalid_handle
 34014                                  ;	       = dup_too_many_open_files
 34015                                  ;
 34016                                  ;----------------------------------------------------------------------------
 34017                                  
 34018                                  _$DUP:
 34019 00006FF0 89D8                    	MOV	AX,BX			; save away old handle in AX
 34020 00006FF2 E844F8                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 34021                                  DupErrorCheck:
 34022 00006FF5 7218                    	JC	short DupErr		; nope, bye
 34023 00006FF7 06                      	push	es
 34024 00006FF8 57                      	push	di			; save away SFT
 34025 00006FF9 5E                      	pop	si			; into convenient place DS:SI
 34026 00006FFA 1F                      	pop	ds
 34027 00006FFB 93                      	XCHG	AX,BX			; get back old handle
 34028 00006FFC E82100                  	call	CheckOwner		; get sft in ES:DI
 34029 00006FFF 720E                    	JC	short DupErr		; errors go home
 34030 00007001 E8D2C6                  	call	DOS_Dup_Direct
 34031 00007004 E8DEF7                  	call	pJFNFromHandle		; get pointer
 34032 00007007 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 34033 0000700A 881C                    	MOV	[SI],BL			; stuff in new SFT
 34034 0000700C E9EEA6                  	jmp	SYS_RET_OK		; and go home
 34035                                  DupErr:
 34036 0000700F E9F4A6                  	jmp	SYS_RET_ERR
 34037                                  
 34038                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 34039                                  ;----------------------------------------------------------------------------
 34040                                  ;
 34041                                  ;   Assembler usage:
 34042                                  ;	    MOV     BX, fh
 34043                                  ;	    MOV     CX, newfh
 34044                                  ;	    MOV     AH, Dup2
 34045                                  ;	    INT     int_command
 34046                                  ;   Error returns:
 34047                                  ;	    AX = error_invalid_handle
 34048                                  ;
 34049                                  ;----------------------------------------------------------------------------
 34050                                  
 34051                                  _$DUP2:
 34052 00007012 53                      	push	bx
 34053 00007013 51                      	push	cx			; save source
 34054 00007014 89CB                    	MOV	BX,CX			; get one to close
 34055 00007016 E8ABFD                  	call	_$CLOSE			; close destination handle
 34056 00007019 5B                      	pop	bx
 34057 0000701A 58                      	pop	ax			; old in AX, new in BX
 34058 0000701B E8C7F7                  	call	pJFNFromHandle		; get pointer
 34059 0000701E EBD5                    	JMP	short DupErrorCheck	; check error and do dup
 34060                                  
 34061                                  ;Break	<CheckOwner - verify ownership of handles from server>
 34062                                  ;----------------------------------------------------------------------------
 34063                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 34064                                  ;   process without the process knowing it (delete/rename of open files, for
 34065                                  ;   example), it is possible for the redirector to issue a call to a handle
 34066                                  ;   that it soes not rightfully own.  We check here to make sure that the
 34067                                  ;   issuing process is the owner of the SFT.  At the same time, we do a
 34068                                  ;   SFFromHandle to really make sure that the SFT is good.
 34069                                  ;
 34070                                  ;	ENTRY	BX has the handle
 34071                                  ;		User_ID is the current user
 34072                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 34073                                  ;		Carry Set => AX has error code
 34074                                  ;	USES	none
 34075                                  ;----------------------------------------------------------------------------
 34076                                  
 34077                                  CheckOwner:
 34078                                  	; 13/07/2018 - Retro DOS v3.0
 34079                                  
 34080 00007020 E8DAF7                  	call	SFFromHandle
 34081 00007023 720F                    	jc	short co_ret_label	; retc
 34082                                  
 34083 00007025 50                      	push	ax
 34084                                  
 34085                                  	; MSDOS 6.0
 34086                                  ;SR;
 34087                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 34088                                  ;SR; are shared across multiple VMs in win386.
 34089                                  ;SR;
 34090                                  	;test	byte [IsWin386],1
 34091                                  	;jz	short no_win386		;win386 is not present
 34092                                  	;xor	ax,ax			;set the zero flag
 34093                                  	;jmp	short skip_win386	
 34094                                  
 34095                                  ;no_win386:
 34096 00007026 36A1[EA02]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 34097                                  	;cmp	ax,[es:di+47]
 34098 0000702A 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 34099                                  
 34100                                  ;skip_win386:
 34101 0000702E 58                      	pop	ax
 34102                                  	
 34103 0000702F 7403                    	jz	short co_ret_label
 34104                                  	
 34105                                  	;mov	al,6
 34106 00007031 B006                    	mov	al,error_invalid_handle
 34107 00007033 F9                      	stc
 34108                                  
 34109                                  co_ret_label:
 34110 00007034 C3                      	retn
 34111                                  
 34112                                  ;============================================================================
 34113                                  ; FILE.ASM, MSDOS 6.0, 1991
 34114                                  ;============================================================================
 34115                                  ; 14/07/2018 - Retro DOS v3.0
 34116                                  
 34117                                  ; MSDOS 2.11
 34118                                  ;BREAK <$Open - open a file handle>
 34119                                  ;----------------------------------------------------------------------------
 34120                                  ;   Assembler usage:
 34121                                  ;           LDS     DX, Name
 34122                                  ;           MOV     AH, Open
 34123                                  ;           MOV     AL, access
 34124                                  ;           INT     int_command
 34125                                  ;
 34126                                  ;       ACCESS          Function
 34127                                  ;       ------          --------
 34128                                  ;       open_for_read   file is opened for reading
 34129                                  ;       open_for_write  file is opened for writing
 34130                                  ;       open_for_both   file is opened for both reading and writing.
 34131                                  ;
 34132                                  ;   Error returns:
 34133                                  ;           AX = error_invalid_access
 34134                                  ;              = error_file_not_found
 34135                                  ;              = error_access_denied
 34136                                  ;              = error_too_many_open_files
 34137                                  ;----------------------------------------------------------------------------
 34138                                  
 34139                                  ; MSDOS 6.0
 34140                                  ;	BREAK <$Open - open a file from a path string>
 34141                                  ;----------------------------------------------------------------------------
 34142                                  ;
 34143                                  ;**	$OPen - Open a File
 34144                                  ;
 34145                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 34146                                  ;	file and and returns a handle
 34147                                  ;
 34148                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 34149                                  ;		(AL) = open mode
 34150                                  ;	EXIT	'C' clear if OK
 34151                                  ;		  (ax) = file handle
 34152                                  ;		'C' set if error
 34153                                  ;		  (ax) = error code
 34154                                  ;	USES	all
 34155                                  ;
 34156                                  ;----------------------------------------------------------------------------
 34157                                  
 34158                                  _$OPEN:       
 34159 00007035 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 34160                                  _$Open2:
 34161                                  	;mov	ch,16h
 34162 00007037 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 34163 00007039 E84502                  	call	SetAttrib
 34164 0000703C B9[7837]                	mov	cx,DOS_OPEN
 34165                                  
 34166                                  	;xor	ah,ah  ; MSDOS 3.3
 34167                                  
 34168 0000703F 50                      	push	ax
 34169                                  
 34170                                  ;*	General file open/create code. The $CREATE call and the various
 34171                                  ;	$OPEN calls all come here.
 34172                                  ;
 34173                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 34174                                  ;	path names, etc., and then dispatch to our individual handlers.
 34175                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 34176                                  ;
 34177                                  ;	(TOS) = create mode
 34178                                  ;	(CX) = address of routine to call to do actual function
 34179                                  ;	(DS:DX) = ASCIZ name
 34180                                  ;	SAttrib = Attribute mask
 34181                                  
 34182                                  ;	Get a free SFT and mark it "being allocated"
 34183                                  
 34184                                  AccessFile:
 34185 00007040 E822B0                  	call	EcritSFT
 34186 00007043 E806F8                  	call	SFNFree			; get a free sfn
 34187 00007046 E824B0                  	call	LcritSFT
 34188 00007049 7214                    	jc	short OpenFailJ		; oops, no free sft's
 34189 0000704B 36891E[4205]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 34190 00007050 36893E[3605]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 34191 00007055 368C06[3805]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 34192                                  
 34193                                  ;	Find a free area in the user's JFN table.
 34194                                  
 34195 0000705A E8DCF7                  	call	JFNFree			; get a free jfn
 34196 0000705D 7303                    	jnc	short SaveJFN
 34197                                  OpenFailJ:
 34198 0000705F E98100                  	JMP	OpenFail		; there were free JFNs... try SFN
 34199                                  
 34200                                  SaveJFN:
 34201 00007062 36893E[4605]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 34202 00007067 368C06[4805]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 34203 0000706C 36891E[4405]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 34204                                  
 34205                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 34206                                  ;	reusing the same JFN.
 34207                                  
 34208 00007071 368B1E[4205]            	MOV	BX,[ss:SFN]					;smr;SS Override
 34209 00007076 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 34210 00007079 89D6                    	MOV	SI,DX			; get name in appropriate place
 34211 0000707B BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34212 0000707E 51                      	push	cx			; save routine to call
 34213 0000707F E8CBF9                  	call	TransPath		; convert the path
 34214 00007082 5B                      	pop	bx			; (bx) = routine to call
 34215                                  
 34216 00007083 36C536[3605]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 34217 00007088 720A                    	JC	short OpenCleanJ	; no error, go and open file
 34218 0000708A 36803E[1505]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 34219 00007090 7404                    	JZ	short SetSearch
 34220                                  	;mov	al,2
 34221 00007092 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 34222                                  OpenCleanJ:
 34223 00007094 EB3E                    	JMP	short OpenClean
 34224                                  
 34225                                  SetSearch:
 34226 00007096 58                      	pop	ax			; Mode (Open), Attributes (Create)
 34227                                  
 34228                                  ;	We need to get the new inheritance bits.
 34229                                  
 34230 00007097 31C9                    	xor	cx,cx
 34231                                  	; MSDOS 6.0
 34232                                  	;mov	[si+2],cx ; 0
 34233 00007099 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 34234                                  	;mov    [si+51],cx ; 0
 34235 0000709C 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 34236                                  	;
 34237 0000709F 81FB[7837]              	CMP	BX,DOS_OPEN
 34238 000070A3 7509                    	JNZ	short _DoOper
 34239                                  	;test   al,80h
 34240 000070A5 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 34241 000070A7 7405                    	JZ	short _DoOper ; 10/08/2018
 34242 000070A9 247F                    	AND	AL,7Fh			; mask off inherit bit
 34243                                  	;mov	cx,1000h
 34244 000070AB B90010                  	MOV	CX,sf_no_inherit
 34245                                  _DoOper:
 34246                                  	;; MSDOS 3.3
 34247                                  	;;mov	word [si+2], 0
 34248                                  	;;mov	word [si+33h], 0
 34249                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 34250                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 34251                                  
 34252                                  	; MSDOS 6.0
 34253                                  ;**	Check if this is an extended open. If so you must set the
 34254                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 34255                                  ;	Set_EXT_mode in creat.asm
 34256                                  
 34257                                  	; MSDOS 6.0
 34258                                  	;;SAVE	<di, es>                ;M022 conditional removed here
 34259                                  	;push	di
 34260                                  	;push	es
 34261                                  	;push	ds
 34262                                  	;pop	es
 34263                                  	;push	si
 34264                                  	;pop	di			; (es:di) = SFT address
 34265                                  	;call	Set_EXT_mode
 34266                                  	;;RESTORE <es, di>
 34267                                  	;pop	es
 34268                                  	;pop	di
 34269                                  
 34270                                  	;Context DS
 34271 000070AE 16                      	push	ss
 34272 000070AF 1F                      	pop	ds	
 34273                                  
 34274 000070B0 51                      	push	cx
 34275 000070B1 FFD3                    	CALL	BX			; blam!
 34276 000070B3 59                      	pop	cx
 34277 000070B4 C536[3605]              	LDS	SI,[THISSFT]
 34278                                  	;JC	short OpenE2		;AN000;FT. chek extended open hooks first
 34279 000070B8 721B                    	jc	short OpenE ; MSDOS 3.3
 34280                                  
 34281                                  ;	The SFT was successfully opened. Remove busy mark.
 34282                                  
 34283                                  OpenOK:
 34284                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 34285 000070BA C7040100                	mov	word [SI],1
 34286                                  	;or	[SI+5],cx
 34287 000070BE 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 34288                                  
 34289                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 34290                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 34291                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 34292                                  ;
 34293                                  ; Since this is only relevant on sharer systems, we stick this code into the
 34294                                  ; sharer.
 34295                                  
 34296 000070C1 36A1[4405]              	MOV	AX,[ss:JFN]				;smr;SS Override
 34297 000070C5 36FF1E[8C00]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 34298                                  
 34299 000070CA 36C706[4205]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 34300 000070D1 E929A6                  	jmp	SYS_RET_OK		; bye with no errors
 34301                                  
 34302                                  	; MSDOS 6.0
 34303                                  ;Extended Open hooks check
 34304                                  ;OpenE2:					;AN000;;EO.
 34305                                  ;	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 34306                                  ;	JNZ	short OpenE		;AN000;;EO. no.
 34307                                  ;	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 34308                                  
 34309                                  ;	Extended Open hooks check
 34310                                  ;
 34311                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 34312                                  
 34313                                  OpenClean:
 34314 000070D4 5B                      	pop	bx			; clean off stack
 34315                                  OpenE:
 34316                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 34317 000070D5 C7040000                	mov	word [SI],0
 34318 000070D9 36C536[4605]            	LDS	SI,[ss:PJFN]				;smr;SS Override
 34319 000070DE C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 34320 000070E1 EB02                    	JMP	SHORT OpenCritLeave
 34321                                  
 34322                                  OpenFail:
 34323 000070E3 FB                      	STI
 34324 000070E4 59                      	pop	cx			; Clean stack
 34325                                  OpenCritLeave:
 34326 000070E5 36C706[4205]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 34327                                  
 34328                                  	; MSDOS 6.0
 34329                                  ;; File Tagging DOS 4.00
 34330                                  ;	CMP	[SS:EXTERR],error_Code_Page_Mismatched 
 34331                                  ;				;AN000;;FT. code page mismatch;smr;SS Override
 34332                                  ;	JNZ	short NORERR	  	;AN000;;FT. no
 34333                                  ;	jmp	From_GetSet		;AN000;;FT. yes
 34334                                  ;NORERR: 				;AN000;
 34335                                  ;; File Tagging DOS 4.00
 34336                                  
 34337 000070EC E917A6                  	jmp	SYS_RET_ERR		; no free, return error
 34338                                  
 34339                                  ; MSDOS 2.11
 34340                                  ;BREAK <$CREAT - creat a new file and open him for input>
 34341                                  ;----------------------------------------------------------------------------
 34342                                  ;   Assembler usage:
 34343                                  ;           LDS     DX, name
 34344                                  ;           MOV     AH, Creat
 34345                                  ;           MOV     CX, access
 34346                                  ;           INT     21h
 34347                                  ;       ; AX now has the handle
 34348                                  ;
 34349                                  ;   Error returns:
 34350                                  ;           AX = error_access_denied
 34351                                  ;              = error_path_not_found
 34352                                  ;              = error_too_many_open_files
 34353                                  ;----------------------------------------------------------------------------
 34354                                  
 34355                                  ; MSDOS 6.0
 34356                                  ;	BREAK <$Creat - create a brand-new file>
 34357                                  ;----------------------------------------------------------------------------
 34358                                  ;
 34359                                  ;**	$Creat - Create a File
 34360                                  ;
 34361                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 34362                                  ;	initial attributes contained in CX
 34363                                  ;
 34364                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 34365                                  ;		(CX) = initial attributes
 34366                                  ;	EXIT	'C' set if error
 34367                                  ;		  (ax) = error code
 34368                                  ;		'C' clear if OK
 34369                                  ;		  (ax) = file handle
 34370                                  ;	USES	all
 34371                                  ;
 34372                                  ;----------------------------------------------------------------------------
 34373                                  
 34374                                  _$CREAT:
 34375 000070EF 51                      	push	cx			; Save attributes on stack
 34376 000070F0 B9[E236]                	mov	CX,DOS_CREATE		; routine to call
 34377                                  AccessSet:
 34378                                  	;mov	byte [ss:SATTRIB],6
 34379 000070F3 36C606[0805]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 34380                                  	; 10/08/2018
 34381 000070F9 E944FF                  	JMP	AccessFile		; use good ol' open
 34382                                  
 34383                                  
 34384                                  ; MSDOS 6.0 (MSDOS 3.3)
 34385                                  ;	BREAK <$CHMOD - change file attributes>
 34386                                  ;----------------------------------------------------------------------------
 34387                                  ;
 34388                                  ;**	$CHMOD - Change File Attributes
 34389                                  ;
 34390                                  ;   Assembler usage:
 34391                                  ;	    LDS     DX, name
 34392                                  ;	    MOV     CX, attributes
 34393                                  ;	    MOV     AL,func (0=get, 1=set)
 34394                                  ;	    INT     21h
 34395                                  ;   Error returns:
 34396                                  ;	    AX = error_path_not_found
 34397                                  ;	    AX = error_access_denied
 34398                                  ;
 34399                                  ;----------------------------------------------------------------------------
 34400                                  
 34401                                  _$CHMOD:
 34402                                  	; 05/08/2018 - Retro DOS v3.0
 34403                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 34404 000070FC BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34405 000070FF 50                      	push	ax
 34406 00007100 51                      	push	cx			; save function and attributes
 34407 00007101 89D6                    	MOV	SI,DX			; get things in appropriate places
 34408 00007103 E84BF9                  	call	TransPathSet		; get correct path
 34409 00007106 59                      	pop	cx
 34410 00007107 58                      	pop	ax			; and get function and attrs back
 34411 00007108 7235                    	JC	short ChModErr		; errors get mapped to path not found
 34412 0000710A 16                      	push	ss			; set up for later possible calls
 34413 0000710B 1F                      	pop	ds
 34414 0000710C 803E[1505]FF            	CMP	byte [CMETA],-1
 34415 00007111 752C                    	JNZ	short ChModErr
 34416                                  	;mov	byte [SATTRIB],16h
 34417 00007113 C606[0805]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 34418 00007118 2C01                    	SUB	AL,1			; fast way to discriminate
 34419 0000711A 720B                    	JB	short ChModGet		; 0 -> go get value
 34420 0000711C 7417                    	JZ	short ChModSet		; 1 -> go set value
 34421                                  	;mov	byte [EXTERR_LOCUS],1
 34422 0000711E C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34423                                  	;mov	al,1
 34424 00007123 B001                    	mov	al,error_invalid_function ; bad value
 34425                                  	;jmp	SYS_RET_ERR
 34426 00007125 EB1A                    	jmp	short ChModE	
 34427                                  ChModGet:
 34428 00007127 E8BFC4                  	call	GET_FILE_INFO		; suck out the ol' info
 34429 0000712A 7215                    	JC	short ChModE		; error codes are already set for ret
 34430 0000712C E8DCA4                  	call	Get_User_Stack		; point to user saved vaiables
 34431                                  	;mov	[SI+4],ax
 34432 0000712F 894404                  	MOV	[SI+user_env.user_CX],AX  ; return the attributes
 34433                                  	;jmp	SYS_RET_OK		; say sayonara
 34434                                  	; 26/07/2019
 34435 00007132 E9CBA5                  	jmp	SYS_RET_OK_clc
 34436                                  ChModSet:
 34437 00007135 89C8                    	MOV	AX,CX			; get attrs in position
 34438 00007137 E810C5                  	call	SET_FILE_ATTRIBUTE	; go set
 34439 0000713A 7205                    	JC	short ChModE		; errors are set
 34440 0000713C E9BEA5                  	jmp	SYS_RET_OK
 34441                                  ChModErr:
 34442                                  	;mov	al, 3
 34443 0000713F B003                    	mov	al,error_path_not_found
 34444                                  ChModE:
 34445 00007141 E9C2A5                  	jmp	SYS_RET_ERR
 34446                                  
 34447                                  ;	BREAK <$UNLINK - delete a file entry>
 34448                                  ;----------------------------------------------------------------------------
 34449                                  ;
 34450                                  ;**	$UNLINK - Delete a File
 34451                                  ;
 34452                                  ;
 34453                                  ;	Assembler usage:
 34454                                  ;	    LDS     DX, name
 34455                                  ;	    IF VIA SERVER DOS CALL
 34456                                  ;	     MOV     CX,SEARCH_ATTRIB
 34457                                  ;	    MOV     AH, Unlink
 34458                                  ;	    INT     21h
 34459                                  ;
 34460                                  ;	ENTRY	(ds:dx) = path name
 34461                                  ;		(cx) = search_attribute, if via server_dos
 34462                                  ;	EXIT	'C' clear if no error
 34463                                  ;		'C' set if error
 34464                                  ;		  (ax) = error code
 34465                                  ;			= error_file_not_found
 34466                                  ;			= error_access_denied
 34467                                  ;
 34468                                  ;----------------------------------------------------------------------------
 34469                                  
 34470                                  _$UNLINK:
 34471 00007144 51                      	push	cx			; Save possible CX input parm
 34472 00007145 89D6                    	MOV	SI,DX			; Point at input string
 34473 00007147 BF[6003]                	MOV	DI,OPENBUF		; temp spot for path
 34474 0000714A E804F9                  	call	TransPathSet		; go get normalized path
 34475 0000714D 59                      	pop	cx
 34476 0000714E 72EF                    	JC	short ChModErr		; badly formed path
 34477 00007150 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 34478 00007156 750F                    	JNZ	short NotFound
 34479 00007158 16                      	push	ss
 34480 00007159 1F                      	pop	ds
 34481                                  	;mov	ch,6
 34482 0000715A B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 34483 0000715C E82201                  	call	SetAttrib
 34484 0000715F E804C1                  	call	DOS_DELETE		; remove that file
 34485 00007162 7205                    	JC	short UnlinkE 		; error is there
 34486 00007164 E996A5                  	jmp	SYS_RET_OK		; okey doksy
 34487                                  NotFound:
 34488                                  	;mov	al, 3
 34489 00007167 B003                    	MOV	AL,error_path_not_found
 34490                                  UnlinkE:
 34491 00007169 E99AA5                  	jmp	SYS_RET_ERR		; bye
 34492                                  
 34493                                  ;BREAK <$RENAME - move directory entries around>
 34494                                  ;----------------------------------------------------------------------------
 34495                                  ;
 34496                                  ;   Assembler usage:
 34497                                  ;	    LDS     DX, source
 34498                                  ;	    LES     DI, dest
 34499                                  ;	    IF VIA SERVER DOS CALL
 34500                                  ;	     MOV     CX,SEARCH_ATTRIB
 34501                                  ;	    MOV     AH, Rename
 34502                                  ;	    INT     21h
 34503                                  ;
 34504                                  ;   Error returns:
 34505                                  ;	    AX = error_file_not_found
 34506                                  ;	       = error_not_same_device
 34507                                  ;	       = error_access_denied
 34508                                  ;
 34509                                  ;----------------------------------------------------------------------------
 34510                                  
 34511                                  _$RENAME:
 34512                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34513 0000716C 51                      	push	cx
 34514 0000716D 1E                      	push	ds
 34515 0000716E 52                      	push	dx			; save source and possible CX arg
 34516 0000716F 06                      	PUSH	ES
 34517 00007170 1F                      	POP	DS			; move dest to source
 34518 00007171 89FE                    	MOV	SI,DI			; save for offsets
 34519 00007173 BF[E003]                	MOV	DI,RENBUF
 34520 00007176 E8D8F8                  	call	TransPathSet		; munge the paths
 34521 00007179 36FF36[4A05]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 34522 0000717E 368F06[4C05]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 34523 00007183 5E                      	pop	si
 34524 00007184 1F                      	pop	ds
 34525 00007185 59                      	pop	cx			; get back source and possible CX arg
 34526                                  epjc2:	
 34527 00007186 72B7                    	JC	short ChModErr		; get old error
 34528 00007188 36803E[1505]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 34529 0000718E 75D7                    	JNZ	short NotFound
 34530 00007190 51                      	push	cx			; Save possible CX arg
 34531 00007191 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34532 00007194 E8BAF8                  	call	TransPathSet		; wham
 34533 00007197 59                      	pop	cx
 34534 00007198 72EC                    	JC	short epjc2
 34535 0000719A 16                      	push	ss
 34536 0000719B 1F                      	pop	ds
 34537 0000719C 803E[1505]FF            	CMP	byte [CMETA],-1
 34538 000071A1 72C4                    	JB	short NotFound
 34539                                  
 34540                                  	; MSDOS 6.0
 34541 000071A3 FF36[3A05]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 34542 000071A7 FF36[3C05]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 34543 000071AB BF[6003]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 34544 000071AE 16                      	PUSH	SS			   ;AN000;;MS.
 34545 000071AF 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 34546 000071B0 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 34547                                  rnloop: 				   ;AN000;
 34548 000071B2 E810F8                  	call	GetCDSFromDrv		   ;AN000;;MS.
 34549 000071B5 7211                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 34550 000071B7 E873AD                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 34551 000071BA 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 34552 000071BC FEC0                    	INC	AL			   ;AN000;;MS.	next
 34553 000071BE EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 34554                                  rnerr:					   ;AN000;
 34555 000071C0 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 34556                                  	;error	error_current_directory    ;AN000;;MS.
 34557 000071C3 B010                    	mov	al,error_current_directory 
 34558 000071C5 E93EA5                  	jmp	SYS_RET_ERR
 34559                                  dorn:					   ;AN000;
 34560 000071C8 368F06[3C05]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34561 000071CD 368F06[3A05]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34562                                  
 34563 000071D2 16                      	push	ss
 34564 000071D3 1F                      	pop	ds
 34565                                  
 34566                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34567                                  	;mov	ch,16h
 34568 000071D4 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 34569                                  					; rename appropriate files
 34570 000071D6 E8A800                  	call	SetAttrib
 34571 000071D9 E835C2                  	call	DOS_RENAME		; do the deed
 34572 000071DC 728B                    	JC	short UnlinkE 		; errors
 34573                                  
 34574 000071DE E91CA5                  	jmp	SYS_RET_OK
 34575                                  
 34576                                  
 34577                                  ; 14/07/2018 - Retro DOS v3.0
 34578                                  ; MSDOS 3.3 (& MSDOS 6.0)
 34579                                  
 34580                                  ;Break <$CreateNewFile - Create a new directory entry>
 34581                                  ;----------------------------------------------------------------------------
 34582                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 34583                                  ;	was no previous directory entry, and fail if a directory entry with
 34584                                  ;	the same name existed previously.
 34585                                  ;
 34586                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 34587                                  ;		CX contains default file attributes
 34588                                  ;   Outputs:	Carry Clear:
 34589                                  ;		    AX has file handle opened for read/write
 34590                                  ;		Carry Set:
 34591                                  ;		    AX has error code
 34592                                  ;   Registers modified: All
 34593                                  ;----------------------------------------------------------------------------
 34594                                  
 34595                                  _$CreateNewFile:
 34596 000071E1 51                      	push	cx			; Save attributes on stack
 34597 000071E2 B9[7337]                	MOV	CX,DOS_Create_New	; routine to call
 34598 000071E5 E90BFF                  	JMP	AccessSet		; use good ol' open
 34599                                  
 34600                                  ;**	BinToAscii - convert a number to a string.
 34601                                  ;----------------------------------------------------------------------------
 34602                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 34603                                  ;	This routine is used to generate temp file names so we don't spend
 34604                                  ;	the time and code needed for a true hex number, we just use
 34605                                  ;	A thorugh O.
 34606                                  ;
 34607                                  ;	ENTRY	(ax) = value
 34608                                  ;		(es:di) = destination
 34609                                  ;	EXIT	(es:di) updated by 4
 34610                                  ;	USES	cx, di, flags
 34611                                  ;----------------------------------------------------------------------------
 34612                                  
 34613                                  ; MSDOS 3.3
 34614                                  ;BinToAscii:
 34615                                  ;	mov     cx,4
 34616                                  ;bta5:
 34617                                  ;	push    cx
 34618                                  ;	mov     cl,4
 34619                                  ;	rol     ax,cl
 34620                                  ;	push    ax
 34621                                  ;	and     al,0Fh
 34622                                  ;	add     al,'0'
 34623                                  ;	cmp     al,'9'
 34624                                  ;	jbe     short bta6
 34625                                  ;	add     al,7
 34626                                  ;bta6: 
 34627                                  ;	stosb
 34628                                  ;	pop     ax
 34629                                  ;	pop     cx
 34630                                  ;	loop    bta5
 34631                                  ;	retn
 34632                                  
 34633                                  ; MSDOS 6.0
 34634                                  BinToAscii:
 34635 000071E8 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 34636                                  bta5:	
 34637 000071EB D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 34638 000071ED 50                      	push	ax			; preserve remainder of digits
 34639 000071EE 240F                    	AND	AL,0Fh			; grab low nibble
 34640 000071F0 0441                    	ADD	AL,'A'			; turn into ascii
 34641 000071F2 AA                      	STOSB				; drop in the character
 34642 000071F3 58                      	pop	ax			; (ax) = shifted number
 34643 000071F4 FECD                    	dec	ch
 34644 000071F6 75F3                    	jnz	short bta5		; process 4 digits
 34645 000071F8 C3                      	retn
 34646                                  
 34647                                  ;Break	<$CreateTempFile - create a unique name>
 34648                                  ;----------------------------------------------------------------------------
 34649                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 34650                                  ;	Method used is to get the current time, convert to a name and attempt
 34651                                  ;	a create new.  Repeat until create new succeeds.
 34652                                  ;
 34653                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 34654                                  ;		CX  contains default attributes
 34655                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 34656                                  ;		AX has handle
 34657                                  ;   Registers modified: all
 34658                                  ;----------------------------------------------------------------------------
 34659                                  
 34660                                  _$CreateTempFile:
 34661                                  	;Enter
 34662 000071F9 55                      	push	bp
 34663 000071FA 89E5                    	mov	bp,sp
 34664                                  
 34665                                  	;LocalVar    EndPtr,DWORD
 34666                                  	;LocalVar    FilPtr,DWORD
 34667                                  	;LocalVar    Attr,WORD
 34668                                  
 34669 000071FC 83EC0A                  	sub	sp,10
 34670                                  
 34671                                  	;test	cx,0FFD8h
 34672 000071FF F7C1D8FF                	test	CX,~attr_changeable
 34673 00007203 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 34674                                  ;
 34675                                  ; We need this "hook" here to detect these cases (like user sets one both of
 34676                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 34677                                  ; below.  The code loops on error_access_denied, but if one of the non
 34678                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 34679                                  ; infinite because CreateNewFile will fail with access_denied always.  Thus we
 34680                                  ; need to detect these cases before getting to the loop.
 34681                                  ;
 34682                                  	;mov	ax, 5
 34683 00007205 B80500                  	MOV	AX,error_access_denied
 34684 00007208 EB6B                    	JMP	SHORT SETTMPERR
 34685                                  
 34686                                  OKatts:
 34687                                  	;MOV	attr,CX 		; save attribute
 34688 0000720A 894EF6                  	mov     [bp-10],cx
 34689                                  	;MOV	FilPtrL,DX		; pointer to file
 34690 0000720D 8956F8                  	mov	[bp-8],dx
 34691                                  	;MOV	FilPtrH,DS
 34692 00007210 8C5EFA                  	mov	[bp-6],ds
 34693                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 34694 00007213 8C5EFE                  	mov	[bp-2],ds
 34695 00007216 1E                      	PUSH	DS
 34696 00007217 07                      	POP	ES			; destination for nul search
 34697 00007218 89D7                    	MOV	DI,DX
 34698 0000721A 89F9                    	MOV	CX,DI
 34699 0000721C F7D9                    	NEG	CX			; number of bytes remaining in segment
 34700                                  	; MSDOS 6.0
 34701 0000721E 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 34702 00007220 7501                    	JNZ	short okok		;AN000;MS. no
 34703                                  	;MOV	CX,-1			;AN000;MS.
 34704 00007222 49                      	dec	cx  ; mov cx,-1
 34705                                  	;
 34706                                  okok:					;AN000;
 34707 00007223 31C0                    	XOR	AX,AX			;AN000;
 34708 00007225 F2AE                    	REPNZ	SCASB			;AN000;
 34709                                  					;AN000;
 34710 00007227 4F                      	DEC	DI			; point back to the null
 34711 00007228 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 34712 0000722C E81AE4                  	call	PATHCHRCMP		; Is it a path separator?
 34713 0000722F 7403                    	JZ	short SETENDPTR		; Yes
 34714                                  STOREPTH:
 34715 00007231 B05C                    	MOV	AL,'\'
 34716 00007233 AA                      	STOSB				; Add a path separator (and INC DI)
 34717                                  SETENDPTR:
 34718                                  	;MOV	EndPtrL,DI		; pointer to the tail
 34719 00007234 8856FC                  	mov	[bp-4],dl
 34720                                  CreateLoop:
 34721 00007237 16                      	push	ss			; let ReadTime see variables
 34722 00007238 1F                      	pop	ds
 34723 00007239 55                      	push	bp
 34724 0000723A E8A0A6                  	call	READTIME		; go get time
 34725 0000723D 5D                      	pop	bp
 34726                                  ;
 34727                                  ; Time is in CX:DX.  Go drop it into the string.
 34728                                  ;
 34729                                  	;les	di,EndPtr		; point to the string
 34730 0000723E C47EFC                  	les	di,[BP-4]
 34731 00007241 89C8                    	mov	ax,cx
 34732 00007243 E8A2FF                  	call	BinToAscii		; store upper word
 34733 00007246 89D0                    	mov	ax,dx
 34734 00007248 E89DFF                  	call	BinToAscii		; store lower word
 34735 0000724B 30C0                    	xor	al,al
 34736 0000724D AA                      	STOSB				; nul terminate
 34737                                  	;LDS	DX,FilPtr		; get name
 34738 0000724E C556F8                  	lds	dx,[bp-8]
 34739                                  	;MOV	CX,Attr 		; get attr
 34740 00007251 8B4EF6                  	mov	cx,[bp-10]
 34741 00007254 55                      	push	bp
 34742 00007255 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 34743 00007258 5D                      	pop	bp
 34744 00007259 731B                    	JNC	short CreateDone	; failed, go try again
 34745                                  ;
 34746                                  ; The operation failed and the error has been mapped in AX.  Grab the extended
 34747                                  ; error and figure out what to do.
 34748                                  ;
 34749                                  	;; MSDOS 3.3			; M049 - start
 34750                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 34751                                  ;;	cmp	al,error_file_exists
 34752                                  ;;	jz	short CreateLoop	; file existed => try with new name
 34753                                  ;;	cmp	al,error_access_denied
 34754                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 34755                                  
 34756                                  	; MSDOS 6.0
 34757                                  	;cmp	al,50h
 34758 0000725B 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 34759 0000725D 74D8                    	JZ	short CreateLoop	; Y: try again
 34760                                  	;cmp	al,5
 34761 0000725F 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 34762 00007261 7512                    	JNZ	short SETTMPERR		; N: Error out
 34763                                  					; Y: Check to see if we got this due
 34764                                  					;    to the network drive. Note that
 34765                                  					;    the redir will set the exterr
 34766                                  					;    to error_cannot_make if this is 
 34767                                  					;    so. 
 34768 00007263 36803E[D202]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 34769                                  					; See if it's REALLY an att mismatch
 34770 00007269 740A                    	je	short SETTMPERR		; no, network error, stop
 34771                                  ;M070
 34772                                  ; If the user failed on an I24, we do not want to try again
 34773                                  ;
 34774 0000726B 36803E[D202]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 34775 00007271 7402                    	je	short SETTMPERR		;yes, do not try again ;M070
 34776                                  
 34777 00007273 EBC2                    	jmp	short CreateLoop	;attr mismatch, try again ;M070
 34778                                  
 34779                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 34780                                  					; M049 - end
 34781                                  SETTMPERR:
 34782 00007275 F9                      	STC
 34783                                  CreateDone:
 34784                                  	;Leave
 34785 00007276 89EC                    	mov	sp,bp
 34786 00007278 5D                      	pop	bp
 34787 00007279 7203                    	JC	short CreateFail
 34788 0000727B E97FA4                  	jmp	SYS_RET_OK		; success!
 34789                                  CreateFail:
 34790 0000727E E985A4                  	jmp	SYS_RET_ERR
 34791                                  
 34792                                  ;
 34793                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 34794                                  ;   (CH) or to the value in CL if the current system call is through
 34795                                  ;   serverdoscall.
 34796                                  ;
 34797                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 34798                                  ;		fSharing == TRUE => set sattrib to CL
 34799                                  ;   Outputs:	none
 34800                                  ;   Registers changed:	CX
 34801                                  
 34802                                  SetAttrib:
 34803 00007281 36F606[0D05]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 34804 00007287 7502                    	jnz	short Set
 34805 00007289 88E9                    	mov	cl,ch
 34806                                  Set:
 34807 0000728B 36880E[0805]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 34808 00007290 C3                      	retn
 34809                                  
 34810                                  ; 14/07/2018 - Retro DOS v3.0
 34811                                  ; MSDOS 6.0
 34812                                  
 34813                                  ;Break	<Extended_Open- Extended open the file>
 34814                                  ;----------------------------------------------------------------------------
 34815                                  ; Input: AL= 0 reserved  AH=6CH
 34816                                  ;	 BX= mode
 34817                                  ;	 CL= create attribute  CH=search attribute (from server)
 34818                                  ;	 DX= flag
 34819                                  ;	 DS:SI = file name
 34820                                  ;	 ES:DI = parm list
 34821                                  ;			   DD  SET EA list (-1) null
 34822                                  ;			   DW  n  parameters
 34823                                  ;			   DB  type (TTTTTTLL)
 34824                                  ;			   DW  IOMODE
 34825                                  ; Function: Extended Open
 34826                                  ; Output: carry clear
 34827                                  ;		     AX= handle
 34828                                  ;		     CX=1 file opened
 34829                                  ;			2 file created/opened
 34830                                  ;			3 file replaced/opened
 34831                                  ;	  carry set: AX has error code
 34832                                  ;----------------------------------------------------------------------------
 34833                                  
 34834                                  ;_$Extended_Open:			  ;AN000;
 34835                                  ;	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 34836                                  ;	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 34837                                  ;	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 34838                                  ;	TEST	DX,reserved_bits_mask	  ;AN000;EO. reserved bits 0  ?
 34839                                  ;	JNZ	short ext_inval2	  ;AN000;EO. no
 34840                                  ;	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 34841                                  ;	CMP	DL,0			  ;AN000;EO. all fail ?
 34842                                  ;	JZ	short ext_inval2	  ;AN000;EO. yes, error
 34843                                  ;	AND	DL,exists_mask		  ;AN000;EO. get exists action byte
 34844                                  ;	CMP	DL,2			  ;AN000;EO, > 02
 34845                                  ;	JA	short ext_inval2	  ;AN000;EO. yes ,error
 34846                                  ;	AND	AH,not_exists_mask	  ;AN000;EO. get no exists action byte
 34847                                  ;	CMP	AH,10H			  ;AN000;EO. > 10
 34848                                  ;	JA	short ext_inval2	  ;AN000;EO. yes error
 34849                                  ;
 34850                                  ;	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 34851                                  ;	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 34852                                  ;	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 34853                                  ;	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 34854                                  ;	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 34855                                  ;	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 34856                                  ;	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 34857                                  ;	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 34858                                  ;	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 34859                                  ;	MOV	AX,BX			  ;AN000;EO. ax= mode
 34860                                  ;	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 34861                                  ;ext_inval2:				  ;AN000;;EO.
 34862                                  ;	mov	al,error_invalid_function ;AN000;EO.. invalid function
 34863                                  ;	jmp	SYS_RET_ERR
 34864                                  ;error_return:				  ;AN000;EO.
 34865                                  ;	retn				  ;AN000;EO.. return with error
 34866                                  ;goopen2:				  ;AN000;
 34867                                  ;	TEST	BX,int_24_error 	  ;AN000;EO.. disable INT 24 error ?
 34868                                  ;	JZ	short goopen		  ;AN000;EO.. no
 34869                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 34870                                  ;goopen:					  ;AN000;
 34871                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 34872                                  ;	AND	word [SS:EXTOPEN_FLAG],0FFH  ;AN000;EO.create new ?;smr;SS Override
 34873                                  ;	CMP	word [SS:EXTOPEN_FLAG],ext_exists_fail + ext_nexists_create ;AN000;FT.;smr;SS Override
 34874                                  ;	JNZ	short chknext 		  ;AN000;;EO. no
 34875                                  ;	call	_$CreateNewFile		  ;AN000;;EO. yes
 34876                                  ;	JC	short error_return	  ;AN000;;EO. error
 34877                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34878                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34879                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. creted/opened;smr;SS Override
 34880                                  ;	JMP	short setXAttr		  ;AN000;;EO. set XAs
 34881                                  ;ok_return2:
 34882                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34883                                  ;chknext:
 34884                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_exists_open ;AN000;;EO. exists open;smr;SS Override
 34885                                  ;	JNZ	short exist_open	  ;AN000;;EO. yes
 34886                                  ;	call	_$CREAT			  ;AN000;;EO. must be replace open
 34887                                  ;	JC	short error_return	  ;AN000;;EO. return with error
 34888                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34889                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34890                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. prsume create/open;smr;SS Override
 34891                                  ;	TEST	byte [SS:EXTOPEN_ON],ext_file_not_exists ;AN000;;EO. file not exists ?;smr;SS Override
 34892                                  ;	JNZ	short setXAttr		  ;AN000;;EO. no
 34893                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_replaced_opened ;AN000;;EO. replaced/opened;smr;SS Override
 34894                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34895                                  ;error_return2:
 34896                                  ;	STC 				  ; Set Carry again to flag error ;AN001;
 34897                                  ;	retn				  ;AN000;;EO. return with error
 34898                                  ;					  ;AN000;
 34899                                  ;exist_open:				  ;AN000;
 34900                                  ;	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 34901                                  ;	jz	short noserver		  ;AN000;;EO. no
 34902                                  ;	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 34903                                  ;noserver:
 34904                                  ;	call	_$Open2			  ;AN000;;EO. do open
 34905                                  ;	JNC	short ext_ok		  ;AN000;;EO.
 34906                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 34907                                  ;	JZ	short error_return2	  ;AN000;;EO. return with error
 34908                                  ;local_extopen:
 34909                                  ;	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 34910                                  ;	JNZ	short error_return2	  ;AN000;;EO. no,
 34911                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_nexists_create;AN000;;EO. want to fail;smr;SS Override
 34912                                  ;	JNZ	short do_creat		  ;AN000;;EO. yes
 34913                                  ;	JMP	short extexit 		  ;AN000;;EO. yes
 34914                                  ;do_creat:
 34915                                  ;	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 34916                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 34917                                  ;	MOV	DX,SI			  ;AN000;;EO.
 34918                                  ;	call	_$CREAT			  ;AN000;;EO. do create
 34919                                  ;	JC	short extexit 		  ;AN000;;EO. error
 34920                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened 
 34921                                  ;					  ;AN000;;EO. is created/opened;smr;SS Override
 34922                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34923                                  ;
 34924                                  ;ext_ok:
 34925                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 34926                                  ;	JZ	short ok_return		  ;AN000;;EO. yes
 34927                                  ;	MOV	[SS:EXTOPEN_FLAG],action_opened ;AN000;;EO.  opened;smr;SS Override
 34928                                  ;setXAttr:
 34929                                  ;	call	Get_User_Stack		  ;AN000;;EO.
 34930                                  ;	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 34931                                  ;	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 34932                                  ;	POP	AX			  ;AN000;;EO.
 34933                                  ;	MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 34934                                  ;
 34935                                  ;ok_return:				  ;AN000;
 34936                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34937                                  ;
 34938                                  ;extexit2:				  ;AN000; ERROR RECOVERY
 34939                                  ;	POP	BX			  ;AN000;EO. close the handle
 34940                                  ;	PUSH	AX			  ;AN000;EO. save error code from set XA
 34941                                  ;	CMP	word [SS:EXTOPEN_FLAG],action_created_opened 
 34942                                  ;					  ;AN000;EO. from create;smr;SS Override
 34943                                  ;	JNZ	short justopen		  ;AN000;EO.
 34944                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 34945                                  ;	LDS	DX,[SI]			  ;AN000;EO.
 34946                                  ;	call	_$UNLINK 		  ;AN000;EO. delete the file
 34947                                  ;	JMP	SHORT reserror		  ;AN000;EO.
 34948                                  ;
 34949                                  ;justopen:				  ;AN000;
 34950                                  ;	call	$CLOSE			  ;AN000;EO. pretend never happend
 34951                                  ;reserror:				  ;AN000;
 34952                                  ;	POP	AX			  ;AN000;EO. restore error code from set XA
 34953                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34954                                  ;
 34955                                  ;ext_file_unfound:			  ;AN000;
 34956                                  ;	MOV	AX,error_file_not_found   ;AN000;EO.
 34957                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34958                                  ;ext_inval:				  ;AN000;
 34959                                  ;	MOV	AX,error_invalid_function ;AN000;EO.
 34960                                  ;extexit:
 34961                                  ;	jmp	SYS_RET_ERR		  ;AN000;EO.
 34962                                  
 34963                                  ;============================================================================
 34964                                  ; LOCK.ASM, MSDOS 6.0, 1991
 34965                                  ;============================================================================
 34966                                  ; 14/07/2018 - Retro DOS v3.0
 34967                                  
 34968                                  ;BREAK <$LockOper - Lock Calls>
 34969                                  
 34970                                  ;
 34971                                  ;   Assembler usage:
 34972                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 34973                                  ;	    MOV     CX, OffsetHigh
 34974                                  ;	    MOV     DX, OffsetLow
 34975                                  ;	    MOV     SI, LengthHigh
 34976                                  ;	    MOV     DI, LengthLow
 34977                                  ;	    MOV     AH, LockOper
 34978                                  ;	    MOV     AL, Request
 34979                                  ;	    INT     21h
 34980                                  ;
 34981                                  ;   Error returns:
 34982                                  ;	    AX = error_invalid_handle
 34983                                  ;	       = error_invalid_function
 34984                                  ;	       = error_lock_violation
 34985                                  ;
 34986                                  ;   Assembler usage:
 34987                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 34988                                  ;
 34989                                  ;				    0? lock all
 34990                                  ;				    8? lock write
 34991                                  ;				    ?2 lock multiple
 34992                                  ;				    ?3 unlock multiple
 34993                                  ;				    ?4 lock/read
 34994                                  ;				    ?5 write/unlock
 34995                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 34996                                  ;	    MOV     BX, Handle
 34997                                  ;	    MOV     CX, count or size
 34998                                  ;	    LDS     DX, buffer
 34999                                  ;	    INT     21h
 35000                                  ;
 35001                                  ;   Error returns:
 35002                                  ;	    AX = error_invalid_handle
 35003                                  ;	       = error_invalid_function
 35004                                  ;	       = error_lock_violation
 35005                                  
 35006                                  _$LockOper:
 35007 00007291 3C01                    	CMP	AL,1
 35008 00007293 770C                    	JA	short lock_bad_func
 35009                                  
 35010 00007295 57                      	PUSH	DI			       ; Save LengthLow
 35011 00007296 E864F5                  	call	SFFromHandle		       ; ES:DI -> SFT
 35012 00007299 7311                    	JNC	short lock_do 		       ; have valid handle
 35013 0000729B 5F                      	POP	DI			       ; Clean stack
 35014                                  	;mov	al,6
 35015 0000729C B006                    	mov	al,error_invalid_handle
 35016 0000729E E965A4                  	jmp	SYS_RET_ERR
 35017                                  
 35018                                  lock_bad_func:
 35019                                  	;mov	byte [ss:EXTERR_LOCUS],1
 35020 000072A1 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 35021                                  	;mov	al,1
 35022 000072A7 B001                    	mov	al,error_invalid_function
 35023 000072A9 E95AA4                  	jmp	SYS_RET_ERR
 35024                                  
 35025                                  	; MSDOS 6.0 
 35026                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 35027                                  ; Dead code deleted, MD, 23 Mar 90
 35028                                  
 35029                                  lock_do:
 35030                                  	; MSDOS 3.3
 35031 000072AC 08C0                    	or	al,al
 35032 000072AE 58                      	pop	ax
 35033 000072AF 741E                    	jz	short DOS_Lock
 35034                                  DOS_Unlock:
 35035                                   	;test	word [es:di+5],8000h
 35036 000072B1 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35037 000072B7 7409                    	JZ	short LOCAL_UNLOCK
 35038 000072B9 50                      	push    ax
 35039 000072BA B80B11                  	mov     ax,110Bh
 35040 000072BD CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35041                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35042                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 35043                                  			; SFT DPB field -> DPB of drive containing file
 35044                                  			; Return: CF set error
 35045 000072BF 5B                      	pop     bx
 35046 000072C0 EB05                    	jmp     short ValChk
 35047                                  
 35048                                  LOCAL_UNLOCK:
 35049 000072C2 36FF1E[7800]            	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35050                                  ValChk:
 35051 000072C7 7303                    	JNC	short Lock_OK
 35052                                  lockerror:
 35053 000072C9 E93AA4                  	jmp	SYS_RET_ERR
 35054                                  Lock_OK:
 35055                                  	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35056 000072CC E92EA4                  	jmp	SYS_RET_OK
 35057                                  DOS_Lock:
 35058                                  	;test	word [es:di+5],8000h
 35059 000072CF 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35060 000072D5 7407                    	JZ	short LOCAL_LOCK
 35061                                  	;CallInstall NET_XLock,MultNET,10
 35062 000072D7 B80A11                  	mov     ax, 110Ah
 35063 000072DA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35064                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35065                                  			; STACK: WORD low word of size, ES:DI -> SFT
 35066                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35067                                  			; Return: CF set error
 35068 000072DC EBE9                    	JMP	short ValChk
 35069                                  
 35070                                  LOCAL_LOCK:
 35071 000072DE 36FF1E[7400]            	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35072 000072E3 EBE2                    	JMP	short ValChk
 35073                                  
 35074                                  ;lock_do:
 35075                                  ;	; MSDOS 6.0
 35076                                  ;	MOV	BX,AX				; save AX
 35077                                  ;	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 35078                                  ;	MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 35079                                  ;	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 35080                                  ;	POP	CX				; get low length
 35081                                  ;	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 35082                                  ;	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 35083                                  ;	MOV	CX,1				; one range
 35084                                  ;
 35085                                  ;;	PUSH	CS				;
 35086                                  ;;	POP	DS				; DS:DX points to
 35087                                  ;
 35088                                  ;	push	ss
 35089                                  ;	pop	ds
 35090                                  ;
 35091                                  ;	MOV	DX,BP				;   Lock_Buffer
 35092                                  ;	TEST	AL,Unlock_all			; function 1
 35093                                  ;	JNZ	short DOS_Unlock		; yes
 35094                                  ;	JMP	short DOS_Lock			; function 0
 35095                                  ;
 35096                                  ;DOS_Unlock:
 35097                                  ;	;test	word [es:di+5],8000h
 35098                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35099                                  ;	JZ	short LOCAL_UNLOCK
 35100                                  ;	;CallInstall Net_Xlock,MultNET,10
 35101                                  ;	mov     ax, 110Bh
 35102                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35103                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35104                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 35105                                  ;			; SFT DPB field -> DPB of drive containing file
 35106                                  ;			; Return: CF set error
 35107                                  ;
 35108                                  ;	JMP	SHORT ValChk
 35109                                  ;LOCAL_UNLOCK:
 35110                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35111                                  ;ValChk:
 35112                                  ;	JNC	short Lock_OK
 35113                                  ;lockerror:
 35114                                  ;	jmp	SYS_RET_ERR
 35115                                  ;Lock_OK:
 35116                                  ;	MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35117                                  ;	jmp	SYS_RET_OK
 35118                                  ;DOS_Lock:
 35119                                  ;	;test	word [es:di+5],8000h
 35120                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35121                                  ;	JZ	short LOCAL_LOCK
 35122                                  ;	;CallInstall NET_XLock,MultNET,10
 35123                                  ;	mov     ax,110Ah
 35124                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35125                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35126                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 35127                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35128                                  ;			; Return: CF set error
 35129                                  ;	JMP	short ValChk
 35130                                  ;
 35131                                  ;LOCAL_LOCK:
 35132                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35133                                  ;	JMP	short ValChk
 35134                                  
 35135                                  ; 14/07/2018 - Retro DOS v3.0
 35136                                  ; LOC_CHECK
 35137                                  ;MSDOS6.0 (& MSDOS3.3)
 35138                                  
 35139                                  ; Inputs:
 35140                                  ;	Outputs of SETUP
 35141                                  ;	[USER_ID] Set
 35142                                  ;	[PROC_ID] Set
 35143                                  ; Function:
 35144                                  ;	Check for lock violations on local I/O
 35145                                  ;	Retries are attempted with sleeps in between
 35146                                  ; Outputs:
 35147                                  ;    Carry clear
 35148                                  ;	Operation is OK
 35149                                  ;    Carry set
 35150                                  ;	A lock violation detected
 35151                                  ; Outputs of SETUP preserved
 35152                                  
 35153                                  LOCK_CHECK:
 35154 000072E5 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 35155                                  LockRetry:
 35156                                  	; 26/07/2019
 35157 000072E9 53                      	push	bx		; save regs
 35158                                  	;push	ax ; MSDOS 6.0
 35159                                  	; MSDOS 3.3 (& msdos 6.0)
 35160 000072EA FF1E[7C00]              	Call	far [JShare+(8*4)] ; 8 = chk_block
 35161                                  	;pop	ax ; MSDOS 6.0
 35162 000072EE 5B                      	pop	bx		; restrore regs
 35163 000072EF 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 35164                                  LockN:
 35165 000072F1 E88EAC                  	call	Idle		; wait a while
 35166 000072F4 4B                      	DEC	BX		; remember a retry
 35167 000072F5 75F2                    	JNZ	short LockRetry	; more retries left...
 35168 000072F7 F9                      	STC
 35169                                  lc_ret_label:
 35170 000072F8 C3                      	retn
 35171                                  
 35172                                  ; 14/07/2018 - Retro DOS v3.0
 35173                                  ; LOCK_VIOLATION
 35174                                  ;MSDOS6.0 (& MSDOS3.3)
 35175                                  
 35176                                  ; Inputs:
 35177                                  ;	[THISDPB] set
 35178                                  ;	[READOP] indicates whether error on read or write
 35179                                  ; Function:
 35180                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 35181                                  ; Outputs:
 35182                                  ;	Carry set if user says FAIL, causes error_lock_violation
 35183                                  ;	Carry clear if user wants a retry
 35184                                  ;
 35185                                  ; DS, ES, DI, CX preserved, others destroyed
 35186                                  
 35187                                  LOCK_VIOLATION:
 35188 000072F9 1E                      	PUSH	DS
 35189 000072FA 06                      	PUSH	ES
 35190 000072FB 57                      	PUSH	DI
 35191 000072FC 51                      	PUSH	CX
 35192                                  	;mov	ax,21h
 35193 000072FD B82100                  	MOV	AX,error_lock_violation
 35194                                  	;mov	byte [ALLOWED],18h
 35195 00007300 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35196 00007305 C42E[2405]              	LES	BP,[THISDPB]
 35197 00007309 BF0100                  	MOV	DI,1		; Fake some registers
 35198 0000730C 89F9                    	MOV	CX,DI
 35199                                  	;mov	dx,[es:bp+11]
 35200 0000730E 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 35201 00007312 E834E5                  	call	HARDERR
 35202 00007315 59                      	POP	CX
 35203 00007316 5F                      	POP	DI
 35204 00007317 07                      	POP	ES
 35205 00007318 1F                      	POP	DS
 35206 00007319 3C01                    	CMP	AL,1
 35207 0000731B 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 35208 0000731D F9                      	STC
 35209 0000731E C3                      	retn
 35210                                  
 35211                                  ; 14/07/2018 - Retro DOS v3.0
 35212                                  
 35213                                  ;	do a retz to return error
 35214                                  
 35215                                  CheckShare:
 35216                                  	; MSDOS 6.0
 35217                                  	;push	ds			;smr;
 35218                                  	;;getdseg <ds>			; ds -> dosdata
 35219                                  	;push	cs
 35220                                  	;pop	ds
 35221                                  	;CMP	byte [fShare],0
 35222                                  	;pop	ds			;smr;
 35223                                  	;retn
 35224                                  	
 35225                                  	; MSDOS 3.3
 35226 0000731F 2E803E[B102]00          	cmp	byte [cs:fShare],0
 35227 00007325 C3                      	retn
 35228                                  
 35229                                  ;============================================================================
 35230                                  ; SHARE.ASM, MSDOS 6.0, 1991
 35231                                  ;============================================================================
 35232                                  ; 14/07/2018 - Retro DOS v3.0
 35233                                  
 35234                                  ; SHARE_CHECK
 35235                                  
 35236                                  ; Inputs:
 35237                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 35238                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 35239                                  ;       [WFP_START] has full path of name
 35240                                  ;       [USER_ID] Set
 35241                                  ;       [PROC_ID] Set
 35242                                  ; Function:
 35243                                  ;       Check for sharing violations on local file/device access
 35244                                  ; Outputs:
 35245                                  ;    Carry clear
 35246                                  ;       Sharing approved
 35247                                  ;    Carry set
 35248                                  ;       A sharing violation detected
 35249                                  ;           AX is error code
 35250                                  ; USES    ALL but DS
 35251                                  
 35252                                  SHARE_CHECK:
 35253                                  	; 26/07/2019
 35254 00007326 FF1E[6000]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 35255                                  shchk_retn:
 35256 0000732A C3                      	retn
 35257                                  
 35258                                  ; SHARE_VIOLATION
 35259                                  
 35260                                  ; Inputs:
 35261                                  ;       [THISDPB] Set
 35262                                  ;       AX has error code
 35263                                  ; Function:
 35264                                  ;       Handle Sharing errors
 35265                                  ; Outputs:
 35266                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 35267                                  ;       Carry clear if user wants a retry
 35268                                  ;
 35269                                  ; DS, ES, DI preserved, others destroyed
 35270                                  
 35271                                  SHARE_VIOLATION:
 35272 0000732B 1E                      	PUSH    DS
 35273 0000732C 06                      	PUSH	ES
 35274 0000732D 57                      	PUSH    DI
 35275 0000732E C606[1005]00            	MOV     byte [READOP],0		; All share errors are reading
 35276                                  	;mov	byte [ALLOWED],18h
 35277 00007333 C606[F702]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35278 00007338 C42E[2405]              	LES     BP,[THISDPB]
 35279 0000733C BF0100                  	MOV     DI,1			; Fake some registers
 35280 0000733F 89F9                    	MOV     CX,DI
 35281                                  	;mov	dx,[es:bp+16]
 35282 00007341 268B5610                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 35283 00007345 E801E5                  	call	HARDERR
 35284 00007348 5F                      	POP     DI
 35285 00007349 07                      	POP	ES
 35286 0000734A 1F                      	POP     DS
 35287 0000734B 3C01                    	CMP     AL,1
 35288 0000734D 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 35289 0000734F F9                      	STC
 35290 00007350 C3                      	retn
 35291                                  
 35292                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID.  This does
 35293                                  ;       NOT perform a close, it merely asserts that the sharing information
 35294                                  ;       for the SFT/UID/PID may be safely released.
 35295                                  ;
 35296                                  ;   Inputs:     ES:DI points to an SFT
 35297                                  ;   Outputs:    None
 35298                                  ;   Registers modified: all except DS,ES,DI
 35299                                  
 35300                                  ShareEnd:
 35301                                  	; 26/07/2019
 35302 00007351 FF1E[6400]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 35303 00007355 C3                      	retn
 35304                                  
 35305                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 35306                                  
 35307                                  ;
 35308                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set.  If
 35309                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 35310                                  ;
 35311                                  ;   Inputs:     ThisSFT points to the SFT
 35312                                  ;               WFP_Start points to the WFP
 35313                                  ;   Outputs:    Carry clear => successful entry
 35314                                  ;               Carry set => failed system call
 35315                                  ;   Registers modified: all
 35316                                  
 35317                                  ShareEnter:
 35318 00007356 51                      	push	cx
 35319                                  retry:
 35320 00007357 8B0E[1A00]              	mov     cx,[RetryCount]
 35321                                  attempt:
 35322 0000735B C43E[3605]              	les     di,[THISSFT]		; grab sft
 35323 0000735F 31C0                    	XOR     AX,AX
 35324                                   	;mov	[es:di+51],ax
 35325 00007361 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 35326 00007365 51                      	push	cx
 35327 00007366 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 35328 00007369 59                      	pop	cx
 35329 0000736A 730A                    	jnc	short done		; success, let the user see this
 35330 0000736C E813AC                  	call	Idle                    ; wait a while
 35331 0000736F E2EA                    	loop    attempt                 ; go back for another attempt
 35332 00007371 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 35333 00007374 73E1                    	jnc	short retry		; user said to retry, go do it
 35334                                  done:
 35335 00007376 59                      	pop	cx
 35336 00007377 C3                      	retn
 35337                                  
 35338                                  ;----------------------------------------------------------------------------
 35339                                  
 35340                                  ;align 2 ; 05/09/2018 (Error!)
 35341                                  
 35342 00007378 90<rep 8h>              align 16 ; 08/09/2018 (OK.)
 35343                                  
 35344                                  ; 06/08/2018 - Retro DOS v3.0
 35345                                  
 35346                                  ;============================================================================
 35347                                  ; MSINIT.ASM
 35348                                  ;============================================================================
 35349                                  ;
 35350                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 35351                                  ;
 35352                                  	; 15/07/2018 - RetroDOS v3.0
 35353                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 35354                                  
 35355                                  SYSBUF:
 35356                                  IRETT:
 35357 00007380 CF                      	iret
 35358                                  
 35359                                  	; 07/07/2018 - Retro DOS v3.0
 35360                                  	; Retro DOS v2.0 - 03/03/2018
 35361                                  DOSINIT:
 35362                                  	; Far call from SYSINIT
 35363                                  	; DX = Memory size in paragraphs
 35364                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 35365                                  	;	  (Retro DOS v2.0, 16/03/2018)
 35366 00007381 FA                              CLI
 35367 00007382 FC                              CLD
 35368 00007383 2E8916[F202]                    MOV     [CS:ENDMEM],DX
 35369 00007388 2E8926[6804]                    MOV     [CS:INITSP],SP
 35370 0000738D 2E8C16[6A04]                    MOV     [CS:INITSS],SS
 35371 00007392 8CC8                            MOV     AX,CS
 35372 00007394 8ED0                            MOV     SS,AX
 35373 00007396 BC[9476]                        MOV     SP,INITSTACK
 35374                                  	; 08/08/2018
 35375 00007399 368C1E[4A00]            	MOV     [SS:NULDEV+2],DS
 35376 0000739E 368936[4800]                    MOV     [SS:NULDEV],SI	; DS:SI Points to CONSOLE Device
 35377                                  	; 15/07/2018
 35378                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35379                                  	; (Set INT 2Ah handler address to an 'IRET')
 35380 000073A3 1E                      	push    ds
 35381 000073A4 31C0                    	xor     ax,ax
 35382 000073A6 8ED8                    	mov     ds,ax
 35383 000073A8 B8[8073]                	mov     ax,IRETT
 35384 000073AB A3A800                  	mov     [2Ah*4],ax ; 00A8h
 35385 000073AE 8CC8                    	mov     ax,cs
 35386 000073B0 A3AA00                  	mov     [(2Ah*4)+2],ax ; 00AAh
 35387 000073B3 1F                      	pop     ds
 35388                                  	;
 35389 000073B4 E82C02                          CALL    CHARINIT	; initialize console driver
 35390                                  
 35391 000073B7 56                              PUSH	SI		; save pointer to header	
 35392 000073B8 0E                      	PUSH	CS
 35393 000073B9 07                              POP	ES
 35394                                          ; 07/07/2018
 35395 000073BA BF[9E00]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 35396 000073BD B80300                          MOV     AX,3
 35397 000073C0 AB                              STOSW           	; Refcount
 35398 000073C1 FEC8                            DEC     AL
 35399 000073C3 AB                              STOSW           	; Access rd/wr, compatibility
 35400 000073C4 30C0                            XOR     AL,AL
 35401 000073C6 AA                              STOSB           	; attribute
 35402                                  	;mov	al,0C3h
 35403 000073C7 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 35404 000073C9 AB                      	STOSw			; flags
 35405 000073CA 89F0                            mov	ax,si
 35406 000073CC AB                              stosw			; device pointer in devptr	
 35407 000073CD 8CD8                            mov	ax,ds
 35408 000073CF AB                      	stosw
 35409 000073D0 31C0                    	xor	ax,ax	; 0
 35410 000073D2 AB                      	stosw			; firclus
 35411 000073D3 AB                      	stosw			; time
 35412 000073D4 AB                      	stosw			; date
 35413 000073D5 48                      	dec	ax	; -1
 35414 000073D6 AB                      	stosw			; size
 35415 000073D7 AB                      	stosw
 35416 000073D8 40                      	inc	ax	; 0
 35417 000073D9 AB                      	stosw			; position
 35418 000073DA AB                      	stosw
 35419                                  	;add	di,7
 35420 000073DB 83C707                  	add	di,SF_ENTRY.sf_name - SF_ENTRY.sf_cluspos
 35421                                  				; point at name
 35422                                  	;add	si,10
 35423 000073DE 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 35424                                  				; point to name
 35425 000073E1 B90400                  	mov	cx,4
 35426 000073E4 F3A5                    	rep	movsw		; name
 35427 000073E6 B103                    	mov	cl,3
 35428 000073E8 B020                    	mov	al," "
 35429 000073EA F3AA                    	rep	stosb		; extension
 35430 000073EC 5E                      	POP	SI		; get back pointer to header
 35431                                  
 35432                                  				; mark device as CON I/O
 35433                                  	; 15/07/2018
 35434                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 35435 000073ED 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 35436                                  	; 12/03/2018
 35437 000073F1 368936[3200]            	MOV     [SS:BCON],SI
 35438 000073F6 368C1E[3400]                    MOV     [SS:BCON+2],DS
 35439                                  
 35440                                  CHAR_INIT_LOOP:
 35441 000073FB C534                            LDS     SI,[SI]				; AUX device
 35442 000073FD E8E301                          CALL    CHARINIT
 35443                                         	;15/07/2018
 35444                                  	;test	byte [SI+4],8
 35445 00007400 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 35446 00007404 74F5                            JZ      SHORT CHAR_INIT_LOOP
 35447                                  	; 12/03/2018
 35448 00007406 368936[2E00]                    MOV     [SS:BCLOCK],SI
 35449 0000740B 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 35450 00007410 BD[9676]                        MOV     BP,MEMSTRT			; ES:BP points to DPB
 35451                                  PERDRV:
 35452                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 35453 00007413 C534                            LDS     SI,[SI]				; Next device
 35454 00007415 83FEFF                          CMP     SI,-1
 35455 00007418 7468                    	JZ      SHORT CONTINIT
 35456                                  
 35457 0000741A E8C601                          CALL    CHARINIT
 35458                                  
 35459                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 35460                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 35461                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 35462                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 35463                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 35464                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 35465                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 35466                                  
 35467                                          ; 15/07/2018
 35468                                  	;test	word [SI+4],8000h		; DEVTYP
 35469 0000741D F744040080                      TEST    word [SI+SYSDEV.ATT],DEVTYP
 35470 00007422 75EF                    	JNZ     SHORT PERDRV			; Skip any other character devs
 35471                                  
 35472 00007424 368A0E[1303]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 35473 00007429 30ED                    	XOR     CH,CH
 35474                                          ; 07/07/2018
 35475                                  	;MOV	[SI+10],CL		; Number of units in name field
 35476 0000742B 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 35477 0000742E 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 35478 00007433 30F6                    	XOR     DH,DH
 35479 00007435 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 35480 0000743A 1E                      	PUSH    DS
 35481 0000743B 56                              PUSH    SI
 35482 0000743C 36C51E[1803]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 35483                                  PERUNIT:
 35484 00007441 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 35485 00007443 43                              INC     BX
 35486 00007444 43                              INC     BX                      ; On to next BPB
 35487                                  	;07/07/2018
 35488                                          ;mov	[ES:BP+DPB.DRIVE],dl
 35489 00007445 26885600                	MOV     [ES:BP],DL
 35490                                  	;MOV	[ES:BP+1],DH
 35491 00007449 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 35492 0000744D 53                              PUSH    BX
 35493 0000744E 51                              PUSH    CX
 35494 0000744F 52                              PUSH    DX
 35495                                  
 35496                                          ;invoke	$SETDPB
 35497 00007450 E82FA9                          CALL	_$SETDPB
 35498                                  
 35499                                  	; 07/07/2018
 35500                                  	;MOV	AX,[ES:BP+2]
 35501 00007453 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 35502                                          ; 12/03/2018
 35503 00007457 363B06[3600]            	CMP	AX,[SS:MAXSEC]
 35504 0000745C 7604                    	JBE     SHORT NOTMAX
 35505 0000745E 36A3[3600]              	MOV	[SS:MAXSEC],AX
 35506                                  NOTMAX:
 35507 00007462 5A                              POP     DX
 35508 00007463 59                              POP     CX
 35509 00007464 5B                              POP     BX
 35510 00007465 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 35511 00007467 5E                              POP     SI
 35512 00007468 1F                              POP     DS
 35513                                  					; ds:si -> device header
 35514                                  					; store it in the corresponding dpb
 35515                                  	; 07/07/2018
 35516                                          ;MOV	[ES:BP+18],SI
 35517 00007469 26897612                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 35518                                          ;MOV	[ES:BP+20],DS
 35519 0000746D 268C5E14                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 35520                                  
 35521 00007471 1E                              PUSH    DS			; save pointer to device header
 35522 00007472 56                              PUSH    SI
 35523 00007473 FEC6                            INC     DH			; inc unit #
 35524 00007475 FEC2                            INC     DL			; inc drive #
 35525 00007477 8ED8                            MOV     DS,AX			; restore segment of BPB array
 35526                                          ;add	bp,32 ;15/07/2018
 35527 00007479 83C520                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 35528 0000747C E2C3                    	LOOP    PERUNIT			; process all units in each driver
 35529                                          
 35530 0000747E 5E                      	POP     SI			; restore pointer to device header
 35531 0000747F 1F                              POP     DS
 35532 00007480 EB91                    	JMP	SHORT PERDRV		; process all drivers in chain
 35533                                  
 35534                                  CONTINIT:
 35535 00007482 0E                              PUSH    CS
 35536 00007483 1F                              POP     DS
 35537                                  ; Calculate true address of buffers, FATs, free space
 35538 00007484 89EF                            MOV     DI,BP           ; First byte after current DPBs
 35539 00007486 8B2E[3600]                      MOV     BP,[MAXSEC]
 35540 0000748A B8[8073]                        MOV     AX,SYSBUF	; = IRETT (15/07/2018)
 35541                                          ; 07/07/2018
 35542                                  	;MOV	[BUFFSTRT],AX
 35543 0000748D 01E8                            ADD     AX,BP           ; One I/O buffer
 35544 0000748F 83C010                          ADD     AX,BUFINSIZ ; = 16
 35545 00007492 A3[2600]                        MOV     [DPBHEAD],AX	; True start of DPBs
 35546 00007495 89C2                            MOV     DX,AX
 35547 00007497 81EA[8073]                      SUB     DX,SYSBUF	; = IRETT (15/07/2018)
 35548 0000749B 89D5                            MOV     BP,DX
 35549 0000749D 01FD                            ADD     BP,DI           ; Allocate buffer space
 35550                                  	;sub	bp,918 ; = ADJFAC for current DOSINIT (07/07/2018)
 35551 0000749F 81ED1603                        SUB     BP,ADJFAC       ; True address of free memory
 35552 000074A3 55                              PUSH    BP ; ###		
 35553 000074A4 BF[9676]                        MOV     DI,MEMSTRT	; Current start of DPBs
 35554                                  	;add	di,24
 35555 000074A7 83C718                          ADD     DI,DPB.NEXT_DPB	; Point at dpb.next_dpb field
 35556 000074AA 8A0E[4600]                      MOV     CL,[NUMIO]
 35557 000074AE 30ED                            XOR     CH,CH
 35558                                  TRUEDPBAD:
 35559                                  	;add	ax,32
 35560 000074B0 83C020                          ADD     AX,DPBSIZ       ; Compute address of next DPB
 35561 000074B3 AB                              STOSW                   ; Set the link to next DPB
 35562 000074B4 83C71E                          ADD     DI,DPBSIZ-2     ; Point at next address
 35563 000074B7 E2F7                            LOOP    TRUEDPBAD
 35564 000074B9 83EF20                          SUB     DI,DPBSIZ       ; Point at last dpb.next_dpb field
 35565 000074BC B8FFFF                          MOV     AX,-1
 35566 000074BF AB                              STOSW                   ; End of list
 35567 000074C0 83C50F                          ADD     BP,15           ; True start of free space (round up to segment)
 35568                                  	; 15/07/2018
 35569                                  	;MOV	CL,4
 35570                                          ;SHR	BP,CL           ; Number of segments for DOS resources
 35571 000074C3 D1DD                            rcr	bp,1
 35572 000074C5 B103                    	mov	cl,3
 35573 000074C7 D3ED                    	shr	bp,cl
 35574                                  	;
 35575 000074C9 8CCA                    	MOV     DX,CS
 35576 000074CB 01EA                            ADD     DX,BP           ; First free segment
 35577 000074CD BB0F00                  	MOV	BX,15 ; 0Fh
 35578 000074D0 8B0E[F202]              	MOV	CX,[ENDMEM]
 35579 000074D4 8CCD                            MOV     BP,CS
 35580                                  
 35581                                  ; BP has segment of DOS (whether to load high or run in place)
 35582                                  ; DX has program segment (whether after DOS or overlaying DOS)
 35583                                  ; CX has size of memory in paragraphs (reduced by DOS size if HIGHMEM)
 35584 000074D6 890E[F202]                      MOV	[ENDMEM],CX
 35585 000074DA 8EC5                            MOV     ES,BP
 35586 000074DC 268C06[4A03]                    MOV     [ES:DSKCHRET+3],ES ; mov [ES:DOSEG_INIT],es
 35587 000074E1 31C0                            XOR     AX,AX
 35588 000074E3 8ED8                            MOV     DS,AX
 35589 000074E5 8EC0                            MOV     ES,AX
 35590                                  	;mov	di,82h 
 35591 000074E7 BF8200                          MOV     DI,INTBASE+2
 35592                                  	; 15/07/2018
 35593 000074EA 89E8                            MOV     AX,BP
 35594                                  	; Set INT 0 (divide by zero) handler
 35595 000074EC C7060000[E257]          	mov     word [0],DIVOV
 35596 000074F2 A30200                  	mov     word [2],ax  ; = cs
 35597                                  	; Set INT 20h to INT 28h handler segments 
 35598 000074F5 B91100                  	mov	cx,17
 35599 000074F8 F3AB                    	rep	stosw
 35600                                  	; DI points to INT 29h vector, offset
 35601 000074FA 83C706                  	add	di,6 
 35602                                  	; DI points to INT 2Ah vector, segment
 35603                                  	;Set  INT 2Ah to INT 3Fh handler segments		
 35604 000074FD B92B00                  	mov	cx,43
 35605 00007500 F3AB                    	rep	stosw
 35606                                  	; DI points to INT 40h vector, segment
 35607 00007502 BF8000                  	mov	di,80h
 35608                                  	; Set INT 20h to INT 28h vectors to their default handler offsets
 35609 00007505 B8[9114]                	mov	ax,_IRET
 35610 00007508 B90900                  	mov	cx,9
 35611                                  iset1:
 35612 0000750B AB                      	stosw
 35613 0000750C 83C702                  	add	di,2
 35614 0000750F E2FA                    	loop	iset1
 35615 00007511 83C704                  	add	di,4
 35616                                  	; Set INT 2Ah to INT 3Fh vectors to their default handler offsets
 35617 00007514 B91600                  	mov	cx,22
 35618                                  iset2:
 35619 00007517 AB                      	stosw
 35620 00007518 83C702                  	add	di,2
 35621 0000751B E2FA                    	loop	iset2
 35622                                  	
 35623 0000751D 89E8                    	mov	ax,bp
 35624                                  	; Set	INT 2Fh handler offset to INT2F
 35625 0000751F C706BC00[BE17]          	mov	word [2Fh*4],INT2F  ; 00BCh
 35626                                  
 35627                                  	; set up entry point call at vectors 30-31h
 35628                                  
 35629 00007525 C606C000EA                      MOV     BYTE [ENTRYPOINT],mi_Long_JMP
 35630 0000752A C706C100[9214]                  MOV     WORD [ENTRYPOINT+1],CALL_ENTRY
 35631 00007530 A3C300                          MOV    [ENTRYPOINT+3],AX
 35632                                  
 35633                                  	; Set	INT 20h, 21h, 22h, 23h handler offsets
 35634 00007533 C7068000[8B14]                  MOV     WORD [addr_int_abort],QUIT
 35635 00007539 C7068400[AA14]                  MOV     WORD [addr_int_command],COMMAND
 35636 0000753F C70688000001                    MOV     WORD [addr_int_terminate],100H
 35637 00007545 89168A00                        MOV     [addr_int_terminate+2],DX
 35638                                  	; 15/07/2018 - Retro DOS v3.0
 35639 00007549 C7069400[7316]                  MOV     WORD [addr_int_disk_read],ABSDRD   ; INT 25h
 35640 0000754F C7069800[B616]                  MOV     WORD [addr_int_disk_write],ABSDWRT ; INT 26h
 35641 00007555 C7069C00[9764]                  MOV     WORD [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 35642                                  
 35643                                  	; 15/07/2018
 35644                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35645 0000755B 0E                      	push	cs
 35646 0000755C 1F                      	pop	ds
 35647 0000755D 0E                      	push	cs
 35648 0000755E 07                      	pop	es
 35649                                  	; initialize the jump table for the sharer..
 35650                                  	;	(MSDOS 6.0, MSINIT.ASM, 1991, "patch_misc_segments")
 35651                                  	; MSDOS 3.3
 35652                                  	; (set JSharer jump table segments)
 35653 0000755F BF[5C00]                	mov	di,JShare
 35654 00007562 8CC8                    	mov	ax,cs
 35655 00007564 B90F00                  	mov	cx,15
 35656                                  iset3:
 35657 00007567 83C702                  	add	di,2
 35658 0000756A AB                      	stosw
 35659 0000756B E2FA                    	loop	iset3
 35660                                  
 35661                                  	; MSDOS 2.11, MSDOS 3.3
 35662 0000756D B8[5803]                        MOV     AX,INITBLOCK
 35663 00007570 83C00F                          ADD	AX,0Fh		; round to a paragraph
 35664 00007573 B104                            MOV     CL,4
 35665 00007575 D3E8                            SHR     AX,CL
 35666 00007577 8CDF                            MOV     DI,DS
 35667 00007579 01C7                            ADD     DI,AX
 35668 0000757B 47                              INC     DI
 35669 0000757C 893E[DE02]                      MOV     [CurrentPDB],DI
 35670 00007580 55                              PUSH    BP ; ##
 35671 00007581 52                              PUSH    DX ; #		; Save COMMAND address
 35672 00007582 A1[F202]                        MOV     AX,[ENDMEM]
 35673 00007585 89FA                            MOV     DX,DI
 35674                                  
 35675                                          ;invoke	SETMEM          ; Basic Header
 35676 00007587 E82DA9                  	CALL	SETMEM
 35677 0000758A 0E                              PUSH	CS
 35678 0000758B 1F                              POP	DS
 35679                                  	;mov	di,24
 35680 0000758C BF1800                          MOV     DI,PDB.JFN_TABLE
 35681 0000758F 31C0                            XOR     AX,AX
 35682 00007591 AB                              STOSW
 35683 00007592 AA                              STOSB                   ; 0,1 and 2 are CON device
 35684 00007593 B0FF                            MOV     AL,0FFH
 35685                                  	;mov	cx,17
 35686 00007595 B91100                          MOV     CX,FILPERPROC - 3 ; 17
 35687 00007598 F3AA                            REP     STOSB           ; Rest are unused
 35688 0000759A 0E                              PUSH	CS
 35689 0000759B 07                              POP	ES
 35690 0000759C 8C1E[2C00]                      MOV     [SFT_ADDR+2],DS	; Must be set to print messages
 35691                                  
 35692                                  	; 15/07/2018 - Retro DOS v3.0
 35693                                  	; MSDOS 3.3
 35694                                  	; (set country cdpg table segments)
 35695 000075A0 BE[FD0F]                	mov	si,COUNTRY_CDPG ; country_tab
 35696                                  	;mov	[es:si+79],es	; Ucase table segment
 35697                                  	;mov	[es:si+84],es	; File ucase table segment
 35698                                  	;mov	[es:si+89],es	; File char list segment
 35699                                  	;mov	[es:si+94],es	; Collate table segment
 35700                                  	;mov	[es:si+123],es	; Monocase routine segment
 35701 000075A3 8C444F                  	mov	[si+79],es
 35702 000075A6 8C4454                  	mov	[si+84],es
 35703 000075A9 8C4459                  	mov	[Si+89],es
 35704 000075AC 8C445E                  	mov	[si+94],es
 35705 000075AF 8C447B                  	mov	[si+123],es
 35706                                  	; (set SysInitTable -sysinitvars and country_cdpg- segments)
 35707 000075B2 BE[3B0F]                	mov     si,SysInitTable
 35708                                  	;;mov	[es:si+6], es
 35709                                  	;;mov	[es:si+2], es
 35710                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 35711                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 35712 000075B5 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 35713 000075B8 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 35714                                  
 35715                                  	; (set FastOpen table FastRet segment)
 35716 000075BB BE[430F]                	mov     si,FastTable
 35717                                  	;mov	[es:si+4],es
 35718                                  	;;mov	[es:si+8],es
 35719 000075BE 8C4404                  	mov     [si+4],es
 35720                                  	;mov	[si+8],es
 35721                                  	; IBMDOS.COM (Offset 7259h), IBM PC DOS 3.30
 35722 000075C1 C706[8F0F]7258          	mov	word [FETCHI_TAG],5872h ; ? ('Xr')
 35723                                  
 35724                                  	; 10/08/2018 - Retro DOS v3.0
 35725                                  
 35726                                  	; MSDOS 2.11 (Retro DOS v2.0), MSDOS 3.3
 35727                                  
 35728                                  ; After this points the char device functions for CON will work for
 35729                                  ; printing messages
 35730                                  
 35731                                  	;;IF	NOT IBM
 35732                                  	;;IF	NOT ALTVECT
 35733                                  	;MOV	SI,HEADER
 35734                                  	;;invoke OUTMES
 35735                                  	;CALL	OUTMES
 35736                                  	;;PUSH	CS		; Outmes stomps on segments
 35737                                  	;;POP	DS
 35738                                  	;;PUSH	CS
 35739                                  	;;POP	ES
 35740                                  	;;ENDIF
 35741                                  	;;ENDIF
 35742                                  
 35743                                  ; Move the FATs into position
 35744 000075C7 5A                              POP     DX ; #			; Restore COMMAND address
 35745 000075C8 5D                              POP     BP ; ##
 35746 000075C9 59                              POP     CX ; ###		; True address of free memory
 35747 000075CA BE[9676]                        MOV     SI,MEMSTRT		; Place to move DPBs from
 35748 000075CD 8B3E[2600]                      MOV     DI,[DPBHEAD]		; Place to move DPBs to
 35749 000075D1 29F9                            SUB     CX,DI                   ; Total length of DPBs
 35750 000075D3 39F7                            CMP     DI,SI
 35751 000075D5 7607                            JBE     SHORT MOVJMP		; Are we moving to higher or 
 35752                                  					; lower memory?
 35753 000075D7 49                              DEC     CX                      ; Move backwards to higher memory
 35754 000075D8 01CF                            ADD     DI,CX
 35755 000075DA 01CE                            ADD     SI,CX
 35756 000075DC 41                              INC     CX
 35757 000075DD FD                              STD
 35758                                  MOVJMP:
 35759 000075DE 8EC5                            MOV     ES,BP
 35760 000075E0 E9898E                          JMP     MOVDPB
 35761                                  
 35762                                  CHARINIT:
 35763                                  	; 07/07/2018 - Retro DOS v3.0
 35764 000075E3 36C606[0603]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 35765 000075E9 36C606[0703]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 35766 000075EF 36C606[0803]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 35767 000075F5 36C706[0903]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 35768 000075FC 06                              PUSH	ES
 35769 000075FD 53                              PUSH	BX
 35770 000075FE 50                              PUSH	AX
 35771 000075FF BB[0603]                        MOV	BX,DEVCALL
 35772 00007602 0E                              PUSH	CS
 35773 00007603 07                              POP	ES
 35774 00007604 E8F4D8                          CALL	DEVIOCALL2	
 35775 00007607 58                      	POP	AX
 35776 00007608 5B                              POP	BX
 35777 00007609 07                              POP	ES
 35778 0000760A C3                              RETN
 35779                                  
 35780 0000760B 90                      align 2
 35781                                          ;;DB	80H DUP(?)
 35782                                  	;TIMES 	64 dw 0 ; 05/09/2018
 35783                                  	; 10/08/2018
 35784                                  	;times	128 dw 0
 35785                                  	; 12/08/2018
 35786                                  	;times	132 dW 0 ; ADJFAC = 918 ; 08/09/2018 (OK.)
 35787                                  	; 08/09/2018 
 35788 0000760C 00<rep 88h>             	times	136 db 0 ; ADJFAC = 790	; 08/09/2018 (OK.) 
 35789                                  
 35790                                  INITSTACK:	; INITSTACK LABEL BYTE
 35791 00007694 0000                    	DW	0 ; DW ?
 35792                                  
 35793                                  ;MEMSTRT LABEL	WORD
 35794                                  MEMSTRT EQU	$
 35795                                  
 35796                                  ADJFAC  EQU     MEMSTRT-SYSBUF
 35797                                  
 35798 00007696 00                      	db 0
 35799 00007697 00                      	db 0
 35800 00007698 00                      	db 0
 35801 00007699 00                      	db 0
 35802 0000769A 00                      	db 0
 35803 0000769B 00                      	db 0
 35804 0000769C 00                      	db 0
 35805 0000769D 00                      	db 0
 35806 0000769E 00                      	db 0
 35807 0000769F 00                      	db 0
 35808                                  PcDosVersion:
 35809 000076A0 1A4040402323232050-     	db 1Ah,'@@@### PC-DOS Version 3.30',0Dh,0Ah
 35809 000076A9 432D444F5320566572-
 35809 000076B2 73696F6E20332E3330-
 35809 000076BB 0D0A               
 35810 000076BD 1A00                    	db 1Ah,0
 35811                                  
 35812                                          ;do_ext
 35813                                  ;LAST	ENDS
