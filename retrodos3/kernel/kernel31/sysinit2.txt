     1                                  ; ****************************************************************************
     2                                  ; SYSINIT.BIN (MSDOS 3.3 Kernel) - RETRO DOS v3.1 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 22/11/2022 (Previous: 03/08/2019)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 29/06/2019 (Retro DOS 3.1)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.14 
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	    ((nasm sysinit.asm -l sysinit.txt -o SYSINIT.BIN)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 3.3
    13                                  ; source code by Microsoft, 24/07/1987
    14                                  ; ----------------------------------------------------------------------------
    15                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    16                                  ; by Microsoft, 12/10/1983
    17                                  ; ****************************************************************************
    18                                  ; main file: 'retrodos.asm'
    19                                  ; incbin 'SYSINIT.BIN' ; (SYINITSEG)
    20                                  
    21                                  ; -----------------------------------------
    22                                  ; SYSINIT2.S - Retro DOS v3.0, 06/07/2018
    23                                  ; SYSINIT2.ASM - Retro DOS v3.1, 29/06/2019 
    24                                  ; -----------------------------------------
    25                                  
    26                                  ;--------------------------------------------------------------
    27                                  ; SYSINIT.TXT (27/01/1983)
    28                                  ;--------------------------------------------------------------
    29                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
    30                                  ;over  the  system  initialization  after  the  OEM  bios   has
    31                                  ;performed any  initialization  it  needs  to  do.   Control is
    32                                  ;transfered with a long jump to the external  variable  SYSINIT
    33                                  ;
    34                                  ;
    35                                  ;   The OEM  has  the  following  variables declared external:
    36                                  ;
    37                                  ;   CURRENT_DOS_LOCATION    WORD
    38                                  ;
    39                                  ;This word  contains  the  segment  number of the DOS before it
    40                                  ;is relocated.  The OEM bios must set this value.
    41                                  ;
    42                                  ;   FINAL_DOS_LOCATION      WORD
    43                                  ;
    44                                  ;This word contains the segment number of the DOS after SYSINIT
    45                                  ;moves it.  The OEM bios must set this value.
    46                                  ;
    47                                  ;   DEVICE_LIST             DWORD
    48                                  ;
    49                                  ;This  double  word  pointer  points  to  the  linked  list  of
    50                                  ;character and block device drivers.  The  OEM  must  set  this
    51                                  ;value.
    52                                  ;
    53                                  ;   MEMORY_SIZE             WORD
    54                                  ;
    55                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
    56                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
    57                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
    58                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
    59                                  ;and read it back until it gets a mismatch.
    60                                  ;
    61                                  ;   DEFAULT_DRIVE           BYTE
    62                                  ;
    63                                  ;This is  the initial default drive when the system first comes
    64                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
    65                                  ;it then drive a is assumed.
    66                                  ;
    67                                  ;   BUFFERS                 BYTE
    68                                  ;
    69                                  ;This is  the  default  number of buffers for the system.  This
    70                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
    71                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
    72                                  ;
    73                                  ;   FILES                   BYTE
    74                                  ;
    75                                  ;This is  the  default  number  of  files for the system.  This
    76                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
    77                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
    78                                  ;
    79                                  ;   SYSINIT                 FAR
    80                                  ;
    81                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
    82                                  ;this label at the end of its INIT code.
    83                                  ;
    84                                  ;   The OEM  has  the  following  variables declared public:
    85                                  ;
    86                                  ;   RE_INIT                 FAR
    87                                  ;
    88                                  ;This is an entry point which allows the BIOS to do some INIT
    89                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
    90                                  ;PRESERVED.  On entry DS points to the first available memory
    91                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
    92                                  ;prefix which represents  the  "program"  currently  running.
    93                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
    94                                  ;SYSINIT taken together.  This is not  a  normal  program  in
    95                                  ;that  no  memory  is  allocated to it, it is running in free
    96                                  ;memory.
    97                                  ;NOTES:
    98                                  ;     At the time this routine is called SYSINIT occupies the
    99                                  ;highest 10K of memory ("highest" is determined by the  value
   100                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
   101                                  ;     Since this is called AFTER DOS is initialized, you can
   102                                  ;make system calls.  This also implies that the code for this
   103                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
   104                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
   105                                  ;     If you don't want  anything done just set this to point
   106                                  ;at a FAR RET instruction.
   107                                  
   108                                  ; ----------------------------------------------------------------------------
   109                                  ; TITLE   BIOS SYSTEM INITIALIZATION
   110                                  ; ----------------------------------------------------------------------------
   111                                  
   112                                  FALSE   EQU     0
   113                                  TRUE    EQU     0FFFFh
   114                                  
   115                                  ;IBMVER     EQU     TRUE
   116                                  ;IBM        EQU     IBMVER
   117                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
   118                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
   119                                  ;MSVER      EQU     FALSE
   120                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
   121                                  ;KANJI      EQU     FALSE
   122                                  
   123                                  ;include version.inc
   124                                  
   125                                  ;	IF	IBMJAPVER
   126                                  ;NOEXEC	EQU	TRUE
   127                                  ;       ELSE
   128                                  ;NOEXEC	EQU	FALSE
   129                                  ;       ENDIF
   130                                  
   131                                  MAJOR_VERSION   EQU     3
   132                                  MINOR_VERSION   EQU     30	;3.30
   133                                  
   134                                  ;DOSSIZE EQU	0A000H
   135                                  
   136                                  ;; (MSDOS 2.0) SYSINITVAR table offsets
   137                                  ;; ----------------------------------------------------------------------
   138                                  
   139                                  ;DPBHEAD  EQU	0  ; dd ; Pointer to head of DPB-FAT list	
   140                                  ;SFT_ADDR EQU	4  ; dd ; Pointer to first FCB table
   141                                  ;BCLOCK	  EQU	8  ; dd ; Pointer to the CLOCK device	
   142                                  ;BCON	  EQU	12 ; dd ; Console device entry points
   143                                  ;NUMIO	  EQU	16 ; db ; Number of disk tables
   144                                  ;MAXSEC   EQU	17 ; dw ; Maximum allowed sector size
   145                                  ;BUFFHEAD EQU	19 ; dd	; Pointer to head of buffer queue
   146                                  ;DEVHEAD  EQU	23 ; dd ; Set to list start passed by BIOS at DOS Init
   147                                  ;NUL_DEV  EQU	23 ; dd	; NUL device header, first 4 bytes of dev header
   148                                  ;			; (4+14 bytes)
   149                                  ;			; Points to the next device in device chain 
   150                                  ;DEVTYPE  EQU   27 ; dw ; = ISNULL
   151                                  ;SNULDEV  EQU 	29 ; dw
   152                                  ;INULDEV  EQU	31 ; dw
   153                                  ;DEVNAME  EQU	33 ; 8 BYTES ; "NUL     "
   154                                  
   155                                  ;; ----------------------------------------------------------------------
   156                                  ;; Internal DOS data returned by DOSINIT
   157                                  ;;
   158                                  ;struc	SYSINITVAR
   159                                  ;.DPBHEAD:	resd 1			; Pointer to head of DPB-FAT list
   160                                  ;.SFT_ADDR:	resd 1			; Pointer to first FCB table
   161                                  ;; The following address points to the CLOCK device
   162                                  ;.BCLOCK:	resd 1
   163                                  ;; The following address is used by DISKSTATCHK it is always
   164                                  ;; points to the console input device header
   165                                  ;.BCON:		resd 1			; Console device entry points
   166                                  ;.NUMIO:	resb 1			; Number of disk tables
   167                                  ;.MAXSEC:	resw 1			; Maximum allowed sector size
   168                                  ;.BUFFHEAD:	resd 1			; Head of buffer queue
   169                                  ;.DEVHEAD:	resd 1			; NUL dev head points to next dev
   170                                  ;.size:
   171                                  ;endstruc
   172                                  
   173                                  ; ----------------------------------------------------------------------
   174                                  ; device definitions
   175                                  
   176                                  ;Attribute bit masks
   177                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
   178                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
   179                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
   180                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
   181                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
   182                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
   183                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
   184                                  ISIBM   EQU     0010H           ;Bit 4 - This device is special
   185                                  
   186                                  ; The device table list has the form:
   187                                  struc	SYSDEV
   188 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
   189 00000004 ????                    .ATT:		resw 1		;Attributes of the device
   190 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
   191 00000008 ????                    .INT:		resw 1		;Interrupt entry point
   192 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
   193                                  .size:
   194                                  endstruc
   195                                  
   196                                  ;Static Reguest Header
   197                                  struc	SRHEAD
   198 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
   199 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
   200 00000002 ??                      .REQFUNC:	resb 1		;Type of request
   201 00000003 ????                    .REQSTAT:	resw 1		;Status Word
   202 00000005 ????????????????                	resb 8		;Reserved for queue links
   203                                  .size:
   204                                  endstruc
   205                                  
   206                                  ;Status word masks
   207                                  STERR   EQU     8000H           ;Bit 15 - Error
   208                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
   209                                  STDON   EQU     0100H           ;Bit 8 - Done
   210                                  STECODE EQU     00FFH           ;Error code
   211                                  WRECODE EQU     0
   212                                  
   213                                  ;Function codes
   214                                  DEVINIT EQU     0               ;Initialization
   215                                  DINITHL EQU     26              ;Size of init header
   216                                  DEVMDCH EQU     1               ;Media check
   217                                  DMEDHL  EQU     15              ;Size of media check header
   218                                  DEVBPB  EQU     2               ;Get BPB
   219                                  DEVRDIOCTL EQU  3               ;IOCTL read
   220                                  DBPBHL  EQU     22              ;Size of Get BPB header
   221                                  DEVRD   EQU     4               ;Read
   222                                  DRDWRHL EQU     22              ;Size of RD/WR header
   223                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
   224                                  DRDNDHL EQU     14              ;Size of non destructive read header
   225                                  DEVIST  EQU     6               ;Input status
   226                                  DSTATHL EQU     13              ;Size of status header
   227                                  DEVIFL  EQU     7               ;Input flush
   228                                  DFLSHL  EQU     15              ;Size of flush header
   229                                  DEVWRT  EQU     8               ;Write
   230                                  DEVWRTV EQU     9               ;Write with verify
   231                                  DEVOST  EQU     10              ;Output status
   232                                  DEVOFL  EQU     11              ;Output flush
   233                                  DEVWRIOCTL EQU  12              ;IOCTL write
   234                                  
   235                                  ; ----------------------------------------------------------------------
   236                                  struc	SYS_FCB
   237 00000000 ??                      .fcb_drive:	resb 1
   238 00000001 ????????????????        .fcb_name:	resb 8
   239 00000009 ??????                  .fcb_ext:	resb 3
   240 0000000C ????                    .fcb_EXTENT:	resw 1
   241 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
   242 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
   243                                                          ; word
   244 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
   245 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
   246 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
   247 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
   248                                                          ; bit 7=0 for file, bit 7=1 for I/O device
   249                                                          ; If file, bit 6=0 if dirty
   250                                                          ; If I/O device, bit 6=0 if EOF (input)
   251                                                          ;               Bit 5=1 if Raw mode
   252                                                          ;               Bit 0=1 if console input device
   253                                                          ;               Bit 1=1 if console output device
   254                                                          ;               Bit 2=1 if null device
   255                                                          ;               Bit 3=1 if clock device
   256 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
   257 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
   258 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
   259 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
   260 00000020 ??                      .fcb_NR:	resb 1	; Next record
   261 00000021 ????????                .fcb_RR:	resb 4	; Random record
   262                                  .size:
   263                                  endstruc
   264                                  
   265                                  ; ----------------------------------------------------------------------
   266                                  ; Field definition for I/O buffer information
   267                                  
   268                                  ; 10/06/2018 - Retro DOS v3.0 (MSDOS 3.3, BUFFER.INC, 24/07/1987)
   269                                  
   270                                  struc	BUFFINFO
   271 00000000 ????????                .buf_link:	resd 1	; Pointer to next buffer in list
   272 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
   273                                  			; SFT table index (bit 7 = 1)
   274                                  			; = FFH if buffer free
   275 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
   276                                  			;	= 0 if Local device buffer
   277                                  			; Bit 6 = 1 if buffer dirty
   278                                  			; Bit 5 = Reserved
   279                                  			; Bit 4 = Search bit (bit 7 = 1)
   280                                  			; Bit 3 = 1 if buffer is DATA
   281                                  			; Bit 2 = 1 if buffer is DIR
   282                                  			; Bit 1 = 1 if buffer is FAT
   283                                  			; Bit 0 = Reserved
   284 00000006 ????                    .buf_sector:	resw 1	; Sector number of buffer (bit 7 = 0)
   285                                  ; The next two items are often refed as a word (bit 7 = 0)
   286 00000008 ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
   287 00000009 ??                      .buf_wrtcntinc:	resb 1	; "   "     "   , # sectors between each write
   288 0000000A ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
   289 0000000E ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
   290                                  .size:
   291                                  endstruc
   292                                  
   293                                  %define buf_offset	dword [buf_sector]
   294                                  			;For bit 7 = 1, this is the byte
   295                                  			;offset of the start of the buffer in
   296                                  			;the file pointed to by buf_ID.  Thus
   297                                  			;the buffer starts at location
   298                                  			;buf_offset in the file and contains
   299                                  			;buf_fill bytes.
   300                                  
   301                                  BUFINSIZ        EQU     BUFFINFO.size ; ; Size of structure in bytes
   302                                  
   303                                  
   304                                  buf_Free	EQU	0FFh		; buf_id of free buffer
   305                                  
   306                                  ;Flag byte masks
   307                                  buf_isnet	EQU	10000000B
   308                                  buf_dirty	EQU	01000000B
   309                                  ;***
   310                                  buf_visit	EQU	00100000B
   311                                  ;***
   312                                  buf_snbuf	EQU	00010000B
   313                                  
   314                                  buf_isDATA	EQU	00001000B
   315                                  buf_isDIR	EQU	00000100B
   316                                  buf_isFAT	EQU	00000010B
   317                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   318                                  
   319                                  buf_NetID	EQU	BUFINSIZ
   320                                  
   321                                  
   322                                  ; ----------------------------------------------------------------------
   323                                  ; DPB structure
   324                                  
   325                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
   326                                  
   327                                  struc	DPB
   328 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   329 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   330 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   331 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   332 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   333 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   334 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   335 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   336 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   337 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   338 0000000F ??                      .FAT_SIZE:	resb 1		; Number of records occupied by FAT
   339 00000010 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   340 00000012 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   341 00000016 ??                      .MEDIA:		resb 1		; Media byte
   342 00000017 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   343                                  				; check the first time this DPB is used
   344 00000018 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   345 0000001C ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   346 0000001E ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   347                                  .size:
   348                                  endstruc
   349                                  
   350                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   351                                  
   352                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   353                                  
   354                                  ; ----------------------------------------------------------------------
   355                                  ; 26/03/2018
   356                                  
   357                                  ; IOCTL SUB-FUNCTIONS
   358                                  IOCTL_GET_DEVICE_INFO	EQU	0
   359                                  IOCTL_SET_DEVICE_INFO	EQU	1
   360                                  IOCTL_READ_HANDLE	EQU	2
   361                                  IOCTL_WRITE_HANDLE	EQU	3
   362                                  IOCTL_READ_DRIVE	EQU	4
   363                                  IOCTL_WRITE_DRIVE	EQU	5
   364                                  IOCTL_GET_INPUT_STATUS	EQU	6
   365                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   366                                  IOCTL_CHANGEABLE?	EQU	8
   367                                  IOCTL_SHARING_RETRY	EQU	11
   368                                  GENERIC_IOCTL_HANDLE	EQU	12
   369                                  GENERIC_IOCTL		EQU	13
   370                                  
   371                                  ; GENERIC IOCTL SUB-FUNCTIONS
   372                                  RAWIO			EQU	8
   373                                  
   374                                  ; RAWIO SUB-FUNCTIONS
   375                                  GET_DEVICE_PARAMETERS	EQU	60H
   376                                  SET_DEVICE_PARAMETERS	EQU	40H
   377                                  READ_TRACK		EQU	61H
   378                                  WRITE_TRACK		EQU	41H
   379                                  VERIFY_TRACK		EQU	62H
   380                                  FORMAT_TRACK		EQU	42H
   381                                  
   382                                  ; DEVICETYPE VALUES
   383                                  MAX_SECTORS_IN_TRACK	EQU	63
   384                                  DEV_5INCH		EQU	0
   385                                  DEV_5INCH96TPI		EQU	1
   386                                  DEV_3INCH720KB		EQU	2
   387                                  DEV_8INCHSS		EQU	3
   388                                  DEV_8INCHDS		EQU	4
   389                                  DEV_HARDDISK		EQU	5
   390                                  DEV_OTHER		EQU	7
   391                                  ;DEV_3INCH1440KB	EQU	7
   392                                  DEV_3INCH2880KB		EQU	9
   393                                  ; Retro DOS v2.0 - 26/03/2018
   394                                  ;;DEV_TAPE		EQU	6
   395                                  ;;DEV_ERIMO		EQU	8
   396                                  ;DEV_3INCH2880KB	EQU	9
   397                                  DEV_3INCH1440KB		EQU	10
   398                                  
   399                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   400                                  					; CURRENTLY SUPPORT.
   401                                  MAX_DEV_TYPE		EQU	10
   402                                  
   403                                  struc A_SECTORTABLE
   404 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   405 00000002 ????                    .ST_SECTORSIZE:		resw	1
   406                                  .size:
   407                                  endstruc
   408                                  
   409                                  struc A_BPB
   410 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   411 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   412 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   413 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   414 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   415 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   416 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   417 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   418 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   419 0000000F ????                    .BPB_HEADS:		resw	1
   420 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   421 00000013 ????                    			resw	1
   422 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   423 00000017 ????                    			resw	1
   424 00000019 ????????????            			resb	6	; NOTE:  many times these
   425                                  ;					; 	 6 bytes are omitted
   426                                  ;					;	 when BPB manipulations
   427                                  ;					;	 are performed!
   428                                  .size:
   429                                  endstruc
   430                                  
   431                                  struc A_DEVICEPARAMETERS
   432 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   433 00000001 ??                      .DP_DEVICETYPE:		resb	1
   434 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   435 00000004 ????                    .DP_CYLINDERS:		resw	1
   436 00000006 ??                      .DP_MEDIATYPE:		resb	1
   437 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   438 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   439 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   440                                  endstruc
   441                                  
   442                                  ; ----------------------------------------------------------------------
   443                                  ; Memory arena structure
   444                                  struc ARENA
   445 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
   446 00000001 ????                    .OWNER:		resw 1		; owner of arena item
   447 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
   448                                  endstruc
   449                                  
   450                                  ; ----------------------------------------------------------------------
   451                                  ;
   452                                  ; Process data block (otherwise known as program header)
   453                                  ;
   454                                  
   455                                  FILPERPROC	EQU     20
   456                                  
   457                                  struc PDB	; Process_data_block
   458 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   459 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   460 00000004 ??                                      resb 1
   461 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   462 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   463 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   464 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   465 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   466 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   467 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   468 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   469 00000032 ????                    .JFN_LENGTH:	resw 1 ; 25/03/18 ; number of handles allowed
   470 00000034 ????????                .JFN_POINTER:	resd 1 ; 25/03/18 ; pointer to JFN table
   471 00000038 ????????                .NEXT_PDB:	resd 1 ; 25/03/18 ; pointer to nested PDB's
   472 0000003C <res 14h>               .PAD1:		resb 20 ; 25/03/2018
   473 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   474 00000055 ??????????????          .PAD2:		resb 7 ; 25/03/2018
   475                                  endstruc
   476                                  
   477                                  ; ----------------------------------------------------------------------
   478                                  ; <system call definitions>
   479                                  
   480                                  ABORT                           EQU 0   ;  0      0
   481                                  STD_CON_INPUT                   EQU 1   ;  1      1
   482                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
   483                                  STD_AUX_INPUT                   EQU 3   ;  3      3
   484                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
   485                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
   486                                  RAW_CON_IO                      EQU 6   ;  6      6
   487                                  RAW_CON_INPUT                   EQU 7   ;  7      7
   488                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
   489                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
   490                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
   491                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
   492                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
   493                                  DISK_RESET                      EQU 13  ; 13      D
   494                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
   495                                  FCB_OPEN                        EQU 15  ; 15      F
   496                                  FCB_CLOSE                       EQU 16  ; 16     10
   497                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
   498                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
   499                                  FCB_DELETE                      EQU 19  ; 19     13
   500                                  FCB_SEQ_READ                    EQU 20  ; 20     14
   501                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
   502                                  FCB_CREATE                      EQU 22  ; 22     16
   503                                  FCB_RENAME                      EQU 23  ; 23     17
   504                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
   505                                  SET_DMA                         EQU 26  ; 26     1A
   506                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
   507                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
   508                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
   509                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
   510                                  GET_FCB_POSITION                EQU 36  ; 36     24
   511                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
   512                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
   513                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
   514                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
   515                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
   516                                  GET_DATE                        EQU 42  ; 42     2A
   517                                  SET_DATE                        EQU 43  ; 43     2B
   518                                  GET_TIME                        EQU 44  ; 44     2C
   519                                  SET_TIME                        EQU 45  ; 45     2D
   520                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
   521                                  ; Extended functionality group
   522                                  GET_DMA                         EQU 47  ; 47     2F
   523                                  GET_VERSION                     EQU 48  ; 48     30
   524                                  KEEP_PROCESS                    EQU 49  ; 49     31
   525                                  GET_DPB                         EQU 50  ; 50     32
   526                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
   527                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
   528                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
   529                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
   530                                  CHAR_OPER                       EQU 55  ; 55     37
   531                                  INTERNATIONAL                   EQU 56  ; 56     38
   532                                  ; XENIX CALLS
   533                                  ;   Directory Group
   534                                  MKDIR                           EQU 57  ; 57     39
   535                                  RMDIR                           EQU 58  ; 58     3A
   536                                  CHDIR                           EQU 59  ; 59     3B
   537                                  ;   File Group
   538                                  CREAT                           EQU 60  ; 60     3C
   539                                  OPEN                            EQU 61  ; 61     3D
   540                                  CLOSE                           EQU 62  ; 62     3E
   541                                  READ                            EQU 63  ; 63     3F
   542                                  WRITE                           EQU 64  ; 64     40
   543                                  UNLINK                          EQU 65  ; 65     41
   544                                  LSEEK                           EQU 66  ; 66     42
   545                                  CHMOD                           EQU 67  ; 67     43
   546                                  IOCTL                           EQU 68  ; 68     44
   547                                  XDUP                            EQU 69  ; 69     45
   548                                  XDUP2                           EQU 70  ; 70     46
   549                                  CURRENT_DIR                     EQU 71  ; 71     47
   550                                  ;    Memory Group
   551                                  ALLOC                           EQU 72  ; 72     48
   552                                  DEALLOC                         EQU 73  ; 73     49
   553                                  SETBLOCK                        EQU 74  ; 74     4A
   554                                  ;    Process Group
   555                                  EXEC                            EQU 75  ; 75     4B
   556                                  EXIT                            EQU 76  ; 76     4C
   557                                  _WAIT				EQU 77  ; 77     4D
   558                                  FIND_FIRST                      EQU 78  ; 78     4E
   559                                  ;   Special Group
   560                                  FIND_NEXT                       EQU 79  ; 79     4F
   561                                  ; SPECIAL SYSTEM GROUP
   562                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
   563                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
   564                                  GET_IN_VARS                     EQU 82  ; 82     52
   565                                  SETDPB                          EQU 83  ; 83     53
   566                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
   567                                  DUP_PDB                         EQU 85  ; 85     55
   568                                  RENAME                          EQU 86  ; 86     56
   569                                  FILE_TIMES                      EQU 87  ; 87     57
   570                                  
   571                                  ; ----------------------------------------------------------------------
   572                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
   573                                  ; ----------------------------------------------------------------------
   574                                  
   575                                  ;;	IF	STACKSW
   576                                  
   577                                  ;;
   578                                  ;; Internal Stack Parameters
   579                                  ;EntrySize		equ	8
   580                                  ;
   581                                  ;MinCount		equ	8
   582                                  ;DefaultCount		equ	9
   583                                  ;MaxCount		equ	64
   584                                  ;
   585                                  ;MinSize 		equ	32
   586                                  ;DefaultSize		equ	128
   587                                  ;MaxSize 		equ	512
   588                                  
   589                                  ;;	ENDIF
   590                                  
   591                                  
   592                                  ; ----------------------------------------------------------------------
   593                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
   594                                  ; ----------------------------------------------------------------------
   595                                  					  ;;Rev 3.30 Modification
   596                                  ; ROM BIOS CALL PACKET STRUCTURES					  
   597                                  									  
   598                                  ;*******************************					  
   599                                  ;System Service call ( Int 15h )					  
   600                                  ;*******************************					  
   601                                  ;Function AH = 0C0h, Return system configuration			  
   602                                  ;For PC and PCJR on return:						  
   603                                  ;	(AH)	= 80h							  
   604                                  ;	(CY)	= 1							  
   605                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
   606                                  ;	(AH)	= 86h							  
   607                                  ;	(CY)	= 1							  
   608                                  ;For all others:							  
   609                                  ;	(AH)	= 0							  
   610                                  ;	(CY)	= 0							  
   611                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
   612                                  ; System descriptor :							  
   613                                  ;	DW	xxxx		length of descriptor in bytes,		  
   614                                  ;				minimum length = 8			  
   615                                  ;	DB	xx		model byte				  
   616                                  ;				0FFh	= PC				  
   617                                  ;				0FEh	= PC/XT, Portable		  
   618                                  ;				0FDh	= PC/JR 			  
   619                                  ;				0FCh	= PC/AT				  
   620                                  ;				0F9h	= Convertable			  
   621                                  ;				0F8h	= Model 80			  
   622                                  ;				0E0 thru 0EFh = reserved		  
   623                                  ;									  
   624                                  ;	DB	xx		secondary model byte			  
   625                                  ;				000h	= PC1				  
   626                                  ;				000h	= PC/XT, Portable		  
   627                                  ;				000h	= PC/JR 			  
   628                                  ;				000h	= PC/AT 			  
   629                                  ;				001h	= PC/AT Model 339		  
   630                                  ;				003h	= PC/RT				  
   631                                  ;				000h	= Convertable			  
   632                                  ;									  
   633                                  ;	DB	xx		bios revision level			  
   634                                  ;				00 for first release, subsequent release  
   635                                  ;				of code with same model byte and	  
   636                                  ;				secondary model byte require revison level
   637                                  ;				to increase by one.			  
   638                                  ;									  
   639                                  ;	DB	xx		feature information byte 1		  
   640                                  ;				X0000000 = 1, bios use DMA channel 3	  
   641                                  ;					 = 0, DMA channel 3 not used	  
   642                                  ;									  
   643                                  ;				0X000000 = 1, 2nd Interrupt chip present  
   644                                  ;					 = 0, 2nd Interrupt chip not present
   645                                  ;									  
   646                                  ;				00X00000 = 1, Real Time Clock present	  
   647                                  ;					 = 0, Real Time Clock not present 
   648                                  ;									  
   649                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
   650                                  ;						called in keyboard interrupt
   651                                  ;						(Int 09h).		  
   652                                  ;					 = 0, Keyboard escape sequence not
   653                                  ;						called. 		  
   654                                  ;				0000XXXX reserved			  
   655                                  ;									  
   656                                  ;	DB	xx		feature information byte 2 - reserved	  
   657                                  ;									  
   658                                  ;	DB	xx		feature information byte 2 - reserved	  
   659                                  ;									  
   660                                  ;	DB	xx		feature information byte 2 - reserved	  
   661                                  ;									  
   662                                  ;	DB	xx		feature information byte 2 - reserved	  
   663                                  ;									  
   664                                  									  
   665                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   666 00000000 ????                    .bios_SD_leng:		resw 1				  
   667 00000002 ??                      .bios_SD_modelbyte:	resb 1					  
   668                                  .bios_SD_scnd_modelbyte: 
   669 00000003 ??                      			resb 1					  
   670 00000004 ??                      			resb 1					  
   671 00000005 ??                      .bios_SD_featurebyte1:	resb 1					  
   672 00000006 ????????                			resb 4					  
   673                                  endstruc					  
   674                                  									  
   675                                  ;FeatureByte1	bit map equates 					  
   676                                  DMAchannel3		equ 10000000b					  
   677                                  ScndIntController	equ 01000000b					  
   678                                  RealTimeClock		equ 00100000b					  
   679                                  KeyEscapeSeq		equ 00010000b					  
   680                                  					;;End of Modification
   681                                  
   682                                  ; ----------------------------------------------------------------------
   683                                  ; SYSVAR.INC (MSDOS 3.3 - 24/07/1987) 	
   684                                  ; ----------------------------------------------------------------------
   685                                  ; 05/06/2018 - Retro DOS v3.0
   686                                  
   687                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
   688                                  struc SysInitVars
   689 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
   690 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
   691 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
   692 0000000C ????????                .SYSI_CON:    resd 1			; CON device
   693 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
   694 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
   695 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
   696 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
   697 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
   698 00000020 ??                      .SYSI_NUMIO:  resb 1			; Number of block devices
   699 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
   700 00000022 ????????                .SYSI_DEV:    resd 1			; device list
   701                                  .size:
   702                                  endstruc
   703                                  
   704                                  ;This is added for more information exchage between DOS, BIOS.
   705                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
   706                                  struc SysInitVars_Ext
   707 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
   708 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
   709                                  endstruc
   710                                  
   711                                  ; 09/06/2018
   712                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
   713                                  SYSI_DPB    equ	0
   714                                  SYSI_SFT    equ 4
   715                                  SYSI_CLOCK  equ 8
   716                                  SYSI_CON    equ 12
   717                                  SYSI_MAXSEC equ 16
   718                                  SYSI_BUF    equ 18 		
   719                                  SYSI_CDS    equ 22
   720                                  SYSI_FCB    equ 26
   721                                  SYSI_KEEP   equ 30
   722                                  SYSI_NUMIO  equ	32
   723                                  SYSI_NCDS   equ	33
   724                                  SYSI_DEV    equ 34
   725                                  
   726                                  ; ----------------------------------------------------------------------
   727                                  ; CURDIR.INC (MSDOS 3.3 - 24/07/1987) 	
   728                                  ; ----------------------------------------------------------------------
   729                                  ; 08/06/2018 - Retro DOS v3.0
   730                                  
   731                                  ;	SCCSID = @(#)curdir.asm	1.1 85/04/10
   732                                  ;BREAK <Current directory list structure>
   733                                  									  
   734                                  ; CDS items are used by the internal routines to store cluster numbers and
   735                                  ; network identifiers for each logical name.  The ID field is used dually,
   736                                  ; both as net ID and for a cluster number for local devices.  In the case
   737                                  ; of local devices, the cluster number will be -1 if there is a potential
   738                                  ; of the disk being changed or if the path must be recracked.  The END
   739                                  ; field is the location of the end of the definition.  No .. is allowed
   740                                  ; past this point							
   741                                  
   742                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
   743                                  TEMPLEN 	EQU	DIRSTRLEN*2
   744                                  
   745                                  struc 		curdir_list
   746 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
   747 00000043 ????                    .cdir_flags	resw	1		; various flags
   748 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
   749 00000049 ????                    .cdir_ID	resw	1		; cluster of current dir (net ID)
   750 0000004B ????                    		resw	1
   751 0000004D ????                    .cdir_usr_word	resw	1
   752 0000004F ????                    .cdir_end	resw	1		; end of assignment
   753                                  .size:
   754                                  endstruc
   755                                  
   756                                  curdirLen	EQU	curdir_list.size	; Needed for screwed up
   757                                  						; ASM87 which doesn't allow
   758                                  						; Size directive as a macro
   759                                  						; argument
   760                                  %define curdir_netID	dword [curdir_list.cdir_ID]
   761                                  
   762                                  ;Flag word masks
   763                                  curdir_isnet	EQU	1000000000000000B
   764                                  curdir_inuse	EQU	0100000000000000B
   765                                  curdir_splice	EQU	0010000000000000B
   766                                  curdir_local	EQU	0001000000000000B
   767                                  
   768                                  ; ----------------------------------------------------------------------
   769                                  ; SF.INC (MSDOS 3.3 - 24/07/1987) 	
   770                                  ; ----------------------------------------------------------------------
   771                                  ; 09/06/2018 - Retro DOS v3.0
   772                                  
   773                                  ;
   774                                  ; system file table
   775                                  ;
   776                                  
   777                                  struc	SF
   778 00000000 ????????                .SFLink:	resd	1
   779 00000004 ????                    .SFCount:	resw	1		; number of entries
   780 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
   781                                  .size:
   782                                  endstruc
   783                                  
   784                                  ;
   785                                  ; system file table entry
   786                                  ;
   787                                  
   788                                  struc	SF_ENTRY
   789 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
   790                                  					;   if FCB then ref count
   791 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
   792 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
   793 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
   794                                  					; Bit 15 = 1 if remote file
   795                                  					;	 = 0 if local file or device
   796                                  					; Bit 14 = 1 if date/time is not to be
   797                                  					;   set from clock at CLOSE.  Set by
   798                                  					;   FILETIMES and FCB_CLOSE.  Reset by
   799                                  					;   other reseters of the dirty bit
   800                                  					;   (WRITE)
   801                                  					; Bit 13 = Pipe bit (reserved)
   802                                  					;
   803                                  					; Bits 0-7 (old FCB_devid bits)
   804                                  					; If remote file or local file, bit
   805                                  					; 6=0 if dirty Device ID number, bits
   806                                  					; 0-5 if local file.
   807                                  					; bit 7=0 for local file, bit 7
   808                                  					;      =1 for local I/O device
   809                                  					; If local I/O device, bit 6=0 if EOF (input)
   810                                  					;		Bit 5=1 if Raw mode
   811                                  					;		Bit 0=1 if console input device
   812                                  					;		Bit 1=1 if console output device
   813                                  					;		Bit 2=1 if null device
   814                                  					;		Bit 3=1 if clock device
   815 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
   816                                  					; to device header if local device,
   817                                  					; points to net device header if
   818                                  					; remote
   819 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
   820 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
   821 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
   822 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
   823 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
   824                                  ;
   825                                  ; Starting here, the next 7 bytes may be used by the file system to store an
   826                                  ; ID
   827                                  ;
   828 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
   829 0000001B ????                    .sf_lstclus:	resw	1		; Last cluster accessed
   830 0000001D ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
   831 0000001F ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
   832                                  ;
   833                                  ; End of 7 bytes of file-system specific info.
   834                                  ;
   835 00000020 <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
   836                                  					; directory entry.  This is used by
   837                                  					; close to detect file deleted and
   838                                  					; disk changed errors.
   839                                  ; SHARING INFO
   840 0000002B ????????                .sf_chain:	resd	1		; link to next SF
   841 0000002F ????                    .sf_UID:	resw	1
   842 00000031 ????                    .sf_PID:	resw	1
   843 00000033 ????                    .sf_MFT:	resw	1
   844                                  .size:
   845                                  endstruc
   846                                  
   847                                  ; ----------------------------------------------------------------------
   848                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
   849                                  ; ----------------------------------------------------------------------
   850                                  ; 11/06/2018 - Retro DOS v3.0
   851                                  
   852                                  ;Equates for COUNTRY INFORMATION.
   853                                  SetCountryInfo		EQU	1	;country info
   854                                  SetUcase		EQU	2	;uppercase table
   855                                  SetLcase		EQU	3	;lowercase table (Reserved)
   856                                  SetUcaseFile		EQU	4	;uppercase file spec table
   857                                  SetFileList		EQU	5	;valid file character list
   858                                  SetCollate		EQU	6	;collating sequence
   859                                  SetDBCS 		EQU	7	;double byte character set
   860                                  SetALL			EQU	-1	;all the entries
   861                                  
   862                                  ;DOS country and code page information table structure.
   863                                  ;Internally, IBMDOS gives a pointer to this table.
   864                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
   865                                  ;this structure.
   866                                  
   867                                  struc country_cdpg_info ; DOS_country_cdpg_info
   868 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
   869 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
   870 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
   871 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
   872 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
   873 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
   874                                  
   875 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
   876 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
   877                                  
   878 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
   879 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
   880                                  
   881 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
   882 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
   883                                  
   884 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
   885 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
   886 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
   887 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
   888 00000067 ????                    .ccDFormat:		resw	1	;date format
   889 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
   890                                  					;5 byte of (currency symbol+0)
   891 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
   892 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
   893 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
   894 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
   895 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
   896 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
   897 00000078 ??                      .ccTFormat:		resb	1	;time format
   898 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
   899 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
   900 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
   901                                  .size:
   902                                  endstruc
   903                                  
   904                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
   905                                  
   906                                  ; ----------------------------------------------------------------------
   907                                  
   908                                          ;INCLUDE DOSSYM.ASM
   909                                          ;INCLUDE DEVSYM.ASM
   910                                  
   911                                          ;IF      NOT IBM
   912                                          ;IF      NOT IBMJAPVER
   913                                          ;EXTRN   RE_INIT:FAR
   914                                          ;ENDIF
   915                                          ;ENDIF
   916                                  
   917                                  ;SYSINITSEG      SEGMENT PUBLIC 'SYSTEM_INIT'
   918                                  
   919                                  	;ASSUME  CS:SYSINITSEG,DS:NOTHING,ES:NOTHING,SS:NOTHING
   920                                  
   921                                  SYSINITSEG:
   922                                  
   923                                  	[org 0]
   924                                  
   925                                  	; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
   926                                  
   927                                  	;EXTRN	BADCOM:BYTE					
   928                                  	;EXTRN	SYSSIZE:BYTE					
   929                                  	;EXTRN	CONDEV:BYTE,AUXDEV:BYTE,PRNDEV:BYTE,COMMND:BYTE
   930                                  	;EXTRN	DeviceParameters:byte
   931                                  				
   932                                  	;EXTRN	INT24:NEAR,MEM_ERR:NEAR
   933                                  	;EXTRN	DOCONF:NEAR
   934                                  
   935                                          ;PUBLIC  CURRENT_DOS_LOCATION
   936                                          ;PUBLIC  FINAL_DOS_LOCATION
   937                                          ;PUBLIC  DEVICE_LIST
   938                                          ;PUBLIC  MEMORY_SIZE
   939                                          ;PUBLIC  DEFAULT_DRIVE
   940                                          ;PUBLIC  BUFFERS
   941                                          ;PUBLIC  FILES
   942                                          ;PUBLIC  SYSINIT
   943                                  	;PUBLIC	 CNTRYFILEHANDLE
   944                                  	;PUBLIC	 COMMAND_LINE
   945                                  
   946                                  ; 29/06/2019 - Retro DOS v3.1
   947                                  
   948                                  ; ----------------------------------------------------------------------
   949                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
   950                                  ; ----------------------------------------------------------------------
   951                                  ; 21/03/2019 - Retro DOS v4.0
   952                                  
   953                                  true	equ	0FFFFh
   954                                  false	equ	0
   955                                  cr	equ	13
   956                                  lf	equ	10
   957                                  tab	equ	9
   958                                  
   959                                  multMULT		equ	4Ah
   960                                  multMULTGETHMAPTR	equ	1
   961                                  multMULTALLOCHMA	equ	2
   962                                  
   963                                  ;NOEXEC  equ     FALSE
   964                                  
   965                                  ;stacksw    equ	true	;include switchable hardware stacks
   966                                  ;mycds_size equ	88	;size of curdir_list. if it is not
   967                                  			;the same, then will generate compile error.
   968                                  
   969                                  EntrySize   equ     8
   970                                  
   971                                  MinCount    equ     8
   972                                  DefaultCount equ    9
   973                                  MaxCount    equ     64
   974                                  
   975                                  MinSize     equ     32
   976                                  DefaultSize equ     128
   977                                  MaxSize     equ     512
   978                                  
   979                                  ;%define allocbyte	byte [es:bp+0]  ; byte [es:bp]
   980                                  ;%define intlevel	byte [es:bp+1]
   981                                  ;%define savedsp 	word [es:bp+2]
   982                                  ;%define savedss 	word [es:bp+4]
   983                                  ;%define newsp		word [es:bp+6]
   984                                  
   985                                  allocbyte   equ     0
   986                                  intlevel    equ     1
   987                                  savedsp     equ     2
   988                                  savedss     equ     4
   989                                  newsp       equ     6
   990                                  
   991                                  free	    equ     0
   992                                  allocated   equ     1
   993                                  overflowed  equ     2
   994                                  clobbered   equ     3
   995                                  
   996                                  ;---------------------------------------
   997                                  ; external variable defined in ibmbio module for multi-track
   998                                  
   999                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
  1000                                  			  ; it on after handling config.sys file as a
  1001                                  			  ; default value,if multrk_flag = multrk_off1.
  1002                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
  1003                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
  1004                                  
  1005                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
  1006                                  
  1007                                  SYSINIT$:
  1008                                  	;IF	STACKSW 
  1009                                  	; include MSSTACK.INC	;Main stack program and data definitions
  1010                                  	; include STKMES.INC	;Fatal stack error message
  1011                                  	;   public Endstackcode
  1012                                  ;Endstackcode	label byte
  1013                                  	;ENDIF
  1014                                  
  1015                                  ; 05/07/2018
  1016                                  ; ----------------------------------------------------------------------
  1017                                  ; 04/06/2018 - Retro DOS v3.0
  1018                                  
  1019                                  ;	MSStack.inc
  1020                                  ;
  1021                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
  1022                                  ;	should follow the standard Interrupt Sharing Scheme which has
  1023                                  ;	a standard header structure.
  1024                                  ;	Fyi, the following shows the relations between
  1025                                  ;	the interrupt vector and interrupt level.
  1026                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
  1027                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
  1028                                  ;	MSSTACK module modifies the following interrupt vectors
  1029                                  ;	to meet the standard Interrupt Sharing standard;
  1030                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
  1031                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
  1032                                  ;	should be initialized to indicat whether this interrupt handler is
  1033                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
  1034                                  ;	program header is initialized in STKINIT.INC module.
  1035                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
  1036                                  ;
  1037                                  
  1038                                  ;  User specifies the number of stack elements - default = 9
  1039                                  ;						 minimum = 8
  1040                                  ;						 maximum = 64
  1041                                  ;
  1042                                  ;  Intercepts Asynchronous Hardware Interrupts only
  1043                                  ;
  1044                                  ;  Picks a stack from pool of stacks and switches to it
  1045                                  ;
  1046                                  ;  Calls the previously saved interrupt vector after pushing flags
  1047                                  ;
  1048                                  ;  On return, returns the stack to the stack pool
  1049                                  ;
  1050                                  
  1051                                  ; This is a modification of STACKS:
  1052                                  ; 1. To fix a bug which was causing the program to take up too much space.
  1053                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
  1054                                  ;    . Clobbers the stack that got too big instead of innocent stack
  1055                                  ;    . Allows system to work if the only stack that got too big was the most
  1056                                  ;      deeply nested one
  1057                                  ; 3. Disables NMI interrupts while setting the NMI vector.
  1058                                  ; 4. Does not intercept any interupts on a PCjr.
  1059                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
  1060                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
  1061                                  
  1062                                  		;EVEN
  1063                                  ;align 2
  1064 00000000 0000                    		dw	0	; spare field but leave these in order
  1065 00000002 0000                    StackCount:	dw	0
  1066 00000004 0000                    StackAt: 	dw	0
  1067 00000006 0000                    StackSize:	dw	0
  1068 00000008 0000                    Stacks:		dw	0
  1069 0000000A 0000                    		dw	0
  1070                                  
  1071 0000000C [0800]                  FirstEntry:	dw	Stacks
  1072 0000000E [4800]                  LastEntry:	dw	Stacks+(DefaultCount*EntrySize)-EntrySize
  1073 00000010 [4800]                  NextEntry:	dw	Stacks+(DefaultCount*EntrySize)-EntrySize
  1074                                  
  1075                                  ;***********************************************************************
  1076                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
  1077                                  
  1078                                  ; ----------------------------------------------------------------------
  1079                                  
  1080 00000012 00000000                old02:	dd	0
  1081                                  
  1082                                  int02:
  1083                                  
  1084                                  ; *********************************************************************
  1085                                  ;
  1086                                  ; this is special support for the pc convertible / nmi handler
  1087                                  ;
  1088                                  ;	on the pc convertible, there is a situation where an nmi can be 
  1089                                  ;	caused by using the "out" instructions to certain ports. when this
  1090                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
  1091                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
  1092                                  ;	includes other type of interrupts (hardware and software), and
  1093                                  ;	also includes other type of nmi's. when any nmi has occured,
  1094                                  ;	no other interrupt (hardware, software or nmi) can occur until
  1095                                  ;	the software takes specific steps to allow further interrupting.
  1096                                  ;
  1097                                  ;	for pc convertible, the situation where the nmi is generated by the
  1098                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
  1099                                  ;	otherwords, it is actually a "restartable exception". in this
  1100                                  ;	case, the software handler must be able to get to the stack in
  1101                                  ;	order to figure out what instruction caused the problem, where
  1102                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
  1103                                  ;	we will not switch stacks in this situation. this situation is
  1104                                  ;	detected by interrogating port 62h, and checking for a bit value
  1105                                  ;	of 80h. if set, *****do not switch stacks*****.
  1106                                  ;
  1107                                  ; *********************************************************************
  1108                                  
  1109 00000016 50                      	push	ax
  1110 00000017 06                      	push	es
  1111 00000018 B800F0                  	mov	ax,0F000h
  1112 0000001B 8EC0                    	mov	es,ax
  1113                                  	; 26/05/2019
  1114 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ;check if convertible
  1115 00000023 07                      	pop	es
  1116 00000024 750C                    	jne	short normal02
  1117                                  
  1118 00000026 E462                    	in	al,62h
  1119 00000028 A880                    	test	al,80h
  1120 0000002A 7406                    	jz	short normal02
  1121                                  
  1122                                  special02:
  1123 0000002C 58                      	pop	ax
  1124 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
  1125                                  
  1126                                  normal02:
  1127 00000032 58                      	pop	ax
  1128 00000033 E81101                  	call	do_int_stacks
  1129 00000036 [1200]                  	dw	old02
  1130                                  
  1131                                  ; ----------------------------------------------------------------------
  1132                                  
  1133 00000038 00000000                old08:	dd	0
  1134                                  
  1135                                  int08:
  1136 0000003C E80801                  	call	do_int_stacks
  1137 0000003F [3800]                  	dw	old08
  1138                                  
  1139                                  ; ----------------------------------------------------------------------
  1140                                  
  1141 00000041 00000000                old09:	dd	0
  1142                                  
  1143                                  int09:
  1144                                  
  1145                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
  1146                                  ; as its first instruction for compatibility reasons
  1147                                  
  1148 00000045 EB02                    	jmp	short keyboard_lbl
  1149 00000047 90                      	nop
  1150 00000048 00                      	db	0
  1151                                  
  1152                                  keyboard_lbl:
  1153 00000049 E8FB00                  	call	do_int_stacks
  1154 0000004C [4100]                  	dw	old09
  1155                                  
  1156                                  ; ----------------------------------------------------------------------
  1157                                  
  1158 0000004E 00000000                old70:	dd	0
  1159                                  
  1160                                  int70:
  1161 00000052 E8F200                  	call	do_int_stacks
  1162 00000055 [4E00]                  	dw	old70
  1163                                  
  1164                                  ; ----------------------------------------------------------------------
  1165                                  
  1166                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
  1167                                  ;public	int&a
  1168                                  ;public	old&a
  1169                                  ;public	firstflag&a
  1170                                  ;int&a	proc	far
  1171                                  ;	jmp	short entry_int&a&_stk
  1172                                  ;old&a	dd	  0		;forward pointer
  1173                                  ;	dw	  424bh 	;compatible signature for int. sharing
  1174                                  ;firstflag&a db   0		;the firstly hooked.
  1175                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
  1176                                  ;	db	7 dup (0)	;reserved for future.
  1177                                  ;entry_int&a&_stk:
  1178                                  ;	call	do_int_stacks
  1179                                  ;	dw	old&a
  1180                                  ;intret_&a:
  1181                                  ;	iret
  1182                                  ;int&a	endp
  1183                                  ;	endm
  1184                                  
  1185                                  ; ----------------------------------------------------------------------
  1186                                  
  1187                                  int0A:
  1188 00000057 EB10                    	jmp	short entry_int0A_stk
  1189 00000059 00000000                old0A:	dd	0	
  1190 0000005D 4B42                    	dw	424Bh
  1191                                  firstflag0A:
  1192 0000005F 00                      	db	0
  1193 00000060 EB0C                    	jmp	short intret_0A
  1194 00000062 00<rep 7h>              	times	7 db 0
  1195                                  
  1196                                  entry_int0A_stk:
  1197 00000069 E8DB00                  	call	do_int_stacks
  1198 0000006C [5900]                  	dw	old0A
  1199                                  intret_0A:
  1200 0000006E CF                      	iret
  1201                                  
  1202                                  ; ----------------------------------------------------------------------
  1203                                  
  1204                                  int0B:
  1205 0000006F EB10                    	jmp	short entry_int0B_stk
  1206 00000071 00000000                old0B:	dd	0	
  1207 00000075 4B42                    	dw	424Bh
  1208                                  firstflag0B:
  1209 00000077 00                      	db	0
  1210 00000078 EB0C                    	jmp	short intret_0B
  1211 0000007A 00<rep 7h>              	times	7 db 0
  1212                                  
  1213                                  entry_int0B_stk:
  1214 00000081 E8C300                  	call	do_int_stacks
  1215 00000084 [7100]                  	dw	old0B
  1216                                  intret_0B:
  1217 00000086 CF                      	iret
  1218                                  
  1219                                  ; ----------------------------------------------------------------------
  1220                                  
  1221                                  int0C:
  1222 00000087 EB10                    	jmp	short entry_int0C_stk
  1223 00000089 00000000                old0C:	dd	0	
  1224 0000008D 4B42                    	dw	424Bh
  1225                                  firstflag0C:
  1226 0000008F 00                      	db	0
  1227 00000090 EB0C                    	jmp	short intret_0C
  1228 00000092 00<rep 7h>              	times	7 db 0
  1229                                  
  1230                                  entry_int0C_stk:
  1231 00000099 E8AB00                  	call	do_int_stacks
  1232 0000009C [8900]                  	dw	old0C
  1233                                  intret_0C:
  1234 0000009E CF                      	iret
  1235                                  
  1236                                  ; ----------------------------------------------------------------------
  1237                                  
  1238                                  int0D:
  1239 0000009F EB10                    	jmp	short entry_int0D_stk
  1240 000000A1 00000000                old0D:	dd	0	
  1241 000000A5 4B42                    	dw	424Bh
  1242                                  firstflag0D:
  1243 000000A7 00                      	db	0
  1244 000000A8 EB0C                    	jmp	short intret_0D
  1245 000000AA 00<rep 7h>              	times	7 db 0
  1246                                  
  1247                                  entry_int0D_stk:
  1248 000000B1 E89300                  	call	do_int_stacks
  1249 000000B4 [A100]                  	dw	old0D
  1250                                  intret_0D:
  1251 000000B6 CF                      	iret
  1252                                  
  1253                                  ; ----------------------------------------------------------------------
  1254                                  
  1255                                  int0E:
  1256 000000B7 EB10                    	jmp	short entry_int0E_stk
  1257 000000B9 00000000                old0E:	dd	0	
  1258 000000BD 4B42                    	dw	424Bh
  1259                                  firstflag0E:
  1260 000000BF 00                      	db	0
  1261 000000C0 EB0C                    	jmp	short intret_0E
  1262 000000C2 00<rep 7h>              	times	7 db 0
  1263                                  
  1264                                  entry_int0E_stk:
  1265 000000C9 E87B00                  	call	do_int_stacks
  1266 000000CC [B900]                  	dw	old0E
  1267                                  intret_0E:
  1268 000000CE CF                      	iret
  1269                                  
  1270                                  ; ----------------------------------------------------------------------
  1271                                  
  1272                                  int72:
  1273 000000CF EB10                    	jmp	short entry_int72_stk
  1274 000000D1 00000000                old72:	dd	0	
  1275 000000D5 4B42                    	dw	424Bh
  1276                                  firstflag72:
  1277 000000D7 00                      	db	0
  1278 000000D8 EB0C                    	jmp	short intret_72
  1279 000000DA 00<rep 7h>              	times	7 db 0
  1280                                  
  1281                                  entry_int72_stk:
  1282 000000E1 E86300                  	call	do_int_stacks
  1283 000000E4 [D100]                  	dw	old72
  1284                                  intret_72:
  1285 000000E6 CF                      	iret
  1286                                  
  1287                                  ; ----------------------------------------------------------------------
  1288                                  
  1289                                  int73:
  1290 000000E7 EB10                    	jmp	short entry_int73_stk
  1291 000000E9 00000000                old73:	dd	0	
  1292 000000ED 4B42                    	dw	424Bh
  1293                                  firstflag73:
  1294 000000EF 00                      	db	0
  1295 000000F0 EB0C                    	jmp	short intret_73
  1296 000000F2 00<rep 7h>              	times	7 db 0
  1297                                  
  1298                                  entry_int73_stk:
  1299 000000F9 E84B00                  	call	do_int_stacks
  1300 000000FC [E900]                  	dw	old73
  1301                                  intret_73:
  1302 000000FE CF                      	iret
  1303                                  
  1304                                  ; ----------------------------------------------------------------------
  1305                                  
  1306                                  int74:
  1307 000000FF EB10                    	jmp	short entry_int74_stk
  1308 00000101 00000000                old74:	dd	0	
  1309 00000105 4B42                    	dw	424Bh
  1310                                  firstflag74:
  1311 00000107 00                      	db	0
  1312 00000108 EB0C                    	jmp	short intret_74
  1313 0000010A 00<rep 7h>              	times	7 db 0
  1314                                  
  1315                                  entry_int74_stk:
  1316 00000111 E83300                  	call	do_int_stacks
  1317 00000114 [0101]                  	dw	old74
  1318                                  intret_74:
  1319 00000116 CF                      	iret
  1320                                  
  1321                                  ; ----------------------------------------------------------------------
  1322                                  
  1323                                  int76:
  1324 00000117 EB10                    	jmp	short entry_int76_stk
  1325 00000119 00000000                old76:	dd	0	
  1326 0000011D 4B42                    	dw	424Bh
  1327                                  firstflag76:
  1328 0000011F 00                      	db	0
  1329 00000120 EB0C                    	jmp	short intret_76
  1330 00000122 00<rep 7h>              	times	7 db 0
  1331                                  
  1332                                  entry_int76_stk:
  1333 00000129 E81B00                  	call	do_int_stacks
  1334 0000012C [1901]                  	dw	old76
  1335                                  intret_76:
  1336 0000012E CF                      	iret
  1337                                  
  1338                                  ; ----------------------------------------------------------------------
  1339                                  
  1340                                  int77:
  1341 0000012F EB10                    	jmp	short entry_int77_stk
  1342 00000131 00000000                old77:	dd	0	
  1343 00000135 4B42                    	dw	424Bh
  1344                                  firstflag77:
  1345 00000137 00                      	db	0
  1346 00000138 EB0C                    	jmp	short intret_77
  1347 0000013A 00<rep 7h>              	times	7 db 0
  1348                                  
  1349                                  entry_int77_stk:
  1350 00000141 E80300                  	call	do_int_stacks
  1351 00000144 [3101]                  	dw	old77
  1352                                  intret_77:
  1353 00000146 CF                      	iret
  1354                                  
  1355                                  ; ----------------------------------------------------------------------
  1356                                  
  1357                                  ;********************************************************************
  1358                                  ;common routines
  1359                                  ;********************************************************************
  1360                                  
  1361                                  ; do interrupt stack switching. the fake return address holds
  1362                                  ; a pointer to the far-pointer of the actual interrupt
  1363                                  ; service routine
  1364                                  
  1365                                  ; 21/03/2019 - Retro DOS v4.0
  1366                                  
  1367                                  ;allocbyte   equ 0
  1368                                  ;intlevel    equ 1
  1369                                  ;savedsp     equ 2
  1370                                  ;savedss     equ 4
  1371                                  ;newsp       equ 6
  1372                                  
  1373                                  do_int_stacks:
  1374 00000147 50                      	push	ax
  1375 00000148 55                      	push	bp
  1376 00000149 06                      	push	es
  1377 0000014A 2E8E06[0A00]            	mov	es,[cs:Stacks+2]	; Get segment of stacks
  1378 0000014F 2E8B2E[1000]            	mov	bp,[cs:NextEntry]	; get most likely candidate
  1379 00000154 B001                    	mov	al,allocated ; 1
  1380                                  	;xchg	[es:bp+allocbyte],al 
  1381 00000156 26864600                	xchg	[es:bp],al		; grab the entry
  1382                                  
  1383 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
  1384 0000015C 7551                    	jne	short notfree02
  1385                                  
  1386 0000015E 2E832E[1000]08          	sub	word [cs:NextEntry],EntrySize ; set for next interrupt
  1387                                  
  1388                                  found02:
  1389 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
  1390 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
  1391                                  
  1392 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
  1393                                  
  1394 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
  1395 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
  1396 00000176 7544                    	jne	short foundbad02
  1397                                  
  1398 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
  1399 0000017A 8EC5                    	mov	es,bp
  1400 0000017C 89E5                    	mov	bp,sp
  1401 0000017E 8B6E06                  	mov	bp,[bp+6]
  1402 00000181 8ED0                    	mov	ss,ax
  1403 00000183 8CC4                    	mov	sp,es
  1404 00000185 8EC0                    	mov	es,ax
  1405 00000187 2E8B6E00                	mov	bp,[cs:bp]
  1406                                  
  1407 0000018B 9C                      	pushf				; go execute the real interrupt handler
  1408 0000018C 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
  1409                                  
  1410 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
  1411 00000192 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
  1412 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
  1413 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
  1414                                  
  1415                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
  1416 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
  1417 000001A3 2E892E[1000]            	mov	[cs:NextEntry],bp	; setup to use next time
  1418                                  
  1419 000001A8 07                      	pop	es
  1420 000001A9 5D                      	pop	bp			; saved on entry
  1421 000001AA 58                      	pop	ax			; saved on entry
  1422 000001AB 83C402                  	add	sp,2
  1423 000001AE CF                      	iret				; done with this interrupt
  1424                                  
  1425                                  notfree02:
  1426 000001AF 3C01                    	cmp	al,allocated ; 1	; error flag
  1427 000001B1 7404                    	je	short findnext02	;  no, continue
  1428                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
  1429 000001B3 26864600                	xchg	[es:bp],al
  1430                                  
  1431                                  findnext02:
  1432 000001B7 E81200                  	call	longpath
  1433 000001BA EBA8                    	jmp	short found02
  1434                                  
  1435                                  foundbad02:
  1436 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:FirstEntry]
  1437 000001C1 72F4                    	jc	short findnext02
  1438 000001C3 89C5                    	mov	bp,ax			; flag this entry
  1439                                  	;mov	byte [es:bp+allocbyte],clobbered
  1440 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
  1441 000001CA EBEB                    	jmp	short findnext02	; keep looking
  1442                                  
  1443                                  ; ----------------------------------------------------------------------
  1444                                  
  1445                                  ; Common routines
  1446                                  
  1447                                  longpath:
  1448                                  	; 21/03/2019
  1449 000001CC 2E8B2E[0E00]            	mov	bp,[cs:LastEntry]	; start with last entry in table
  1450                                  lploopp:
  1451                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
  1452 000001D1 26807E0000              	cmp	byte [es:bp],free
  1453 000001D6 7512                    	jne	short inuse		;  no, try next one
  1454                                  
  1455 000001D8 B001                    	mov	al,allocated
  1456                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
  1457 000001DA 26864600                	xchg	[es:bp],al
  1458 000001DE 3C00                    	cmp	al,free 		; is it still free?
  1459 000001E0 7414                    	je	short found		;  yes, go use it
  1460                                  
  1461 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
  1462 000001E4 7404                    	je	short inuse		;  no, check the next one
  1463                                  
  1464                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
  1465 000001E6 26884600                	mov	[es:bp],al
  1466                                  inuse:
  1467 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:FirstEntry]
  1468 000001EF 7406                    	je	short fatal
  1469 000001F1 83ED08                  	sub	bp,EntrySize
  1470 000001F4 EBDB                    	jmp	short lploopp
  1471                                  found:
  1472 000001F6 C3                      	retn
  1473                                  fatal:
  1474                                  	; 27/05/2019
  1475                                  	;push	ds
  1476 000001F7 B800F0                  	mov	ax,0F000h		;look at the model byte
  1477 000001FA 8ED8                    	mov	ds,ax
  1478 000001FC 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
  1479                                  	;pop	ds
  1480 00000201 7504                    	jne	short skip_nmis
  1481                                  
  1482 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
  1483 00000205 E672                    	out	72h,al
  1484                                  
  1485                                  skip_nmis:
  1486 00000207 FA                      	cli				; disable and mask
  1487 00000208 B0FF                    	mov	al,0FFh			;   all other ints
  1488 0000020A E621                    	out	021h,al
  1489 0000020C E6A1                    	out	0A1h,al
  1490                                  	
  1491                                  	; 29/06/2019 - Retro DOS v3.1
  1492 0000020E 8CCE                    	mov	si,cs
  1493 00000210 8EDE                    	mov	ds,si
  1494                                  	
  1495 00000212 BE[2402]                	mov	si,fatal_msg
  1496                                  fatal_loop:
  1497 00000215 AC                      	lodsb
  1498 00000216 3C24                    	cmp	al,'$'
  1499 00000218 7408                    	je	short fatal_done
  1500                                  
  1501 0000021A B307                    	mov	bl,7
  1502 0000021C B40E                    	mov	ah,14
  1503 0000021E CD10                    	int	10h			; whoops, this enables ints
  1504 00000220 EBF3                    	jmp	short fatal_loop
  1505                                  
  1506                                  fatal_done:
  1507 00000222 EBFE                    	jmp	short fatal_done
  1508                                  
  1509                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
  1510                                  ; ----------------------------------------------------------------------
  1511                                  ;	include msbio.cl5		; fatal stack error message
  1512                                  
  1513                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
  1514                                  
  1515                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
  1516                                  ; ----------------------------------------------------------------------
  1517                                  ; 04/06/2018 - Retro DOS v3.0
  1518                                  
  1519                                  fatal_msg:
  1520 00000224 0D0A                    	db	0Dh,0Ah
  1521 00000226 070D0A                  	db	7,0Dh,0Ah
  1522 00000229 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
  1522 00000232 737461636B206F7665-
  1522 0000023B 72666C6F770D0A     
  1523 00000242 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
  1523 0000024B 6C7465640D0A24     
  1524                                  
  1525                                  ;align 16
  1526                                  
  1527                                  	;times	07F0h-252h db 0 ; 29/06/2019
  1528                                  
  1529                                  endstackcode:
  1530                                  
  1531                                  	;db	0 ; 29/06/2019 - Retro DOS v3.1
  1532                                  
  1533 00000252 90<rep Eh>              align 16
  1534                                  
  1535                                  ; ----------------------------------------------------------------------
  1536                                  ; SYINIT1.ASM (MSDOS 3.3) - SYSINIT.ASM (MSDOS 2.0)
  1537                                  ; ----------------------------------------------------------------------
  1538                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
  1539                                  
  1540                                  SYSINIT:
  1541 00000260 E90501                          JMP	GOINIT
  1542                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
  1543                                  ;align 4
  1544 00000263 90                      align 2  ; 04/07/2019
  1545                                  DOSINFO: 
  1546 00000264 0000                    	dw	0
  1547                                  CURRENT_DOS_LOCATION: 
  1548 00000266 0000                    	dw	0
  1549                                  MSDOS:	
  1550                                  ENTRY_POINT:
  1551 00000268 0000                    	dw	0
  1552                                  FINAL_DOS_LOCATION:
  1553 0000026A 0000                    	dw	0
  1554                                  DEVICE_LIST:
  1555 0000026C 00000000                	dd	0
  1556                                  DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
  1557 00000270 0000                    	dw	0   ; 'MSDOS.BIN' kernel size in words
  1558                                  
  1559                                  ; 04/06/2018 - Retro DOS v3.0
  1560                                  ; 28/03/2018
  1561                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
  1562                                  ;
  1563                                  SYSI_Country:	
  1564 00000272 0000                    	dw	0 ; 5/29/86 Pointer to
  1565 00000274 0000                    	dw	0 ; country table in DOS
  1566                                  
  1567                                  ;; STACKSW   EQU   TRUE ;Include Switchable Hardware Stacks
  1568                                  ;; (SYSCONF.ASM, 1987)
  1569                                  ;; Internal Stack Parameters
  1570                                  ;EntrySize	equ	8
  1571                                  ;MinCount	equ	8
  1572                                  ;DefaultCount	equ	9
  1573                                  ;MaxCount	equ	64
  1574                                  ;MinSize 	equ	32
  1575                                  ;DefaultSize	equ	128
  1576                                  ;MaxSize 	equ	512
  1577                                  
  1578                                  	;IF	STACKSW    ; STACKSW TRUE
  1579                                  ;
  1580                                  ; Internal Stack Parameters
  1581                                  
  1582 00000276 0900                    STACK_COUNT:	DW	DefaultCount
  1583 00000278 8000                    STACK_SIZE:	DW	DefaultSize
  1584 0000027A 00000000                STACK_ADDR:	DD	0
  1585                                  	;ENDIF
  1586                                  
  1587                                  ; 05/06/2018 - Retro DOS v3.0
  1588                                  
  1589                                  ; various default values
  1590                                  
  1591                                  MEMORY_SIZE:
  1592 0000027E 0100                    	dw	1
  1593                                  DEFAULT_DRIVE:
  1594 00000280 00                      	db	0
  1595                                  BUFFERS:
  1596 00000281 FFFF                    	DW	-1	; initialized during buffer allocation
  1597                                  ;BUFFERS: 
  1598                                  ;	DW	2	; two buffers
  1599                                  FILES:
  1600 00000283 08                      	db	8	; enough files for pipe
  1601                                  FCBS:
  1602 00000284 04                      	db	4	; performance for recycling
  1603                                  KEEP:
  1604 00000285 00                      	db	0	; keep original set
  1605                                  NUM_CDS:
  1606 00000286 05                      	db	5	; 5 net drives
  1607                                  CONFBOT:
  1608 00000287 0000                    	dw	0
  1609                                  ALLOCLIM:
  1610 00000289 0000                    	dw	0
  1611                                  FOOSTRNG:
  1612 0000028B 413A5C00                	db	"A:\",0
  1613                                  COMMAND_LINE:
  1614 0000028F 020050                  	db	2,0,"P" ; Default Command.com Args
  1615                                          
  1616 00000292 00<rep 1Dh>             	times	29 db 0
  1617                                  ZERO:
  1618 000002AF 00                      	db	0
  1619                                  SEPCHR:
  1620 000002B0 00                      	db	0
  1621                                  
  1622                                  ; 10/06/2018
  1623                                  Sys_Model_Byte:
  1624 000002B1 FF                      	db	0FFh	;model byte used in SYSINIT
  1625                                  Sys_Scnd_Model_Byte:
  1626 000002B2 00                      	db	0	;secondary model byte used in SYSINIT
  1627                                  
  1628                                          ;IF      NOT NOEXEC
  1629                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
  1630                                          ;ENDIF
  1631                                  
  1632                                  ; 01/05/2018
  1633                                  COMEXE:
  1634 000002B3 0000                    EXEC0.ENVIRON:	DW	0	; seg addr of environment
  1635 000002B5 [8F02]                  EXEC0.COM_LINE:	DW	COMMAND_LINE ; pointer to asciz command line
  1636 000002B7 0000                    		DW	0
  1637 000002B9 [8002]                  EXEC0.5C_FCB:	DW	DEFAULT_DRIVE ; default fcb at 5C
  1638 000002BB 0000                    		DW	0
  1639 000002BD [AF02]                  EXEC0.6C_FCB:	DW	ZERO	; default fcb at 6C
  1640 000002BF 0000                    		DW	0
  1641                                  
  1642                                  COUNT:
  1643 000002C1 0000                    	dw	0
  1644                                  CHRPTR:
  1645 000002C3 0000                    	dw	0
  1646                                  
  1647                                  ; 04/06/2018
  1648                                  CntryFileHandle:
  1649 000002C5 0000                    	DW 	0 
  1650                                  
  1651                                  ;align 4
  1652 000002C7 90                      align 2 ; 04/07/2019 
  1653                                  
  1654                                  BUFPTR:
  1655                                  	; LEAVE THIS STUFF IN ORDER!
  1656                                  MEMLO:
  1657 000002C8 0000                    	dw	0
  1658                                  PRMBLK:
  1659                                  MEMHI:
  1660 000002CA 0000                    	dw	0
  1661                                  LDOFF:
  1662 000002CC 0000                    	dw	0
  1663                                  AREA:
  1664 000002CE 0000                    	dw	0
  1665                                  
  1666                                  PACKET:
  1667 000002D0 16                      	db	22
  1668 000002D1 00                      	db	0
  1669 000002D2 00                      	db	0	; INITIALIZE CODE
  1670 000002D3 0000                    	dw	0
  1671 000002D5 00<rep 8h>              	times	8 db 0
  1672                                  UNITCOUNT:
  1673 000002DD 00                      	db	0
  1674                                  BREAK_ADDR:
  1675 000002DE 00000000                	dd	0
  1676                                  BPB_ADDR:
  1677 000002E2 00000000                	dd	0
  1678                                  DriveNumber:
  1679 000002E6 00                      	db	0
  1680                                  
  1681 000002E7 90                      align 2
  1682                                  
  1683                                  ; 06/07/2019 - Retro DOS v3.1
  1684                                  TempStack:
  1685 000002E8 00<rep 80h>             	times	128 db 0
  1686                                  
  1687                                  GOINIT:
  1688                                  	; 06/07/2018
  1689                                  	; 04/06/2018 - Retro DOS v3.0
  1690                                  ; before doing anything else, let's set the model byte
  1691 00000368 B4C0                    	mov	ah,0C0h 		;get system configuration
  1692 0000036A CD15                    	int	15h			; *
  1693 0000036C 7217                    	jc	short No_ROM_Config
  1694 0000036E 80FC00                  	cmp	ah,0			; double check
  1695 00000371 7512                    	jne	short No_ROM_Config
  1696 00000373 268A4702                	mov	al,[ES:BX+ROMBIOS_DESC.bios_SD_modelbyte]
  1697 00000377 2EA2[B102]              	mov	[cs:Sys_Model_Byte],al 
  1698 0000037B 268A4703                	mov	al,[ES:BX+ROMBIOS_DESC.bios_SD_scnd_modelbyte]
  1699 0000037F 2EA2[B202]              	mov	[cs:Sys_Scnd_Model_Byte],al
  1700                                  	;jmp	short Move_Myself
  1701 00000383 EB0C                    	jmp	short SYSIN
  1702                                  No_ROM_Config:				; Old ROM
  1703 00000385 B800F0                  	mov	ax,0F000h
  1704 00000388 8ED8                    	mov	ds,ax
  1705 0000038A A0FEFF                  	mov	al,[0FFFEh]
  1706 0000038D 2EA2[B102]              	mov	[cs:Sys_Model_Byte],al	;set the model byte.
  1707                                  
  1708                                  ;Move_Myself:
  1709                                  ;	; 25/02/2018 - Retro DOS 2.0 - MSDOS 2.0 "SYSINIT.ASM"
  1710                                  ;	; (Modified for Retro DOS 2.0, for NASM 'incbin' method)
  1711                                  ;
  1712                                  ;	SYSINITSIZE	EQU  sysinit_code_end - sysinit_code_start
  1713                                  ;
  1714                                  ;      	;CLD
  1715                                  ;      	XOR     SI,SI
  1716                                  ;      	MOV     DI,SI
  1717                                  ;	; 19/03/2018
  1718                                  ;      	mov	CX,[SYSINIT_START+MEMORY_SIZE]
  1719                                  ;;	CMP     CX,1
  1720                                  ;;      JNZ     short NOSCAN
  1721                                  ;;	MOV     CX,2048		; START SCANNING AT 32K BOUNDARY
  1722                                  ;;	XOR     BX,BX
  1723                                  ;;MEMSCAN:
  1724                                  ;;	INC     CX
  1725                                  ;;    	JZ	short SETEND
  1726                                  ;;     	MOV     DS,CX
  1727                                  ;;     	MOV     AL,[BX]
  1728                                  ;;     	NOT     AL
  1729                                  ;;     	MOV     [BX],AL
  1730                                  ;;     	CMP     AL,[BX]
  1731                                  ;;     	NOT     AL
  1732                                  ;;     	MOV     [BX],AL
  1733                                  ;;     	JZ      short MEMSCAN
  1734                                  ;;SETEND:
  1735                                  ;;	MOV     AX,CS
  1736                                  ;;      MOV     DS,AX   
  1737                                  ;;	MOV	[SYSINIT_START+MEMORY_SIZE],CX 
  1738                                  ;;NOSCAN:
  1739                                  ;	MOV     AX,SYSINITSIZE + 15
  1740                                  ;	SHR     AX,1                    ; Divide by 16 for paras
  1741                                  ;	SHR     AX,1
  1742                                  ;	SHR     AX,1
  1743                                  ;	SHR     AX,1
  1744                                  ;
  1745                                  ;	SUB     CX,AX
  1746                                  ;	MOV     ES,CX ; SYSINITSEG = [MEMORY_SIZE] - (SYSIZE+15)/16
  1747                                  ;	MOV     CX,SYSINITSIZE + 1
  1748                                  ;	SHR     CX,1                    ; Divide by 2 to get words
  1749                                  ;	REP     MOVSW                   ; RELOCATE SYSINIT
  1750                                  ;
  1751                                  ;	PUSH    ES
  1752                                  ;	MOV	AX,SYSIN  ; 05/06/2018 (MSDOS 3.3, SYSINIT1.ASM)
  1753                                  ;	PUSH    AX
  1754                                  ;	
  1755                                  ;	RETF	; far jump to final location of SYSINIT code
  1756                                  ;
  1757                                  
  1758                                  ;
  1759                                  ;       MOVE THE DOS TO ITS PROPER LOCATION
  1760                                  ;
  1761                                  
  1762                                  	;nop	; 30/03/2018
  1763                                  SYSIN:
  1764                                  	; Retro DOS 2.0 - 25/02/2018 
  1765                                  
  1766 00000391 0E                      	PUSH	CS
  1767 00000392 1F                      	POP	DS
  1768                                  
  1769 00000393 8B0E[7002]                      MOV     CX,[DOSSIZE] ; words (not bytes!)
  1770                                  	        
  1771 00000397 A1[6A02]                	MOV	AX,[FINAL_DOS_LOCATION]
  1772 0000039A 8EC0                    	MOV     ES,AX
  1773 0000039C A1[6602]                        MOV     AX,[CURRENT_DOS_LOCATION]
  1774 0000039F 8ED8                            MOV     DS,AX
  1775                                  
  1776 000003A1 31F6                            XOR     SI,SI
  1777 000003A3 89F7                            MOV     DI,SI
  1778                                  	;INC	CX
  1779                                  	;SHR	CX,1
  1780 000003A5 F3A5                            REP     MOVSW
  1781                                  
  1782 000003A7 8CC8                    	MOV	AX,CS
  1783 000003A9 8ED8                    	MOV	DS,AX
  1784 000003AB 8B16[7E02]                      MOV	DX,[MEMORY_SIZE]
  1785 000003AF C536[6C02]              	LDS     SI,[DEVICE_LIST]
  1786                                  
  1787 000003B3 FA                              CLI
  1788 000003B4 8ED0                            MOV     SS,AX
  1789 000003B6 BC[BA03]                        MOV     SP,LOCSTACK	
  1790 000003B9 FB                      	STI
  1791                                  align 2
  1792                                  	; 30/03/2018
  1793                                  LOCSTACK:
  1794 000003BA 2EFF1E[6802]                    CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
  1795                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
  1796                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
  1797                                  
  1798                                  	; DS = PSP address for default process
  1799                                  	; ES:DI = Address of SYSINITVAR (MSDOS 2.0/2.11, Retro DOS 2.0)
  1800                                  
  1801                                  	;MOV     [CS:DOSINFO+2],ES ; SAVE POINTER TO DOS INFO
  1802                                  	;MOV     [CS:DOSINFO],DI
  1803                                  
  1804                                  	; 17/06/2018
  1805 000003BF 1E                      	PUSH	DS			; Save as input to RE_INIT
  1806                                  	
  1807 000003C0 0E                      	PUSH	CS
  1808 000003C1 1F                      	POP	DS
  1809                                  
  1810                                  	; 05/06/2018 - Retro DOS v3.0
  1811                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
  1812                                  
  1813                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
  1814 000003C2 268B05                  	mov	ax,[es:di] ; 05/07/2019 
  1815                                  	;mov	[CS:DOSINFO],ax
  1816 000003C5 A3[6402]                	mov	[DOSINFO],ax
  1817 000003C8 268B4502                	mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
  1818                                  	;mov	[CS:DOSINFO+2],ax
  1819 000003CC A3[6602]                	mov	[DOSINFO+2],ax ;set the sysvar pointer
  1820                                  
  1821 000003CF 268B4504                	mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
  1822                                  	;mov	[CS:SYSI_Country],ax
  1823 000003D3 A3[7202]                	mov	[SYSI_Country],ax
  1824 000003D6 268B4506                	mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
  1825                                  	;mov	[CS:SYSI_Country+2],ax
  1826 000003DA A3[7402]                	mov	[SYSI_Country+2],ax	;set the SYSI_Country pointer
  1827                                  
  1828 000003DD C43E[6402]              	les	di,[DOSINFO]	;es:di -> dosinfo
  1829                                  
  1830                                  	; 09/06/2018
  1831                                  	; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
  1832                                  	;SYSI_NUMIO equ	32
  1833                                   	
  1834                                  	; 25/03/2018 - Retro DOS v2.0 (MSDOS 2.0 <-> 3.3)
  1835                                  	;SYSI_NUMIO equ	16 ; SYSINITVAR NUMIO offset for MSDOS 2.0
  1836                                  
  1837                                  	; MSDOS 3.3 - SYSINIT1.ASM
  1838 000003E1 268A4520                	MOV	AL,[ES:DI+SYSI_NUMIO] ; SYSINITVAR.NUMIO
  1839 000003E5 A2[E602]                	MOV	[DriveNumber],AL ; Save start of installable block drvs
  1840                                  
  1841 000003E8 8CC8                    	MOV	AX,CS
  1842 000003EA 83E811                  	SUB	AX,11H			; room for header we will copy shortly
  1843                                  
  1844 000003ED A3[8702]                	MOV	[CONFBOT],AX		; Temp "unsafe" location
  1845                                  
  1846                                  	; 08/06/2018
  1847                                  	;PUSH	DS			; Save as input to RE_INIT
  1848                                  	;PUSH	CS
  1849                                  	;POP	DS
  1850 000003F0 E87401                  	CALL	TEMPCDS 		; Set up CDSs so RE_INIT and SYSINIT
  1851                                  					;   can make DISK system calls
  1852                                  
  1853 000003F3 1F                      	POP	DS			; Recover DS input to RE_INIT
  1854                                  
  1855                                  	; 06/07/2019
  1856                                  
  1857                                          ;IF	NOT IBMJAPVER
  1858                                  	
  1859 000003F4 9A861A7000              	CALL	KERNEL_SEGMENT:RE_INIT	; Re-call the BIOS
  1860                                          
  1861                                  	;ENDIF
  1862                                  
  1863 000003F9 FB                              STI
  1864 000003FA FC                              CLD
  1865                                  
  1866                                  ; DOSINIT has set up a default "process" (PHP) at DS:0. We will move it out
  1867                                  ; of the way by putting it just below SYSINIT at end of memory.
  1868                                  
  1869 000003FB 8CCB                            MOV     BX,CS
  1870 000003FD 83EB10                          SUB     BX,10H
  1871 00000400 8EC3                            MOV     ES,BX
  1872 00000402 31F6                            XOR     SI,SI
  1873 00000404 89F7                            MOV     DI,SI
  1874 00000406 B98000                          MOV     CX,80H
  1875 00000409 F3A5                            REP     MOVSW
  1876                                  
  1877 0000040B 268C063600              	MOV	[ES:PDB.JFN_POINTER+2],ES ; Relocate
  1878                                  
  1879                                   	; Set Process Data Block - Program Segment Prefix address
  1880                                  	; BX = PDB/PSP segment
  1881 00000410 B450                            MOV     AH,SET_CURRENT_PDB
  1882 00000412 CD21                            INT     21H			; Tell DOS we moved it
  1883                                  
  1884 00000414 1E                              PUSH	DS
  1885                                  
  1886 00000415 0E                              PUSH    CS
  1887 00000416 1F                              POP     DS
  1888                                  
  1889 00000417 BA[C414]                        MOV     DX,INT24	; SET UP INT 24 HANDLER
  1890 0000041A B82425                          MOV     AX,(SET_INTERRUPT_VECTOR*256)+24H
  1891 0000041D CD21                            INT     21H
  1892                                  
  1893                                  	; 25/03/2018 - MSDOS 3.3 - SYSINIT1.ASM
  1894 0000041F BBFFFF                  	MOV	BX,0FFFFH
  1895 00000422 B448                    	MOV	AH,ALLOC
  1896 00000424 CD21                    	INT	21H			;FIRST TIME FAILS
  1897                                  
  1898                                  ; 09/07/2019 - Retro DOS v3.1 test
  1899                                  ; X = BX = 9623h
  1900                                  
  1901 00000426 B448                    	MOV	AH,ALLOC
  1902 00000428 CD21                    	INT	21H			;SECOND TIME GETS IT
  1903 0000042A A3[CE02]                	MOV	[AREA],AX
  1904 0000042D A3[CA02]                	MOV	[MEMHI],AX		; MEMHI:MEMLO now points to
  1905                                  					; start of free memory
  1906                                  ; 09/07/2019 - Retro DOS v3.1 test
  1907                                  ; M = [MEMHI] = 099Dh
  1908                                  
  1909                                  ; 07/07/2019 (Test by using Bochs emulator)
  1910                                  ; [MEMHI] = [AREA] = 099Dh (for two harddisks)
  1911                                  ;		   = 0996h (for single harddisk)
  1912                                  ;		   = 098Fh (for floppy disks, without harddisk)		
  1913                                  
  1914                                          ;IF	ALTVECT
  1915                                  	; 27/06/2018
  1916 00000430 BA[D714]                	MOV	DX,BOOTMES
  1917 00000433 E86410                          CALL	PRINT		; Print message DOSINIT couldn't
  1918                                          ;ENDIF
  1919                                  
  1920 00000436 1F                      	POP	DS 
  1921                                  
  1922                                  	; 17/06/2018
  1923 00000437 2E8A16[8002]                    MOV     DL,[CS:DEFAULT_DRIVE]
  1924                                  
  1925 0000043C 08D2                    	OR      DL,DL
  1926 0000043E 7406                            JZ      SHORT NODRVSET
  1927                                          
  1928 00000440 FECA                    	DEC     DL                      ; A = 0
  1929 00000442 B40E                            MOV     AH,SET_DEFAULT_DRIVE
  1930 00000444 CD21                            INT     21H                     ; SELECT THE DISK
  1931                                  
  1932                                  NODRVSET:
  1933 00000446 E80D06                  	CALL	DOCONF                  ; DO THE CONFIG STUFF
  1934                                  
  1935 00000449 E89301                  	CALL	ENDFILE	; 25/03/2018 - MSDOS 3.3 - SYSINIT1.ASM
  1936                                  
  1937                                  	; 01/05/2018 (NOEXEC = FALSE)
  1938                                  	;IF	NOEXEC
  1939                                  
  1940                                  	;MOV	BP,DS                   ; SAVE COMMAND.COM SEGMENT
  1941                                  
  1942                                  	;;PUSH	DS
  1943                                  	;;POP	ES
  1944                                  
  1945                                  	;; 13/04/2018
  1946                                  	;MOV	ES,BP	
  1947                                  
  1948                                          ;MOV	BX,CS
  1949                                          ;SUB	BX,10H
  1950                                          ;MOV	DS,BX
  1951                                          ;XOR	SI,SI
  1952                                          ;MOV	DI,SI
  1953                                          ;MOV	CX,80H
  1954                                          ;REP	MOVSW
  1955                                  	;MOV	[ES:PDB.JFN_POINTER+2],ES ; Relocate ; 25/03/2018
  1956                                          ;MOV	BX,ES
  1957                                  
  1958                                          ;MOV	AH,SET_CURRENT_PDB
  1959                                          ;INT	21H
  1960                                  
  1961                                          ;MOV	[ES:PDB.PARENT_PID],ES  ; WE ARE THE ROOT
  1962                                          ;ENDIF
  1963                                  
  1964                                  ; We must now close all handles and reopen STDIN,STDOUT,STDERR in order
  1965                                  ; to get a possibly NEW device driver for CON. STDAUX and STDPRN must
  1966                                  ; also be openned.
  1967                                  
  1968 0000044C 0E                              PUSH    CS
  1969 0000044D 1F                              POP     DS
  1970                                  
  1971 0000044E A0[8302]                        MOV     AL,[FILES]
  1972                                  	;CBW
  1973 00000451 30E4                    	XOR	AH,AH			; DO NOT USE CBW INSTRUCTION!!!!!
  1974                                  					;  IT DOES SIGN EXTEND.
  1975 00000453 89C1                            MOV     CX,AX
  1976 00000455 31DB                            XOR     BX,BX                   ; Close standard input
  1977 00000457 B43E                            MOV     AH,CLOSE
  1978 00000459 CD21                            INT     21H
  1979                                  
  1980 0000045B BB0200                          MOV     BX,2
  1981                                  RCCLLOOP: 				; Close everybody but standard output
  1982 0000045E B43E                            MOV     AH,CLOSE
  1983 00000460 CD21                            INT     21H
  1984 00000462 43                              INC     BX
  1985 00000463 E2F9                            LOOP    RCCLLOOP
  1986                                  
  1987 00000465 BA[0E15]                        MOV     DX,CONDEV
  1988 00000468 B002                            MOV     AL,2
  1989 0000046A B43D                            MOV     AH,OPEN                 ; OPEN CON FOR READ/WRITE
  1990 0000046C F9                              STC
  1991 0000046D CD21                            INT     21H
  1992 0000046F 7305                            JNC     SHORT GOAUX
  1993 00000471 E80810                          CALL    BADFIL
  1994 00000474 EB13                            JMP     SHORT GOAUX2
  1995                                  
  1996 00000476 50                      GOAUX:  PUSH    AX
  1997 00000477 BB0100                          MOV     BX,1                    ; close standard output
  1998 0000047A B43E                            MOV     AH,CLOSE
  1999 0000047C CD21                            INT     21H
  2000 0000047E 58                              POP     AX
  2001                                  
  2002 0000047F 89C3                            MOV     BX,AX                   ; New device handle
  2003 00000481 B445                            MOV     AH,XDUP
  2004 00000483 CD21                            INT     21H                     ; Dup to 1, STDOUT
  2005 00000485 B445                            MOV     AH,XDUP
  2006 00000487 CD21                            INT     21H                     ; Dup to 2, STDERR
  2007                                  
  2008 00000489 BA[1215]                GOAUX2: MOV     DX,AUXDEV
  2009 0000048C B002                            MOV     AL,2                    ; READ/WRITE ACCESS
  2010 0000048E E80E10                          CALL    OPEN_DEV
  2011                                  
  2012 00000491 BA[1615]                        MOV     DX,PRNDEV
  2013 00000494 B001                            MOV     AL,1                    ; WRITE ONLY
  2014 00000496 E80610                          CALL    OPEN_DEV
  2015                                  
  2016                                  	; 08/06/2018 - Retro DOS v3.0
  2017                                  
  2018                                  ;Global Rearm command for Shared Interrupt devices attached in the system;
  2019                                  ;Shared interrupt attachment has some problem when it issues interrupt
  2020                                  ;during a warm reboot.	Once the interrupt is presented by the attachment,
  2021                                  ;no further interrupts on that level will be presented until a global rearm
  2022                                  ;is issued. BIOS will issue a global rearm after each device driver is loaded.
  2023                                  ;To issue a global rearm:	;For PC1, XT, Palace
  2024                                  ;			  OUT 02F2h, XX  ; Interrupt level 2
  2025                                  ;			  OUT 02F3h, XX  ; Interrupt level 3
  2026                                  ;			  OUT 02F4h, XX  ; Interrupt level 4
  2027                                  ;			  OUT 02F5h, XX  ; Interrupt level 5
  2028                                  ;			  OUT 02F6h, XX  ; Interrupt level 6
  2029                                  ;			  OUT 02F7h, XX  ; Interrupt level 7
  2030                                  ;
  2031                                  ;				;For PC AT, in addition to the above commands,
  2032                                  ;				;need to handle the secondary interrupt handler
  2033                                  ;			  OUT 06F2h, XX  ; Interrupt level 10
  2034                                  ;			  OUT 06F3h, XX  ; Interrupt level 11
  2035                                  ;			  OUT 06F4h, XX  ; Interrupt level 12
  2036                                  ;			  OUT 06F6h, XX  ; Interrupt level 14
  2037                                  ;			  OUT 06F7h, XX  ; Interrupt level 15
  2038                                  ;
  2039                                  ;				;For All others machine
  2040                                  ;			  None.
  2041                                  ; where XX stands for any value.
  2042                                  
  2043                                  	;PUSH	AX			;Save register
  2044                                  	;PUSH	BX			;Save register
  2045                                  	;PUSH	DX			;Save register
  2046                                  	;PUSH	ES			;Save register
  2047                                  
  2048 00000499 B0FF                    	MOV	AL,0FFH 		;Set up registers for global rearm
  2049 0000049B BAF202                  	MOV	DX,02F2H		;
  2050 0000049E EE                      	OUT	DX,AL			;OUT 02F2H,0FFH
  2051 0000049F 42                      	INC	DX			;
  2052 000004A0 EE                      	OUT	DX,AL			;OUT 02F3H,0FFH
  2053 000004A1 42                      	INC	DX			;
  2054 000004A2 EE                      	OUT	DX,AL			;OUT 02F4H,0FFH
  2055 000004A3 42                      	INC	DX			;
  2056 000004A4 EE                      	OUT	DX,AL			;OUT 02F5H,0FFH
  2057 000004A5 42                      	INC	DX			;
  2058 000004A6 EE                      	OUT	DX,AL			;OUT 02F6H,0FFH
  2059 000004A7 42                      	INC	DX			;
  2060 000004A8 EE                      	OUT	DX,AL			;OUT 02F7H,0FFH
  2061                                  
  2062 000004A9 B800F0                  	MOV	AX,0F000H		;Get machine type
  2063 000004AC 8EC0                    	MOV	ES,AX			;
  2064 000004AE 26803EFEFFFC            	CMP	BYTE [ES:0FFFEH],0FCH	;Q: Is it an AT type machine?
  2065 000004B4 751C                    	JNE	short REARMDONE		;  N: Skip next rearm
  2066 000004B6 B4C0                    	MOV	AH,0C0H 		;Get system configuration
  2067 000004B8 CD15                    	INT	15H			;Q: Is it an old ROM?
  2068 000004BA 7216                    	JC	short REARMDONE		;  Y: Skip next rearm
  2069 000004BC 26F6470540              	TEST	byte [ES:BX+ROMBIOS_DESC.bios_SD_featurebyte1],ScndIntController
  2070                                  					; Q: Present?
  2071 000004C1 740F                    	JE	short REARMDONE		;  N: Skip next rearm
  2072                                  
  2073 000004C3 B0FF                    	MOV	AL,0FFH 		;Set up registers for global rearm
  2074 000004C5 BAF206                  	MOV	DX,06F2H		;
  2075 000004C8 EE                      	OUT	DX,AL			;OUT 06F2H,0FFH
  2076 000004C9 42                      	INC	DX			;
  2077 000004CA EE                      	OUT	DX,AL			;OUT 06F3H,0FFH
  2078 000004CB 42                      	INC	DX			;
  2079 000004CC EE                      	OUT	DX,AL			;OUT 06F4H,0FFH
  2080 000004CD 42                      	INC	DX			;
  2081 000004CE 42                      	INC	DX			;
  2082 000004CF EE                      	OUT	DX,AL			;OUT 02F6H,0FFH
  2083 000004D0 42                      	INC	DX			;
  2084 000004D1 EE                      	OUT	DX,AL			;OUT 02F7H,0FFH
  2085                                  
  2086                                  REARMDONE:
  2087                                  	;POP	ES			;Restore register
  2088                                  	;POP	DX			;Restore register
  2089                                  	;POP	BX			;Restore register
  2090                                  	;POP	AX			;Restore register
  2091                                  
  2092                                  ;Global Rearm end *******************
  2093                                  
  2094                                  ;
  2095                                  ; SET UP THE PARAMETERS FOR COMMAND
  2096                                  ;
  2097                                  GOSET:
  2098 000004D2 BE[9002]                        MOV     SI,COMMAND_LINE+1
  2099                                  
  2100                                  	; 01/05/2018 (NOEXEC = FALSE)
  2101                                          ;IF	NOEXEC
  2102                                          ;MOV	DI,81H
  2103                                          ;ELSE
  2104 000004D5 1E                              PUSH	DS
  2105 000004D6 07                              POP	ES
  2106 000004D7 89F7                            MOV	DI,SI
  2107                                          ;ENDIF
  2108                                  
  2109 000004D9 B1FF                            MOV     CL,-1
  2110                                  COMTRANLP:                              ; FIND LENGTH OF COMMAND LINE
  2111 000004DB FEC1                            INC     CL
  2112 000004DD AC                              LODSB
  2113 000004DE AA                              STOSB                           ; COPY COMMAND LINE IN
  2114 000004DF 08C0                            OR      AL,AL
  2115 000004E1 75F8                            JNZ     SHORT COMTRANLP
  2116 000004E3 4F                              DEC     DI
  2117 000004E4 B00D                            MOV     AL,0DH
  2118 000004E6 AA                              STOSB
  2119                                  
  2120                                  	; 01/05/2018 (NOEXEC = FALSE)
  2121                                          ;IF	NOEXEC
  2122                                          ;MOV	[ES:80H],CL
  2123                                          ;MOV	AL,[DEFAULT_DRIVE]
  2124                                          ;MOV	[ES:5CH],AL
  2125                                          ;ELSE
  2126 000004E7 880E[8F02]                      MOV	[COMMAND_LINE],CL       ; Count
  2127                                          ;ENDIF
  2128                                  
  2129                                          ;PUSH    CS
  2130                                          ;POP     ES
  2131                                  
  2132 000004EB BA[7315]                        MOV     DX,COMMND		; NOW POINTING TO FILE DESCRIPTION
  2133                                  
  2134                                  	; 01/05/2018 (NOEXEC = FALSE)
  2135                                          ;IF	NOEXEC
  2136                                          ;MOV     ES,BP			; SET LOAD ADDRESS
  2137                                          ;MOV     BX,100H
  2138                                          ;CALL    LDFIL			; READ IN COMMAND
  2139                                          ;JC      SHORT COMERR
  2140                                          ;MOV     DS,BP
  2141                                          ;MOV     DX,80H
  2142                                          ;MOV     AH,SET_DMA		; SET DISK TRANSFER ADDRESS
  2143                                          ;INT     21H
  2144                                          ;CLI
  2145                                          ;MOV     SS,BP
  2146                                          ;MOV     SP,DX
  2147                                          ;STI
  2148                                          ;XOR     AX,AX			; PUSH A WORD OF ZEROS
  2149                                          ;PUSH    AX
  2150                                          ;PUSH    BP			; SET HIGH PART OF JUMP ADDRESS
  2151                                          ;MOV     AX,100H
  2152                                          ;PUSH    AX			; SET LOW PART OF JUMP ADDRESS
  2153                                          ;RETF				; CRANK UP COMMAND!
  2154                                  
  2155                                          ;ELSE
  2156                                  
  2157                                  	; 08/06/2018 - Retro DOS v3.0  (MSDOS 3.3, SYSINIT1.ASM, 1987)
  2158                                  
  2159                                  ; We are going to open the command interpreter and size it as is done in
  2160                                  ; LDFIL. The reason we must do this is that SYSINIT is in free memory. If
  2161                                  ; there is not enough room for the command interpreter, EXEC will probably
  2162                                  ; overlay our stack and code so when it returns with an error SYSINIT won't be
  2163                                  ; here to catch it. This code is not perfect (for instance .EXE command
  2164                                  ; interpreters are possible) because it does its sizing based on the
  2165                                  ; assumption that the file being loaded is a .COM file. It is close enough to
  2166                                  ; correctness to be usable.
  2167                                  
  2168 000004EE 52                      	PUSH	DX			; Save pointer to name
  2169                                  
  2170                                  ; First, find out where the command interpreter is going to go.
  2171 000004EF BBFFFF                  	MOV	BX,0FFFFH
  2172 000004F2 B448                    	MOV	AH,ALLOC
  2173 000004F4 CD21                    	INT	21H			;Get biggest piece
  2174 000004F6 B448                    	MOV	AH,ALLOC
  2175 000004F8 CD21                    	INT	21H			;SECOND TIME GETS IT
  2176 000004FA 7244                    	JC	short MEMERRJX		; Oooops
  2177 000004FC 8EC0                    	MOV	ES,AX
  2178                                  
  2179                                  ; 09/07/2019 - Retro DOS v3.1 test
  2180                                  ; A = ES = 0C60h
  2181                                  
  2182 000004FE B449                    	MOV	AH,DEALLOC
  2183 00000500 CD21                    	INT	21H			; Give it right back
  2184 00000502 89DD                    	MOV	BP,BX
  2185                                  ; ES:0 points to Block, and BP is the size of the block
  2186                                  ;   in para.
  2187                                  
  2188                                  ; 09/07/2019 - Retro DOS v3.1 test
  2189                                  ; B = BP = 9360h
  2190                                  
  2191                                  ; We will now adjust the size in BP DOWN by the size of SYSINIT. We
  2192                                  ;   need to do this because EXEC might get upset if some of the EXEC
  2193                                  ;   data in SYSINIT is overlayed during the EXEC.
  2194 00000504 8B1E[7E02]              	MOV	BX,[MEMORY_SIZE]
  2195 00000508 8CC8                    	MOV	AX,CS
  2196 0000050A 29C3                    	SUB	BX,AX			; BX is size of SYSINIT in Para
  2197 0000050C 83C311                  	ADD	BX,11H			; Add the SYSINIT PHP
  2198 0000050F 29DD                    	SUB	BP,BX			; BAIS down
  2199 00000511 722D                    	JC	short MEMERRJX		; No Way.
  2200                                  
  2201                                  ; 09/07/2019 - Retro DOS v3.1 test
  2202                                  ; C = [MEMORY_SIZE]-CS+11h = 019Dh
  2203                                  
  2204 00000513 B8003D                  	MOV	AX,OPEN*256	 	;OPEN THE FILE being EXECED
  2205 00000516 F9                      	STC				;IN CASE OF INT 24
  2206 00000517 CD21                    	INT	21H
  2207 00000519 7244                    	JC	short COMERR		; Ooops
  2208 0000051B 89C3                    	MOV	BX,AX			;Handle in BX
  2209 0000051D 31C9                    	XOR	CX,CX
  2210 0000051F 31D2                    	XOR	DX,DX
  2211 00000521 B80242                  	MOV	AX,(LSEEK*256)|2
  2212 00000524 F9                      	STC				;IN CASE OF INT 24
  2213 00000525 CD21                    	INT	21H			; Get file size in DX:AX
  2214 00000527 7236                    	JC	short COMERR
  2215                                      ; Convert size in DX:AX to para in AX
  2216 00000529 83C00F                  	ADD	AX,15			; Round up size for conversion to para
  2217 0000052C 83D200                  	ADC	DX,0
  2218 0000052F B104                    	MOV	CL,4
  2219 00000531 D3E8                    	SHR	AX,CL
  2220 00000533 B10C                    	MOV	CL,12
  2221 00000535 D3E2                    	SHL	DX,CL			; Low nibble of DX to high nibble
  2222 00000537 09D0                    	OR	AX,DX			; AX is now # of para for file
  2223 00000539 83C010                  	ADD	AX,10H			; 100H byte PHP
  2224 0000053C 39E8                    	CMP	AX,BP			; Will it fit?
  2225 0000053E 7203                    	JB	short OKLD		; Jump if yes.
  2226                                  MEMERRJX:
  2227 00000540 E90A0D                  	JMP	MEM_ERR
  2228                                  
  2229                                  OKLD:
  2230 00000543 B43E                    	MOV	AH,CLOSE
  2231 00000545 CD21                    	INT	21H			; Close file
  2232                                  
  2233 00000547 5A                      	POP	DX			; Recover pointer to name
  2234                                  
  2235 00000548 0E                      	PUSH	CS
  2236 00000549 07                      	POP	ES
  2237                                  
  2238 0000054A BB[B302]                	MOV	BX,COMEXE
  2239                                          ;MOV	[BX+EXEC0.COM_LINE+2],CS
  2240                                          ;MOV	[BX+EXEC0.5C_FCB+2],CS
  2241                                          ;MOV	[BX+EXEC0.6C_FCB+2],CS
  2242 0000054D 8C0E[B702]              	MOV	[EXEC0.COM_LINE+2],CS
  2243 00000551 8C0E[BB02]                      MOV	[EXEC0.5C_FCB+2],CS
  2244 00000555 8C0E[BF02]                      MOV	[EXEC0.6C_FCB+2],CS
  2245                                  
  2246                                          ;XOR	AX,AX
  2247                                          ;MOV	AH,EXEC
  2248 00000559 B8004B                          MOV	AX,EXEC*256
  2249 0000055C F9                      	STC				; IN CASE OF INT 24
  2250 0000055D CD21                            INT	21H			; GO START UP COMMAND
  2251                                          ;ENDIF
  2252                                  
  2253                                  COMERR:
  2254 0000055F BA[0C17]                        MOV     DX,BADCOM		; WANT TO PRINT COMMAND ERROR
  2255 00000562 E8170F                          CALL    BADFIL
  2256                                  STALL:  
  2257 00000565 EBFE                    	JMP     SHORT STALL
  2258                                  
  2259                                  	; 08/06/2018 - Retro DOS v3.0
  2260                                  
  2261                                  TEMPCDS:
  2262 00000567 C43E[6402]              	LES	DI,[DOSINFO]
  2263                                  
  2264 0000056B 268A4D20                	MOV	CL,[ES:DI+SYSI_NUMIO]
  2265 0000056F 30ED                    	XOR	CH,CH
  2266 00000571 26884D21                	MOV	[ES:DI+SYSI_NCDS],CL
  2267 00000575 88C8                    	MOV	AL,CL
  2268 00000577 B451                    	MOV	AH,curdir_list.size ; 81
  2269 00000579 F6E4                    	MUL	AH
  2270 0000057B E8B602                  	call	ParaRound
  2271 0000057E 8B36[8702]              	MOV	SI,[CONFBOT]
  2272 00000582 29C6                    	SUB	SI,AX
  2273 00000584 8936[8902]              	MOV	[ALLOCLIM],SI		; Can't alloc past here!
  2274 00000588 26897518                	MOV	[ES:DI+SYSI_CDS+2],SI
  2275 0000058C 89F0                    	MOV	AX,SI
  2276 0000058E 26C745160000            	MOV	WORD [ES:DI+SYSI_CDS],0
  2277                                  	;LDS	SI,[ES:DI+SYSI_DPB]
  2278 00000594 26C535                  	lds	si,[es:di] ; 05/07/2019
  2279 00000597 8EC0                    	MOV	ES,AX
  2280 00000599 31FF                    	XOR	DI,DI
  2281                                  FOOSET: 				; Init CDSs
  2282                                  	; 18/06/2018
  2283 0000059B 2EA1[8B02]              	MOV	AX,[CS:FOOSTRNG]
  2284 0000059F AB                      	STOSW
  2285 000005A0 2EA1[8D02]              	MOV	AX,[CS:FOOSTRNG+2]
  2286 000005A4 AB                      	STOSW
  2287 000005A5 2EFE06[8B02]            	INC	BYTE [CS:FOOSTRNG]
  2288 000005AA 31C0                    	XOR	AX,AX
  2289 000005AC 51                      	PUSH	CX
  2290 000005AD B93F00                  	MOV	CX,curdir_list.cdir_flags - 4
  2291 000005B0 F3AA                    	REP	STOSB
  2292 000005B2 83FEFF                  	CMP	SI,-1
  2293 000005B5 7507                    	JNZ	short NORMCDS
  2294                                  	;XOR	AX,AX ; 06/07/2019
  2295 000005B7 B103                    	MOV	CL,3
  2296 000005B9 F3AB                    	REP	STOSW
  2297 000005BB 59                      	POP	CX
  2298 000005BC EB0E                    	JMP	SHORT FINCDS
  2299                                  
  2300                                  NORMCDS:
  2301 000005BE 59                      	POP	CX
  2302 000005BF B80040                  	MOV	AX,curdir_inuse
  2303 000005C2 AB                      	STOSW				; curdir_flags
  2304 000005C3 89F0                    	MOV	AX,SI
  2305 000005C5 AB                      	STOSW				; curdir_devptr
  2306 000005C6 8CD8                    	MOV	AX,DS
  2307 000005C8 AB                      	STOSW
  2308 000005C9 C57418                  	LDS	SI,[SI+DPB.NEXT_DPB]
  2309                                  FINCDS:
  2310 000005CC B8FFFF                  	MOV	AX,-1
  2311 000005CF AB                      	STOSW				; curdir_ID
  2312 000005D0 AB                      	STOSW				; curdir_ID
  2313 000005D1 AB                      	STOSW				; curdir_user_word
  2314 000005D2 B80200                  	mov	ax,2
  2315 000005D5 AB                      	stosw				; curdir_end
  2316 000005D6 E2C3                    	LOOP	FOOSET
  2317 000005D8 2EC606[8B02]41          	MOV	BYTE [CS:FOOSTRNG],"A"
  2318 000005DE C3                      	retn
  2319                                  
  2320                                  ; 09/06/2018 - Retro DOS v3.0  (MSDOS 3.3, SYSINIT1.ASM, 1987)
  2321                                  
  2322                                  ; Allocate FILEs
  2323                                  ;------------------------------------------------------------------------------
  2324                                  ENDFILE:
  2325                                  
  2326                                  ; WE ARE NOW SETTING UP FINAL CDSs, BUFFERS, FILES, FCSs STRINGs etc. We no
  2327                                  ; longer need the space taken by The TEMP stuff below CONFBOT, so set ALLOCLIM
  2328                                  ; to CONFBOT.
  2329                                  
  2330                                  	; 18/06/2018
  2331                                  	;MOV	AX,[CS:CONFBOT]
  2332                                  	;MOV	[CS:ALLOCLIM],AX
  2333 000005DF 0E                      	PUSH	CS
  2334 000005E0 1F                      	POP	DS
  2335 000005E1 A1[8702]                	MOV	AX,[CONFBOT]
  2336 000005E4 A3[8902]                	MOV	[ALLOCLIM],AX
  2337 000005E7 E8410C                  	call	ROUND
  2338 000005EA A0[8302]                	MOV	AL,[FILES]
  2339 000005ED 2C05                    	SUB	AL,5
  2340 000005EF 763F                    	JBE	short DOFCBS
  2341 000005F1 30E4                    	XOR	AH,AH			; DO NOT USE CBW INSTRUCTION!!!!!
  2342                                  					;  IT DOES SIGN EXTEND.
  2343 000005F3 8B1E[C802]              	MOV	BX,[MEMLO]
  2344 000005F7 8B16[CA02]              	MOV	DX,[MEMHI]
  2345                                  
  2346 000005FB C53E[6402]              	LDS	DI,[DOSINFO]		;GET POINTER TO DOS DATA
  2347 000005FF C57D04                  	LDS	DI,[DI+SYSI_SFT]	;DS:BP POINTS TO SFT
  2348                                  	;MOV	[DI+SF.SFLink],BX
  2349 00000602 891D                    	mov	[di],bx ; 05/07/2019
  2350 00000604 895502                  	MOV	[DI+SF.SFLink+2],DX	;SET POINTER TO NEW SFT
  2351 00000607 0E                      	PUSH	CS
  2352 00000608 1F                      	POP	DS
  2353 00000609 C43E[C802]              	LES	DI,[MEMLO]		;POINT TO NEW SFT
  2354                                  	;MOV	WORD [ES:DI+SF.SFLink],-1
  2355 0000060D 26C705FFFF              	mov	word [es:di],-1	 ; 05/07/2019	
  2356 00000612 26894504                	MOV	[ES:DI+SF.SFCount],AX
  2357 00000616 B335                    	MOV	BL,SF_ENTRY.size ; 53
  2358 00000618 F6E3                    	MUL	BL			;AX = NUMBER OF BYTES TO CLEAR
  2359 0000061A 89C1                    	MOV	CX,AX
  2360 0000061C 0106[C802]              	ADD	[MEMLO],AX		;ALLOCATE MEMORY
  2361 00000620 B80600                  	MOV	AX,6
  2362 00000623 0106[C802]              	ADD	[MEMLO],AX		;REMEMBER THE HEADER TOO
  2363 00000627 E8010C                  	call	ROUND			; Check for mem error before the STOSB
  2364 0000062A 01C7                    	ADD	DI,AX
  2365 0000062C 31C0                    	XOR	AX,AX
  2366 0000062E F3AA                    	REP	STOSB			;CLEAN OUT THE STUFF
  2367                                  
  2368                                  ; Allocate FCBs
  2369                                  ;------------------------------------------------------------------------------
  2370                                  DOFCBS:
  2371                                  	; 24/06/2018
  2372                                  	;PUSH	CS
  2373                                  	;POP	DS
  2374 00000630 E8F80B                  	call	ROUND
  2375 00000633 A0[8402]                	MOV	AL,[FCBS]
  2376 00000636 30E4                    	XOR	AH,AH			; DO NOT USE CBW INSTRUCTION!!!!!
  2377                                  					;  IT DOES SIGN EXTEND.
  2378 00000638 8B1E[C802]              	MOV	BX,[MEMLO]
  2379 0000063C 8B16[CA02]              	MOV	DX,[MEMHI]
  2380 00000640 C53E[6402]              	LDS	DI,[DOSINFO]		;GET POINTER TO DOS DATA
  2381                                  
  2382 00000644 895D1A                  	MOV	[DI+SYSI_FCB],BX
  2383 00000647 89551C                  	MOV	[DI+SYSI_FCB+2],DX	;SET POINTER TO NEW Table
  2384                                  
  2385 0000064A 2E8A1E[8502]            	MOV	BL,[CS:KEEP]
  2386 0000064F 30FF                    	XOR	BH,BH
  2387 00000651 895D1E                  	MOV	[DI+SYSI_KEEP],BX
  2388 00000654 0E                      	PUSH	CS
  2389 00000655 1F                      	POP	DS
  2390 00000656 C43E[C802]              	LES	DI,[MEMLO]		;POINT TO NEW Table
  2391                                  	;MOV	WORD [ES:DI+SF.SFLink],-1
  2392 0000065A 26C705FFFF              	mov	word [es:di],-1 ; 05/07/2019
  2393 0000065F 26894504                	MOV	[ES:DI+SF.SFCount],AX
  2394 00000663 B335                    	MOV	BL,SF_ENTRY.size ; 53
  2395 00000665 89C1                    	MOV	CX,AX
  2396 00000667 F6E3                    	MUL	BL			;AX = NUMBER OF BYTES TO CLEAR
  2397 00000669 0106[C802]              	ADD	[MEMLO],AX		;ALLOCATE MEMORY
  2398 0000066D B80600                  	MOV	AX,SF.size-2
  2399 00000670 0106[C802]              	ADD	[MEMLO],AX		;REMEMBER THE HEADER TOO
  2400 00000674 E8B40B                  	call	ROUND			; Check for mem error before the STOSB
  2401 00000677 01C7                    	ADD	DI,AX			;Skip over header
  2402 00000679 B041                    	MOV	AL,"A"
  2403                                  FillLoop:
  2404 0000067B 51                      	PUSH	CX			; save count
  2405 0000067C B93500                  	MOV	CX,SF_ENTRY.size	; number of bytes to fill
  2406 0000067F FC                      	cld
  2407 00000680 F3AA                    	REP	STOSB			; filled
  2408                                  	
  2409                                  	;MOV	WORD [ES:DI-SF_ENTRY.size+SF_ENTRY.sf_ref_count],0
  2410                                  	;MOV	WORD [ES:DI-SF_ENTRY.size+SF_ENTRY.sf_position],0
  2411                                  	;MOV	WORD [ES:DI-SF_ENTRY.size+SF_ENTRY.sf_position+2],0
  2412                                  	
  2413                                  	; 06/07/2019
  2414 00000682 26894DCB                	MOV	[ES:DI-SF_ENTRY.size+SF_ENTRY.sf_ref_count],cx ; 0
  2415 00000686 26894DE0                	MOV	[ES:DI-SF_ENTRY.size+SF_ENTRY.sf_position],cx  ; 0
  2416 0000068A 26894DE2                	MOV	[ES:DI-SF_ENTRY.size+SF_ENTRY.sf_position+2],cx ; 0
  2417                                  
  2418 0000068E 59                      	POP	CX
  2419 0000068F E2EA                    	LOOP	FillLoop
  2420                                  
  2421                                  ; Allocate Buffers
  2422                                  ;------------------------------------------------------------------------------
  2423                                  
  2424                                  ; Search through the list of media supported and allocate 3 buffers if the
  2425                                  ; capacity of the drive is > 360KB
  2426                                  
  2427 00000691 803E[8102]FF            	CMP	byte [BUFFERS], -1	; Has buffers been already set?
  2428 00000696 7403                    	je	short DoDefaultBuff
  2429 00000698 E98500                  	jmp	DOBUFF			; the user entered the buffers=.
  2430                                  
  2431                                  DoDefaultBuff:
  2432 0000069B C606[8102]02            	MOV	byte [BUFFERS], 2	; Default to 2 buffers
  2433                                  	; 24/06/2018
  2434                                  	;PUSH	AX
  2435                                  	;PUSH	DS
  2436                                  	;
  2437                                  	;LES	BP,[CS:DOSINFO] 	; Search through the DPB's
  2438                                  	;LES	BP,[ES:BP+SYSI_DPB]	; Get first DPB
  2439                                  
  2440                                  	; 24/06/2018
  2441                                  	;PUSH	CS
  2442                                  	;POP	DS
  2443                                  	; 18/06/2018
  2444 000006A0 C42E[6402]              	LES	BP,[DOSINFO] 		; Search through the DPB's
  2445                                  	;LES	BP,[ES:BP+SYSI_DPB]	; Get first DPB
  2446 000006A4 26C46E00                	les	bp,[es:bp] ; 05/07/2019
  2447                                  
  2448                                  NEXTDPB:
  2449                                  	; Test if the drive supports removeable media
  2450                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
  2451 000006A8 268A5E00                	mov	bl,[es:bp] ; 05/07/2019
  2452 000006AC FEC3                    	INC	BL
  2453 000006AE B80844                  	MOV	AX,(IOCTL*256)|8
  2454 000006B1 CD21                    	INT	21H
  2455                                  
  2456                                  ; Ignore fixed disks
  2457 000006B3 09C0                    	OR	AX, AX			; AX is nonzero if disk is nonremoveable
  2458 000006B5 7535                    	JNZ	short NOSETBUF
  2459                                  
  2460                                  ; Get parameters of drive
  2461 000006B7 31DB                    	XOR	BX,BX
  2462                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
  2463 000006B9 268A5E00                	mov	bl,[es:bp] ; 05/07/2019
  2464 000006BD FEC3                    	INC	BL
  2465 000006BF BA[E715]                	MOV	DX,DEVICEPARAMETERS
  2466 000006C2 B80D44                  	MOV	AX,(IOCTL*256)|GENERIC_IOCTL
  2467 000006C5 B96008                  	MOV	CX,(RAWIO*256)|GET_DEVICE_PARAMETERS
  2468 000006C8 CD21                    	INT	21H
  2469 000006CA 7220                    	JC	short NOSETBUF		; Get next DPB if driver doesn't support
  2470                                  					; Generic IOCTL
  2471                                  ; Determine capacity of drive
  2472                                  ; Media Capacity = #Sectors * Bytes/Sector
  2473 000006CC 8B1E[F615]              	MOV	BX,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
  2474                                  
  2475                                  ; To keep the magnitude of the media capacity within a word,
  2476                                  ; scale the sector size
  2477                                  ; (ie. 1 -> 512 bytes, 2 -> 1024 bytes, ...)
  2478 000006D0 A1[EE15]                	MOV	AX,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
  2479 000006D3 31D2                    	XOR	DX,DX
  2480 000006D5 B90002                  	MOV	CX,512
  2481 000006D8 F7F1                    	DIV	CX				; Scale sector size in factor of
  2482                                  						; 512 bytes
  2483                                  
  2484 000006DA F7E3                    	MUL	BX				; AX = #sectors * size factor
  2485 000006DC 09D2                    	OR	DX,DX				; Just in case of LARGE floppies
  2486 000006DE 7505                    	JNZ	short SETBUF
  2487 000006E0 3DD002                  	CMP	AX,720				; 720 Sectors * size factor of 1
  2488 000006E3 7607                    	JBE	short NOSETBUF
  2489                                  SETBUF:
  2490 000006E5 C606[8102]03            	MOV	byte [BUFFERS],3
  2491 000006EA EB0D                    	jmp	short Chk_Memsize_for_Buffers 	; Now check the mem size for default buff count
  2492                                  NOSETBUF:
  2493 000006EC 26837E18FF              	CMP	WORD [ES:BP+DPB.NEXT_DPB],-1
  2494 000006F1 7406                    	jz	short Chk_Memsize_for_Buffers
  2495 000006F3 26C46E18                	LES	BP,[ES:BP+DPB.NEXT_DPB]
  2496 000006F7 EBAF                    	JMP	short NEXTDPB
  2497                                  
  2498                                  ;From DOS 3.3, the default number of buffers will be changed according to the
  2499                                  ;memory size too.
  2500                                  ; Default buffers = 2
  2501                                  ; If diskette Media > 360 kb, then default buffers = 3
  2502                                  ; If memory size > 128 kb (2000H para), then default buffers = 5
  2503                                  ; If memory size > 256 kb (4000H para), then default buffers = 10
  2504                                  ; If memory size > 512 kb (8000H para), then default buffers = 15.
  2505                                  
  2506                                  Chk_Memsize_for_Buffers:
  2507 000006F9 813E[7E02]0020          	cmp	word [MEMORY_SIZE], 2000h
  2508 000006FF 761F                    	jbe	short BUFSET
  2509                                  
  2510                                  	;mov	byte [BUFFERS], 5
  2511                                  	;cmp	word [MEMORY_SIZE], 4000h
  2512                                  	;jbe	short BUFSET
  2513                                  	;mov	byte [BUFFERS], 10
  2514                                  	;cmp	word [MEMORY_SIZE], 8000h
  2515                                  	;jbe	short BUFSET
  2516                                  
  2517 00000701 C606[8102]0F            	mov	byte [BUFFERS], 15
  2518                                  
  2519 00000706 813E[7E02]0080          	cmp	word [MEMORY_SIZE], 8000h
  2520                                  	;jnb	short BUFSET
  2521 0000070C 7712                    	ja	short BUFSET ; 06/07/2019
  2522                                  
  2523 0000070E C606[8102]0A            	mov	byte [BUFFERS], 10
  2524                                  
  2525 00000713 813E[7E02]0040          	cmp	word [MEMORY_SIZE], 4000h
  2526                                  	;jnb	short BUFSET
  2527 00000719 7705                    	ja	short BUFSET ; 06/07/2019
  2528                                  
  2529 0000071B C606[8102]05            	mov	byte [BUFFERS], 5
  2530                                  
  2531                                  	;cmp	word [MEMORY_SIZE], 8000h
  2532                                  	;jbe	short BUFSET
  2533                                  	;mov	byte [BUFFERS], 15
  2534                                  
  2535                                  BUFSET:
  2536                                  	; 24/06/2018
  2537                                  	;POP	DS
  2538                                  	;POP	AX
  2539                                  DOBUFF:
  2540 00000720 E8080B                  	call	ROUND
  2541 00000723 FE0E[8102]              	DEC	byte [BUFFERS]		; FIRST DEC acounts for buffer already
  2542                                  					;    in system.
  2543 00000727 742F                    	JZ	short BUF1		; All done
  2544 00000729 1E                      	PUSH	DS
  2545 0000072A C43E[C802]              	LES	DI,[BUFPTR]
  2546 0000072E C51E[6402]              	LDS	BX,[DOSINFO]
  2547 00000732 8B4712                  	MOV	AX,[BX+SYSI_BUF]	; Link in new buffer
  2548                                  	;MOV	[ES:DI+BUFFINFO.buf_link],AX
  2549 00000735 268905                  	mov	[es:di],ax ; 05/07/2019
  2550 00000738 8B4714                  	MOV	AX,[BX+SYSI_BUF+2]
  2551 0000073B 26894502                	MOV	[ES:DI+BUFFINFO.buf_link+2],AX
  2552 0000073F 897F12                  	MOV	[BX+SYSI_BUF],DI
  2553 00000742 8C4714                  	MOV	[BX+SYSI_BUF+2],ES
  2554 00000745 26C74504FF00            	MOV	word [ES:DI+BUFFINFO.buf_ID],00FFH ; NEW BUFFER FREE
  2555 0000074B 8B5F10                  	MOV	BX,[BX+SYSI_MAXSEC]
  2556 0000074E 1F                      	POP	DS
  2557 0000074F 83C310                  	ADD	BX,BUFINSIZ ; 16
  2558 00000752 011E[C802]              	ADD	[MEMLO],BX
  2559 00000756 EBC8                    	JMP	short DOBUFF
  2560                                  
  2561                                  ; 10/06/2018 - Retro DOS v3.0
  2562                                  
  2563                                  ; Allocate CDSs
  2564                                  ;------------------------------------------------------------------------------
  2565                                  BUF1:
  2566 00000758 E8D00A                  	call	ROUND
  2567 0000075B C43E[6402]              	LES	DI,[DOSINFO]
  2568 0000075F 268A4D20                	MOV	CL,[ES:DI+SYSI_NUMIO]
  2569 00000763 3A0E[8602]              	CMP	CL,[NUM_CDS]
  2570 00000767 7304                    	JAE	short GOTNCDS		; User setting must be at least NUMIO
  2571 00000769 8A0E[8602]              	MOV	CL,[NUM_CDS]
  2572                                  GOTNCDS:
  2573 0000076D 30ED                    	XOR	CH,CH
  2574 0000076F 26884D21                	MOV	[ES:DI+SYSI_NCDS],CL
  2575 00000773 A1[CA02]                	MOV	AX,[MEMHI]
  2576 00000776 26894518                	MOV	[ES:DI+SYSI_CDS+2],AX
  2577 0000077A A1[C802]                	MOV	AX,[MEMLO]
  2578 0000077D 26894516                	MOV	[ES:DI+SYSI_CDS],AX
  2579 00000781 88C8                    	MOV	AL,CL
  2580 00000783 B451                    	MOV	AH,curdir_list.size
  2581 00000785 F6E4                    	MUL	AH
  2582 00000787 E8AA00                  	call	ParaRound
  2583 0000078A 0106[CA02]              	ADD	[MEMHI],AX
  2584 0000078E E89A0A                  	call	ROUND			; Check for mem error before initializing
  2585                                  	;LDS	SI,[ES:DI+SYSI_DPB]
  2586 00000791 26C535                  	lds	si,[es:di] ; 05/07/2019
  2587 00000794 26C47D16                	LES	DI,[ES:DI+SYSI_CDS]
  2588 00000798 E800FE                  	CALL	FOOSET
  2589                                  
  2590                                  ; Allocate Space for Internal Stack
  2591                                  ;------------------------------------------------------------------------------
  2592                                  
  2593                                  	;IF	STACKSW
  2594 0000079B 0E                      	PUSH	CS
  2595 0000079C 1F                      	POP	DS
  2596                                  	;ASSUME	DS:SYSINITSEG
  2597                                  
  2598                                  ; 07/07/2019 (Bochs emulator, two harddisks)
  2599                                  ; [MEMHI] = 0BA4h (at thispoint)
  2600                                  
  2601                                  	; !!! 07/07/2019 - Retro DOS v3.1 !!! by Erdogan Tan
  2602                                  	; (move stack code -destination- address 1024 bytes upward
  2603                                  	;	it is seen as enough to prevent overlap!) 
  2604                                  	; (Note: Currently, I don't know the reason which causes overlap!?)	
  2605                                  	
  2606                                  	;add	word [MEMHI],64  ; 64 = 1024/16
  2607 0000079D 8306[CA02]48            	add	word [MEMHI],72	 ; 09/07/2019
  2608                                  
  2609                                  	;IF	IBM
  2610                                  ;Don't install the system stack on the PCjr. Ignore STACKS=command too.
  2611 000007A2 803E[B102]FD            	CMP	byte [Sys_Model_Byte],0FDh	; PCjr = 0FDh
  2612                                  	;JE	short SkipStack
  2613 000007A7 741C                    	JE	short SkipStack1
  2614                                  	;ENDIF
  2615                                  
  2616                                  ;If the user does not entered STACKS= command, as a default, do not install
  2617                                  ;sytem stacks for PC1, PC XT, PC Portable cases.
  2618                                  ;Otherwise, install it to the user specified value or to the default
  2619                                  ;value of 9, 128 for the rest of the system.
  2620                                  
  2621                                  	; 09/07/2019
  2622                                  
  2623 000007A9 833E[7A02]FF            	cmp	word [STACK_ADDR],-1		;Has the user entered "stacks=" command?
  2624 000007AE 741D                    	je	short DoInstallStack		;Then install as specified by the user
  2625 000007B0 803E[B202]00            	cmp	byte [Sys_Scnd_Model_Byte],0	;PC1, XT has the secondary model byte = 0
  2626 000007B5 7516                    	jne	short DoInstallStack		;Other model should have def. stack of 9, 128
  2627 000007B7 803E[B102]FF            	cmp	byte [Sys_Model_Byte],0FFh	;PC1 ?
  2628                                  	;je	short SkipStack
  2629 000007BC 7407                    	je	short SkipStack1
  2630 000007BE 803E[B102]FE            	cmp	byte [Sys_Model_Byte],0FEh	;PC/XT or PC Portable ?	
  2631                                  	;je	short SkipStack
  2632 000007C3 7508                    	jne	short DoInstallStack
  2633                                  
  2634                                  SkipStack1:
  2635                                  	; 09/07/2019
  2636 000007C5 C706[C802][1A07]        	mov	word [MEMLO],((EntrySize+DefaultSize)*DefaultCount)+endstackcode
  2637 000007CB EB46                    	jmp	short SkipStack
  2638                                  
  2639                                  DoInstallStack:
  2640 000007CD A1[7602]                	mov	ax,[STACK_COUNT]		; Stack_count = 0?
  2641 000007D0 83F800                  	cmp	ax,0				;then, stack size must be 0 too.
  2642                                  	;jz	short SkipStack			;Don't install stack.
  2643 000007D3 74F0                    	jz	short SkipStack1
  2644                                  
  2645                                  ; 10/21/86 Dynamic Relocation of Stack code.			
  2646 000007D5 E8530A                  	call	ROUND				;[memhi] = Seg. for stack code
  2647                                  						;[memlo] = 0
  2648 000007D8 A1[CA02]                	mov	ax,[MEMHI]
  2649 000007DB 8EC0                    	mov	es,ax				;ES -> Seg. the stack code is going to move.
  2650                                  
  2651                                  	;assume	es:nothing
  2652                                  	; 18/06/2018
  2653                                  	;push	cs
  2654                                  	;pop	ds
  2655                                  	; 05/07/2018
  2656 000007DD 31F6                    	xor	si,si			;!!We know that Stack code is at the beginning of SYSINIT.
  2657 000007DF 31FF                    	xor	di,di
  2658 000007E1 B9[5202]                	mov	cx,endstackcode
  2659 000007E4 890E[C802]              	mov	[MEMLO],cx
  2660 000007E8 E8400A                  	call	ROUND				;Have enough space for relocation?
  2661 000007EB F3A4                    	rep	movsb
  2662                                  
  2663                                  	;add word [MEMHI],64  ; 64 = 1024/16
  2664                                  
  2665 000007ED A1[C802]                	MOV	AX,[MEMLO]			; Set address of stacks
  2666 000007F0 A3[7A02]                	MOV	[STACK_ADDR],AX
  2667 000007F3 A1[CA02]                	MOV	AX,[MEMHI]
  2668 000007F6 A3[7C02]                	MOV	[STACK_ADDR+2],AX
  2669                                  
  2670                                  ; 07/07/2019 (Bochs emulator, two harddisks)
  2671                                  ; [MEMHI] = 0BD1h (at thispoint)
  2672                                  
  2673                                  ;	Space for Internal Stack = STACK_COUNT(ENTRYSIZE + STACK_SIZE)
  2674 000007F9 B80800                  	MOV	AX,EntrySize
  2675 000007FC 0306[7802]              	ADD	AX,[STACK_SIZE]
  2676 00000800 8B0E[7602]              	MOV	CX,[STACK_COUNT]
  2677 00000804 F7E1                    	MUL	CX
  2678 00000806 E82B00                  	call	ParaRound		; Convert size to paragraphs
  2679 00000809 0106[CA02]              	ADD	[MEMHI],AX
  2680 0000080D E81B0A                  	call	ROUND			; Check for memory error before
  2681                                  					; continuing
  2682 00000810 E82D00                  	CALL	stackinit		; Initialize hardware stack
  2683                                  
  2684                                  SkipStack:
  2685                                  	;ENDIF
  2686                                  
  2687                                  	; 18/06/2018
  2688                                  	;PUSH	CS
  2689                                  	;POP	DS
  2690                                  	;ASSUME	DS:SYSINITSEG
  2691                                  
  2692                                  ; Allocate rest of memory to system
  2693                                  ;------------------------------------------------------------------------------
  2694 00000813 E8150A                  	call	ROUND
  2695                                  
  2696                                  	; !!! 07/07/2019 - Retro DOS v3.1 !!! by Erdogan Tan
  2697                                  	; (move stack code -destination- address 1024 bytes upward
  2698                                  	;	it is seen as enough to prevent overlap!) 
  2699                                  	; (Note: Currently, I don't know the reason which causes overlap!?)	
  2700                                  
  2701                                  	;add	word [MEMHI],64  ; 64 = 1024/16
  2702                                  
  2703 00000816 8B1E[CA02]              	MOV	BX,[MEMHI]
  2704                                  
  2705                                  ; 07/07/2019 (Bochs emulator, two harddisks)
  2706                                  ; [MEMHI] = 0C5Eh (at thispoint)
  2707                                  
  2708 0000081A A1[CE02]                	MOV	AX,[AREA]
  2709 0000081D 8EC0                    	MOV	ES,AX			;CALC WHAT WE NEEDED
  2710 0000081F 29C3                    	SUB	BX,AX
  2711                                  
  2712                                  ; 09/07/2019 - Retro DOS v3.1 test
  2713                                  ; Z = BX = 02BAh
  2714                                  
  2715 00000821 B44A                    	MOV	AH,SETBLOCK
  2716 00000823 CD21                    	INT	21H			;GIVE THE REST BACK
  2717 00000825 06                      	PUSH	ES
  2718 00000826 8CC0                    	MOV	AX,ES
  2719 00000828 48                      	DEC	AX
  2720 00000829 8EC0                    	MOV	ES,AX			;Point to arena
  2721 0000082B 26C70601000800          	MOV	word [ES:ARENA.OWNER],8	;Set impossible owner
  2722                                  
  2723 00000832 07                      	POP	ES
  2724                                  
  2725                                  	;IF	NOEXEC   ; (NOEXEC = FALSE)
  2726                                  	;MOV	BX,0FFFFH		;ALLOCATE THE REST OF MEM FOR COMMAND
  2727                                  	;MOV	AH,ALLOC
  2728                                  	;INT	21H
  2729                                  	;MOV	AH,ALLOC
  2730                                  	;INT	21H
  2731                                  	;MOV	DS,AX
  2732                                  	;ENDIF
  2733                                  
  2734 00000833 C3                      	retn
  2735                                  
  2736                                  ParaRound:
  2737 00000834 83C00F                  	ADD	AX,15
  2738 00000837 D1D8                    	RCR	AX,1
  2739 00000839 D1E8                    	SHR	AX,1
  2740 0000083B D1E8                    	SHR	AX,1
  2741 0000083D D1E8                    	SHR	AX,1
  2742 0000083F C3                      	retn
  2743                                  
  2744                                  ;-------------------------------------------------------------------------
  2745                                  ; 5/6/86. MSSTACK initialization routine.
  2746                                  	;IF	STACKSW 
  2747                                  
  2748                                  ;INCLUDE STKINIT.INC
  2749                                  
  2750                                  	;ENDIF
  2751                                  ;--------------------------------------------------------------------------
  2752                                  
  2753                                  ; 05/07/2018
  2754                                  
  2755                                  ; ----------------------------------------------------------------------
  2756                                  ; STKINIT.INC - MSDOS 3.3 - 24/07/1987
  2757                                  ; ----------------------------------------------------------------------
  2758                                  ; 10/06/2018 - Retro DOS v3.0
  2759                                  
  2760                                  KERNEL_SEGMENT	equ 0070h
  2761                                  
  2762                                  ; retrodos3.asm (offset addresses in MSDOS.SYS or RETRODOS.SYS)
  2763                                  ; -----------------------------------------------------------
  2764                                  ; Note: These offset addresses must be chanqed when the code 
  2765                                  ; 	in retrodos3.asm (MSDOS.SYS) file will be changed.
  2766                                  INT19SEM equ 05A4h ; 29/06/2019 - retrodos3.txt
  2767                                  ORIG19	 equ 05A8h ; 29/06/2019 - retrodos3.txt
  2768                                  INT19OLD02 equ ORIG19+4
  2769                                  INT19OLD08 equ ORIG19+8
  2770                                  INT19OLD09 equ ORIG19+12
  2771                                  INT19OLD0A equ ORIG19+16
  2772                                  INT19OLD0B equ ORIG19+20
  2773                                  INT19OLD0C equ ORIG19+24
  2774                                  INT19OLD0D equ ORIG19+28
  2775                                  INT19OLD0E equ ORIG19+32
  2776                                  INT19OLD70 equ ORIG19+36
  2777                                  INT19OLD72 equ ORIG19+40
  2778                                  INT19OLD73 equ ORIG19+44
  2779                                  INT19OLD74 equ ORIG19+48
  2780                                  INT19OLD76 equ ORIG19+52
  2781                                  INT19OLD77 equ ORIG19+56
  2782                                  
  2783                                  ; 06/07/2019
  2784                                  RE_INIT	equ 1A86h ; 1AA6h for MSDOS 3.3 IBMBIO.COM
  2785                                  
  2786                                  ; 29/06/2019 - Retro DOS v3.1
  2787                                  		
  2788                                  ; ======================================================================
  2789                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
  2790                                  ; ----------------------------------------------------------------------
  2791                                  ; 27/03/2019 - Retro DOS v4.0
  2792                                  
  2793                                  ; ----------------------------------------------------------------------
  2794                                  ; ibmstack initialization routine.
  2795                                  ;
  2796                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
  2797                                  ;	has been modified. this initialization routine also has to
  2798                                  ;	be modified because for the interrupt level 7 and 15, firstflag
  2799                                  ;	should be set to signal that this interrupt handler is the
  2800                                  ;	first handler hooked to this interrupt vector.
  2801                                  ;	we determine this by looking at the instruction pointed by
  2802                                  ;	this vector. if it is iret, then this handler should be the
  2803                                  ;	first one. in our case, only the interrupt vector 77h is the
  2804                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
  2805                                  ;
  2806                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
  2807                                  ;	some design changes are needed to the above interrupt sharing
  2808                                  ;	method. the above sharing scheme assumes that 1). interrupt
  2809                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
  2810                                  ;	interrupts would only be generated on levels 7 and 15.
  2811                                  ;	these assumptions are not true any more. we have to use the firstflag
  2812                                  ;	for every level of interrupt. we will set the firstflag on the following
  2813                                  ;	conditions:
  2814                                  ;
  2815                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
  2816                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
  2817                                  ;	 c. else if cs:ip points to an iret, then "first"
  2818                                  ;	 d. else if cs:ip points to dummy, then "first"
  2819                                  ;
  2820                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
  2821                                  ;	be equal to the value at f000:ff01. this location is the initial value
  2822                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
  2823                                  ;	the bioses for all of the machines.
  2824                                  ;
  2825                                  ;	system design group requests bios to handle the phantom interrupts.
  2826                                  ;
  2827                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
  2828                                  ;	produced by the bogus adapter card even without interrupt request is
  2829                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
  2830                                  ;	edge triggered mode to latch a pulse and present the interrupt when
  2831                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
  2832                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
  2833                                  ;	2). or, this is caused by adapter cards placing a glitch on the
  2834                                  ;	interrupt line.
  2835                                  ;
  2836                                  ;	to handle those "phantom" interrupts, the main stack code will check
  2837                                  ;	the own firstflag, and if it is not "first" (which means the forward
  2838                                  ;	pointer points to the legal shared interrupt handler), then pass the
  2839                                  ;	control. if it is the first, then the following action should be
  2840                                  ;	taken. we don't have to implement skack logic in this case.
  2841                                  ;
  2842                                  ;	to implement this logic, we rather choose a simple method.
  2843                                  ;	if ont of the above "firstflag" conditions is met, we are not
  2844                                  ;	going to hook this interrupt vector. the reason is if the original
  2845                                  ;	vector points to "iret" and do nothing, we don't need
  2846                                  ;	to implement the stack logic for it. this will simplify implementation
  2847                                  ;	while maintaining compatibility with the old version of dos.
  2848                                  ;	this implies that in the main stack code, there might be a stack code
  2849                                  ;	that will never be used, a dead code.
  2850                                  ;
  2851                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
  2852                                  
  2853                                  stackinit:
  2854                                  	; 01/06/2019 - Retro DOS v4.0
  2855                                  	; SYSINIT:13BCh (MSDOS 6.21, MSDOS.SYS)
  2856                                  
  2857 00000840 50                      	push	ax
  2858 00000841 1E                      	push	ds
  2859 00000842 06                      	push	es
  2860 00000843 53                      	push	bx
  2861 00000844 51                      	push	cx
  2862 00000845 52                      	push	dx
  2863 00000846 57                      	push	di
  2864 00000847 56                      	push	si
  2865 00000848 55                      	push	bp
  2866                                  
  2867                                  ;currently es -> stack code area
  2868                                  
  2869                                  	;mov	ax,[STACK_COUNT]		;defined in cs
  2870                                  	;mov	[es:StackCount],ax		;defined in stack code area
  2871                                  	; 06/06/2019
  2872 00000849 8B0E[7602]              	mov	cx,[STACK_COUNT]
  2873 0000084D 26890E[0200]            	mov	[es:StackCount],cx
  2874                                  
  2875                                  	;mov	ax,[STACK_SIZE]			;in cs
  2876                                  	;mov	[es:StackSize],ax
  2877                                  	; 06/06/2019
  2878 00000852 8B3E[7802]              	mov	di,[STACK_SIZE]
  2879 00000856 26893E[0600]            	mov	[es:StackSize],di  ; *#*
  2880                                  
  2881                                  	;mov	ax,[STACK_ADDR]			; offset
  2882                                  	;mov	[es:Stacks],ax
  2883                                  	; 06/06/2019
  2884 0000085B 8B2E[7A02]              	mov	bp,[STACK_ADDR]			; offset
  2885 0000085F 26892E[0800]            	mov	[es:Stacks],bp
  2886                                  
  2887 00000864 A1[7C02]                	mov	ax,[STACK_ADDR+2]		; segment
  2888 00000867 26A3[0A00]              	mov	[es:Stacks+2],ax
  2889                                  
  2890                                  ; initialize the data fields with the parameters
  2891                                  
  2892                                  ; "firstentry" will always be at stacks
  2893                                  
  2894                                  	;mov	bp,[es:Stacks]			; get offset of stack
  2895 0000086B 26892E[0C00]            	mov	[es:FirstEntry],bp
  2896                                  
  2897                                  ; the stacks will always immediately follow the table entries
  2898                                  
  2899 00000870 B80800                  	mov	ax,EntrySize ; 8
  2900                                  	;mov	cx,[es:StackCount]
  2901 00000873 F7E1                    	mul	cx
  2902 00000875 01E8                    	add	ax,bp
  2903                                  
  2904 00000877 26A3[0400]              	mov	[es:StackAt],ax	 ; *#*
  2905 0000087B 89C3                    	mov	bx,ax
  2906 0000087D 83EB02                  	sub	bx,2
  2907                                  
  2908                                  ; zero the entire stack area to start with
  2909                                  
  2910                                  	;mov	di,[es:StackAt]
  2911                                  	;mov	ax,[es:StackSize]
  2912                                  	; 06/06/2019
  2913 00000880 97                      	xchg	ax,di ; *#*
  2914                                  
  2915 00000881 F7E1                    	mul	cx
  2916 00000883 89C1                    	mov	cx,ax
  2917 00000885 31C0                    	xor	ax,ax
  2918                                  
  2919 00000887 06                      	push	es
  2920 00000888 1F                      	pop	ds				; ds = relocated stack code seg.
  2921                                  
  2922                                  ;now, ds -> stack code area
  2923                                  
  2924 00000889 8E06[0A00]              	mov	es,[Stacks+2]			; get segment of stack area.
  2925 0000088D FC                      	cld
  2926 0000088E F3AA                    	rep	stosb
  2927                                  
  2928 00000890 8B0E[0200]              	mov	cx,[StackCount]
  2929                                  
  2930                                  ; loop for "count" times, building a table entry
  2931                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
  2932                                  ;  cx = number of entries
  2933                                  ;  es:bp => base of stacks - 2
  2934                                  ;  es:bx => first table entry
  2935                                  
  2936                                  buildloop:
  2937                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
  2938 00000894 26C6460000              	mov	byte [es:bp],free
  2939 00000899 26884601                	mov	[es:bp+intlevel],al	; ax = 0
  2940 0000089D 26894602                	mov	[es:bp+savedsp],ax
  2941 000008A1 26894604                	mov	[es:bp+savedss],ax
  2942 000008A5 031E[0600]              	add	bx,[StackSize]
  2943 000008A9 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
  2944 000008AD 26892F                  	mov	[es:bx],bp
  2945 000008B0 83C508                  	add	bp,EntrySize ; 8
  2946                                  
  2947 000008B3 E2DF                    	loop	buildloop
  2948                                  
  2949 000008B5 83ED08                  	sub	bp,EntrySize ; 8
  2950 000008B8 892E[0E00]              	mov	[LastEntry],bp
  2951 000008BC 892E[1000]              	mov	[NextEntry],bp
  2952                                  
  2953 000008C0 1E                      	push	ds
  2954 000008C1 B800F0                  	mov	ax,0F000h		; look at the model byte
  2955 000008C4 8ED8                    	mov	ds,ax
  2956 000008C6 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
  2957 000008CB 1F                      	pop	ds
  2958 000008CC 7504                    	jne	short skip_disablenmis
  2959                                  
  2960 000008CE B007                    	mov	al,07h			; disable convertible nmis
  2961 000008D0 E672                    	out	72h,al
  2962                                  
  2963                                  skip_disablenmis:
  2964 000008D2 31C0                    	xor	ax,ax
  2965 000008D4 8EC0                    	mov	es,ax			;es - segid of vector table at 0
  2966                                  					;ds - relocated stack code segment
  2967 000008D6 FA                      	cli
  2968                                  
  2969                                  	; 01/06/2019 - Retro DOS v4.0
  2970                                  	; SYSINIT:1462h (MSDOS 6.21, MSDOS.SYS)
  2971                                  
  2972                                  	;irp	aa,<02,08,09,70>
  2973                                  	;
  2974                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
  2975                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
  2976                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
  2977                                  	;mov	dx,offset int&aa	;pass where new handler is
  2978                                  	;call	new_init_loop		;adjust the vector to new handler,
  2979                                  	;				;saving pointer to original owner
  2980                                  	;endm
  2981                                  
  2982                                  stkinit_02:
  2983 000008D7 BE0800                  	mov	si,02h*4 ; 8
  2984 000008DA BFAC05                  	mov	di,INT19OLD02
  2985 000008DD BB[1200]                	mov	bx,old02
  2986 000008E0 BA[1600]                	mov	dx,int02
  2987 000008E3 E84901                  	call	new_init_loop
  2988                                  stkinit_08:
  2989 000008E6 BE2000                  	mov	si,08h*4 ; 32
  2990 000008E9 BFB005                  	mov	di,INT19OLD08
  2991 000008EC BB[3800]                	mov	bx,old08
  2992 000008EF BA[3C00]                	mov	dx,int08
  2993 000008F2 E83A01                  	call	new_init_loop
  2994                                  stkinit_09:
  2995 000008F5 BE2400                  	mov	si,09h*4 ; 36
  2996 000008F8 BFB405                  	mov	di,INT19OLD09
  2997 000008FB BB[4100]                	mov	bx,old09
  2998 000008FE BA[4500]                	mov	dx,int09
  2999 00000901 E82B01                  	call	new_init_loop
  3000                                  stkinit_70:
  3001 00000904 BEC001                  	mov	si,70h*4 ; 448
  3002 00000907 BFCC05                  	mov	di,INT19OLD70
  3003 0000090A BB[4E00]                	mov	bx,old70
  3004 0000090D BA[5200]                	mov	dx,int70
  3005 00000910 E81C01                  	call	new_init_loop
  3006                                  
  3007                                  	; 01/06/2019
  3008                                  	; SYSINIT:149Eh (MSDOS 6.21, MSDOS.SYS)
  3009                                  
  3010                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
  3011                                  	;
  3012                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
  3013                                  	;push	ds			;save relocated stack code segment
  3014                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
  3015                                  	;push	ds
  3016                                  	;pop	dx			;dx = segment value
  3017                                  	;	
  3018                                  	;cmp	dx,0
  3019                                  	;jz	int&aa&_first
  3020                                  	;
  3021                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
  3022                                  	;jz	int&aa&_first
  3023                                  	;
  3024                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
  3025                                  	;jz	int&aa&_not_first
  3026                                  	;
  3027                                  	;cmp	dx,0f000h		;rom bios segment
  3028                                  	;jnz	int&aa&_not_first
  3029                                  	;
  3030                                  	;push	es
  3031                                  	;push	dx
  3032                                  	;mov	dx,0f000h
  3033                                  	;mov	es,dx
  3034                                  	;cmp	bx,word ptr es:0ff01h
  3035                                         	;pop	dx
  3036                                  	;pop	es
  3037                                  	;jz	int&aa&_first
  3038                                  	;
  3039                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
  3040                                  	;pop	ds
  3041                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
  3042                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
  3043                                  	;mov	dx, offset int&aa	;pass where new handler is
  3044                                  	;call	new_init_loop		;adjust the vector to new handler, saving
  3045                                  	;				;pointer to original owner.
  3046                                  	;jmp	short int&aa&_end
  3047                                  ;int&aa&_first:				;the first. don't have to hook stack code.
  3048                                  	;pop	ds
  3049                                  ;int&aa&_end:
  3050                                  	;
  3051                                  	;endm
  3052                                  
  3053                                  stkinit_0A:
  3054 00000913 BE2800                  	mov	si,0Ah*4 ; 40
  3055                                  	
  3056                                  	;push	ds
  3057                                  	;
  3058                                  	;lds	bx,[es:si]
  3059                                  	;push	ds
  3060                                  	;pop	dx
  3061                                  	;	
  3062                                  	;cmp	dx,0
  3063                                  	;je	short int_0A_first
  3064                                  	;
  3065                                  	;cmp	byte [bx],0CFh
  3066                                  	;je	short int_0A_first
  3067                                  	;
  3068                                  	;cmp	word [bx+6],424Bh
  3069                                  	;je	short int_0A_not_first
  3070                                  	;
  3071                                  	;cmp	dx,0F000h
  3072                                  	;jne	short int_0A_not_first
  3073                                  	
  3074                                  	;push	es
  3075                                  	;;push	dx
  3076                                  	;;mov	dx,0F000h
  3077                                  	;mov	es,dx
  3078                                  	;cmp	bx,[es:0FF01h]
  3079                                         	;;pop	dx
  3080                                  	;pop	es
  3081                                  	;je	short int_0A_first
  3082                                  
  3083 00000916 E81000                  	call	int_xx_first_check ; 27/03/2019 -  Retro DOS v4.0
  3084 00000919 7339                    	jnc	short int_0A_first
  3085                                  	
  3086                                  int_0A_not_first:
  3087                                  	;pop	ds
  3088 0000091B BFB805                  	mov	di,INT19OLD0A
  3089 0000091E BB[5900]                	mov	bx,old0A
  3090 00000921 BA[5700]                	mov	dx,int0A
  3091 00000924 E80801                  	call	new_init_loop
  3092                                  	
  3093 00000927 EB2B                    	jmp	short int_0A_end
  3094                                  
  3095                                  ; -----------------------------------
  3096                                  	; 27/03/2019 - Retro DOS v4.0
  3097                                  int_xx_first_check:
  3098 00000929 1E                      	push	ds
  3099 0000092A 26C51C                  	lds	bx,[es:si]
  3100 0000092D 1E                      	push	ds
  3101 0000092E 5A                      	pop	dx
  3102                                  		
  3103 0000092F 83FA00                  	cmp	dx,0
  3104 00000932 741E                    	je	short int_xx_first
  3105                                  	
  3106 00000934 803FCF                  	cmp	byte [bx],0CFh
  3107 00000937 7419                    	je	short int_xx_first
  3108                                  	
  3109 00000939 817F064B42              	cmp	word [bx+6],424Bh
  3110 0000093E 7411                    	je	short int_xx_not_first
  3111                                  	
  3112 00000940 81FA00F0                	cmp	dx,0F000h
  3113 00000944 750B                    	jne	short int_xx_not_first
  3114                                  
  3115 00000946 06                      	push	es
  3116                                  	;push	dx
  3117                                  	;mov	dx,0F000h
  3118 00000947 8EC2                    	mov	es,dx
  3119 00000949 263B1E01FF              	cmp	bx,[es:0FF01h]
  3120                                         	;pop	dx
  3121 0000094E 07                      	pop	es
  3122 0000094F 7401                    	je	short int_xx_first
  3123                                  
  3124                                  int_xx_not_first:
  3125 00000951 F9                      	stc
  3126                                  int_xx_first:
  3127 00000952 1F                      	pop	ds
  3128 00000953 C3                      	retn
  3129                                  ; -----------------------------------
  3130                                  
  3131                                  int_0A_first:
  3132                                  	;pop	ds
  3133                                  int_0A_end:
  3134                                  
  3135                                  stkinit_0B:
  3136 00000954 BE2C00                  	mov	si,0Bh*4 ; 44
  3137                                  	
  3138 00000957 E8CFFF                  	call	int_xx_first_check ; 27/03/2019 -  Retro DOS v4.0
  3139 0000095A 730C                    	jnc	short int_0B_end ; int_0B_first
  3140                                  	
  3141                                  int_0B_not_first:
  3142 0000095C BFBC05                  	mov	di,INT19OLD0B
  3143 0000095F BB[7100]                	mov	bx,old0B
  3144 00000962 BA[6F00]                	mov	dx,int0B
  3145 00000965 E8C700                  	call	new_init_loop
  3146                                  int_0B_end:
  3147                                  
  3148                                  stkinit_0C:
  3149 00000968 BE3000                  	mov	si,0Ch*4 ; 48
  3150                                  	
  3151 0000096B E8BBFF                  	call	int_xx_first_check
  3152 0000096E 730C                    	jnc	short int_0C_end ; int_0C_first ; 01/06/2019
  3153                                  	
  3154                                  int_0C_not_first:
  3155 00000970 BFC005                  	mov	di,INT19OLD0C
  3156 00000973 BB[8900]                	mov	bx,old0C
  3157 00000976 BA[8700]                	mov	dx,int0C
  3158 00000979 E8B300                  	call	new_init_loop
  3159                                  int_0C_end:
  3160                                  
  3161                                  stkinit_0D:
  3162 0000097C BE3400                  	mov	si,0Dh*4 ; 52
  3163                                  	
  3164 0000097F E8A7FF                  	call	int_xx_first_check
  3165 00000982 730C                    	jnc	short int_0D_end ; int_0D_first
  3166                                  	
  3167                                  int_0D_not_first:
  3168 00000984 BFC405                  	mov	di,INT19OLD0D
  3169 00000987 BB[A100]                	mov	bx,old0D
  3170 0000098A BA[9F00]                	mov	dx,int0D
  3171 0000098D E89F00                  	call	new_init_loop
  3172                                  int_0D_end:
  3173                                  
  3174                                  stkinit_0E:
  3175 00000990 BE3800                  	mov	si,0Eh*4 ; 56
  3176                                  	
  3177 00000993 E893FF                  	call	int_xx_first_check
  3178 00000996 730C                    	jnc	short int_0E_end ; int_0E_first
  3179                                  	
  3180                                  int_0E_not_first:
  3181 00000998 BFC805                  	mov	di,INT19OLD0E
  3182 0000099B BB[B900]                	mov	bx,old0E
  3183 0000099E BA[B700]                	mov	dx,int0E
  3184 000009A1 E88B00                  	call	new_init_loop
  3185                                  int_0E_end:
  3186                                  
  3187                                  stkinit_72:
  3188 000009A4 BEC801                  	mov	si,72h*4 ; 456
  3189                                  	
  3190 000009A7 E87FFF                  	call	int_xx_first_check
  3191 000009AA 730C                    	jnc	short int_72_end ; int_72_first
  3192                                  	
  3193                                  int_72_not_first:
  3194 000009AC BFD005                  	mov	di,INT19OLD72
  3195 000009AF BB[D100]                	mov	bx,old72
  3196 000009B2 BA[CF00]                	mov	dx,int72
  3197 000009B5 E87700                  	call	new_init_loop
  3198                                  int_72_end:
  3199                                  
  3200                                  stkinit_73:
  3201 000009B8 BECC01                  	mov	si,73h*4 ; 460
  3202                                  	
  3203 000009BB E86BFF                  	call	int_xx_first_check
  3204 000009BE 730C                    	jnc	short int_73_end ; int_73_first
  3205                                  	
  3206                                  int_73_not_first:
  3207 000009C0 BFD405                  	mov	di,INT19OLD73
  3208 000009C3 BB[E900]                	mov	bx,old73
  3209 000009C6 BA[E700]                	mov	dx,int73
  3210 000009C9 E86300                  	call	new_init_loop
  3211                                  int_73_end:
  3212                                  
  3213                                  stkinit_74:
  3214 000009CC BED001                  	mov	si,74h*4 ; 464
  3215                                  	
  3216 000009CF E857FF                  	call	int_xx_first_check
  3217 000009D2 730C                    	jnc	short int_74_end ; int_74_first
  3218                                  	
  3219                                  int_74_not_first:
  3220 000009D4 BFD805                  	mov	di,INT19OLD74
  3221 000009D7 BB[0101]                	mov	bx,old74
  3222 000009DA BA[FF00]                	mov	dx,int74
  3223 000009DD E84F00                  	call	new_init_loop
  3224                                  int_74_end:
  3225                                  
  3226                                  stkinit_76:
  3227 000009E0 BED801                  	mov	si,76h*4 ; 472
  3228                                  	
  3229 000009E3 E843FF                  	call	int_xx_first_check
  3230 000009E6 730C                    	jnc	short int_76_end ; int_76_first
  3231                                  	
  3232                                  int_76_not_first:
  3233 000009E8 BFDC05                  	mov	di,INT19OLD76
  3234 000009EB BB[1901]                	mov	bx,old76
  3235 000009EE BA[1701]                	mov	dx,int76
  3236 000009F1 E83B00                  	call	new_init_loop
  3237                                  int_76_end:
  3238                                  
  3239                                  stkinit_77:
  3240 000009F4 BEDC01                  	mov	si,77h*4 ; 476
  3241                                  	
  3242 000009F7 E82FFF                  	call	int_xx_first_check
  3243 000009FA 730C                    	jnc	short int_77_end ; int_77_first
  3244                                  	
  3245                                  int_77_not_first:
  3246 000009FC BFE005                  	mov	di,INT19OLD77
  3247 000009FF BB[3101]                	mov	bx,old77
  3248 00000A02 BA[2F01]                	mov	dx,int77
  3249 00000A05 E82700                  	call	new_init_loop
  3250                                  
  3251                                  int_77_end:
  3252 00000A08 1E                      	push	ds
  3253 00000A09 B800F0                  	mov	ax,0F000h		;loook at the model byte
  3254 00000A0C 8ED8                    	mov	ds,ax
  3255 00000A0E 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;pc convertible?
  3256 00000A13 1F                      	pop	ds
  3257 00000A14 7504                    	jne	short skip_enablenmis
  3258                                  
  3259 00000A16 B027                    	mov	al,27h			; enable convertible nmis
  3260 00000A18 E672                    	out	72h,al
  3261                                  
  3262                                  skip_enablenmis:
  3263 00000A1A FB                      	sti
  3264                                  	;mov	ax,Bios_Data ; 70h
  3265 00000A1B B87000                  	mov	ax,KERNEL_SEGMENT ; 70h
  3266 00000A1E 8ED8                    	mov	ds,ax
  3267                                  
  3268                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
  3269                                  
  3270 00000A20 C606A40501              	mov	byte [INT19SEM],1	; indicate that int 19
  3271                                  					; initialization is complete
  3272                                  
  3273 00000A25 5D                      	pop	bp			; restore all
  3274 00000A26 5E                      	pop	si
  3275 00000A27 5F                      	pop	di
  3276 00000A28 5A                      	pop	dx
  3277 00000A29 59                      	pop	cx
  3278 00000A2A 5B                      	pop	bx
  3279 00000A2B 07                      	pop	es
  3280 00000A2C 1F                      	pop	ds
  3281 00000A2D 58                      	pop	ax
  3282 00000A2E C3                      	retn
  3283                                  
  3284                                  ; 29/06/2019 - Retro DOS v3.1
  3285                                  								
  3286                                  ; ----------------------------------------------------------------------
  3287                                  ; 27/03/2019 - Retro DOS v4.0
  3288                                  
  3289                                  new_init_loop:
  3290                                  
  3291                                  ;input: si=ofset into vector table of the particular int vector being adjusted
  3292                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
  3293                                  ;	dx=ds:offset of intxx, the new interrupt handler
  3294                                  ;	di=offset value of int19old&aa variable in bios.
  3295                                  ;	es=zero, segid of vector table
  3296                                  ;	ds=relocated stack code segment
  3297                                  
  3298 00000A2F 268B04                  	mov	ax,[es:si]		;remember offset in vector
  3299 00000A32 8907                    	mov	[bx],ax			; to original owner in ds
  3300 00000A34 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
  3301 00000A38 894702                  	mov	[bx+2],ax		; to original owner in ds
  3302                                  
  3303 00000A3B 1E                      	push	ds
  3304                                  	;mov	ax,Bios_Data ; 70h
  3305 00000A3C B87000                  	mov	ax,KERNEL_SEGMENT ; 70h
  3306 00000A3F 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
  3307 00000A41 268B04                  	mov	ax,[es:si]		;int 19 handler
  3308 00000A44 8905                    	mov	[di],ax
  3309 00000A46 268B4402                	mov	ax,[es:si+2]
  3310 00000A4A 894502                  	mov	[di+2],ax
  3311 00000A4D 1F                      	pop	ds
  3312                                  
  3313 00000A4E 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
  3314 00000A51 268C5C02                	mov	[es:si+2],ds
  3315 00000A55 C3                      	retn
  3316                                  
  3317                                  ; End of STACK initialization routine
  3318                                  ; ----------------------------------------------------------------------
  3319                                  
  3320                                  ;align 16 ; 19/06/2018
  3321                                  
  3322                                  ; ----------------------------------------------------------------------
  3323                                  ; SYSCONF.ASM - MSDOS 3.3 - 24/07/1987
  3324                                  ; ----------------------------------------------------------------------
  3325                                  ; 10/06/2018 - Retro DOS v3.0
  3326                                  ; 25/03/2018 - Retro DOS v2.0
  3327                                  
  3328                                  ;	IF	STACKSW
  3329                                  ;;
  3330                                  ;; Internal Stack Parameters
  3331                                  ;EntrySize		equ	8
  3332                                  ;
  3333                                  ;MinCount		equ	8
  3334                                  ;DefaultCount		equ	9
  3335                                  ;MaxCount		equ	64
  3336                                  ;
  3337                                  ;MinSize 		equ	32
  3338                                  ;DefaultSize		equ	128
  3339                                  ;MaxSize 		equ	512
  3340                                  ;
  3341                                  ;	extrn  stack_count:word
  3342                                  ;	extrn  stack_size:word
  3343                                  ;	extrn  stack_addr:dword
  3344                                  ;
  3345                                  ;	ENDIF
  3346                                  
  3347                                  DOCONF: 		;Take care of Config.sys file.
  3348                                  	
  3349                                  	; 10/06/2018 - Retro DOS v3.0	
  3350                                  	
  3351 00000A56 0E                      	PUSH    CS
  3352 00000A57 1F                              POP     DS
  3353                                  
  3354                                  	; 13/04/2018 - Retro DOS v2.0
  3355                                  	
  3356 00000A58 B80037                  	MOV     AX,(CHAR_OPER*256)	; GET SWITCH CHARACTER
  3357 00000A5B CD21                    	INT     21H
  3358 00000A5D 8816[9002]              	MOV     [COMMAND_LINE+1],DL
  3359                                  
  3360 00000A61 BA[1A15]                        MOV     DX,CONFIG		; NOW POINTING TO FILE DESCRIPTION
  3361 00000A64 B8003D                          MOV     AX,(OPEN*256)		; OPEN FILE "CONFIG.SYS"
  3362 00000A67 F9                              STC				; IN CASE OF INT 24
  3363 00000A68 CD21                            INT     21H                     ; FUNCTION REQUEST
  3364                                          ;JC     SHORT ENDCONF
  3365                                          ;JMP    NOPROB			; PROBLEM WITH OPEN
  3366 00000A6A 730A                    	JNC	short NOPROB
  3367                                  
  3368                                  ENDCONF:
  3369 00000A6C C3                      	RETN
  3370                                  
  3371                                  BADOP:  
  3372 00000A6D BA[B216]                	MOV     DX,BADOPM		; WANT TO PRINT COMMAND ERROR
  3373 00000A70 E8270A                          CALL    PRINT
  3374 00000A73 E98500                          JMP     COFF
  3375                                  
  3376                                  NOPROB:
  3377                                  					; GET FILE SIZE (NOTE < 64K!!)
  3378 00000A76 89C3                    	MOV     BX,AX
  3379 00000A78 31C9                            XOR     CX,CX
  3380 00000A7A 31D2                            XOR     DX,DX
  3381 00000A7C B80242                          MOV     AX,(LSEEK*256)+2
  3382 00000A7F CD21                            INT     21H
  3383 00000A81 A3[C102]                        MOV     [COUNT],AX
  3384 00000A84 31D2                            XOR     DX,DX
  3385 00000A86 B80042                          MOV     AX,(LSEEK*256)		; Reset pointer to beginning of file
  3386 00000A89 CD21                            INT     21H
  3387                                          
  3388 00000A8B 8CCA                    	MOV     DX,CS
  3389 00000A8D A1[C102]                        MOV     AX,[COUNT]
  3390 00000A90 E8A1FD                          call	ParaRound
  3391 00000A93 29C2                            SUB     DX,AX
  3392 00000A95 83EA11                          SUB     DX,11H                  ; ROOM FOR HEADER
  3393 00000A98 8916[8702]              	MOV	[CONFBOT],DX		; Config starts here
  3394 00000A9C E8C8FA                  	CALL	TEMPCDS 		; Finally get CDS to "safe" location
  3395                                  
  3396 00000A9F 2E8B16[8702]                    MOV	DX,[CS:CONFBOT] ; 19/06/2018
  3397 00000AA4 8EDA                            MOV     DS,DX
  3398 00000AA6 8EC2                            MOV     ES,DX
  3399 00000AA8 31D2                            XOR     DX,DX
  3400 00000AAA 2E8B0E[C102]            	MOV	CX,[CS:COUNT] ; 19/06/2018
  3401 00000AAF B43F                            MOV     AH,READ
  3402 00000AB1 F9                              STC                             ; IN CASE OF INT 24
  3403 00000AB2 CD21                            INT     21H                     ; Function request
  3404 00000AB4 9C                              PUSHF
  3405                                  ;
  3406                                  ; Find the EOF mark in the file. If present, then trim length.
  3407                                  ;	
  3408 00000AB5 50                      	PUSH	AX
  3409 00000AB6 57                      	PUSH	DI
  3410 00000AB7 51                      	PUSH	CX
  3411 00000AB8 B01A                    	MOV	AL,1Ah			; eof mark
  3412 00000ABA 89D7                    	MOV	DI,DX			; point ro buffer
  3413 00000ABC E305                    	JCXZ	PUTEOL			; no chars
  3414 00000ABE F2AE                    	REPNZ	SCASB			; find end
  3415 00000AC0 7501                    	JNZ	SHORT PUTEOL		; none found and count exahusted
  3416                                  ;
  3417                                  ; We found a 1A. Back up
  3418                                  ;
  3419 00000AC2 4F                      	DEC	DI			; backup past 1A
  3420                                  ;
  3421                                  ;  Just for the halibut, stick in an extra EOL
  3422                                  ;
  3423                                  PUTEOL:
  3424 00000AC3 B00D                    	MOV	AL,13
  3425 00000AC5 AA                      	STOSB				; CR
  3426 00000AC6 B00A                    	MOV	AL,10
  3427 00000AC8 AA                      	STOSB				; LF
  3428 00000AC9 29D7                    	SUB	DI,DX			; difference moved
  3429                                  	; 19/06/2018
  3430 00000ACB 2E893E[C102]            	MOV	[CS:COUNT],DI		; new count
  3431                                  ;
  3432                                  ; Restore registers
  3433                                  ;
  3434 00000AD0 59                      	POP	CX
  3435 00000AD1 5F                      	POP	DI
  3436 00000AD2 58                      	POP	AX
  3437                                  
  3438 00000AD3 0E                              PUSH	CS
  3439 00000AD4 1F                              POP	DS
  3440                                  
  3441 00000AD5 50                              PUSH    AX
  3442 00000AD6 B43E                            MOV     AH,CLOSE
  3443 00000AD8 CD21                            INT     21H
  3444 00000ADA 58                              POP     AX
  3445 00000ADB 9D                              POPF
  3446 00000ADC 7204                            JC      SHORT CONFERR		; IF NOT WE'VE GOT A PROBLEM
  3447 00000ADE 39C1                            CMP     CX,AX
  3448 00000AE0 7407                            JZ      SHORT GETCOM		; COULDN'T READ THE FILE
  3449                                  CONFERR:
  3450 00000AE2 BA[1A15]                        MOV     DX,CONFIG		; WANT TO PRINT CONFIG ERROR
  3451 00000AE5 E89409                          CALL    BADFIL
  3452                                  ENDCONV:
  3453                                  	;JMP	ENDCONF
  3454 00000AE8 C3                      	RETN
  3455                                  
  3456                                  GETCOM:
  3457 00000AE9 E84006                          CALL    ORGANIZE                ; ORGANIZE THE FILE
  3458 00000AEC E88404                          CALL    GETCHR
  3459                                  
  3460 00000AEF 72F7                    CONFLP: JC      SHORT ENDCONV
  3461 00000AF1 88C4                            MOV     AH,AL
  3462 00000AF3 E87D04                          CALL    GETCHR
  3463 00000AF6 730A                    	JNC	SHORT TRYB
  3464 00000AF8 E972FF                  	JMP	BADOP
  3465                                  
  3466                                  COFF:   
  3467 00000AFB 0E                      	PUSH    CS
  3468 00000AFC 1F                              POP     DS
  3469 00000AFD E8DF06                          CALL    NEWLINE
  3470 00000B00 EBED                            JMP     SHORT CONFLP
  3471                                  
  3472                                  ;------------------------------------------------------------------------------
  3473                                  ; Buffer command
  3474                                  ;------------------------------------------------------------------------------
  3475                                  TRYB:	
  3476 00000B02 80FC42                  	CMP     AH,'B'                  ; BUFFER COMMAND?
  3477 00000B05 7512                            JNZ     SHORT TRYC
  3478 00000B07 E88807                          CALL    GETNUM
  3479 00000B0A 7405                            JZ      SHORT TRYBBAD
  3480 00000B0C 83F864                          CMP     AX,100
  3481 00000B0F 7203                            JB	SHORT SAVEBUF
  3482                                  TRYBBAD:
  3483 00000B11 E959FF                  	JMP	BADOP
  3484                                  SAVEBUF:
  3485 00000B14 A2[8102]                        MOV     [BUFFERS],AL
  3486                                  COFFJ1:
  3487 00000B17 EBE2                            JMP     SHORT COFF
  3488                                  
  3489                                  ;------------------------------------------------------------------------------
  3490                                  ; Break command
  3491                                  ;------------------------------------------------------------------------------
  3492                                  TRYC:   
  3493 00000B19 80FC43                  	CMP     AH,'C'
  3494                                          ;JZ	SHORT GOTC
  3495                                          ;JMP	SHORT TRYD
  3496 00000B1C 7527                    	JNZ	SHORT TRYD
  3497                                  GOTC:
  3498 00000B1E 3C4F                            CMP     AL,'O'                  ; FIRST LETTER OF "ON" OR "OFF"
  3499 00000B20 7520                            JNZ     SHORT TRYCBAD
  3500 00000B22 E84E04                          CALL    GETCHR
  3501 00000B25 721B                            JC      SHORT TRYCBAD
  3502 00000B27 3C4E                            CMP     AL,'N'                  ; SECOND LETTER OF "ON"
  3503 00000B29 750A                            JNZ     SHORT TRYCOFF
  3504 00000B2B B433                            MOV     AH,SET_CTRL_C_TRAPPING  ; TURN ON CONTROL-C CHECK
  3505 00000B2D B001                            MOV     AL,1
  3506 00000B2F 88C2                            MOV     DL,AL
  3507 00000B31 CD21                            INT     21H
  3508                                  COFFJ2:
  3509 00000B33 EBC6                    	JMP	SHORT COFF
  3510                                  TRYCOFF: 
  3511 00000B35 3C46                    	CMP	AL,'F'
  3512 00000B37 7509                    	JNZ	SHORT TRYCBAD		; Check for "OFF"
  3513 00000B39 E83704                  	CALL	GETCHR
  3514 00000B3C 7204                    	JC	SHORT TRYCBAD
  3515 00000B3E 3C46                    	CMP	AL,'F'
  3516 00000B40 74F1                    	JZ	SHORT COFFJ2
  3517                                  TRYCBAD:
  3518 00000B42 E928FF                  	JMP	BADOP
  3519                                  
  3520                                  ;------------------------------------------------------------------------------
  3521                                  ; Device command
  3522                                  ;------------------------------------------------------------------------------
  3523                                  
  3524                                  ; 10/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
  3525                                  
  3526                                  TRYD:   
  3527 00000B45 80FC44                  	CMP     AH,'D'
  3528 00000B48 7403                            JZ      SHORT GOTD
  3529 00000B4A E9E501                          JMP     TRYQ
  3530                                  GOTD:   
  3531 00000B4D 8CCB                    	MOV     BX,CS
  3532 00000B4F 8EDB                            MOV     DS,BX
  3533                                  
  3534 00000B51 8936[E202]                      MOV     [BPB_ADDR],SI
  3535 00000B55 8C06[E402]                      MOV     [BPB_ADDR+2],ES
  3536                                  
  3537 00000B59 E8CF06                          CALL    ROUND
  3538                                  
  3539 00000B5C 31C0                    	XOR     AX,AX
  3540 00000B5E A3[6802]                        MOV     [ENTRY_POINT],AX
  3541 00000B61 A1[CA02]                        MOV     AX,[MEMHI]
  3542 00000B64 A3[6A02]                        MOV     [ENTRY_POINT+2],AX	; SET ENTRY POINT
  3543                                  
  3544                                  	; 01/05/2018 (NOEXEC = FALSE)
  3545                                          ;IF     NOT NOEXEC
  3546 00000B67 A3[CC02]                        MOV	[LDOFF],AX		; SET LOAD OFFSET
  3547                                          ;ENDIF
  3548                                  
  3549 00000B6A 06                              PUSH    ES
  3550 00000B6B 1F                              POP     DS
  3551 00000B6C 89F2                            MOV     DX,SI                   ; DS:DX POINTS TO FILE NAME
  3552                                  
  3553                                          ;IF	NOEXEC
  3554                                          ;LES	BX,[CS:MEMLO]
  3555                                          ;CALL	LDFIL			; LOAD IN THE DEVICE DRIVER
  3556                                          ;ELSE
  3557                                  
  3558                                  ; We are going to open the cdevice driver and size it as is done
  3559                                  ;  in LDFIL. The reason we must do this is that EXEC does NO checking
  3560                                  ;  for us. We must make sure there is room to load the device without
  3561                                  ;  trashing SYSINIT. This code is not
  3562                                  ;  perfect (for instance .EXE device drivers are possible) because
  3563                                  ;  it does its sizing based on the assumption that the file being loaded
  3564                                  ;  is a .COM file. It is close enough to correctness to be usable.
  3565                                  
  3566 00000B6E 8EC0                    	MOV	ES,AX			;ES:0 is LOAD addr
  3567 00000B70 B8003D                  	MOV	AX,OPEN*256		;OPEN THE FILE
  3568 00000B73 F9                      	STC				;IN CASE OF INT 24
  3569 00000B74 CD21                    	INT	21H
  3570 00000B76 724A                    	JC	short BADLDRESET
  3571 00000B78 89C3                    	MOV	BX,AX			;Handle in BX
  3572 00000B7A 52                      	PUSH	DX			; Save pointer to name
  3573 00000B7B 31C9                    	XOR	CX,CX
  3574 00000B7D 31D2                    	XOR	DX,DX
  3575 00000B7F B80242                  	MOV	AX,(LSEEK*256)+2
  3576 00000B82 F9                      	STC				;IN CASE OF INT 24
  3577 00000B83 CD21                    	INT	21H			; Get file size in DX:AX
  3578 00000B85 7308                    	JNC	short GO_AHEAD_LOAD
  3579 00000B87 B43E                    	MOV	AH,CLOSE		; Close file
  3580 00000B89 CD21                    	INT	21H
  3581 00000B8B 5A                      	POP	DX			; Clean stack
  3582 00000B8C F9                      	STC				; Close may clear carry
  3583 00000B8D EB33                    	JMP	SHORT BADLDRESET
  3584                                  
  3585                                  GO_AHEAD_LOAD:
  3586                                      ; Convert size in DX:AX to para in AX
  3587 00000B8F 83C00F                  	ADD	AX,15			; Round up size for conversion to para
  3588 00000B92 83D200                  	ADC	DX,0
  3589 00000B95 B104                    	MOV	CL,4
  3590 00000B97 D3E8                    	SHR	AX,CL
  3591 00000B99 B10C                    	MOV	CL,12
  3592 00000B9B D3E2                    	SHL	DX,CL			; Low nibble of DX to high nibble
  3593 00000B9D 09D0                    	OR	AX,DX			; AX is now # of para for file
  3594                                  
  3595 00000B9F 8CC1                    	MOV	CX,ES			; CX:0 is xaddr
  3596 00000BA1 01C1                    	ADD	CX,AX			; New device will take up to here
  3597 00000BA3 7207                    	JC	short MEM_ERRJY		; WOW!!!!
  3598 00000BA5 2E3B0E[8902]            	CMP	CX,[CS:ALLOCLIM]
  3599 00000BAA 7203                    	JB	short OKLDX
  3600                                  MEM_ERRJY:
  3601 00000BAC E99E06                  	JMP	MEM_ERR
  3602                                  OKLDX:
  3603 00000BAF 5A                      	POP	DX			; Recover name pointer
  3604 00000BB0 B43E                    	MOV	AH,CLOSE		; Close file
  3605 00000BB2 CD21                    	INT	21H
  3606 00000BB4 8CCB                    	MOV	BX,CS
  3607 00000BB6 8EC3                            MOV	ES,BX
  3608 00000BB8 BB[CA02]                        MOV	BX,PRMBLK		; ES:BX POINTS TO PARAMETERS
  3609 00000BBB B003                            MOV	AL,3
  3610 00000BBD B44B                            MOV	AH,EXEC
  3611 00000BBF F9                              STC				; IN CASE OF INT 24
  3612 00000BC0 CD21                            INT	21H                     ; LOAD IN THE DEVICE DRIVER
  3613                                          ;ENDIF
  3614                                  
  3615                                  BADLDRESET:
  3616 00000BC2 1E                              PUSH    DS
  3617 00000BC3 07                              POP     ES                      ; ES:SI BACK TO CONFIG.SYS
  3618 00000BC4 0E                              PUSH    CS
  3619 00000BC5 1F                              POP     DS                      ; DS BACK TO SYSINIT
  3620 00000BC6 730F                            JNC     SHORT GOODLD
  3621                                  BADBRK: 
  3622 00000BC8 26803C0D                	cmp	BYTE [ES:SI], 13	; file name is CR?
  3623 00000BCC 7503                    	jne	SHORT BADBRK_1		;(entered "device=" without filename)
  3624 00000BCE E99CFE                  	jmp	BADOP			;"Unrecognized command in CONFIG.SYS"
  3625                                  BADBRK_1:
  3626 00000BD1 E8AC08                  	CALL    BADLOAD
  3627 00000BD4 E924FF                          JMP     COFF
  3628                                  GOODLD: 
  3629 00000BD7 06                      	PUSH    ES                      ; INITIALIZE THE DEVICE
  3630 00000BD8 56                              PUSH    SI
  3631                                  RESTORE:
  3632 00000BD9 268A1C                  	MOV	BL,[ES:SI]		;   while ((c=*p) != 0)
  3633 00000BDC 08DB                    	OR	BL,BL
  3634 00000BDE 7403                    	JZ	SHORT GOT
  3635 00000BE0 46                      	INC	SI			;	p++;
  3636 00000BE1 EBF6                    	JMP	SHORT RESTORE
  3637                                  GOT:	
  3638 00000BE3 26C60420                	MOV	BYTE [ES:SI], ' '	;   *p = ' ';
  3639                                  
  3640 00000BE7 06                      	PUSH    ES
  3641 00000BE8 56                              PUSH    SI        
  3642 00000BE9 0E                      	PUSH    CS
  3643 00000BEA 07                              POP     ES
  3644 00000BEB BB0600                          MOV     BX,SYSDEV.STRAT
  3645 00000BEE E86706                          CALL    CALLDEV			;   CallDev (SDevStrat);
  3646 00000BF1 BB0800                          MOV     BX,SYSDEV.INT
  3647 00000BF4 E86106                          CALL    CALLDEV			;   CallDev (SDevInt);
  3648 00000BF7 5E                      	POP	SI
  3649 00000BF8 1F                      	POP	DS
  3650 00000BF9 C60400                  	MOV	BYTE [SI],0		;   *p = 0;
  3651                                  		
  3652 00000BFC 0E                              PUSH    CS
  3653 00000BFD 1F                              POP     DS
  3654 00000BFE A1[E002]                	MOV     AX,[BREAK_ADDR+2]	; REMOVE THE INIT CODE
  3655 00000C01 3B06[7E02]                      CMP     AX,[MEMORY_SIZE]
  3656 00000C05 7204                            JB      SHORT BREAKOK
  3657 00000C07 5E                              POP     SI
  3658 00000C08 07                              POP     ES
  3659 00000C09 EBBD                            JMP     SHORT BADBRK
  3660                                  BREAKOK:
  3661 00000C0B C516[6802]                      LDS     DX,[ENTRY_POINT]        ; SET DS:DX TO HEADER
  3662 00000C0F 89D6                            MOV     SI,DX
  3663 00000C11 83C604                          ADD     SI,SYSDEV.ATT		; DS:SI POINTS TO ATTRIBUTES
  3664 00000C14 2EC43E[6402]                    LES     DI,[CS:DOSINFO]         ; ES:DI POINT TO DOS INFO
  3665 00000C19 8B04                            MOV     AX,[SI]			; GET ATTRIBUTES
  3666 00000C1B A90080                          TEST    AX,DEVTYP               ; TEST IF BLOCK DEV
  3667 00000C1E 7422                            JZ      SHORT ISBLOCK
  3668 00000C20 E8E705                  	CALL	SET_BREAK		; Go ahead and alloc mem for device
  3669 00000C23 7225                    	JC	SHORT ERASE_DEV
  3670 00000C25 A90100                          TEST    AX,ISCIN                ; IS IT A CONSOLE IN?
  3671 00000C28 7408                            JZ      SHORT TRYCLK
  3672 00000C2A 2689550C                        MOV     [ES:DI+SYSI_CON],DX
  3673 00000C2E 268C5D0E                        MOV     [ES:DI+SYSI_CON+2],DS
  3674                                  
  3675                                  TRYCLK: 
  3676 00000C32 A90800                  	TEST    AX,ISCLOCK              ; IS IT A CLOCK DEVICE?
  3677 00000C35 7408                            JZ      SHORT GOLINK
  3678 00000C37 26895508                        MOV     [ES:DI+SYSI_CLOCK],DX
  3679 00000C3B 268C5D0A                        MOV     [ES:DI+SYSI_CLOCK+2],DS
  3680                                  GOLINK: 
  3681 00000C3F E9C000                  	JMP	LINKIT
  3682                                  
  3683                                  ISBLOCK:
  3684 00000C42 2EA0[DD02]                      MOV     AL,[CS:UNITCOUNT]	; IF NO UNITS FOUND, ERASE THE DEVICE
  3685 00000C46 08C0                            OR      AL,AL
  3686 00000C48 7506                            JNZ     SHORT PERDRV
  3687                                  ERASE_DEV:					
  3688 00000C4A B8FFFF                          MOV     AX,-1			; No call to SET_BREAK yet, so no alloc
  3689 00000C4D E9D700                  	JMP	ENDDEV
  3690                                  
  3691                                  PERDRV:
  3692 00000C50 98                              CBW
  3693 00000C51 89C1                            MOV     CX,AX
  3694 00000C53 88E6                            MOV     DH,AH
  3695 00000C55 268A5520                        MOV     DL,[ES:DI+SYSI_NUMIO]	; GET NUMBER OF DEVICES
  3696 00000C59 88D4                    	MOV	AH,DL
  3697 00000C5B 00C4                    	ADD	AH,AL			; Check for too many devices
  3698 00000C5D 80FC1A                  	CMP	AH,26			; 'A' - 'Z' is 26 devices
  3699 00000C60 760A                    	JBE	SHORT OK_BLOCK
  3700 00000C62 0E                      	PUSH	CS
  3701 00000C63 1F                      	POP	DS
  3702 00000C64 BA[B717]                	MOV	DX,BADBLOCK
  3703 00000C67 E83008                  	CALL	PRINT
  3704 00000C6A EBDE                    	JMP	SHORT ERASE_DEV
  3705                                  
  3706                                  OK_BLOCK:
  3707 00000C6C E89B05                  	CALL	SET_BREAK		; Alloc the device
  3708 00000C6F 26004520                	ADD	[ES:DI+SYSI_NUMIO],AL	; UPDATE THE AMOUNT
  3709 00000C73 2E0006[E602]            	ADD	[CS:DriveNumber],AL	; remember amount for next device
  3710 00000C78 2EC51E[E202]                    LDS     BX,[CS:BPB_ADDR]        ; POINT TO BPB ARRAY
  3711                                  PERUNIT:
  3712 00000C7D 2EC42E[6402]                    LES     BP,[CS:DOSINFO]
  3713                                  	;LES	BP,[ES:BP+SYSI_DPB]	; GET FIRST DPB
  3714 00000C82 26C46E00                	les	bp,[es:bp] ; 05/07/2019
  3715                                  SCANDPB:
  3716 00000C86 26837E18FF              	CMP     WORD [ES:BP+DPB.NEXT_DPB],-1
  3717 00000C8B 7406                            JZ      SHORT FOUNDPB
  3718 00000C8D 26C46E18                        LES     BP,[ES:BP+DPB.NEXT_DPB]
  3719 00000C91 EBF3                            JMP     SHORT SCANDPB
  3720                                  FOUNDPB:
  3721 00000C93 2EA1[C802]                      MOV     AX,[CS:MEMLO]
  3722 00000C97 26894618                        MOV     [ES:BP+DPB.NEXT_DPB],AX
  3723 00000C9B 2EA1[CA02]                      MOV     AX,[CS:MEMHI]
  3724 00000C9F 2689461A                        MOV     [ES:BP+DPB.NEXT_DPB+2],AX
  3725 00000CA3 2EC42E[C802]                    LES     BP,[CS:MEMLO]
  3726 00000CA8 2E8306[C802]20                  ADD     WORD [CS:MEMLO],DPBSIZ
  3727 00000CAE E87A05                  	CALL	ROUND			;Check for alloc error
  3728 00000CB1 26C74618FFFF                    MOV     WORD [ES:BP+DPB.NEXT_DPB],-1
  3729 00000CB7 26C64617FF                      MOV     BYTE [ES:BP+DPB.FIRST_ACCESS],-1
  3730                                  
  3731 00000CBC 8B37                            MOV     SI,[BX]                 ; DS:SI POINTS TO BPB
  3732 00000CBE 43                              INC     BX
  3733 00000CBF 43                              INC     BX                      ; POINT TO NEXT GUY
  3734                                        	;MOV	[ES:BP+DPB.DRIVE],DX
  3735 00000CC0 26895600                	mov	[es:bp],dx ; 05/07/2019
  3736 00000CC4 B453                            MOV     AH,SETDPB               ; HIDDEN SYSTEM CALL
  3737 00000CC6 CD21                            INT     21H
  3738 00000CC8 268B4602                        MOV     AX,[ES:BP+DPB.SECTOR_SIZE]
  3739 00000CCC 06                              PUSH    ES
  3740 00000CCD 2EC43E[6402]                    LES     DI,[CS:DOSINFO]		; ES:DI POINT TO DOS INFO
  3741 00000CD2 263B4510                        CMP     AX,[ES:DI+SYSI_MAXSEC]
  3742 00000CD6 07                              POP     ES
  3743 00000CD7 760E                            JBE     SHORT NOTMAX
  3744 00000CD9 5E                              POP     SI
  3745 00000CDA 07                              POP     ES
  3746 00000CDB BA[D916]                        MOV     DX,BADSIZ_PRE
  3747 00000CDE BB[D616]                        MOV     BX,BADSIZ_POST
  3748 00000CE1 E89F07                          CALL    PRNERR
  3749 00000CE4 E914FE                          JMP	COFF
  3750                                  
  3751                                  NOTMAX: 
  3752 00000CE7 1E                      	PUSH    DS
  3753 00000CE8 52                              PUSH    DX
  3754 00000CE9 2EC516[6802]                    LDS     DX,[CS:ENTRY_POINT]
  3755 00000CEE 26895612                        MOV     [ES:BP+DPB.DRIVER_ADDR],DX
  3756 00000CF2 268C5E14                        MOV     [ES:BP+DPB.DRIVER_ADDR+2],DS
  3757 00000CF6 5A                              POP     DX
  3758 00000CF7 1F                              POP     DS
  3759 00000CF8 42                              INC     DX
  3760 00000CF9 FEC6                            INC     DH
  3761 00000CFB E280                            LOOP    PERUNIT
  3762 00000CFD 0E                      	PUSH	CS
  3763 00000CFE 1F                      	POP	DS
  3764 00000CFF E865F8                  	CALL	TEMPCDS 		; Set CDS for new drives
  3765                                  
  3766                                  LINKIT:
  3767 00000D02 2EC43E[6402]                    LES     DI,[CS:DOSINFO]         ; ES:DI = DOS TABLE
  3768 00000D07 268B4D22                        MOV     CX,[ES:DI+SYSI_DEV] 	; DX:CX = HEAD OF LIST
  3769 00000D0B 268B5524                        MOV     DX,[ES:DI+SYSI_DEV+2]
  3770                                  
  3771 00000D0F 2EC536[6802]                    LDS     SI,[CS:ENTRY_POINT]     ; DS:SI = DEVICE LOCATION
  3772 00000D14 26897522                        MOV     [ES:DI+SYSI_DEV],SI 	; SET HEAD OF LIST IN DOS
  3773 00000D18 268C5D24                        MOV     [ES:DI+SYSI_DEV+2],DS
  3774 00000D1C 8B04                            MOV     AX,[SI]			; GET POINTER TO NEXT DEVICE
  3775 00000D1E 2EA3[6802]                      MOV     [CS:ENTRY_POINT],AX	; AND SAVE IT
  3776                                  
  3777 00000D22 890C                            MOV    [SI],CX			; LINK IN THE DRIVER
  3778 00000D24 895402                          MOV    [SI+2],DX
  3779                                  ENDDEV:
  3780 00000D27 5E                              POP     SI
  3781 00000D28 07                              POP     ES
  3782 00000D29 40                              INC     AX                      ;AX = FFFF (no more devs if YES)?
  3783 00000D2A 7403                            JZ      SHORT COFFJ3
  3784 00000D2C E9A8FE                          JMP	GOODLD			; OTHERWISE PRETEND WE LOADED IT IN
  3785                                  COFFJ3:
  3786                                  COFFV:  
  3787 00000D2F E9C9FD                  	JMP	COFF
  3788                                  
  3789                                  ;------------------------------------------------------------------------------
  3790                                  ; Country command
  3791                                  ;  The syntax is:							  ;3.30
  3792                                  ;	COUNTRY=country id {,codepage {,path}}				  ;3.30
  3793                                  ;	COUNTRY=country id {,,path}	:Default CODEPAGE ID in DOS	  ;3.30
  3794                                  ;------------------------------------------------------------------------------
  3795                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  3796                                  
  3797                                  TRYQ:
  3798                                  	; 10/06/2018 - Retro DOS v3.0
  3799                                   
  3800 00000D32 80FC51                          CMP     AH,'Q'
  3801                                          ;JNZ	SHORT TRYF
  3802 00000D35 7403                    	JZ	short TRYQ_CONT
  3803 00000D37 E91C01                  	JMP	TRYF
  3804                                  TRYQ_CONT:
  3805 00000D3A E85505                          CALL    GETNUM
  3806 00000D3D 744F                            JZ	short TryQBad		; 0 is never a valid code, or number is
  3807                                  					; bad
  3808 00000D3F 89C3                    	MOV	BX,AX			; Country code in BX
  3809                                  					; 5/26/86
  3810 00000D41 BA0000                  	MOV	DX,0			; assume no code page id
  3811 00000D44 E89B05                  	call	SKIP_DELIM		;skip the delimeters after the first num
  3812 00000D47 7239                    	jc	short TryQ_Def_File	;no more characters left? then use default file
  3813 00000D49 3C0D                    	cmp	al,13			;
  3814 00000D4B 7435                    	je	short TryQ_Def_File
  3815 00000D4D 3C0A                    	cmp	al,10
  3816 00000D4F 750A                    	jne	short TRYQ_YES_EXTENDED
  3817 00000D51 FF06[C102]              	inc	word [COUNT] 		;This is for NEWLINE routine in COFF.
  3818 00000D55 FF0E[C302]              	dec	word [CHRPTR]
  3819                                  COFFJ41:
  3820 00000D59 EB27                    	JMP	short TryQ_Def_File	;O.K. no code page, 
  3821                                  					; no path specified.Use default path.    
  3822                                  TRYQ_YES_EXTENDED:
  3823 00000D5B 3C2C                    	cmp	al,','			;was the second comma?
  3824 00000D5D 7505                    	jne	short TRYQ_GETNUM
  3825 00000D5F E88005                  	call	SKIP_DELIM		;Yes, skip ',' and other possible delim
  3826 00000D62 EB38                    	jmp	short TRYQ_PATH 	;and No code page id entered.
  3827                                  TRYQ_GETNUM:
  3828 00000D64 E82B05                  	call	GETNUM
  3829 00000D67 722C                    	jc	short TryQBadCOM	;"Country=xxx,path" will not be accepted.
  3830                                  ;	jc	short TRYQ_PATH		;Codepage is not specified. No code page.
  3831                                  ;					;At this point, AL already contain the
  3832                                  ;					;first char of the PATH.
  3833 00000D69 7423                    	jz	short TryQBad 		;codepage=0 entered. Error
  3834 00000D6B 89C2                    	mov	DX,AX			;save code page in DX
  3835 00000D6D E87205                  	call	SKIP_DELIM		;move CHRPTR to the path string
  3836 00000D70 7210                    	jc	short TryQ_Def_File	;no more char? then use default filename
  3837 00000D72 3C0D                    	cmp	al, 13
  3838 00000D74 740C                    	je	short TryQ_Def_File
  3839 00000D76 3C0A                    	cmp	al, 10	
  3840 00000D78 7522                    	jne	short TRYQ_PATH		;path entered.
  3841 00000D7A FF06[C102]              	inc	word [COUNT]
  3842 00000D7E FF0E[C302]              	dec	word [CHRPTR]
  3843                                  TryQ_Def_File:
  3844 00000D82 52                      	push	dx			;save code page
  3845 00000D83 2EC606[2615]00          	mov	byte [cs:CNTRY_DRV],0 	;flag that the default path has been used!!!
  3846 00000D89 BA[2815]                	mov	dx,CNTRY_ROOT		;the default path
  3847 00000D8C EB3C                    	jmp	short TRYQ_OPEN
  3848                                  
  3849                                  TryQBad:				;"Invalid country code or code page"
  3850 00000D8E F9                      	STC
  3851 00000D8F BA[2017]                	MOV	DX,BADCOUNTRY
  3852 00000D92 E9A800                  	jmp	TryQChkErr
  3853                                  
  3854                                  TryQBadCOM:				;Error in COUNTRY command
  3855 00000D95 F9                      	STC
  3856 00000D96 BA[4617]                	MOV	DX,BADCOUNTRYCOM
  3857 00000D99 E9A100                  	jmp	TryQChkErr
  3858                                  
  3859                                  TRYQ_PATH:				;DS - sysinitseg, ES - CONFBOT,
  3860 00000D9C 8B0E[C102]              	mov	CX,[COUNT]		;AL - the first char of path
  3861 00000DA0 41                      	inc	CX			;BX - country id, DX - codepage id, 0 = No code page
  3862 00000DA1 89F7                    	mov	DI,SI
  3863                                  TRYQ_PATH_LOOP: 			;find the end of path to put 0 after that.
  3864 00000DA3 268A05                  	mov	AL,[ES:DI]
  3865 00000DA6 E80F04                  	call	DELIM
  3866 00000DA9 7409                    	jz	short TRYQ_PATH_END
  3867 00000DAB 3C0D                    	cmp	al, 13
  3868 00000DAD 7405                    	jz	short TRYQ_PATH_END
  3869 00000DAF 47                      	inc	DI
  3870 00000DB0 EBF1                    	jmp	short TRYQ_PATH_LOOP
  3871                                  TryQBad_Brg:
  3872 00000DB2 EBDA                    	jmp	short TryQBad
  3873                                  TRYQ_PATH_END:
  3874 00000DB4 26C60500                	mov	byte [es:di],0		;make it a ASCIIZ string. 
  3875                                  					; (Organize did not handle this string)
  3876 00000DB8 1E                      	push	ds			;switch ds,es
  3877 00000DB9 06                      	push	es
  3878 00000DBA 1F                      	pop	ds
  3879 00000DBB 07                      	pop	es
  3880                                  
  3881 00000DBC BF[2615]                	mov	di,CNTRY_DRV	;move the user specified path to CNTRY_DRV
  3882 00000DBF E8B206                  	call	MOVE_ASCIIZ
  3883                                  
  3884 00000DC2 1E                      	push	ds			;restore ds,es
  3885 00000DC3 06                      	push	es
  3886 00000DC4 1F                      	pop	ds
  3887 00000DC5 07                      	pop	es
  3888                                  
  3889                                  ;	call	 Set_Country_Path	;set CNTRY_DRV
  3890                                  
  3891 00000DC6 52                      	push	dx			;save DX
  3892 00000DC7 BA[2615]                	mov	dx,CNTRY_DRV		;Now DS:DX -> CNTRY_DRV
  3893                                  TRYQ_OPEN:
  3894 00000DCA B8003D                  	mov	ax,3D00h		;open a file
  3895 00000DCD F9                      	stc
  3896 00000DCE CD21                    	int	21h
  3897 00000DD0 5A                      	pop	dx			;restore codepage id
  3898 00000DD1 723F                    	jc	short TryQFileBad	;open failure
  3899                                  
  3900 00000DD3 2EA3[C502]              	mov	[cs:CntryFileHandle],ax ;save file handle
  3901 00000DD7 93                      	xchg	ax,bx			;now, AX = country id, BX = file handle
  3902 00000DD8 2E8B0E[CA02]            	mov	cx,[cs:MEMHI]
  3903 00000DDD 81C18000                	add	cx,128			;I need 2K buffer to handle COUNTRY.SYS
  3904 00000DE1 2E3B0E[8902]            	cmp	cx,[cs:ALLOCLIM]
  3905 00000DE6 7752                    	ja	short TryQMemory	;cannot allocate the buffer for country.sys
  3906                                  
  3907 00000DE8 BE[2615]                	mov	si,CNTRY_DRV		;DS:SI -> CNTRY_DRV
  3908 00000DEB 803C00                  	cmp	byte [si],0 		;default path?
  3909 00000DEE 7502                    	jne	short TRYQ_Set_for_DOS
  3910 00000DF0 46                      	inc	si
  3911 00000DF1 46                      	inc	si			;DS:SI -> CNTRY_ROOT
  3912                                  TRYQ_Set_for_DOS:
  3913 00000DF2 2EC43E[7202]            	les	di,[cs:SYSI_Country]	;ES:DI -> country info tab in DOS
  3914 00000DF7 57                      	push	di			;save di
  3915 00000DF8 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys
  3916 00000DFB E87606                  	call	MOVE_ASCIIZ		;Set the path to COUNTRY.SYS in DOS.
  3917 00000DFE 5F                      	pop	di			;ES:DI -> country info tab again.
  3918 00000DFF 2E8B0E[CA02]            	mov	cx,[cs:MEMHI]
  3919 00000E04 8ED9                    	mov	ds, cx
  3920 00000E06 31F6                    	xor	si, si			;DS:SI -> 2K buffer to be used.
  3921 00000E08 E8F504                  	call	SetDOSCountryInfo	;now do the job!!!
  3922 00000E0B 7330                    	jnc	short TryQChkErr	;read error or could not find country,
  3923                                  					;	code page combination
  3924 00000E0D 83F9FF                  	cmp	cx, -1			;Could not find matching country_id,code page?
  3925 00000E10 74A0                    	je	short TryQBad_Brg	;then "Invalid country code or code page"
  3926                                  TryQFileBad:
  3927 00000E12 2E803E[2615]00          	cmp	byte [cs:CNTRY_DRV],0	;Is the default file used?
  3928 00000E18 740F                    	je	short TryQDefBad
  3929 00000E1A 2E8B36[8702]            	mov	si,[cs:CONFBOT]
  3930 00000E1F 8EC6                    	mov	es,si
  3931 00000E21 2E8B36[C302]            	mov	si,[cs:CHRPTR]
  3932 00000E26 4E                      	dec	si			;ES:SI -> path in CONFBOT
  3933 00000E27 EB05                    	jmp	short TryQBADLOAD
  3934                                  TryQDefBad:				;Default file has been used.
  3935 00000E29 0E                      	push	cs
  3936 00000E2A 07                      	pop	es
  3937 00000E2B BE[2815]                	mov	si,CNTRY_ROOT		;ES:SI -> \COUNTRY.SYS in SYSINIT_SEG
  3938                                  TryQBADLOAD:
  3939 00000E2E E84F06                  	call	BADLOAD 		;DS will be restored to SYSINIT_SEG
  3940 00000E31 2E8B0E[8702]            	mov	cx,[cs:CONFBOT]
  3941 00000E36 8EC1                    	mov	es, cx			;Restore ES -> CONFBOT.
  3942 00000E38 EB11                    	jmp	short CoffJ4
  3943                                  TryQMemory:
  3944 00000E3A BA[6317]                	MOV	DX,INSUFMEMORY
  3945                                  TryQChkErr:
  3946 00000E3D 2E8B0E[8702]            	mov	cx,[cs:CONFBOT]
  3947 00000E42 8EC1                    	mov	es,cx			;restore ES -> CONFBOT seg
  3948 00000E44 0E                      	push	cs
  3949 00000E45 1F                      	pop	ds			;restore DS to SYSINIT_SEG
  3950 00000E46 7303                    	jnc	short CoffJ4		;if no error, then exit
  3951 00000E48 E84F06                  	call	PRINT			;else show error message
  3952                                  CoffJ4:
  3953 00000E4B 8B1E[C502]              	mov	bx,[CntryFileHandle]
  3954 00000E4F B43E                    	mov	ah,3Eh
  3955 00000E51 CD21                    	int	21h			;close a file. Don't care even if it fails.
  3956 00000E53 E9A5FC                  	JMP	COFF
  3957                                  
  3958                                  ;------------------------------------------------------------------------------
  3959                                  ; Files command
  3960                                  ;------------------------------------------------------------------------------
  3961                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  3962                                  
  3963                                  TRYF:
  3964 00000E56 80FC46                          CMP     AH,'F'
  3965 00000E59 7516                    	JNZ	SHORT TRYL
  3966 00000E5B E83404                  	CALL    GETNUM
  3967 00000E5E 83F805                  	CMP	AX,5
  3968 00000E61 720B                    	JB	SHORT TRYFBAD		; Gotta have at least 5
  3969 00000E63 3D0001                  	CMP	AX,256
  3970 00000E66 7306                    	JAE	SHORT TRYFBAD		; Has to be a byte
  3971 00000E68 A2[8302]                	MOV	[FILES],AL
  3972                                  COFFJ5: 
  3973 00000E6B E98DFC                  	JMP	COFF
  3974                                  TRYFBAD:
  3975 00000E6E E9FCFB                  	JMP	BADOP
  3976                                  
  3977                                  ;------------------------------------------------------------------------------
  3978                                  ; LastDrive command
  3979                                  ;------------------------------------------------------------------------------
  3980                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  3981                                  
  3982                                  TRYL:
  3983 00000E71 80FC4C                  	CMP	AH,'L'
  3984 00000E74 7515                    	JNZ	SHORT TRYP
  3985 00000E76 0C20                    	OR	AL,020h
  3986 00000E78 2C61                    	SUB	AL,'a'
  3987 00000E7A 720C                    	JB	SHORT TRYLBAD
  3988 00000E7C FEC0                    	INC	AL
  3989 00000E7E 3C1A                    	CMP	AL,26			; a-z are allowed
  3990 00000E80 7706                    	JA	SHORT TRYLBAD
  3991 00000E82 A2[8602]                	MOV	[NUM_CDS],AL
  3992                                  COFFJ6: 
  3993 00000E85 E973FC                  	JMP	COFF
  3994                                  TRYLBAD:
  3995 00000E88 E9E2FB                  	JMP	BADOP
  3996                                  
  3997                                  ;-------------------------------------------------------------------------------
  3998                                  ; Setting Drive Parameters
  3999                                  ;-------------------------------------------------------------------------------
  4000                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  4001                                  
  4002                                  TRYP:
  4003 00000E8B 80FC50                  	CMP	AH,'P'
  4004 00000E8E 7510                    	JNZ	SHORT TRYK
  4005 00000E90 E83601                  	CALL	PARSELINE
  4006 00000E93 72F3                    	JC	SHORT TRYLBAD
  4007 00000E95 E8F700                  	CALL	SETPARMS
  4008 00000E98 E81601                  	CALL	DIDDLEBACK
  4009 00000E9B 72EB                    	JC	SHORT TRYLBAD
  4010 00000E9D E95BFC                  	JMP	COFF
  4011                                  
  4012                                  ;-------------------------------------------------------------------------------
  4013                                  ; Setting Internal Stack Parameters
  4014                                  ; STACK=M,N where
  4015                                  ;	M is the number of stacks (range 8 to 64, default 9)
  4016                                  ;	N is the stack size (range 32 to 512 bytes, default 128)
  4017                                  ;  5/5/86: STACKS=0,0 implies no stack installation.			  ;3.30
  4018                                  ;	Any combinations that are not within the specified limits will	  ;3.30
  4019                                  ;	result in "Unrecognized command" error.                    
  4020                                  ;-------------------------------------------------------------------------------
  4021                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  4022                                  
  4023                                  TRYK:
  4024 00000EA0 80FC4B                  	CMP	AH,'K'
  4025                                  	;JNZ	short TRYW
  4026 00000EA3 7559                    	JNZ	short TRYS ; 03/08/2019
  4027                                  
  4028                                  	;IF	STACKSW
  4029                                  
  4030 00000EA5 C606[B002]2C            	MOV	byte [SEPCHR],','
  4031 00000EAA E8E503                  	call	GETNUM			; Get number of stacks
  4032 00000EAD C606[B002]00            	MOV	byte [SEPCHR],0
  4033 00000EB2 83F800                  	cmp	ax, 0			; 5/5/86
  4034 00000EB5 740A                    	je	short TRYK_0		; Let's accept 0.
  4035 00000EB7 83F808                  	CMP	AX,MinCount		; 8 <= Number of Stacks <= 64
  4036 00000EBA 7239                    	JB	short TryKBad
  4037 00000EBC 83F840                  	CMP	AX,MaxCount
  4038 00000EBF 7734                    	JA	short TryKBad
  4039                                  TRYK_0:
  4040 00000EC1 A3[7602]                	MOV	[STACK_COUNT],AX
  4041                                  ;
  4042                                  ; Skip delimiters after the ,
  4043                                  ;
  4044 00000EC4 E81B04                  	call	SKIP_DELIM
  4045 00000EC7 722C                    	JC	short TryKBad
  4046                                  
  4047 00000EC9 E8C603                  	call	GETNUM			; Get size of individual stack
  4048 00000ECC 7227                    	JC	short TryKBad 		; Number bad
  4049                                  
  4050 00000ECE 83F800                  	cmp	ax, 0			; 5/5/86
  4051 00000ED1 740A                    	je	short TRYK_SIZE0	; 5/5/86. Accept 0
  4052                                  
  4053 00000ED3 83F820                  	CMP	AX,MinSize		; 32 <= Stack Size <= 512
  4054 00000ED6 721D                    	JB	short TryKBad
  4055 00000ED8 3D0002                  	CMP	AX,MaxSize
  4056 00000EDB 7718                    	JA	short TryKBad
  4057                                  TRYK_SIZE0:
  4058 00000EDD A3[7802]                	MOV	[STACK_SIZE],AX
  4059 00000EE0 83F800                  	cmp	ax,0
  4060 00000EE3 7409                    	je	short TRYK_BOTH0
  4061                                  TRYK_OK:
  4062 00000EE5 C706[7A02]FFFF          	mov	word [STACK_ADDR], -1	;set flag. user entered stacks=
  4063 00000EEB E90DFC                  	JMP	COFF
  4064                                  TRYK_BOTH0:
  4065 00000EEE 833E[7602]00            	cmp	word [STACK_COUNT],0 	;stack_size=0. Stack_Count=0 too?
  4066 00000EF3 74F0                    	je	short TRYK_OK 		;yes. accepted.
  4067                                  TryKBad:
  4068 00000EF5 BA[D217]                	MOV	DX,BADSTACK		; 5/26/86 "Invalid stack parameter"
  4069 00000EF8 E89F05                  	call	PRINT
  4070 00000EFB E9FDFB                  	JMP	COFF
  4071                                  
  4072                                  	;ENDIF
  4073                                  
  4074                                  ;------------------------------------------------------------------------------
  4075                                  ; Switch command
  4076                                  ;------------------------------------------------------------------------------
  4077                                  
  4078                                  	; 03/08/2019
  4079                                  ;TRYW:
  4080                                  ;	CMP     AH,'W'
  4081                                  ;	JNZ     SHORT TRYA
  4082                                  ;	; 10/06/2018 - Retro DOS 3.0
  4083                                  ;	JMP	BADOP			; no longer implemented (MSDOS 3.3)
  4084                                  
  4085                                  	; 01/04/2018 - Retro DOS 2.0
  4086                                  ;	MOV     DL,AL
  4087                                  ;	MOV     AX,(CHAR_OPER*256)+1	; SET SWITCH CHARACTER
  4088                                  ;	MOV     [COMMAND_LINE+1],DL
  4089                                  ;	INT     21H
  4090                                  ;	JMP     COFF
  4091                                  
  4092                                  ;------------------------------------------------------------------------------
  4093                                  ; Availdev command
  4094                                  ;------------------------------------------------------------------------------
  4095                                  
  4096                                  	; 03/08/2019
  4097                                  ;TRYA:
  4098                                  ;	CMP     AH,'A'
  4099                                  ;	JNZ     SHORT TRYS
  4100                                  ;	JMP	BADOP			; no longer implemented (MSDOS 3.3)
  4101                                  
  4102                                  ;	CMP     AL,'F'			; FIRST LETTER OF "FALSE"
  4103                                  ;	JNZ     SHORT COFFJ
  4104                                  ;	MOV     AX,(CHAR_OPER*256)+3	; TURN ON "/DEV" PREFIX
  4105                                  ;	XOR     DL,DL
  4106                                  ;	INT     21H
  4107                                  ;COFFJ7:  
  4108                                  ;	JMP     COFF
  4109                                  
  4110                                  ;------------------------------------------------------------------------------
  4111                                  ; shell command
  4112                                  ;------------------------------------------------------------------------------
  4113                                  
  4114                                  TRYS:
  4115 00000EFE 80FC53                          CMP     AH,'S'
  4116 00000F01 752B                            JNZ     SHORT TRYX
  4117 00000F03 C606[9002]00                    MOV     BYTE [COMMAND_LINE+1],0
  4118 00000F08 BF[7415]                        MOV     DI,COMMND + 1
  4119 00000F0B 8845FF                          MOV     [DI-1],AL
  4120                                  STORESHELL:
  4121 00000F0E E86200                          CALL    GETCHR
  4122 00000F11 08C0                            OR      AL,AL
  4123 00000F13 744C                            JZ      SHORT GETSHPARMS
  4124 00000F15 3C20                            CMP     AL," "
  4125 00000F17 7205                            JB      SHORT ENDSH
  4126 00000F19 8805                            MOV     [DI],AL
  4127 00000F1B 47                              INC     DI
  4128 00000F1C EBF0                            JMP     SHORT STORESHELL
  4129                                  
  4130                                  ENDSH:
  4131 00000F1E C60500                          MOV     BYTE [DI],0
  4132 00000F21 E84F00                          CALL    GETCHR
  4133 00000F24 3C0A                            CMP     AL,10
  4134 00000F26 7503                            JNZ     SHORT CONV
  4135 00000F28 E84800                          CALL    GETCHR
  4136                                  CONV:   
  4137 00000F2B E9C1FB                  	JMP     CONFLP
  4138                                  
  4139                                  ;------------------------------------------------------------------------------
  4140                                  ; FCBS Command
  4141                                  ;------------------------------------------------------------------------------
  4142                                  ; SYSCONF.ASM, MSDOS 3.3, 24/07/1987
  4143                                  
  4144                                  TRYX:
  4145                                  	; 10/06/2018 -  Retro DOS v3.0
  4146                                   
  4147                                  	;JMP	BADOP	; 25/03/2018 - Retro DOS v2.0 
  4148                                  
  4149 00000F2E 80FC58                  	CMP	AH,'X'
  4150 00000F31 752B                    	JNZ	SHORT TRYZ
  4151 00000F33 E85C03                  	CALL	GETNUM
  4152 00000F36 7423                    	JZ	SHORT TRYXBAD 		; gotta have at least one
  4153 00000F38 3D0001                  	CMP	AX,256
  4154 00000F3B 731E                    	JAE	SHORT TRYXBAD 		; Can't be more than 8 bits worth
  4155 00000F3D A2[8402]                	MOV	[FCBS],AL
  4156                                  ;
  4157                                  ; Skip delimiters after the ,
  4158                                  ;
  4159 00000F40 E89F03                  	CALL	SKIP_DELIM
  4160 00000F43 7216                    	JC	SHORT TRYXBAD
  4161 00000F45 E84A03                  	CALL	GETNUM
  4162 00000F48 7211                    	JC	SHORT TRYXBAD		; Number bad (Zero is OK here)
  4163 00000F4A 3D0001                  	CMP	AX,256
  4164 00000F4D 730C                    	JAE	SHORT TRYXBAD
  4165 00000F4F 3A06[8402]              	CMP	AL,[FCBS]
  4166 00000F53 7706                    	JA	SHORT TRYXBAD
  4167 00000F55 A2[8502]                	MOV	[KEEP],AL
  4168 00000F58 E9A0FB                  	JMP	COFF
  4169                                  TRYXBAD:
  4170 00000F5B E90FFB                  	JMP	BADOP
  4171                                  
  4172                                  ;------------------------------------------------------------------------------
  4173                                  ; Bogus command
  4174                                  ;------------------------------------------------------------------------------
  4175                                  
  4176                                  TRYZ:
  4177 00000F5E E90CFB                  	JMP	BADOP
  4178                                  
  4179                                  GETSHPARMS:
  4180 00000F61 C60500                  	MOV     BYTE [DI],0
  4181 00000F64 BF[9002]                	MOV     DI,COMMAND_LINE+1
  4182                                  PARMLOOP:
  4183 00000F67 E80900                          CALL    GETCHR
  4184 00000F6A 3C20                            CMP     AL," "
  4185 00000F6C 72B0                            JB      SHORT ENDSH
  4186 00000F6E 8805                            MOV     [DI],AL
  4187 00000F70 47                              INC     DI
  4188 00000F71 EBF4                            JMP     SHORT PARMLOOP
  4189                                  
  4190                                  GETCHR: 
  4191 00000F73 51                      	PUSH	CX
  4192 00000F74 8B0E[C102]              	MOV     CX,[COUNT] ; 05/07/2018
  4193 00000F78 E312                            JCXZ    NOCHAR
  4194 00000F7A 8B36[C302]                      MOV     SI,[CHRPTR]
  4195 00000F7E 268A04                          MOV     AL,[ES:SI]
  4196 00000F81 FF0E[C102]                      DEC     WORD [COUNT]
  4197 00000F85 FF06[C302]                      INC     WORD [CHRPTR]
  4198 00000F89 F8                              CLC
  4199                                  GET_RET:
  4200 00000F8A 59                      	POP	CX
  4201 00000F8B C3                              RETN
  4202                                  NOCHAR: 
  4203 00000F8C F9                      	STC
  4204 00000F8D EBFB                            JMP	SHORT GET_RET
  4205                                  
  4206                                  ; ----------------------------------------------------------------------
  4207                                  ; SYINIT2.ASM (MSDOS 3.3, 02/02/1988)
  4208                                  ; ----------------------------------------------------------------------
  4209                                  ; 10/06/2018 - Retro DOS v3.0
  4210                                  
  4211                                  ;
  4212                                  ; The following set of routines is used to parse the DRIVPARM = command in
  4213                                  ; the CONFIG.SYS file to change the default drive parameters.
  4214                                  ;
  4215                                  SETPARMS:
  4216 00000F8F 1E                      	push	ds
  4217 00000F90 50                      	push	ax
  4218 00000F91 53                      	push	bx
  4219 00000F92 51                      	push	cx
  4220 00000F93 52                      	push	dx
  4221 00000F94 31DB                    	xor	bx,bx
  4222 00000F96 8A1E[1416]              	mov	bl,[DRIVE]
  4223 00000F9A FEC3                    	inc	bl		; get it correct for IOCTL call (1=A,2=B...)
  4224 00000F9C 0E                      	push	cs
  4225 00000F9D 1F                      	pop	ds
  4226 00000F9E BA[E715]                	mov	dx,DEVICEPARAMETERS
  4227 00000FA1 B444                    	mov	ah,IOCTL
  4228 00000FA3 B00D                    	mov	al,GENERIC_IOCTL
  4229 00000FA5 B508                    	mov	ch,RAWIO
  4230 00000FA7 B140                    	mov	cl,SET_DEVICE_PARAMETERS
  4231 00000FA9 CD21                    	int	21H
  4232 00000FAB 5A                      	pop	dx
  4233 00000FAC 59                      	pop	cx
  4234 00000FAD 5B                      	pop	bx
  4235 00000FAE 58                      	pop	ax
  4236 00000FAF 1F                      	pop	ds
  4237 00000FB0 C3                      	retn
  4238                                  
  4239                                  ;
  4240                                  ; Replace default values for further DRIVPARM commands
  4241                                  ;
  4242                                  DIDDLEBACK:
  4243 00000FB1 C706[EB15]5000          	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_CYLINDERS],80
  4244 00000FB7 C606[E815]02            	mov	byte [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB
  4245 00000FBC C706[E915]0000          	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
  4246 00000FC2 C706[1516]0000          	mov	word [SWITCHES],0	    ; zero all switches
  4247 00000FC8 C3                      	retn
  4248                                  
  4249                                  ;
  4250                                  ; Entry point is ParseLine. AL contains the first character in command line.
  4251                                  ;
  4252                                  PARSELINE:			; don't get character first time
  4253 00000FC9 1E                      	push	ds
  4254 00000FCA 0E                      	push	cs
  4255 00000FCB 1F                      	pop	ds
  4256                                  NextSwtch:
  4257 00000FCC 3C0D                    	cmp	al,13			; carriage return?
  4258 00000FCE 7421                    	jz	short done_line
  4259 00000FD0 3C0A                    	cmp	al,10			; linefeed?
  4260 00000FD2 743D                    	jz	short put_back		; put it back and done
  4261                                  ; Anything less or equal to a space is ignored.
  4262 00000FD4 3C20                    	cmp	al,' '                  ; space?
  4263 00000FD6 7610                    	jbe	short get_next		; skip over space
  4264 00000FD8 3C2F                    	cmp	al,'/'
  4265 00000FDA 7403                    	jz	short getparm
  4266 00000FDC F9                      	stc				; mark error invalid-character-in-input
  4267 00000FDD EB30                    	jmp	short exitpl
  4268                                  
  4269                                  getparm:
  4270 00000FDF E83900                  	call	Check_Switch
  4271 00000FE2 891E[1516]              	mov	[SWITCHES],BX		; save switches read so far
  4272 00000FE6 7207                    	jc	short swterr
  4273                                  get_next:
  4274 00000FE8 E888FF                  	call	GETCHR
  4275 00000FEB 7204                    	jc	short done_line
  4276 00000FED EBDD                    	jmp	short NextSwtch
  4277                                  swterr:
  4278 00000FEF EB1E                    	jmp	short exitpl		; exit if error
  4279                                  
  4280                                  done_line:
  4281 00000FF1 F706[1516]0400          	test	word [SWITCHES],flagdrive  ; see if drive specified
  4282 00000FF7 7503                    	jnz	short okay
  4283 00000FF9 F9                      	stc				; mark error no-drive-specified
  4284 00000FFA EB13                    	jmp	short exitpl
  4285                                  
  4286                                  okay:
  4287 00000FFC A1[1516]                	mov	ax,[SWITCHES]
  4288 00000FFF 83E003                  	and	ax,0003H	    ; get flag bits for changeline and non-rem
  4289 00001002 A3[E915]                	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
  4290 00001005 C706[0D16]0000          	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
  4291 0000100B F8                      	clc			    ; everything is fine
  4292 0000100C E89F00                  	call	SetDeviceParameters
  4293                                  exitpl:
  4294 0000100F 1F                      	pop	ds
  4295 00001010 C3                      	retn
  4296                                  
  4297                                  put_back:
  4298 00001011 FF06[C102]              	inc	word [COUNT]		; one more char to scan
  4299 00001015 FF0E[C302]              	dec	word [CHRPTR]		; back up over linefeed
  4300 00001019 EBD6                    	jmp	short done_line
  4301                                  
  4302                                  ;
  4303                                  ; Processes a switch in the input. It ensures that the switch is valid, and
  4304                                  ; gets the number, if any required, following the switch. The switch and the
  4305                                  ; number *must* be separated by a colon. Carry is set if there is any kind of
  4306                                  ; error.
  4307                                  ;
  4308                                  Check_Switch:
  4309 0000101B E855FF                  	call	GETCHR
  4310 0000101E 7251                    	jc	short err_check
  4311 00001020 24DF                    	and	al,0DFH			; convert it to upper case
  4312 00001022 3C41                    	cmp	al,'A'
  4313 00001024 724B                    	jb	short err_check
  4314 00001026 3C5A                    	cmp	al,'Z'
  4315 00001028 7747                    	ja	short err_check
  4316 0000102A 06                      	push	es
  4317 0000102B 0E                      	push	cs
  4318 0000102C 07                      	pop	es
  4319 0000102D 8A0E[AA16]              	mov	cl,[switchlist]		; get number of valid switches
  4320 00001031 B500                    	mov	ch,0
  4321 00001033 BF[AB16]                	mov	di,1+switchlist		; point to string of valid switches
  4322 00001036 F2AE                    	repne	scasb
  4323 00001038 07                      	pop	es
  4324 00001039 7536                    	jnz	short err_check
  4325 0000103B B80100                  	mov	ax,1
  4326 0000103E D3E0                    	shl	ax,cl		; set bit to indicate switch
  4327 00001040 8B1E[1516]              	mov	bx,[SWITCHES]	 ; get switches so far
  4328 00001044 09C3                    	or	bx,ax		; save this with other switches
  4329 00001046 89C1                    	mov	cx,ax
  4330 00001048 A97C00                  	test	ax,7CH		; test against switches that require number to follow
  4331 0000104B 7420                    	jz	short done_swtch
  4332 0000104D E823FF                  	call	GETCHR
  4333 00001050 721D                    	jc	short err_swtch
  4334 00001052 3C3A                    	cmp	al,':'
  4335 00001054 7519                    	jnz	short err_swtch
  4336 00001056 E81AFF                  	call	GETCHR
  4337 00001059 53                      	push	bx			; preserve switches
  4338 0000105A 2EC606[B002]20          	mov	byte [cs:SEPCHR],' '	; allow space separators
  4339 00001060 E82F02                  	call	GETNUM
  4340 00001063 2EC606[B002]00          	mov	byte [cs:SEPCHR],0
  4341 00001069 5B                      	pop	bx			; restore switches
  4342                                  ; Because GetNum does not consider carriage-return or line-feed as OK, we do
  4343                                  ; not check for carry set here. If there is an error, it will be detected
  4344                                  ; further on (hopefully).
  4345 0000106A E80600                  	call	Process_Num
  4346                                  
  4347                                  done_swtch:
  4348 0000106D F8                      	clc
  4349 0000106E C3                      	retn
  4350                                  
  4351                                  err_swtch:
  4352 0000106F 31CB                    	xor	bx,cx			; remove this switch from the records
  4353                                  err_check:
  4354 00001071 F9                      	stc
  4355 00001072 C3                      	retn
  4356                                  
  4357                                  ;
  4358                                  ; This routine takes the switch just input, and the number following (if any),
  4359                                  ; and sets the value in the appropriate variable. If the number input is zero
  4360                                  ; then it does nothing - it assumes the default value that is present in the
  4361                                  ; variable at the beginning. Zero is OK for form factor and drive, however.
  4362                                  ;
  4363                                  Process_Num:
  4364 00001073 850E[1516]              	test	[SWITCHES],cx		; if this switch has been done before,
  4365 00001077 7533                    	jnz	short done_ret		; ignore this one.
  4366 00001079 F7C10400                	test	cx,flagdrive
  4367 0000107D 7405                    	jz	short try_f
  4368 0000107F A2[1416]                	mov	[DRIVE],al
  4369 00001082 EB28                    	jmp	short done_ret
  4370                                  
  4371                                  try_f:
  4372 00001084 F7C14000                	test	cx,flagff
  4373 00001088 7405                    	jz	short try_t
  4374                                  ; Ensure that we do not get bogus form factors that are not supported
  4375                                  	;cmp	al,Max_Dev_Type
  4376                                  	;ja	short done_ret
  4377 0000108A A2[E815]                	mov	byte [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
  4378 0000108D EB1D                    	jmp	short done_ret
  4379                                  
  4380                                  try_t:
  4381 0000108F 09C0                    	or	ax,ax
  4382 00001091 7419                    	jz	short done_ret	 ; if number entered was 0, assume default value
  4383 00001093 F7C10800                	test	cx,flagcyln
  4384 00001097 7405                    	jz	short try_s
  4385 00001099 A3[EB15]                	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
  4386 0000109C EB0E                    	jmp	short done_ret
  4387                                  
  4388                                  try_s:
  4389 0000109E F7C11000                	test	cx,flagseclim
  4390 000010A2 7405                    	jz	short try_h
  4391 000010A4 A3[1216]                	mov	[SLIM],ax
  4392 000010A7 EB03                    	jmp	short done_ret
  4393                                  ;
  4394                                  ; Must be for number of heads
  4395                                  try_h:
  4396 000010A9 A3[1016]                	mov	[HLIM],ax
  4397                                  
  4398                                  done_ret:
  4399 000010AC F8                      	clc
  4400 000010AD C3                      	retn
  4401                                  
  4402                                  ; 05/07/2018 - Retro DOS v3.0
  4403                                  
  4404                                  ;
  4405                                  ; SetDeviceParameters sets up the recommended BPB in each BDS in the
  4406                                  ; system based on the form factor. It is assumed that the BPBs for the
  4407                                  ; various form factors are present in the BPBTable. For hard files,
  4408                                  ; the Recommended BPB is the same as the BPB on the drive.
  4409                                  ; No attempt is made to preserve registers since we are going to jump to
  4410                                  ; SYSINIT straight after this routine.
  4411                                  ;
  4412                                  SetDeviceParameters:
  4413                                  	; 06/07/2018 - Retro DOS v3.0
  4414 000010AE 06                      	push	es
  4415 000010AF 0E                      	push	cs
  4416 000010B0 07                      	pop	es
  4417                                  ;ASSUME ES:SYSINITSEG
  4418 000010B1 31DB                    	xor	bx,bx
  4419 000010B3 8A1E[E815]              	mov	bl,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICETYPE]
  4420 000010B7 80FB00                  	cmp	bl,DEV_5INCH
  4421 000010BA 7507                    	jnz	short Got_80
  4422 000010BC B92800                  	mov	cx,40			; 48tpi has 40 cylinders
  4423 000010BF 890E[EB15]              	mov	[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_CYLINDERS],cx
  4424                                  Got_80:
  4425 000010C3 D1E3                    	shl	bx,1			; get index into BPB table
  4426                                  	; 06/07/2018
  4427                                  	;mov	si,BPBTable
  4428 000010C5 81C3[9616]              	add	bx,BPBTable
  4429                                  	;mov	si,[si+bx]		; get address of BPB
  4430 000010C9 8B37                    	mov	si,[bx]
  4431                                  Set_RecBPB:
  4432 000010CB BF[EE15]                	mov	di,DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB ; es:di -> BPB
  4433                                  	; 06/07/2018
  4434                                  	;mov	cx,A_BPB.size ; = 31
  4435 000010CE B91900                  	mov	cx,BPBSIZ ; = 25 
  4436 000010D1 FC                      	cld
  4437 000010D2 F3A4                    	repe	movsb
  4438 000010D4 07                      	pop	es
  4439                                  ;ASSUME ES:NOTHING
  4440 000010D5 F706[1516]1000          	test	word [SWITCHES],flagseclim
  4441 000010DB 7406                    	jz	short see_heads
  4442 000010DD A1[1216]                	mov	ax,[SLIM]
  4443 000010E0 A3[FB15]                	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
  4444                                  see_heads:
  4445 000010E3 F706[1516]2000          	test	word [SWITCHES],flagheads
  4446 000010E9 743E                    	jz	short Set_All_Done
  4447 000010EB A1[1016]                	mov	ax,[HLIM]
  4448 000010EE A3[FD15]                	mov	word [DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
  4449                                  ;
  4450                                  ; We need to set the media byte and the total number of sectors to reflect the
  4451                                  ; number of heads. We do this by multiplying the number of heads by the number
  4452                                  ; of 'sectors per head'. This is not a fool-proof scheme!!
  4453                                  ;
  4454 000010F1 89C1                    	mov	cx,ax			; cx has number of heads
  4455 000010F3 FEC9                    	dec	cl			; get it 0-based
  4456 000010F5 A1[F615]                	mov	ax,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
  4457                                  					; this is OK for two heads
  4458 000010F8 D1F8                    	sar	ax,1			; ax contains # of sectors/head
  4459 000010FA D3E0                    	sal	ax,cl
  4460 000010FC 722B                    	jc	short Set_All_Done	; We have too many sectors - overflow!!
  4461 000010FE A3[F615]                	mov	[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
  4462                                  ; Set up correct Media Descriptor Byte
  4463 00001101 80F901                  	cmp	cl,1
  4464 00001104 B3F0                    	mov	bl,0F0H
  4465 00001106 B002                    	mov	al,2			; AL contains sectors/cluster
  4466 00001108 7717                    	ja	short Got_Correct_Mediad
  4467 0000110A 8A1E[F815]              	mov	bl,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
  4468 0000110E 7411                    	je	short Got_Correct_Mediad
  4469                                  ; We have one head - OK for 48tpi medium
  4470 00001110 B001                    	mov	al,1			; AL contains sectors/cluster
  4471 00001112 8A2E[E815]              	mov	ch,[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_DEVICETYPE]
  4472 00001116 80FD00                  	cmp	ch,DEV_5INCH
  4473 00001119 7404                    	jz	short Dec_Mediad
  4474 0000111B B3F0                    	mov	bl,0F0H
  4475 0000111D EB02                    	jmp	short Got_Correct_Mediad
  4476                                  Dec_Mediad:
  4477 0000111F FECB                    	dec	bl			; adjust for one head
  4478                                  Got_Correct_Mediad:
  4479 00001121 881E[F815]              	mov	[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
  4480 00001125 A2[F015]                	mov	[DEVICEPARAMETERS+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al
  4481 00001128 F8                      	clc
  4482                                  Set_All_Done:
  4483 00001129 C3                      	RETN
  4484                                  
  4485                                  ;ASSUME DS:NOTHING, ES:NOTHING
  4486                                  
  4487 0000112A F9                      NOCHAR1: STC
  4488 0000112B C3                      	 retn
  4489                                  
  4490                                  ; ---------------------------------------
  4491                                  
  4492                                  ORGANIZE:
  4493                                  	;mov	cx,[cs:COUNT] ; 05/07/2018
  4494 0000112C 8B0E[C102]                      MOV     CX,[COUNT]
  4495 00001130 E3F8                            JCXZ    NOCHAR1
  4496 00001132 E8B700                          CALL    MAPCASE
  4497 00001135 31F6                            XOR     SI,SI
  4498 00001137 89F7                            MOV     DI,SI
  4499                                  
  4500                                  ORG1:   
  4501 00001139 E86F00                  	CALL    GET                     ; SKIP LEADING CONTROL CHARACTERS
  4502 0000113C 3C20                            CMP     AL,' '
  4503 0000113E 72F9                            JB      SHORT ORG1
  4504                                  
  4505 00001140 51                              PUSH    CX
  4506 00001141 56                              PUSH    SI
  4507 00001142 57                              PUSH    DI
  4508 00001143 89F5                            MOV     BP,SI
  4509 00001145 4D                              DEC     BP
  4510 00001146 BE[9415]                        MOV     SI,COMTAB		; Prepare to search command table
  4511 00001149 B500                            MOV     CH,0
  4512                                  FINDCOM:
  4513 0000114B 89EF                            MOV     DI,BP
  4514 0000114D 8A0C                            MOV     CL,[SI]
  4515 0000114F 46                              INC     SI
  4516 00001150 E30E                            JCXZ    NOCOM
  4517 00001152 F3A6                            REPE    CMPSB
  4518 00001154 9F                              LAHF
  4519 00001155 01CE                            ADD     SI,CX                   ; Bump to next position without affecting flags
  4520 00001157 9E                              SAHF
  4521 00001158 AC                              LODSB                           ; Get indicator letter
  4522 00001159 75F0                            JNZ     SHORT FINDCOM
  4523 0000115B 5F                              POP     DI
  4524 0000115C 5E                              POP     SI
  4525 0000115D 59                              POP     CX
  4526 0000115E EB05                            JMP     SHORT GOTCOM
  4527                                  
  4528                                  NOCOM:
  4529 00001160 5F                              POP     DI
  4530 00001161 5E                              POP     SI
  4531 00001162 59                              POP     CX
  4532 00001163 B05A                            MOV     AL,'Z'
  4533                                  GOTCOM: 
  4534 00001165 AA                      	STOSB                           ; SAVE INDICATOR CHAR IN BUFFER
  4535                                  
  4536                                  ORG2:   
  4537 00001166 E83A00                  	CALL    GET2                    ; SKIP NAME UNTIL DELIMETER
  4538 00001169 E84C00                          CALL    DELIM                   ;
  4539 0000116C 75F8                            JNZ     SHORT ORG2
  4540                                  
  4541                                  ; 10/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT2.ASM, 02/02/2018)
  4542                                  ;--------------------------------------------------------------bug330a03
  4543                                  ; - isp
  4544                                  ;* the following two lines in the parsing caused the drivparm line to break
  4545                                  ;* we cannot let the "/" character be counted as a delimiter here. 
  4546                                  ;	CALL	GET			;GET CHARS TO RIGHT OF EQUALS SIGN
  4547                                  ;	STOSB
  4548                                  ;--------------------------------------------------------------bug330a03
  4549                                  
  4550                                  ;--------------------------------------------------------------bug330a03
  4551                                  ; - isp
  4552                                  ;* the following lines replaced the lines taken out
  4553 0000116E E83200                  ORG3:	CALL	GET2
  4554 00001171 E84800                  	call	DELIM1
  4555 00001174 74F8                    	jz	short ORG3
  4556 00001176 3C2F                    	cmp	al,'/'
  4557 00001178 7421                    	jz	short ORG_EXT
  4558 0000117A AA                      	stosb
  4559                                  ;--------------------------------------------------------------bug330a03
  4560                                  
  4561                                  ORG4:   
  4562 0000117B E82500                  	CALL    GET2
  4563 0000117E E83700                  	CALL	DELIM ; 26/03/2018
  4564 00001181 7418                    	JZ	SHORT ORG_EXT
  4565 00001183 AA                              STOSB
  4566 00001184 3C20                            CMP     AL,' '
  4567 00001186 77F3                            JA      SHORT ORG4
  4568 00001188 3C0A                            CMP     AL,10
  4569 0000118A 74AD                            JZ      SHORT ORG1
  4570                                  
  4571 0000118C 26C645FF00                      MOV     BYTE [ES:DI-1],0
  4572                                  ORG5:   
  4573 00001191 E80F00                  	CALL    GET2
  4574 00001194 AA                              STOSB
  4575 00001195 3C0A                            CMP     AL,10
  4576 00001197 75F8                            JNZ     SHORT ORG5
  4577 00001199 EB9E                            JMP     SHORT ORG1
  4578                                  
  4579                                  ORG_EXT: ; 26/03/2018
  4580 0000119B 26C60500                	MOV	BYTE [ES:DI], 0		;put 0 at DI to make it an ASCIIZ
  4581 0000119F 47                      	INC	DI
  4582 000011A0 AA                      	STOSB				;and copy the delimeter char.
  4583 000011A1 EBEE                    	JMP	SHORT ORG5		;and continue as usual.
  4584                                  
  4585                                  GET2:
  4586 000011A3 E32E                            JCXZ    NOGET
  4587 000011A5 268A04                          MOV     AL,[ES:SI]
  4588 000011A8 46                              INC     SI
  4589 000011A9 49                              DEC     CX
  4590 000011AA C3                              RETN
  4591                                  
  4592                                  GET:    
  4593 000011AB E326                    	JCXZ    NOGET
  4594 000011AD 268A04                          MOV     AL,[ES:SI]
  4595 000011B0 46                              INC     SI
  4596 000011B1 49                              DEC     CX
  4597 000011B2 E80300                          CALL    DELIM
  4598 000011B5 74F4                            JZ      SHORT GET
  4599                                  GRET:   
  4600 000011B7 C3                      	RETN
  4601                                  
  4602                                  ; 10/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT2.ASM, 02/02/2018)
  4603                                  ;--------------------------------------------------------------bug330a03
  4604                                  ; isp - small changes here, new entry point into routine
  4605                                  DELIM:	
  4606 000011B8 3C2F                    	CMP	AL,'/'          ; 5/30/86. IBM will assume "/" delim  ;3.30
  4607 000011BA 74FB                    	jz	short GRET					      ;3.30
  4608                                  DELIM1:
  4609 000011BC 3C20                    	CMP	AL,' '
  4610 000011BE 74F7                    	jz	short GRET
  4611 000011C0 3C09                    	CMP	AL,9
  4612 000011C2 74F3                    	jz	short GRET
  4613 000011C4 3C3D                    	CMP	AL,'='
  4614 000011C6 74EF                    	jz	short GRET
  4615 000011C8 3C2C                    	CMP	AL,','
  4616 000011CA 74EB                    	jz	short GRET
  4617 000011CC 3C3B                    	CMP	AL,';'
  4618 000011CE 74E7                    	jz	short GRET	; 5/23/86			      ;3.30
  4619 000011D0 3C00                    	cmp	al, 0		; 5/23/86 Special case for sysinit!!! ;3.30
  4620 000011D2 C3                      	retn
  4621                                  
  4622                                  ;--------------------------------------------------------------bug330a03
  4623                                  
  4624                                  NOGET:  
  4625 000011D3 59                      	POP     CX
  4626                                  	; 20/06/2018
  4627                                          ;MOV	[cs:COUNT],DI
  4628 000011D4 893E[C102]                      MOV     [COUNT],DI ; 05/07/2018
  4629 000011D8 31F6                            XOR     SI,SI
  4630                                          ;MOV	[cs:CHRPTR],SI
  4631 000011DA 8936[C302]                      MOV	[CHRPTR],SI ; 05/07/2018
  4632 000011DE C3                              RETN
  4633                                  
  4634                                  ;
  4635                                  ;  NEWLINE RETURNS WITH FIRST CHARACTER OF NEXT LINE
  4636                                  ;
  4637                                  NEWLINE:
  4638 000011DF E891FD                  	CALL    GETCHR                  ; SKIP NON-CONTROL CHARACTERS
  4639 000011E2 7207                            JC      SHORT NONEW
  4640 000011E4 3C0A                            CMP     AL,10                   ; LOOK FOR LINE FEED
  4641 000011E6 75F7                            JNZ     SHORT NEWLINE
  4642 000011E8 E888FD                          CALL    GETCHR
  4643                                  NONEW:  
  4644 000011EB C3                      	RETN
  4645                                  
  4646                                  MAPCASE:
  4647 000011EC 51                              PUSH    CX
  4648 000011ED 56                              PUSH    SI
  4649 000011EE 1E                              PUSH    DS
  4650 000011EF 06                              PUSH    ES
  4651 000011F0 1F                              POP     DS
  4652 000011F1 31F6                            XOR     SI,SI
  4653                                  CONVLOOP:
  4654 000011F3 AC                              LODSB
  4655                                  
  4656                                          ;IF      KANJI
  4657                                          ;CALL    TESTKANJ
  4658                                          ;JZ      SHORT NORMCONV
  4659                                          ;INC     SI			; Skip next char
  4660                                          ;DEC     CX
  4661                                          ;JCXZ    CONVDONE		; Just ignore 1/2 kanji error
  4662                                  ; Fall through, know AL is not in 'a'-'z' range
  4663                                  ;NORMCONV:
  4664                                          ;ENDIF
  4665                                  
  4666 000011F4 3C61                            CMP     AL,'a'
  4667 000011F6 7209                            JB      SHORT NOCONV
  4668 000011F8 3C7A                            CMP     AL,'z'
  4669 000011FA 7705                            JA      SHORT NOCONV
  4670 000011FC 2C20                            SUB     AL,20H
  4671 000011FE 8844FF                          MOV     [SI-1],AL
  4672                                  NOCONV:
  4673 00001201 E2F0                            LOOP    CONVLOOP
  4674                                  CONVDONE:
  4675 00001203 1F                              POP     DS
  4676 00001204 5E                              POP     SI
  4677 00001205 59                              POP     CX
  4678 00001206 C3                              RETN
  4679                                  
  4680                                          ;IF      KANJI
  4681                                  ;TESTKANJ:
  4682                                          ;CMP     AL,81H
  4683                                          ;JB      SHORT NOTLEAD
  4684                                          ;CMP     AL,9FH
  4685                                          ;JBE     SHORT ISLEAD
  4686                                          ;CMP     AL,0E0H
  4687                                          ;JB      SHORT NOTLEAD
  4688                                          ;CMP     AL,0FCH
  4689                                          ;JBE    SHORT  ISLEAD
  4690                                  ;NOTLEAD:
  4691                                          ;PUSH    AX
  4692                                          ;XOR     AX,AX			; Set zero
  4693                                          ;POP     AX
  4694                                          ;RETN
  4695                                  ;ISLEAD:
  4696                                          ;PUSH    AX
  4697                                          ;XOR     AX,AX			; Set zero
  4698                                          ;INC     AX			; Reset zero
  4699                                          ;POP     AX
  4700                                          ;RETN
  4701                                          ;ENDIF
  4702                                  
  4703                                  Yes_Break_Failed:			;dev drv Init failed and aborted.
  4704 00001207 F9                      	stc
  4705 00001208 58                      	pop	ax
  4706 00001209 C3                      	retn
  4707                                  
  4708                                  SET_BREAK:
  4709                                  	; 22/06/2018
  4710                                  	; 10/06/2018 - Retro DOS v3.0
  4711                                  
  4712                                  ; 8/14/86  For DOS 3.3, this routine is modified to take care of the
  4713                                  ;Device driver's initialization error and abort.
  4714                                  ;If [break_addr+2] == [memhi] && [break_addr] = 0 then assume
  4715                                  ;that the device driver's initialization has an error and wanted to
  4716                                  ;abort the device driver.  In this case, this routine will set carry
  4717                                  ;and return to the caller.
  4718                                  ;
  4719 0000120A 50                      	PUSH	AX
  4720 0000120B 2EA1[E002]              	MOV	AX,[CS:BREAK_ADDR+2]	;REMOVE THE INIT CODE
  4721 0000120F 2E3B06[CA02]            	cmp	ax,[CS:MEMHI]
  4722 00001214 7508                    	jne	short Set_Break_Continue  ;if not same, then O.K.
  4723                                  
  4724 00001216 2E833E[DE02]00          	cmp	word [CS:BREAK_ADDR],0 
  4725 0000121C 74E9                    	je	SHORT Yes_Break_Failed	;[Break_addr+2]=[MEMHI] & [Break_addr]=0 
  4726                                  
  4727                                  Set_Break_Continue:
  4728 0000121E 2EA3[CA02]              	MOV	[CS:MEMHI],AX
  4729 00001222 2EA1[DE02]              	MOV	AX,[CS:BREAK_ADDR]
  4730 00001226 2EA3[C802]              	MOV	[CS:MEMLO],AX
  4731 0000122A 58                      	POP	AX			    ; NOTE FALL THROUGH
  4732                                  
  4733                                  ;
  4734                                  ; Round the values in MEMLO and MEMHI to paragraph boundary.
  4735                                  ; Perform bounds check.
  4736                                  ;
  4737                                  
  4738                                  ROUND: 
  4739                                  	; 22/06/2018 
  4740                                  	; 10/06/2018 - Retro DOS v3.0
  4741                                  	; 26/03/2018
  4742 0000122B 50                      	PUSH	AX
  4743 0000122C 2EA1[C802]              	MOV     AX,[CS:MEMLO]
  4744 00001230 E801F6                  	CALL	ParaRound
  4745 00001233 2E0106[CA02]                    ADD     [CS:MEMHI],AX
  4746                                          ;XOR     AX,AX
  4747                                          ;MOV     [CS:MEMLO],AX
  4748                                  	; 06/07/2018
  4749 00001238 2EC706[C802]0000        	mov	word [CS:MEMLO], 0
  4750 0000123F 2EA1[CA02]              	MOV	AX,[CS:MEMHI]		; ax = new memhi
  4751 00001243 2E3B06[8902]            	CMP	AX,[CS:ALLOCLIM]	; if new memhi >= alloclim, error
  4752 00001248 7303                    	JAE	SHORT MEM_ERR
  4753 0000124A 58                      	POP	AX
  4754 0000124B F8                      	CLC
  4755 0000124C C3                              RETN
  4756                                  
  4757                                  MEM_ERR:
  4758 0000124D BA[9017]                	MOV	DX,BADMEM
  4759 00001250 0E                      	PUSH	CS
  4760 00001251 1F                      	POP	DS
  4761 00001252 E84502                  	CALL	PRINT
  4762 00001255 E90DF3                  	JMP	STALL
  4763                                  
  4764                                  CALLDEV:
  4765 00001258 2E8E1E[6A02]            	MOV     DS,[CS:ENTRY_POINT+2]
  4766 0000125D 2E031E[6802]                    ADD     BX,[CS:ENTRY_POINT]	; Do a little relocation
  4767 00001262 8B07                            MOV     AX,[BX]
  4768 00001264 2EFF36[6802]                    PUSH    WORD [CS:ENTRY_POINT]
  4769 00001269 2EA3[6802]                      MOV     [CS:ENTRY_POINT],AX
  4770 0000126D BB[D002]                        MOV     BX,PACKET
  4771 00001270 2EFF1E[6802]                    CALL    FAR [CS:ENTRY_POINT]	; 10/06/2018
  4772 00001275 2E8F06[6802]                    POP     WORD [CS:ENTRY_POINT]
  4773 0000127A C3                              RETN
  4774                                  
  4775                                  BADNUM:
  4776                                  	; 10/06/2018 - Retro DOS v3.0
  4777 0000127B 2EC606[B002]00          	mov	byte [CS:SEPCHR],0 ; 06/07/2018
  4778 00001281 31C0                    	XOR	AX,AX		; Set Zero flag, and AX = 0
  4779 00001283 5B                      	pop	bx
  4780 00001284 F9                      	stc			; AND carry set
  4781 00001285 C3                      	retn
  4782                                  
  4783                                  TODIGIT:
  4784 00001286 2C30                            SUB     AL,'0'
  4785 00001288 7206                            JB      SHORT NOTDIG
  4786 0000128A 3C09                            CMP     AL,9
  4787 0000128C 7702                            JA      SHORT NOTDIG
  4788 0000128E F8                              CLC
  4789 0000128F C3                              RETN
  4790                                  NOTDIG: 
  4791 00001290 F9                      	STC
  4792 00001291 C3                              RETN
  4793                                  
  4794                                  ; GetNum parses a decimal number.
  4795                                  ; Returns it in AX, sets zero flag if AX = 0 (MAY BE considered an
  4796                                  ; error), if number is BAD carry is set, zero is set, AX=0.
  4797                                  
  4798                                  GETNUM: 
  4799 00001292 53                      	push	bx	; 10/06/2018 (Retro DOS 3.0, MSDOS 3.3)
  4800 00001293 31DB                    	XOR     BX,BX                   ; running count is zero
  4801                                  B2:     
  4802 00001295 E8EEFF                  	CALL    TODIGIT                 ; do we have a digit
  4803 00001298 72E1                            JC      SHORT BADNUM		; no, bomb
  4804 0000129A 93                              XCHG    AX,BX                   ; put total in AX
  4805 0000129B 53                              PUSH    BX                      ; save digit
  4806 0000129C BB0A00                          MOV     BX,10                   ; base of arithmetic
  4807 0000129F F7E3                            MUL     BX                      ; shift by one decimal digit
  4808 000012A1 5B                              POP     BX                      ; get back digit
  4809 000012A2 00D8                            ADD     AL,BL                   ; get total
  4810 000012A4 80D400                          ADC     AH,0                    ; make that 16 bits
  4811 000012A7 72D2                            JC      SHORT BADNUM		; too big a number
  4812 000012A9 93                              XCHG    AX,BX                   ; stash total
  4813 000012AA E8C6FC                          CALL    GETCHR                  ; GET NEXT DIGIT
  4814 000012AD 722D                            JC      SHORT B1		; no more characters
  4815                                  
  4816                                  	; 10/06/2018
  4817 000012AF 3C20                    	cmp	al,' '			; 5/23/86 space? 
  4818 000012B1 741F                    	jz	short B15		; 5/23/86 then end of digits
  4819 000012B3 3C2C                    	cmp	al,','			; 5/23/86 ',' is a seperator!
  4820 000012B5 741B                    	jz	short B15		; 5/23/86 then end of digits.
  4821 000012B7 3C09                    	cmp	al,9			; 5/23/86 TAB
  4822 000012B9 7417                    	jz	short B15		;
  4823                                  	; 22/06/2018
  4824 000012BB 2E3A06[B002]            	CMP	AL,[CS:SEPCHR]		; allow , separators
  4825 000012C0 7410                    	JZ	short B15
  4826 000012C2 3C2F                    	cmp	al,SWTCHR		; See if another switch follows
  4827 000012C4 740C                    	JZ	short B15
  4828 000012C6 3C0A                    	cmp	al,10			; Line-feed?
  4829 000012C8 7408                    	jz	short B15
  4830 000012CA 3C0D                    	cmp	al,13			; Carriage return?
  4831 000012CC 7404                    	jz	short B15
  4832                                  	
  4833 000012CE 08C0                    	OR      AL,AL                   ; end of line separator?
  4834 000012D0 75C3                            JNZ     SHORT B2		; no, try as a valid character
  4835                                  B15:        
  4836 000012D2 2EFF06[C102]            	INC     WORD [CS:COUNT]		; one more character to scan
  4837 000012D7 2EFF0E[C302]                    DEC     WORD [CS:CHRPTR]	; back up over separator
  4838                                  B1:     
  4839 000012DC 89D8                    	MOV     AX,BX                   ; get proper count
  4840 000012DE 09C0                            OR      AX,AX
  4841 000012E0 5B                      	pop	bx	; 10/06/2018
  4842 000012E1 C3                              RETN
  4843                                  
  4844                                  SKIP_DELIM:
  4845                                  ;Skip the delimeters pointed by CHRPTR. AL will contain the first non delimeter
  4846                                  ;character encountered and CHRPTR will point to the next character.
  4847                                  ;This routine will assume the second "," found as a non delimiter character.
  4848                                  ;So, in case if the string is " , , ", this routine will stop at the second ",".
  4849                                  ;At this time, Zero flag is set.
  4850                                  ;If COUNT is exhausted, then carry will be set.
  4851                                  Skip_delim_char:
  4852 000012E2 E88EFC                  	call	GETCHR
  4853 000012E5 7218                    	jc	short Skip_delim_exit
  4854 000012E7 3C2C                    	cmp	al,','			;the first comma?
  4855 000012E9 7406                    	je	short Skip_delim_next
  4856 000012EB E8CAFE                  	call	DELIM			;check the charater in AL.
  4857 000012EE 74F2                    	jz	short Skip_delim_char
  4858                                  	; 06/07/2018
  4859                                  	;jmp	short Skip_delim_exit	;found a non delim char
  4860 000012F0 C3                      	retn
  4861                                  Skip_delim_next:
  4862 000012F1 E87FFC                  	call	GETCHR
  4863 000012F4 7209                    	jc	short Skip_delim_exit
  4864 000012F6 3C2C                    	cmp	al,','			;the second comma?
  4865 000012F8 7405                    	je	short Skip_delim_exit 	;done
  4866 000012FA E8BBFE                  	call	DELIM
  4867 000012FD 74F2                    	jz	short Skip_delim_next
  4868                                  Skip_delim_exit:
  4869 000012FF C3                      	retn
  4870                                  
  4871                                  ; 10/06/2018 (Retro DOS 3.0, MSDOS 3.3)
  4872                                  
  4873                                  ; 5/26/86 *****************************************************************
  4874                                  SetDOSCountryInfo:
  4875                                  ;Input: ES:DI -> pointer to DOS_COUNTRY_CDPG_INFO			 
  4876                                  ;	DS:0  -> buffer.						 
  4877                                  ;	SI = 0								 
  4878                                  ;	AX = country id 						 
  4879                                  ;	DX = code page id. (If 0, then use ccSysCodePage as a default.) 
  4880                                  ;	BX = file handle						 
  4881                                  ;	This routine can handle maxium 72 COUNTRY_DATA entries. 	 
  4882                                  ;Output: DOS_country_cdpg_info set.					 
  4883                                  ;	 Carry set if any file read failure or wrong information in the file.
  4884                                  ;	 Carry set and CX = -1 if cannot find the matching COUNTRY_id, CODEPAGE
  4885                                  ;	 _id in the file.						 
  4886                                  									 
  4887 00001300 57                      	push	di							 
  4888 00001301 50                      	push	ax							 
  4889 00001302 52                      	push	dx							 
  4890                                  									 
  4891 00001303 31C9                    	xor	cx,cx							 
  4892 00001305 31D2                    	xor	dx,dx							 
  4893 00001307 B80002                  	mov	ax,512			;read 512 bytes 		 
  4894 0000130A E80701                  	call	ReadInControlBuffer	;Read the file header		 
  4895 0000130D 724C                    	jc	short SetDOSData_fail 					 
  4896 0000130F 06                      	push	es							 
  4897 00001310 56                      	push	si							 
  4898 00001311 0E                      	push	cs							 
  4899 00001312 07                      	pop	es							 
  4900 00001313 BF[6915]                	mov	di,COUNTRY_FILE_SIGNATURE			 
  4901 00001316 B90800                  	mov	cx,8			;length of the signature	 
  4902 00001319 F3A6                    	repz	cmpsb							 
  4903 0000131B 5E                      	pop	si							 
  4904 0000131C 07                      	pop	es							 
  4905 0000131D 753C                    	jnz	short SetDOSData_fail 	;signature mismatch		 
  4906                                  									 
  4907 0000131F 83C612                  	add	si,18			;SI -> county info type 	 
  4908 00001322 803C01                  	cmp	byte [si],1		;Only accept type 1 (Currently only 1 header type)
  4909 00001325 7534                    	jne	short SetDOSData_fail 	;cannot proceed. error return	 
  4910 00001327 46                      	inc	si			;SI -> file offset		 
  4911 00001328 8B14                    	mov	dx,[si]			;Get the INFO file offset.	 
  4912 0000132A 8B4C02                  	mov	cx,[si+2]					 
  4913 0000132D B80004                  	mov	ax,1024			;read 1024 bytes.		 
  4914 00001330 E8E100                  	call	ReadInControlBuffer	;Read INFO			 
  4915 00001333 7226                    	jc	short SetDOSData_fail 					 
  4916 00001335 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
  4917 00001337 83F948                  	cmp	cx,72			;cannot handle more than 72 entries.
  4918 0000133A 771F                    	ja	short SetDOSData_fail 					 
  4919 0000133C 46                      	inc	si							 
  4920 0000133D 46                      	inc	si			;SI -> entry information packet 
  4921 0000133E 5A                      	pop	dx			;restore code page id		 
  4922 0000133F 58                      	pop	ax			;restore country id		 
  4923 00001340 5F                      	pop	di							 
  4924                                  									 
  4925                                  SetDOSCntry_find:			;Search for desired country_id,codepage_id.
  4926 00001341 3B4402                  	cmp	ax,[si+2]		;compare country_id		 
  4927 00001344 750A                    	jne	short SetDOSCntry_next					 
  4928 00001346 83FA00                  	cmp	dx,0			;No user specified code page ?	 
  4929 00001349 7415                    	je	short SetDOSCntry_any_CodePage ;then no need to match code page id.
  4930 0000134B 3B5404                  	cmp	dx,[si+4]		;compare code page id		 
  4931 0000134E 7413                    	je	short SetDOSCntry_got_it					 
  4932                                  SetDOSCntry_next:							 
  4933 00001350 0334                    	add	si,[si]			;next entry			 
  4934 00001352 46                      	inc	si							 
  4935 00001353 46                      	inc	si			;take a word for size of entry itself
  4936 00001354 E2EB                    	loop	SetDOSCntry_find					 
  4937 00001356 B9FFFF                  	mov	cx, -1			;signals that bad country id entered.
  4938                                  SetDOSCntry_fail:							 
  4939 00001359 F9                      	stc								 
  4940 0000135A C3                      	retn								 
  4941                                  									 
  4942                                  SetDOSData_fail:							 
  4943 0000135B 5E                      	pop	si							 
  4944 0000135C 59                      	pop	cx							 
  4945 0000135D 5F                      	pop	di							 
  4946 0000135E EBF9                    	jmp	short SetDOSCntry_fail				 
  4947                                  									 
  4948                                  SetDOSCntry_any_CodePage:		;use the code_page_id of the country_id found.
  4949 00001360 8B5404                  	mov	dx,[si+4]					 
  4950                                  SetDOSCntry_got_it:			;found the matching entry	 
  4951 00001363 2E8916[7115]            	mov	[cs:CntryCodePage_Id],dx ;save code page ID for this country.
  4952 00001368 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
  4953 0000136B 8B4C0C                  	mov	cx,[si+12] 				 
  4954 0000136E B80002                  	mov	ax,512			;read 512 bytes 		 
  4955 00001371 E8A000                  	call	ReadInControlBuffer					 
  4956 00001374 72E3                    	jc	short SetDOSCntry_fail					 
  4957 00001376 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
  4958 00001378 46                      	inc	si							 
  4959 00001379 46                      	inc	si			;SI -> first entry		 
  4960                                  									 
  4961                                  SetDOSCntry_data:							 
  4962 0000137A 57                      	push	di			;ES:DI -> DOS_COUNTRY_CDPG_INFO 
  4963 0000137B 51                      	push	cx			;save # of entry left		 
  4964 0000137C 56                      	push	si			;si -> current entry in Control buffer
  4965                                  									 
  4966 0000137D 8A4402                  	mov	al,[si+2]		;get data entry id		 
  4967 00001380 E86300                  	call	GetCountryDestination	;get the address of destination in ES:DI
  4968 00001383 7257                    	jc	short SetDOSCntry_data_next ;No matching data entry id in DOS 
  4969                                  									 
  4970 00001385 8B5404                  	mov	dx,[si+4]		;get offset of data		 
  4971 00001388 8B4C06                  	mov	cx,[si+6]					 
  4972 0000138B B80042                  	mov	ax,4200h						 
  4973 0000138E F9                      	stc								 
  4974 0000138F CD21                    	int	21h			;move pointer			 
  4975 00001391 72C8                    	jc	short SetDOSData_fail 					 
  4976 00001393 BA0002                  	mov	dx,512			;start of data buffer		 
  4977 00001396 268B0D                  	mov	cx,[es:di]		;length of the corresponding data in DOS.
  4978 00001399 83C10A                  	add	cx,10			;Signature + A word for the length itself
  4979 0000139C B43F                    	mov	ah,3Fh 						 
  4980 0000139E F9                      	stc								 
  4981 0000139F CD21                    	int	21h			;read the country.sys data	 
  4982 000013A1 72B8                    	jc	short SetDOSData_fail 	;read failure			 
  4983 000013A3 39C8                    	cmp	ax, cx							 
  4984 000013A5 75B4                    	jne	short SetDOSData_fail 					 
  4985                                  									 
  4986 000013A7 8A4402                  	mov	al,[si+2]		;save Data id for future use.	 
  4987 000013AA BE0802                  	mov	si,(512+8)		;SI-> data buffer + id tag field 
  4988 000013AD 8B0C                    	mov	cx,[si]			;get the length of the file	 
  4989 000013AF 41                      	inc	cx			;Take care of a word for lenght of tab
  4990 000013B0 41                      	inc	cx			;itself.			 
  4991 000013B1 81F9F805                	cmp	cx,(2048-512-8)		;Fit into the buffer?		 
  4992 000013B5 77A4                    	ja	short SetDOSData_fail 					 
  4993 000013B7 3C01                    	cmp	al,SetCountryInfo	;is the data for SetCountryInfo table?
  4994 000013B9 7512                    	jne	short SetDOSCntry_Mov 	;no, don't worry                
  4995 000013BB 26FF7518                	push	word [es:di+24]		;Cannot destroy ccMono_ptr address. Save them.
  4996 000013BF 26FF751A                	push	word [es:di+26]					 
  4997 000013C3 57                      	push	di			;save DI			 
  4998                                  									 
  4999 000013C4 50                      	push	ax							 
  5000 000013C5 2EA1[7115]              	mov	ax,[cs:CntryCodePage_Id] ;Do not use the Code Page info in Country_Info
  5001 000013C9 894404                  	mov	[si+4], ax		;Use the saved one for this !!!! 
  5002 000013CC 58                      	pop	ax							 
  5003                                  									 
  5004                                  SetDOSCntry_Mov:							 
  5005 000013CD F3A4                    	rep	movsb			;copy the table into DOS	 
  5006 000013CF 3C01                    	cmp	al,SetCountryInfo	;was the ccMono_ptr saved?	 
  5007 000013D1 7509                    	jne	short SetDOSCntry_data_next					 
  5008 000013D3 5F                      	pop	di			;restore DI			 
  5009 000013D4 268F451A                	pop	word [es:di+26]		;restore ccMono_ptr in DOS.	 
  5010 000013D8 268F4518                	pop	word [es:di+24]					 
  5011                                  									 
  5012                                  SetDOSCntry_data_next:							 
  5013 000013DC 5E                      	pop	si			;restore control buffer pointer 
  5014 000013DD 59                      	pop	cx			;restore # of entries left	 
  5015 000013DE 5F                      	pop	di			;restore pointer to DSO_COUNTRY_CDPG
  5016 000013DF 0334                    	add	si,[si]			;try to get the next entry	 
  5017 000013E1 46                      	inc	si							 
  5018 000013E2 46                      	inc	si			;take a word of entry length itself
  5019 000013E3 E295                    	loop	SetDOSCntry_data					 
  5020 000013E5 C3                      	retn								 
  5021                                  					 
  5022                                  GetCountryDestination:				 
  5023                                  ;Get the destination address in the DOS country info table.		 
  5024                                  ;Input: AL - Data ID							 
  5025                                  ;	ES:DI -> DOS_COUNTRY_CDPG_INFO					 
  5026                                  ;On return:								 
  5027                                  ;	ES:DI -> Destination address of the matching data id		 
  5028                                  ;	carry set if no matching data id found in DOS.			 
  5029                                  									 
  5030 000013E6 51                      	push	cx							 
  5031 000013E7 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries
  5032                                  					;skip the reserved area, syscodepage etc.
  5033 000013EA 268B0D                  	mov	cx,[es:di]		;get the number of entries	 
  5034 000013ED 47                      	inc	di							 
  5035 000013EE 47                      	inc	di			;SI -> the first start entry id 
  5036                                  GetCntryDest:								 
  5037 000013EF 263805                  	cmp	[es:di],al					 
  5038 000013F2 7413                    	je	short GetCntryDest_OK 					 
  5039 000013F4 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it SetCountryInfo entry?
  5040 000013F8 7405                    	je	short GetCntryDest_1						 
  5041 000013FA 83C705                  	add	di,5			;next data id			 
  5042 000013FD EB03                    	jmp	short GetCntryDest_loop 				 
  5043                                  GetCntryDest_1: 							 
  5044 000013FF 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id			 
  5045                                  GetCntryDest_loop:							 
  5046 00001402 E2EB                    	loop	GetCntryDest						 
  5047 00001404 F9                      	stc								 
  5048 00001405 EB0B                    	jmp	short GetCntryDest_Exit				 
  5049                                  GetCntryDest_OK:							 
  5050 00001407 3C01                    	cmp	al,SetCountryInfo	;select country info?		 
  5051 00001409 7503                    	jne	short GetCntryDest_OK1					 
  5052 0000140B 47                      	inc	di			;now DI -> ccCountryInfoLen	 
  5053 0000140C EB04                    	jmp	short GetCntryDest_Exit				 
  5054                                  GetCntryDest_OK1:							 
  5055 0000140E 26C47D01                	les	di,[es:di+1]		;get the destination in ES:DI	 
  5056                                  GetCntryDest_Exit:							 
  5057 00001412 59                      	pop	cx							 
  5058 00001413 C3                      	retn								 
  5059                                  								 
  5060                                  ReadInControlBuffer:				 
  5061                                  ;Move file pointer to CX:DX						 
  5062                                  ;Read AX bytes into the control buffer. (Should be less than 2 Kb)	 
  5063                                  ;SI will be set to 0 hence DS:SI points to the control buffer.		 
  5064                                  ;Entry:  CX,DX offset from the start of the file where the read/write pointer
  5065                                  ;	 be moved.							 
  5066                                  ;	 AX - # of bytes to read					 
  5067                                  ;	 BX - file handle						 
  5068                                  ;	 DS - buffer seg.						 
  5069                                  ;Return: The control data information is read into DS:0 - DS:0200.	 
  5070                                  ;	 CX,DX value destroyed. 					 
  5071                                  ;	 Carry set if error in Reading file.				 
  5072                                  ;									 
  5073 00001414 50                      	push	ax			;# of bytes to read		 
  5074 00001415 B80042                  	mov	ax, 4200h						 
  5075 00001418 F9                      	stc								 
  5076 00001419 CD21                    	int	21h			;move pointer			 
  5077 0000141B 59                      	pop	cx			;# of bytes to read		 
  5078 0000141C 7209                    	jc	short RICB_exit						 
  5079 0000141E 31D2                    	xor	dx,dx			;ds:dx -> control buffer	 
  5080 00001420 31F6                    	xor	si,si							 
  5081 00001422 B43F                    	mov	ah,3Fh			;read into the buffer		 
  5082 00001424 F9                      	stc								 
  5083 00001425 CD21                    	int	21h			;should be less than 1024 bytes. 
  5084                                  RICB_exit:								 
  5085 00001427 C3                      	retn								 
  5086                                  									 
  5087                                  SET_COUNTRY_PATH:					 
  5088                                  ;In:  DS - SYSINITSEG, ES - CONFBOT, SI -> start of the asciiz path string
  5089                                  ;     DOSINFO_EXT, CNTRY_DRV, CNTRY_ROOT, CNTRY_PATH			 
  5090                                  ;     Assumes current directory is the ROOT directory.			 
  5091                                  ;Out: DS:DI -> full path (CNTRY_DRV).					 
  5092                                  ;     Set the CNTRY_DRV string from the COUNTRY=,,path command. 	 
  5093                                  ;     DS, ES, SI value saved.						 
  5094                                  									 
  5095 00001428 56                      	push	si							 
  5096 00001429 1E                      	push	ds			;switch ds, es			 
  5097 0000142A 06                      	push	es							 
  5098 0000142B 1F                      	pop	ds							 
  5099 0000142C 07                      	pop	es			;now DS -> CONFBOT, ES -> SYSINITSEG
  5100                                  									 
  5101 0000142D E82E00                  	call	CHK_DRIVE_LETTER	;current DS:[SI] is a drive letter? 
  5102 00001430 7206                    	jc	short SCP_Default_drv 	;no, use current default drive. 
  5103 00001432 8A04                    	mov	al,[SI]					 
  5104 00001434 46                      	inc	si							 
  5105 00001435 46                      	inc	si			;SI -> next char after ":"      
  5106 00001436 EB06                    	jmp	short SCP_SetDrv					 
  5107                                  SCP_Default_drv:							 
  5108 00001438 B419                    	mov	ah,19h 						 
  5109 0000143A CD21                    	int	21h							 
  5110 0000143C 0441                    	add	al,"A"			;convert it to a character.     
  5111                                  SCP_SetDrv:								 
  5112 0000143E 2EA2[2615]              	mov	[cs:CNTRY_DRV],al	;set the drive letter.		 
  5113 00001442 BF[2915]                	mov	di,CNTRY_PATH					 
  5114 00001445 8A04                    	mov	al,[SI]	
  5115 00001447 3C5C                    	cmp	al, "\"                                                 
  5116 00001449 7406                    	je	short SCP_Root_Dir						 
  5117                                  	; 23/06/2018 - Retro DOS v3.0
  5118                                  	;cmp	al,[cs:SWTCHR]	!!!	;let's accept "/" as an directory delim
  5119 0000144B 3C2F                    	cmp	al,SWTCHR 
  5120 0000144D 7402                    	je	short SCP_Root_Dir						 
  5121 0000144F EB01                    	jmp	short SCP_Path						 
  5122                                  SCP_Root_Dir:								 
  5123 00001451 4F                      	dec	di			;DI -> CNTRY_ROOT		 
  5124                                  SCP_Path:								 
  5125 00001452 E81F00                  	call	MOVE_ASCIIZ		;copy it			 
  5126 00001455 BF[2615]                	mov	di,CNTRY_DRV					 
  5127                                  SCPath_Exit:								 
  5128 00001458 1E                      	push	ds			;switch ds, es			 
  5129 00001459 06                      	push	es							 
  5130 0000145A 1F                      	pop	ds							 
  5131 0000145B 07                      	pop	es			;DS, ES value restored		 
  5132 0000145C 5E                      	pop	si							 
  5133 0000145D C3                      	RETN
  5134                                  								 
  5135                                  CHK_DRIVE_LETTER:				 
  5136                                  ;Check if DS:[SI] is a drive letter followed by ":".                    
  5137                                  ;Assume that every alpha charater is already converted to UPPER CASE.	 
  5138                                  ;Carry set if not.							 
  5139                                  ;									 
  5140 0000145E 50                      	push	ax							 
  5141 0000145F 803C41                  	cmp	byte [si], "A"                                   
  5142 00001462 720D                    	jb	short CDLetter_NO						 
  5143 00001464 803C5A                  	cmp	byte [si], "Z"                                   
  5144 00001467 7708                    	ja	short CDLetter_NO						 
  5145 00001469 807C013A                	cmp	byte [si+1], ":"                                 
  5146 0000146D 7502                    	jne	short CDLetter_NO						 
  5147 0000146F EB01                    	jmp	short CDLetter_exit					 
  5148                                  CDLetter_NO:								 
  5149 00001471 F9                      	stc								 
  5150                                  CDLetter_exit:								 
  5151 00001472 58                      	pop	ax							 
  5152 00001473 C3                      	retn								 
  5153                                  									 
  5154                                  MOVE_ASCIIZ:				 
  5155                                  ;In: DS:SI -> source ES:DI -> target					 
  5156                                  ;Out: copy the string until 0.						 
  5157                                  ;Assumes there exists a 0.						 
  5158                                  MASCIIZ_loop:								 
  5159 00001474 A4                      	movsb								 
  5160 00001475 807CFF00                	cmp	byte [SI-1], 0	;Was it 0?			 
  5161 00001479 75F9                    	jne	short MASCIIZ_loop						 
  5162 0000147B C3                      	retn
  5163                                  
  5164                                  ; 10/06/2018 - Retro DOS v3.0
  5165                                  								 
  5166                                  ;
  5167                                  ;	DS:DX POINTS TO STRING TO OUTPUT (ASCIZ)
  5168                                  ;
  5169                                  ;	PRINTS <BADLD_PRE> <STRING> <BADLD_POST>
  5170                                  ;
  5171                                  
  5172                                  BADFIL:
  5173 0000147C 0E                              PUSH    CS
  5174 0000147D 07                              POP     ES
  5175 0000147E 89D6                            MOV     SI,DX
  5176                                  BADLOAD:
  5177 00001480 BA[FA16]                        MOV     DX,BADLD_PRE		; WANT TO PRINT CONFIG ERROR
  5178                                          ;MOV	BX,BADLD_POST
  5179                                  PRNERR:
  5180 00001483 0E                              PUSH    CS
  5181 00001484 1F                              POP     DS
  5182 00001485 B409                            MOV     AH,STD_CON_STRING_OUTPUT
  5183 00001487 CD21                            INT     21H
  5184                                  PRN1:   
  5185 00001489 268A14                  	MOV     DL,[ES:SI]
  5186 0000148C 08D2                            OR      DL,DL
  5187 0000148E 7407                            JZ      SHORT PRN2
  5188 00001490 B402                            MOV     AH,STD_CON_OUTPUT
  5189 00001492 CD21                            INT     21H
  5190 00001494 46                              INC     SI
  5191 00001495 EBF2                            JMP     SHORT PRN1
  5192                                  PRN2:   
  5193                                  	;MOV	DX,BX
  5194 00001497 BA[D616]                	MOV	DX,BADLD_POST ; 10/04/2018
  5195                                  PRINT:  
  5196 0000149A B409                    	MOV     AH,STD_CON_STRING_OUTPUT
  5197 0000149C CD21                            INT     21H
  5198 0000149E C3                              RETN
  5199                                  
  5200                                  	;IF	NOEXEC  ; (NOEXEC = FALSE)
  5201                                  ;;
  5202                                  ;; LOAD FILE CALLED [DS:DX] AT MEMORY LOCATION ES:BX
  5203                                  ;;
  5204                                  ;LDFIL:
  5205                                  ;	PUSH    AX
  5206                                  ;	PUSH    BX
  5207                                  ;	PUSH    CX
  5208                                  ;	PUSH    DX
  5209                                  ;	PUSH    SI
  5210                                  ;	PUSH    DS
  5211                                  ;	PUSH    BX
  5212                                  ;
  5213                                  ;	XOR     AX,AX                   ; OPEN THE FILE
  5214                                  ;	MOV     AH,OPEN
  5215                                  ;	STC                             ; IN CASE OF INT 24
  5216                                  ;	INT     21H
  5217                                  ;	POP     DX                      ; Trans addr is DS:DX
  5218                                  ;	JC      SHORT LDRET
  5219                                  ;
  5220                                  ;	; 10/06/2018
  5221                                  ;	PUSH	DX
  5222                                  ;	MOV     BX,AX                   ; Handle in BX
  5223                                  ;	XOR	CX,CX
  5224                                  ;	XOR	DX,DX
  5225                                  ;	MOV	AX,(LSEEK*256)+2
  5226                                  ;	STC				;IN CASE OF INT 24
  5227                                  ;	INT	21H			; Get file size in DX:AX
  5228                                  ;	JC	short LDCLSP
  5229                                  ;	POP	DX
  5230                                  ;	PUSH	DX
  5231                                  ;	MOV	CX,ES			; CX:DX is xaddr
  5232                                  ;	ADD	DX,AX			; Add file size to Xaddr
  5233                                  ;	JNC	short DOSIZE
  5234                                  ;	ADD	CX,1000H		; ripple carry
  5235                                  ;DOSIZE:
  5236                                  ;	mov	ax,dx
  5237                                  ;	call	ParaRound
  5238                                  ;	mov	dx,ax
  5239                                  ;
  5240                                  ;	ADD	CX,DX
  5241                                  ;	CMP	CX,[ALLOCLIM]
  5242                                  ;	JB	short OKLD
  5243                                  ;	JMP	short MEM_ERR
  5244                                  ;
  5245                                  ;OKLD:
  5246                                  ;	XOR	CX,CX
  5247                                  ;	XOR	DX,DX
  5248                                  ;	MOV	AX,LSEEK SHL 8		;Reset pointer to beginning of file
  5249                                  ;	STC				;IN CASE OF INT 24
  5250                                  ;	INT	21H
  5251                                  ;	JC	LDCLSP
  5252                                  ;	POP	DX
  5253                                  ;	PUSH	ES			;READ THE FILE IN
  5254                                  ;	POP	DS			;Trans addr is DS:DX
  5255                                  ;	MOV	CX,0FF00H		; .COM files arn't any bigger than
  5256                                  ;					; 64k-100H
  5257                                  ;	MOV	AH,READ
  5258                                  ;	STC				;IN CASE OF INT 24
  5259                                  ;	INT	21H
  5260                                  ;	JC	short LDCLS
  5261                                  ;	MOV	SI,DX			;CHECK FOR EXE FILE
  5262                                  ;	CMP	WORD [SI],"MZ"
  5263                                  ;	CLC				; Assume OK
  5264                                  ;	JNZ	short LDCLS		; Only know how to do .COM files
  5265                                  ;	STC
  5266                                  ;	JMP	SHORT LDCLS
  5267                                  ;
  5268                                  ;LDERRP:  
  5269                                  ;	STC
  5270                                  ;LDCLSP:
  5271                                  ;	POP	DX
  5272                                  ;LDCLS:  
  5273                                  ;	PUSHF
  5274                                  ;	MOV     AH,CLOSE                ; CLOSE THE FILE
  5275                                  ;       STC
  5276                                  ;       INT     21H
  5277                                  ;	POPF
  5278                                  ;
  5279                                  ;LDRET:  
  5280                                  ;	POP     DS
  5281                                  ;	POP     SI
  5282                                  ;	POP     DX
  5283                                  ;	POP     CX
  5284                                  ;	POP     BX
  5285                                  ;	POP     AX
  5286                                  ;	RETN
  5287                                  
  5288                                  	;ENDIF
  5289                                  ;
  5290                                  ;  OPEN DEVICE POINTED TO BY DX, AL HAS ACCESS CODE
  5291                                  ;   IF UNABLE TO OPEN DO A DEVICE OPEN NULL DEVICE INSTEAD
  5292                                  ;
  5293                                  OPEN_DEV:
  5294 0000149F E81C00                          CALL    OPEN_FILE
  5295 000014A2 7307                            JNC     SHORT OPEN_DEV3
  5296                                  OPEN_DEV1:
  5297 000014A4 BA[0A15]                        MOV     DX,NULDEV
  5298 000014A7 E81400                          CALL    OPEN_FILE
  5299                                  OPEN_DEV2:
  5300 000014AA C3                              RETN
  5301                                  OPEN_DEV3:
  5302                                  	; 05/07/2018
  5303 000014AB 89C3                    	MOV	BX,AX			; Handle from open to BX
  5304 000014AD 31C0                            XOR     AX,AX                   ; GET DEVICE INFO
  5305 000014AF B444                            MOV     AH,IOCTL
  5306 000014B1 CD21                            INT     21H
  5307 000014B3 F6C280                          TEST    DL,10000000B
  5308 000014B6 75F2                            JNZ     SHORT OPEN_DEV2
  5309 000014B8 B43E                            MOV     AH,CLOSE
  5310 000014BA CD21                            INT     21H
  5311 000014BC EBE6                            JMP     SHORT OPEN_DEV1
  5312                                  
  5313                                  OPEN_FILE:
  5314 000014BE B43D                            MOV     AH,OPEN
  5315 000014C0 F9                              STC
  5316 000014C1 CD21                            INT     21H
  5317 000014C3 C3                              RETN
  5318                                  
  5319                                  INT24:  
  5320 000014C4 83C406                  	ADD     SP,6                    ; RESTORE MACHINE STATE
  5321 000014C7 58                              POP     AX
  5322 000014C8 5B                              POP     BX
  5323 000014C9 59                              POP     CX
  5324 000014CA 5A                              POP     DX
  5325 000014CB 5E                              POP     SI
  5326 000014CC 5F                              POP     DI
  5327 000014CD 5D                              POP     BP
  5328 000014CE 1F                              POP     DS
  5329 000014CF 07                              POP     ES
  5330 000014D0 50                              PUSH    AX
  5331 000014D1 B419                            MOV     AH,GET_DEFAULT_DRIVE    ; INITIALIZE DOS
  5332 000014D3 CD21                            INT     21H
  5333 000014D5 58                              POP     AX
  5334 000014D6 CF                              IRET                            ; BACK TO USER
  5335                                  
  5336                                          ;IF	ALTVECT
  5337                                  BOOTMES:
  5338 000014D7 0D                      	DB      13
  5339 000014D8 0A                      TEN:	DB      10
  5340                                  	; 22/11/2022
  5341                                  	;DB	"MS-DOS version "
  5342                                  	;DB	MAJOR_VERSION + "0"
  5343                                  	;DB	"."
  5344                                  	;DB	(MINOR_VERSION / 10) + "0"
  5345                                  	;DB	(MINOR_VERSION % 10) + "0"
  5346                                  	;DB	13,10
  5347                                  	;;DB	"Copyright 1981,82 Microsoft Corp.",13,10,"$"
  5348                                  	;; 27/06/2018
  5349                                  	;DB	"Copyright 1981,87 Microsoft Corp.",13,10,"$"
  5350                                  	;ENDIF
  5351                                  	; 22/11/2022
  5352 000014D9 526574726F20444F53-     	db 	"Retro DOS v3.1"
  5352 000014E2 2076332E31         
  5353 000014E7 2028323031392D3230-     	db	" (2019-2022) "
  5353 000014F0 32322920           
  5354 000014F4 0D0A                    	db	13,10
  5355 000014F6 6279204572646F6761-     	db	"by Erdogan Tan "
  5355 000014FF 6E2054616E20       
  5356 00001505 0D0A                    	db	13,10
  5357 00001507 0D0A24                  	db	13,10,"$"
  5358                                  
  5359                                  	; 10/06/2018 - Retro DOS v3.0
  5360                                  NULDEV: 
  5361 0000150A 4E554C00                	DB      "NUL",0
  5362                                  CONDEV: 
  5363 0000150E 434F4E00                	DB      "CON",0
  5364                                  AUXDEV: 
  5365 00001512 41555800                	DB      "AUX",0
  5366                                  PRNDEV: 
  5367 00001516 50524E00                	DB      "PRN",0
  5368                                  
  5369                                  CONFIG:
  5370 0000151A 5C434F4E4649472E53-     	DB      "\CONFIG.SYS",0
  5370 00001523 595300             
  5371                                  
  5372                                  CNTRY_DRV:
  5373 00001526 413A                    	DB	"A:"
  5374                                  CNTRY_ROOT:
  5375 00001528 5C                      	DB	"\"
  5376                                  CNTRY_PATH:
  5377 00001529 434F554E5452592E53-     	DB	"COUNTRY.SYS",0
  5377 00001532 595300             
  5378 00001535 00<rep 34h>             	times	52 db 0
  5379                                  
  5380                                  COUNTRY_FILE_SIGNATURE:
  5381 00001569 FF434F554E545259        	db	0FFh,'COUNTRY' 	 
  5382                                  
  5383                                  CntryCodePage_Id:
  5384 00001571 0000                    	DW	0	
  5385                                  
  5386                                  COMMND:
  5387 00001573 5C434F4D4D414E442E-     	DB      "\COMMAND.COM",0
  5387 0000157C 434F4D00           
  5388 00001580 00<rep 14h>             	times	20 db 0
  5389                                  
  5390                                  COMTAB:
  5391                                          ;DB	8,"AVAILDEV",'A'	; NO LONGER SUPPORTED
  5392 00001594 074255464645525342      	DB	7,"BUFFERS",  'B'
  5393 0000159D 05425245414B43          	DB	5,"BREAK",    'C'
  5394 000015A4 0644455649434544        	DB	6,"DEVICE",   'D'
  5395 000015AC 0546494C455346          	DB	5,"FILES",    'F'
  5396 000015B3 044643425358            	DB	4,"FCBS",     'X'
  5397 000015B9 094C41535444524956-     	DB	9,"LASTDRIVE",'L'
  5397 000015C2 454C               
  5398 000015C4 08445249565041524D-     	DB	8,"DRIVPARM", 'P'       ; RS for DOS 3.2
  5398 000015CD 50                 
  5399                                  		;IF	STACKSW					; 3.30
  5400 000015CE 06535441434B534B        	DB	6,"STACKS",   'K'       ; BAS for DOS 3.2	; 3.30
  5401                                  		;ENDIF						; 3.30
  5402 000015D6 07434F554E54525951      	DB	7,"COUNTRY",  'Q'
  5403 000015DF 055348454C4C53          	DB	5,"SHELL",    'S'
  5404                                  	;DB	8,"SWITCHAR",'W'	; NO LONGER SUPPORTED
  5405                                  
  5406 000015E6 00                              DB      0
  5407                                  
  5408                                  DEVICEPARAMETERS:  ; STRUC A_DEVICEPARAMETERS
  5409                                  ;DeviceParameters a_DeviceParameters <0,DEV_3INCH720KB,0,80>
  5410 000015E7 00                      DEVP.SPECIALFUNC:	DB 0
  5411 000015E8 02                      DEVP.DEVICETYPE:	DB DEV_3INCH720KB
  5412 000015E9 0000                    DEVP.ATTRIBUTES:	DW 0
  5413 000015EB 5000                    DEVP.CYLINDERS:		DW 80
  5414 000015ED 00                      DEVP.MEDIATYPE:		DB 0
  5415 000015EE 00<rep 1Fh>             DEVP.DP_BPB:		TIMES A_BPB.size DB 0
  5416 0000160D 0000                    DEVP.TRACKTBLENTS:	DW 0
  5417 0000160F FC                      DEVP.SECTORTABLE:	DB MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
  5418                                  
  5419 00001610 0200                    HLIM: DW 2
  5420 00001612 0900                    SLIM: DW 9
  5421                                  
  5422 00001614 00                      DRIVE: DB 0
  5423 00001615 0000                    SWITCHES: DW 0
  5424                                  
  5425                                  ; 06/07/2018
  5426                                  
  5427                                  ;-----------------------------------------------------------------------------
  5428                                  ; BOOT DISK PARAMETERS
  5429                                  ;-----------------------------------------------------------------------------
  5430                                  ; 02/06/2018 - Retro DOS v3.0
  5431                                  ; 07/04/2018 - Retro DOS V2.0
  5432                                  
  5433                                  ;BOOT_DRV_PARMS:
  5434                                  ;		; 1.44MB
  5435                                  ;		dw 512
  5436                                  ;               db 1
  5437                                  ;               dw 1	
  5438                                  ;               db 2
  5439                                  ;               dw 224
  5440                                  ;		dw 2880
  5441                                  ;		; Retro DOS v1.0 - 10/02/2018
  5442                                  ;		db 0F0h		; Media descriptor
  5443                                  ;		dw 9		; FAT size in sectors
  5444                                  ;		dw 18		; Sectors per track
  5445                                  ;		dw 2		; Number of heads
  5446                                  ;		; 02/06/2018 - Retro DOS v3.0
  5447                                  ;		;dw 0		
  5448                                  ;		dd 0		; Hidden sectors
  5449                                  ;		dd 0		; Big total sectors		
  5450                                  ;
  5451                                  ;; Note: These (fd&hd) parameters table sizes are  
  5452                                  ;;						 31 bytes for MSDOS 3.3		
  5453                                  ;;						 19 bytes for MSDOS 2.11
  5454                                  
  5455                                  ;-----------------------------------------------------------------------------
  5456                                  ; FLOPPY DISK PARAMETERS
  5457                                  ;-----------------------------------------------------------------------------
  5458                                  ; 02/06/2018 - Retro DOS v3.0
  5459                                  ; 07/04/2018 - Retro DOS V2.0
  5460                                  
  5461                                  
  5462                                  ; 02/06/2018 - Retro DOS v3.0 - 25 bytes of DOS disk paramaters
  5463                                  
  5464                                  
  5465                                  ;
  5466                                  ; The following are the recommended BPBs for the media that we know of so
  5467                                  ; far.
  5468                                  
  5469                                  ; 48 tpi diskettes
  5470                                  	;EVENB
  5471                                  ;align 2
  5472                                  ;BPB48T:
  5473                                  ;	DW	512
  5474                                  ;	DB	2
  5475                                  ;	DW	1
  5476                                  ;	DB	2
  5477                                  ;	DW	112
  5478                                  ;	DW	2*9*40
  5479                                  ;	DB	0FDH
  5480                                  ;	DW	2
  5481                                  ;	DW	9
  5482                                  ;	DW	2
  5483                                  ;	DD	0		;hidden sectors - sp
  5484                                  ;	DD	0		;big total sectors - sp
  5485                                  ;	;DB	6 DUP(?)	;reserved
  5486                                  ;	;times	6 db 0
  5487                                  
  5488                                  ; 96tpi diskettes
  5489                                  	;EVENB
  5490                                  ;align 2
  5491                                  ;BPB96T:	
  5492                                  ;	DW	512
  5493                                  ;	DB	1
  5494                                  ;	DW	1
  5495                                  ;	DB	2
  5496                                  ;	DW	224
  5497                                  ;	DW	2*15*80
  5498                                  ;	DB	0f9H
  5499                                  ;	DW	7
  5500                                  ;	DW	15
  5501                                  ;	DW	2
  5502                                  ;	DD	0		;hidden sectors - sp
  5503                                  ;	DD	0		;big total sectors - sp
  5504                                  ;	;DB	6 DUP(?)	;reserved
  5505                                  ;	;times	6 db 0
  5506                                  
  5507                                  ;BPBSIZ	equ	$-BPB96T
  5508                                  BPBSIZ	equ	25  ; 02/06/2018
  5509                                  
  5510                                  
  5511                                  ; 3 1/2 inch diskette BPB
  5512                                  	;EVENB
  5513                                  ;align 2
  5514                                  ;BPB35:	
  5515                                  ;	DW	512
  5516                                  ;	DB	2
  5517                                  ;	DW	1		; Double sided with 9 sec/trk
  5518                                  ;	DB	2
  5519                                  ;	DW	70h
  5520                                  ;	DW	2*9*80
  5521                                  ;	DB	0f9H
  5522                                  ;	DW	3
  5523                                  ;	DW	9
  5524                                  ;	DW	2
  5525                                  ;	DD	0		;hidden sectors - sp
  5526                                  ;	DD	0		;big total sectors - sp
  5527                                  ;	;DB	6 DUP(?)	;reserved
  5528                                  ;	;times	6 db 0
  5529                                  
  5530                                  	;EVENB
  5531 00001617 90                      align 2
  5532                                  		; Retro DOS v3.0 - 25 bytes disk parameters (02/06/2018)
  5533                                  		; Retro DOS v2.0 - 19 bytes disk parameters (07/04/2018)
  5534                                  _FD_parameters:
  5535                                  		; Retro DOS v1.0 - 10/02/2018
  5536                                  		; 17 bytes of DOS disk parameters
  5537                                  
  5538                                  ; 48 tpi diskettes
  5539                                  BPB48T: 	; 02/06/2018 - Retro DOS v3.0
  5540                                  _360K_parameters:
  5541                                  		; 360KB
  5542 00001618 0002                    		dw 512		; Sector size in bytes.
  5543 0000161A 02                      		db 2		; Sector per allocation unit.
  5544 0000161B 0100                    		dw 1		; Reserved sectors.
  5545 0000161D 02                      		db 2		; Number of allocation tables.
  5546 0000161E 7000                    		dw 112		; Number of directory entrys.
  5547 00001620 D002                    		dw 720		; Number of sectors on the disk.
  5548                                  		; Retro Dos v1.0 - 10/02/2018
  5549 00001622 FD                      		db 0FDh		; Media descriptor
  5550 00001623 0200                    		dw 2		; FAT size in sectors
  5551 00001625 0900                    		dw 9		; Sectors per track
  5552 00001627 0200                    		dw 2		; Number of heads
  5553                                  		; Retro DOS v2.0 - 07/04/2018
  5554                                  		;dw 0		; Hidden sectors
  5555                                  		; Retro DOS v3.0 - 02/06/2018
  5556 00001629 00000000                		dd 0		; Hidden sectors
  5557 0000162D 00000000                		dd 0		; Big Total sectors
  5558                                  ; 96tpi diskettes
  5559                                  BPB96T:		; 02/06/2018 - Retro DOS v3.0
  5560                                  _1200K_parameters:
  5561                                  		; 1.2MB
  5562 00001631 0002                    		dw 512
  5563 00001633 01                                      db 1
  5564 00001634 0100                                    dw 1	
  5565 00001636 02                                      db 2
  5566 00001637 E000                                    dw 224
  5567 00001639 6009                    		dw 2400
  5568                                  		; Retro DOS v1.0 - 10/02/2018
  5569 0000163B F9                      		db 0F9h		; Media Descriptor
  5570 0000163C 0700                    		dw 7		; FAT size in sectors
  5571 0000163E 0F00                    		dw 15		; Sectors per track
  5572 00001640 0200                    		dw 2		; Number of heads
  5573                                  		; Retro DOS v2.0 - 07/04/2018
  5574                                  		;dw 0		; Hidden sectors
  5575                                  		; Retro DOS v3.0 - 02/06/2018
  5576 00001642 00000000                		dd 0		; Hidden sectors
  5577 00001646 00000000                		dd 0		; Big Total sectors
  5578                                  ; 3 1/2 inch diskette bpb
  5579                                  BPB35:		; 02/06/2018 - Retro DOS v3.0	
  5580                                  _720K_paramaters:
  5581                                  		; 720KB
  5582 0000164A 0002                    		dw 512		; Sector size in bytes.
  5583 0000164C 02                      		db 2		; Sector per allocation unit.
  5584 0000164D 0100                    		dw 1		; Reserved sectors.
  5585 0000164F 02                      		db 2		; Number of allocation tables.
  5586 00001650 7000                    		dw 112		; Number of directory entrys.
  5587 00001652 A005                    		dw 1440		; Number of sectors on the disk.
  5588                                  		; Retro DOS v1.0 - 10/02/2018
  5589 00001654 F9                      		db 0F9h		; Media descriptor
  5590 00001655 0300                    		dw 3		; FAT size in sectors
  5591 00001657 0900                    		dw 9		; Sectors per track
  5592 00001659 0200                    		dw 2		; Number of heads
  5593                                  		; Retro DOS v2.0 - 07/04/2018
  5594                                  		;dw 0
  5595                                  		; Retro DOS v3.0 - 02/06/2018
  5596 0000165B 00000000                		dd 0		; Hidden sectors
  5597 0000165F 00000000                		dd 0		; Big Total sectors
  5598                                  BPB35H:		; 03/06/2018 - Retro DOS v3.0 (MSDOS 6.0, SYSINIT2.ASM, 1991)		
  5599                                  _1440K_parameters:
  5600                                  		; 1.44MB
  5601 00001663 0002                    		dw 512
  5602 00001665 01                                      db 1
  5603 00001666 0100                                    dw 1	
  5604 00001668 02                                      db 2
  5605 00001669 E000                                    dw 224
  5606 0000166B 400B                    		dw 2880
  5607                                  		; Retro DOS v1.0 - 10/02/2018
  5608 0000166D F0                      		db 0F0h		; Media descriptor
  5609 0000166E 0900                    		dw 9		; FAT size in sectors
  5610 00001670 1200                    		dw 18		; Sectors per track
  5611 00001672 0200                    		dw 2		; Number of heads
  5612                                  		; Retro DOS v2.0 - 07/04/2018
  5613                                  		;dw 0
  5614                                  		; Retro DOS v3.0 - 02/06/2018
  5615 00001674 00000000                		dd 0		; Hidden sectors
  5616 00001678 00000000                		dd 0		; Big Total sectors
  5617                                  BPB288:		; 03/06/2018 - Retro DOS v3.0 (MSDOS 6.0, SYSINIT2.ASM, 1991)
  5618                                  _2880K_parameters:
  5619                                  		; 2.88MB
  5620 0000167C 0002                    		dw 512
  5621 0000167E 02                                      db 2
  5622 0000167F 0100                                    dw 1	
  5623 00001681 02                                      db 2
  5624 00001682 F000                                    dw 240
  5625 00001684 8016                    		dw 5760
  5626                                  		; Retro DOS v1.0 - 10/02/2018
  5627 00001686 F0                      		db 0F0h		; Media descriptor
  5628 00001687 0900                    		dw 9		; FAT size in sectors
  5629 00001689 2400                    		dw 36		; Sectors per track
  5630 0000168B 0200                    		dw 2		; Number of heads
  5631                                  		; Retro DOS v2.0 - 07/04/2018
  5632                                  		;dw 0
  5633                                  		; Retro DOS v3.0 - 02/06/2018
  5634 0000168D 00000000                		dd 0		; Hidden sectors
  5635 00001691 00000000                		dd 0		; Big Total sectors
  5636                                  
  5637                                  ; 06/07/2018
  5638                                  
  5639 00001695 90                      align 2
  5640                                  
  5641                                  BPBTable:
  5642                                  	; Retro DOS v3.0 - 03/06/2018  (MSDOS 6.0, SYSINIT2.ASM, 1991)
  5643 00001696 [1816]                  		dw	BPB48T	; 48tpi drives
  5644 00001698 [3116]                  		dw	BPB96T	; 96tpi drives
  5645 0000169A [4A16]                  		dw	BPB35	; 3.5" drives
  5646                                  ; the following are not supported, so default to 3.5" media layout
  5647 0000169C [4A16]                  		dw	BPB35	; not used - 8" drives
  5648 0000169E [4A16]                  		dw	BPB35	; not used - 8" drives
  5649 000016A0 [4A16]                  		dw	BPB35	; not used - hard files
  5650 000016A2 [4A16]                  		dw	BPB35	; not used - tape drives
  5651 000016A4 [6316]                  		dw	BPB35H	; 3 1/2" 1.44mb drive
  5652 000016A6 [4A16]                  		dw	BPB35	; ERIMO
  5653 000016A8 [7C16]                  		dw	BPB288	; 2.88 MB diskette drives
  5654                                  		;dw	BPB35H	; 3 1/2" 1.44mb drive
  5655                                  
  5656                                  END_OF_FDP_TBLS:
  5657                                  
  5658                                  ; ----------------------------------------------------------------------------
  5659                                  
  5660                                  ; 10/06/2018
  5661                                  
  5662                                  switchlist:
  5663 000016AA 074648535444434E        	 db	7,"FHSTDCN"         ; Preserve the positions of N and C.
  5664                                  
  5665                                  ; The following depend on the positions of the various letters in SwitchList
  5666                                  
  5667                                  flagdrive   equ     0004H
  5668                                  flagcyln    equ     0008H
  5669                                  flagseclim  equ     0010H
  5670                                  flagheads   equ     0020H
  5671                                  flagff	    equ     0040H
  5672                                  
  5673                                  SWTCHR	EQU "/"	
  5674                                  
  5675                                  ;SYSINITSEG      ENDS
  5676                                  ;       END
  5677                                  
  5678                                  ; ----------------------------------------------------------------------------
  5679                                  ; SYSIMES.ASM, 22/09/1983, -- SYSIMES.INC, 24/07/1987 (MSDOS 3.3) --
  5680                                  ; ----------------------------------------------------------------------------
  5681                                  
  5682                                  ;SYSINITSEG      SEGMENT PUBLIC BYTE 'SYSTEM_INIT'
  5683                                  
  5684                                          ;PUBLIC  BADOPM,CRLFM,BADSIZ,BADLD,BADCOM,SYSSIZE
  5685                                  
  5686                                  BADOPM: 
  5687 000016B2 0D0A556E7265636F67-     	DB      13,10,"Unrecognized command in CONFIG.SYS"
  5687 000016BB 6E697A656420636F6D-
  5687 000016C4 6D616E6420696E2043-
  5687 000016CD 4F4E4649472E535953 
  5688                                  BADSIZ_POST:
  5689                                  BADLD_POST:
  5690 000016D6 0D0A24                  CRLFM:  DB      13,10,'$'
  5691                                  
  5692                                  ;
  5693                                  ;PRINTED when installed device specifies too large a sector size.'$' terminated.
  5694                                  ; FORM: 	<BADSIZ_PRE>device name<BADSIZ_POST>
  5695                                  ;
  5696                                  
  5697                                  BADSIZ_PRE:
  5698 000016D9 0D0A536563746F7220-     	DB      13,10,"Sector size too large in file $"
  5698 000016E2 73697A6520746F6F20-
  5698 000016EB 6C6172676520696E20-
  5698 000016F4 66696C652024       
  5699                                  
  5700                                  ;
  5701                                  ;PRINTED when installed device cannot be found. '$' terminated.
  5702                                  ; FORM: 	<BADLD_PRE>device name<BADLD_POST>
  5703                                  ;
  5704                                  
  5705                                  BADLD_PRE:
  5706 000016FA 0D0A426164206F7220-     	DB      13,10,"Bad or missing $"
  5706 00001703 6D697373696E672024 
  5707                                  
  5708                                  ;
  5709                                  ;PRINTED when command interpreter is not found. NUL terminated.
  5710                                  ; FORM: 	<BADLD_PRE><BADCOM><BADLD_POST>
  5711                                  ;
  5712                                  
  5713 0000170C 436F6D6D616E642049-     BADCOM: DB      "Command Interpreter",0
  5713 00001715 6E7465727072657465-
  5713 0000171E 7200               
  5714                                  
  5715                                  ;PRINTED when country code, code page combination was not found ;3.30
  5716                                  ;  in country.sys file. '$' terminated.				;3.30
  5717                                  ; FORM: 	<BADCOUNTRY>					; 3.30		
  5718                                  
  5719                                  BADCOUNTRY:
  5720 00001720 0D0A496E76616C6964-     	DB	13,10,"Invalid country code or code page",13,10,"$" ; 3.30
  5720 00001729 20636F756E74727920-
  5720 00001732 636F6465206F722063-
  5720 0000173B 6F646520706167650D-
  5720 00001744 0A24               
  5721                                  
  5722                                  ; 10/06/2018
  5723                                  
  5724                                  ;PRINTED when code page id is missing or wrong syntax. - J.K.	;3.30
  5725                                  ; FORM: 	<BADCOUNTRYCOM> 				;3.30
  5726                                  BADCOUNTRYCOM:
  5727 00001746 0D0A4572726F722069-     	DB	13,10,"Error in COUNTRY command",13,10,"$"	;3.30
  5727 0000174F 6E20434F554E545259-
  5727 00001758 20636F6D6D616E640D-
  5727 00001761 0A24               
  5728                                  
  5729                                  ;PRINTED when the memory left is not sufficient to handle COUTRY.SYS file ;3.30
  5730                                  ; FORM: 	<INSUFMEMORY>						  ;3.30
  5731                                  INSUFMEMORY:
  5732 00001763 0D0A496E7375666669-     	DB	13,10,"Insufficient memory for COUNTRY.SYS file",13,10,"$" ;3.30
  5732 0000176C 6369656E74206D656D-
  5732 00001775 6F727920666F722043-
  5732 0000177E 4F554E5452592E5359-
  5732 00001787 532066696C650D0A24 
  5733                                  
  5734                                  ; PRINTED when there is insufficient memory. '$' TERMINATED, note
  5735                                  ;   that this message includes crlfm!
  5736                                  ;
  5737                                  BADMEM:
  5738 00001790 0D0A436F6E66696775-     	DB	13,10,"Configuration too large for memory",13,10,"$"
  5738 00001799 726174696F6E20746F-
  5738 000017A2 6F206C617267652066-
  5738 000017AB 6F72206D656D6F7279-
  5738 000017B4 0D0A24             
  5739                                  
  5740                                  ; 26/03/2018
  5741                                  ; PRINTED when the attempt is made to install a block device which would
  5742                                  ;   have a drive letter > 'Z'
  5743                                  ;
  5744                                  
  5745                                  BADBLOCK:
  5746 000017B7 0D0A546F6F206D616E-     	DB	13,10,"Too many Block Devices",13,10,"$"
  5746 000017C0 7920426C6F636B2044-
  5746 000017C9 6576696365730D0A24 
  5747                                  
  5748                                  ; 10/06/2018
  5749                                  ; PRINTED when the attempt is made to install a stack with invalid	;3.30
  5750                                  ;   combinations of # of stacks, stack size.	- J.K. 5/23/86		;3.30
  5751                                  BADSTACK:
  5752 000017D2 0D0A496E76616C6964-     	DB	13,10,"Invalid STACK parameters",13,10,"$" 		;3.30
  5752 000017DB 20535441434B207061-
  5752 000017E4 72616D65746572730D-
  5752 000017ED 0A24               
  5753                                  
  5754                                  ;SYSSIZE LABEL   BYTE
  5755                                  
  5756                                  ;SYSINITSEG      ENDS
  5757                                  ;       END
