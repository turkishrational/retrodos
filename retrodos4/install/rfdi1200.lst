     1                                  ; ****************************************************************************
     2                                  ; RFDI1200.ASM (RFDI1200.COM) - Retro DOS v2.0 Floppy Disk Image Formatting
     3                                  ;						  Utility for MSDOS/WINDOWS
     4                                  ; ----------------------------------------------------------------------------
     5                                  ; Only for 1.2MB (5 1/4") Floppy Disks
     6                                  ; ****************************************************************************
     7                                  ; Last Update: 25/10/2023 (Retro DOS 4.0-4.2) -different boot sector code-
     8                                  ; Last Update: 27/03/2018 (Retro DOS 2.0) -different boot sector code-
     9                                  ; Last Update: 24/02/2018 (Retro DOS 1.0)
    10                                  ; ----------------------------------------------------------------------------
    11                                  ; Beginning: 11/02/2018
    12                                  ; ----------------------------------------------------------------------------
    13                                  ; Assembler: NASM version 2.11
    14                                  ; ----------------------------------------------------------------------------
    15                                  ; Retro DOS Operating System Project by ERDOGAN TAN (Beginning: 04/02/2018)
    16                                  ; ----------------------------------------------------------------------------
    17                                  ; Derived from 'fdimage.s'(FDIMAGE.COM) source code by Erdogan Tan
    18                                  ; (02/12/2017)
    19                                  ; ****************************************************************************
    20                                  ; nasm rfdi1200.s -l rfdi1200.lst -o RFDI1200.COM
    21                                  
    22                                  bsDriveNumber   equ RETRODOS_FAT12_FDBS + 36
    23                                  bsVolumeID      equ RETRODOS_FAT12_FDBS + 39
    24                                  bsVolumeLabel   equ RETRODOS_FAT12_FDBS + 43
    25                                  
    26                                  ; DTA (PSP+80h= Offset 128)
    27                                  DTA_Attrib equ 149 ; PDP+21
    28                                  DTA_Time equ 150 ; PSP+22
    29                                  DTA_Date equ 152 ; PSP 24
    30                                  DTA_FileSize equ 154 ; PSP + 26
    31                                  DTA_FileName equ 158 ; PSP + 30
    32                                  
    33                                  [BITS 16]
    34                                  [ORG 100h]
    35                                  
    36                                  	;cli
    37                                  	;cld
    38                                  	;push	cs
    39                                  	;pop	ss
    40                                  	;mov	sp, 0FFFEh
    41                                  	;sti
    42                                  	
    43 00000000 BB[680B]                	mov	bx, SizeOfFile+100
    44 00000003 83C30F                          add	bx, 15
    45 00000006 D1EB                            shr	bx, 1
    46 00000008 D1EB                            shr	bx, 1
    47 0000000A D1EB                    	shr	bx, 1
    48 0000000C D1EB                    	shr	bx, 1
    49 0000000E B44A                            mov	ah, 4Ah ; modify memory allocation
    50                                          ;push	cs
    51                                          ;pop	es
    52 00000010 CD21                            int	21h 
    53                                  
    54                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    55                                  ; get fd image file name
    56                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    57                                  
    58 00000012 BE8000                  	mov	si, 80h			; PSP command tail
    59 00000015 AC                       	lodsb
    60 00000016 08C0                    	or	al, al 			; command tail length                            
    61 00000018 0F84C700                	jz	R_17			; jump if zero
    62                                  R_01:
    63 0000001C AC                      	lodsb
    64 0000001D 3C20                    	cmp	al, ' '			; is it SPACE ?
    65 0000001F 74FB                    	je	short R_01 		
    66 00000021 0F82BE00                	jb	R_17
    67                                  	
    68                                  	; check fd image file name
    69                                  R_02:
    70 00000025 BF[5B0B]                       	mov	di, img_file_name
    71 00000028 AA                      	stosb
    72                                  R_03:
    73 00000029 AC                      	lodsb
    74                                  	;cmp	al, 0Dh ; ENTER (CR) key
    75 0000002A 3C20                    	cmp	al, 20h ; ' '
    76 0000002C 760C                    	jna	short R_04
    77 0000002E AA                      	stosb
    78 0000002F 81FF[670B]              	cmp	di, img_file_name + 12
    79 00000033 72F4                    	jb	short R_03
    80 00000035 803C20                  	cmp	byte [si], 20h 
    81 00000038 773F                    	ja	short R_11
    82                                  R_04:
    83                                  	;sub	al, al
    84                                  	;stosb
    85                                  
    86                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    87                                  ; File name capitalization
    88                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    89                                  
    90 0000003A BE[5B0B]                	mov	si, img_file_name
    91 0000003D 89F7                    	mov	di, si
    92 0000003F 89F3                    	mov	bx, si
    93                                  R_05:
    94 00000041 AC                      	lodsb
    95 00000042 3C61                    	cmp	al, 'a'
    96 00000044 730D                    	jnb	short R_07
    97 00000046 20C0                    	and	al, al
    98 00000048 7412                    	jz	short R_08
    99 0000004A 3C2E                    	cmp	al, '.'
   100 0000004C 7502                    	jne	short R_06
   101 0000004E 89FB                    	mov	bx, di ; dot position	
   102                                  R_06:
   103 00000050 AA                      	stosb
   104 00000051 EBEE                    	jmp	short R_05 		
   105                                  R_07:
   106 00000053 3C7A                    	cmp	al, 'z'
   107 00000055 77F9                    	ja	short R_06
   108 00000057 24DF                    	and	al, 0DFh ; NOT 32
   109 00000059 AA                      	stosb
   110 0000005A EBE5                    	jmp	short R_05	
   111                                  R_08:
   112 0000005C 8805                    	mov	[di], al
   113 0000005E 4F                      	dec	di
   114 0000005F 39FB                    	cmp	bx, di
   115 00000061 7316                    	jnb	short R_11
   116 00000063 29DF                    	sub	di, bx
   117 00000065 81EB[5B0B]              	sub	bx, img_file_name
   118 00000069 83FF03                  	cmp	di, 3
   119 0000006C 7606                    	jna	short R_09
   120 0000006E 21DB                    	and	bx, bx
   121 00000070 7507                    	jnz	short R_11
   122 00000072 EB0D                    	jmp	short R_10		
   123                                  R_09:
   124 00000074 83FB08                  	cmp	bx, 8
   125 00000077 7608                    	jna	short R_10
   126                                  R_11:
   127 00000079 BE[CF05]                	mov	si, msg_inv_file_name
   128                                  R_12:	
   129 0000007C E8B201                  	call	print_msg
   130 0000007F EB57                    	jmp	short R_16
   131                                  
   132                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   133                                  ; Find image file
   134                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   135                                  	
   136                                  R_10:
   137 00000081 BA[5B0B]                	mov	dx, img_file_name
   138 00000084 B93F00                  	mov	cx, 3Fh ; File Attributes
   139 00000087 B44E                    	mov	ah, 4Eh ; MS-DOS Function = Find First File
   140 00000089 CD21                    	int	21h
   141 0000008B 726B                    	jc	R_20
   142                                  
   143                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   144                                  ; Check image file features
   145                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   146                                  
   147                                  R_14:
   148 0000008D BE9500                  	mov	si, DTA_Attrib
   149 00000090 8A04                    	mov	al, [si]
   150 00000092 241F                    	and	al, 1Fh ; directory, volume label, system, hidden, read only
   151 00000094 755D                    	jnz	short R_19     
   152 00000096 BE9A00                  	mov	si, DTA_FileSize
   153 00000099 AD                      	lodsw
   154 0000009A 833C12                  	cmp	word [SI], 12h
   155 0000009D 7554                    	jne	short R_19
   156 0000009F 3D00C0                  	cmp	ax, 0C000h ; 1.2 MB floppy disk image (12C000h bytes)
   157 000000A2 754F                    	jne	short R_19
   158                                  
   159                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   160                                  ; Overwrite question
   161                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   162                                  
   163 000000A4 BE[5B06]                	mov	si, msg_overwrite_question1
   164 000000A7 E88701                  	call	print_msg
   165 000000AA BE9E00                  	mov	si, DTA_FileName
   166 000000AD E88101                  	call	print_msg
   167 000000B0 BE[7806]                	mov	si, msg_overwrite_question2
   168 000000B3 E87B01                  	call	print_msg
   169 000000B6 BE[8006]                	mov	si, msg_yes_no
   170 000000B9 E87501                  	call	print_msg
   171                                  
   172                                  	; get answer
   173                                  R_15:
   174 000000BC 31C0                    	xor	ax, ax
   175 000000BE CD16                    	int	16h			; wait for keyboard command
   176 000000C0 3C03                    	cmp	al, 'C'-40h
   177 000000C2 7414                    	je	short R_16 ; Exit                   
   178 000000C4 3C1B                    	cmp	al, 27
   179 000000C6 7410                    	je	short R_16 ; Exit
   180 000000C8 24DF                    	and	al, 0DFh
   181 000000CA 3C59                    	cmp	al, 'Y'			; Yes?
   182 000000CC 741D                    	je	short R_18		; write
   183 000000CE 3C4E                    	cmp	al, 'N'			; No?
   184 000000D0 75EA                    	jne	short R_15      
   185                                  					; no write (exit)  
   186 000000D2 BE[2A07]                	mov	si, Msg_NO
   187 000000D5 E85901                  	call	print_msg 
   188                                  
   189                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   190                                  ; Nextline & Exit
   191                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   192                                  
   193                                  R_16:
   194 000000D8 BE[2207]                	mov	si, CRLF
   195 000000DB E85301                  	call	print_msg
   196 000000DE B8004C                  	mov	ax, 4C00h		; terminate
   197 000000E1 CD21                    	int	21h
   198                                  
   199                                  R_17:
   200 000000E3 BE[4705]                	mov	si, RetroDOS_Welcome
   201 000000E6 E84801                  	call	print_msg
   202 000000E9 EBED                    	jmp	short R_16 ; Exit
   203                                  
   204                                  R_18:
   205 000000EB BE[2507]                	mov	si, Msg_YES
   206 000000EE E84001                  	call	print_msg
   207 000000F1 EB10                    	jmp	short R_21
   208                                  
   209                                  R_19:
   210 000000F3 BE[1106]                	mov	si, msg_inv_image_file
   211 000000F6 EB84                    	jmp	short R_12
   212                                  
   213                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   214                                  ; Create image file
   215                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   216                                  
   217                                  R_20:
   218                                  	; create a new fd image file
   219                                  	;mov	dx, img_file_name
   220 000000F8 B90000                  	mov	cx, 0 ; File Attributes
   221 000000FB B43C                    	mov	ah, 3Ch ; MS-DOS Function = Create File
   222 000000FD CD21                    	int	21h
   223 000000FF 0F8276FF                	jc	R_11
   224                                  
   225                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   226                                  ; writing root directory sectors
   227                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   228                                  
   229                                  R_21:
   230 00000103 BE[2207]                	mov	si, CRLF
   231 00000106 E82801                  	call	print_msg
   232                                  
   233                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   234                                  ; Open image file for writing
   235                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   236                                  
   237 00000109 B002                    	mov	al, 2 ; open for reading and writing
   238                                  	;mov	dx, img_file_name
   239 0000010B B43D                    	mov	ah, 3Dh ; open file
   240 0000010D CD21                    	int	21h
   241 0000010F 0F8266FF                	jc	R_11
   242                                  
   243 00000113 A3[4505]                	mov	[img_file_handle], ax
   244                                  
   245 00000116 BE[AB06]                	mov	si, Msg_Writing_Root_Dir
   246 00000119 E81501                  	call	print_msg
   247                                  
   248 0000011C B80F00                  	mov	ax, 15  ; Root Directory Address
   249 0000011F BB[4209]                	mov	bx, FDFORMAT_FATBUFFER_S9
   250                                  R_22:
   251 00000122 E81B01                  	call	write_fd_sector
   252 00000125 0F82E500                	jc	R_29
   253 00000129 40                      	inc	ax
   254 0000012A 83F81C                   	cmp	ax, 28 ; 15+14 = 29 (14 sectors, 224 entries)
   255 0000012D 76F3                    	jna	short R_22
   256                                  
   257 0000012F BE[1E07]                	mov	si, Msg_OK
   258 00000132 E8FC00                  	call	print_msg
   259                                  
   260                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   261                                  ; writing data sectors
   262                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   263                                  
   264 00000135 BE[CD06]                	mov	si, Msg_Writing_Data_Sectors
   265 00000138 E8F600                  	call	print_msg
   266 0000013B B403                    	mov	ah, 3
   267 0000013D BB0700                  	mov	bx, 7
   268 00000140 CD10                    	int	10h ; Return Cursor Position
   269                                  	; DL = Column, DH= Line
   270 00000142 8916[E806]              	mov	[Cursor_Pos], dx
   271 00000146 B81D00                  	mov	ax, 29  ; First Data Sector
   272                                  R_23:
   273 00000149 50                      	push	ax
   274 0000014A 40                      	inc	ax ; 1 based printing of 0 based sectors
   275 0000014B BE[E606]                	mov	si, Sector_Str + 3
   276 0000014E E81401                  	call	bin_to_decimal
   277 00000151 8B16[E806]              	mov	dx, [Cursor_Pos]
   278 00000155 B402                    	mov	ah, 2
   279 00000157 CD10                    	int	10h  ; Set Cursor Position
   280 00000159 E8D500                  	call	print_msg
   281 0000015C 58                      	pop	ax
   282 0000015D BB[3F07]                	mov	bx, FDFORMAT_SECBUFFER
   283 00000160 E8DD00                  	call	write_fd_sector
   284 00000163 0F82A700                	jc	R_29
   285                                  
   286 00000167 BB0700                  	mov	bx, 7
   287 0000016A 40                      	inc	ax
   288 0000016B 3D6009                  	cmp	ax, 2400
   289 0000016E 72D9                    	jb	short R_23
   290                                  
   291 00000170 BE[1B07]                	mov	si, Msg_3dot_OK
   292 00000173 E8BB00                  	call	print_msg
   293                                  
   294                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   295                                  ; writing FAT sectors
   296                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   297                                  
   298 00000176 BE[EA06]                	mov	si, Msg_Writing_FAT_Sectors
   299 00000179 E8B500                  	call	print_msg
   300 0000017C B80100                  	mov	ax, 1  ; FAT Beginning Address
   301 0000017F BB[3F09]                	mov	bx, FDFORMAT_FATBUFFER
   302 00000182 E8BB00                  	call	write_fd_sector
   303 00000185 0F828500                	jc	R_29
   304 00000189 BB[4209]                	mov	bx, FDFORMAT_FATBUFFER_S9
   305                                  R_24:
   306 0000018C 40                      	inc	ax
   307 0000018D E8B000                  	call	write_fd_sector
   308 00000190 727C                     	jc	short R_29
   309 00000192 83F807                  	cmp	ax, 7
   310 00000195 72F5                    	jb	short R_24
   311 00000197 BB[3F09]                	mov	bx, FDFORMAT_FATBUFFER
   312 0000019A 40                      	inc	ax
   313 0000019B E8A200                  	call	write_fd_sector
   314 0000019E 726E                    	jc	short R_29
   315 000001A0 BB[4209]                	mov	bx, FDFORMAT_FATBUFFER_S9
   316                                  R_25:
   317 000001A3 40                      	inc	ax 
   318 000001A4 E89900                          call	write_fd_sector
   319 000001A7 7265                    	jc	short R_29
   320 000001A9 83F80E                  	cmp	ax, 14
   321 000001AC 72F5                    	jb	short R_25
   322                                  
   323 000001AE BE[1E07]                	mov	si, Msg_OK
   324 000001B1 E87D00                  	call	print_msg
   325                                  
   326 000001B4 BE[0D07]                	mov	si, Msg_Volume_Name
   327 000001B7 E87700                  	call	print_msg
   328 000001BA E8DD00                  	call	rw_char
   329 000001BD 7219                    	jc	short R_28
   330 000001BF 8A04                    	mov	al, [si]
   331 000001C1 3C20                    	cmp	al, 20h
   332 000001C3 7613                    	jna	short R_28
   333 000001C5 BF[5F03]                	mov	di, bsVolumeLabel
   334 000001C8 B90B00                  	mov	cx, 11
   335 000001CB 46                      	inc	si  
   336 000001CC EB06                    	jmp	short R_27  
   337                                  
   338                                  R_26:
   339 000001CE AC                      	lodsb
   340 000001CF 47                      	inc	di
   341 000001D0 3C20                    	cmp	al, 20h
   342 000001D2 7655                    	jna	short R_32
   343                                  R_27:
   344 000001D4 8805                    	mov 	[di], al
   345 000001D6 E2F6                    	loop	R_26
   346                                  
   347                                  R_28:
   348 000001D8 BE[8B06]                	mov	si, Msg_Writing_Boot_Sector
   349 000001DB E85300                  	call	print_msg
   350                                  
   351 000001DE BE[5B03]                	mov	si, bsVolumeID
   352                                  
   353 000001E1 31C0                    	xor	ax, ax
   354 000001E3 CD1A                    	int	1Ah			; get time of day
   355 000001E5 8914                    	mov	[si], dx
   356 000001E7 894C02                  	mov	[si+2], cx		; set unique volume ID
   357                                  
   358 000001EA B402                    	mov	ah, 02h			; Return Current Time
   359 000001EC CD1A                    	int	1Ah
   360 000001EE 86E9                    	xchg	ch, cl
   361 000001F0 86F2                    	xchg	dh, dl
   362                                  
   363 000001F2 01D1                    	add	cx, dx  
   364 000001F4 014C02                  	add	[si+2], cx
   365                                                 
   366 000001F7 B404                    	mov	ah, 04h			; Return Current Date
   367 000001F9 CD1A                    	int	1Ah
   368 000001FB 86E9                    	xchg	ch,cl
   369 000001FD 86F2                    	xchg	dh,dl
   370                                  
   371 000001FF 01D1                    	add	cx, dx  
   372 00000201 014C02                  	add	[si+2], cx
   373                                  
   374 00000204 31C0                    	xor	ax, ax ; Boot sector
   375 00000206 BB[3403]                	mov	bx, RETRODOS_FAT12_FDBS	; location of boot code
   376                                  
   377 00000209 E83400                  	call	write_fd_sector
   378 0000020C 7313                    	jnc	short R_30
   379                                  R_29:
   380 0000020E 88E0                    	mov	al, ah ;  error code
   381 00000210 E86700                  	call	bin_to_hex
   382 00000213 A3[3907]                	mov 	[error_code], ax
   383                                  
   384 00000216 BE[2207]                	mov	si, CRLF
   385 00000219 E81500                  	call	print_msg
   386                                  
   387 0000021C BE[2E07]                	mov	si, Msg_Error
   388 0000021F EB03                    	jmp	short R_31
   389                                  
   390                                  R_30:
   391 00000221 BE[1E07]                	mov	si, Msg_OK
   392                                  R_31:
   393 00000224 E80A00                  	call	print_msg
   394                                  
   395 00000227 CD20                    	int	20h	; Exit
   396                                  
   397                                  R_32:
   398 00000229 C60520                  	mov	byte [di], 20h
   399 0000022C 47                      	inc	di
   400 0000022D E2FA                    	loop	R_32
   401 0000022F EBA7                    	jmp	short R_28
   402                                  
   403                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   404                                  ; Print messages
   405                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   406                                  
   407                                  print_msg:
   408                                  
   409                                  print_msg_LOOP:
   410 00000231 AC                      	lodsb                           ; Load byte at DS:SI to AL
   411 00000232 20C0                    	and     al, al            
   412 00000234 7409                    	jz      short print_msg_OK       
   413 00000236 B40E                    	mov	ah, 0Eh			
   414 00000238 BB0700                  	mov     bx, 07h             
   415 0000023B CD10                    	int	10h			; BIOS Service func ( ah ) = 0Eh
   416                                  					; Write char as TTY
   417                                  					; AL-char BH-page BL-color
   418 0000023D EBF2                    	jmp     short print_msg_LOOP           
   419                                  
   420                                  print_msg_OK:
   421 0000023F C3                      	retn
   422                                  
   423                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   424                                  ; Writing a block (sector) to floppy disk image file
   425                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   426                                  
   427                                  write_fd_sector:
   428                                  	; writing a block (sector) to floppy disk image file
   429                                  	; Only for 1.44 MB FAT12 Floppy Disks
   430                                  	; INPUT -> AX = Logical Block (Sector) Address
   431                                  	; ES:BX = Sector Buffer
   432                                  	; OUTPUT ->
   433                                  	; cf = 0 -> AX = Logical Block (Sector) Address
   434                                  	; cf = 1 -> AH = Error Number
   435                                  	;
   436 00000240 50                      	push	ax ; sector
   437 00000241 53                      	push	bx ; buffer
   438 00000242 BA0002                  	mov	dx, 512
   439 00000245 F7E2                    	mul	dx
   440 00000247 89D1                    	mov	cx, dx
   441 00000249 89C2                    	mov	dx, ax
   442 0000024B 28C0                    	sub	al, al ; specified offset is from the beginning of the file
   443 0000024D B442                    	mov	ah, 42h ; seek (move file pointer)
   444 0000024F 8B1E[4505]              	mov 	bx, [img_file_handle]
   445 00000253 CD21                    	int	21h
   446                                  	;mov	bx, [img_file_handle]
   447 00000255 B90002                  	mov	cx, 512
   448 00000258 5A                      	pop	dx  ; buffer address
   449 00000259 B440                    	mov	ah, 40h ; write to file	
   450 0000025B CD21                    	int	21h
   451 0000025D 89D3                    	mov	bx, dx
   452 0000025F 7202                    	jc	short image_file_wr_err
   453 00000261 58                      	pop	ax ; sector
   454 00000262 C3                      	retn
   455                                  	
   456                                  image_file_wr_err:
   457 00000263 5A                      	pop	dx ; sector
   458 00000264 C3                      	retn
   459                                  	
   460                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   461                                  ; Convert byte to decimal number
   462                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   463                                  
   464                                  bin_to_decimal:
   465                                  	; INPUT: DS:SI = Target location
   466                                  	;        AX= Binary Number (Integer)
   467                                  	; OUTPUT: Decimal char at DS:SI
   468                                  	; SI decremented after every division
   469                                  	; till AX<10.
   470                                  	; CX, DX will be changed.
   471                                  	;
   472 00000265 B90A00                  	mov	cx, 10
   473                                  loc_btd_re_divide:
   474 00000268 31D2                    	xor	dx, dx
   475 0000026A F7F1                    	div	cx
   476 0000026C 80C230                  	add	dl,"0"
   477 0000026F 8814                    	mov	[si], dl
   478 00000271 83F800                  	cmp	ax, 0
   479 00000274 7603                    	jna	short pass_btd_re_divide
   480 00000276 4E                      	dec	si
   481 00000277 EBEF                    	jmp	short loc_btd_re_divide
   482                                  pass_btd_re_divide:
   483 00000279 C3                      	retn
   484                                  
   485                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   486                                  ; Convert byte to hexadecimal number
   487                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   488                                  
   489                                  bin_to_hex:
   490                                  	; INPUT ->
   491                                  	; 	AL = byte (binary number)
   492                                  	; OUTPUT ->
   493                                  	;	AX = hexadecimal string
   494                                  	;
   495 0000027A 6653                    	push	ebx
   496 0000027C 6631DB                  	xor	ebx, ebx
   497 0000027F 88C3                    	mov	bl, al
   498 00000281 C0EB04                  	shr	bl, 4
   499 00000284 678A9B[35050000]        	mov	bl, [ebx+hexchrs] 	 	
   500 0000028B 86D8                    	xchg	bl, al
   501 0000028D 80E30F                  	and	bl, 0Fh
   502 00000290 678AA3[35050000]        	mov	ah, [ebx+hexchrs] 
   503 00000297 665B                    	pop	ebx	
   504 00000299 C3                      	retn
   505                                  
   506                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   507                                  ; Read & Write characters
   508                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   509                                  
   510                                  rw_char:
   511                                  	; OUTPUT -> DS:SI = Entered String (ASCIIZ)
   512 0000029A BE[0107]                	mov     si, StrVolumeName
   513 0000029D BB0700                  	mov     bx, 7
   514 000002A0 B403                    	mov     ah, 3
   515 000002A2 CD10                    	int     10h
   516 000002A4 8916[E806]              	mov     [Cursor_Pos], dx
   517                                  read_next_char:
   518 000002A8 30E4                    	xor     ah, ah
   519 000002AA CD16                    	int     16h
   520 000002AC 20C0                    	and     al, al
   521 000002AE 7439                    	jz      short loc_arrow    
   522 000002B0 3CE0                    	cmp     al, 0E0h          
   523 000002B2 7435                    	je      short loc_arrow
   524 000002B4 3C08                    	cmp     al, 8
   525 000002B6 753D                    	jne     short char_return
   526                                  loc_back:
   527 000002B8 B403                    	mov     ah, 3
   528 000002BA CD10                    	int     10h
   529 000002BC 3A16[E806]              	cmp     dl, byte [Cursor_Pos]
   530 000002C0 761F                    	jna     short loc_beep
   531                                  prev_column:
   532 000002C2 FECA                    	dec     dl
   533                                  set_cursor_pos:
   534 000002C4 B402                    	mov     ah, 2
   535 000002C6 CD10                    	int     10h
   536 000002C8 88D3                    	mov     bl, dl
   537 000002CA 2A1E[E806]              	sub     bl, byte [Cursor_Pos] 
   538 000002CE B90100                  	mov     cx,1
   539 000002D1 B409                    	mov     ah, 9
   540 000002D3 B020                    	mov     al, 20h
   541 000002D5 8800                    	mov     [si+bx], al
   542                                  loc_write_it:
   543 000002D7 B307                    	mov     bl, 7
   544 000002D9 CD10                    	int     10h
   545 000002DB 8B16[E806]              	mov     dx, [Cursor_Pos]
   546 000002DF EBC7                    	jmp     short read_next_char
   547                                  loc_beep:
   548 000002E1 B40E                    	mov     ah, 0Eh
   549 000002E3 B007                    	mov     al, 7
   550 000002E5 CD10                    	int     10h
   551 000002E7 EBBF                    	jmp     short read_next_char
   552                                  loc_arrow:    
   553 000002E9 80FC4B                  	cmp     ah, 4Bh
   554 000002EC 74CA                    	je      short loc_back
   555 000002EE 80FC53                  	cmp     ah, 53h
   556 000002F1 74C5                    	je      short loc_back
   557 000002F3 EBB3                    	jmp     short read_next_char
   558                                  char_return:
   559 000002F5 B403                    	mov     ah, 3
   560 000002F7 CD10                    	int     10h
   561                                  check_char_type:
   562 000002F9 3C20                    	cmp     al, 20h
   563 000002FB 7230                    	jb      short loc_escape
   564 000002FD 88D4                    	mov     ah, dl
   565 000002FF 2A26[E806]              	sub     ah, byte [Cursor_Pos] 
   566 00000303 80FC0A                  	cmp     ah, 10
   567 00000306 77D9                    	ja      short loc_beep
   568 00000308 3C7A                    	cmp     al, "z"
   569 0000030A 779C                    	ja      short read_next_char
   570 0000030C 3C61                    	cmp     al, "a"
   571 0000030E 7202                    	jb      short pass_capitalize
   572 00000310 24DF                    	and     al, 0DFh
   573                                  pass_capitalize:
   574 00000312 88E3                    	mov     bl, ah  ; 30/07/2011
   575 00000314 30E4                    	xor     ah, ah
   576 00000316 8900                    	mov     [si+bx], ax
   577 00000318 B307                    	mov     bl, 7
   578 0000031A B40E                    	mov     ah, 0Eh
   579 0000031C CD10                    	int     10h
   580 0000031E EB88                    	jmp     short read_next_char
   581                                  pass_escape:
   582 00000320 3C0D                    	cmp     al, 0Dh
   583 00000322 7584                    	jne     short read_next_char
   584 00000324 B40E                    	mov     ah, 0Eh
   585 00000326 CD10                    	int     10h
   586 00000328 B00A                    	mov     al, 0Ah
   587 0000032A CD10                    	int     10h
   588 0000032C C3                      	retn
   589                                  loc_escape:
   590 0000032D 3C1B                    	cmp     al, 1Bh
   591 0000032F 75EF                    	jne     short pass_escape
   592 00000331 F9                      	stc
   593 00000332 C3                      	retn
   594                                  
   595                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   596                                  ;  Data
   597                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   598                                  
   599 00000333 00                      	db	0
   600                                  
   601                                  RETRODOS_FAT12_FDBS:
   602 00000334 <bin 200h>              	incbin 'FDBS1200.BIN'	; 25/10/2023
   603                                  
   604 00000534 00                      	db	0
   605                                  
   606                                  hexchrs:
   607 00000535 303132333435363738-     	db	'0123456789ABCDEF'
   607 0000053E 39414243444546     
   608                                  
   609                                  img_file_handle:
   610 00000545 0000                    	dw	0
   611                                  
   612                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   613                                  ;  Messages
   614                                  ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   615                                  
   616                                  RetroDOS_Welcome:
   617 00000547 0D0A                    	db	0Dh, 0Ah
   618 00000549 524554524F20444F53-     	db	'RETRO DOS 1.2 MB FAT12 Floppy Disk Image Format Utility'
   618 00000552 20312E32204D422046-
   618 0000055B 4154313220466C6F70-
   618 00000564 7079204469736B2049-
   618 0000056D 6D61676520466F726D-
   618 00000576 6174205574696C6974-
   618 0000057F 79                 
   619 00000580 0D0A                    	db	0Dh, 0Ah
   620 00000582 76332E302E32333130-     	db	"v3.0.231025  (c) Erdogan TAN 2018-2023"
   620 0000058B 323520202863292045-
   620 00000594 72646F67616E205441-
   620 0000059D 4E20323031382D3230-
   620 000005A6 3233               
   621 000005A8 0D0A                    	db	0Dh,0Ah
   622 000005AA 0D0A                    	db	0Dh,0Ah
   623 000005AC 55736167653A207266-     	db	'Usage: rfdimage <image file name> '
   623 000005B5 64696D616765203C69-
   623 000005BE 6D6167652066696C65-
   623 000005C7 206E616D653E20     
   624 000005CE 00                      	db	0
   625                                  
   626                                  msg_inv_file_name: 
   627 000005CF 0D0A                    	db	0Dh, 0Ah
   628 000005D1 496E76616C69642066-     	db	"Invalid file name !", 0Dh, 0Ah
   628 000005DA 696C65206E616D6520-
   628 000005E3 210D0A             
   629 000005E6 2846696C65206E616D-     	db	"(File name must fit to 8.3 DOS format) !"
   629 000005EF 65206D757374206669-
   629 000005F8 7420746F20382E3320-
   629 00000601 444F5320666F726D61-
   629 0000060A 74292021           
   630 0000060E 0D0A00                  	db	0Dh, 0Ah, 0
   631                                  
   632                                  msg_inv_image_file:
   633 00000611 0D0A                    	db	0Dh, 0Ah
   634 00000613 496E76616C69642066-     	db	"Invalid floppy disk image file !", 0Dh, 0Ah
   634 0000061C 6C6F70707920646973-
   634 00000625 6B20696D6167652066-
   634 0000062E 696C6520210D0A     
   635 00000635 2846696C652073697A-     	db	"(File size must be 1228800 bytes) !"
   635 0000063E 65206D757374206265-
   635 00000647 203132323838303020-
   635 00000650 6279746573292021   
   636 00000658 0D0A00                  	db	0Dh, 0Ah, 0  
   637                                  
   638                                  msg_overwrite_question1:
   639 0000065B 0D0A                    	db	0Dh, 0Ah
   640 0000065D 446F20796F75207761-     	db	'Do you want to overwrite '
   640 00000666 6E7420746F206F7665-
   640 0000066F 72777269746520     
   641 00000676 27                      	db	27h
   642 00000677 00                      	db	0
   643                                  
   644                                  msg_overwrite_question2: 
   645 00000678 27                      	db	27h
   646 00000679 2066696C6520            	db	' file '
   647 0000067F 00                      	db	0
   648                                  
   649                                  msg_yes_no:
   650 00000680 285965732F4E6F293F-     	db	'(Yes/No)? ', 0		
   650 00000689 2000               
   651                                  
   652                                  Msg_Writing_Boot_Sector:
   653 0000068B 57726974696E672072-     	db	"Writing retrodos boot sector...", 0
   653 00000694 6574726F646F732062-
   653 0000069D 6F6F7420736563746F-
   653 000006A6 722E2E2E00         
   654                                  
   655                                  Msg_Writing_Root_Dir:
   656 000006AB 57726974696E672072-     	db	"Writing root directory sectors...", 0
   656 000006B4 6F6F74206469726563-
   656 000006BD 746F72792073656374-
   656 000006C6 6F72732E2E2E00     
   657                                  
   658                                  Msg_Writing_Data_Sectors:
   659 000006CD 57726974696E672064-     	db	"Writing data sector: ", 0
   659 000006D6 61746120736563746F-
   659 000006DF 723A2000           
   660                                  
   661                                  Sector_Str:
   662 000006E3 3030303000              	db	"0000", 0
   663                                  Cursor_Pos:
   664 000006E8 0000                    	dw	0
   665                                  
   666                                  Msg_Writing_FAT_Sectors:
   667 000006EA 57726974696E672046-     	db	"Writing FAT sectors...", 0
   667 000006F3 415420736563746F72-
   667 000006FC 732E2E2E00         
   668                                  
   669                                  StrVolumeName:
   670 00000701 00<rep Ch>              	times 	12 db  0
   671                                  
   672                                  Msg_Volume_Name:
   673 0000070D 566F6C756D65204E61-     	db	"Volume Name: ", 0
   673 00000716 6D653A2000         
   674                                  
   675                                  Msg_3dot_OK:
   676 0000071B 2E2E2E                  	db	"..."
   677                                  Msg_OK:
   678 0000071E 204F4B2E                	db	' OK.'
   679                                  CRLF:
   680 00000722 0D0A00                  	db	0Dh, 0Ah, 0
   681                                  Msg_YES:
   682 00000725 2059455300              	db	' YES', 0
   683                                  Msg_NO:
   684 0000072A 204E4F00                	db	' NO', 0
   685                                  
   686                                  Msg_Error:
   687 0000072E 0D0A                    	db	0Dh, 0Ah
   688 00000730 4572726F72202120        	db	'Error ! '
   689 00000738 28                      	db	'('
   690                                  error_code:
   691 00000739 3030                    	dw	3030h
   692 0000073B 68                      	db	'h'
   693 0000073C 2920                    	db	') '
   694 0000073E 00                      	db	0
   695                                  
   696                                  FDFORMAT_SECBUFFER:
   697 0000073F F6<rep 200h>            	times	512 db 0F6h
   698                                  FDFORMAT_FATBUFFER:
   699 0000093F F9                      	db	0F9h  ; 5 1/4", 1200K, 3.5" 720K
   700 00000940 FF                      	db	0FFh
   701 00000941 FF                      	db	0FFh
   702                                  FDFORMAT_FATBUFFER_S9:
   703 00000942 00<rep 200h>            	times	512 db 0
   704                                  
   705 00000B42 286329204572646F67-     	db	'(c) Erdogan TAN 2018-2023'
   705 00000B4B 616E2054414E203230-
   705 00000B54 31382D32303233     
   706                                  
   707                                  img_file_name:  
   708 00000B5B 00<rep Dh>              	times	13 db 0
   709                                  
   710                                  SizeOfFile equ $-100
