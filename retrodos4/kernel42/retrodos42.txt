     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 02/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 26/12/2018 (Retro DOS 4.0), 28/12/2022 (Retro DOS 4.1, MSDOS 5.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15 (2.11)
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB   (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
   881                                  
   882                                  section .BIOSDATA vstart=0
   883                                  
   884                                  ;--- DOSBIOS data segment ----------------------------------------------------
   885                                  ;-----------------------------------------------------------------------------
   886                                  
   887                                  ;Bios_Data segment
   888                                  
   889                                  BData_start:				
   890 00000000 E91C16                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   891                                  ; ----------------------------------------------------------------------------
   892                                  
   893 00000003 0000                    DosDataSg:	dw 0
   894                                  
   895                                  ; DOS's int 2f handler will exit via a jump through here.
   896                                  ; This is how the BIOS hooks int2f
   897                                  
   898                                  ;BIOSDATA:0005h: ; 10/05/2023 (Note the 'bios_i2f equ 5' in 'msdos6.s')
   899                                  			
   900 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   901                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
   902                                  		; PCDOS 7.1 IBMBIO.COM - BIODATA:0006h
   903                                  		;dw int_2f
   904                                  		;dw 70h			; BIOSDATA segment (KERNEL_SEGMENT)
   905 00000006 [4313]                  		dw i2f_handler	
   906                                  bios_i2f_seg:	; 10/08/2023
   907 00000008 8602                    		dw DOSBIOCODESEG	; 02CCh for MSDOS 6.21 IO.SYS (25Ch+070h)
   908                                  					; 0364h PCDOS 7.1 IBMBIO.COM  (2F4h+070h)
   909                                  
   910 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   911                                  					; This is to maintain binary compatibility
   912                                  					; with DISK based DOS 5.0
   913                                  
   914                                  ; This is a byte used for special key handling in the resident
   915                                  ; console device driver. It must be here so that it can be included
   916                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   917                                  
   918 0000000C 00                      altah:		db 0			; special key handling
   919                                  			
   920 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   921 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   922                                  
   923                                  ; PTRSAV - pointer save
   924                                  ;
   925                                  ; This variable holds the pointer to the Request Header passed by a program
   926                                  ; wishing to use a device driver. When the strategy routine is called it 
   927                                  ; puts the address of the Request header in this variable and returns.
   928                                  		
   929 00000012 00000000                ptrsav:		dd 0			
   930                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   931 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   932 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   933 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   934 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   935 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   936 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   937                                  
   938                                  ;-----------------------------------------------------------------------------
   939                                  
   940                                  res_dev_list:
   941                                  
   942                                  ; Device Header for the CON Device Driver
   943                                  
   944                                  CONHeader:				; HEADER FOR DEVICE "CON"
   945 00000023 [3500]                  		dw auxdev2
   946 00000025 7000                    		dw 70h	
   947 00000027 1380                    word_727:	dw 8013h
   948 00000029 [D006]                  		dw strategy
   949 0000002B [DB06]                  		dw con_entry
   950 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   951 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   952 00000037 7000                    		dw 70h
   953 00000039 0080                    		dw 8000h
   954 0000003B [D006]                  		dw strategy
   955 0000003D [FC06]                  		dw aux0_entry
   956 0000003F 4155582020202020        aAux:		db 'AUX     '
   957 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   958 00000049 7000                    		dw 70h
   959 0000004B C0A0                    word_74B:	dw 0A0C0h
   960 0000004D [D006]                  		dw strategy
   961 0000004F [E006]                  		dw prn0_entry
   962 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   963 00000059 [6B00]                  timdev:		dw dskdev	
   964 0000005B 7000                    		dw 70h
   965 0000005D 0880                    		dw 8008h
   966 0000005F [D006]                  		dw strategy
   967 00000061 [1407]                  		dw tim_entry
   968 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   969 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   970 0000006D 7000                    		dw 70h
   971 0000006F C208                    		dw 8C2h
   972                                  		;dw offset strategy
   973                                  		;dw offset dsk_entry
   974                                  		; 19/10/2022
   975 00000071 [D006]                  		dw strategy
   976 00000073 [1907]                  		dw dsk_entry
   977                                  
   978                                  ; maximum number of drives
   979                                  
   980 00000075 04                      drvmax:		db 4			
   981 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   982 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   983                                  					; 96tpi support		
   984 00000078 00                      single:		db 0			; used to detect single drive systems		
   985 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   986                                  					; used by console driver.			
   987 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   988                                  					; drive. (examined by checksingle).
   989                                  		
   990 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   991 0000007D 7000                    		dw 70h
   992 0000007F 0080                    		dw 8000h
   993 00000081 [D006]                  		dw strategy
   994 00000083 [FC06]                  		dw aux0_entry
   995 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   996 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   997 0000008F 7000                    		dw 70h
   998 00000091 C0A0                    		dw 0A0C0h
   999 00000093 [D006]                  		dw strategy
  1000 00000095 [E706]                  		dw prn1_entry
  1001 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
  1002 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
  1003 000000A1 7000                    		dw 70h
  1004 000000A3 C0A0                    		dw 0A0C0h
  1005 000000A5 [D006]                  		dw strategy
  1006 000000A7 [EE06]                  		dw prn2_entry
  1007 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
  1007 000000B2 0000               
  1008                                  
  1009                                  ;M058; Start of changes
  1010                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1011                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1012                                  ;cannot change for them to work. Even ProComm does this.
  1013                                  
  1014 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1015                                  
  1016 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1017 000000BA 7000                    		dw 70h
  1018 000000BC C0A0                    		dw 0A0C0h
  1019 000000BE [D006]                  		dw strategy
  1020 000000C0 [F506]                  		dw prn3_entry
  1021 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1022 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1023 000000CC 7000                    		dw 70h
  1024 000000CE 0080                    		dw 8000h
  1025 000000D0 [D006]                  		dw strategy
  1026 000000D2 [0207]                  		dw aux1_entry
  1027                                  		; 19/10/2022
  1028 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1029                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1030 000000DC [EE00]                  		dw com4dev
  1031 000000DE 7000                    		dw 70h
  1032 000000E0 0080                    		dw 8000h
  1033                                  		;dw offset strategy
  1034                                  		;dw offset aux2_entry
  1035 000000E2 [D006]                  		dw strategy
  1036 000000E4 [0807]                  		dw aux2_entry	
  1037 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1038 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1039 000000F0 7000                    		dw 70h
  1040 000000F2 0080                    		dw 8000h
  1041 000000F4 [D006]                  		dw strategy
  1042 000000F6 [0E07]                  		dw aux3_entry
  1043 000000F8 434F4D3420202020        		db 'COM4    '
  1044                                  
  1045                                  ;-----------------------------------------------------------------------------
  1046                                  
  1047 00000100 10                      RomVectors:	db 10h			
  1048 00000101 00000000                Old10:		dd 0
  1049 00000105 13                      		db 13h
  1050 00000106 00000000                Old13:		dd 0			
  1051 0000010A 15                      		db 15h
  1052 0000010B 00000000                Old15:		dd 0			
  1053 0000010F 19                      		db 19h
  1054 00000110 00000000                Old19:		dd 0
  1055 00000114 1B                      		db 1Bh
  1056 00000115 00000000                Old1B:		dd 0
  1057                                  
  1058                                  ;EndRomVectors	equ $
  1059                                  
  1060                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1061                                  
  1062                                  ;-----------------------------------------------------------------------------
  1063                                  
  1064 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1065 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1066                                  
  1067                                  ; (MSDOS 3.3) NOTE:
  1068                                  ; Some floppy drives do not have changeline support. The result is a
  1069                                  ; large amount of inefficiency in the code. A media-check always returns
  1070                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1071                                  ; always discard any cached data.
  1072                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1073                                  ; The following three items are used to do this. The logical door latch is
  1074                                  ; based on the premise that it is not physically possible to change floppy
  1075                                  ; disks in a drive in under two seconds (most people take about 10). The
  1076                                  ; logical door latch is implemented by saving the time of the last successful
  1077                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1078                                  ; current time is compared to the saved time. If less than two seconds have
  1079                                  ; passed then the value "No Change" is returned. If more than two seconds
  1080                                  ; have passed the value "Don't Know" is returned.
  1081                                  ;    There is one complecation to this algorithm. Some programs change the
  1082                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1083                                  ; This possibility is detected by counting the number of disk operations
  1084                                  ; which occur without any time passing. If this count exceeds the value of
  1085                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1086                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1087                                  ; of disk operation which occur without the time changing.
  1088                                  
  1089 0000011D 00                      accesscount:	db 0			
  1090 0000011E FF                      tim_drv:	db 0FFh			
  1091 0000011F 00                      medbyt:		db 0
  1092                                  wrtverify:	; 15/10/2022			
  1093 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1094 00000121 00                      verify:		db 0			; 1 if verify after write
  1095 00000122 0000                    seccnt:		dw 0			
  1096 00000124 00                      		db 0			; -- pad where hardnum was
  1097 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1098                                  
  1099                                  ; (MSDOS 3.3) NOTE:
  1100                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1101                                  ; have to be made to read the diskette. Consequently a large head settle
  1102                                  ; time was always used in the I/O operations. To get around this problem
  1103                                  ; we need to continually adjust the head settle time. The following
  1104                                  ; algorithm is used:
  1105                                  ;
  1106                                  ;   Get the current head settle value.
  1107                                  ;   If it is 1, then
  1108                                  ;	set slow = 15
  1109                                  ;   else
  1110                                  ;	set slow = value
  1111                                  ;   ...
  1112                                  ;   if we are seeking and writing then
  1113                                  ;	use slow
  1114                                  ;   else
  1115                                  ;	use fast
  1116                                  ;   ...
  1117                                  ;   restore current head settle value
  1118                                  
  1119 00000126 00                      motorstartup:	db 0			; value from table
  1120 00000127 00                      settlecurrent:	db 0			; value from table
  1121 00000128 00                      settleslow:	db 0			; slow settle value
  1122 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1123 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1124 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1125 0000012C 09                      eot:		db 9			
  1126 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table
  1127 00000131 00                      cursec:		db 0			; current sector
  1128 00000132 00                      curhd:		db 0			; current head
  1129 00000133 0000                    curtrk:		dw 0			; current track
  1130 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1131 00000137 08                      formt_eot:	db 8			; eot used for format
  1132 00000138 00                      hdnum:		db 0			; head number
  1133 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1134 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1135                                  
  1136                                  ;-----------------------------------------------------------------------------
  1137                                  
  1138                                  ; disk errors returned from the IBM rom
  1139                                  
  1140 0000013C CC                      errin:		db 0CCh			; write	fault error
  1141 0000013D 80                      		db 80h			; no response
  1142 0000013E 40                      		db 40h			; seek failure
  1143 0000013F 10                      		db 10h			; bad crc
  1144 00000140 08                      		db 8			; dma overrun
  1145 00000141 06                      		db 6			; media	change
  1146 00000142 04                      		db 4			; sector not found
  1147 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1148 00000144 00                      lsterr:		db 0			; all other errors
  1149                                  
  1150                                  ; returned error codes corresponding to above
  1151                                  
  1152 00000145 0A                      errout:		db 10			; write	fault error
  1153 00000146 02                      		db 2			; no response
  1154 00000147 06                      		db 6			; seek failure
  1155 00000148 04                      		db 4			; bad crc
  1156 00000149 04                      		db 4			; dma overrun
  1157 0000014A 0F                      		db 15			; invalid media	change
  1158 0000014B 08                      		db 8			; sector not found
  1159 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1160 0000014D 0C                      		db 12			; general error
  1161                                  
  1162                                  ;-----------------------------------------------------------------------------
  1163                                  
  1164                                  ; 30/12/2018 - Retro DOS v4.0
  1165                                  
  1166                                  ; read in boot sector here, read done in readboot.
  1167                                  ; also read sector for dma check for hard disk.
  1168                                  ;
  1169                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1170                                  ; in them which causes the byte after the buffer to be trashed
  1171                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1172                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1173                                  ; makes that system more-or-less work.
  1174                                  
  1175                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1176                                  		; 19/10/2022
  1177 0000014E 00<rep 200h>            		times 512 db 0
  1178                                  
  1179                                  ;-----------------------------------------------------------------------------
  1180                                  
  1181                                  ; 30/12/2018 - Retro DOS v4.0
  1182                                  ;-----------------------------------------------------------------------------
  1183                                  ; 25/05/2018 (04/04/2018)
  1184                                  ;*****************************************************************************
  1185                                  ;	"bds" contains information for each drive in the system.
  1186                                  ;	various values are patched whenever actions are performed.
  1187                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1188                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1189                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1190                                  ;	that the parameters have not been set.
  1191                                  
  1192                                  bds1:		;dw offset bds2
  1193 0000034E [B203]                  		dw bds2	; 19/10/2022
  1194 00000350 7000                    		dw 70h			; dword	link to	next structure
  1195 00000352 00                      		db 0			; int 13h drive	number
  1196 00000353 00                      		db 0			; logical drive	letter
  1197 00000354 0002                    fdrive1:	dw 512			
  1198                                  					; physical sector size in bytes
  1199 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1200 00000357 0100                    		dw 1			; reserved sectors for dos
  1201 00000359 02                      		db 2			; no of	file allocation	tables
  1202 0000035A 4000                    		dw 64			; number of root directory entries
  1203 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1204 0000035E 00                      		db 0			; media	descriptor, initially 0
  1205 0000035F 0200                    		dw 2			; number of fat	sectors
  1206 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1207 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1208 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1209 00000367 0000                    		dw 0			; hidden sector	(high)
  1210 00000369 0000                    		dw 0			; number sectors (low)
  1211 0000036B 0000                    		dw 0			; number sectors (high)
  1212 0000036D 00                      		db 0			; true => large	fats
  1213 0000036E 0000                    		dw 0			; open ref. count
  1214 00000370 03                      		db 3			; form factor
  1215 00000371 2000                    		dw 20h			; various flags
  1216 00000373 2800                    		dw 40			; number of cylinders
  1217 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1218 00000377 01                      		db 1
  1219 00000378 0100                    		dw 1
  1220 0000037A 02                      		db 2
  1221 0000037B E000                    		dw 224			; number of root directory entries
  1222 0000037D 6801                    		dw 360
  1223 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1224 00000380 0200                    		dw 2
  1225 00000382 0900                    		dw 9
  1226 00000384 0200                    		dw 2
  1227 00000386 0000                    		dw 0
  1228 00000388 0000                    		dw 0
  1229 0000038A 0000                    		dw 0
  1230 0000038C 0000                    		dw 0
  1231                                  		;db 6 dup(0)
  1232 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1233 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1234 00000395 FFFF                    		dw 0FFFFh		; keep these two contiguous (?)
  1235 00000397 FFFF                    		dw 0FFFFh
  1236 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1236 000003A2 202000             
  1237 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1238 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1239                                  ; ----
  1240                                  
  1241 000003B2 [1604]                  bds2:		dw bds3		
  1242 000003B4 7000                    		dw 70h
  1243 000003B6 00                      		db 0
  1244 000003B7 00                      		db 0
  1245 000003B8 0002                    fdrive2:	dw 512			
  1246 000003BA FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1246 000003C3 020009000100       
  1247 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1247 000003D2 00000320002800     
  1248 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1248 000003E2 01F002000900       
  1249 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1249 000003F1 00000000000000FF   
  1250 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1250 00000402 4D                 
  1251 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1251 0000040C 00464154           
  1252 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1253                                  ; ----
  1254                                  
  1255 00000416 [7A04]                  bds3:		dw bds4		
  1256 00000418 7000                    		dw 70h
  1257 0000041A 00                      		db 0
  1258 0000041B 00                      		db 0
  1259 0000041C 0002                    fdrive3:	dw 512			
  1260 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1260 00000427 020009000100       
  1261 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1261 00000436 00000320002800     
  1262 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1262 00000446 01F002000900       
  1263 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1263 00000455 00000000000000FF   
  1264 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1264 00000466 4D                 
  1265 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1265 00000470 00464154           
  1266 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1267                                  ; ----
  1268                                  
  1269 0000047A FFFF                    bds4:		dw 0FFFFh		
  1270 0000047C 7000                    		dw 70h
  1271 0000047E 00                      		db 0
  1272 0000047F 00                      		db 0
  1273 00000480 0002                    fdrive4:	dw 512			
  1274 00000482 FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1274 0000048B 020009000100       
  1275 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1275 0000049A 00000320002800     
  1276 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1276 000004AA 01F002000900       
  1277 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1277 000004B9 00000000000000FF   
  1278 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1278 000004CA 4D                 
  1279 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1279 000004D4 00464154           
  1280 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1281                                  
  1282                                  ;-----------------------------------------------------------------------------
  1283                                  
  1284 000004DE 03                      sm92:		db 3			; .spf			
  1285 000004DF 09                      		db 9			; .spt
  1286 000004E0 70                      		db 112	; 70h		; .cdire
  1287 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1288 000004E3 02                      		db 2			; .spau
  1289 000004E4 02                      		db 2			; .chead
  1290                                  
  1291 000004E5 00                      keyrd_func:	db 0			
  1292 000004E6 01                      keysts_func:	db 1			
  1293 000004E7 00                      printdev:	db 0			; printer device index
  1294                                  
  1295                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1296 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1297                                  
  1298 000004F0 0000                    daycnt:		dw 0			
  1299 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1300 000004F3 00                      havecmosclock:	db 0			
  1301 000004F4 13                      base_century:	db 19			
  1302 000004F5 50                      base_year:	db 80			
  1303                                  
  1304 000004F6 1F                      month_tab:	db 31
  1305 000004F7 1C                      february:	db 28 ; 08/08/2023
  1306 000004F8 1F1E1F1E1F1F1E1F1E-     		db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  1306 00000501 1F                 
  1307                                  
  1308                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1309                                  %if 0  
  1310                                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1311                                  		dw 70h ; 17/10/2022	
  1312                                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1313                                  		dw 70h ; 17/10/2022
  1314                                  %endif
  1315 00000502 00                      set_id_flag:	db 0			; flag for getbp routine
  1316 00000503 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1317 0000050C 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1318 00000515 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1318 0000051E 202000             
  1319                                  
  1320 00000521 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1321 00000523 0000                    start_sec_h:	dw 0			; starting sector number high word
  1322 00000525 0000                    saved_word:	dw 0			; tempory saving place for a word
  1323 00000527 0000                    multrk_flag:	dw 0			
  1324 00000529 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1325 0000052A 0000                    vretry_cnt:	dw 0			
  1326 0000052C 0000                    soft_ecc_cnt:	dw 0			
  1327 0000052E 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1328 0000052F 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1329                                  
  1330                                  ; variables for msdioctl.asm module
  1331                                  
  1332                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1333                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1334                                  ;	n	bytes per sector
  1335                                  ;      ---	----------------
  1336                                  ;	0	      128
  1337                                  ;	1	      256
  1338                                  ;	2	      512
  1339                                  ;	3	     1024
  1340                                  
  1341                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1342                                  ;					; we support (was 40 in dos 3.2)
  1343                                  
  1344 00000531 2400                    sectorspertrack: dw 36			
  1345 00000533 00000102                tracktable:	db 0, 0, 1, 2		
  1346 00000537 00000202                		db 0, 0, 2, 2
  1347 0000053B 00000302                		db 0, 0, 3, 2
  1348 0000053F 00000402                		db 0, 0, 4, 2
  1349 00000543 00000502                		db 0, 0, 5, 2
  1350 00000547 00000602                		db 0, 0, 6, 2
  1351 0000054B 00000702                		db 0, 0, 7, 2
  1352 0000054F 00000802                		db 0, 0, 8, 2
  1353 00000553 00000902                		db 0, 0, 9, 2
  1354 00000557 00000A02                		db 0, 0, 10, 2
  1355 0000055B 00000B02                		db 0, 0, 11, 2
  1356 0000055F 00000C02                		db 0, 0, 12, 2
  1357 00000563 00000D02                		db 0, 0, 13, 2
  1358 00000567 00000E02                		db 0, 0, 14, 2
  1359 0000056B 00000F02                		db 0, 0, 15, 2
  1360 0000056F 00001002                		db 0, 0, 16, 2
  1361 00000573 00001102                		db 0, 0, 17, 2
  1362 00000577 00001202                		db 0, 0, 18, 2
  1363 0000057B 00001302                		db 0, 0, 19, 2
  1364 0000057F 00001402                		db 0, 0, 20, 2
  1365 00000583 00001502                		db 0, 0, 21, 2
  1366 00000587 00001602                		db 0, 0, 22, 2
  1367 0000058B 00001702                		db 0, 0, 23, 2
  1368 0000058F 00001802                		db 0, 0, 24, 2
  1369 00000593 00001902                		db 0, 0, 25, 2
  1370 00000597 00001A02                		db 0, 0, 26, 2
  1371 0000059B 00001B02                		db 0, 0, 27, 2
  1372 0000059F 00001C02                		db 0, 0, 28, 2
  1373 000005A3 00001D02                		db 0, 0, 29, 2
  1374 000005A7 00001E02                		db 0, 0, 30, 2
  1375 000005AB 00001F02                		db 0, 0, 31, 2
  1376 000005AF 00002002                		db 0, 0, 32, 2
  1377 000005B3 00002102                		db 0, 0, 33, 2
  1378 000005B7 00002202                		db 0, 0, 34, 2
  1379 000005BB 00002302                		db 0, 0, 35, 2
  1380 000005BF 00002402                		db 0, 0, 36, 2
  1381 000005C3 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1382                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1383                                  					; times	((4*63)	- 144) db 0
  1384                                  
  1385                                  ;-----------------------------------------------------------------------------
  1386                                  
  1387                                  ; this is a real ugly place to put this
  1388                                  ; it should really go in the bds
  1389                                  
  1390 0000062F 00                      mediatype:	db 0			
  1391 00000630 00                      media_set_for_format: db 0		; 1 if we have done an int 13h set media
  1392                                  					; type for format call
  1393 00000631 00                      had_format_error: db 0			; 1 if the previous format operation
  1394                                  					; failed.
  1395                                  
  1396                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1397                                  ; the one passed by "new roms" before we perform a format operation. the old
  1398                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1399                                  ; this table does not contain the previously saved dpt.
  1400                                  		
  1401 00000632 FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1402 00000636 FF                      model_byte:	db 0FFh			; model	byte set at init time
  1403 00000637 00                      secondary_model_byte: db 0
  1404                                  		
  1405 00000638 00                      int19sem:	db 0			; indicate that all int 19h
  1406                                  					; initialization is complete
  1407                                  		
  1408                                  ;; we assume the following remain contiguous and their order doesn't change
  1409                                  ;i19_lst:
  1410                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1411                                  ;	public	int19old&aa
  1412                                  ;		db	aa&h	; store the number as a byte
  1413                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1414                                  ;	endm
  1415                                  
  1416                                  ; 21/10/2022
  1417                                  
  1418 00000639 02                      i19_lst:	db 2			
  1419                                  					; Int19old&aa
  1420 0000063A FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1421 0000063E 08                      		db 8
  1422 0000063F FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1423 00000643 09                      		db 9
  1424 00000644 FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1425 00000648 0A                      		db 0Ah
  1426 00000649 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1427 0000064D 0B                      		db 0Bh
  1428 0000064E FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1429 00000652 0C                      		db 0Ch
  1430 00000653 FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1431 00000657 0D                      		db 0Dh
  1432 00000658 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1433 0000065C 0E                      		db 0Eh
  1434 0000065D FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1435 00000661 70                      		db 70h
  1436 00000662 FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1437 00000666 72                      		db 72h
  1438 00000667 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1439 0000066B 73                      		db 73h
  1440 0000066C FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1441 00000670 74                      		db 74h
  1442 00000671 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1443 00000675 76                      		db 76h
  1444 00000676 FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1445 0000067A 77                      		db 77h
  1446 0000067B FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1447                                  
  1448                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1449                                  
  1450                                  ;-----------------------------------------------------------------------------
  1451                                  
  1452 0000067F [5403]                  dskdrvs:	dw fdrive1	
  1453 00000681 [B803]                  		dw fdrive2
  1454 00000683 [1C04]                  		dw fdrive3
  1455 00000685 [8004]                  		dw fdrive4
  1456                                  
  1457                                  ;M011 -- made all hard drive stuff variable
  1458                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1459 00000687 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1460                                  
  1461                                  ;-----------------------------------------------------------------------------
  1462                                  
  1463                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1464                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1465                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1466                                  
  1467                                  ;variables for dynamic relocatable modules
  1468                                  ;these should be stay resident.
  1469                                  
  1470 000006B3 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1471                                  					; for p12 machine
  1472                                  
  1473                                  ; data structures for real-time date and time
  1474                                  			
  1475 000006B7 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1476                                  
  1477                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1478                                  %if 0
  1479                                  month_table:	dw 0			; january
  1480                                  		dw 31			; february
  1481                                  		dw 59
  1482                                  		dw 90
  1483                                  		dw 120
  1484                                  		dw 151
  1485                                  		dw 181
  1486                                  		dw 212
  1487                                  		dw 243
  1488                                  		dw 273
  1489                                  		dw 304
  1490                                  		dw 334			; december
  1491                                  %endif
  1492                                  
  1493 000006BB 0000                    daycnt2:	dw 0			
  1494                                  ; 08/08/2023
  1495                                  ;feb29:		db 0			; february 29 in a leap	year flag
  1496                                  
  1497                                  ;-----------------------------------------------------------------------------
  1498                                  ;
  1499                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1500                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1501                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1502                                  
  1503                                  ; ----------------------------------------------------------------------------
  1504                                  
  1505                                  ;************************************************************************
  1506                                  ;*									*
  1507                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1508                                  ;*	  are plugged in by seg_reinit.					*
  1509                                  ;*									*
  1510                                  ;************************************************************************
  1511                                  
  1512                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1513                                  ; BIOSCODE_SEGMENT equ 2C7h
  1514                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1515                                  
  1516                                  ; 01/10/2022 - Erdogan Tan
  1517                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1518                                  ;  addresses, they will be changed to table labels later)
  1519                                  
  1520                                  ; 09/12/2022
  1521                                  %if 0
  1522                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1523                                  					; at 2C7h:43h =	70h:25B3h
  1524                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1525                                  					; at 2C7h:396h = 70h:2906h
  1526                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1527                                  					; at 2C7h:1302h	= 70h:3872h
  1528                                  i13x:		dw 154Bh, 2C7h		; i13z
  1529                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1530                                  %endif
  1531                                  
  1532                                  ; 30/12/2022
  1533                                  ; (IOSYSCODESEG is 2CCh for MSDOS 6.21 IO.SYS)
  1534                                  
  1535                                  ; 09/12/2022
  1536 000006BD [4700]8602              cdev:		dw chardev_entry, IOSYSCODESEG
  1537 000006C1 [8D03]8602              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1538                                  ; 07/08/2023
  1539                                  ;bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1540 000006C5 [6E15]8602              i13x:		dw i13z, IOSYSCODESEG
  1541                                  
  1542                                  end_BC_entries:	; 15/10/2022
  1543                                  
  1544                                  ;************************************************************************
  1545                                  ;*									*
  1546                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1547                                  ;*									*
  1548                                  ;************************************************************************
  1549                                  
  1550                                  cbreak:					
  1551 000006C9 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1552                                  					; indicate break key set
  1553                                  intret:					
  1554 000006CF CF                      		iret
  1555                                  
  1556                                  ; =============== S U B	R O U T	I N E ========================================
  1557                                  
  1558                                  
  1559                                  ;************************************************************************
  1560                                  ;*									*
  1561                                  ;*	strategy - store es:bx (device driver request packet)		*
  1562                                  ;*		     away at [ptrsav] for next driver function call	*
  1563                                  ;*									*
  1564                                  ;************************************************************************
  1565                                  
  1566                                  strategy:	; proc far		
  1567 000006D0 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1568                                  					; away at [ptrsav] for next driver function call
  1569 000006D5 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1570 000006DA CB                      		retf
  1571                                  
  1572                                  ; ----------------------------------------------------------------------------
  1573                                  
  1574                                  ;************************************************************************
  1575                                  ;*									*
  1576                                  ;*	device driver entry points. these are the initial		*
  1577                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1578                                  ;*	  in the case of our resident drivers, they'll just		*
  1579                                  ;*	  stick a fake return address on the stack which		*
  1580                                  ;*	  points to dispatch tables and possibly some unit		*
  1581                                  ;*	  numbers, and then call through a common entry point		*
  1582                                  ;*	  which can take care of a20 switching				*
  1583                                  ;*									*
  1584                                  ;************************************************************************
  1585                                  
  1586                                  ; 01/10/2022 - Erdogan Tan
  1587                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1588                                  ;  addresses, they will be changed to table labels later)
  1589                                  
  1590                                  ; 09/12/2022
  1591                                  
  1592                                  con_entry:				
  1593 000006DB E84000                  		call	cdev_entry
  1594                                  ; ----------------------------------------------------------------------------
  1595                                  		;dw 0E4h		; con_table
  1596 000006DE [E700]                  		dw con_table	
  1597                                  					; 2C7h:0E4h = 70h:2654h
  1598                                  ; ----------------------------------------------------------------------------
  1599                                  
  1600                                  prn0_entry:				
  1601 000006E0 E83B00                  		call	cdev_entry
  1602                                  ; ----------------------------------------------------------------------------
  1603                                  		;dw 0FBh		; prn_table
  1604 000006E3 [FE00]                  		dw prn_table
  1605                                  					; 2C7h:0FBh = 70h:266Bh
  1606 000006E5 0000                    		db 0, 0
  1607                                  ; ----------------------------------------------------------------------------
  1608                                  
  1609                                  prn1_entry:				
  1610 000006E7 E83400                  		call	cdev_entry
  1611                                  ; ----------------------------------------------------------------------------
  1612                                  		;dw 0FBh		; prn_table
  1613 000006EA [FE00]                  		dw prn_table
  1614                                  					; 2C7h:0FBh = 70h:266Bh
  1615 000006EC 0001                    		db 0, 1
  1616                                  ; ----------------------------------------------------------------------------
  1617                                  
  1618                                  prn2_entry:				
  1619 000006EE E82D00                  		call	cdev_entry
  1620                                  ; ----------------------------------------------------------------------------
  1621                                  		;dw 0FBh		; prn_table
  1622 000006F1 [FE00]                  		dw prn_table
  1623                                  					; 2C7h:0FBh = 70h:266Bh
  1624 000006F3 0102                    		db 1, 2
  1625                                  ; ----------------------------------------------------------------------------
  1626                                  
  1627                                  prn3_entry:				
  1628 000006F5 E82600                  		call	cdev_entry
  1629                                  ; ----------------------------------------------------------------------------
  1630                                  		;dw 0FBh		; prn_table
  1631 000006F8 [FE00]                  		dw prn_table
  1632                                  					; 2C7h:0FBh = 70h:266Bh
  1633 000006FA 0203                    		db 2, 3
  1634                                  ; ----------------------------------------------------------------------------
  1635                                  
  1636                                  aux0_entry:				
  1637 000006FC E81F00                  		call	cdev_entry
  1638                                  ; ----------------------------------------------------------------------------
  1639                                  		;dw 130h		; aux_table
  1640 000006FF [3301]                  		dw aux_table
  1641                                  					; 2C7h:130h = 70h:26A0h
  1642 00000701 00                      		db 0
  1643                                  ; ----------------------------------------------------------------------------
  1644                                  
  1645                                  aux1_entry:				
  1646 00000702 E81900                  		call	cdev_entry
  1647                                  ; ----------------------------------------------------------------------------
  1648                                  		;dw 130h		; aux_table
  1649 00000705 [3301]                  		dw aux_table
  1650                                  					; 2C7h:130h = 70h:26A0h
  1651 00000707 01                      		db 1
  1652                                  ; ----------------------------------------------------------------------------
  1653                                  
  1654                                  aux2_entry:				
  1655 00000708 E81300                  		call	cdev_entry
  1656                                  ; ----------------------------------------------------------------------------
  1657                                  		;dw 130h		; aux_table
  1658 0000070B [3301]                  		dw aux_table
  1659                                  					; 2C7h:130h = 70h:26A0h
  1660 0000070D 02                      		db 2
  1661                                  ; ----------------------------------------------------------------------------
  1662                                  
  1663                                  aux3_entry:				
  1664 0000070E E80D00                  		call	cdev_entry
  1665                                  ; ----------------------------------------------------------------------------
  1666                                  		;dw 130h		; aux_table
  1667 00000711 [3301]                  		dw aux_table
  1668                                  					; 2C7h:130h = 70h:26A0h
  1669 00000713 03                      		db 3
  1670                                  ; ----------------------------------------------------------------------------
  1671                                  
  1672                                  tim_entry:				
  1673 00000714 E80700                  		call	cdev_entry
  1674                                  ; ----------------------------------------------------------------------------
  1675                                  		;dw 147h		; tim_table
  1676 00000717 [4A01]                  		dw tim_table
  1677                                  					; 2C7h:147h = 70h:26B7h
  1678                                  ; ----------------------------------------------------------------------------
  1679                                  
  1680                                  ; 15/10/2022
  1681                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1682                                  ; 09/12/2022
  1683                                  DSKTBL equ dsktbl
  1684                                  
  1685                                  dsk_entry:				
  1686 00000719 E80200                  		call	cdev_entry
  1687                                  ; ----------------------------------------------------------------------------
  1688                                  		;dw 4A2h		; dsktbl
  1689 0000071C [3B05]                  		dw DSKTBL		; 09/12/2022
  1690                                  					; 2C7h:4A2h = 70h:2A12h
  1691                                  
  1692                                  ; =============== S U B	R O U T	I N E ========================================
  1693                                  
  1694                                  ;************************************************************************
  1695                                  ;*									*
  1696                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1697                                  ;*	This code assumes that if Segment of Device request packet is	*
  1698                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1699                                  ;*	A20 is already on.						*
  1700                                  ;*									*
  1701                                  ;************************************************************************
  1702                                  
  1703                                  cdev_entry:	; proc near		
  1704 0000071E 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1705 00000724 740D                    		jz	short ce_enter_codeseg
  1706                                  				; optimized for DOS in HMA
  1707 00000726 50                      		push	ax
  1708 00000727 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1709 0000072B 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1710 00000730 58                      		pop	ax
  1711 00000731 7505                    		jnz	short not_from_dos
  1712                                  				; jump is coded this way to fall thru
  1713                                  				; in 99.99% of the cases
  1714                                  ce_enter_codeseg:
  1715 00000733 2EFF2E[BD06]            		jmp	far [cs:cdev]			
  1716                                  		;jmp	dword ptr cs:cdev
  1717                                  ;-----------------------------------------------------------------------------
  1718                                  
  1719                                  not_from_dos:				
  1720 00000738 E85500                  		call	EnsureA20On
  1721 0000073B EBF6                    		jmp	short ce_enter_codeseg
  1722                                  
  1723                                  ;************************************************************************
  1724                                  ;*									*
  1725                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1726                                  ;*	   character in al on the display using int 10h ttywrite	*
  1727                                  ;*									*
  1728                                  ;************************************************************************
  1729                                  
  1730                                  outchr:					
  1731 0000073D 50                      		push	ax		; int 29h handler
  1732 0000073E 56                      		push	si
  1733 0000073F 57                      		push	di
  1734 00000740 55                      		push	bp
  1735 00000741 53                      		push	bx
  1736 00000742 B40E                    		mov	ah, 0Eh
  1737 00000744 BB0700                  		mov	bx, 7
  1738 00000747 CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1739                                  					; AL = character, BH = display page (alpha modes)
  1740                                  					; BL = foreground color	(graphics modes)
  1741 00000749 5B                      		pop	bx
  1742 0000074A 5D                      		pop	bp
  1743 0000074B 5F                      		pop	di
  1744 0000074C 5E                      		pop	si
  1745 0000074D 58                      		pop	ax
  1746 0000074E CF                      		iret
  1747                                  ;-----------------------------------------------------------------------------
  1748                                  
  1749                                  ;************************************************************************
  1750                                  ;*									*
  1751                                  ;*	block13 - our int13 hooker					*
  1752                                  ;*									*
  1753                                  ;************************************************************************
  1754                                  
  1755                                  block13:				
  1756 0000074F 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1757 00000755 7408                    		jz	short skipa20
  1758 00000757 E84700                  		call	IsA20Off	; A20 Off?
  1759 0000075A 7503                    		jnz	short skipa20
  1760 0000075C E83600                  		call	EnableA20	; assure a20 enabled
  1761                                  
  1762                                  skipa20:				
  1763 0000075F 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1764 00000764 9C                      		pushf			; fake interrupt
  1765 00000765 2EFF1E[C506]            		call	far [cs:i13x]
  1766                                  		;call	dword ptr cs:i13x
  1767                                  					; call through Bios_Code entry table
  1768 0000076A 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1769 0000076F CA0200                  		retf	2
  1770                                  
  1771                                  ; =============== S U B	R O U T	I N E =======================================
  1772                                  
  1773                                  ; the int13 hook calls back here to call-through to the ROM
  1774                                  ; this is necessary because some people have extended their
  1775                                  ; ROM BIOSs to use ds as a parameter/result register and
  1776                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1777                                  
  1778                                  call_orig13:	; proc far		
  1779 00000772 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1780 00000776 9C                      		pushf			; simulate an int13
  1781 00000777 2EFF1E[B400]            		call	far [cs:Orig13]
  1782                                  		;call	cs:Orig13
  1783 0000077C 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1784 00000781 0E                      		push	cs
  1785 00000782 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1786                                  
  1787 00000783 9C                      		pushf
  1788                                  		; 10/12/2022
  1789                                  		; ds = cs
  1790 00000784 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1791                                  		;cmp	byte [cs:inHMA], 0
  1792 00000789 7403                    		jz	short corig13_popf_retf
  1793                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1794                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0725h	
  1795                                  		;call	IsA20Off
  1796                                  		;jnz	short corig13_popf_retf
  1797                                  		;call	EnableA20
  1798 0000078B E80200                  		call	EnsureA20On ; 07/08/2023
  1799                                  corig13_popf_retf:			
  1800 0000078E 9D                      		popf
  1801                                  re_init:	; 07/08/2023
  1802 0000078F CB                      		retf
  1803                                  
  1804                                  ;-----------------------------------------------------------------------------
  1805                                  
  1806                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1807                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1808                                  
  1809                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1810                                  ;HiMem:		dd 0FFFF0090h		
  1811                                  ;LoMem:		dd 80h
  1812                                  
  1813                                  ; ----------------------------------------------------------------------------			
  1814                                  
  1815                                  ; =============== S U B	R O U T	I N E ========================================
  1816                                  
  1817                                  
  1818                                  ;************************************************************************
  1819                                  ;*									*
  1820                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1821                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1822                                  ;*									*
  1823                                  ;************************************************************************
  1824                                  
  1825                                  EnsureA20On:	; proc near		
  1826 00000790 E80E00                  		call	IsA20Off
  1827                                  		;jz	short EnableA20
  1828                                  		;retn
  1829                                  		; 18/12/2022
  1830 00000793 750B                    		jnz	short A20On_retn	
  1831                                  
  1832                                  ; =============== S U B	R O U T	I N E ========================================
  1833                                  
  1834                                  
  1835                                  EnableA20:	; proc near		
  1836 00000795 50                      		push	ax
  1837 00000796 53                      		push	bx
  1838 00000797 B405                    		mov	ah, 5	 ; local enable a20
  1839                                  		;call	cs:xms
  1840 00000799 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1841 0000079E 5B                      		pop	bx
  1842 0000079F 58                      		pop	ax
  1843                                  A20On_retn:	; 18/12/2022	
  1844 000007A0 C3                      		retn
  1845                                  
  1846                                  ; =============== S U B	R O U T	I N E ========================================
  1847                                  
  1848                                  
  1849                                  IsA20Off:	; proc near		
  1850 000007A1 1E                      		push	ds
  1851 000007A2 06                      		push	es
  1852 000007A3 51                      		push	cx
  1853 000007A4 56                      		push	si
  1854 000007A5 57                      		push	di
  1855                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1856                                  		;lds	si, [cs:HiMem]
  1857                                  		;les	di, [cs:LoMem]
  1858                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0740h
  1859 000007A6 31FF                    		xor	di, di
  1860 000007A8 8EC7                    		mov	es, di
  1861 000007AA 4F                      		dec	di
  1862 000007AB BE9000                  		mov	si, 90h	; 0FFFFh:0090h ; HiMem
  1863 000007AE 8EDF                    		mov	ds, di
  1864 000007B0 BF8000                  		mov	di, 80h ; 0000h:0080h ; LoMem
  1865 000007B3 B90800                  		mov	cx, 8
  1866 000007B6 F3A7                    		repe cmpsw
  1867                                  				; zf = 0 -> A20 line is ON
  1868                                  				; zf = 1 -> A20 line is OFF
  1869 000007B8 5F                      		pop	di
  1870 000007B9 5E                      		pop	si
  1871 000007BA 59                      		pop	cx
  1872 000007BB 07                      		pop	es
  1873 000007BC 1F                      		pop	ds
  1874 000007BD C3                      		retn
  1875                                  
  1876                                  ; ----------------------------------------------------------------------------
  1877                                  
  1878                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1879                                  %if 0
  1880                                  DisableA20:
  1881                                  		push	ax
  1882                                  		push	bx
  1883                                  		mov	ah, 6		; local disable A20
  1884                                  		call	far [cs:xms]
  1885                                  		;call	cs:xms
  1886                                  		pop	bx
  1887                                  		pop	ax
  1888                                  		retn
  1889                                  %endif
  1890                                  
  1891                                  ; ----------------------------------------------------------------------------
  1892                                  
  1893                                  ;************************************************************************
  1894                                  ;*									*
  1895                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1896                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1897                                  ;*									*
  1898                                  ;************************************************************************
  1899                                  
  1900                                  int19:
  1901 000007BE 0E                      		push	cs
  1902 000007BF 1F                      		pop	ds
  1903                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1904                                  		;mov	es, [zeroseg]	; 16/10/2022
  1905                                  		;mov	cx, 5		; NUMROMVECTORS
  1906 000007C0 31C9                    		xor	cx, cx
  1907 000007C2 8EC1                    		mov	es, cx
  1908 000007C4 B105                    		mov	cl, 5
  1909                                  		;mov	si, offset RomVectors
  1910 000007C6 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1911                                  next_int:				
  1912 000007C9 AC                      		lodsb			; get int number
  1913 000007CA 98                      		cbw			; assume < 128
  1914 000007CB D1E0                    		shl	ax, 1
  1915 000007CD D1E0                    		shl	ax, 1		; int *	4
  1916                                  		; 07/08/2023
  1917                                  		;mov	di, ax
  1918                                  		;lodsw
  1919                                  		;stosw
  1920                                  		;lodsw
  1921                                  		;stosw			; install the saved vector
  1922                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:076Ah
  1923 000007CF 97                      		xchg	ax, di
  1924 000007D0 A5                      		movsw
  1925 000007D1 A5                      		movsw
  1926 000007D2 E2F5                    		loop	next_int
  1927                                  		;cmp	byte [int19sem], 0 ; 19/10/2022
  1928 000007D4 380E[3806]              		cmp	[int19sem], cl ; 0 ; 07/08/2023
  1929 000007D8 7419                    		jz	short doint19
  1930 000007DA BE[3906]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1931                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1932                                  		;mov	cx, 14		; num_i19
  1933                                  		; 07/08/2023
  1934 000007DD B10E                    		mov	cl, 14	
  1935                                  i19_restore_loop:			
  1936 000007DF AC                      		lodsb			; get interrupt	number
  1937 000007E0 98                      		cbw			; assume < 128
  1938                                  		;mov	di, ax
  1939                                  		;lodsw			; get original vector offset
  1940                                  		;mov	bx, ax		; save it
  1941                                  		;lodsw
  1942                                  		; 07/08/2023
  1943 000007E1 97                      		xchg	ax, di
  1944 000007E2 AD                      		lodsw
  1945 000007E3 93                      		xchg	ax, bx
  1946 000007E4 AD                      		lodsw
  1947                                  		;cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1948 000007E5 43                      		inc	bx ; 07/08/2023
  1949 000007E6 7409                    		jz	short i19_restor_1 ; opt no need to check selector too
  1950                                  		;cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1951                                  		;jz	short i19_restor_1
  1952 000007E8 4B                      		dec	bx ; 07/08/2023
  1953 000007E9 01FF                    		add	di, di
  1954 000007EB 01FF                    		add	di, di
  1955 000007ED 93                      		xchg	ax, bx
  1956 000007EE AB                      		stosw
  1957 000007EF 93                      		xchg	ax, bx
  1958 000007F0 AB                      		stosw			; put the vector back
  1959                                  
  1960                                  i19_restor_1:				
  1961 000007F1 E2EC                    		loop	i19_restore_loop
  1962                                  
  1963                                  doint19:				
  1964                                  		;cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1965 000007F3 380E[0D00]              		cmp	[inHMA], cl ; 0 ; 07/08/2023
  1966 000007F7 7403                    		jz	short SkipVDisk
  1967 000007F9 E82800                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1968                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1969                                  					; the memory above 1MB during a	warm boot.
  1970                                  SkipVDisk:				
  1971 000007FC CD19                    		int	19h		; DISK BOOT
  1972                                  					; causes reboot	of disk	system
  1973                                  
  1974                                  ; =============== S U B	R O U T	I N E ========================================
  1975                                  
  1976                                  ;-----------------------------------------------------------------------------
  1977                                  ;
  1978                                  ; procedure : int15
  1979                                  ;
  1980                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1981                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1982                                  ;		is running high, it Erases the VDISK header
  1983                                  ;		present at 1MB boundary
  1984                                  ;
  1985                                  ;-----------------------------------------------------------------------------
  1986                                  
  1987                                  ; 16/10/2022
  1988                                  ;DELKEY		equ	53h
  1989                                  ;ROMDATASEG	equ	40h
  1990                                  KBFLAG		equ	17h
  1991                                  ;CTRLSTATE	equ	04h
  1992                                  ;ALTSTATE	equ	08h
  1993                                  
  1994                                  Int15:		; proc near		
  1995                                  		;cmp	ax, 4F00h+DELKEY
  1996 000007FE 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1997                                  		; 07/08/2023
  1998                                  		;jz	short int15_1
  1999                                  		;jmp	far [cs:Old15]	; 16/10/2022
  2000                                  		;;jmp	cs:Old15
  2001 00000801 751C                    		jnz	short Old15_j	; 07/08/2023 
  2002                                  ; ----------------------------------------------------------------------------
  2003                                  int15_1:				
  2004 00000803 1E                      		push	ds
  2005 00000804 50                      		push	ax
  2006                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2007                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07A5h
  2008                                  		;mov	ax, 40h		; ROMDATASEG
  2009                                  		;mov	ds, ax
  2010                                  		;;mov	al, ds:17h	; [KBFLAG]
  2011                                  		;; 16/10/2022
  2012                                  		;mov	al, [KBFLAG]
  2013 00000805 31C0                    		xor	ax, ax
  2014 00000807 8ED8                    		mov	ds, ax
  2015 00000809 A01704                  		mov	al, [0417h]	; KBFLAG = 0417h (PCDOS 7.1 IBMBIO.COM)
  2016 0000080C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  2017 0000080E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  2018 00000810 750A                    		jnz	short int15_2
  2019                                  		; 07/08/2023
  2020                                  		;push	cs
  2021                                  		;pop	ds
  2022                                  		;cmp	byte [inHMA], 0	; is DOS running from HMA
  2023 00000812 2E3826[0D00]            		cmp	byte [cs:inHMA], ah ; 0
  2024 00000817 7403                    		jz	short int15_2
  2025 00000819 E80800                  		call	EraseVDiskHead
  2026                                  int15_2:				
  2027 0000081C 58                      		pop	ax
  2028 0000081D 1F                      		pop	ds
  2029 0000081E F9                      		stc
  2030                                  Old15_j:		; 07/08/2023
  2031 0000081F 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  2032                                  		;jmp	cs:Old15
  2033                                  	
  2034                                  ; =============== S U B	R O U T	I N E ========================================
  2035                                  
  2036                                  ;-----------------------------------------------------------------------------
  2037                                  ;
  2038                                  ; procedure : EraseVDiskHead
  2039                                  ;
  2040                                  ;		Erases the VDisk Header present in the 1MB boundary
  2041                                  ;
  2042                                  ;-----------------------------------------------------------------------------
  2043                                  
  2044                                  EraseVDiskHead:	; proc near
  2045                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2046                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07C1h
  2047                                  		;push	ax
  2048 00000824 51                      		push	cx
  2049 00000825 57                      		push	di
  2050 00000826 06                      		push	es
  2051 00000827 E866FF                  		call	EnsureA20On
  2052 0000082A B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  2053 0000082D 8EC0                    		mov	es, ax
  2054 0000082F BF1000                  		mov	di, 10h		; point	to VDISK header
  2055                                  		; 07/08/2023
  2056                                  		;mov	cx, 10h		; size of vdisk	header
  2057 00000832 89F9                    		mov	cx, di ; 16
  2058                                  		;xor	ax, ax
  2059 00000834 40                      		inc	ax ; ax = 0
  2060 00000835 F3AB                    		rep stosw		; clear	it
  2061 00000837 07                      		pop	es
  2062 00000838 5F                      		pop	di
  2063 00000839 59                      		pop	cx
  2064                                  		;pop	ax ; 07/08/2023
  2065 0000083A C3                      		retn
  2066                                  
  2067                                  ; ----------------------------------------------------------------------------
  2068                                  
  2069                                  ;************************************************************************
  2070                                  ;*									*
  2071                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  2072                                  ;*	  it returns through one of the three functions that follow.	*
  2073                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  2074                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2075                                  ;*									*
  2076                                  ;************************************************************************
  2077                                  
  2078                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2079                                  %if 0
  2080                                  int_2f:		
  2081                                  		jmp	far [cs:bcode_i2f] ; 16/10/2022
  2082                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2083                                  
  2084                                  ; ----------------------------------------------------------------------------
  2085                                  
  2086                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2087                                  ; note:  is it really necessary to transiton out and then back in?
  2088                                  ;	 It's not as if this is a really speed critical function.
  2089                                  ;	 might as well do whatever's most compact.
  2090                                  
  2091                                  i2f_dskentry:
  2092                                  		jmp	dsk_entry
  2093                                  
  2094                                  ; ----------------------------------------------------------------------------
  2095                                  
  2096                                  ;************************************************************************
  2097                                  ;*									*
  2098                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2099                                  ;*		is done. presently does nothing. affects no		*
  2100                                  ;*		registers!						*
  2101                                  ;*									*
  2102                                  ;************************************************************************
  2103                                  
  2104                                  ; 09/12/2022
  2105                                  ; re_init_:
  2106                                  re_init:				; called back by sysinit after
  2107                                  		retf			; a bunch of stuff is done.
  2108                                  					; presently does nothing
  2109                                  %endif
  2110                                  
  2111                                  ; ----------------------------------------------------------------------------
  2112                                  
  2113                                  ;SR; WIN386 support
  2114                                  
  2115                                  ; WIN386 instance data structure
  2116                                  ;
  2117                                  ; Here is a Win386 startup info structure which we set up and to which
  2118                                  ; we return a pointer when Win386 initializes.
  2119                                  
  2120 0000083B 0300                    Win386_SI:	db 3, 0			; SI_Version
  2121                                  					; Startup Info for Win386
  2122 0000083D 00000000                SI_Next:	dd 0			; pointer to next info structure
  2123 00000841 00000000                		dd 0			; a field we don't need
  2124 00000845 00000000                		dd 0			; another field	we don't need
  2125 00000849 [4D08]                  SI_Instance:	dw Instance_Table
  2126 0000084B 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2127                                  
  2128                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2129                                  ; areas. Note that the address and size of the hardware stacks must
  2130                                  ; be calculated and inserted at boot time.
  2131                                  
  2132 0000084D 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2133 00000851 0200                    		dw 2			; ... 2	bytes
  2134 00000853 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2135 00000857 1400                    		dw 14h			; ... 14H bytes
  2136 00000859 [0C00]                  		dw altah		; a con	device buffer...
  2137 0000085B 7000                    		dw 70h			; Bios_Data segment
  2138 0000085D 0100                    		dw 1			; ... 1 byte
  2139                                  
  2140                                  NextStack:
  2141                                  
  2142                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2143                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2144                                  ;	That's just fine as long as these are the last items
  2145                                  ;	in the instance list since the first item is initialized
  2146                                  ;	to 0000 at load time.
  2147                                  
  2148 0000085F 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2149 00000863 0200                    		dw 2			; ... 2 bytes
  2150 00000865 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2151 00000869 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2152 0000086B 00000000                		dd 0			; terminate the	instance table
  2153                                  
  2154                                  					;SR;
  2155 0000086F 00                      IsWin386:	db 0			; Flag to indicate whether
  2156                                  					; Win386 is running or not
  2157                                  ;-----------------------------------------------------------------------------
  2158                                  
  2159                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2160                                  ;when we call it including checking of A20. The code being only about 
  2161                                  ;30 bytes, we might as well put it in BIOS_DATA
  2162                                  
  2163                                  V86_Crit_SetFocus:			
  2164 00000870 57                      		push	di
  2165 00000871 06                      		push	es
  2166 00000872 53                      		push	bx
  2167 00000873 50                      		push	ax
  2168 00000874 31FF                    		xor	di, di
  2169 00000876 8EC7                    		mov	es, di
  2170 00000878 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2171 0000087B B88416                  		mov	ax, 1684h	; Get API entry	point
  2172 0000087E CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2173                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2174                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2175 00000880 8CC0                    		mov	ax, es
  2176 00000882 09F8                    		or	ax, di
  2177 00000884 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2178                                  					; Set up stack frame to	simulate a call.
  2179 00000886 0E                      		push	cs
  2180                                  		;mov	ax, offset Skip
  2181 00000887 B8[9108]                		mov	ax, Skip
  2182 0000088A 50                      		push	ax
  2183 0000088B 06                      		push	es
  2184 0000088C 57                      		push	di		; API far call address
  2185 0000088D B80100                  		mov	ax, 1		; SetFocus function number
  2186 00000890 CB                      		retf			; do the call
  2187                                  ;-----------------------------------------------------------------------------
  2188                                  
  2189                                  Skip:					
  2190 00000891 58                      		pop	ax
  2191 00000892 5B                      		pop	bx
  2192 00000893 07                      		pop	es
  2193 00000894 5F                      		pop	di
  2194 00000895 CB                      		retf
  2195                                  
  2196                                  ;End WIN386 support
  2197                                  
  2198                                  ; ----------------------------------------------------------------------------
  2199                                  
  2200                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2201                                  
  2202                                  ; 09/12/2022
  2203                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2204                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2205                                  ; (followings are in sysinit segment)
  2206                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2207                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2208                                  ;DEVICELIST	equ 273h
  2209                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2210                                  ;MEMORYSIZE	equ 292h	
  2211                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2212                                  ;DEFAULTDRIVE	equ 296h
  2213                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2214                                  ;;currentdoslocation equ 271h
  2215                                  ;CURRENTDOSLOCATION equ 271h
  2216                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2217                                  ;SYSINITSTART	equ 267h
  2218                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2219                                  ; 18/10/2022
  2220                                  ;toomanydrivesflag equ 3FFh 
  2221                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2222                                  
  2223                                  ; ----------------------------------------------------------------------------
  2224                                  
  2225 00000896 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2226                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2227                                  					; (procedure in	SYSINIT	segment)
  2228                                  ; 17/10/2022
  2229 00000898 [BD0A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2230 0000089A 2E04                    		dw SYSINITSEG		; 08/08/2023
  2231                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2232                                  					; 0473h for MSDOS 6.21 IO.SYS
  2233                                  ;SR;
  2234                                  ; A communication block has been setup between the DOS and the BIOS. All
  2235                                  ;the data starting from SysinitPresent will be part of the data block. 
  2236                                  ;Right now, this is the only data being communicated. It can be expanded 
  2237                                  ;later to add more stuff
  2238                                  
  2239 0000089C 00                      SysinitPresent:	db 0			
  2240 0000089D 0000                    endfloppy:	db 0, 0
  2241                                  
  2242                                  ; ----------------------------------------------------------------------------			
  2243                                  
  2244                                  ; Bios_Data ends
  2245                                  	
  2246                                  ; Possibly disposable BIOS data
  2247                                  ; This data follows the	regular	BIOS data,
  2248                                  ; and is part of the same group.
  2249                                  
  2250 0000089F 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2250 000008A8 202000             
  2251                                  					; null volume id
  2252 000008AB 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2252 000008B4 202000             
  2253                                  					; vid scratch buffer
  2254 000008B7 80                      harddrv:	db 80h			
  2255                                  
  2256                                  end96tpi:
  2257                                  
  2258                                  ;;*********************************************************************
  2259                                  ;;memory allocation for bdss
  2260                                  ;;*********************************************************************
  2261                                  ;
  2262                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2263                                  ;
  2264                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2265                                  ;
  2266                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2267                                  
  2268 000008B8 FFFF                    bdss:		dw 0FFFFh		
  2269 000008BA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2269 000008C3 0210000000F8       
  2270 000008C9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2270 000008D2 000000000000000003 
  2271 000008DB 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2271 000008E4 00000000000000     
  2272 000008EB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2272 000008F4 000000000000000000 
  2273 000008FD 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2273 00000906 4E414D45           
  2274 0000090A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2274 00000913 46415431           
  2275 00000917 3220202000              		db 32h,	20h, 20h, 20h, 0
  2276 0000091C FFFF                    		dw 0FFFFh
  2277 0000091E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2277 00000927 0210000000F8       
  2278 0000092D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2278 00000936 000000000000000003 
  2279 0000093F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2279 00000948 00000000000000     
  2280 0000094F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2280 00000958 000000000000000000 
  2281 00000961 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2281 0000096A 4E414D45           
  2282 0000096E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2282 00000977 46415431           
  2283 0000097B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2284 00000980 FFFF                    		dw 0FFFFh
  2285 00000982 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2285 0000098B 0210000000F8       
  2286 00000991 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2286 0000099A 000000000000000003 
  2287 000009A3 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2287 000009AC 00000000000000     
  2288 000009B3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2288 000009BC 000000000000000000 
  2289 000009C5 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2289 000009CE 4E414D45           
  2290 000009D2 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2290 000009DB 46415431           
  2291 000009DF 3220202000              		db 32h,	20h, 20h, 20h, 0
  2292 000009E4 FFFF                    		dw 0FFFFh
  2293 000009E6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2293 000009EF 0210000000F8       
  2294 000009F5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2294 000009FE 000000000000000003 
  2295 00000A07 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2295 00000A10 00000000000000     
  2296 00000A17 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2296 00000A20 000000000000000000 
  2297 00000A29 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2297 00000A32 4E414D45           
  2298 00000A36 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2298 00000A3F 46415431           
  2299 00000A43 3220202000              		db 32h,	20h, 20h, 20h, 0
  2300 00000A48 FFFF                    		dw 0FFFFh
  2301 00000A4A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2301 00000A53 0210000000F8       
  2302 00000A59 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2302 00000A62 000000000000000003 
  2303 00000A6B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2303 00000A74 00000000000000     
  2304 00000A7B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2304 00000A84 000000000000000000 
  2305 00000A8D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2305 00000A96 4E414D45           
  2306 00000A9A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2306 00000AA3 46415431           
  2307 00000AA7 3220202000              		db 32h,	20h, 20h, 20h, 0
  2308 00000AAC FFFF                    		dw 0FFFFh
  2309 00000AAE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2309 00000AB7 0210000000F8       
  2310 00000ABD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2310 00000AC6 000000000000000003 
  2311 00000ACF 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2311 00000AD8 00000000000000     
  2312 00000ADF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2312 00000AE8 000000000000000000 
  2313 00000AF1 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2313 00000AFA 4E414D45           
  2314 00000AFE 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2314 00000B07 46415431           
  2315 00000B0B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2316 00000B10 FFFF                    		dw 0FFFFh
  2317 00000B12 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2317 00000B1B 0210000000F8       
  2318 00000B21 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2318 00000B2A 000000000000000003 
  2319 00000B33 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2319 00000B3C 00000000000000     
  2320 00000B43 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2320 00000B4C 000000000000000000 
  2321 00000B55 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2321 00000B5E 4E414D45           
  2322 00000B62 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2322 00000B6B 46415431           
  2323 00000B6F 3220202000              		db 32h,	20h, 20h, 20h, 0
  2324 00000B74 FFFF                    		dw 0FFFFh
  2325 00000B76 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2325 00000B7F 0210000000F8       
  2326 00000B85 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2326 00000B8E 000000000000000003 
  2327 00000B97 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2327 00000BA0 00000000000000     
  2328 00000BA7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2328 00000BB0 000000000000000000 
  2329 00000BB9 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2329 00000BC2 4E414D45           
  2330 00000BC6 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2330 00000BCF 46415431           
  2331 00000BD3 3220202000              		db 32h,	20h, 20h, 20h, 0
  2332 00000BD8 FFFF                    		dw 0FFFFh
  2333 00000BDA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2333 00000BE3 0210000000F8       
  2334 00000BE9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2334 00000BF2 000000000000000003 
  2335 00000BFB 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2335 00000C04 00000000000000     
  2336 00000C0B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2336 00000C14 000000000000000000 
  2337 00000C1D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2337 00000C26 4E414D45           
  2338 00000C2A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2338 00000C33 46415431           
  2339 00000C37 3220202000              		db 32h,	20h, 20h, 20h, 0
  2340 00000C3C FFFF                    		dw 0FFFFh
  2341 00000C3E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2341 00000C47 0210000000F8       
  2342 00000C4D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2342 00000C56 000000000000000003 
  2343 00000C5F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2343 00000C68 00000000000000     
  2344 00000C6F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2344 00000C78 000000000000000000 
  2345 00000C81 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2345 00000C8A 4E414D45           
  2346 00000C8E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2346 00000C97 46415431           
  2347 00000C9B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2348 00000CA0 FFFF                    		dw 0FFFFh
  2349 00000CA2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2349 00000CAB 0210000000F8       
  2350 00000CB1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2350 00000CBA 000000000000000003 
  2351 00000CC3 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2351 00000CCC 00000000000000     
  2352 00000CD3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2352 00000CDC 000000000000000000 
  2353 00000CE5 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2353 00000CEE 4E414D45           
  2354 00000CF2 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2354 00000CFB 46415431           
  2355 00000CFF 3220202000              		db 32h,	20h, 20h, 20h, 0
  2356 00000D04 FFFF                    		dw 0FFFFh
  2357 00000D06 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2357 00000D0F 0210000000F8       
  2358 00000D15 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2358 00000D1E 000000000000000003 
  2359 00000D27 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2359 00000D30 00000000000000     
  2360 00000D37 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2360 00000D40 000000000000000000 
  2361 00000D49 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2361 00000D52 4E414D45           
  2362 00000D56 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2362 00000D5F 46415431           
  2363 00000D63 3220202000              		db 32h,	20h, 20h, 20h, 0
  2364 00000D68 FFFF                    		dw 0FFFFh
  2365 00000D6A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2365 00000D73 0210000000F8       
  2366 00000D79 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2366 00000D82 000000000000000003 
  2367 00000D8B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2367 00000D94 00000000000000     
  2368 00000D9B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2368 00000DA4 000000000000000000 
  2369 00000DAD 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2369 00000DB6 4E414D45           
  2370 00000DBA 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2370 00000DC3 46415431           
  2371 00000DC7 3220202000              		db 32h,	20h, 20h, 20h, 0
  2372 00000DCC FFFF                    		dw 0FFFFh
  2373 00000DCE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2373 00000DD7 0210000000F8       
  2374 00000DDD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2374 00000DE6 000000000000000003 
  2375 00000DEF 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2375 00000DF8 00000000000000     
  2376 00000DFF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2376 00000E08 000000000000000000 
  2377 00000E11 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2377 00000E1A 4E414D45           
  2378 00000E1E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2378 00000E27 46415431           
  2379 00000E2B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2380 00000E30 FFFF                    		dw 0FFFFh
  2381 00000E32 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2381 00000E3B 0210000000F8       
  2382 00000E41 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2382 00000E4A 000000000000000003 
  2383 00000E53 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2383 00000E5C 00000000000000     
  2384 00000E63 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2384 00000E6C 000000000000000000 
  2385 00000E75 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2385 00000E7E 4E414D45           
  2386 00000E82 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2386 00000E8B 46415431           
  2387 00000E8F 3220202000              		db 32h,	20h, 20h, 20h, 0
  2388 00000E94 FFFF                    		dw 0FFFFh
  2389 00000E96 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2389 00000E9F 0210000000F8       
  2390 00000EA5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2390 00000EAE 000000000000000003 
  2391 00000EB7 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2391 00000EC0 00000000000000     
  2392 00000EC7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2392 00000ED0 000000000000000000 
  2393 00000ED9 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2393 00000EE2 4E414D45           
  2394 00000EE6 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2394 00000EEF 46415431           
  2395 00000EF3 3220202000              		db 32h,	20h, 20h, 20h, 0
  2396 00000EF8 FFFF                    		dw 0FFFFh
  2397 00000EFA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2397 00000F03 0210000000F8       
  2398 00000F09 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2398 00000F12 000000000000000003 
  2399 00000F1B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2399 00000F24 00000000000000     
  2400 00000F2B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2400 00000F34 000000000000000000 
  2401 00000F3D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2401 00000F46 4E414D45           
  2402 00000F4A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2402 00000F53 46415431           
  2403 00000F57 3220202000              		db 32h,	20h, 20h, 20h, 0
  2404 00000F5C FFFF                    		dw 0FFFFh
  2405 00000F5E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2405 00000F67 0210000000F8       
  2406 00000F6D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2406 00000F76 000000000000000003 
  2407 00000F7F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2407 00000F88 00000000000000     
  2408 00000F8F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2408 00000F98 000000000000000000 
  2409 00000FA1 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2409 00000FAA 4E414D45           
  2410 00000FAE 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2410 00000FB7 46415431           
  2411 00000FBB 3220202000              		db 32h,	20h, 20h, 20h, 0
  2412 00000FC0 FFFF                    		dw 0FFFFh
  2413 00000FC2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2413 00000FCB 0210000000F8       
  2414 00000FD1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2414 00000FDA 000000000000000003 
  2415 00000FE3 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2415 00000FEC 00000000000000     
  2416 00000FF3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2416 00000FFC 000000000000000000 
  2417 00001005 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2417 0000100E 4E414D45           
  2418 00001012 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2418 0000101B 46415431           
  2419 0000101F 3220202000              		db 32h,	20h, 20h, 20h, 0
  2420 00001024 FFFF                    		dw 0FFFFh
  2421 00001026 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2421 0000102F 0210000000F8       
  2422 00001035 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2422 0000103E 000000000000000003 
  2423 00001047 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2423 00001050 00000000000000     
  2424 00001057 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2424 00001060 000000000000000000 
  2425 00001069 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2425 00001072 4E414D45           
  2426 00001076 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2426 0000107F 46415431           
  2427 00001083 3220202000              		db 32h,	20h, 20h, 20h, 0
  2428 00001088 FFFF                    		dw 0FFFFh
  2429 0000108A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2429 00001093 0210000000F8       
  2430 00001099 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2430 000010A2 000000000000000003 
  2431 000010AB 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2431 000010B4 00000000000000     
  2432 000010BB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2432 000010C4 000000000000000000 
  2433 000010CD 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2433 000010D6 4E414D45           
  2434 000010DA 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2434 000010E3 46415431           
  2435 000010E7 3220202000              		db 32h,	20h, 20h, 20h, 0
  2436 000010EC FFFF                    		dw 0FFFFh
  2437 000010EE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2437 000010F7 0210000000F8       
  2438 000010FD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2438 00001106 000000000000000003 
  2439 0000110F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2439 00001118 00000000000000     
  2440 0000111F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2440 00001128 000000000000000000 
  2441 00001131 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2441 0000113A 4E414D45           
  2442 0000113E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2442 00001147 46415431           
  2443 0000114B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2444 00001150 FFFF                    		dw 0FFFFh
  2445 00001152 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2445 0000115B 0210000000F8       
  2446 00001161 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2446 0000116A 000000000000000003 
  2447 00001173 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2447 0000117C 00000000000000     
  2448 00001183 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2448 0000118C 000000000000000000 
  2449 00001195 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2449 0000119E 4E414D45           
  2450 000011A2 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2450 000011AB 46415431           
  2451 000011AF 3220202000              		db 32h,	20h, 20h, 20h, 0
  2452 000011B4 FFFF                    		dw 0FFFFh
  2453 000011B6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2453 000011BF 0210000000F8       
  2454 000011C5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2454 000011CE 000000000000000003 
  2455 000011D7 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2455 000011E0 00000000000000     
  2456 000011E7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2456 000011F0 000000000000000000 
  2457 000011F9 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2457 00001202 4E414D45           
  2458 00001206 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2458 0000120F 46415431           
  2459 00001213 3220202000              		db 32h,	20h, 20h, 20h, 0
  2460 00001218 FFFF                    		dw 0FFFFh
  2461 0000121A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2461 00001223 0210000000F8       
  2462 00001229 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2462 00001232 000000000000000003 
  2463 0000123B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2463 00001244 00000000000000     
  2464 0000124B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2464 00001254 000000000000000000 
  2465 0000125D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2465 00001266 4E414D45           
  2466 0000126A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2466 00001273 46415431           
  2467 00001277 3220202000              		db 32h,	20h, 20h, 20h, 0
  2468 0000127C 00                      		db 0
  2469                                  
  2470                                  ;---------------------------------------------------------------------------
  2471                                  ; Possibly disposable data, goes at end of data group
  2472                                  ;***************************************************************************
  2473                                  
  2474                                  ; Possibly disposable data, goes at end of data group
  2475                                  
  2476                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2477                                  ;
  2478                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2479                                  ;		(dl) = drive number (80h or 81h).
  2480                                  ;		(dh) = head number.
  2481                                  ;		(ch) = cylinder number.
  2482                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2483                                  ;		(al) = number of sectors.
  2484                                  ;		(es:bx) = address of read buffer.
  2485                                  ;		for more on register contents see rom bios listing.
  2486                                  ;		stack set up for return by an iret.
  2487                                  ;
  2488                                  ;	exit:	(ah) = status of current operation.
  2489                                  ;		(cy) = 1 if failed, 0 if successful.
  2490                                  ;		for other register contents see rom bios listing.
  2491                                  ;
  2492                                  ;	uses:	
  2493                                  ;
  2494                                  ;
  2495                                  ;	warning: uses old13 vector for non-read calls.
  2496                                  ;		does direct calls to the at rom.
  2497                                  ;		does segment arithmatic.
  2498                                  ;
  2499                                  ;	effects: performs disk i/o operation.
  2500                                  
  2501                                  ; 16/10/2022
  2502                                  ; 28/05/2019
  2503                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2504                                  
  2505                                  ;* offsets into cmd_block for registers
  2506                                  
  2507                                  pre_comp equ 0	;write pre-compensation
  2508                                  sec_cnt	 equ 1	;sector count
  2509                                  sec_num	 equ 2	;sector number
  2510                                  cyl_low	 equ 3	;cylinder number, low part
  2511                                  cyl_high equ 4	;cylinder number, high part
  2512                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2513                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2514                                  cmd_reg  equ 6	;command register
  2515                                  
  2516                                  ; 01/10/2022
  2517                                  disk_status1	equ 74h
  2518                                  hf_num		equ 75h
  2519                                  control_byte	equ 76h
  2520                                  
  2521                                  ibm_disk_io:				
  2522 0000127D 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2523 00001280 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2524 00001282 80FC02                  		cmp	ah, 2
  2525 00001285 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2526 00001287 80FC0A                  		cmp	ah, 0Ah
  2527 0000128A 7405                    		jz	short atd2	; and call 0Ah (read long).
  2528                                  atd1:
  2529 0000128C 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2530                                  		;jmp	cs:Old13	; use rom int 13h handler
  2531                                  ;-----------------------------------------------------------------------------
  2532                                  
  2533                                  atd2:					
  2534 00001291 53                      		push	bx
  2535 00001292 51                      		push	cx
  2536 00001293 52                      		push	dx
  2537 00001294 57                      		push	di
  2538 00001295 1E                      		push	ds
  2539 00001296 06                      		push	es
  2540 00001297 50                      		push	ax
  2541 00001298 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2542                                  					; establish bios segment addressing
  2543 0000129B 8ED8                    		mov	ds, ax
  2544                                  		; 16/10/2022
  2545 0000129D C606740000              		mov	byte [disk_status1], 0
  2546                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2547                                  					; initially no error code.
  2548 000012A2 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2549 000012A5 3A167500                		cmp	dl, [hf_num]
  2550                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2551 000012A9 7207                    		jb	short atd3	; disk number in range
  2552                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2553 000012AB C606740001              		mov	byte [disk_status1], 1
  2554 000012B0 EB20                    		jmp	short atd4	; disk number out of range error,
  2555                                  					; return
  2556                                  ; ----------------------------------------------------------------------------
  2557                                  
  2558                                  atd3:					
  2559 000012B2 53                      		push	bx
  2560 000012B3 8CC0                    		mov	ax, es
  2561 000012B5 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2562 000012B8 01D8                    		add	ax, bx
  2563 000012BA 8EC0                    		mov	es, ax
  2564 000012BC 5B                      		pop	bx
  2565 000012BD 83E30F                  		and	bx, 0Fh
  2566 000012C0 0E                      		push	cs
  2567 000012C1 E8DF00                  		call	check_dma
  2568 000012C4 720C                    		jb	short atd4	; abort if dma across segment boundary
  2569 000012C6 58                      		pop	ax
  2570 000012C7 50                      		push	ax
  2571 000012C8 E81A00                  		call	setcmd		; set up command block for disk op
  2572 000012CB BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2573 000012CE EE                      		out	dx, al		; write out command modifier
  2574 000012CF E86B00                  		call	docmd		; carry out command
  2575                                  ; ----------------------------------------------------------------------------
  2576                                  
  2577                                  atd4:	
  2578                                  
  2579                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2580                                  ;	      and save a couple bytes while were at it.
  2581                                  				
  2582 000012D2 58                      		pop	ax
  2583                                  		;mov	ah, ds:74h	; [disk_status1]
  2584 000012D3 8A267400                		mov	ah, [disk_status1]
  2585 000012D7 08E4                    		or	ah, ah
  2586 000012D9 7401                    		jz	short atd5
  2587 000012DB F9                      		stc
  2588                                  atd5:					
  2589 000012DC 07                      		pop	es
  2590 000012DD 1F                      		pop	ds
  2591 000012DE 5F                      		pop	di
  2592 000012DF 5A                      		pop	dx
  2593 000012E0 59                      		pop	cx
  2594 000012E1 5B                      		pop	bx
  2595 000012E2 CA0200                  		retf	2		; far return, dropping flags
  2596                                  
  2597                                  ; =============== S U B	R O U T	I N E ========================================
  2598                                  
  2599                                  ;***	setcmd - set up cmd_block for the disk operation
  2600                                  ;
  2601                                  ;	entry:	(ds) = bios data segment.
  2602                                  ;		(es:bx) in seg:000x form.
  2603                                  ;		other registers as in int 13h call
  2604                                  ;	
  2605                                  ;	exit:	cmd_block set up for disk read call.
  2606                                  ;		control_byte set up for disk operation.
  2607                                  ;		(al) = control byte modifier
  2608                                  ;
  2609                                  ;	sets the fields of cmd_block using the register contents
  2610                                  ;	and the contents of the disk parameter block for the given drive.
  2611                                  ;
  2612                                  ;	warning: (ax) destroyed.
  2613                                  ;		does direct calls to the at rom.
  2614                                  
  2615                                  setcmd:		; proc near		
  2616                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2617                                  		; 16/10/2022
  2618 000012E5 A24300                  		mov	[cmd_block+sec_cnt], al
  2619                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2620 000012E8 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2621 000012ED 80FC02                  		cmp	ah, 2
  2622 000012F0 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2623 000012F2 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2624                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2625                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2626                                  setc1:					
  2627 000012F7 88C8                    		mov	al, cl
  2628 000012F9 243F                    		and	al, 3Fh		; mask sector number
  2629                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2630                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2631 000012FB A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2632 000012FE 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2633 00001302 88C8                    		mov	al, cl
  2634 00001304 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2635                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2636 00001307 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2637 0000130A 89D0                    		mov	ax, dx
  2638 0000130C C0E004                  		shl	al, 4		; drive	number
  2639 0000130F 80E40F                  		and	ah, 0Fh
  2640 00001312 08E0                    		or	al, ah		; head number
  2641 00001314 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2642                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2643 00001316 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2644 00001319 06                      		push	es
  2645 0000131A 53                      		push	bx
  2646 0000131B 0E                      		push	cs
  2647 0000131C E85C00                  		call	get_vec
  2648 0000131F 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2649                                  			 		; write pre-comp from disk parameters
  2650 00001323 C1E802                  		shr	ax, 2
  2651                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2652 00001326 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2653                                  					; only use low part
  2654 00001329 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2655                                  					; control byte modifier
  2656 0000132D 5B                      		pop	bx
  2657 0000132E 07                      		pop	es
  2658                                  		;mov	ah, ds:76h	; [control_byte]
  2659 0000132F 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2660 00001333 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2661 00001336 08C4                    		or	ah, al
  2662                                  		;mov	ds:76h,	ah
  2663 00001338 88267600                		mov	[control_byte], ah ; mov [76h],al
  2664 0000133C C3                      		retn
  2665                                  
  2666                                  ; =============== S U B	R O U T	I N E ========================================
  2667                                  
  2668                                  ;***	docmd - carry out read operation to at hard disk
  2669                                  ;
  2670                                  ;	entry:	(es:bx) = address for read in data.
  2671                                  ;		cmd_block set up for disk read.
  2672                                  ;
  2673                                  ;	exit:	buffer at (es:bx) contains data read.
  2674                                  ;		disk_status1 set to error code (0 if success).
  2675                                  ;
  2676                                  ;	
  2677                                  ;
  2678                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2679                                  ;		no check is made for dma boundary overrun.
  2680                                  ;
  2681                                  ;	effects: programs disk controller.
  2682                                  ;		performs disk input.
  2683                                  
  2684                                  docmd:		; proc near		
  2685 0000133D 89DF                    		mov	di, bx
  2686 0000133F 0E                      		push	cs
  2687 00001340 E84000                  		call	command
  2688 00001343 7535                    		jnz	short doc3
  2689                                  doc1:					
  2690 00001345 0E                      		push	cs
  2691 00001346 E84200                  		call	waitt		; wait for controller to complete read
  2692 00001349 752F                    		jnz	short doc3
  2693 0000134B B90001                  		mov	cx, 256		; 256 words per sector
  2694 0000134E BAF001                  		mov	dx, 1F0h	; hf_port
  2695 00001351 FC                      		cld			; string op goes up
  2696 00001352 FA                      		cli			; disable interrupts
  2697                                  					; (bug was forgetting this)
  2698                                  
  2699                                  ;	M062 -- some of these old machines have intermittent failures
  2700                                  ;		when the read is done at full speed. Instead of using
  2701                                  ;		a string rep instruction, we'll use a loop. There is
  2702                                  ;		a slight performance hit, but it only affects these
  2703                                  ;		very old machines with an exact date code match, and
  2704                                  ;		it makes said machines more reliable
  2705                                  ;
  2706                                  ;M062	repz	insw		;read in sector
  2707                                  
  2708                                  rsct_loop:				
  2709 00001353 6D                      		insw
  2710 00001354 E2FD                    		loop	rsct_loop
  2711 00001356 FB                      		sti
  2712                                  		; 16/10/2022
  2713 00001357 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2714                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2715                                  					; (ds =	40h)
  2716 0000135C 7410                    		jz	short doc2	; no ecc bytes to read.
  2717 0000135E 0E                      		push	cs
  2718 0000135F E83100                  		call	wait_drq	; wait for controller to complete read
  2719 00001362 7216                    		jb	short doc3
  2720 00001364 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2721 00001367 BAF001                  		mov	dx, 1F0h	; hf_port
  2722 0000136A FA                      		cli
  2723 0000136B F36C                    		rep insb		; read in ecc
  2724 0000136D FB                      		sti
  2725                                  doc2:					
  2726 0000136E 0E                      		push	cs
  2727 0000136F E82900                  		call	check_status
  2728 00001372 7506                    		jnz	short doc3	; operation failed
  2729                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2730 00001374 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2731 00001378 75CB                    		jnz	short doc1	; loop while more sectors to read
  2732                                  doc3:					
  2733 0000137A C3                      		retn
  2734                                  
  2735                                  ; =============== S U B	R O U T	I N E ========================================
  2736                                  
  2737                                  ;***	define where the rom routines are actually located
  2738                                  ;	   in the buggy old AT BIOS that we might need to
  2739                                  ;	   install a special level of int13 handler for
  2740                                  
  2741                                  ; 16/10/2022
  2742                                  
  2743                                  romsegment 	equ 0F000h  ; segment
  2744                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2745                                  romwait		equ 2E7Fh   ; offset in romsegment
  2746                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2747                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2748                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2749                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2750                                  romfret		equ 0FF65h  ; far return in rom	
  2751                                  
  2752                                  ;***	get_vec - get pointer to hard disk parameters.
  2753                                  ;
  2754                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2755                                  ;
  2756                                  ;	exit:	(es:bx) = address of disk parameters table.
  2757                                  ;
  2758                                  ;	uses:	ax for segment computation.
  2759                                  ;
  2760                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2761                                  ;	or 70h (disk 1).
  2762                                  ;	
  2763                                  ;	warning: (ax) destroyed.
  2764                                  ;		this does a direct call to the at rom.
  2765                                  
  2766                                  get_vec:	; proc near		
  2767                                  		;push	0FF65h		; romfret ; far	return in rom
  2768                                  		;jmp	far ptr	0F000h:2F8Eh
  2769                                  		; 16/10/2022
  2770 0000137B 6865FF                  		push	romfret		; far return in rom
  2771 0000137E EA8E2F00F0              		jmp	romsegment:romget_vec
  2772                                  
  2773                                  ; =============== S U B	R O U T	I N E ========================================
  2774                                  
  2775                                  ;***	command - send contents of cmd_block to disk controller.
  2776                                  ;
  2777                                  ;	entry:	control_byte 
  2778                                  ;		cmd_block - set up with values for hard disk controller.
  2779                                  ;
  2780                                  ;	exit:	disk_status1 = error code.
  2781                                  ;		nz if error, zr for no error.
  2782                                  ;
  2783                                  ;
  2784                                  ;	warning: (ax), (cx), (dx) destroyed.
  2785                                  ;		does a direct call to the at rom.
  2786                                  ;
  2787                                  ;	effects: programs disk controller.
  2788                                  
  2789                                  command:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2E1Eh
  2792                                  		; 16/10/2022
  2793 00001383 6865FF                  		push	romfret		; far return in rom
  2794 00001386 EA1E2E00F0              		jmp	romsegment:romcommand
  2795                                  
  2796                                  ; =============== S U B	R O U T	I N E ========================================
  2797                                  
  2798                                  ;***	waitt - wait for disk interrupt
  2799                                  ;
  2800                                  ;	entry:	nothing.
  2801                                  ;
  2802                                  ;	exit:	disk_status1 = error code.
  2803                                  ;		nz if error, zr if no error.
  2804                                  ;
  2805                                  ;
  2806                                  ;	warning: (ax), (bl), (cx) destroyed.
  2807                                  ;		does a direct call to the at rom.
  2808                                  ;		
  2809                                  ;	effects: calls int 15h, function 9000h.
  2810                                  
  2811                                  waitt:		; proc near		
  2812                                  		;push	0FF65h		; romfret ; far	return in rom
  2813                                  		;jmp	far ptr	0F000h:2E7Fh
  2814                                  		; 16/10/2022
  2815 0000138B 6865FF                  		push	romfret		; far return in rom
  2816 0000138E EA7F2E00F0              		jmp	romsegment:romwait
  2817                                  
  2818                                  ; =============== S U B	R O U T	I N E ========================================
  2819                                  
  2820                                  ;***	wait_drq - wait for data request.
  2821                                  ;
  2822                                  ;	entry:	nothing.
  2823                                  ;
  2824                                  ;	exit:	disk_status1 = error code.
  2825                                  ;		cy if error, nc if no error.
  2826                                  ;
  2827                                  ;	warning: (al), (cx), (dx) destroyed.
  2828                                  ;		does a direct call to the at rom.
  2829                                  
  2830                                  wait_drq:	; proc near		
  2831                                  		;push	0FF65h		; romfret ; far	return in rom
  2832                                  		;jmp	far ptr	0F000h:2EE2h
  2833                                  		; 16/10/2022
  2834 00001393 6865FF                  		push	romfret		; far return in rom
  2835 00001396 EAE22E00F0              		jmp	romsegment:romwait_drq
  2836                                  
  2837                                  ; =============== S U B	R O U T	I N E ========================================
  2838                                  
  2839                                  ;***	check_status - check hard disk status.
  2840                                  ;
  2841                                  ;	entry:	nothing.
  2842                                  ;
  2843                                  ;	exit:	disk_status1 = error code.
  2844                                  ;		nz if error, zr if no error.
  2845                                  ;
  2846                                  ;	warning: (ax), (cx), (dx) destroyed.
  2847                                  ;		does a direct call to the at rom.
  2848                                  
  2849                                  check_status:	; proc near		
  2850                                  		;push	0FF65h		; romfret ; far	return in rom
  2851                                  		;jmp	far ptr	0F000h:2EF8h
  2852                                  		; 16/10/2022
  2853 0000139B 6865FF                  		push	romfret		; far return in rom
  2854 0000139E EAF82E00F0              		jmp	romsegment:romcheck_status
  2855                                  
  2856                                  ; =============== S U B	R O U T	I N E ========================================
  2857                                  
  2858                                  ;***	check_dma - check for dma overrun 64k segment.
  2859                                  ;
  2860                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2861                                  ;		cmd_block set up for operation.
  2862                                  ;
  2863                                  ;	exit:	disk_status1 - error code.
  2864                                  ;		cy if error, nc if no error.
  2865                                  ;
  2866                                  ;	warning: does a direct call to the at rom.
  2867                                  
  2868                                  check_dma:	; proc near		
  2869                                  		;push	0FF65h		; romfret ; far	return in rom
  2870                                  		;jmp	far ptr	0F000h:2F69h
  2871                                  		; 16/10/2022
  2872 000013A3 6865FF                  		push	romfret		; far return in rom
  2873 000013A6 EA692F00F0              		jmp	romsegment:romcheck_dma
  2874                                  
  2875                                  ;-----------------------------------------------------------------------------
  2876                                  
  2877                                  endatrom:
  2878                                  
  2879                                  ; ----------------------------------------------------------------------------
  2880                                  
  2881                                  ;; M015 -- begin changes
  2882                                  ;;
  2883                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2884                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2885                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2886                                  ;; If our init code detects this error, it will install this
  2887                                  ;; special Int13 hook through the same mechanism that was set
  2888                                  ;; up for the IBM patch above. This code is also dynamically
  2889                                  ;; relocated by MSINIT.
  2890                                  
  2891                                  compaq_disk_io:
  2892 000013AB 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2893                                  					;
  2894                                  					; the following	label defines the end of the at	rom patch.
  2895                                  					; this is used at configuration	time.
  2896                                  					;
  2897                                  					; warning!!!
  2898                                  					; this code will be dynamically	relocated by msinit
  2899 000013AE 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2900                                  no_hookit:				
  2901                                  		;jmp	cs:Old13
  2902                                  		; 16/10/2022
  2903 000013B0 2EFF2E[0601]            		jmp	far [cs:Old13]
  2904                                  
  2905                                  ; ----------------------------------------------------------------------------
  2906                                  
  2907                                  mebbe_hookit:
  2908 000013B5 80FA80                  		cmp	dl, 80h
  2909 000013B8 72F6                    		jb	short no_hookit
  2910 000013BA 1E                      		push	ds
  2911                                  		
  2912                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2913                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1830h
  2914                                  		;push	ax
  2915                                  		;mov	ax, 40h
  2916                                  		;mov	ds, ax
  2917                                  		;pop	ax
  2918 000013BB 6A40                    		push	40h
  2919 000013BD 1F                      		pop	ds
  2920                                  
  2921 000013BE 9C                      		pushf
  2922                                  		;call	cs:Old13
  2923                                  		; 16/10/2022
  2924 000013BF 2EFF1E[0601]            		call	far [cs:Old13]
  2925 000013C4 1F                      		pop	ds
  2926 000013C5 CA0200                  		retf	2
  2927                                  
  2928                                  ; ----------------------------------------------------------------------------
  2929                                  
  2930 000013C8 00                      end_compaq_i13hook: db 0			
  2931                                  
  2932                                  ; =============== S U B	R O U T	I N E ========================================
  2933                                  
  2934                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2935                                  %if 0  
  2936                                  
  2937                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2938                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2939                                  
  2940                                  daycnt_to_day:	; proc far
  2941                                  
  2942                                  ; entry: [daycnt] = number of days since 1-1-80
  2943                                  ;
  2944                                  ; return: ch - century in bcd
  2945                                  ;	  cl - year in bcd
  2946                                  ;	  dh - month in bcd
  2947                                  ;	  dl - day in bcd
  2948                                  
  2949                                  		; 16/10/2022		
  2950                                  		push	word [cs:daycnt] ; save daycnt
  2951                                  		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2952                                  					; # days from 1-1-1980 to 1-1-2000
  2953                                  		jnb	short century20
  2954                                  		mov	byte [cs:base_century], 19
  2955                                  		mov	byte [cs:base_year], 80
  2956                                  		jmp	short years
  2957                                  ; ----------------------------------------------------------------------------
  2958                                  		
  2959                                  century20:				
  2960                                  		mov	byte [cs:base_century], 20
  2961                                  		mov	byte [cs:base_year], 0
  2962                                  		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2963                                  					; adjust daycnt
  2964                                  years:					
  2965                                  		xor	dx, dx
  2966                                  		mov	ax, [cs:daycnt]
  2967                                  		mov	bx, 1461	; (366+365*3)
  2968                                  					; # of days in a Leap year block
  2969                                  		div	bx		; AX = # of leap block,	DX = daycnt
  2970                                  		mov	[cs:daycnt], dx	; save daycnt left
  2971                                  		mov	bl, 4
  2972                                  		mul	bl		; AX = # of years. Less	than 100
  2973                                  		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2974                                  		inc	word [cs:daycnt]	; set daycnt to	1 base
  2975                                  		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2976                                  		jbe	short leapyear	; within 366+355+355+355 days.
  2977                                  		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2978                                  		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2979                                  		mov	cx, 3		; And next three years are normal
  2980                                  regularyear:				
  2981                                  		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2982                                  		jbe	short yeardone	; {if (daycnt >	365)
  2983                                  		inc	byte [cs:base_year]	;   { daycnt -=	365
  2984                                  		sub	word [cs:daycnt], 365	;   }
  2985                                  		loop	regularyear	; }
  2986                                  					;
  2987                                  					; should never fall through loop
  2988                                  leapyear:				
  2989                                  		mov	byte [cs:month_tab+1], 29 ; leap year.
  2990                                  					; change month table.
  2991                                  yeardone:				
  2992                                  		xor	bx, bx
  2993                                  		xor	dx, dx
  2994                                  		mov	ax, [cs:daycnt]
  2995                                  		;mov	si, offset month_tab
  2996                                  		mov	si, month_tab	; 19/10/2022
  2997                                  		mov	cx, 12
  2998                                  months:					
  2999                                  		inc	bl
  3000                                  
  3001                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  3002                                  		;mov	dl, [cs:si]
  3003                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  3004                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  3005                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  3006                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  3007                                  		
  3008                                  		mov	dl, [si] ; ?	; mov dl, [cs:si]
  3009                                  		cmp	ax, dx		; cmp daycnt for each month till fit
  3010                                  					; dh=0
  3011                                  		jbe	short month_done
  3012                                  		inc	si		; next month
  3013                                  		sub	ax, dx		; adjust daycnt
  3014                                  		loop	months		;
  3015                                  					; should never fall through loop
  3016                                  month_done:				
  3017                                  		mov	byte [cs:month_tab+1], 28
  3018                                  					; restore month table value
  3019                                  		mov	dl, bl
  3020                                  		mov	dh, [cs:base_year]
  3021                                  		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  3022                                  		call	far [cs:bintobcd]
  3023                                  		;call	cs:bintobcd	; convert "day"	to bcd
  3024                                  					; dl = bcd day,	al = month
  3025                                  		xchg	dl, al
  3026                                  		call	far [cs:bintobcd]
  3027                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  3028                                  		xchg	dh, al
  3029                                  		call	far [cs:bintobcd]
  3030                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  3031                                  		xchg	cl, al
  3032                                  		call	far [cs:bintobcd]
  3033                                  		;call	cs:bintobcd	; ch = bcd century
  3034                                  		mov	ch, al
  3035                                  		pop	word [cs:daycnt] ; restore original value
  3036                                  		retf
  3037                                  
  3038                                  enddaycnttoday:	
  3039                                  
  3040                                  %endif
  3041                                  
  3042                                  ; =============== S U B	R O U T	I N E ========================================
  3043                                  
  3044                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3045                                  %if 0  
  3046                                  
  3047                                  bin_to_bcd:	; proc far		; real time clock support
  3048                                  
  3049                                  ;convert a binary input in al (less than 63h or 99 decimal)
  3050                                  ;into a bcd value in al. ah destroyed.	
  3051                                  		
  3052                                  		push	cx		
  3053                                  		aam			; al=high digit	bcd, ah=low digit bcd
  3054                                  		mov	cl, 4
  3055                                  		shl	ah, cl		; mov the high digit to	high nibble
  3056                                  		or	al, ah
  3057                                  		pop	cx
  3058                                  		retf
  3059                                  %endif
  3060                                  
  3061                                  ; ----------------------------------------------------------------------------
  3062                                  
  3063                                  ; the k09 requires the routines for reading the clock because of the suspend/
  3064                                  ; resume facility. the system clock needs to be reset after resume.
  3065                                  
  3066                                  ; the following routine is executed at resume time when the system
  3067                                  ; powered on after suspension. it reads the real time clock and
  3068                                  ; resets the system time and date, and then irets.
  3069                                  
  3070                                  ; warning!!! this code will be dynamically relocated by msinit.
  3071                                  
  3072                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3073                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:183Eh
  3074                                  int_6Ch:
  3075 000013C9 0E                      		push	cs
  3076 000013CA 1F                      		pop	ds
  3077                                  		;cmp	byte [cs:inHMA], 0  
  3078 000013CB 803E[0D00]00            		cmp	byte [inHMA], 0
  3079 000013D0 7405                    		jz      short int6c
  3080 000013D2 BB[9007]                		mov     bx, EnsureA20On
  3081 000013D5 FFD3                    		call    bx
  3082                                  int6c:					
  3083                                  		;push	cs
  3084                                  		;pop	ds
  3085 000013D7 8F06[B306]              		pop	word [int6c_ret_addr]	; pop off return address
  3086 000013DB 8F06[B506]              		pop	word [int6c_ret_addr+2]
  3087 000013DF 9D                      		popf
  3088 000013E0 E81300                  		call	read_real_date	; get the date from the clock
  3089 000013E3 FA                      		cli
  3090 000013E4 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  3091 000013E8 FB                      		sti
  3092 000013E9 E8B900                  		call	read_real_time	; get the time from the	rtc
  3093 000013EC FA                      		cli
  3094 000013ED B401                    		mov	ah, 1
  3095 000013EF CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  3096                                  					; CX:DX	= clock	count
  3097                                  					; Return: time of day set
  3098 000013F1 FB                      		sti
  3099                                  		;jmp	int6c_ret_addr	; long jump
  3100                                  		; 16/10/2022
  3101 000013F2 FF2E[B306]              		jmp	far [int6c_ret_addr] ; long jump
  3102                                  
  3103                                  ; =============== S U B	R O U T	I N E ========================================
  3104                                  
  3105                                  ;   read_real_date reads real-time clock for date and returns the number
  3106                                  ;   of days elapsed since 1-1-80 in si
  3107                                  
  3108                                  read_real_date:	; proc near		
  3109 000013F6 50                      		push	ax
  3110 000013F7 51                      		push	cx
  3111 000013F8 52                      		push	dx
  3112 000013F9 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3113 000013FB CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3114                                  					; Return: CX:DX	= clock	count
  3115                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3116                                  					; midnight
  3117                                  					; Otherwise, AL	> 0
  3118 000013FD 5A                      		pop	dx
  3119 000013FE 59                      		pop	cx
  3120 000013FF 58                      		pop	ax
  3121 00001400 50                      		push	ax
  3122 00001401 53                      		push	bx
  3123 00001402 51                      		push	cx
  3124 00001403 52                      		push	dx
  3125                                  		;mov	word [cs:daycnt2], 1
  3126                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3127                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:187Ah
  3128 00001404 C706[BB06]0100          		mov	word [daycnt2], 1
  3129                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3130 0000140A B404                    		mov	ah, 4
  3131 0000140C CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3132                                  					; Return: DL = day in BCD
  3133                                  					; DH = month in	BCD
  3134                                  					; CL = year in BCD
  3135                                  					; CH = century (19h or 20h)
  3136 0000140E 7303                    		jnb	short read_ok
  3137 00001410 E98300                  		jmp	r_d_ret
  3138                                  ;-----------------------------------------------------------------------------
  3139                                  
  3140                                  read_ok:
  3141 00001413 882E[B706]              		mov	[bin_date_time], ch
  3142 00001417 880E[B806]              		mov	[bin_date_time+1], cl
  3143 0000141B 8836[B906]              		mov	[bin_date_time+2], dh
  3144 0000141F 8816[BA06]              		mov	[bin_date_time+3], dl
  3145                                  		;mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3146                                  		; 08/08/2023
  3147                                  		;mov	byte [daycnt2], 2
  3148 00001423 FE06[BB06]              		inc	byte [daycnt2] ; 2
  3149 00001427 E83401                  		call	bcd_verify	; verify bcd values in range
  3150 0000142A 726A                    		jb	short r_d_ret	; some value out of range
  3151                                  		;mov	word [cs:daycnt2], 3
  3152                                  		; 08/08/2023
  3153                                  		;mov	byte [daycnt2], 3
  3154 0000142C FE06[BB06]              		inc	byte [daycnt2] ; 3
  3155 00001430 E8DB00                  		call	date_verify
  3156 00001433 7261                    		jb	short r_d_ret
  3157                                  		;mov	word [cs:daycnt2], 0
  3158                                  		; 08/08/2023
  3159 00001435 C606[BB06]00            		mov	byte [daycnt2], 0
  3160 0000143A E8A100                  		call	in_bin
  3161 0000143D A0[B806]                		mov	al, [bin_date_time+1]
  3162 00001440 98                      		cbw
  3163 00001441 803E[B706]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3164 00001446 7503                    		jnz	short century_19 ; no
  3165 00001448 83C064                  		add	ax, 100		; add in a century
  3166                                  century_19:				
  3167 0000144B 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3168 0000144E B104                    		mov	cl, 4		; leap year every 4
  3169 00001450 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3170 00001452 88E3                    		mov	bl, ah		; save odd years
  3171 00001454 98                      		cbw			; zero ah
  3172 00001455 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3173                                  					; # of days in leap year blocks
  3174 00001458 F7E1                    		mul	cx
  3175                                  		;mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3176                                  		; 08/08/2023
  3177 0000145A A3[BB06]                		mov	[daycnt2], ax
  3178 0000145D 88D8                    		mov	al, bl		; get odd years	count
  3179 0000145F 98                      		cbw
  3180 00001460 09C0                    		or	ax, ax
  3181 00001462 740B                    		jz	short leap_year
  3182 00001464 B96D01                  		mov	cx, 365		; days in year
  3183 00001467 F7E1                    		mul	cx
  3184                                  		;add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3185                                  		; 08/08/2023
  3186 00001469 0106[BB06]              		add	[daycnt2], ax
  3187 0000146D EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3188                                  					; possibly account for a leap day
  3189                                  ;-----------------------------------------------------------------------------
  3190                                  
  3191                                  leap_year:
  3192 0000146F 803E[B906]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3193 00001474 7604                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3194                                  leap_adjustment:
  3195                                  		;inc	word [cs:daycnt2] ; account for leap day
  3196                                  		; 08/08/2023
  3197 00001476 FF06[BB06]              		inc	word [daycnt2]
  3198                                  no_leap_adjustment:			
  3199 0000147A 8A0E[BA06]              		mov	cl, [bin_date_time+3] ; get days of month
  3200 0000147E 30ED                    		xor	ch, ch
  3201 00001480 49                      		dec	cx		; because of offset from day 1,	not day	0
  3202                                  		;add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3203                                  		; 08/08/2023
  3204 00001481 010E[BB06]              		add	[daycnt2], cx
  3205 00001485 8A0E[B906]              		mov	cl, [bin_date_time+2] ; get month
  3206                                  		; 08/08/2023
  3207                                  		;xor	ch, ch
  3208 00001489 49                      		dec	cx		; january starts at offset 0
  3209                                  		
  3210                                  		; 08/08/2023
  3211                                  		;shl	cx, 1		; word offset
  3212                                  		;;mov	si, month_table
  3213                                  		;add	si, cx
  3214                                  		;; 16/10/2022
  3215                                  		;; ds must be same with cs here, if so..
  3216                                  		;; what for cs: prefixes are used !?)
  3217                                  		;; mov	ax, [cs:si]
  3218                                  		;; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3219                                  		;mov	ax, [si]	; mov ax, [cs:si]
  3220                                  		;			; get #	days in	previous months
  3221                                  		;add	[cs:daycnt2], ax
  3222                                  
  3223                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3224                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1907h
  3225 0000148A B400                    		mov	ah, 0
  3226 0000148C BE[F604]                		mov	si, month_tab
  3227                                  r_d_sum_loop:
  3228 0000148F AC                      		lodsb
  3229 00001490 0106[BB06]              		add	[daycnt2], ax
  3230 00001494 E2F9                    		loop	r_d_sum_loop
  3231                                  r_d_ret:
  3232                                  		;mov	si, [cs:daycnt2]
  3233                                  		; 08/08/2023
  3234 00001496 8B36[BB06]              		mov	si, [daycnt2]
  3235 0000149A 5A                      		pop	dx
  3236 0000149B 59                      		pop	cx
  3237 0000149C 5B                      		pop	bx
  3238 0000149D 58                      		pop	ax
  3239 0000149E C3                      		retn
  3240                                  
  3241                                  ;-----------------------------------------------------------------------------
  3242                                  
  3243                                  r_t_retj:				
  3244 0000149F 31C9                    		xor	cx, cx
  3245 000014A1 31D2                    		xor	dx, dx
  3246 000014A3 EB38                    		jmp	short r_t_ret
  3247                                  
  3248                                  ; =============== S U B	R O U T	I N E ========================================
  3249                                  
  3250                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3251                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3252                                  
  3253                                  read_real_time:	; proc near		
  3254 000014A5 B402                    		mov	ah, 2
  3255 000014A7 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3256                                  					; Return: CH = hours in	BCD
  3257                                  					; CL = minutes in BCD
  3258                                  					; DH = seconds in BCD
  3259 000014A9 72F4                    		jb	short r_t_retj
  3260 000014AB 882E[B706]              		mov	[bin_date_time], ch ; hours
  3261 000014AF 880E[B806]              		mov	[bin_date_time+1], cl ; minutes
  3262 000014B3 8836[B906]              		mov	[bin_date_time+2], dh ; seconds
  3263 000014B7 C606[BA06]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3264 000014BC E89F00                  		call	bcd_verify
  3265 000014BF 72DE                    		jb	short r_t_retj
  3266 000014C1 E88500                  		call	time_verify
  3267 000014C4 72D9                    		jb	short r_t_retj
  3268 000014C6 E81500                  		call	in_bin		; from bcd to bin
  3269 000014C9 8A2E[B706]              		mov	ch, [bin_date_time]
  3270 000014CD 8A0E[B806]              		mov	cl, [bin_date_time+1]
  3271 000014D1 8A36[B906]              		mov	dh, [bin_date_time+2]
  3272 000014D5 8A16[BA06]              		mov	dl, [bin_date_time+3]
  3273                                  		; 16/10/2022
  3274                                  		; 17/09/2022
  3275                                  		; 31/05/2019
  3276 000014D9 FF1E[C106]              		call	far [ttticks] 
  3277                                  		;call	dword ptr ttticks ; note: indirect far call
  3278                                  					; cx:dx	= number of ticks
  3279                                  					; (at 18.2 ticks per sec.)
  3280                                  r_t_ret:				
  3281 000014DD C3                      		retn
  3282                                  
  3283                                  ; =============== S U B	R O U T	I N E =======================================
  3284                                  
  3285                                  ;   in_bin converts bin_date_time values from bcd to bin
  3286                                  
  3287                                  in_bin:		; proc near
  3288 000014DE A0[B706]                		mov	al, [bin_date_time] ; century or hours
  3289 000014E1 E81F00                  		call	bcd_to_bin
  3290 000014E4 A2[B706]                		mov	[bin_date_time], al
  3291 000014E7 A0[B806]                		mov	al, [bin_date_time+1] ; years or minutes
  3292 000014EA E81600                  		call	bcd_to_bin
  3293 000014ED A2[B806]                		mov	[bin_date_time+1], al
  3294 000014F0 A0[B906]                		mov	al, [bin_date_time+2] ; months or seconds
  3295 000014F3 E80D00                  		call	bcd_to_bin
  3296 000014F6 A2[B906]                		mov	[bin_date_time+2], al
  3297 000014F9 A0[BA06]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3298 000014FC E80400                  		call	bcd_to_bin
  3299 000014FF A2[BA06]                		mov	[bin_date_time+3], al
  3300 00001502 C3                      		retn
  3301                                  
  3302                                  ; =============== S U B	R O U T	I N E =======================================
  3303                                  
  3304                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3305                                  ;   a binary representation in al
  3306                                  ;   ah is destroyed
  3307                                  
  3308                                  bcd_to_bin:	; proc near
  3309 00001503 88C4                    		mov	ah, al
  3310 00001505 240F                    		and	al, 0Fh
  3311 00001507 B104                    		mov	cl, 4
  3312 00001509 D2EC                    		shr	ah, cl
  3313 0000150B D50A                    		aad
  3314 0000150D C3                      		retn
  3315                                  
  3316                                  ; =============== S U B	R O U T	I N E ========================================
  3317                                  
  3318                                  ;   date_verify loosely checks bcd date values to be in range
  3319                                  ;   in bin_date_time
  3320                                  
  3321                                  date_verify:	; proc near
  3322 0000150E 803E[B706]20            		cmp	byte [bin_date_time], 20h ; century check
  3323 00001513 7732                    		ja	short date_error
  3324 00001515 740E                    		jz	short century_20 ; jmp in 21th century
  3325 00001517 803E[B706]19            		cmp	byte [bin_date_time], 19h ; century check
  3326                                  		;jb	short date_error
  3327                                  		; 12/12/2022
  3328 0000151C 722A                    		jb	short date_err2
  3329 0000151E 803E[B806]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3330                                  		;jb	short date_error
  3331                                  		; 12/12/2022
  3332 00001523 7223                    		jb	short date_err2
  3333                                  century_20:
  3334 00001525 803E[B806]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3335 0000152A 771B                    		ja	short date_error
  3336 0000152C 803E[B906]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3337 00001531 7714                    		ja	short date_error
  3338 00001533 803E[B906]00            		cmp	byte [bin_date_time+2], 0
  3339                                  		;jbe	short date_error
  3340 00001538 760D                    		jna	short date_error
  3341 0000153A 803E[BA06]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3342 0000153F 7706                    		ja	short date_error
  3343                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3344                                  		;;jbe	short date_error
  3345                                  		;jna	short date_error
  3346                                  		; 12/12/2022
  3347                                  		; cf=0
  3348                                  		;clc
  3349                                  		; 12/12/2022
  3350 00001541 803E[BA06]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3351 00001546 C3                      		retn
  3352                                  ;-----------------------------------------------------------------------------
  3353                                  
  3354                                  date_error:
  3355 00001547 F9                      		stc
  3356                                  date_err2:
  3357 00001548 C3                      		retn
  3358                                  
  3359                                  ; =============== S U B	R O U T	I N E ========================================
  3360                                  
  3361                                  ; time_verify very loosely checks bcd date values to be in range
  3362                                  ; in bin_date_time
  3363                                  
  3364                                  time_verify:	; proc near
  3365 00001549 803E[B706]24            		cmp	byte [bin_date_time], 24h ; hour check
  3366 0000154E 770C                    		ja	short time_error
  3367 00001550 803E[B806]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3368 00001555 7705                    		ja	short time_error
  3369                                  		; 12/12/2022h
  3370                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3371                                  		;ja	short time_error
  3372                                  		;clc
  3373                                  		;retn
  3374                                  		; 12/12/2022
  3375 00001557 803E[B906]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3376                                  time_error:
  3377                                  bv_error:
  3378 0000155C F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3379 0000155D C3                      		retn
  3380                                  
  3381                                  ; ----------------------------------------------------------------------------
  3382                                  
  3383                                  ;time_error:				
  3384                                  		;stc
  3385                                  		;retn
  3386                                  
  3387                                  ; =============== S U B	R O U T	I N E ========================================
  3388                                  
  3389                                  ;   bcd_verify checks values in bin_date_time to be valid
  3390                                  ;   bcd numerals.  carry set if any nibble out of range
  3391                                  
  3392                                  bcd_verify:	; proc near
  3393 0000155E B90400                  		mov	cx, 4		; 4 bytes to check
  3394 00001561 BB[B706]                		mov	bx, bin_date_time
  3395                                  bv_loop:
  3396 00001564 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3397 00001566 88C4                    		mov	ah, al
  3398 00001568 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3399                                  					; is 1's place in range?
  3400 0000156B 3C0A                    		cmp	al, 10
  3401 0000156D 77ED                    		ja	short bv_error	; jmp out of range
  3402 0000156F D0EC                    		shr	ah, 1
  3403 00001571 D0EC                    		shr	ah, 1
  3404 00001573 D0EC                    		shr	ah, 1
  3405 00001575 D0EC                    		shr	ah, 1
  3406 00001577 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3407 0000157A 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3408 0000157D 77DD                    		ja	short bv_error	; jmp out of range
  3409 0000157F 43                      		inc	bx		; next byte
  3410 00001580 49                      		dec	cx
  3411 00001581 75E1                    		jnz	short bv_loop
  3412 00001583 F8                      		clc			; set success flag
  3413 00001584 C3                      		retn
  3414                                  ; ----------------------------------------------------------------------------
  3415                                  
  3416                                  		; 12/12/2022
  3417                                  ;bv_error:
  3418                                  		;stc			; set error flag
  3419                                  		;retn
  3420                                  
  3421                                  ; ----------------------------------------------------------------------------
  3422                                  
  3423                                  endk09:
  3424                                  
  3425                                  ; ----------------------------------------------------------------------------
  3426                                  
  3427                                  ;------------------------------------------------------------------------
  3428                                  ;									:
  3429                                  ;	System initialization						:
  3430                                  ;									:
  3431                                  ;	The entry conditions are established by the bootstrap		:
  3432                                  ;	loader and are considered unknown. The following jobs		:
  3433                                  ;	will be performed by this module:				:
  3434                                  ;									:
  3435                                  ;	1.	All device initialization is performed			:
  3436                                  ;	2.	A local stack is set up and DS:SI are set		:
  3437                                  ;		to point to an initialization table. Then		:
  3438                                  ;		an inter-segment call is made to the first		:
  3439                                  ;		byte of the dos 					:
  3440                                  ;	3.	Once the dos returns from this call the ds		:
  3441                                  ;		register has been set up to point to the start		:
  3442                                  ;		of free memory. The initialization will then		:
  3443                                  ;		load the command program into this area 		:
  3444                                  ;		beginning at 100 hex and transfer control to		:
  3445                                  ;		this program.						:
  3446                                  ;									:
  3447                                  ;------------------------------------------------------------------------
  3448                                  
  3449                                  ; 01/10/2022
  3450                                  ; 08/01/2018 - Retro DOS v4.0
  3451                                  
  3452                                  ; drvfat must be the first location of freeable space!
  3453                                  
  3454 00001585 90                      align 2
  3455                                  		;db 90h
  3456                                  
  3457                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3458                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3459                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3460                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3461                                  	
  3462 00001586 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3463                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3464                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3465                                  ;doscnt:	dw 0			; how many sectors to read
  3466 00001588 00                      fbigfat:	db 0			; flags	for drive
  3467                                  ;fatloc:	dw 0			; seg addr of fat sector
  3468 00001589 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3469 0000158B 80                      rom_drv_num:	db 80h			; rom drive number
  3470                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3471                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3472                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3473                                  
  3474                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3475                                  ; call to determine drive parameters.
  3476                                  
  3477 0000158C 02                      num_heads:	db 2			; number of heads returned by rom
  3478                                  		;db 0	; 08/08/2023
  3479 0000158D 09                      sec_trk:	db 9			; sec/trk returned by rom
  3480 0000158E 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3481                                  		;db 0	; 08/08/2023
  3482 0000158F 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3483                                  
  3484                                  ; ----------------------------------------------------------------------------
  3485                                  
  3486 00001590 0002000140000000        disktable:	dw 512,	0100h, 64, 0	; warning !!! old values
  3487 00001598 0008010270000000        		dw 2048, 0201h, 112, 0
  3488 000015A0 0020020400010000        		dw 8192, 0402h, 256, 0
  3489 000015A8 A87F030800020000        		dw 32680, 0803h, 512, 0	; warning !!! old values
  3490 000015B0 FFFF041000040000        		dw 65535, 1004h, 1024, 0
  3491                                  					; default disktable under
  3492                                  					; the assumption of total fat size <= 128 kb,
  3493                                  					; and the maximum size of fat entry = 16 bit.
  3494                                  		; 08/08/2023
  3495                                  		; disktable.totalsectors: resd 1
  3496                                  		; disktable.shiftcount:   resb 1
  3497                                  		; disktable.secperclus:   resb 1
  3498                                  		; disktable.rdirentries:  resw 1
  3499                                  		; disktable.bigflag:      resw 1
  3500 000015B8 0000A87F0308000200-     disktable2:	dw 0, 32680, 0803h, 512, 0 ; for compatibility.
  3500 000015C1 00                 
  3501                                  					   ; (32680 sectors, 16340 KB)
  3502 000015C2 040000000204000240-     		dw 4, 0, 0402h, 512, 40h   ; covers upto 134 mb media.
  3502 000015CB 00                 
  3503                                  					   ; fbig = 40h  ; (40000h sectors = 128 MB)
  3504 000015CC 080000000308000240-     		dw 8, 0, 0803h, 512, 40h   ; upto 268 mb ; (80000h sectors = 256 MB)
  3504 000015D5 00                 
  3505 000015D6 100000000410000240-     		dw 16, 0, 1004h, 512, 40h  ; upto 536 mb ; (100000h sectors = 512 MB)
  3505 000015DF 00                 
  3506 000015E0 200000000520000240-     		dw 32, 0, 2005h, 512, 40h  ; upto 1072 mb ; (200000h sectors = 1024 MB)
  3506 000015E9 00                 
  3507 000015EA 400000000640000240-     		dw 64, 0, 4006h, 512, 40h  ; upto 2144 mb ; (400000h sectors = 2048 MB)
  3507 000015F3 00                 
  3508 000015F4 800000000780000240-     		dw 128,	0, 8007h, 512, 40h ; upto 4288 mb ; (800000h sectors = 4096 MB)
  3508 000015FD 00                 
  3509                                  					
  3510                                  ; ----------------------------------------------------------------------------
  3511                                  
  3512                                  ;******************************************************
  3513                                  ;variables for mini disk initialization
  3514                                  ;******************************************************
  3515                                  
  3516                                  ; 01/10/2022
  3517                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3518                                  
  3519 000015FE 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3520 000015FF 00                      hnum:		db 0			; real number of hardfiles
  3521 00001600 [7F06]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3522 00001602 [B808]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3523                                  					; of bds table. needed to figure out
  3524                                  					; the dosdatasg address.
  3525 00001604 0000                    mini_hdlim:	dw 0			
  3526 00001606 0000                    mini_seclim:	dw 0
  3527                                  
  3528                                  ;end of mini disk init variables **********************
  3529                                  
  3530                                  ; ----------------------------------------------------------------------------
  3531                                  			
  3532 00001608 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3533                                  
  3534                                  ; 13/12/2022
  3535                                  %if 0
  3536                                  
  3537                                  ;align 2
  3538                                  		db  90h	
  3539                                  
  3540                                  ; the following are the recommended bpbs for the media that we know of so far.
  3541                                  
  3542                                  ;struc bpbx
  3543                                  ;   resw 1 ; 512
  3544                                  ;   resb 1
  3545                                  ;   resw 1 ; 1
  3546                                  ;   resb 1 ; 2
  3547                                  ;   resw 1
  3548                                  ;   resw 1
  3549                                  ;   resb 1
  3550                                  ;   resw 1
  3551                                  ;   resw 1
  3552                                  ;   resw 1 ; 2
  3553                                  ;   resw 1
  3554                                  ;   resw 1 ; hidden sector high
  3555                                  ;   resd 1 ; extended total sectors
  3556                                  ;.size:
  3557                                  ;endstruc
  3558                                  
  3559                                  ; 08/01/2019 - Retro DOS v4.0
  3560                                  
  3561                                  ; 20/04/2019
  3562                                  
  3563                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3564                                  
  3565                                  ; 09/12/2022
  3566                                  BPB48T:
  3567                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3568                                  		; 48 tpi diskettes	;
  3569                                  		dw	512		; physical sector size in bytes
  3570                                  		db	2		; sectors/allocation unit
  3571                                  		dw	1		; reserved sectors for dos
  3572                                  		db	2		; number of allocation tables
  3573                                  		dw	112		; number of directory entries
  3574                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3575                                  		db	0FDh		; media descriptor
  3576                                  		dw	2		; number of fat sectors
  3577                                  		dw	9		; sectors per track
  3578                                  		dw	2		; heads
  3579                                  		dw	0		; hidden sector count (low word)
  3580                                  		dw	0		; hidden sector (high)
  3581                                  		dw	0		; number of sectors (low)
  3582                                  		dw	0		; number of sectors (high)					
  3583                                  
  3584                                  		db 90h
  3585                                  ;align 2
  3586                                  BPB96T:
  3587                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3588                                  		; 96 tpi diskettes	;
  3589                                  		dw	512		; physical sector size in bytes
  3590                                  		db	1		; sectors/allocation unit
  3591                                  		dw	1		; reserved sectors for dos
  3592                                  		db	2		; number of allocation tables
  3593                                  		dw	224		; number of directory entries
  3594                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3595                                  		db	0F9h		; media descriptor
  3596                                  		dw	7		; number of fat sectors
  3597                                  		dw	15		; sectors per track
  3598                                  		dw	2		; heads
  3599                                  		dw	0		; hidden sector count (low word)
  3600                                  		dw	0		; hidden sector (high)
  3601                                  		dw	0		; number of sectors (low)
  3602                                  		dw	0		; number of sectors (high)
  3603                                  
  3604                                  		db 90h
  3605                                  ;align 2
  3606                                  BPB35:
  3607                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3608                                  		; 3.5" diskettes - 720 KB ;		
  3609                                  		dw	512		; physical sector size in bytes
  3610                                  		db	2		; sectors/allocation unit
  3611                                  		dw	1		; reserved sectors for dos
  3612                                  		db	2		; number of allocation tables
  3613                                  		dw	112		; number of directory entries
  3614                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3615                                  		db	0F9h		; media descriptor
  3616                                  		dw	3		; number of fat sectors
  3617                                  		dw	9		; sectors per track
  3618                                  		dw	2		; heads
  3619                                  		dw	0		; hidden sector count (low word)
  3620                                  		dw	0		; hidden sector (high)
  3621                                  		dw	0		; number of sectors (low)
  3622                                  		dw	0		; number of sectors (high)
  3623                                  
  3624                                  		db 90h
  3625                                  ;align 2
  3626                                  
  3627                                  ;align 2
  3628                                  ;BPB144:
  3629                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3630                                  ;
  3631                                  ;		dw	512		; physical sector size in bytes
  3632                                  ;		db	1		; sectors/allocation unit
  3633                                  ;		dw	1		; reserved sectors for dos
  3634                                  ;		db	2		; number of allocation tables
  3635                                  ;		dw	224		; number of directory entries
  3636                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3637                                  ;		db	0F0h		; media descriptor
  3638                                  ;		dw	9		; number of fat sectors
  3639                                  ;		dw	18		; sectors per track
  3640                                  ;		dw	2		; heads
  3641                                  ;		dw	0		; hidden sector count (low word)
  3642                                  ;		dw	0		; hidden sector (high)
  3643                                  ;		dw	0		; number of sectors (low)
  3644                                  ;		dw	0		; number of sectors (high)
  3645                                  ;
  3646                                  ;		db 90h
  3647                                  ;align 2
  3648                                  
  3649                                  BPB288:
  3650                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3651                                  		; 3.5" diskettes - 2.88 MB ;	 
  3652                                  		dw	512		; physical sector size in bytes
  3653                                  		db	2		; sectors/allocation unit
  3654                                  		dw	1		; reserved sectors for dos
  3655                                  		db	2		; number of allocation tables
  3656                                  		dw	240		; number of directory entries
  3657                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3658                                  		db	0F0h		; media descriptor
  3659                                  		dw	3		; number of fat sectors
  3660                                  		dw	9		; sectors per track
  3661                                  		dw	2		; heads
  3662                                  		dw	0		; hidden sector count (low word)
  3663                                  		dw	0		; hidden sector (high)
  3664                                  		dw	0		; number of sectors (low)
  3665                                  		dw	0		; number of sectors (high)
  3666                                  
  3667                                  		db 90h			;
  3668                                  ;align 2
  3669                                  
  3670                                  %endif
  3671                                  
  3672                                  ; ----------------------------------------------------------------------------
  3673                                  					; align	2
  3674                                  ; 09/12/2022
  3675                                  %if 0
  3676                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3677                                  		dw bpb96t		; 96tpi	drives
  3678                                  		dw bpb35		; 3.5" drives
  3679                                  		dw bpb35		; unused 8" diskette
  3680                                  		dw bpb35		; unused 8" diskette
  3681                                  		dw bpb35		; used for hard	disk
  3682                                  		dw bpb35		; used for tape	drive
  3683                                  		dw bpb35		; FFOTHER
  3684                                  		dw bpb35		; ERIMO
  3685                                  		dw bpb288		; 2.88MB drive
  3686                                  		;
  3687                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3688                                  %endif
  3689                                  
  3690                                  ; 13/12/2022
  3691                                  %if 0
  3692                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3693                                  		dw BPB96T		; 96tpi	drives
  3694                                  		dw BPB35		; 3.5" drives
  3695                                  		dw BPB35		; unused 8" diskette
  3696                                  		dw BPB35		; unused 8" diskette
  3697                                  		dw BPB35		; used for hard	disk
  3698                                  		dw BPB35		; used for tape	drive
  3699                                  		dw BPB35		; FFOTHER
  3700                                  		dw BPB35		; ERIMO
  3701                                  		dw BPB288		; 2.88MB drive
  3702                                  		;
  3703                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3704                                  
  3705                                  %endif
  3706                                  
  3707                                  ; ----------------------------------------------------------------------------
  3708                                  
  3709                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3710                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3711                                  ;	  will not yet be moved to its final resting place, so we know
  3712                                  ;	  it'll be low.
  3713                                  ;
  3714                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3715                                  ;	  the function you want to call in Bios_Code. This routine will
  3716                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3717                                  ;	  will get executed when the utility function finishes. It will
  3718                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3719                                  ;	  and a retf
  3720                                  
  3721                                  ; 16/10/2022
  3722                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3723                                  ; 09/12/2022
  3724                                  BC_RETF equ bc_retf
  3725                                  
  3726                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3727                                  					; 2C7h:0C8h = 70h:2638h
  3728 00001611 [CC00]                  		dw BC_RETF
  3729                                  
  3730                                  ; ----------------------------------------------------------------------------
  3731                                  
  3732                                  call_bios_code:	; proc far			
  3733 00001613 2EFF36[1116]            		push	word [cs:addr_of_bcretf] 
  3734                                  					; set up near return to far return
  3735 00001618 2EFF36[BF06]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3736 0000161D 55                      		push	bp		; save offset of utility function
  3737 0000161E CB                      		retf			; far jump to (DOS)BIOS code
  3738                                  
  3739                                  ; ----------------------------------------------------------------------------
  3740                                  		
  3741                                  		; 20/12/2022
  3742                                  ;flp_drvs	db 0			
  3743                                  
  3744                                  ; ----------------------------------------------------------------------------
  3745                                  
  3746                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3747                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3748                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3749                                  
  3750                                  ;-----------------------------------------------------------------------------
  3751                                  ; entry point from boot sector
  3752                                  ;-----------------------------------------------------------------------------
  3753                                  
  3754                                  init:		; 27/12/2018
  3755                                  		; MSDOS 6.0 (MSINIT.ASM)
  3756                                  		;=============================================================
  3757                                  		;
  3758                                  		; entry from boot sector. the register contents are:
  3759                                  		;
  3760                                  		;   dl = int 13 drive number we booted from
  3761                                  		;   ch = media byte
  3762                                  		;   bx = first data sector on disk.
  3763                                  		;   ax = first data sector (high)
  3764                                  		;   di = sectors/fat for the boot media.
  3765                                  
  3766                                  		; 07/04/2018
  3767                                  		;=============================================================
  3768                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3769                                                  ; DL = [bsDriveNumber]
  3770                                  		; DH = [bsMedia]
  3771                                  		; AX = [bsSectors] ; Total sectors
  3772                                  		; DS = 0, SS = 0
  3773                                  		; BP = 7C00h
  3774                                  	
  3775                                  ; 20/12/2022
  3776                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3777                                  %if 0	
  3778                                  		cli
  3779                                  
  3780                                  		push	ax
  3781                                  		xor	ax, ax
  3782                                  		mov	ds, ax
  3783                                  		pop	ax
  3784                                  %endif
  3785                                  
  3786                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3787                                  
  3788                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3789                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3790                                  
  3791                                  ;-----------------------------------------------------------------------------
  3792                                  ; initialization - stage 1
  3793                                  ;-----------------------------------------------------------------------------
  3794                                  ; 02/06/2018 - Retro DOS v3.0
  3795                                  		
  3796                                  		; 21/12/2022
  3797                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3798                                  		;mov	bx, 60h
  3799                                  		;mov	es, bx
  3800                                  		;mov	si, bp
  3801                                  		;sub	di, di
  3802                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3803                                  		;;mov	cl, 35
  3804                                  		;rep	movsw
  3805                                  
  3806 0000161F 0E                      		push	cs
  3807 00001620 1F                      		pop	ds
  3808                                  
  3809                                  		; 20/03/2019 - Retro DOS v4.0
  3810                                  		;cli		; turn interrupts off while manupulating stack
  3811                                  		;mov	ss, cx	; set stack segment register
  3812 00001621 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3813                                  		;sti		; turn interrupts on
  3814                                  
  3815                                  		; 27/03/2018
  3816                                  		;mov	cx, KERNEL_SIZE	; words !
  3817                                  
  3818                                  		; 20/03/2019
  3819 00001624 B90080                  		mov	cx, 32768 ; 65536 bytes
  3820                                  
  3821                                  		; 21/12/2022
  3822                                  		; 07/04/2018
  3823 00001627 BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3824                                  		;mov	bl, KERNEL_SEGMENT
  3825 0000162A 8EC3                    		mov	es, bx
  3826 0000162C 31FF                    		xor	di, di
  3827 0000162E 89FE                    		mov	si, di
  3828                                  		
  3829                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3830                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3831 00001630 F3A5                    		rep	movsw
  3832                                  
  3833                                  		; 20/03/2019 - Retro DOS v4.0
  3834 00001632 53                      		push	bx
  3835 00001633 68[3716]                		push	init0
  3836 00001636 CB                      		retf
  3837                                  init0:	
  3838                                  		; 20/12/2022
  3839                                  		; (combined kernel file > 64KB)
  3840                                  
  3841                                  		; 20/03/2019
  3842 00001637 B520                    		mov	ch, 20h
  3843 00001639 8ED9                    		mov	ds, cx ; 2000h
  3844                                  		;mov	cx, 1070h
  3845 0000163B B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3846 0000163E 8EC1                    		mov	es, cx
  3847                                  		
  3848                                  		; 21/12/2022
  3849                                  		KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3850                                  
  3851 00001640 B9[0A5D]                		mov	cx, KERNEL_SIZE - 32768
  3852                                  		;xor	si, si
  3853                                  		;xor	di, di
  3854 00001643 F3A5                    		rep	movsw
  3855                                  
  3856                                  		; 17/06/2018 
  3857 00001645 8EDB                    		mov	ds, bx
  3858                                  		; 21/03/2019
  3859 00001647 8EC3                    		mov	es, bx
  3860                                  ;init0:
  3861                                  ;		;push	es
  3862                                  ;		push	bx ; 20/03/2019
  3863                                  ;		push	init1 ; 07/04/2018
  3864                                  ;		retf	; jump to 0070h:init1
  3865                                  ;init:
  3866                                  init1:
  3867                                  		; 20/12/2022
  3868                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3869                                  		; for full MSDOS compatibility.
  3870                                  
  3871 00001649 8EC1                    		mov	es, cx ; 0
  3872 0000164B 8ED9                    		mov	ds, cx ; 0
  3873                                  
  3874 0000164D B82205                  		mov	ax, SEC9
  3875                                  
  3876                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3877 00001650 B378                    		mov	bl, 1Eh*4
  3878                                  				; INT 1Eh points to diskette parms table
  3879                                  
  3880                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3881                                   		; (do not move the DPT if is not original ROMBIOS table)
  3882                                  
  3883                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3884                                  		;;jnz	short mov_dpt
  3885                                  
  3886                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3887                                  		;je	short dont_mov_dpt
  3888                                  
  3889                                  		;mov	si, [bx] ; [1Eh*4]		
  3890                                  ;mov_dpt:
  3891                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3892 00001652 C537                    		lds	si, [bx]
  3893 00001654 89C7                    		mov	di, ax  ; SEC9
  3894 00001656 B10B                    		mov	cl, 11
  3895                                  		;cld
  3896 00001658 F3A4                    		rep	movsb
  3897                                  
  3898                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3899 0000165A 8ED9                    		mov	ds, cx ; 0
  3900 0000165C 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3901 0000165E 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3902                                  ;dont_mov_dpt:
  3903                                  
  3904                                  ; 20/12/2022 - Retro DOS v4.0
  3905                                  %if 0
  3906                                  		; 27/12/2018 - Retro DOS v4.0
  3907                                  		; 'Starting MS-DOS...' message
  3908                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3909                                  		; (0070h:96A3h)
  3910                                  
  3911                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3912                                  		mov     ah, 0Eh
  3913                                  		;bh = 0
  3914                                          	mov     bl, 7		; "normal" attribute and page
  3915                                  startmsg_nxt_chr:  
  3916                                  		lodsb
  3917                                  		or	al, al
  3918                                          	jz	short startmsg_ok
  3919                                         
  3920                                  		int	10h		; video write
  3921                                          	jmp	short startmsg_nxt_chr
  3922                                  
  3923                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3924                                  
  3925                                  startmsg_ok:
  3926                                  
  3927                                  %endif
  3928                                  
  3929                                  ;-----------------------------------------------------------------------------
  3930                                  ; initialization - stage 2
  3931                                  ;-----------------------------------------------------------------------------
  3932                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3933                                  
  3934                                  
  3935                                  ; 19/03/2018
  3936                                  ; Retro DOS v2.0 (24/02/2018)
  3937                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3938                                  
  3939                                  ;------------------------------------------------------------------------
  3940                                  ;									:
  3941                                  ;	System initialization						:
  3942                                  ;									:
  3943                                  ;	The entry conditions are established by the bootstrap		:
  3944                                  ;	loader and are considered unknown. The following jobs		:
  3945                                  ;	will be performed by this module:				:
  3946                                  ;									:
  3947                                  ;	1.	All device initialization is performed			:
  3948                                  ;	2.	A local stack is set up and DS:SI are set		:
  3949                                  ;		to point to an initialization table. Then		:
  3950                                  ;		an inter-segment call is made to the first		:
  3951                                  ;		byte of the dos 					:
  3952                                  ;	3.	Once the dos returns from this call the ds		:
  3953                                  ;		register has been set up to point to the start		:
  3954                                  ;		of free memory. The initialization will then		:
  3955                                  ;		load the command program into this area 		:
  3956                                  ;		beginning at 100 hex and transfer control to		:
  3957                                  ;		this program.						:
  3958                                  ;									:
  3959                                  ;------------------------------------------------------------------------
  3960                                  		
  3961                                  		; 20/12/2022
  3962                                  		; ----------------------
  3963                                  		; Registers
  3964                                  		; ----------------------
  3965                                  		; DL = [bsDriveNumber]
  3966                                  		; DH = [bsMedia]
  3967                                  		; DS = 0, ES = 0, SS = 0
  3968                                  		; BP = 7C00h
  3969                                  		; SP = 700h
  3970                                  		; ----------------------
  3971                                  		; CX = 0				
  3972                                  
  3973                                  ; 02/10/2022 - 20/12/2022
  3974                                  ; ------------------------------------------------------------------------------
  3975                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3976                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3977                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3978                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3979                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3980                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3981                                  ; ------------------------------------------------------------------------------
  3982                                  
  3983                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3984                                  ;
  3985                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3986                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3987                                  ;;	data sector of the bios.
  3988                                  ;
  3989                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3990                                  ;		mov	[cs:bios_l], bx
  3991                                  
  3992                                  ; with the following information from msload, we don't need the
  3993                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3994                                  ;     limitation of msbio.com file.
  3995                                  
  3996                                  		; 21/12/2022
  3997 00001661 FA                      		cli
  3998                                  
  3999 00001662 0E                      		push	cs		; Save a peck of interrupt vectors...
  4000 00001663 07                      		pop	es
  4001                                  		;push	cx
  4002                                  		;push	di
  4003                                  		; 20/12/2022
  4004 00001664 B105                    		mov	cl, 5
  4005                                  		;mov	cx, 5		; NUMROMVECTORS
  4006                                  					; no. of rom vectors to	be saved
  4007                                  		;mov	si, offset RomVectors ; point to list of int vectors
  4008 00001666 BE[0001]                		mov	si, RomVectors
  4009                                  next_int_:		
  4010 00001669 2E                      		cs	; 16/10/2022
  4011 0000166A AC                      		lodsb		
  4012                                  		;lods	byte ptr cs:[si] ; cs lodsb
  4013 0000166B 98                      		cbw			; ax = interrupt number
  4014 0000166C D1E0                    		shl	ax, 1
  4015 0000166E D1E0                    		shl	ax, 1		; int no * 4
  4016 00001670 89C7                    		mov	di, ax		; interrupt vector address
  4017 00001672 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  4018                                  					; saving address in di
  4019                                  		;lodsw			; movsw
  4020                                  		;stosw
  4021                                  		;lodsw			; movsw
  4022                                  		;stosw			; save the vector
  4023                                  		; 20/12/2022
  4024 00001674 A5                      		movsw
  4025 00001675 A5                      		movsw		
  4026                                  
  4027 00001676 87F7                    		xchg	si, di
  4028 00001678 E2EF                    		loop	next_int_
  4029                                  		
  4030                                  		;pop	di
  4031                                  		;pop	cx
  4032                                  
  4033                                  ; we need to save int13 in two places in case we are running on an at.
  4034                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  4035                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  4036                                  ; rom int13 routine, we must have that rom address also stored away.
  4037                                  
  4038                                  		; 20/12/2022
  4039                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  4040                                  		;mov	[cs:Orig13], ax
  4041                                  		;mov	ax, [cs:Old13+2]
  4042                                  		;mov	[cs:Orig13+2], ax
  4043                                  
  4044                                  		; 16/10/2022
  4045 0000167A C7064C00[4F07]          		mov	word [13h*4], block13
  4046                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  4047                                  					; set up int 13	for new	action
  4048 00001680 8C0E4E00                		mov	[13h*4+2], cs
  4049                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  4050 00001684 C7065400[FE07]          		mov	word [15h*4], Int15
  4051                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  4052                                  					; set up int 15	for new	action
  4053 0000168A 8C0E5600                		mov	[15h*4+2], cs
  4054                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  4055 0000168E C7066400[BE07]          		mov	word [19h*4], int19
  4056                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  4057                                  					; set up int 19	for new	action
  4058 00001694 8C0E6600                		mov	[19h*4+2], cs
  4059                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  4060                                  
  4061                                  		; 20/12/2022
  4062 00001698 0E                      		push	cs
  4063 00001699 1F                      		pop	ds
  4064                                  		
  4065 0000169A A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  4066 0000169D A3[B400]                		mov	[Orig13], ax
  4067 000016A0 A1[0801]                		mov	ax, [Old13+2]
  4068 000016A3 A3[B600]                		mov	[Orig13+2], ax
  4069                                  					; ;
  4070 000016A6 FB                      		sti
  4071 000016A7 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  4072                                  					; Return: AX = equipment flag bits
  4073                                  
  4074                                  ; we have to support a system that does not have any diskette
  4075                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  4076                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  4077                                  ; otherwise, the system has only hardfiles.
  4078                                  ;
  4079                                  ; important thing is that still, for compatibility reason, the drive letter
  4080                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  4081                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  4082                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  4083                                  ; drives will get "invalid drive letter ..." message. we are going to
  4084                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  4085                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  4086                                  
  4087                                  ; check the register returned by the equipment determination interrupt
  4088                                  ; we have to handle the case of no diskettes in the system by faking
  4089                                  ; two dummy drives.
  4090                                  ;
  4091                                  ; if the register indicates that we do have floppy drives we don't need
  4092                                  ; to do anything special.
  4093                                  ;
  4094                                  ; if the register indicates that we don't have any floppy drives then
  4095                                  ; what we need to do is set the fakefloppydrv variable, change the
  4096                                  ; register to say that we do have floppy drives and then go to execute
  4097                                  ; the code which starts at notsingle. this is because we can skip the
  4098                                  ; code given below which tries to find if there are one or two drives
  4099                                  ; since we already know about this.
  4100                                  
  4101                                  		; 06/05/2019 - Retro DOS v4.0
  4102 000016A9 88C1                    		mov	cl, al
  4103                                  
  4104                                  		; 12/12/2022
  4105 000016AB A801                    		test	al, 1
  4106                                  		;test	ax, 1		; floppy drives	present	?
  4107 000016AD 751F                    		jnz	short normalfloppydrv ;	yes.
  4108                                  
  4109                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  4110                                  ; whether it is an old ROM BIOS or a new one
  4111                                  ;
  4112                                  ; WARNING !!!
  4113                                  ;
  4114                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  4115                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;push	ax
  4119                                  		;push	bx
  4120                                  		;push	cx
  4121 000016AF 52                      		push	dx
  4122                                  		;push	di
  4123 000016B0 06                      		push	es
  4124 000016B1 B408                    		mov	ah, 8
  4125 000016B3 B200                    		mov	dl, 0
  4126 000016B5 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4127                                  					; DL = drive number
  4128                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4129                                  					; DL = number of consecutive drives
  4130                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4131 000016B7 7202                    		jc	short _gdskp_error
  4132                                  		;;mov	[cs:flp_drvs], dl
  4133                                  		; 20/12/2022
  4134                                  		; ds = cs
  4135                                  		;mov	[flp_drvs], dl
  4136 000016B9 88D1                    		mov	cl, dl
  4137                                  _gdskp_error:	
  4138                                  		; 20/12/2022			
  4139 000016BB 07                      		pop	es
  4140                                  		;pop	di
  4141 000016BC 5A                      		pop	dx
  4142                                  		;pop	cx
  4143                                  		;pop	bx
  4144                                  		;pop	ax
  4145                                  		
  4146 000016BD 720F                    		jc	short normalfloppydrv
  4147                                  					; if error it is an old ROM BIOS
  4148                                  					; so, lets assume that ROM BIOS lied
  4149                                  		; 20/12/2022
  4150                                  		; ds = cs
  4151                                  		;cmp	byte [flp_drvs], 0
  4152                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4153                                  		;jz	short _set_fake_flpdrv
  4154                                  		;;mov	al, [cs:flp_drvs]
  4155                                  		;mov	al, [flp_drvs]
  4156                                  		;;dec	al		; make it zero based
  4157                                  		;; 18/12/2022
  4158                                  		;dec	ax
  4159                                  		;jmp	short got_num_flp_drvs
  4160                                  		
  4161                                  		; 20/12/2022
  4162 000016BF 08C9                    		or	cl, cl ; [flp_drvs]
  4163 000016C1 7403                    		jz	short _set_fake_flpdrv		
  4164 000016C3 49                      		dec	cx	
  4165 000016C4 EB0C                    		jmp	short got_num_flp_drvs
  4166                                  ; ----------------------------------------------------------------------------
  4167                                  
  4168                                  _set_fake_flpdrv:
  4169                                  		;20/12/2022
  4170                                  		; ds = cs
  4171 000016C6 FEC1                    		inc	cl	; cl = 1
  4172 000016C8 880E[8F15]              		mov	[fakefloppydrv], cl ; 1
  4173                                  		;mov	byte [fakefloppydrv], 1		
  4174                                  		;;mov	byte [cs:fakefloppydrv], 1
  4175                                  					; we don't have any floppy drives.
  4176                                  		; 20/12/2022
  4177                                  		;mov	ax, 1
  4178 000016CC EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4179                                  ; ----------------------------------------------------------------------------
  4180                                  
  4181                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4182                                  		; 20/12/2022
  4183                                  		;rol	al, 1		; there	exist floppy drives.
  4184                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4185 000016CE D0C1                    		rol	cl, 1
  4186 000016D0 D0C1                    		rol	cl, 1
  4187                                  got_num_flp_drvs:			
  4188                                  		;;and	ax, 3		; only look at bits 0 &	1
  4189                                  		; 18/12/2022
  4190                                  		;and	al, 3
  4191                                  		; 20/12/2022
  4192 000016D2 80E103                  		and	cl, 3
  4193 000016D5 7505                    		jnz	short notsingle	; zero means single drive system
  4194                                  		; 20/12/2022
  4195 000016D7 41                      		inc	cx
  4196                                  		;inc	ax		; pretend it's a two drive system
  4197                                  settwodrive:				; set this to two fakedrives
  4198                                  		; 20/12/2022
  4199                                  		; ds = cs
  4200 000016D8 FE06[7800]              		inc	byte [single]
  4201                                  		;inc	byte [cs:single] ; remember this
  4202                                  notsingle:	
  4203                                  		; 20/12/2022			
  4204                                  		;inc	ax		; ax has number	of drives, 2-4
  4205                                  		;			; is also 0 indexed boot drive if we
  4206                                  		;			; booted off hard file
  4207                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4208                                  		; 20/12/2022
  4209 000016DC FEC1                    		inc	cl	; cl >= 2
  4210                                  
  4211                                  ; 16/10/2022
  4212                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4213                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4214                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4215                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4216                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4217                                  SEC9	EQU	522h	; address of disk parameters
  4218                                  CHROUT	EQU	29h
  4219                                  LSTDRV	EQU     504h
  4220                                  
  4221                                  ; determine whether we booted from floppy or hard disk...
  4222                                  
  4223                                  		; 20/12/2022
  4224 000016DE 88C8                    		mov	al, cl	; 26/05/2019
  4225                                  
  4226 000016E0 F6C280                  		test	dl, 80h		; boot from floppy ?
  4227 000016E3 7502                    		jnz	short gothrd	; no.
  4228 000016E5 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4229                                  gothrd:					
  4230                                  
  4231                                  ; MSDOS 6.0
  4232                                  ;   ax = 0-based drive we booted from
  4233                                  ;   bios_l, bios_h set.
  4234                                  ;   cl = number of floppies including fake one
  4235                                  ;   ch = media byte
  4236                                  
  4237                                  ; Retro DOS 4.0 - 27/12/2018 
  4238                                  ;  (from Retro DOS v2.0 boot sector)
  4239                                  ;   dl = int 13 drive number we booted from
  4240                                  ;   dh = media byte
  4241                                  
  4242                                  		; 20/12/2022
  4243 000016E7 88F5                    		mov	ch, dh		; 01/07/2018
  4244                                  
  4245                                  		; cl = number of floppies
  4246                                  		; ch = media byte
  4247                                  
  4248                                  		; set up local stack
  4249                                  
  4250                                  		; 20/12/2022
  4251                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4252                                  					; bios_l, bios_h set.
  4253                                  					; cl = number of floppies including fake one
  4254                                  					; ch = media byte
  4255                                  		; 20/12/2022
  4256                                  		; es = ds = cs
  4257                                  		; ss = 0
  4258                                  		; sp = 700h
  4259                                  
  4260                                  		; 20/12/2022
  4261                                  		;cli
  4262                                  		;mov	ss, dx		; set stack segment and stack pointer
  4263                                  		;mov	sp, 700h
  4264                                  		;sti
  4265                                  
  4266 000016E9 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4267                                  		
  4268 000016EA 88EC                    		mov	ah, ch		; FAT ID to AH
  4269 000016EC 50                      		push	ax ; (**)	; save boot drive number and media byte
  4270                                  		
  4271                                  ; let model_byte, secondary_model_byte be set here!!!
  4272                                  
  4273 000016ED B4C0                    		mov	ah, 0C0h
  4274 000016EF CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4275 000016F1 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4276 000016F3 80FC00                  		cmp	ah, 0
  4277 000016F6 7510                    		jnz	short no_rom_system_conf
  4278                                  
  4279                                  ;		; 20/12/2022
  4280                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4281                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4282                                  ;
  4283                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4284                                  ;
  4285                                  ;		on return:
  4286                                  ;		CF = 0 if successful
  4287                                  ;		   = 1 if error
  4288                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4289                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4290                                  ;
  4291                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4292                                  ;
  4293                                  ;		Offset Size	     Description
  4294                                  ;
  4295                                  ;		  00   word   length of descriptor (8 minimum)
  4296                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4297                                  ;		  03   byte   secondary model byte
  4298                                  ;		  04   byte   BIOS revision level (zero based)
  4299                                  ;		  05   byte   feature information, see below
  4300                                  ;		  06   dword  reserved
  4301                                  
  4302                                  		; 20/12/2022
  4303                                  		; ds = cs
  4304 000016F8 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4305 000016FC A2[3606]                		mov	[model_byte], al
  4306                                  		;mov	[cs:model_byte], al
  4307                                  					; get/save model byte
  4308 000016FF 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4309 00001703 A2[3706]                		mov	[secondary_model_byte], al
  4310                                  		;mov	[cs:secondary_model_byte], al
  4311                                  					; get/save secondary model byte
  4312 00001706 EB0C                    		jmp	short turn_timer_on
  4313                                  ;-----------------------------------------------------------------------------
  4314                                  
  4315                                  no_rom_system_conf:			
  4316 00001708 BEFFFF                  		mov	si, 0FFFFh
  4317 0000170B 8EC6                    		mov	es, si
  4318                                  		; 20/12/2022
  4319 0000170D 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4320 00001711 A2[3606]                		mov	[model_byte], al
  4321                                  		;mov	[cs:model_byte], al ; save model byte
  4322                                  turn_timer_on:				
  4323 00001714 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4324 00001716 E620                    		out	20h, al		; Interrupt controller,	8259A.
  4325                                  					; AKPORT
  4326                                  
  4327                                  ; some olivetti m24 machines have an 8530 serial communications
  4328                                  ; chip installed at io address 50h and 52h. if we're running
  4329                                  ; on one of those, we must inhibit the normal aux port initialization
  4330                                  
  4331                                  		; 20/12/2022
  4332                                  		; ds = cs
  4333 00001718 803E[3606]00            		cmp	byte [model_byte], 0
  4334                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4335 0000171D 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4336                                  					; (except olivetti m24)
  4337 0000171F E466                    		in	al, 66h		; is 8530 installed?
  4338 00001721 A820                    		test	al, 20h
  4339 00001723 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4340 00001725 B00F                    		mov	al, 0Fh		; double check
  4341 00001727 E650                    		out	50h, al
  4342 00001729 E450                    		in	al, 50h
  4343 0000172B A801                    		test	al, 1		; this test was	copied from olivetti
  4344 0000172D 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4345                                  
  4346                                  not_olivetti_m24:
  4347 0000172F B003                    		mov	al, 3		; init com4
  4348 00001731 E83108                  		call	aux_init
  4349 00001734 B002                    		mov	al, 2		; init com3
  4350 00001736 E82C08                  		call	aux_init
  4351 00001739 B001                    		mov	al, 1		; init com2
  4352 0000173B E82708                  		call	aux_init
  4353 0000173E 30C0                    		xor	al, al		; init com1
  4354 00001740 E82208                  		call	aux_init
  4355                                  
  4356                                  skip_aux_port_init:			
  4357 00001743 B002                    		mov	al, 2		; init lpt3
  4358 00001745 E81508                  		call	print_init
  4359 00001748 B001                    		mov	al, 1		; init lpt2
  4360 0000174A E81008                  		call	print_init
  4361 0000174D 30C0                    		xor	al, al		; init lpt1
  4362 0000174F E80B08                  		call	print_init
  4363                                  
  4364 00001752 31D2                    		xor	dx, dx	; 0
  4365 00001754 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4366 00001756 8EC2                    		mov	es, dx
  4367 00001758 31C0                    		xor	ax, ax
  4368                                  		; 16/10/2022
  4369 0000175A BF3405                  		mov	di, INITSPOT	; 0534h
  4370                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4371                                  					; IBM wants 4 zeros here
  4372 0000175D AB                      		stosw
  4373 0000175E AB                      		stosw
  4374 0000175F 8CC8                    		mov	ax, cs		; fetch	segment
  4375 00001761 C7066C00[C906]          		mov	word [BRKADR], cbreak
  4376                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4377                                  					; break	entry point
  4378 00001767 A36E00                  		mov	[BRKADR+2], ax		
  4379                                  		;mov	ds:6Eh,	ax	; vector for break
  4380 0000176A C706A400[3D07]          		mov	word [CHROUT*4], outchr
  4381                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4382 00001770 A3A600                  		mov	[CHROUT*4+2], ax
  4383                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4384                                  
  4385 00001773 BF0400                  		mov	di, 4
  4386 00001776 BB[CF06]                		mov	bx, intret ; 19/10/2022
  4387                                  		;mov	bx, offset intret ; intret (cs:intret)
  4388                                  					; will initialize rest of interrupts
  4389 00001779 93                      		xchg	ax, bx
  4390 0000177A AB                      		stosw			; location 4
  4391 0000177B 93                      		xchg	ax, bx		; cs:
  4392 0000177C AB                      		stosw			; int 1	; location 6
  4393 0000177D 83C704                  		add	di, 4
  4394 00001780 93                      		xchg	ax, bx
  4395 00001781 AB                      		stosw			; location 12
  4396 00001782 93                      		xchg	ax, bx		; cs:
  4397 00001783 AB                      		stosw			; int 3	; location 14
  4398 00001784 93                      		xchg	ax, bx
  4399 00001785 AB                      		stosw			; location 16
  4400 00001786 93                      		xchg	ax, bx		; cs:
  4401 00001787 AB                      		stosw			; int 4	; location 18
  4402                                  
  4403                                  
  4404                                  ;		; 20/12/2022
  4405                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4406                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4407                                  ;	
  4408                                  ;		50:00	byte	Print screen status byte
  4409                                  ;				 00 = PrtSc not active,
  4410                                  ;				 01 = PrtSc in progress
  4411                                  ;				 FF = error
  4412                                  ;		50:01  3 bytes	Used by BASIC
  4413                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4414                                  ;		50:05  10bytes	POST work area
  4415                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4416                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4417                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4418                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4419                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4420                                  ;		50:20	word	DOS dynamic storage
  4421                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4422                                  ;		50:30	4bytes	MODE command
  4423                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4424                                  
  4425 00001788 89160005                		mov	[0500h], dx ; 0
  4426                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4427 0000178C 89160405                		mov	[LSTDRV], dx	; [0504h]
  4428                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4429                                  
  4430                                  ; we need to initialize the cs:motorstartup variable from the disk
  4431                                  ; parameter table at sec9. the offsets in this table are defined in
  4432                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4433                                  
  4434 00001790 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4435                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4436                                  					; [522h+0Ah]
  4437                                  		; 20/12/2022
  4438                                  		; ds = 0
  4439                                  
  4440 00001793 2EA2[2601]              		mov	[cs:motorstartup], al
  4441 00001797 2E803E[3606]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4442 0000179D 720B                    		jb	short no_diddle	; no
  4443 0000179F C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4444                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4445                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4446 000017A5 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4447                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4448                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4449                                  no_diddle:				
  4450 000017AA CD12                    		int	12h		; MEMORY SIZE -
  4451                                  					; Return: AX = number of contiguous 1K blocks of memory
  4452 000017AC B106                    		mov	cl, 6
  4453 000017AE D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4454                                  		
  4455                                  		; 20/12/2022
  4456                                  		; 03/07/2018 - 27/12/2018
  4457                                  		;pop	cx ; (**)
  4458                                  		;mov	[cs:drvfat], cx
  4459                                  		
  4460 000017B0 50                      		push	ax ; (*)	; save real top	of memory
  4461                                  
  4462                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4463                                  
  4464                                  ;M068 - BEGIN
  4465                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4466                                  
  4467                                  		; 20/12/2022
  4468                                  		; ds = 0
  4469                                  
  4470                                  		;push	ds
  4471                                  		;push	bx		; pushes not required but since this
  4472                                  					; happens to be a last minute change
  4473                                  					; & since it is only init code.
  4474                                  		;xor	bx, bx
  4475                                  		;mov	ds, bx
  4476                                  		
  4477                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  4478 000017B1 8B1EBC00                		mov	bx, [2Fh*4]
  4479                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4480 000017B5 8E1EBE00                		mov	ds, [2Fh*4+2]
  4481 000017B9 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4482                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4483 000017BE 750F                    		jnz	short SkipRPL
  4484 000017C0 807F054C                		cmp	byte [bx+5], 'L'
  4485                                  		;cmp	byte ptr [bx+5], 'L'
  4486 000017C4 7509                    		jnz	short SkipRPL
  4487 000017C6 89C2                    		mov	dx, ax		; get TOM into DX
  4488 000017C8 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4489 000017CB CD2F                    		int	2Fh		; Get new TOM from any RPL
  4490 000017CD 89D0                    		mov	ax, dx
  4491                                  SkipRPL:	
  4492                                  		; 20/12/2022		
  4493                                  		;pop	bx
  4494                                  		;pop	ds
  4495                                  
  4496                                  ;M068 - END
  4497                                  		; 20/12/2022
  4498                                  		; 27/12/2018
  4499 000017CF 0E                      		push	cs
  4500 000017D0 1F                      		pop	ds
  4501                                  
  4502                                  		; 18/03/2019 - Retro DOS v4.0
  4503                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4504                                  		;mov	[cs:fatloc], ax	; location to read fat
  4505                                  
  4506                                  		; 01/07/2018
  4507                                  		; 08/04/2018
  4508                                  		; 28/03/2018
  4509                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4510 000017D1 83E840                  		sub	ax, 64
  4511 000017D4 A3[8915]                		mov	[init_bootseg], ax ; 20/12/2022
  4512                                  		;mov	[cs:init_bootseg], ax
  4513                                  
  4514                                  		; 27/12/2018 - Retro DOS v4.0
  4515                                  		;pop	ax ; (*)	; get back real top of memory
  4516 000017D7 5A                      		pop	dx ; (*)
  4517                                  
  4518                                  		; 20/12/2022
  4519                                  		; 27/12/2018
  4520 000017D8 59                      		pop	cx ; (**)
  4521 000017D9 890E[8615]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4522                                  
  4523                                  		; 20/12/2022
  4524                                  
  4525                                  		;mov	dx, 46Dh	; SYSINIT segment
  4526 000017DD BA2E04                  		mov	dx, SYSINITSEG	; 17/10/2022
  4527 000017E0 8EDA                    		mov	ds, dx
  4528                                  
  4529                                  ; set pointer to resident device driver chain
  4530                                  
  4531                                  		; 17/10/2022
  4532 000017E2 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4533                                  		;mov	word [273h], res_dev_list
  4534                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4535                                  					; [SYSINIT+DEVICE_LIST]
  4536 000017E8 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4537                                  		;mov	[275h], cs
  4538                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4539                                  
  4540 000017EC A3[9202]                		mov	[MEMORYSIZE], ax
  4541                                  		;mov	[292h], ax
  4542                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4543                                  
  4544 000017EF FEC1                    		inc	cl
  4545 000017F1 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4546                                  		;mov	[296h], cl
  4547                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4548                                  
  4549 000017F5 C706[7102]0F09          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4550                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4551                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4552                                  					; dos_load_seg
  4553                                  
  4554                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4555                                  ; printer cards. we initialize this value to point to an iret only if
  4556                                  ;
  4557                                  ; 1) the original segment points to storage inside valid ram.
  4558                                  ;
  4559                                  ; 2) the original segment is 0F000:xxxx
  4560                                  
  4561                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4562                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4563                                  		;mov	es, ax
  4564                                  		; 20/12/2022
  4565                                  		;push	ds ; SYSINITSEG
  4566                                  		;pop	es
  4567 000017FB 8EC2                    		mov	es, dx ; SYSINITSEG
  4568 000017FD 31C0                    		xor	ax, ax ; 0
  4569 000017FF 8ED8                    		mov	ds, ax		; segment 0
  4570                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4571 00001801 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4572                                  		; 18/10/2022
  4573 00001804 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4574                                  		;cmp	ax, es:292h	; [ES:MEMORY_SIZE]  ; (condition 1)
  4575 00001809 7605                    		jbe	short resetintf
  4576 0000180B 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4577 0000180E 750A                    		jnz	short keepintf
  4578                                  resetintf:	
  4579 00001810 C7063C00[CF06]          		mov	word [0Fh*4], intret			
  4580                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4581 00001816 8C0E3E00                		mov	word [0Fh*4+2], cs
  4582                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4583                                  keepintf:				
  4584                                  ; end important
  4585                                  
  4586                                  ; 17/10/2022
  4587                                  ; 28/12/2018 - Retro DOS v4.0
  4588                                  
  4589                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4590                                  ;
  4591                                  ; we will check if the system has ibm extended keyboard by
  4592                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4593                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4594                                  ; for the extended keyboard function. use cx as the temporary register.
  4595                                  
  4596                                  		; 20/12/2022
  4597                                  		; ds = 0
  4598                                  		;xor	cx, cx
  4599                                  		;mov	ds, cx
  4600                                  
  4601 0000181A 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4602                                  
  4603                                  		; 20/12/2022
  4604                                  		; 20/03/2019
  4605 0000181E 0E                      		push	cs
  4606 0000181F 1F                      		pop	ds
  4607                                  
  4608                                  		;test	cl, 00010000b ; 10h
  4609 00001820 F6C110                  		test	cl, 10h		; extended keyboard ?
  4610 00001823 740A                    		jz	short org_key	; no, original keyboard
  4611                                  
  4612                                  		; 20/12/2022
  4613                                  		;  ds = cs
  4614 00001825 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4615 0000182A C606[E604]11            		mov	byte [keysts_func], 11h
  4616                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4617                                  		;mov	byte [cs:keysts_func], 11h
  4618                                  					; change for extended keyboard functions
  4619                                  org_key:
  4620                                  
  4621                                  ; 02/06/2018 - Retro DOS v3.0
  4622                                  
  4623                                  ;**************************************************************
  4624                                  ;	will initialize the number of drives
  4625                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4626                                  ;	the indications are as follows:
  4627                                  ;
  4628                                  ;	bits	7	6	drives
  4629                                  ;		0	0	1
  4630                                  ;		0	1	2
  4631                                  ;		1	0	3
  4632                                  ;		1	1	4
  4633                                  ;**************************************************************
  4634                                  		
  4635                                  		; 20/12/2022
  4636                                  		; ds = cs		
  4637                                  		;push	cs
  4638                                  		;pop	ds
  4639                                  		; 21/12/2022
  4640                                  		;push	cs
  4641                                  		;pop	es
  4642                                  
  4643 0000182F E87B08                  		call	cmos_clock_read	; If cmos clock	exists,
  4644                                  					; then set the system time according to	that.
  4645                                  					; also,	reset the cmos clock rate.
  4646                                  		; 18/10/2022
  4647                                  		;mov	word ptr BData_start, offset harddrv ;
  4648                                  					; set up pointer to hdrive
  4649                                  		; 02/10/2022
  4650 00001832 C706[0000][B708]        		mov	word [hdrv_pat], harddrv 
  4651                                  		
  4652                                  		; 20/12/2022
  4653                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4654 00001838 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4655 00001839 30E4                    		xor	ah, ah		; chuck	fat id byte
  4656 0000183B A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4657 0000183E A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4658 00001841 D1E0                    		shl	ax, 1
  4659 00001843 0106[0016]              		add	[last_dskdrv_table], ax
  4660                                  
  4661 00001847 B280                    		mov	dl, 80h
  4662 00001849 B408                    		mov	ah, 8
  4663 0000184B CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4664                                  					; DL = drive number
  4665                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4666                                  					; DL = number of consecutive drives
  4667                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4668 0000184D 7204                    		jc	short enddrv
  4669 0000184F 8816[FF15]              		mov	[hnum], dl	; save number of hard disk drives
  4670                                  enddrv:
  4671                                  		; 21/12/2022
  4672 00001853 0E                      		push	cs
  4673 00001854 07                      		pop	es
  4674                                  
  4675                                  ; scan the list of drives to determine their type. we have three flavors of
  4676                                  ; diskette drives:
  4677                                  ;
  4678                                  ;   48tpi drives    we do nothing special for them
  4679                                  ;   96tpi drives    mark the fact that they have changeline support.
  4680                                  ;   3.5"  drives    mark changeline support and small.
  4681                                  ;
  4682                                  ; the following code uses registers for certain values:
  4683                                  ;
  4684                                  ;   dl - physical drive
  4685                                  ;   ds:di - points to current bds
  4686                                  ;   cx - flag bits for bds
  4687                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4688                                  					
  4689 00001855 30D2                    		xor	dl, dl
  4690                                  
  4691                                  		; 20/12/2022
  4692                                  		; ds = cs
  4693                                  		; 17/06/2018		 
  4694                                  		;push	cs
  4695                                  		;pop	ds
  4696                                  
  4697 00001857 C606[2C01]09            		mov	byte [eot], 9
  4698 0000185C BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4699                                  					; to set aside two bdss	for the	two fake floppy	drives
  4700                                  
  4701                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4702                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4703                                  
  4704                                  ; check to see if we are faking floppy drives. if not we don't
  4705                                  ; do anything special. if we are faking floppy drives we need
  4706                                  ; to set aside two bdss for the two fake floppy drives. we
  4707                                  ; don't need to initalise any fields though. so starting at start_bds
  4708                                  ; use the link field in the bds structure to go to the second bds
  4709                                  ; in the list and initalise it's link field to -1 to set the end of
  4710                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4711                                  ; the bds for harddrives.
  4712                                  
  4713 0000185F 803E[8F15]01            		cmp	byte [fakefloppydrv], 1
  4714 00001864 750B                    		jnz	short loop_drive
  4715 00001866 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4716                                  					; di <-	first bds link
  4717 00001868 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4718                                  					; di <-	second bds link
  4719 0000186A C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4720 0000186E E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4721                                  ;-----------------------------------------------------------------------------
  4722                                  
  4723                                  loop_drive:				
  4724 00001871 3A16[7500]              		cmp	dl, [drvmax]
  4725 00001875 7203                    		jb	short got_more
  4726 00001877 E90201                  		jmp	done_drives
  4727                                  ;-----------------------------------------------------------------------------
  4728                                  
  4729                                  got_more:				
  4730 0000187A 31C9                    		xor	cx, cx		; zero all flags
  4731 0000187C 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4732                                  					; get next bds
  4733 0000187E B600                    		mov	dh, 0 ; ff48tpi
  4734                                  					; set form factor to 48	tpi
  4735 00001880 C606[8E15]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  4736                                  		
  4737                                  		; 20/12/2022
  4738                                  		;push	ds ; 11/05/2019	
  4739 00001885 57                      		push	di
  4740 00001886 52                      		push	dx
  4741 00001887 51                      		push	cx
  4742 00001888 06                      		push	es ; ((*)) ; 20/12/2022	
  4743                                  		
  4744 00001889 B408                    		mov	ah, 8
  4745 0000188B CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4746                                  					; DL = drive number
  4747                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4748                                  					; DL = number of consecutive drives
  4749                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4750 0000188D 7276                    		jc	short noparmsfromrom
  4751                                  
  4752                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4753                                  ; in this case, we are going to put bogus informations to bds table.
  4754                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4755                                  ; they are calculated at the later time. this is just for the diagnostic
  4756                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4757                                  ; this should only happen with drive b.
  4758                                  
  4759 0000188F 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4760 00001892 7505                    		jnz	short pfr_ok
  4761                                  
  4762                                  		;mov	ch, 39		; rom gave wrong info.
  4763                                  		;mov	cl, 9		; let's default to 360k.
  4764                                  		; 20/12/2022
  4765 00001894 B90927                  		mov	cx, 2709h
  4766                                  
  4767 00001897 B601                    		mov	dh, 1
  4768                                  pfr_ok:					
  4769 00001899 FEC6                    		inc	dh		; make number of heads 1-based
  4770 0000189B FEC5                    		inc	ch		; make number of cylinders 1-based
  4771 0000189D 8836[8C15]              		mov	[num_heads], dh	; save parms returned by rom
  4772 000018A1 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4773 000018A4 880E[8D15]              		mov	[sec_trk], cl
  4774 000018A8 882E[8E15]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4775                                  
  4776                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4777                                  
  4778 000018AC 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4779                                  		;jbe	short eot_ok
  4780                                  		; 09/12/2022
  4781                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4782                                  		; 14/08/2023
  4783 000018B0 7604                    		jbe	short eotok
  4784 000018B2 880E[2C01]              		mov	[eot], cl
  4785                                  ;eot_ok:
  4786                                  eotok:
  4787                                  		; 20/12/2022
  4788 000018B6 07                      		pop	es ; ((*)) es = cs = ds		
  4789 000018B7 59                      		pop	cx
  4790 000018B8 5A                      		pop	dx
  4791 000018B9 5F                      		pop	di
  4792                                  		;pop	ds ; 20/12/2022
  4793                                  
  4794                                  ; Check	for presence of	changeline
  4795                                  
  4796 000018BA B415                    		mov	ah, 15h
  4797 000018BC CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4798                                  					; DL = drive ID
  4799                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4800                                  					; CX:DX	= number of sectors on the media
  4801 000018BE 720D                    		jc	short changeline_done
  4802 000018C0 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4803 000018C3 7508                    		jnz	short changeline_done
  4804                                  
  4805                                  ; we have a drive with change line support.
  4806                                  
  4807 000018C5 80C902                  		or	cl, 2		; fchangeline
  4808                                  					; signal type
  4809 000018C8 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4810                                  
  4811                                  ; we now try to set up the form factor for the types of media that we know
  4812                                  ; and can recognise. for the rest, we set the form factor as "other".
  4813                                  
  4814                                  changeline_done:
  4815                                  
  4816                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4817                                  			
  4818 000018CD 803E[8E15]28            		cmp	byte [num_cyln], 40
  4819 000018D2 750B                    		jnz	short try_80
  4820 000018D4 803E[8D15]09            		cmp	byte [sec_trk], 9
  4821 000018D9 7653                    		jbe	short nextdrive
  4822                                  gotother:				
  4823 000018DB B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4824 000018DD EB4F                    		jmp	short nextdrive
  4825                                  ;-----------------------------------------------------------------------------
  4826                                  
  4827                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4828                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4829                                  
  4830                                  try_80:					
  4831 000018DF 803E[8E15]50            		cmp	byte [num_cyln], 80
  4832 000018E4 75F5                    		jnz	short gotother
  4833 000018E6 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4834 000018E8 803E[8D15]24            		cmp	byte [sec_trk], 36 ; is it ?
  4835 000018ED 743F                    		jz	short nextdrive	; yeah,	go update
  4836                                  
  4837                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4838                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4839                                  		;mov	dh, ff144
  4840                                  		;cmp	byte [sec_trk], 18
  4841                                  		;je	short nextdrive
  4842                                  
  4843 000018EF 803E[8D15]0F            		cmp	byte [sec_trk], 15
  4844 000018F4 740B                    		jz	short got96
  4845                                  		
  4846 000018F6 803E[8D15]09            		cmp	byte [sec_trk], 9
  4847 000018FB 75DE                    		jnz	short gotother
  4848                                  		
  4849 000018FD B602                    		mov	dh, 2 ; ffSmall
  4850 000018FF EB2D                    		jmp	short nextdrive
  4851                                  ; ----------------------------------------------------------------------------
  4852                                  
  4853                                  got96:					
  4854 00001901 B601                    		mov	dh, 1 ; ff96tpi
  4855 00001903 EB29                    		jmp	short nextdrive
  4856                                  ; ----------------------------------------------------------------------------
  4857                                  
  4858                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4859                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4860                                  
  4861                                  noparmsfromrom:				
  4862                                  		; 20/12/2022
  4863 00001905 07                      		pop	es ; ((*)) 
  4864 00001906 59                      		pop	cx
  4865 00001907 5A                      		pop	dx
  4866 00001908 5F                      		pop	di
  4867                                  		;pop	ds ; 20/12/2022
  4868                                  		
  4869 00001909 B415                    		mov	ah, 15h
  4870 0000190B CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4871                                  					; DL = drive ID
  4872                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4873                                  					; CX:DX	= number of sectors on the media
  4874 0000190D 721F                    		jc	short nextdrive
  4875                                  		
  4876 0000190F 80FC02                  		cmp	ah, 2		; is there changeline?
  4877 00001912 751A                    		jnz	short nextdrive
  4878                                  
  4879 00001914 80C902                  		or	cl, 2 ; fchangeline
  4880 00001917 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4881 0000191C C606[8E15]50            		mov	byte [num_cyln], 80
  4882 00001921 B601                    		mov	dh, 1 ; ff96tpi 
  4883 00001923 B00F                    		mov	al, 15
  4884 00001925 3A06[2C01]              		cmp	al, [eot]
  4885 00001929 7603                    		jbe	short nextdrive ; eot_ok2
  4886 0000192B A2[2C01]                		mov	[eot], al
  4887                                  ; ----------------------------------------------------------------------------
  4888                                  
  4889                                  ;eot_ok2:
  4890                                  nextdrive:				
  4891 0000192E 80C920                  		or	cl, 20h	; fi_own_physical
  4892                                  					; set this true	for all	drives
  4893 00001931 88D7                    		mov	bh, dl		; save int13 drive number
  4894                                  
  4895                                  ; we need to do special things if we have a single drive system and are setting
  4896                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4897                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4898                                  ; we detect the presence of this situation by examining the flag single for the
  4899                                  ; value 2.
  4900 00001933 803E[7800]02            		cmp	byte [single], 2
  4901 00001938 7505                    		jnz	short not_special
  4902 0000193A FECF                    		dec	bh		; int13	drive number same for logical drive
  4903 0000193C 80F120                  		xor	cl, 20h	; fi_own_physical
  4904                                  					; reset	ownership flag for logical drive
  4905                                  not_special:
  4906                                  
  4907                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4908                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4909                                  ; form factor is of type "ffother".
  4910                                  				
  4911 0000193F 31C0                    		xor	ax, ax		; fill BDS for drive
  4912 00001941 A0[8C15]                		mov	al, [num_heads]
  4913 00001944 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4914 00001947 A0[8D15]                		mov	al, [sec_trk]
  4915 0000194A 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4916 0000194D 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4917 00001950 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4918 00001953 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4919 00001956 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4920 00001959 8A1E[8E15]              		mov	bl, [num_cyln]
  4921 0000195D 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4922 00001960 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4923 00001965 7511                    		jnz	short no_single
  4924 00001967 C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4925                                  					; single drive system
  4926                                  		; 18/12/2022
  4927 0000196C 80C910                  		or	cl, 10h
  4928                                  		;or	cx, 10h	; fi_am_mult
  4929                                  					; set that this	is one of several drives
  4930 0000196F 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4931                                  					; save flags
  4932 00001972 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4933                                  					; move to next BDS in list
  4934 00001974 FEC2                    		inc	dl		; add a	number
  4935 00001976 EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4936                                  ; ----------------------------------------------------------------------------
  4937                                  
  4938                                  no_single:				
  4939                                  		;inc	dl
  4940                                  		; 18/12/2022
  4941 00001978 42                      		inc	dx
  4942 00001979 E9F5FE                  		jmp	loop_drive
  4943                                  ; ----------------------------------------------------------------------------
  4944                                  
  4945                                  done_drives:	
  4946                                  		;mov	word [di+BDS.link], -1
  4947 0000197C C705FFFF                		mov	word [di], -1	; set link to null
  4948                                  
  4949                                  ; set up all the hard drives in	the system
  4950                                  
  4951                                  		; 20/12/2022
  4952                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4953                                  dohard:					
  4954 00001980 8A36[FF15]              		mov	dh, [hnum]
  4955 00001984 08F6                    		or	dh, dh		; done if no hardfiles
  4956 00001986 745B                    		jz	short static_configure
  4957 00001988 B280                    		mov	dl, 80h
  4958                                  dohard1:				
  4959 0000198A 52                      		push	dx
  4960 0000198B 8B3E[0216]              		mov	di, [end_of_bdss]
  4961 0000198F 8A1E[7500]              		mov	bl, [drvmax]
  4962 00001993 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4963 00001995 E8A701                  		call	sethard
  4964 00001998 7208                    		jb	short hardfile_err
  4965 0000199A E8C606                  		call	dmax_check	; error	if already 26 drives
  4966 0000199D 7303                    		jnb	short hardfile_err
  4967 0000199F E8D606                  		call	xinstall_bds	; insert new bds into linked list
  4968                                  hardfile_err:				
  4969 000019A2 5A                      		pop	dx
  4970 000019A3 FEC2                    		inc	dl		; next hard drive
  4971 000019A5 FECE                    		dec	dh
  4972 000019A7 75E1                    		jnz	short dohard1
  4973                                  
  4974                                  ; end of physical drive	initialization
  4975                                  
  4976                                  ; *** do not change the position of the following statement.
  4977                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4978                                  ; *** drive number of mini disk(s).
  4979                                  					
  4980 000019A9 E8C205                  		call	domini		; for setting up mini disks, if found
  4981                                  
  4982                                  ; -- begin added section
  4983                                  
  4984 000019AC 8A36[FF15]              		mov	dh, [hnum]	; we already know this is >0
  4985 000019B0 B280                    		mov	dl, 80h
  4986                                  dohardx1:				
  4987 000019B2 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4988                                  dohardx2:				
  4989 000019B4 52                      		push	dx
  4990 000019B5 53                      		push	bx
  4991 000019B6 8B3E[0216]              		mov	di, [end_of_bdss]
  4992 000019BA 8A1E[7500]              		mov	bl, [drvmax]
  4993 000019BE E87E01                  		call	sethard
  4994 000019C1 720E                    		jb	short dohardx4	; move to next hardfile if error
  4995 000019C3 E89D06                  		call	dmax_check	; make sure <=26 drives
  4996 000019C6 7309                    		jnb	short dohardx4	; skip if error
  4997 000019C8 E8AD06                  		call	xinstall_bds	; insert new bds into linked list
  4998 000019CB 5B                      		pop	bx		; get partition number
  4999 000019CC 5A                      		pop	dx		; restore physical drive counts
  5000 000019CD FEC7                    		inc	bh
  5001 000019CF EBE3                    		jmp	short dohardx2	; keep looping until we fail
  5002                                  ; ----------------------------------------------------------------------------
  5003                                  
  5004                                  dohardx4:				
  5005 000019D1 5B                      		pop	bx		; unjunk partition number from stack
  5006 000019D2 5A                      		pop	dx		; restore physical drive counts
  5007 000019D3 FEC2                    		inc	dl		; next hard drive
  5008 000019D5 FECE                    		dec	dh
  5009 000019D7 75D9                    		jnz	short dohardx1
  5010                                  
  5011                                  ; -- end changed section
  5012                                  
  5013                                  ;******************************************************************************
  5014                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  5015                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  5016                                  ; than two diskette drives
  5017                                  ;
  5018                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  5019                                  ;		as usual and then rescan the bds chain to adjust the  drive
  5020                                  ;		letters. to do this, scan for disk drives and assign logical
  5021                                  ;		drive number starting from 2 and then rescan diskette drives
  5022                                  ;		and assign next to the last logical drive number of last disk
  5023                                  ;		drive to the 3rd and 4th diskette drives.
  5024                                  ;******************************************************************************
  5025                                  
  5026 000019D9 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  5027                                  		;jbe	short static_configure ; no - no need for remapping
  5028 000019DE 7603                    		jbe	short no_remap
  5029 000019E0 E8D800                  		call	remap		; remap	bds chain to adjust driver letters
  5030                                  no_remap:
  5031                                  
  5032                                  ; End of drive initialization.
  5033                                  
  5034                                  ; ----------------------------------------------------------------------------
  5035                                  
  5036                                  ;we now decide, based on the configurations available so far, what
  5037                                  ;code or data we need to keep as a stay resident code. the following table
  5038                                  ;shows the configurations under consideration. they are listed in the order
  5039                                  ;of their current position memory.
  5040                                  ;
  5041                                  ;configuration will be done in two ways:
  5042                                  ;
  5043                                  ;first, we are going to set "static configuration". static configuration will
  5044                                  ;consider from basic configuration to endof96tpi configuration. the result
  5045                                  ;of static configuration will be the address the dynamic configuration will
  5046                                  ;use to start with.
  5047                                  ;
  5048                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  5049                                  ;involves possible relocation of code or data. dynamic configuration routine
  5050                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  5051                                  ;code individually. after these operation, [dosdatasg] will be set.
  5052                                  ;this will be the place sysinit routine will relocate msdos module for good.
  5053                                  
  5054                                  ; -- begin changed section
  5055                                  ;
  5056                                  ;   1.	 basic configuration for msbio (endfloppy)
  5057                                  ;   2.   end96tpi	; a system that supports "change line error"
  5058                                  ;   3.	 end of bdss	; end of bdss for hard disks
  5059                                  ;   4.	 endatrom	;some of at rom fix module.
  5060                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  5061                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  5062                                  ;
  5063                                  
  5064                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  5065                                  
  5066                                  static_configure:			
  5067 000019E3 8B3E[0216]              		mov	di, [end_of_bdss]
  5068 000019E7 81FF[B808]              		cmp	di, bdss	; 19/10/2022
  5069                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  5070 000019EB 750D                    		jnz	short dynamic_configure	; that's the end, then
  5071                                  		; 18/10/2022
  5072 000019ED BF[B808]                		mov	di, end96tpi
  5073                                  		;mov	di, offset harddrv ; end96tpi
  5074                                  					; keep everything up to end96tpi
  5075 000019F0 803E[7700]00            		cmp	byte [fhave96], 0
  5076 000019F5 7503                    		jnz	short dynamic_configure
  5077                                  		
  5078 000019F7 BF[9D08]                		mov	di, endfloppy
  5079                                  dynamic_configure:
  5080                                  		; 20/12/2022
  5081                                  		;push	cs
  5082                                  		;pop	es
  5083                                  		
  5084 000019FA FC                      		cld			; clear direction
  5085                                  
  5086                                  ; -- end changed section
  5087                                  
  5088                                  		; 20/12/2022
  5089                                  		; ds = cs <> es
  5090                                  		; ss = 0
  5091                                  		; sp = 700h
  5092                                  
  5093 000019FB 803E[3606]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  5094 00001A00 7577                    		jnz	short checkcmosclock
  5095 00001A02 803E[FF15]00            		cmp	byte [hnum], 0	; No hard file?
  5096 00001A07 7470                    		jz	short checkcmosclock
  5097 00001A09 97                      		xchg	ax, di		; save allocation pointer in ax
  5098 00001A0A BE00F0                  		mov	si, 0F000h
  5099 00001A0D 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  5100 00001A0F BE[0816]                		mov	si, bios_date	; "01/10/84"
  5101 00001A12 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  5102 00001A15 B90900                  		mov	cx, 9		; bdate_l
  5103                                  					; Only patch ROM for bios 01/10/84
  5104 00001A18 F3A6                    		repe cmpsb		; check	for date + zero	on end
  5105 00001A1A 97                      		xchg	ax, di		; restore allocation pointer
  5106                                  
  5107                                  ; M015 -- begin changes
  5108                                  
  5109                                  		;jnz	short checkcmosclock
  5110                                  		; 02/10/2022
  5111 00001A1B 7508                    		jnz	short checkcompaqbug
  5112                                  
  5113                                  ; install at rom fix
  5114                                  
  5115                                  		; 19/10/2022
  5116                                  		;mov	cx, offset endatrom
  5117 00001A1D B9[AB13]                		mov	cx, endatrom
  5118                                  		;mov	si, offset ibm_disk_io
  5119 00001A20 BE[7D12]                		mov	si, ibm_disk_io
  5120 00001A23 EB46                    		jmp	short install_int13_patch
  5121                                  ; ----------------------------------------------------------------------------
  5122                                  
  5123                                  ; M065 -- begin changes
  5124                                  ;
  5125                                  ; On certain systems with Western Digital disk controllers, the
  5126                                  ; following detection scheme caused an unpredictable and serious
  5127                                  ; failure. In particular, they've implemented a nonstandard
  5128                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5129                                  ; what happens to be at es:[bx] and other memory locations indexed
  5130                                  ; off of it.
  5131                                  ;
  5132                                  ; Compaq was unable to tell us exactly which kind of systems have
  5133                                  ; the bug, except that they guarantee that the bug was fixed in
  5134                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5135                                  ; string, and then look for date codes before 08/04/86 to decide
  5136                                  ; when to install the hook.
  5137                                  
  5138                                  ;checkcmosclock:
  5139                                  ; 02/10/2022				
  5140                                  checkcompaqbug:
  5141                                  		; 20/12/2022
  5142                                  		; es = 0F000h
  5143                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5144                                  		;mov	es, ax
  5145                                  
  5146                                  		; 19/10/2022
  5147 00001A25 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5148                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5149 00001A2C 754B                    		jnz	short not_compaq_patch
  5150 00001A2E 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5151                                  		;cmp	word ptr es:0FFECh, 'PM'
  5152 00001A35 7542                    		jnz	short not_compaq_patch
  5153 00001A37 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5154                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5155 00001A3E 7539                    		jnz	short not_compaq_patch
  5156                                  
  5157                                  ; We're running on a COMPAQ. Now look at the date code.
  5158                                  
  5159 00001A40 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5160 00001A44 86E0                    		xchg	ah, al
  5161 00001A46 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5162                                  		;cmp	ax, '86'        ; 3836h
  5163                                  					; is it	86?
  5164 00001A49 772E                    		ja	short not_compaq_patch
  5165 00001A4B 7218                    		jb	short do_compaq_patch
  5166 00001A4D 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5167 00001A51 86E0                    		xchg	ah, al
  5168 00001A53 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5169                                  		;cmp	ax, '08'        ; 3038h
  5170                                  					; is it	08?
  5171 00001A56 7721                    		ja	short not_compaq_patch
  5172 00001A58 720B                    		jb	short do_compaq_patch
  5173 00001A5A 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5174 00001A5E 86E0                    		xchg	ah, al
  5175 00001A60 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5176                                  		;cmp	ax, '04'        ; 3034h
  5177                                  					; is it	04?
  5178 00001A63 7314                    		jnb	short not_compaq_patch
  5179                                  
  5180                                  do_compaq_patch:			
  5181 00001A65 B9[C813]                		mov	cx, end_compaq_i13hook
  5182 00001A68 BE[AB13]                		mov	si, endatrom
  5183                                  
  5184                                  install_int13_patch:			
  5185 00001A6B 0E                      		push	cs
  5186 00001A6C 07                      		pop	es
  5187                                  		; 18/10/2022
  5188 00001A6D 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5189 00001A71 8C0E[B600]              		mov	[Orig13+2], cs
  5190 00001A75 29F1                    		sub	cx, si		; size of rom fix module
  5191 00001A77 F3A4                    		rep movsb		; relocate it
  5192                                  
  5193                                  ; M065 -- end changes
  5194                                  
  5195                                  ; ----------------------------------------------------------------------------
  5196                                  not_compaq_patch:			; M065
  5197                                  		; 17/10/2022
  5198                                  checkcmosclock:	
  5199                                  		; 18/10/2022		
  5200 00001A79 0E                      		push	cs
  5201 00001A7A 07                      		pop	es
  5202                                  
  5203                                  		; 20/12/2022
  5204                                  		; ds = cs = es
  5205                                  		; ss = 0
  5206                                  		; sp = 700h
  5207                                  
  5208                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5209                                  %if 0
  5210                                  		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5211                                  		jnz	short checkk09	; no
  5212                                  
  5213                                  		mov	word [daycnttoday], di
  5214                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5215                                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5216                                  		mov	si, daycnt_to_day
  5217                                  		rep movsb
  5218                                  		mov	word [bintobcd], di
  5219                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5220                                  					; let original segment stay
  5221                                  		;mov	cx, 11	; endcmosclockset - bin_to_bcd
  5222                                  		; 08/08/2023
  5223                                  		mov	cl, 11
  5224                                  		mov	si, bin_to_bcd
  5225                                  		rep movsb
  5226                                  %endif
  5227                                  
  5228                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5229                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:22F4h
  5230                                  		;push	cs
  5231                                  		;pop	es
  5232                                  checkk09:				
  5233 00001A7B 57                      		push	di ; ? ; save ? ; 20/12/2022
  5234 00001A7C B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5235 00001A7F B301                    		mov	bl, 1		; wait for 1 clock tick
  5236 00001A81 268A3D                  		mov	bh, [es:di]
  5237 00001A84 F9                      		stc			; Assume we will fail
  5238 00001A85 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5239                                  					; AL = condition type, BH = condition compare or mask value
  5240                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5241                                  					; DX = I/O port	address	if AL bit 4 set
  5242 00001A87 5F                      		pop	di ; ?
  5243 00001A88 721B                    		jc	short configdone ; 20/12/2022
  5244                                  
  5245 00001A8A C606[7900]01            		mov	byte [fhavek09], 1
  5246                                  					; remember we have a k09 type
  5247 00001A8F 1E                      		push	ds
  5248 00001A90 31C0                    		xor	ax, ax
  5249 00001A92 8ED8                    		mov	ds, ax
  5250                                  		
  5251 00001A94 893EB001                		mov	[6Ch*4], di
  5252                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5253                                  					; new int 6ch handler
  5254                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5255 00001A98 8C0EB201                		mov	word [6Ch*4+2], cs
  5256 00001A9C 1F                      		pop	ds
  5257                                  		; 20/12/2022
  5258                                  		; ds = cs = es
  5259                                  		;mov	si, int6c
  5260                                  		;mov	cx, endk09-int6c ; 459
  5261                                  		;;mov	cx, 459		; endk09 - int6c
  5262                                  					; size of k09 routine
  5263                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5264                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2315h
  5265 00001A9D BE[C913]                		mov	si, int_6Ch
  5266 00001AA0 B9BC01                  		mov	cx, endk09-int_6Ch ; 461 in PCDOS 7.1 IBMBIO.COM
  5267 00001AA3 F3A4                    		rep movsb		;
  5268                                  					; set up config	stuff for sysinit
  5269                                  ; ----------------------------------------------------------------------------
  5270                                  ; Set up config stuff for SYSINIT
  5271                                  
  5272                                  ; 17/10/2022
  5273                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5274                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5275                                  ; 09/12/2022
  5276                                  SETDRIVE equ SetDrive
  5277                                  GETBP equ GetBp
  5278                                  		
  5279                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5280                                  configdone:	
  5281                                  		; 21/12/2022			
  5282                                  		; 20/03/2019
  5283                                  		;push	cs		; di is	final ending address of	msbio.
  5284                                  		;pop	ds
  5285                                  		
  5286 00001AA5 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5287                                  		; 10/12/2022
  5288                                  		;shr	di, 1
  5289                                  		;shr	di, 1
  5290                                  		;shr	di, 1
  5291                                  		;shr	di, 1
  5292 00001AA8 B104                    		mov	cl, 4
  5293 00001AAA D3EF                    		shr	di, cl		
  5294                                  		; 10/12/2022
  5295 00001AAC 83C770                  		add	di, 70h	 ; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5296                                  		; 19/10/2022 - Temporary !
  5297                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5298 00001AAF 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5299                                  
  5300                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5301                                  
  5302                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5303                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5304                                  	     
  5305                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5306                                  
  5307                                  ; ----------------------------------------------------------------------------
  5308                                  ; ----------------------------------------------------------------------------
  5309                                  %if 0
  5310                                  		mov	ax, [drvfat]	; get drive and	fat id
  5311                                  		; 22/12/2022
  5312                                  		; Note: SETDRIVES uses AL (drive number) only
  5313                                  		mov	bp, SETDRIVE
  5314                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5315                                  					; at 2C7h:4D7h = 70h:2A47h
  5316                                  		push	cs		; simulate far call
  5317                                  		call	call_bios_code	; get bds for drive
  5318                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5319                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5320                                  		push	cs
  5321                                  		call	call_bios_code
  5322                                  
  5323                                  	; resort to funky old segment definitions for now
  5324                                  
  5325                                  		; 22/12/2022
  5326                                  		;push	es		; copy bds to ds:di
  5327                                  		;pop	ds
  5328                                  
  5329                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5330                                  	;
  5331                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5332                                  	;	  back. Apparently it was what actually setup es: for the following
  5333                                  	; cas----
  5334                                  
  5335                                  		; 22/12/2022
  5336                                  		;xor	di, di
  5337                                  		;mov	al, [es:di]	; get fat id byte
  5338                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5339                                  		;mov	[es:drvfat+1], al
  5340                                  		;mov	ax, [es:drvfat]
  5341                                  		
  5342                                  		; 22/12/2022
  5343                                  		; ds = cs
  5344                                  	;;;	mov	al, [drvfat]
  5345                                  
  5346                                  	; cas -- why do a SECOND setdrive here???
  5347                                  
  5348                                  		; 22/12/2022
  5349                                  		;push	es		; save whatever's in es
  5350                                  		;push	ds		; copy bds to es:di
  5351                                  		;pop	es
  5352                                  		;push	cs		; copy Bios_Data to ds
  5353                                  		;pop	ds
  5354                                  	
  5355                                  	; 22/12/2022
  5356                                  	;;;	mov	bp, SETDRIVE
  5357                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5358                                  	;;;	push	cs		; simulate far call
  5359                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5360                                  	
  5361                                  		; 22/12/2022
  5362                                  		;push	es		; copy bds back to ds:di
  5363                                  		;pop	ds
  5364                                  		;pop	es		; pop whatever was in es
  5365                                  
  5366                                  	; Now we load in the MSDOS.SYS file
  5367                                  
  5368                                  	; 22/12/2022
  5369                                  	; -----
  5370                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5371                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5372                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5373                                  	;				; get size of fat on media
  5374                                  	;	;mov	es:16DEh, bl
  5375                                  	;	mov	[es:fbigfat], bl
  5376                                  	;	mov	cl, [di+8]
  5377                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5378                                  	;	;sub	es:16D8h, ax
  5379                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5380                                  	;				; need a logical sector number that will
  5381                                  	;				; be used by getclus(diskrd procedure)
  5382                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5383                                  	;	;sbb	es:16DAh, ax
  5384                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5385                                  	; -----
  5386                                  		
  5387                                  	; -----	; 22/12/2022
  5388                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5389                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5390                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5391                                  					; get size of fat on media
  5392                                  		mov	[fbigfat], bl
  5393                                  		mov	cl, [es:di+8]
  5394                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5395                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5396                                  					; need a logical sector number that will
  5397                                  					; be used by getclus(diskrd procedure)
  5398                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5399                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5400                                  	; ------
  5401                                  
  5402                                  		xor	ch, ch	 ; cx = sectors/cluster
  5403                                  
  5404                                  	; the boot program has left the directory at 0:500h
  5405                                  
  5406                                  		push	ds
  5407                                  		xor	di, di
  5408                                  		mov	ds, di
  5409                                  		mov	bx, [53Ah]
  5410                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5411                                  					; (First cluster field of 2nd dir entry
  5412                                  					; of root directory in the buffer at 500h)
  5413                                  		pop	ds
  5414                                  loadit:
  5415                                  		mov	ax, SYSINITSEG	; 46Dh
  5416                                  		;mov	ax, 46Dh	; sysinit segment
  5417                                  		mov	es, ax
  5418                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5419                                  		;mov	es, [es:271h]
  5420                                  
  5421                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5422                                  ; ----------------------------------------------------------------------------
  5423                                  
  5424                                  		;test	byte [cs:fbigfat], fbig
  5425                                  		test	byte [cs:fbigfat], 40h ; fbig
  5426                                  		jnz	short eofbig
  5427                                  		cmp	bx, 0FF7h
  5428                                  		jmp	short iseofx
  5429                                  ; ----------------------------------------------------------------------------
  5430                                  
  5431                                  eofbig:
  5432                                  		cmp	bx, 0FFF7h
  5433                                  iseofx:
  5434                                  		jb	short loadit	; keep loading until cluster = eof
  5435                                  
  5436                                  %endif
  5437                                  ; ----------------------------------------------------------------------------
  5438                                  ; ----------------------------------------------------------------------------
  5439                                  
  5440 00001AB3 E8EE03                  		call	setdrvparms	; 
  5441                                  
  5442                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5443                                  		;jmp	far 46Dh:267h
  5444 00001AB6 EA[6702]2E04            		jmp	SYSINITSEG:SYSINITSTART
  5445                                  
  5446                                  ; =============== S U B	R O U T	I N E ========================================
  5447                                  
  5448                                  ; Following are subroutines to support resident device driver initialization
  5449                                  ;
  5450                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5451                                  
  5452                                  ;	M035 -- begin changed section
  5453                                  
  5454                                  ;******************************************************************************
  5455                                  ; module name: remap
  5456                                  ;
  5457                                  ; descriptive name: all the code for himem that could be separated from msbio
  5458                                  ;
  5459                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5460                                  ;	     letters) if more than two diskette drives on the system.
  5461                                  ;
  5462                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5463                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5464                                  ;	       letters. to do this, scan for disk drives and assign logical
  5465                                  ;	       drive number starting from 2 and then rescan diskette drives
  5466                                  ;	       and assign next to the last logical drive number of last disk
  5467                                  ;	       drive to the 3rd and 4th diskette drives.
  5468                                  
  5469                                  ; input:       none
  5470                                  ; exit:	drive letters have been remapped in bds chain
  5471                                  ; exit error:  none
  5472                                  ; called from: msinit
  5473                                  ;
  5474                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5475                                  ;	  found in the system
  5476                                  ;	  this function assumes that there are no more than 26 drives assigned
  5477                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5478                                  ;	  this function assumes that the first entries in the chain are
  5479                                  ;	   floppy drives, and all the rest are hard drives
  5480                                  ;	  will alter the boot drive if necessary to reflect remapping
  5481                                  ;
  5482                                  ;******************************************************************************
  5483                                  
  5484                                  ; 17/10/2022
  5485                                  ; 02/10/2022
  5486                                  
  5487                                  remap:		; proc near		
  5488 00001ABB 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5489                                  
  5490                                  ; search for 1st fixed disk physical drive num
  5491                                  
  5492                                  drive_loop:				
  5493 00001AC0 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5494                                  					; first	hard disk??
  5495 00001AC4 7409                    		jz	short fdrv_found ; yes,	continue
  5496 00001AC6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5497                                  					; get next bds,	assume segment
  5498 00001AC8 83FFFF                  		cmp	di, -1		; last bds?
  5499 00001ACB 75F3                    		jnz	short drive_loop ; loop	if not
  5500 00001ACD EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5501                                  
  5502                                  ;------------------------------------------------------------------------------
  5503                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5504                                  ;logical drive nums to 3, 4, 5 etc.
  5505                                  ;------------------------------------------------------------------------------
  5506                                  
  5507                                  fdrv_found:				
  5508 00001ACF B002                    		mov	al, 2		; start	with logical drv num=2
  5509                                  fdrv_loop:				
  5510 00001AD1 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5511 00001AD4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5512                                  					; ds:di--> next	bds
  5513                                  		;inc	al		; set num for next drive
  5514                                  		; 18/12/2022
  5515 00001AD6 40                      		inc	ax
  5516 00001AD7 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  5517 00001ADA 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  5518                                  
  5519                                  ;------------------------------------------------------------------------------
  5520                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5521                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5522                                  ; any more.
  5523                                  ;------------------------------------------------------------------------------
  5524                                  
  5525 00001ADC 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5526                                  					; get first bds
  5527 00001AE1 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5528                                  					; ds:di-->bds2
  5529 00001AE3 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5530 00001AE8 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5531                                  remap_loop1:				
  5532 00001AEB 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5533                                  					; set new num to next floppy
  5534 00001AED 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5535 00001AF0 FEC0                    		inc	al		; new number for next floppy
  5536 00001AF2 FECC                    		dec	ah		; count down extra floppies
  5537 00001AF4 75F5                    		jnz	short remap_loop1
  5538                                  
  5539                                  ; now we've got to adjust the boot drive if we reassigned it
  5540                                  
  5541 00001AF6 2EA0[8615]              		mov	al, [cs:drvfat]
  5542 00001AFA 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5543 00001AFC 7220                    		jb	short rmap_exit
  5544 00001AFE 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5545 00001B03 7204                    		jb	short remap_boot_flop ;	brif so
  5546                                  
  5547                                  ; we've got to remap the boot hard drive
  5548                                  ; subtract the number of EXTRA floppies from it
  5549                                  
  5550 00001B05 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5551 00001B07 EB05                    		jmp	short remap_change_boot_drv
  5552                                  ; ---------------------------------------------------------------------------
  5553                                  
  5554                                  ; we've got to remap the boot floppy.
  5555                                  ; add the number of hard drive partitions to it
  5556                                  
  5557                                  remap_boot_flop:			
  5558 00001B09 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5559                                  remap_change_boot_drv:			
  5560 00001B0E 2EA2[8615]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5561 00001B12 FEC0                    		inc	al
  5562 00001B14 1E                      		push	ds
  5563 00001B15 BF2E04                  		mov	di, SYSINITSEG	; 46Dh
  5564                                  		;mov	di, 46Dh	; SYSINIT segment
  5565 00001B18 8EDF                    		mov	ds, di
  5566 00001B1A A2[9602]                		mov	[DEFAULTDRIVE], al
  5567                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5568                                  					; pass it to sysinit as	well
  5569 00001B1D 1F                      		pop	ds
  5570                                  rmap_exit:				
  5571 00001B1E C3                      		retn
  5572                                  
  5573                                  ; =============== S U B	R O U T	I N E =======================================
  5574                                  
  5575                                  ; 17/10/2022
  5576                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5577                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5578                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5579                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5580                                  ;**************************************************
  5581                                  ; getboot - get the boot sector for a hard disk
  5582                                  ;
  5583                                  ; Reads the boot sector from a specified drive into
  5584                                  ; a buffer at the top of memory.
  5585                                  ;
  5586                                  ; dl = int13 drive number to read boot sector for
  5587                                  ;**************************************************
  5588                                  
  5589                                  ; 17/10/2022
  5590                                  bootbias equ 200h
  5591                                  
  5592                                  getboot:	; proc near		
  5593                                  		
  5594                                  		; 08/04/2018
  5595                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5596                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5597                                  		; 02/10/2022 - Retro DOS v4.0
  5598                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5599                                  
  5600 00001B1F 2EA1[8915]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5601 00001B23 8EC0                    		mov	es, ax
  5602                                  		; 17/10/2022
  5603 00001B25 BB0002                  		mov	bx, bootbias ; 200h
  5604                                  		;mov	bx, 200h	; bootbias
  5605                                  					; load BX, ES:BX is where sector goes
  5606 00001B28 B80102                  		mov	ax, 201h
  5607 00001B2B 30F6                    		xor	dh, dh
  5608 00001B2D B90100                  		mov	cx, 1
  5609 00001B30 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5610                                  					; AL = number of sectors to read, CH = track, CL = sector
  5611                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5612                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5613 00001B32 7209                    		jb	short erret
  5614                                  		; 17/10/2022
  5615 00001B34 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5616                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5617                                  					; Dave Litton magic word?
  5618 00001B3B 7401                    		jz	short norm_ret	; yes
  5619                                  erret:					
  5620 00001B3D F9                      		stc
  5621                                  norm_ret:				
  5622 00001B3E C3                      		retn
  5623                                  
  5624                                  ; =============== S U B	R O U T	I N E =======================================
  5625                                  
  5626                                  ; 28/12/2018 - Retro DOS v4.0 
  5627                                  
  5628                                  ;***************************************************************************
  5629                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5630                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5631                                  ;   our own logical sectors start. we also read in our boot sector to
  5632                                  ;   determine version number
  5633                                  ;
  5634                                  ;   inputs:	dl is rom drive number (80...)
  5635                                  ;		bh is partition number (0....) 
  5636                                  ;		ds:di points to bds
  5637                                  ;   outputs:	carry clear -> bpb is filled in
  5638                                  ;		carry set   -> bpb is left uninitialized due to error
  5639                                  ;	trashes (at least) si, cx
  5640                                  ;	MUST PRESERVE ES:!!!!
  5641                                  ;***************************************************************************
  5642                                  
  5643                                  sethard:	; proc near
  5644                                  		; 12/08/2023
  5645                                  		; ds = cs = BIOSDATA
  5646 00001B3F 57                      		push	di
  5647 00001B40 53                      		push	bx
  5648                                  		;push	ds  ; ds = cs = BIOSDATA ; 12/08/2023
  5649 00001B41 06                      		push	es
  5650 00001B42 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5651 00001B45 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5652 00001B48 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5653                                  					; fnon_removable
  5654 00001B4C C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5655                                  					; ffHardFile
  5656 00001B50 C606[8815]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5657 00001B55 88FE                    		mov	dh, bh		; partition number
  5658 00001B57 52                      		push	dx
  5659 00001B58 B408                    		mov	ah, 8
  5660 00001B5A CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5661                                  					; DL = drive number
  5662                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5663                                  					; DL = number of consecutive drives
  5664                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5665 00001B5C FEC6                    		inc	dh
  5666 00001B5E 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5667 00001B61 5A                      		pop	dx
  5668 00001B62 7263                    		jb	short setret	; error	if no hard disk
  5669 00001B64 80E13F                  		and	cl, 3Fh
  5670 00001B67 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5671 00001B6A 52                      		push	dx		; save partition number
  5672 00001B6B E8B1FF                  		call	getboot
  5673 00001B6E 5A                      		pop	dx		; restore partition number
  5674 00001B6F 7256                    		jb	short setret
  5675 00001B71 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5676                                  
  5677                                  ; The first 'active' partition is 00, the second is 01....
  5678                                  ;   then the remainder of the 'primary' but non-active partitions
  5679                                  
  5680                                  act_part:
  5681 00001B74 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5682 00001B79 7418                    		jz	short no_act	; no
  5683 00001B7B 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5684 00001B7F 740C                    		jz	short got_good_act
  5685 00001B81 26803F04                		cmp	byte [es:bx], 4
  5686 00001B85 7406                    		jz	short got_good_act
  5687 00001B87 26803F06                		cmp	byte [es:bx], 6
  5688 00001B8B 7506                    		jnz	short no_act
  5689                                  got_good_act:				; 11/08/2023
  5690 00001B8D 08F6                    		or	dh, dh		; is this our target partition #?
  5691                                  					; (0 = first primary dos or active partition)
  5692 00001B8F 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5693 00001B91 FECE                    		dec	dh		; count	down
  5694                                  no_act:					
  5695 00001B93 83C310                  		add	bx, 16
  5696 00001B96 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5697                                  					; last entry done?
  5698 00001B9A 75D8                    		jnz	short act_part	; no, process next entry
  5699 00001B9C BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5700                                  					; restore original value of bx
  5701                                  
  5702                                  ; Now scan the non-active partitions
  5703                                  
  5704                                  get_primary:
  5705 00001B9F 26F647FC80              		test	byte [es:bx-4], 80h
  5706 00001BA4 7518                    		jnz	short not_prim	; we've already scanned
  5707                                  					; the ACTIVE ones
  5708 00001BA6 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5709 00001BAA 740C                    		jz	short got_prim
  5710 00001BAC 26803F04                		cmp	byte [es:bx], 4
  5711 00001BB0 7406                    		jz	short got_prim
  5712 00001BB2 26803F06                		cmp	byte [es:bx], 6
  5713 00001BB6 7506                    		jnz	short not_prim
  5714                                  got_prim:
  5715 00001BB8 08F6                    		or	dh, dh		; is this our target partition?
  5716 00001BBA 740F                    		jz	short set2
  5717 00001BBC FECE                    		dec	dh
  5718                                  not_prim:
  5719 00001BBE 83C310                  		add	bx, 16
  5720 00001BC1 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5721 00001BC5 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5722                                  setret:					
  5723 00001BC7 F9                      		stc			; error	return
  5724 00001BC8 E99602                  		jmp	ret_hard_err
  5725                                  
  5726                                  ; ---------------------------------------------------------------------------
  5727                                  
  5728                                  ;  until we get the real logical boot record and get the bpb,
  5729                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5730                                  ;  for the convenience of the computation.
  5731                                  ;
  5732                                  ;  at the end of this procedure, if a bpb information is gotten from
  5733                                  ;  the valid boot record, then we are going to use those bpb information
  5734                                  ;  without change.
  5735                                  ;
  5736                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5737                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5738                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5739                                  
  5740                                  set2:		
  5741                                  		; 12/08/2023
  5742                                  		; ds = cs = BIOSDATA segment (0070h)
  5743 00001BCB 8816[8B15]              		mov	[rom_drv_num], dl
  5744                                  		;mov	[cs:rom_drv_num], dl
  5745                                  			; save the rom bios drive number we are handling now.
  5746 00001BCF 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5747 00001BD3 268B5706                		mov	dx, [es:bx+6]
  5748                                  
  5749                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5750                                  ; sectors should be allowed	
  5751                                  
  5752 00001BD7 83E801                  		sub	ax, 1
  5753 00001BDA 83DA00                  		sbb	dx, 0
  5754 00001BDD 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5755 00001BE1 2613570A                		adc	dx, [es:bx+10]
  5756 00001BE5 7305                    		jnb	short okdrive
  5757 00001BE7 800E[8815]80            		or	byte [fbigfat], 80h ; ftoobig
  5758                                  okdrive:
  5759 00001BEC 268B4704                		mov	ax, [es:bx+4]
  5760 00001BF0 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5761                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5762 00001BF3 268B4706                		mov	ax, [es:bx+6]
  5763 00001BF7 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5764 00001BFA 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5765 00001BFE 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5766 00001C02 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5767 00001C05 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5768                                  					; bpb->maxsec =	p->partitionlength
  5769 00001C08 83FA00                  		cmp	dx, 0
  5770 00001C0B 7705                    		ja	short okdrive_1
  5771 00001C0D 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5772 00001C10 72B5                    		jb	short setret	; return -1;
  5773                                  okdrive_1:
  5774 00001C12 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5775 00001C15 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5776 00001C18 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5777                                  					; usually equal	to the # of sec/trk.
  5778 00001C1A 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5779 00001C1D 50                      		push	ax
  5780 00001C1E 89D0                    		mov	ax, dx
  5781 00001C20 31D2                    		xor	dx, dx
  5782 00001C22 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5783                                  					; (track)temp_h:ax + (sector)dx
  5784                                  		; 17/10/2022
  5785                                  		;mov	[cs:temp_h], ax
  5786                                  		; 12/08/2023 (ds=cs)
  5787 00001C24 A3[2105]                		mov	[temp_h], ax
  5788 00001C27 58                      		pop	ax
  5789 00001C28 F7F3                    		div	bx
  5790 00001C2A 88D1                    		mov	cl, dl
  5791 00001C2C FEC1                    		inc	cl
  5792 00001C2E 31DB                    		xor	bx, bx
  5793 00001C30 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5794 00001C33 50                      		push	ax
  5795 00001C34 31D2                    		xor	dx, dx
  5796                                  		;mov	ax, [cs:temp_h]
  5797 00001C36 A1[2105]                		mov	ax, [temp_h] ; 12/08/2023
  5798 00001C39 F7F3                    		div	bx
  5799                                  		;mov	[cs:temp_h], ax
  5800 00001C3B A3[2105]                		mov	[temp_h], ax ; 12/08/2023
  5801 00001C3E 58                      		pop	ax
  5802 00001C3F F7F3                    		div	bx		; dl is head, ax is cylinder
  5803                                  		; 12/08/2023 (ds=cs)
  5804 00001C41 833E[2105]00            		cmp	word [temp_h], 0
  5805                                  		;cmp	word [cs:temp_h], 0
  5806 00001C46 775F                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5807 00001C48 3D0004                  		cmp	ax, 1024
  5808 00001C4B 775A                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5809                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5810                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5811                                  			; ('ja' must be 'jnb')
  5812                                  okdrive_2:
  5813                                   		; 28/07/2019
  5814                                  ; dl is head.
  5815                                  ; ax is cylinder
  5816                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5817                                  
  5818                                  ;*** for mini disks ***
  5819                                  
  5820 00001C4D 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5821                                  					; check for mini disk
  5822 00001C51 7503                    		jnz	short oknotmini	; not mini disk.
  5823 00001C53 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5824                                  					; set the physical track number
  5825                                  oknotmini:
  5826                                  ;*** end of added logic for mini disk
  5827                                  				
  5828 00001C56 D0CC                    		ror	ah, 1		; move high two bits of cyl to high
  5829 00001C58 D0CC                    		ror	ah, 1		; two bits of upper byte
  5830 00001C5A 80E4C0                  		and	ah, 0C0h	; turn off remainder of bits
  5831 00001C5D 08E1                    		or	cl, ah		; move two bits to correct spot
  5832 00001C5F 88C5                    		mov	ch, al		; ch is cylinder (low 8 bits)
  5833                                  					; cl is sector + 2 high bits of cylinder
  5834 00001C61 88D6                    		mov	dh, dl		; dh is head
  5835                                  		
  5836                                  		; 12/08/2023 (ds=cs)
  5837 00001C63 8A16[8B15]              		mov	dl, [rom_drv_num]
  5838                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5839                                  
  5840                                  ; cl is sector + 2 high bits of cylinder
  5841                                  ; ch is low 8 bits of cylinder
  5842                                  ; dh is head
  5843                                  ; dl is drive
  5844                                  
  5845                                  ; for convenience, we are going to read the logical boot sector
  5846                                  ; into cs:disksector area.
  5847                                  
  5848                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5849                                  ; is to be read in is cs:disksector.
  5850                                  
  5851 00001C67 0E                      		push	cs
  5852 00001C68 07                      		pop	es
  5853 00001C69 BB[4E01]                		mov	bx, disksector	; for convenience,
  5854                                  					; we are going to read the logical boot sector
  5855                                  					; into cs:disksector area.
  5856 00001C6C B80102                  		mov	ax, 201h
  5857 00001C6F CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5858                                  					; AL = number of sectors to read, CH = track, CL = sector
  5859                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5860                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5861                                  
  5862                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5863                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5864                                  ; media if we recognize the version number.
  5865                                  
  5866                                  		; 11/08/2023
  5867                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  5868                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  5869 00001C71 53                      		push	bx
  5870 00001C72 50                      		push	ax
  5871                                  		; 12/08/2023
  5872                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  5873 00001C73 803FE9                  		cmp	byte [bx], 0E9h
  5874                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5875 00001C76 740B                    		jz	short check_1_ok ; yes
  5876 00001C78 803FEB                  		cmp	byte [bx], 0EBh
  5877                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5878 00001C7B 7525                    		jnz	short invalid_boot_record ; no
  5879 00001C7D 807F0290                		cmp	byte [bx+2], 90h
  5880                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5881 00001C81 751F                    		jnz	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  5882                                  check_1_ok:
  5883                                  		; 11/08/2023
  5884 00001C83 BB[5901]                		mov	bx, disksector+EXT_BOOT.BPB ; disksector+11
  5885                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5886                                  					; point to the bpb in the boot record
  5887                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5888 00001C86 8A470A                  		mov	al, [bx+10] ; 12/08/2023 
  5889                                  					; get the mediadescriptor byte
  5890 00001C89 24F0                    		and	al, 0F0h	; mask off low nibble
  5891 00001C8B 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5892 00001C8D 7513                    		jnz	short invalid_boot_record ; no, invalid boot record
  5893                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5894 00001C8F 813F0002                		cmp	word [bx], 512 ; 12/08/2023
  5895 00001C93 750D                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5896                                  
  5897                                  check2_ok:				; yes, mediadescriptor ok.
  5898 00001C95 8A4702                  		mov	al, [bx+2] ; 12/08/2023
  5899                                  		;mov	al, [cs:bx+2]	; now make sure that
  5900                                  					; the sectorspercluster is
  5901                                  					; a power of 2
  5902                                  					;
  5903                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5904                                  					; get the sectorspercluster
  5905 00001C98 08C0                    		or	al, al		; is it zero?
  5906 00001C9A 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5907                                  
  5908                                  ck_power_of_two:
  5909 00001C9C D0E8                    		shr	al, 1		; shift until first bit emerges
  5910 00001C9E 73FC                    		jnb	short ck_power_of_two
  5911 00001CA0 740B                    		jz	short valid_boot_record
  5912                                  
  5913                                  invalid_boot_record:
  5914 00001CA2 58                      		pop	ax
  5915 00001CA3 5B                      		pop	bx
  5916 00001CA4 E90901                  		jmp	unknown		; jump to invalid boot record
  5917                                  					; unformatted or illegal media.
  5918                                  
  5919                                  ; ---------------------------------------------------------------------------
  5920                                  	; 12/08/2023
  5921                                  setret_brdg:
  5922 00001CA7 E91DFF                  		jmp	setret
  5923                                  ; ---------------------------------------------------------------------------
  5924                                  
  5925                                  unknown3_0_j:
  5926 00001CAA E90701                  		jmp	unknown3_0	; legally formatted media,
  5927                                  					; although, content might be bad.
  5928                                  ; ---------------------------------------------------------------------------
  5929                                  
  5930                                  valid_boot_record:
  5931 00001CAD 58                      		pop	ax
  5932 00001CAE 5B                      		pop	bx
  5933                                  
  5934                                  ; Signature found. Now check version.
  5935                                  
  5936                                  		; 14/08/2023
  5937 00001CAF 817F08322E              		cmp	word [bx+8], '2.'
  5938                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5939                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5940 00001CB4 7506                    		jnz	short try5
  5941 00001CB6 807F0A30                		cmp	byte [bx+10], '0'
  5942                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5943                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5944                                  		; 12/08/2023
  5945                                  		;jnz	short try5
  5946                                  		;jmp	short copybpb
  5947 00001CBA 7425                    		jz	short copybpb
  5948                                  
  5949                                  ; ---------------------------------------------------------------------------
  5950                                  ;	; 12/08/2023
  5951                                  ;setret_brdg:
  5952                                  ;		jmp	setret
  5953                                  ; ---------------------------------------------------------------------------
  5954                                  ;
  5955                                  ;unknown3_0_j:
  5956                                  ;		jmp	unknown3_0	; legally formatted media,
  5957                                  ;					; although, content might be bad.
  5958                                  ; ---------------------------------------------------------------------------
  5959                                  
  5960                                  try5:
  5961 00001CBC E8A601                  		call	cover_fdisk_bug
  5962                                  
  5963                                  ; see if it is an os2 signature
  5964                                  
  5965                                  		; 12/08/2023
  5966                                  		; ds = cs = BIOSDATA segment
  5967 00001CBF 817F08302E              		cmp	word [bx+8], '0.'
  5968                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5969                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5970 00001CC4 750C                    		jnz	short no_os2
  5971 00001CC6 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  5972                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5973 00001CC9 2C31                    		sub	al, '1'
  5974                                  		;sub	al, 31h		; '1'
  5975 00001CCB 24FE                    		and	al, 0FEh
  5976 00001CCD 7412                    		jz	short copybpb	; accept either	'1' or '2'
  5977 00001CCF E9DE00                  		jmp	unknown
  5978                                  ; ---------------------------------------------------------------------------
  5979                                  
  5980                                  ; no os2 signature, this is to check for real dos versions
  5981                                  
  5982                                  no_os2:
  5983                                  		; 12/08/2023
  5984                                  		; ds = cs = BIOSDATA
  5985 00001CD2 817F08332E              		cmp	word [bx+8], '3.'			
  5986                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5987                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5988 00001CD7 72D1                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5989                                  					; do not trust it, but still legal.
  5990 00001CD9 7506                    		jnz	short copybpb	; honor	os2 boot record
  5991                                  					; or dos 4.0 version
  5992 00001CDB 807F0A31                		cmp	byte [bx+10], '1' ; 12/08/2023
  5993                                  		;cmp	byte [cs:bx+10], '1'
  5994                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5995 00001CDF 72C9                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  5996                                  copybpb:
  5997                                  
  5998                                  ; 03/10/2022
  5999                                  
  6000                                  ; we have a valid boot sector. use the bpb in it to build the
  6001                                  ; bpb in bios. it is assumed that only
  6002                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  6003                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  6004                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  6005                                  ; need to be set (all other values in already). fbigfat is also set.
  6006                                  
  6007                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  6008                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  6009                                  ; and system id according to the boot record.
  6010                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  6011                                  
  6012                                  		; 10/12/2022
  6013                                  		; (number of FATs optimization)
  6014 00001CE1 BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  6015                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  6016                                  		;mov	cl, [cs:si+05h]
  6017                                  		; 12/08/2023
  6018                                  		; ds = cs = BIOSDATA segment (0070h)
  6019 00001CE4 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  6020                                  
  6021 00001CE7 807C1B29                		cmp	byte [si+1Bh], 29h ; 12/08/2023
  6022                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  6023                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  6024                                  					; [disksector+EXT_BOOT.SIG]
  6025                                  					; EXT_BOOT_SIGNATURE
  6026 00001CEB 753C                    		jnz	short copybpb_fat ; conventional fat system
  6027                                  
  6028                                  		; 03/10/2022
  6029                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  6030                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  6031                                  		;	     number of FATs must be 2 ; =*?=
  6032                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  6033                                  		;
  6034                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  6035                                  
  6036                                  		; 10/12/2022
  6037                                  		;cmp	byte [cs:disksector+10h], 0
  6038                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  6039                                  		;jnz	short copybpb_fat ; a fat system.
  6040 00001CED 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  6041 00001CEF 7538                    		jnz	short copybpb_fat ; a fat system.
  6042                                  
  6043                                  ; non fat based	media.
  6044                                  
  6045 00001CF1 57                      		push	di
  6046                                  		; 12/08/2023
  6047                                  		;push	ds  ; ds = cs = BIOSDATA segment
  6048 00001CF2 1E                      		push	ds
  6049 00001CF3 07                      		pop	es
  6050                                  		; 12/08/2023
  6051                                  		; ds = cs
  6052                                  		;push	cs
  6053                                  		;pop	ds
  6054                                  
  6055                                  		; 10/12/2022
  6056                                  		; (number of FATs optimization)
  6057                                  		; SI = disksector+11
  6058                                  		; 17/10/2022
  6059                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6060                                  		;mov	si, disksector+11
  6061 00001CF4 83C706                  		add	di, 6		; add di,BDS.BPB
  6062                                  
  6063                                  ; just for completeness, we'll make sure that total_sectors and
  6064                                  ; big_total_sectors aren't both zero. I've seen examples of
  6065                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  6066                                  ; got that way. If it occurs, then use the values from the
  6067                                  ; partition table.
  6068                                  
  6069                                  		; 18/12/2022
  6070 00001CF7 29C9                    		sub	cx, cx 
  6071                                  
  6072                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  6073                                  		;jnz	short already_nonz 
  6074                                  		;			; how about big_total?
  6075                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  6076                                  		;jnz	short already_nonz ; we're okay if any are != 0
  6077                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6078                                  		;jnz	short already_nonz
  6079                                  
  6080                                  		; 12/08/2023
  6081                                  		; ds = cs = BIOSDATA segment (0070h)
  6082                                  
  6083                                  		; 18/12/2022
  6084                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  6085                                  		; 12/08/2023
  6086 00001CF9 394C08                  		cmp	[si+8], cx ; 0
  6087 00001CFC 751C                    		jnz	short already_nonz
  6088                                  					     	; how about big_total?
  6089                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  6090                                  		; 12/08/2023
  6091 00001CFE 394C15                  		cmp	[si+15h], cx ; 0
  6092 00001D01 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  6093                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6094 00001D03 394C17                  		cmp	[si+17h], cx ; 0
  6095 00001D06 7512                    		jnz	short already_nonz
  6096                                  
  6097                                  ; now let's copy the values from the partition table (now in the BDS)
  6098                                  ; into the BPB in the boot sector buffer, before they get copied back.
  6099                                  
  6100 00001D08 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  6101                                  		; 12/08/2023
  6102                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  6103 00001D0B 894408                  		mov	[si+8], ax
  6104 00001D0E 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  6105                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  6106 00001D11 894415                  		mov	[si+15h], ax
  6107 00001D14 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  6108                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6109 00001D17 894417                  		mov	[si+17h], ax
  6110                                  
  6111                                  already_nonz:	
  6112                                  		; 18/12/2022
  6113                                  		; cx = 0
  6114 00001D1A B119                    		mov	cl, 25
  6115                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  6116 00001D1C F3A4                    		rep movsb
  6117                                  		;pop	ds
  6118                                  		; 12/08/2023
  6119                                  		; ds = cs
  6120                                  		;pop	bp  ; ds (on top of stack) = BIOSDATA
  6121 00001D1E 5F                      		pop	di
  6122                                  		;push	es
  6123                                  		;push	ds
  6124                                  		;pop	es
  6125                                  		;push	cs
  6126                                  		;pop	ds
  6127                                  		; 12/08/2023
  6128                                  		;mov	es, bp
  6129                                  		; ds = cs = es
  6130                                  		
  6131                                  		; 14/08/2023
  6132 00001D1F BD[D407]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  6133                                  		; 18/12/2022
  6134                                  		;mov	bp, mov_media_ids
  6135                                  		;;mov	bp, 751h	; mov_media_ids
  6136                                  					; at 2C7h:751h = 70h:2CC1h
  6137                                  					; set volume id, systemid, serial.
  6138 00001D22 0E                      		push	cs		; simulate far call
  6139 00001D23 E8EDF8                  		call	call_bios_code
  6140                                  		; 12/08/2023
  6141                                  		; ds = cs = es
  6142                                  		;push	es
  6143                                  		;pop	ds
  6144                                  		;pop	es
  6145 00001D26 E93701                  		jmp	goodret
  6146                                  
  6147                                  ; ---------------------------------------------------------------------------
  6148                                  
  6149                                  ; ****** cas ---
  6150                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6151                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6152                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6153                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6154                                  ; from the boot sector into the DPB anyway, we've just been using
  6155                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6156                                  ; we'll go ahead and copy it into the DPB, except in the case
  6157                                  ; that it equals zero, in which case we just use the values in
  6158                                  ; the DPB from the partition table.
  6159                                  
  6160                                  ; 17/10/2022
  6161                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6162                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6163                                  ; 09/12/2022
  6164                                  MOVMEDIAIDS equ mov_media_ids
  6165                                  CLEARIDS equ clear_ids
  6166                                  
  6167                                  copybpb_fat:
  6168                                  		; 10/12/2022
  6169                                  		; (number of FATs optimization)
  6170                                  		; SI = disksector+11
  6171                                  		; 17/10/2022
  6172                                  		;mov	si, disksector+11
  6173                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6174                                  					; cs:si	-> bpb in boot
  6175 00001D29 31D2                    		xor	dx, dx
  6176                                  		; 12/08/2023
  6177                                  		; ds = cs = BIOSDATA segment (0070h)
  6178 00001D2B 8B4408                  		mov	ax, [si+8]
  6179                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6180                                  					; get totsec from boot sec
  6181 00001D2E 09C0                    		or	ax, ax
  6182 00001D30 7514                    		jnz	short copy_totsec ; if non zero, use that
  6183 00001D32 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6184                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6185                                  					; get the big version
  6186                                  					; (32 bit total	sectors)
  6187 00001D35 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6188                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6189                                  		; 10/12/2022
  6190                                  		; (number of FATs optimization)
  6191                                  		; CL = number of FATs (2 or 1) 
  6192 00001D38 89D3                    		mov	bx, dx		; see if it is a big zero
  6193 00001D3A 09C3                    		or	bx, ax
  6194 00001D3C 7508                    		jnz	short copy_totsec
  6195                                  			; screw it. it was bogus.
  6196 00001D3E 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6197 00001D41 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6198 00001D44 EB06                    		jmp	short fat_big_small
  6199                                  
  6200                                  		;mov	cx, dx
  6201                                  		;or	cx, ax		; see if it is a big zero
  6202                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6203                                  copy_totsec:				
  6204 00001D46 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6205                                  					; make DPB match boot sec
  6206 00001D49 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6207                                  
  6208                                  		; 10/12/2022
  6209                                  ;totsec_already_set:			
  6210                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6211                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6212                                  
  6213                                  ; determine fat entry size.
  6214                                  
  6215                                  fat_big_small:
  6216                                  
  6217                                  ;at this moment dx;ax = total sector number
  6218                                  
  6219                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6220                                  ;from the BPB on the disk
  6221                                  		
  6222                                  		; 12/08/2023
  6223                                  		; ds = cs = BIOSDATA segment (0070h)
  6224                                  				
  6225 00001D4C 8B5C03                  		mov	bx, [si+3]
  6226                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6227                                  					; get #reserved_sectors	from BPB
  6228 00001D4F 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6229                                  					; update BDS field
  6230 00001D52 29D8                    		sub	ax, bx
  6231 00001D54 83DA00                  		sbb	dx, 0		; update the count
  6232                                  		; 12/08/2023
  6233 00001D57 8B5C0B                  		mov	bx, [si+0Bh]
  6234                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6235                                  					; bx = sectors/fat
  6236 00001D5A 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6237                                  					; set in bds bpb
  6238                                  		; 10/12/2022
  6239                                  		; (number of FATs optimization)
  6240                                  		; CL = number of FATs (2 or 1) 
  6241                                  		;dec	cl ; *
  6242                                  		; 18/12/2022
  6243 00001D5D 49                      		dec	cx ; *
  6244 00001D5E D3E3                    		shl	bx, cl
  6245                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6246                                  		
  6247 00001D60 29D8                    		sub	ax, bx		; sub #	fat sectors
  6248 00001D62 83DA00                  		sbb	dx, 0
  6249 00001D65 8B5C06                  		mov	bx, [si+6] ; 12/08/2023
  6250                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6251                                  					; # root entries
  6252 00001D68 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6253                                  					; set in bds bpb
  6254 00001D6B B104                    		mov	cl, 4
  6255 00001D6D D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6256 00001D6F 29D8                    		sub	ax, bx		; sub #	dir sectors
  6257 00001D71 83DA00                  		sbb	dx, 0		;
  6258                                  					; dx:ax	now contains the
  6259                                  					; # of data sectors
  6260 00001D74 31C9                    		xor	cx, cx ; *
  6261 00001D76 8A4C02                  		mov	cl, [si+2] ; 12/08/2023
  6262                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6263                                  					; sectors per cluster
  6264 00001D79 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6265                                  					; set in bios bpb
  6266 00001D7C 50                      		push	ax
  6267 00001D7D 89D0                    		mov	ax, dx
  6268 00001D7F 31D2                    		xor	dx, dx
  6269 00001D81 F7F1                    		div	cx		; cx = sectors per cluster
  6270                                  		; 12/08/2023 (ds=cs)
  6271 00001D83 A3[2105]                		mov	[temp_h], ax
  6272                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6273                                  					; # clusters.
  6274 00001D86 58                      		pop	ax
  6275 00001D87 F7F1                    		div	cx
  6276                                  		;cmp	word [cs:temp_h], 0
  6277 00001D89 833E[2105]00            		cmp	word [temp_h], 0  ; 12/08/2023
  6278 00001D8E 7718                    		ja	short toobig_ret ; too big cluster number
  6279 00001D90 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6280                                  					; is this 16-bit fat?
  6281 00001D93 7205                    		jb	short copymediaid ; no,	small fat
  6282                                  		; 17/10/2022
  6283 00001D95 800E[8815]40            		or	byte [fbigfat], 40h
  6284                                  		;or	ds:fbigfat, 40h	; fbig
  6285                                  					; 16 bit fat
  6286                                  copymediaid:
  6287 00001D9A 06                      		push	es
  6288 00001D9B 1E                      		push	ds
  6289 00001D9C 07                      		pop	es
  6290                                  		; 12/08/2023
  6291                                  		; ds = cs = BIOSDATA
  6292                                  		;push	cs
  6293                                  		;pop	ds
  6294                                  		; 17/10/2022
  6295 00001D9D BD[D407]                		mov	bp, MOVMEDIAIDS
  6296                                  		;mov	bp, 751h	; mov_media_ids
  6297                                  					; at 2C7h:751h = 70h:2CC1h
  6298                                  					; copy filesys_id, volume label
  6299 00001DA0 0E                      		push	cs		; simulate far call
  6300 00001DA1 E86FF8                  		call	call_bios_code
  6301                                  		; 12/08/2023
  6302                                  		;push	es
  6303                                  		;pop	ds
  6304 00001DA4 07                      		pop	es
  6305 00001DA5 E99A00                  		jmp	massage_bpb	; now final check for bpb info
  6306                                  					; and return.
  6307                                  ; ---------------------------------------------------------------------------
  6308                                  
  6309                                  toobig_ret:
  6310                                  		; 12/08/2023 (ds=cs=BIOSDATA)
  6311 00001DA8 800E[8815]80            		or	byte [fbigfat], 80h ; ftoobig
  6312                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6313                                  					; too big (32 bit clust #) for FAT16
  6314 00001DAD E9B000                  		jmp	goodret		; still	drive letter is	assigned
  6315                                  					; but useless. to big for
  6316                                  					; current pc dos fat file system
  6317                                  ; ---------------------------------------------------------------------------
  6318                                  
  6319                                  unknown:
  6320                                  		; 12/12/2022
  6321 00001DB0 804D2402                		or	byte [di+24h], 02h			
  6322                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6323                                  					; unformatted_media
  6324                                  					; Set unformatted media	flag.
  6325                                  
  6326                                  ; the boot signature may not be	recognizable,
  6327                                  ; but we should	try and	read it	anyway.
  6328                                  
  6329                                  unknown3_0:
  6330 00001DB4 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6331                                  					; [di+BDS.totalsecs32+2]
  6332 00001DB7 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6333 00001DBA BE[B815]                		mov	si, disktable2
  6334                                  scan:					; 08/08/2023
  6335                                  		;cmp	dx, [cs:si]	; total sectors hw
  6336                                  		; 12/08/2023 (ds=cs)
  6337 00001DBD 3B14                    		cmp	dx, [si] 
  6338 00001DBF 720C                     		jb	short gotparm
  6339 00001DC1 7705                    		ja	short scan_next
  6340                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6341 00001DC3 3B4402                  		cmp	ax, [si+2]
  6342 00001DC6 7605                    		jbe	short gotparm
  6343                                  scan_next:				
  6344 00001DC8 83C60A                  		add	si, 10		; 5*2
  6345 00001DCB EBF0                    		jmp	short scan	; covers upto 512 mb media
  6346                                  ; ---------------------------------------------------------------------------
  6347                                  
  6348                                  gotparm:
  6349 00001DCD 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6350                                  		;or	ds:fbigfat, cl
  6351                                  		; 17/10/2022
  6352 00001DD0 080E[8815]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6353                                  		; 12/08/2023
  6354                                  		; ds = cs = BIOSDATA
  6355 00001DD4 8B4C04                  		mov	cx, [si+4]
  6356                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6357                                  					; cl = log base 2 of ch
  6358 00001DD7 8B5406                  		mov	dx, [si+6]
  6359                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6360                                  
  6361                                  ; now calculate size of fat table
  6362                                  
  6363 00001DDA 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6364                                  					; save number of (root)	dir entries
  6365 00001DDD 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6366 00001DE0 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6367 00001DE3 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6368                                  					; save sectors per cluster
  6369                                  		
  6370                                  		; 05/08/2023 - Retro DOS v4.2 IO:SYS (optimization)
  6371 00001DE6 8A1E[8815]              		mov	bl, [fbigfat]
  6372 00001DEA 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6373 00001DED F6C340                  		test	bl, 40h
  6374                                  		; 17/10/2022
  6375                                  		;test	byte [fbigfat], 40h
  6376                                  		;;test	ds:fbigfat, 40h	; fbig
  6377                                  					; if (fbigfat)
  6378 00001DF0 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6379                                  
  6380                                  ; we don't need to change "small fat" logic since it is guaranteed
  6381                                  ; that double word total sector will not use 12 bit fat (unless
  6382                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6383                                  ; so in this case we assume dx = 0 !!
  6384                                  
  6385 00001DF2 31DB                    		xor	bx, bx		; 12 bit fat (FAT12 fs)
  6386 00001DF4 88EB                    		mov	bl, ch
  6387 00001DF6 4B                      		dec	bx
  6388 00001DF7 01C3                    		add	bx, ax		; dx=0
  6389 00001DF9 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6390 00001DFB 43                      		inc	bx		; BDS.secperclus
  6391 00001DFC 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6392 00001DFF 89DE                    		mov	si, bx
  6393 00001E01 D1EB                    		shr	bx, 1
  6394 00001E03 01F3                    		add	bx, si		; number of FAT bytes ; 08/08/2023
  6395 00001E05 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6396 00001E09 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6397 00001E0B 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6398                                  					; save number of fat sectors
  6399 00001E0E EB32                    		jmp	short massage_bpb
  6400                                  ; ---------------------------------------------------------------------------
  6401                                  
  6402                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6403                                  
  6404                                  dobig:					
  6405 00001E10 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6406 00001E12 52                      		push	dx		; save total sectors (high)
  6407 00001E13 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6408 00001E16 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6409 00001E18 29D0                    		sub	ax, dx
  6410 00001E1A 5A                      		pop	dx
  6411 00001E1B 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6412 00001E1E 83E801                  		sub	ax, 1
  6413 00001E21 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6414                                  					; total	secs - reserved	secs - root dir	secs
  6415 00001E24 B302                    		mov	bl, 2
  6416 00001E26 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6417                                  					; bx = 256 * BDS.secperclus + 2
  6418                                  
  6419                                  ; I don't understand why to add bx here!!!
  6420                                  
  6421                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6422                                  		; 27/09/2022
  6423                                  		; (Microsoft FAT32 File	System Specification,
  6424                                  		; December 2000, Page 21)
  6425                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6426                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6427                                  		; 8/8/2023 (Retro DOS v5.0)
  6428                                  		; If(FATType == FAT32)
  6429                                  		;   TmpVal2 = TmpVal2 / 2;
  6430                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6431                                  		; 8/8/2023 (Retro DOS v5.0)
  6432                                  		; If(FATType == FAT32) {
  6433                                  		;   BPB_FATSz16 = 0;
  6434                                  		;   BPB_FATSz32 = FATSz;
  6435                                  		;} else {
  6436                                  		;   BPB_FATSz16 = LOWORD(FATSz);
  6437                                  		;/* there is no BPB_FATSz32 in a FAT16 BPB */
  6438                                  		;}
  6439                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6440 00001E29 01D8                    		add	ax, bx		; 
  6441 00001E2B 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6442 00001E2E 83E801                  		sub	ax, 1		
  6443 00001E31 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6444                                  
  6445                                  ; assuming dx in the table will never be bigger than bx.
  6446                                  
  6447 00001E34 F7F3                    		div	bx		; BDS.fatsecs =
  6448                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6449 00001E36 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6450                                  					; number of fat	sectors
  6451                                  
  6452                                  ; now, set the default filesys_id, volume label, serial number
  6453                                  
  6454                                  		; 05/08/2023
  6455                                  		; [di+1Fh] = [fbigfat]
  6456                                  		;
  6457                                  		;;mov	bl, ds:fbigfat
  6458                                  		;; 17/10/2022
  6459                                  		;mov	bl, [fbigfat]
  6460                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6461                                  
  6462                                  		; 12/08/2023
  6463                                  		;push	ds ; ds = cs = BIOSDATA
  6464 00001E39 1E                      		push	ds
  6465 00001E3A 07                      		pop	es
  6466                                  		; 12/08/2023 
  6467                                  		; ds = cs = BIOSDATA
  6468                                  		;push	cs
  6469                                  		;pop	ds
  6470                                  		; 17/10/2022
  6471 00001E3B BD[6A06]                		mov	bp, CLEARIDS
  6472                                  		;mov	bp, 5D9h	; clear_ids
  6473                                  					; at 2C7h:5D9h = 70h:2B49h
  6474                                  					; at BIOSCODE:06ABh
  6475                                  					;	in PCDOS 7.1 IBMBIO.COM
  6476 00001E3E 0E                      		push	cs
  6477 00001E3F E8D1F7                  		call	call_bios_code
  6478                                  
  6479                                  		; 12/08/2023
  6480                                  		;pop	ds ; ds = cs = BIOSDATA
  6481                                  
  6482                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6483                                  ; set according to the partition information. we are going to
  6484                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6485                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6486                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6487                                  ; we don't do this for the bpb information from the boot record. we
  6488                                  ; are not going to change the bpb information from the boot record.
  6489                                  
  6490                                  massage_bpb:
  6491                                  		; 05/08/2023
  6492                                  		; [di+1Fh] = [fbigfat]
  6493                                  		;
  6494                                  		;; 12/12/2022
  6495                                  		;mov	bl, [fbigfat]
  6496                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6497                                  		;			; set size of fat on media
  6498                                  		;
  6499 00001E42 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6500 00001E45 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6501 00001E48 83FA00                  		cmp	dx, 0		; double word total sectors?
  6502                                  		;ja	short goodret	; don't have to change it.
  6503                                  		; 12/12/2022
  6504 00001E4B 7714                    		ja	short short goodret2
  6505                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6506                                  		;ja	short goodret	; don't have to change it.
  6507                                  		; 12/12/2022
  6508 00001E4D 395519                  		cmp	[di+19h], dx ; 0
  6509 00001E50 770F                    		ja	short goodret2
  6510 00001E52 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6511                                  		;jb	short goodret
  6512                                  		; 12/12/2022
  6513 00001E55 7209                    		jc	short goodret
  6514 00001E57 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6515 00001E5A 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6516                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6517                                  		; 12/12/2022
  6518 00001E5D 89551B                  		mov	[di+1Bh], dx ; 0 
  6519                                  goodret:
  6520                                  		;;mov	bl, ds:fbigfat
  6521                                  		; 12/12/2022
  6522                                  		;; 17/10/2022
  6523                                  		;mov	bl, [fbigfat]
  6524                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6525                                  		;			; set size of fat on media
  6526 00001E60 F8                      		clc
  6527                                  ret_hard_err:
  6528                                  		; 12/12/2022
  6529                                  goodret2:
  6530 00001E61 07                      		pop	es
  6531                                  		;pop	ds	; ds = cs = BIOSDATA ; 12/08/2023
  6532 00001E62 5B                      		pop	bx
  6533 00001E63 5F                      		pop	di
  6534 00001E64 C3                      		retn
  6535                                  
  6536                                  ; =============== S U B	R O U T	I N E =======================================
  6537                                  
  6538                                  ; 15/10/2022
  6539                                  
  6540                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6541                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6542                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6543                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6544                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6545                                  
  6546                                  		; 17/10/2022
  6547                                  cover_fdisk_bug:
  6548                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6549                                  		; ds = cs
  6550 00001E65 50                      		push	ax
  6551 00001E66 52                      		push	dx
  6552 00001E67 56                      		push	si
  6553                                  		; 12/08/2023
  6554 00001E68 803E[7401]29            		cmp	byte [disksector+26h], 29h
  6555                                  		;cmp	byte [cs:disksector+26h], 29h
  6556                                  					; [disksector+EXT_BOOT.SIG],
  6557                                  					; EXT_BOOT_SIGNATURE
  6558 00001E6D 742B                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6559 00001E6F 817F073130              		cmp	word [bx+7], 3031h
  6560                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6561 00001E74 7506                    		jnz	short cfb_chk_totalsecs ; 11/08/2023
  6562 00001E76 807F0A30                		cmp	byte [bx+10], '0'
  6563                                  		;cmp	byte [cs:bx+10], '0'
  6564 00001E7A 751E                    		jnz	short cfb_retit
  6565                                  cfb_chk_totalsecs:	; 11/08/2023
  6566                                  		; 17/10/2022		
  6567 00001E7C BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6568                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6569                                  		; 12/08/2023
  6570 00001E7F 837C0800                		cmp	word [si+8], 0
  6571                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6572                                  					; just to make sure.
  6573 00001E83 7415                    		jz	short cfb_retit
  6574                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6575                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6576                                  		; 12/08/2023
  6577 00001E85 8B4408                  		mov	ax, [si+8]
  6578 00001E88 034411                  		add	ax, [si+11h]
  6579                                  
  6580 00001E8B 730D                    		jnb	short cfb_retit
  6581 00001E8D 750B                    		jnz	short cfb_retit
  6582                                  					; if carry set and ax=0
  6583 00001E8F FF4C08                  		dec	word [si+8]
  6584                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6585                                  					; then decrease	BPB_TOTALSECTORS by 1
  6586 00001E92 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6587 00001E96 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6588                                  cfb_retit:				
  6589 00001E9A 5E                      		pop	si
  6590 00001E9B 5A                      		pop	dx
  6591 00001E9C 58                      		pop	ax
  6592 00001E9D C3                      		retn
  6593                                  
  6594                                  ; ---------------------------------------------------------------------------
  6595                                  
  6596 00001E9E 0200                    word2:		dw 2
  6597 00001EA0 0300                    word3:		dw 3
  6598 00001EA2 0002                    word512:	dw 512
  6599                                  
  6600                                  ; =============== S U B	R O U T	I N E =======================================
  6601                                  
  6602                                  ; 15/10/2022
  6603                                  
  6604                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6605                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6606                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6607                                  ; as the bpb on the drive.
  6608                                  ;
  6609                                  ; no attempt is made to preserve registers since we are going to jump to
  6610                                  ; sysinit straight after this routine.
  6611                                  
  6612                                  setdrvparms:
  6613 00001EA4 31DB                    		xor	bx, bx
  6614                                  		; 18/10/2022
  6615 00001EA6 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6616                                  _next_bds:				
  6617 00001EAA 06                      		push	es
  6618 00001EAB 57                      		push	di
  6619 00001EAC 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6620 00001EB0 80FB05                  		cmp	bl, 5		; ffHardFile
  6621 00001EB3 753E                    		jnz	short nothardff
  6622 00001EB5 31D2                    		xor	dx, dx
  6623 00001EB7 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6624 00001EBB 09C0                    		or	ax, ax
  6625 00001EBD 7508                    		jnz	short get_ccyl
  6626 00001EBF 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6627 00001EC3 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6628                                  
  6629                                  get_ccyl:				
  6630 00001EC7 52                      		push	dx
  6631 00001EC8 50                      		push	ax
  6632 00001EC9 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6633 00001ECD 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6634                                  					; assume sectors per cyl. < 64k.
  6635 00001ED1 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6636 00001ED3 58                      		pop	ax
  6637 00001ED4 5A                      		pop	dx		; dx:ax = total sectors
  6638 00001ED5 50                      		push	ax
  6639 00001ED6 89D0                    		mov	ax, dx
  6640 00001ED8 31D2                    		xor	dx, dx
  6641 00001EDA F7F1                    		div	cx
  6642 00001EDC 2EA3[2105]              		mov	[cs:temp_h], ax
  6643 00001EE0 58                      		pop	ax
  6644 00001EE1 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6645 00001EE3 09D2                    		or	dx, dx
  6646 00001EE5 7401                    		jz	short no_cyl_rnd ; came out even
  6647 00001EE7 40                      		inc	ax		; round up
  6648                                  
  6649                                  no_cyl_rnd:				
  6650 00001EE8 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6651 00001EEC 06                      		push	es
  6652 00001EED 1F                      		pop	ds
  6653 00001EEE 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6654                                  					; ds:si -> bpb for hard file
  6655 00001EF1 EB55                    		jmp	short set_recbpb
  6656                                  ; ---------------------------------------------------------------------------
  6657                                  
  6658                                  nothardff:				
  6659 00001EF3 0E                      		push	cs
  6660 00001EF4 1F                      		pop	ds
  6661                                  
  6662                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6663                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6664                                  
  6665                                  		; 10/12/2022
  6666                                  		; ds = cs
  6667                                  		; 17/10/2022 (ds=cs)
  6668 00001EF5 803E[8F15]01            		cmp	byte [fakefloppydrv], 1
  6669                                  		;cmp	byte [cs:fakefloppydrv], 1
  6670 00001EFA 7454                    		jz	short go_to_next_bds
  6671 00001EFC 80FB07                  		cmp	bl, 7		; ffother
  6672                                  					; special case "other" type of medium
  6673 00001EFF 753D                    		jnz	short not_process_other
  6674                                  process_other:
  6675 00001F01 31D2                    		xor	dx, dx
  6676 00001F03 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6677 00001F06 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6678 00001F09 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6679 00001F0C 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6680                                  					; have the total number of sectors
  6681 00001F0F 48                      		dec	ax
  6682 00001F10 B201                    		mov	dl, 1
  6683                                  _again:					
  6684 00001F12 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6685 00001F15 7206                    		jb	short _@@
  6686 00001F17 D1E8                    		shr	ax, 1
  6687 00001F19 D0E2                    		shl	dl, 1
  6688 00001F1B EBF5                    		jmp	short _again
  6689                                  ; ---------------------------------------------------------------------------
  6690                                  
  6691                                  _@@:					
  6692 00001F1D 80FA01                  		cmp	dl, 1		; is it a small disk ?
  6693 00001F20 7405                    		jz	short __@@	; yes, 224 root entries is enuf
  6694 00001F22 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6695                                  __@@:					
  6696 00001F27 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6697                                  
  6698                                  ; logic to get the sectors/fat area.
  6699                                  ; fat entry is assumed to be 1.5 bytes!!!
  6700                                  
  6701                                  		; 10/12/2022
  6702                                  		; ds = cs
  6703                                  		; 17/10/2022 (ds=cs)
  6704 00001F2A F726[A01E]              		mul	word [word3]
  6705 00001F2E F736[9E1E]              		div	word [word2]
  6706 00001F32 31D2                    		xor	dx, dx
  6707 00001F34 F736[A21E]              		div	word [word512]
  6708                                  		;
  6709                                  		; 10/12/2022
  6710                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6711                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6712                                  		;xor	dx, dx
  6713                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6714                                  		;
  6715 00001F38 40                      		inc	ax		; + 1
  6716                                  no_round_up:
  6717 00001F39 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6718 00001F3C EB12                    		jmp	short go_to_next_bds
  6719                                  ; ---------------------------------------------------------------------------
  6720                                  
  6721                                  not_process_other:			
  6722 00001F3E D1E3                    		shl	bx, 1		; bx is word index into table of bpbs
  6723                                  		;mov	si, bpbtable
  6724                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6725                                  		; 09/12/2022
  6726                                  		;mov	si, BPBTABLE
  6727                                  		;mov	si, [bx+si]	; get address of bpb
  6728                                  		; 10/12/2022
  6729                                  		;mov	si, [BPBTABLE+bx]
  6730                                  		; 13/12/2022
  6731                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6732                                  		; 14/08/2023
  6733                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6734                                  							; correct offset
  6735 00001F40 8BB7[6286]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6736                                  
  6737                                  		; 28/08/2023
  6738 00001F44 81C6E03B                		add	si, SYSINIT_OFFSET
  6739                                  set_recbpb:				
  6740 00001F48 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6741                                  					; es:di -> recbpb
  6742 00001F4B B91900                  		mov	cx, 25		; bpbx.size
  6743 00001F4E F3A4                    		rep movsb		; move (size bpbx) bytes
  6744                                  go_to_next_bds:				
  6745 00001F50 5F                      		pop	di
  6746 00001F51 07                      		pop	es		; restore pointer to bds
  6747 00001F52 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6748 00001F55 83FFFF                  		cmp	di, 0FFFFh	; -1
  6749 00001F58 740A                    		jz	short got_end_of_bds_chain
  6750 00001F5A E94DFF                  		jmp	_next_bds
  6751                                  ; ---------------------------------------------------------------------------
  6752                                  
  6753                                  		; 18/12/2022
  6754                                  ;got_end_of_bds_chain:			
  6755                                  		;retn
  6756                                  
  6757                                  ; =============== S U B	R O U T	I N E =======================================
  6758                                  
  6759                                  ; 15/10/2022
  6760                                  ; 30/12/2018 - Retro DOS v4.0
  6761                                  
  6762                                  ; al = device number
  6763                                  
  6764                                  print_init:	
  6765 00001F5D 98                      		cbw
  6766 00001F5E 89C2                    		mov	dx, ax
  6767 00001F60 B401                    		mov	ah, 1
  6768 00001F62 CD17                    		int	17h		; PRINTER - INITIALIZE
  6769                                  					; DX = printer port (0-3)
  6770                                  					; Return: AH = status
  6771                                  got_end_of_bds_chain:	; 18/12/2022
  6772 00001F64 C3                      		retn
  6773                                  
  6774                                  ; =============== S U B	R O U T	I N E =======================================
  6775                                  
  6776                                  ; al = device number
  6777                                  
  6778                                  aux_init:
  6779 00001F65 98                      		cbw
  6780 00001F66 89C2                    		mov	dx, ax
  6781                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6782                                  					; 2400,n,1,8 (msequ.inc)
  6783                                  		;mov	ah, 0
  6784                                  		; 10/12/2022
  6785 00001F68 B8A300                  		mov	ax, 00A3h
  6786 00001F6B CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6787                                  					; 	AL = initializing parameters,
  6788                                  					;	DX = port number (0-3)
  6789                                  					; Return: AH = RS-232 status code bits,
  6790                                  					;	  AL = modem status bits
  6791 00001F6D C3                      		retn
  6792                                  
  6793                                  ; =============== S U B	R O U T	I N E =======================================
  6794                                  
  6795                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6796                                  ; 30/12/2018 - Retro DOS v4.0
  6797                                  ; 03/06/2018 - Retro DOS v3.0
  6798                                  ; (19/03/2018 - Retro DOS v2.0)
  6799                                  
  6800                                  ; domini **********************************************************************
  6801                                  ;
  6802                                  ;mini disk initialization routine. called right after dohard
  6803                                  ;modified for >2 hardfile support
  6804                                  ;
  6805                                  ; **cs=ds=es=datagrp
  6806                                  ;
  6807                                  ; **domini will search for every extended partition in the system, and
  6808                                  ;   initialize it.
  6809                                  ;
  6810                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6811                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6812                                  ;   address of bdsm table.
  6813                                  ;
  6814                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6815                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6816                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6817                                  ;
  6818                                  ; **domini will use the same routine in sethard routine after label set2 to
  6819                                  ;   save coding.
  6820                                  ;
  6821                                  ; **drvmax determined in dohard routine will be used for the next
  6822                                  ;   available logical mini disk drive number.
  6823                                  ;
  6824                                  ; input: drvmax, dskdrvs
  6825                                  ;
  6826                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6827                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6828                                  ;
  6829                                  ; called modules:
  6830                                  ;		  getboot
  6831                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6832                                  ;
  6833                                  ;		  setmini (new, it will use set2 routine)
  6834                                  ;
  6835                                  ; variables used: end_of_bdsm
  6836                                  ;		  rom_minidisk_num
  6837                                  ;		  mini_hdlim, mini_seclim
  6838                                  ;		  BDS_STRUC, start_bds
  6839                                  ;
  6840                                  ;******************************************************************************
  6841                                  
  6842                                  		; 19/10/2022
  6843                                  domini:	
  6844 00001F6E 8A36[FF15]              		mov	dh, [hnum]	; get number of hardfiles
  6845                                  		; 10/12/2022
  6846 00001F72 20F6                    		and	dh, dh
  6847                                  		;cmp	dh, 0
  6848 00001F74 7430                    		jz	short dominiret	; no hard file?	then exit.
  6849 00001F76 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6850                                  domini_loop:				
  6851 00001F78 52                      		push	dx
  6852 00001F79 8816[FE15]              		mov	[rom_minidisk_num], dl
  6853 00001F7D B408                    		mov	ah, 8
  6854 00001F7F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6855                                  					; DL = drive number
  6856                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6857                                  					; DL = number of consecutive drives
  6858                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6859                                  		
  6860                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6861                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B36h
  6862                                  		;inc	dh
  6863                                  		;xor	ax, ax
  6864                                  		;mov	al, dh
  6865 00001F81 31C0                    		xor	ax, ax
  6866 00001F83 88F0                    		mov	al, dh	; <= 255
  6867 00001F85 40                      		inc	ax	; (0FFh -> 100h)
  6868 00001F86 A3[0416]                		mov	[mini_hdlim], ax ; # of heads
  6869                                  		;and	cl, 3Fh
  6870                                  		;mov	al, cl
  6871                                  		; 08/08/2023
  6872 00001F89 88C8                    		mov	al, cl
  6873 00001F8B 83E03F                  		and	ax, 3Fh
  6874 00001F8E A3[0616]                		mov	[mini_seclim], ax ; # of sectors/track
  6875 00001F91 06                      		push	es
  6876 00001F92 8A16[FE15]              		mov	dl, [rom_minidisk_num]
  6877 00001F96 E886FB                  		call	getboot		; read master boot record into
  6878                                  					; initbootsegment:bootbias
  6879 00001F99 7203                    		jb	short domininext
  6880 00001F9B E80900                  		call	find_mini_partition
  6881                                  domininext:				
  6882 00001F9E 07                      		pop	es
  6883 00001F9F 5A                      		pop	dx
  6884 00001FA0 FEC2                    		inc	dl		; next hard file
  6885 00001FA2 FECE                    		dec	dh
  6886 00001FA4 75D2                    		jnz	short domini_loop
  6887                                  dominiret:				
  6888 00001FA6 C3                      		retn
  6889                                  
  6890                                  ; =============== S U B	R O U T	I N E =======================================
  6891                                  
  6892                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6893                                  ; 30/12/2018 - Retro DOS v4.0
  6894                                  
  6895                                  ;find_mini_partition tries to find every extended partition on a disk.
  6896                                  ;at entry:	di -> bdsm entry
  6897                                  ;		es:bx -> 07c0:bootbias - master boot record
  6898                                  ;		rom_minidisk_num - rom drive number
  6899                                  ;		drvmax - logical drive number
  6900                                  ;		mini_hdlim, mini_seclim
  6901                                  ;
  6902                                  ;called routine: setmini which uses set2 (in sethard routine)
  6903                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6904                                  
  6905                                  find_mini_partition:	
  6906 00001FA7 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6907                                  fmpnext:				
  6908 00001FAB 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6909 00001FAF 740A                    		jz	short fmpgot
  6910 00001FB1 83C310                  		add	bx, 16
  6911 00001FB4 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6912 00001FB8 75F1                    		jnz	short fmpnext
  6913                                  		;jmp	short fmpnextfound ; extended partition	not found
  6914                                  		; 18/12/2022
  6915                                  fmpnextfound:
  6916 00001FBA C3                      		retn
  6917                                  
  6918                                  ;		; 30/07/2019 - Retro DOS v3.2
  6919                                  ;		jb	short fmpnext
  6920                                  ;fmpret:
  6921                                  ;		retn	; 29/05/2019
  6922                                  
  6923                                  ; ---------------------------------------------------------------------------
  6924                                  
  6925                                  		; 19/10/2022
  6926                                  fmpgot:					; found my partition.				
  6927 00001FBB E8A500                  		call	dmax_check	; check	for drvmax already 26
  6928 00001FBE 73FA                    		jnb	short fmpnextfound ; done if too many
  6929 00001FC0 8B3E[0216]              		mov	di, [end_of_bdss] ; get next free bds
  6930 00001FC4 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6931                                  		; 10/12/2022
  6932 00001FC9 804D2301                		or	byte [di+23h], 1
  6933                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6934                                  					; fNon_Removable
  6935 00001FCD C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6936                                  					; ffHardFile
  6937 00001FD1 C606[8815]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6938 00001FD6 A1[0416]                		mov	ax, [mini_hdlim]
  6939 00001FD9 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6940 00001FDC A1[0616]                		mov	ax, [mini_seclim]
  6941 00001FDF 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6942 00001FE2 A0[FE15]                		mov	al, [rom_minidisk_num]
  6943 00001FE5 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6944                                  					; set physical number
  6945 00001FE8 A0[7500]                		mov	al, [drvmax]
  6946 00001FEB 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6947                                  					; set logical number
  6948 00001FEE 26837F0A00              		cmp	word [es:bx+10], 0
  6949 00001FF3 7707                    		ja	short fmpgot_cont
  6950 00001FF5 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6951                                  					; only lower word is meaningful.
  6952 00001FFA 72BE                    		jb	short fmpnextfound
  6953                                  					; should be bigger than 64 sectors at least
  6954                                  fmpgot_cont:				
  6955 00001FFC 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6956 00001FFF 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6957 00002003 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6958 00002006 D0C6                    		rol	dh, 1
  6959 00002008 D0C6                    		rol	dh, 1
  6960 0000200A 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6961 0000200E 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6962                                  					; set hidden trks
  6963 00002011 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6964 00002015 268A7701                		mov	dh, [es:bx+1]	; head
  6965 00002019 8A16[FE15]              		mov	dl, [rom_minidisk_num]
  6966 0000201D BB0002                  		mov	bx, 200h	; bootbias
  6967 00002020 B80102                  		mov	ax, 201h
  6968 00002023 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6969                                  					; AL = number of sectors to read, CH = track, CL = sector
  6970                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6971                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6972 00002025 7293                    		jc	short fmpnextfound
  6973 00002027 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6974                                  
  6975                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6976                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C7Ch
  6977 0000202A 26817F3C55AA            		cmp	word [es:bx+3Ch], 0AA55h ; 03C2h+03Ch = 3FEh
  6978 00002030 7588                    		jne	short fmpnextfound ; not a valid boot sector !
  6979                                  
  6980                                  		; 13/08/2023
  6981                                  		;push	es
  6982 00002032 E80800                  		call	setmini		; install a mini disk.
  6983                                  					; bx value saved.
  6984                                  		;pop	es  ; 13/08/2023
  6985 00002035 7203                    		jc	short fmpnextchain
  6986 00002037 E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  6987                                  fmpnextchain:
  6988 0000203A E96EFF                  		jmp	fmpnext		; let's find out
  6989                                  					; if we	have any chained partition
  6990                                  ; ---------------------------------------------------------------------------
  6991                                  
  6992                                  		; 18/12/2022
  6993                                  ;fmpnextfound:				
  6994                                  		;retn
  6995                                  
  6996                                  ; =============== S U B	R O U T	I N E =======================================
  6997                                  
  6998                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6999                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  7000                                  
  7001                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  7002                                  	
  7003 0000203D 57                      		push	di
  7004 0000203E 53                      		push	bx
  7005                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  7006                                  		; ds = cs = BIOSDATA segment
  7007                                  		;push	ds
  7008 0000203F 06                      		push	es
  7009                                  setmini_1:				
  7010 00002040 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  7011 00002044 741A                    		jz	short setmini_2
  7012 00002046 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  7013 0000204A 7414                    		jz	short setmini_2
  7014 0000204C 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG partition
  7015 00002050 740E                    		jz	short setmini_2
  7016 00002052 83C310                  		add	bx, 16
  7017 00002055 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7018 00002059 75E5                    		jnz	short setmini_1
  7019 0000205B F9                      		stc
  7020 0000205C 07                      		pop	es
  7021                                  		; 12/08/2023
  7022                                  		;pop	ds
  7023 0000205D 5B                      		pop	bx
  7024 0000205E 5F                      		pop	di
  7025 0000205F C3                      		retn
  7026                                  
  7027                                  ; ---------------------------------------------------------------------------
  7028                                  setmini_2:
  7029 00002060 E968FB                  		jmp	set2		; branch into middle of sethard
  7030                                  
  7031                                  ; =============== S U B	R O U T	I N E =======================================
  7032                                  
  7033                                  ; 15/10/2022
  7034                                  ; 28/12/2018 - Retro DOS v4.0
  7035                                  ;
  7036                                  ; dmax_check --- call this when we want to install a new drive.
  7037                                  ;		it checks for drvmax < 26 to see if there is
  7038                                  ;		a drive letter left.
  7039                                  ;
  7040                                  ;	drvmax < 26 : carry SET!
  7041                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  7042                                  ;			trash ax
  7043                                  
  7044                                  dmax_check:
  7045 00002063 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  7046 00002068 720D                    		jb	short dmax_ok	; returns with carry if okay
  7047 0000206A 06                      		push	es
  7048                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  7049 0000206B B82E04                  		mov	ax, SYSINITSEG	; 17/10/2022	
  7050 0000206E 8EC0                    		mov	es, ax
  7051                                  		; 18/10/2022
  7052 00002070 26C606[8103]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  7053                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  7054                                  					; set message flag
  7055                                  					; [SYSINIT+toomanydrivesflag]
  7056 00002076 07                      		pop	es
  7057                                  
  7058                                  		;;push	es
  7059                                  		;;mov	ax,SYSINIT_SEG
  7060                                  		;;mov	es,ax
  7061                                  		;;mov	byte [es:toomanydrivesflag],1
  7062                                  					; set message flag
  7063                                  		;;pop	es
  7064                                  		;
  7065                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  7066                                  dmax_ok:
  7067 00002077 C3                      		retn
  7068                                  
  7069                                  ; =============== S U B	R O U T	I N E =======================================
  7070                                  
  7071                                  ; 18/10/2022
  7072                                  ; 15/10/2022
  7073                                  ; 28/12/2018 - Retro DOS v4.0						
  7074                                  ;								 
  7075                                  ;	link next bds (at ds:di) into the chain. assume that the
  7076                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  7077                                  ;	  dskdrv_table, and end_of_bdss.	
  7078                                  
  7079                                  xinstall_bds:		
  7080 00002078 56                      		push	si
  7081 00002079 53                      		push	bx
  7082 0000207A 8B36[1901]              		mov	si, [start_bds]	; get first bds
  7083                                  xinstall_bds_1:				
  7084 0000207E 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  7085 00002081 7404                    		jz	short xinstall_bds_2 ; skip ahead if so
  7086                                  		;mov	si, [si+BDS.link]
  7087 00002083 8B34                    		mov	si, [si]	; chain	through	list
  7088 00002085 EBF7                    		jmp	short xinstall_bds_1
  7089                                  ; ---------------------------------------------------------------------------
  7090                                  
  7091                                  xinstall_bds_2:				
  7092                                  		;mov	[si+BDS.link], di
  7093 00002087 893C                    		mov	[si], di
  7094                                  		;mov	[si+BDS.link+2], ds
  7095 00002089 8C5C02                  		mov	[si+2], ds
  7096                                  		;mov	word [di+BDS.link], -1
  7097 0000208C C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  7098                                  		;mov	[di+BDS.link+2], ds
  7099 00002090 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  7100                                  		; 20/03/2019 - Retro DOS v4.0
  7101                                  		;lea	bx, [di+BDS.BPB]
  7102 00002093 8D5D06                  		lea	bx, [di+6]
  7103 00002096 8B36[0016]              		mov	si, [last_dskdrv_table]
  7104 0000209A 891C                    		mov	[si], bx
  7105 0000209C 8306[0016]02            		add	word [last_dskdrv_table], 2
  7106 000020A1 FE06[7500]              		inc	byte [drvmax]
  7107 000020A5 8306[0216]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  7108 000020AA 5B                      		pop	bx
  7109 000020AB 5E                      		pop	si
  7110 000020AC C3                      		retn
  7111                                  
  7112                                  ; =============== S U B	R O U T	I N E =======================================
  7113                                  
  7114                                  ; 17/10/2022
  7115                                  ; 15/10/2022
  7116                                  ; 28/12/2018 - Retro DOS v4.0
  7117                                  ; 03/06/2018 - Retro DOS v3.0
  7118                                  
  7119                                  cmos_clock_read:	
  7120 000020AD 50                      		push	ax
  7121 000020AE 51                      		push	cx
  7122 000020AF 52                      		push	dx
  7123 000020B0 55                      		push	bp
  7124 000020B1 31ED                    		xor	bp, bp
  7125                                  loop_clock:				
  7126 000020B3 31C9                    		xor	cx, cx
  7127 000020B5 31D2                    		xor	dx, dx
  7128 000020B7 B402                    		mov	ah, 2
  7129 000020B9 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  7130                                  					; Return: CH = hours in	BCD
  7131                                  					; CL = minutes in BCD
  7132                                  					; DH = seconds in BCD
  7133 000020BB 83F900                  		cmp	cx, 0
  7134 000020BE 7512                    		jnz	short clock_present
  7135 000020C0 83FA00                  		cmp	dx, 0
  7136 000020C3 750D                    		jnz	short clock_present
  7137 000020C5 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  7138 000020C8 741C                    		jz	short no_readdate ; was at zero setting.
  7139 000020CA 45                      		inc	bp		; only perform delay once.
  7140 000020CB B90040                  		mov	cx, 4000h	; 16384
  7141                                  delay:					
  7142 000020CE E2FE                    		loop	delay
  7143 000020D0 EBE1                    		jmp	short loop_clock
  7144                                  ; ---------------------------------------------------------------------------
  7145                                  
  7146                                  clock_present:				
  7147 000020D2 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  7148 000020D8 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  7149                                  					; possibly destroyed by	cp dos and
  7150                                  					; post routine did not restore that.
  7151 000020DB 56                      		push	si
  7152 000020DC E817F3                  		call	read_real_date	; read real-time clock for date
  7153 000020DF FA                      		cli
  7154                                  		;mov	ds:daycnt, si	; set system date
  7155 000020E0 8936[F004]              		mov	[daycnt], si
  7156 000020E4 FB                      		sti
  7157 000020E5 5E                      		pop	si
  7158                                  
  7159                                  no_readdate:				
  7160 000020E6 5D                      		pop	bp
  7161 000020E7 5A                      		pop	dx
  7162 000020E8 59                      		pop	cx
  7163 000020E9 58                      		pop	ax
  7164 000020EA C3                      		retn
  7165                                  
  7166                                  ; ---------------------------------------------------------------------------
  7167                                  
  7168                                  ; the following code is written by jack gulley in engineering group.
  7169                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  7170                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  7171                                  ; the cmos clock rate are still slow which slow down disk operations
  7172                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  7173                                  ; to fix this problem at the request of cp dos.
  7174                                  ;
  7175                                  ; the program is modified to be run on msinit. equates are defined
  7176                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  7177                                  ;
  7178                                  ;  the following code cmosck is used to insure that the cmos has not
  7179                                  ;	had its rate controls left in an invalid state on older at's.
  7180                                  ;
  7181                                  ;	it checks for an at model byte "fc" with a submodel type of
  7182                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  7183                                  ;	bits in case post has not done it. this initilization routine
  7184                                  ;	is only needed once when dos loads. it should be run as soon
  7185                                  ;	as possible to prevent slow diskette access.
  7186                                  ;
  7187                                  ;	this code exposes one to dos clearing cmos setup done by a
  7188                                  ;	resident program that hides and re-boots the system.
  7189                                  
  7190                                  cmosck:					; check and reset rtc rate bits
  7191                                  
  7192                                  ;model byte and submodel byte were already determined in msinit.
  7193                                  
  7194                                  	; 16/06/2018 - Retro DOS v3.0
  7195                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7196                                  			
  7197 000020EB 50                      		push	ax
  7198 000020EC 2E803E[3606]FC          		cmp	byte [cs:model_byte], 0FCh
  7199 000020F2 7525                    		jnz	short cmosck9	; Exit if not an AT model
  7200 000020F4 2E803E[3706]06          		cmp	byte [cs:secondary_model_byte], 6
  7201                                  					; Is it 06 for the industral AT ?
  7202 000020FA 7408                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  7203 000020FC 2E803E[3706]04          		cmp	byte [cs:secondary_model_byte], 4
  7204                                  					; Is it 00, 01, 02, or 03 ?
  7205 00002102 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  7206                                  					; Also,Secondary_model_byte = 0
  7207                                  					;   when AH=0C0h, int 15h failed.
  7208                                  					;	RESET THE CMOS PERIODIC RATE
  7209                                  					;  Model=FC submodel=00,01,02,03 or 06
  7210                                  cmosck4:				
  7211 00002104 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7212                                  					; NMI disabled on return
  7213 00002106 B426                    		mov	ah, 26h		; 00100110b
  7214                                  					; Set divider & rate selection
  7215 00002108 E83000                  		call	cmos_write
  7216 0000210B B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7217                                  					; NMI disabled on return
  7218 0000210D E80B00                  		call	cmos_read
  7219 00002110 2407                    		and	al, 7		; 00000111b
  7220                                  					; clear SET,PIE,AIE,UIE,SQWE
  7221 00002112 88C4                    		mov	ah, al
  7222 00002114 B00B                    		mov	al, 0Bh		; cmos_reg_b
  7223                                  					; NMI enabled on return
  7224 00002116 E82200                  		call	cmos_write
  7225                                  cmosck9:				
  7226 00002119 58                      		pop	ax
  7227 0000211A C3                      		retn
  7228                                  
  7229                                  ; =============== S U B	R O U T	I N E =======================================
  7230                                  
  7231                                  ;--- CMOS_READ -----------------------------------------------------------------
  7232                                  ;		read byte from cmos system clock configuration table	       :
  7233                                  ;									       :
  7234                                  ; input: (al)=	cmos table address to be read				       :
  7235                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7236                                  ;		bits 6-0 = address of table location to read		       :
  7237                                  ;									       :
  7238                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7239                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  7240                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7241                                  ;		the cmos address register is pointed to a default value and    :
  7242                                  ;		the interrupt flag restored to the entry state on return.      :
  7243                                  ;		only the (al) register and the nmi state is changed.	       :
  7244                                  ;-------------------------------------------------------------------------------
  7245                                  
  7246                                  cmos_read:				; read location (al) into (al)	
  7247 0000211B 9C                      		pushf
  7248 0000211C FA                      		cli
  7249 0000211D 53                      		push	bx
  7250 0000211E 50                      		push	ax		; AL = cmos table address to be read
  7251 0000211F 0C80                    		or	al, 80h
  7252 00002121 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7253                                  					; RTC Seconds
  7254 00002123 90                      		nop			; (undocumented delay needed)
  7255 00002124 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7256 00002126 89C3                    		mov	bx, ax
  7257 00002128 58                      		pop	ax
  7258 00002129 2480                    		and	al, 80h
  7259 0000212B 0C0F                    		or	al, 0Fh
  7260 0000212D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7261                                  					; RTC Seconds
  7262 0000212F 90                      		nop
  7263 00002130 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7264 00002132 89D8                    		mov	ax, bx
  7265 00002134 5B                      		pop	bx
  7266 00002135 0E                      		push	cs		; *place code segment in stack and
  7267 00002136 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7268 00002139 C3                      		retn			; return with flags restored
  7269                                  
  7270                                  ; ---------------------------------------------------------------------------
  7271                                  
  7272                                  cmos_popf:				
  7273 0000213A CF                      		iret			; popf for level b- parts
  7274                                  					; return far and restore flags
  7275                                  
  7276                                  ; =============== S U B	R O U T	I N E =======================================
  7277                                  
  7278                                  ;--- cmos_write ----------------------------------------------------------------
  7279                                  ;		write byte to cmos system clock configuration table	       :
  7280                                  ;									       :
  7281                                  ; input: (al)=	cmos table address to be written to			       :
  7282                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7283                                  ;		bits 6-0 = address of table location to write		       :
  7284                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7285                                  ;									       :
  7286                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7287                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7288                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7289                                  ;		the cmos address register is pointed to a default value and    :
  7290                                  ;		the interrupt flag restored to the entry state on return.      :
  7291                                  ;		only the cmos location and the nmi state is changed.	       :
  7292                                  ;-------------------------------------------------------------------------------
  7293                                  
  7294                                  cmos_write:				; write (ah) to location (al)
  7295 0000213B 9C                      		pushf			;
  7296 0000213C 50                      		push	ax		; save work register values
  7297 0000213D FA                      		cli
  7298 0000213E 50                      		push	ax		; save user nmi	state
  7299 0000213F 0C80                    		or	al, 80h		; disable nmi for us
  7300 00002141 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7301                                  					; RTC Seconds
  7302 00002143 90                      		nop
  7303 00002144 88E0                    		mov	al, ah
  7304 00002146 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7305 00002148 58                      		pop	ax		; get user nmi
  7306 00002149 2480                    		and	al, 80h
  7307 0000214B 0C0F                    		or	al, 0Fh
  7308 0000214D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7309                                  					; RTC Seconds
  7310 0000214F 90                      		nop
  7311 00002150 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7312 00002152 58                      		pop	ax		; restore work registers
  7313 00002153 0E                      		push	cs		; *place code segment in stack and
  7314 00002154 E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7315 00002157 C3                      		retn
  7316                                  
  7317                                  ; 21/12/2022
  7318                                  ; ---------------------------------------------------------------------------
  7319                                  ; ---------------------------------------------------------------------------
  7320                                  %if 0
  7321                                  
  7322                                  ; ---------------------------------------------------------------------------
  7323                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7324                                  ; ---------------------------------------------------------------------------
  7325                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7326                                  ; ---------------------------------------------------------------------------
  7327                                  
  7328                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7329                                  ;
  7330                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7331                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7332                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7333                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7334                                  
  7335                                  ; =============== S U B	R O U T	I N E =======================================
  7336                                  
  7337                                  ; GetClus, read in a cluster at a specified address
  7338                                  ;
  7339                                  ;  bx = cluster to read
  7340                                  ;  cx = sectors per cluster
  7341                                  ;  es:di = load location
  7342                                  
  7343                                  ; 17/10/2022
  7344                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7345                                  ; 09/12/2022
  7346                                  DISKRD equ diskrd
  7347                                  
  7348                                  		; 17/10/2022
  7349                                  getclus:				
  7350                                  		push	cx
  7351                                  		push	di
  7352                                  		mov	[cs:doscnt], cx
  7353                                  		mov	ax, bx
  7354                                  		dec	ax
  7355                                  		dec	ax
  7356                                  		mul	cx		; convert to logical sector
  7357                                  					; dx:ax	= matching logical sector number
  7358                                  					;	  starting from the data sector
  7359                                  		add	ax, [cs:bios_l]
  7360                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7361                                  unpack:					
  7362                                  		push	ds
  7363                                  		push	ax
  7364                                  		push	bx
  7365                                  		mov	si, [cs:fatloc]
  7366                                  		mov	ds, si
  7367                                  		mov	si, bx		; next cluster
  7368                                  		test	byte [cs:fbigfat], 40h	; fbig
  7369                                  					; 16 bit fat?
  7370                                  		jnz	short unpack16	; yes
  7371                                  		shr	si, 1		; 12 bit fat. si=si/2
  7372                                  					; si = clus + clus/2
  7373                                  		add	si, bx		;
  7374                                  					; (si =	byte offset of the cluster in the FAT)
  7375                                  		push	dx
  7376                                  		xor	dx, dx
  7377                                  		call	get_fat_sector
  7378                                  		pop	dx
  7379                                  		mov	ax, [bx]	; save it into ax
  7380                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7381                                  		; 25/06/2023	
  7382                                  		;mov	al, [bx]	; splitted fat
  7383                                  		mov	[cs:temp_cluster], al
  7384                                  		inc	si		; (next	byte)
  7385                                  		push	dx
  7386                                  		xor	dx, dx
  7387                                  		call	get_fat_sector
  7388                                  		pop	dx
  7389                                  		;mov	al, ds:0
  7390                                  		mov	al, [0] ; 19/10/2022
  7391                                  		mov	[cs:temp_cluster+1], al
  7392                                  		mov	ax, [cs:temp_cluster]
  7393                                  even_odd:				
  7394                                  		pop	bx		; restore old fat entry	value
  7395                                  		push	bx		; save it right	away.
  7396                                  		shr	bx, 1		; was it even or odd?
  7397                                  		jnb	short havclus	; it was even.
  7398                                  		shr	ax, 1		; odd. massage fat value and keep
  7399                                  					; the highest 12 bits.
  7400                                  		shr	ax, 1
  7401                                  		shr	ax, 1
  7402                                  		shr	ax, 1
  7403                                  havclus:				
  7404                                  		mov	bx, ax		; now bx = new fat entry.
  7405                                  		and	bx, 0FFFh	; keep low 12 bits.
  7406                                  		jmp	short unpackx
  7407                                  ; ---------------------------------------------------------------------------
  7408                                  
  7409                                  unpack16:				
  7410                                  		push	dx
  7411                                  		xor	dx, dx
  7412                                  		shl	si, 1		; extend to 32 bit offset
  7413                                  		adc	dx, 0
  7414                                  		call	get_fat_sector
  7415                                  		pop	dx
  7416                                  		mov	bx, [bx]	;
  7417                                  					; bx = new fat entry.
  7418                                  unpackx:				
  7419                                  		pop	si		; restore old bx value into si
  7420                                  		pop	ax		; restore logical sector (low)
  7421                                  		pop	ds
  7422                                  		sub	si, bx
  7423                                  		cmp	si, -1		; one apart?
  7424                                  		jnz	short getcl2
  7425                                  		add	[cs:doscnt], cx
  7426                                  		jmp	short unpack
  7427                                  ; ---------------------------------------------------------------------------
  7428                                  
  7429                                  getcl2:					
  7430                                  		push	bx
  7431                                  		push	dx		; sector to read (high)
  7432                                  		push	ax		; sector to read (low)
  7433                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7434                                  		mov	cx, [cs:doscnt]
  7435                                  		pop	dx		; sector to read for diskrd (low)
  7436                                  		pop	word [cs:start_sec_h]
  7437                                  					; sector to read for diskrd (high)
  7438                                  		push	ds
  7439                                  		push	cs
  7440                                  		pop	ds
  7441                                  		push	cs		; simulate far call
  7442                                  		; 17/10/2022
  7443                                  		mov	bp, DISKRD	; 8E5h
  7444                                  		;mov	bp, 8E5h	; offset diskrd
  7445                                  					; 2C7h:8E5h = 70h:2E55h
  7446                                  		call	call_bios_code	; read the clusters
  7447                                  		pop	ds
  7448                                  		pop	bx
  7449                                  		pop	di
  7450                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7451                                  		xchg	ah, al		; multiply by 256
  7452                                  		shl	ax, 1		; times	2 equal	512
  7453                                  		add	di, ax		; update load location
  7454                                  		pop	cx		; restore sectors/cluster
  7455                                  		retn
  7456                                  
  7457                                  ; =============== S U B	R O U T	I N E =======================================
  7458                                  
  7459                                  
  7460                                  ;function: find and read the corresponding fat sector into ds:0
  7461                                  ;
  7462                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7463                                  ;     ds - fatloc segment
  7464                                  ;     cs:drvfat - logical drive number, fat id
  7465                                  ;     cs:md_sectorsize
  7466                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7467                                  ;
  7468                                  ;out). corresponding fat sector read in.
  7469                                  ;      bx = offset value from fatlog segment.
  7470                                  ;      other registera saved.
  7471                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7472                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7473                                  ;      should save this byte, and read the next fat sector to get the rest
  7474                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7475                                  
  7476                                  		; 17/10/2022
  7477                                  get_fat_sector:	
  7478                                  		push	ax
  7479                                  		push	cx
  7480                                  		push	di
  7481                                  		push	si
  7482                                  		push	es
  7483                                  		push	ds
  7484                                  		mov	ax, si
  7485                                  		mov	cx, [cs:md_sectorsize] ; 512
  7486                                  		div	cx		; ax = sector number, dx = offset
  7487                                  		nop
  7488                                  
  7489                                  		; Get rid of the assumption that
  7490                                  		; there	is only	one reserved sector
  7491                                  
  7492                                  		push	es
  7493                                  		push	ds
  7494                                  		push	di
  7495                                  		push	ax
  7496                                  		push	cs
  7497                                  		pop	ds
  7498                                  
  7499                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7500                                  		mov	bp, SETDRIVE
  7501                                  		;mov	bp, 4D7h	; setdrive
  7502                                  					; at 2C7h:4D7h = 70h:2A47h
  7503                                  		push	cs		; simulate far call
  7504                                  		call	call_bios_code	; get bds for drive
  7505                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7506                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7507                                  					; add #reserved_sectors
  7508                                  		pop	di
  7509                                  		pop	ds
  7510                                  		pop	es
  7511                                  		cmp	ax, [cs:last_fat_sec_num]
  7512                                  		jz	short gfs_split_chk ; don't need to read it again.
  7513                                  		mov	[cs:last_fat_sec_num], ax 
  7514                                  					; sector number
  7515                                  					; (in the partition, without hidden sectors)
  7516                                  		push	dx
  7517                                  		mov	word [cs:start_sec_h], 0 
  7518                                  					; prepare to read the fat sector
  7519                                  					; start_sec_h is always	0 for fat sector.
  7520                                  		mov	dx, ax
  7521                                  		mov	cx, 1		; 1 sector read
  7522                                  		mov	ax, [cs:drvfat]
  7523                                  		push	ds
  7524                                  		pop	es
  7525                                  		xor	di, di		; es:di	-> fatloc segment:0
  7526                                  		push	ds
  7527                                  		push	cs
  7528                                  		pop	ds
  7529                                  		push	cs		; simulate far call
  7530                                  		mov	bp, DISKRD	; 8E5h
  7531                                  		;mov	bp, 8E5h	; offset diskrd
  7532                                  					; 2C7h:8E5h = 70h:2E55h
  7533                                  		call	call_bios_code
  7534                                  		pop	ds
  7535                                  		pop	dx
  7536                                  		mov	cx, [cs:md_sectorsize] ; 512
  7537                                  
  7538                                  gfs_split_chk:				
  7539                                  		dec	cx		; 511
  7540                                  		cmp	dx, cx		; if offset points to the
  7541                                  					; last byte of this sector,
  7542                                  					; then splitted	entry.
  7543                                  		mov	bx, dx		; set bx to dx
  7544                                  		pop	ds
  7545                                  		pop	es
  7546                                  		pop	si
  7547                                  		pop	di
  7548                                  		pop	cx
  7549                                  		pop	ax
  7550                                  		retn
  7551                                  
  7552                                  ; 15/10/2022
  7553                                  ;Bios_Data_Init	ends
  7554                                  
  7555                                  %endif
  7556                                  ; ---------------------------------------------------------------------------
  7557                                  ; ---------------------------------------------------------------------------
  7558                                  
  7559                                  		; 09/12/2022
  7560                                  		;db 0
  7561                                  
  7562                                  numbertodiv	equ ($-BData_start)
  7563                                  numbertomod	equ (numbertodiv % 16)
  7564                                  
  7565                                  %if numbertomod>0 & numbertomod<16
  7566 00002158 00<rep 8h>              		times (16-numbertomod) db 0
  7567                                  %endif
  7568                                  
  7569                                  ;align 16
  7570                                  
  7571                                  ; 09/12/2022
  7572                                  IOSYSCODESEGOFF	equ $ - BData_start
  7573                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7574                                  
  7575                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7576                                  ; ---------------------------------------------------------------------------
  7577                                  		;db 4 dup(0)
  7578                                  ; 09/12/2022		
  7579                                  ;		times 4 db 0	; 19/10/2022
  7580                                  ; ---------------------------------------------------------------------------
  7581                                  
  7582                                  ;============================================================================
  7583                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7584                                  ;============================================================================
  7585                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7586                                  
  7587                                  section .BIOSCODE vstart=0  
  7588                                  
  7589                                  BCode_start:	 ; 09/12/2022
  7590                                   
  7591                                  ; 02/10/2022
  7592                                  
  7593                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7594                                  ;----------------------------------------------------------------------------
  7595                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7596                                  ;----------------------------------------------------------------------------
  7597                                  
  7598                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7599 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7600 00000030 7000                    BiosDataWord:	dw 70h
  7601                                  
  7602                                  ; 15/10/2022
  7603                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7604                                  ; 09/12/2022
  7605                                  BIOSDATAWORD	equ BiosDataWord
  7606                                  
  7607                                  ; ---------------------------------------------------------------------------
  7608                                  
  7609                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7610                                  
  7611                                  ;************************************************************************
  7612                                  ;*									*
  7613                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7614                                  ;*	  trashes di, cx, es						*
  7615                                  ;*									*
  7616                                  ;*	cas -- should be made disposable!				*
  7617                                  ;*									*
  7618                                  ;************************************************************************
  7619                                  
  7620                                  	; 10/08/2023 - Retro DOS v4.2 IO:SYS (optimization)
  7621                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0032h 
  7622                                  
  7623                                  _seg_reinit:
  7624 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7625                                  					; at 2C7h:30h or 70h:25A0h
  7626                                  		;mov	di, (offset cdev+2)
  7627 00000037 BF[BF06]                		mov	di, cdev+2	; 19/10/2022
  7628                                  		;mov	cx, 4		; (end_BC_entries - cdev)/4
  7629                                  		; 10/08/2023
  7630 0000003A B90300                  		mov	cx, 3 ; (PCDOS 7.1)
  7631                                  _seg_reinit_1:
  7632 0000003D AB                      		stosw			; modify Bios_Code entry points
  7633 0000003E 47                      		inc	di
  7634 0000003F 47                      		inc	di
  7635 00000040 E2FB                    		loop	_seg_reinit_1
  7636                                  		; 10/08/2023 (PCDOS 7.1)
  7637                                  		; (direct jump to i2f_handler from BIOSDATA:bios_i2f)
  7638                                  		; (instead of 'bcode_i2f: dw i2f_handler, IOSYSCODESEG')
  7639 00000042 26A3[0800]              		mov     [es:bios_i2f_seg], ax ; actual BIOSCODE segment
  7640 00000046 CB                      		retf
  7641                                  
  7642                                  ; ---------------------------------------------------------------------------
  7643                                  
  7644                                  ; 15/10/2022
  7645                                  
  7646                                  ;************************************************************************
  7647                                  ;*									*
  7648                                  ;*	chardev_entry - main device driver dispatch routine		*
  7649                                  ;*	   called with a dummy parameter block on the stack		*
  7650                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7651                                  ;*									*
  7652                                  ;*	will eventually take care of doing the transitions in		*
  7653                                  ;*	   out of Bios_Code						*
  7654                                  ;*									*
  7655                                  ;************************************************************************
  7656                                  
  7657                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7658 00000047 56                      		push	si
  7659 00000048 50                      		push	ax
  7660 00000049 51                      		push	cx
  7661 0000004A 52                      		push	dx
  7662 0000004B 57                      		push	di
  7663 0000004C 55                      		push	bp
  7664 0000004D 1E                      		push	ds
  7665 0000004E 06                      		push	es
  7666 0000004F 53                      		push	bx
  7667 00000050 89E5                    		mov	bp, sp
  7668 00000052 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7669                                  		;;mov	ds, word [cs:0030h]
  7670                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7671 00000055 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7672 0000005A 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7673 0000005D A2[2100]                		mov	[auxnum], al
  7674 00000060 8826[E704]              		mov	[printdev], ah
  7675 00000064 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7676 00000066 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7677 0000006A 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7678 0000006E 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7679 00000072 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7680 00000076 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7681                                  		; 17/10/2022
  7682 0000007A 81FE[3B05]              		cmp	si, DSKTBL
  7683                                  		;cmp	si, 4A2h	; dsktbl
  7684                                  					; at 2C7h:4A2h = 70h:2A12h
  7685 0000007E 7517                    		jnz	short no_sector32_mapping
  7686                                  
  7687                                  ; Special case for 32-bit start sector number:
  7688                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7689                                  ;      set high 16 bits of secnum to 0
  7690                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7691                                  ;
  7692                                  ; pass high word of sector number in start_sec_h, low word in dx
  7693                                  ;
  7694                                  ; note: start_l and start_h are the offsets within the io_request packet
  7695                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7696                                  ;	  it has been used.
  7697                                  ;
  7698                                  ; note: remember not to destroy the registers which have been set up before
  7699                                  
  7700                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7701 00000080 C706[2305]0000          		mov	word [start_sec_h], 0
  7702 00000086 83FAFF                  		cmp	dx, 0FFFFh
  7703 00000089 750C                    		jnz	short no_sector32_mapping
  7704 0000008B 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7705                                  					; 32 bits dsk req
  7706                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7707 0000008F 8916[2305]              		mov	[start_sec_h], dx
  7708 00000093 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7709                                  					; dx = packet.start_l
  7710                                  no_sector32_mapping:			
  7711 00000097 97                      		xchg	ax, di
  7712 00000098 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7713 0000009C 2E3A04                  		cmp	al, cs:[si]
  7714 0000009F 732C                    		jnb	short command_error
  7715 000000A1 98                      		cbw			; note that al <= 15 means ok
  7716 000000A2 D1E0                    		shl	ax, 1
  7717 000000A4 01C6                    		add	si, ax
  7718 000000A6 97                      		xchg	ax, di
  7719 000000A7 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7720 000000AB FC                      		cld
  7721                                  		; 17/10/2022
  7722 000000AC 2EFF5401                		call	near [cs:si+1]
  7723                                  		;call	word ptr cs:si+1
  7724 000000B0 7202                    		jb	short already_got_ah_status
  7725 000000B2 B401                    		mov	ah, 1
  7726                                  already_got_ah_status:
  7727                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7728                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7729                                  					; cas note: shouldn't be needed!
  7730 000000B4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7731                                  		;lds	bx, ds:ptrsav
  7732 000000B9 C51E[1200]              		lds	bx, [ptrsav]
  7733 000000BD 894703                  		mov	[bx+3],	ax	; [bx+status]
  7734                                  					; mark operation complete
  7735 000000C0 5B                      		pop	bx
  7736 000000C1 07                      		pop	es
  7737 000000C2 1F                      		pop	ds
  7738 000000C3 5D                      		pop	bp
  7739 000000C4 5F                      		pop	di
  7740 000000C5 5A                      		pop	dx
  7741 000000C6 59                      		pop	cx
  7742 000000C7 58                      		pop	ax
  7743 000000C8 5E                      		pop	si
  7744 000000C9 83C402                  		add	sp, 2		; get rid of fake return address
  7745                                  	
  7746                                  		; fall through into bc_retf
  7747                                  ; ---------------------------------------------------------------------------	
  7748                                  bc_retf:
  7749 000000CC CB                      		retf
  7750                                  ; ---------------------------------------------------------------------------
  7751                                  
  7752                                  command_error:				
  7753 000000CD E80900                  		call	bc_cmderr
  7754 000000D0 EBE2                    		jmp	short already_got_ah_status
  7755                                  ; 15/10/2022
  7756                                  ; 01/05/2019
  7757                                  
  7758                                  ;----------------------------------------------------------------------------
  7759                                  ; The following piece of hack is for supporting CP/M compatibility
  7760                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7761                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7762                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7763                                  ; high.
  7764                                  ;----------------------------------------------------------------------------
  7765                                  
  7766                                  		;db 7 dup(0)
  7767                                  
  7768                                  		; 15/10/2022
  7769                                  
  7770 000000D2 0000                    		dw 0		; pad to bring offset to 0D0h
  7771                                  
  7772 000000D4 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7773                                  				;  which is the CP/M call 5 entry point
  7774                                  		
  7775                                  
  7776                                  ; ---------------------------------------------------------------------------
  7777                                  
  7778                                  ;	exit - all routines return through this path
  7779                                  
  7780                                  bc_cmderr:				
  7781 000000D9 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7782                                  					; unknown command error
  7783                                  
  7784                                  ; =============== S U B	R O U T	I N E =======================================
  7785                                  
  7786                                  ;	now zero the count field by subtracting its current value,
  7787                                  ;	  which is still in cx, from itself.
  7788                                  
  7789                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7790                                  ;	  in order to return the number actually complete
  7791                                  
  7792                                  bc_err_cnt:	
  7793                                  		;les	bx, ds:ptrsav
  7794                                  		; 19/10/2022
  7795 000000DB C41E[1200]              		les	bx, [ptrsav]
  7796 000000DF 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7797                                  					; # of successful i/o's
  7798 000000E3 B481                    		mov	ah, 81h		; mark error return
  7799 000000E5 F9                      		stc			; indicate abnormal end
  7800 000000E6 C3                      		retn
  7801                                  
  7802                                  ; 15/10/2022
  7803                                  
  7804                                  ;Bios_Code ends
  7805                                  
  7806                                  ;----------------------------------------------------------------------------
  7807                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7808                                  ;----------------------------------------------------------------------------
  7809                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7810                                  ; 10/01/2019 - Retro DOS v4.0
  7811                                  
  7812                                  ; 30/04/2019
  7813                                  
  7814                                  ;title	mschar - character and clock devices
  7815                                  
  7816                                  ;MODE_CTRLBRK	equ	0FFh
  7817                                  
  7818                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7819                                  
  7820                                  ;************************************************************************
  7821                                  ;*									*
  7822                                  ;*	device driver dispatch tables					*
  7823                                  ;*									*
  7824                                  ;*	each table starts with a byte which lists the number of		*
  7825                                  ;*	legal functions, followed by that number of words. Each		*
  7826                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7827                                  ;*	handles the function. The functions are terminated with		*
  7828                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7829                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7830                                  ;*	returned as abnormal completion status. Notice that ds		*
  7831                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7832                                  ;*									*
  7833                                  ;************************************************************************
  7834                                  
  7835                                  		; 13/12/2022
  7836                                  		;db 0
  7837                                  
  7838                                  		; 13/12/202
  7839 000000E7 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7840                                  					; 2C7h:0E4h = 70h:2654h
  7841 000000E8 [FD01]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7842                                  					; 00 init
  7843 000000EA [FD01]                  		dw bc_exvec  ; 1FBh	; 01
  7844 000000EC [FD01]                  		dw bc_exvec  ; 1FBh	; 02
  7845 000000EE [D900]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7846                                  					; 03
  7847 000000F0 [5F01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7848                                  					; 04
  7849 000000F2 [A201]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7850                                  					; 05
  7851 000000F4 [FD01]                  		dw bc_exvec  ; 1FBh	; 06
  7852 000000F6 [0B02]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7853                                  					; 07
  7854 000000F8 [FF01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7855                                  					; 08
  7856 000000FA [FF01]                  		dw con_writ  ; 1FDh	; 09
  7857 000000FC [FD01]                  		dw bc_exvec  ; 1FBh	; 0A
  7858                                  con_table_end:
  7859 000000FE 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7860                                  					; 2C7h:0FBh = 70h:266Bh
  7861 000000FF [FD01]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7862 00000101 [FD01]                  		dw bc_exvec   ; 1FBh	; 01
  7863 00000103 [FD01]                  		dw bc_exvec   ; 1FBh	; 02
  7864 00000105 [D900]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7865 00000107 [1C02]                  		dw prn_input  ;	21Ah	; prn_input
  7866                                  					; 04 indicate zero chars read
  7867 00000109 [CA01]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7868                                  					; 05 read non-destructive
  7869 0000010B [FD01]                  		dw bc_exvec   ; 1FBh	; 06
  7870 0000010D [FD01]                  		dw bc_exvec   ; 1FBh	; 07
  7871 0000010F [2102]                  		dw prn_writ   ;	21Fh	; prn_writ
  7872 00000111 [2102]                  		dw prn_writ   ; 21Fh	; 09
  7873 00000113 [5202]                  		dw prn_stat   ; 251h	; prn_stat
  7874 00000115 [FD01]                  		dw bc_exvec   ; 1FBh	; 0B
  7875 00000117 [FD01]                  		dw bc_exvec   ; 1FBh	; 0C
  7876 00000119 [FD01]                  		dw bc_exvec   ; 1FBh	; 0D
  7877 0000011B [FD01]                  		dw bc_exvec   ; 1FBh	; 0E
  7878 0000011D [FD01]                  		dw bc_exvec   ; 1FBh	; 0F
  7879 0000011F [8C02]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7880 00000121 [FD01]                  		dw bc_exvec   ; 1FBh	; 11
  7881 00000123 [FD01]                  		dw bc_exvec   ; 1FBh	; 12
  7882 00000125 [BA02]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7883 00000127 [FD01]                  		dw bc_exvec   ; 1FBh	; 14
  7884 00000129 [FD01]                  		dw bc_exvec   ; 1FBh	; 15
  7885 0000012B [FD01]                  		dw bc_exvec   ; 1FBh	; 16
  7886 0000012D [FD01]                  		dw bc_exvec   ; 1FBh	; 17
  7887 0000012F [FD01]                  		dw bc_exvec   ; 1FBh	; 18
  7888 00000131 [EF02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7889                                  prn_table_end:
  7890 00000133 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7891                                  					; 2C7h:130h = 70h:26A0h
  7892 00000134 [FD01]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7893 00000136 [FD01]                  		dw bc_exvec   ; 1FBh	; 01
  7894 00000138 [FD01]                  		dw bc_exvec   ; 1FBh	; 02
  7895 0000013A [D900]                  		dw bc_cmderr  ;	0D5h	; 03
  7896 0000013C [0A03]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7897 0000013E [2F03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7898 00000140 [FD01]                  		dw bc_exvec   ; 1FBh	; 06
  7899 00000142 [6503]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7900 00000144 [6C03]                  		dw aux_writ   ;	374h	; aux_writ
  7901 00000146 [6C03]                  		dw aux_writ   ;	374h	; 09
  7902 00000148 [4F03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7903                                  aux_table_end:
  7904 0000014A 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7905                                  					; 2C7h:147h = 70h:26B7h
  7906 0000014B [FD01]                  		dw bc_exvec   ; 1FBh	; 00
  7907 0000014D [FD01]                  		dw bc_exvec   ; 1FBh	; 01
  7908 0000014F [FD01]                  		dw bc_exvec   ; 1FBh	; 02
  7909 00000151 [D900]                  		dw bc_cmderr  ;	0D5h	; 03
  7910 00000153 [D104]                  		dw tim_read   ;	435h	; tim_read
  7911 00000155 [CA01]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7912 00000157 [FD01]                  		dw bc_exvec   ; 1FBh	; 06
  7913 00000159 [FD01]                  		dw bc_exvec   ; 1FBh	; 07
  7914 0000015B [D203]                  		dw tim_writ   ; 3DBh	; tim_writ
  7915 0000015D [D203]                  		dw tim_writ   ; 3DBh	; 09
  7916                                  tim_table_end:
  7917                                  
  7918                                  ; ---------------------------------------------------------------------------
  7919                                  
  7920                                  ;************************************************************************
  7921                                  ;*									*
  7922                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7923                                  ;*									*
  7924                                  ;************************************************************************
  7925                                  
  7926                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7927                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7928 0000015F E306                    		jcxz	con_exit	; 19/10/2022
  7929                                  con_loop:				
  7930 00000161 E80500                  		call	chrin		; get char in al
  7931 00000164 AA                      		stosb			; store	char at	es:di
  7932 00000165 E2FA                    		loop	con_loop
  7933                                  con_exit:				
  7934 00000167 F8                      		clc
  7935 00000168 C3                      		retn
  7936                                  
  7937                                  ; =============== S U B	R O U T	I N E =======================================
  7938                                  
  7939                                  ;************************************************************************
  7940                                  ;*									*
  7941                                  ;*	chrin - input single char from keyboard into al			*
  7942                                  ;*									*
  7943                                  ;*	  we are going to issue extended keyboard function, if		*
  7944                                  ;*	  supported. the returning value of the extended keystroke	*
  7945                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7946                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7947                                  ;*	  this creates a conflict when the user entered real		*
  7948                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7949                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7950                                  ;*	  in the following manner:					*
  7951                                  ;*									*
  7952                                  ;*	      ah = 16h							*
  7953                                  ;*	      int 16h							*
  7954                                  ;*	      if al == 0, then extended code (in ah)			*
  7955                                  ;*	      else if al == 0E0h, then					*
  7956                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7957                                  ;*		else greek_alpha character.				*
  7958                                  ;*									*
  7959                                  ;*	also, for compatibility reason, if an extended code is		*
  7960                                  ;*	  detected, then we are going to change the value in al		*
  7961                                  ;*	  from 0E0h to 00h.						*
  7962                                  ;*									*
  7963                                  ;************************************************************************
  7964                                  
  7965                                  		; 19/10/2022
  7966                                  chrin:		
  7967 00000169 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7968 0000016D 30C0                    		xor	al, al
  7969 0000016F 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7970 00000173 08C0                    		or	al, al
  7971 00000175 752A                    		jnz	short keyret
  7972 00000177 CD16                    		int	16h		; KEYBOARD -
  7973 00000179 09C0                    		or	ax, ax
  7974 0000017B 74EC                    		jz	short chrin
  7975 0000017D 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7976 00000180 7504                    		jnz	short alt_ext_chk
  7977 00000182 B010                    		mov	al, 10h
  7978 00000184 EB1B                    		jmp	short keyret
  7979                                  ; ---------------------------------------------------------------------------
  7980                                  
  7981                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7982                                  ;    if character read was 0E0h then
  7983                                  ;      if extended byte was zero (i.e. ah == 0) then
  7984                                  ;	 goto keyret
  7985                                  ;      else
  7986                                  ;	 set al to zero
  7987                                  ;	 goto alt_save
  7988                                  ;      endif
  7989                                  ;    endif
  7990                                  ;  endif
  7991                                  
  7992                                  alt_ext_chk:
  7993 00000186 803E[E504]00            		cmp	byte [keyrd_func], 0
  7994 0000018B 740C                    		jz	short not_ext
  7995 0000018D 3CE0                    		cmp	al, 0E0h
  7996 0000018F 7508                    		jnz	short not_ext
  7997 00000191 08E4                    		or	ah, ah
  7998 00000193 740C                    		jz	short keyret
  7999 00000195 30C0                    		xor	al, al
  8000 00000197 EB04                    		jmp	short alt_save
  8001                                  ; ---------------------------------------------------------------------------
  8002                                  
  8003                                  not_ext:				
  8004 00000199 08C0                    		or	al, al		; special case?
  8005 0000019B 7504                    		jnz	short keyret
  8006                                  alt_save:				
  8007 0000019D 8826[0C00]              		mov	[altah], ah	; store	special	key
  8008                                  keyret:					
  8009 000001A1 C3                      		retn
  8010                                  
  8011                                  ; ---------------------------------------------------------------------------
  8012                                  
  8013                                  ;************************************************************************
  8014                                  ;*									*
  8015                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  8016                                  ;*									*
  8017                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  8018                                  ;*	in the status word of the request packet, and there is no	*
  8019                                  ;*	character in the input buffer, the driver issues a system	*
  8020                                  ;*	wait request to the rom. on return from the rom, it returns	*
  8021                                  ;*	a 'char-not-found' to the dos.					*
  8022                                  ;*									*
  8023                                  ;************************************************************************
  8024                                  
  8025                                  		; 19/10/2022
  8026                                  con_rdnd:				
  8027 000001A2 A0[0C00]                		mov	al, [altah]
  8028 000001A5 08C0                    		or	al, al
  8029 000001A7 754C                    		jnz	short rdexit
  8030 000001A9 8A26[E604]              		mov	ah, [keysts_func]
  8031 000001AD CD16                    		int	16h		; KEYBOARD -
  8032 000001AF 751D                    		jnz	short gotchr
  8033 000001B1 803E[7900]00            		cmp	byte [fhavek09], 0
  8034 000001B6 7412                    		jz	short z_bus_exit
  8035 000001B8 C41E[1200]              		les	bx, [ptrsav]
  8036                                  		; 12/12/2022
  8037 000001BC 26F6470404              		test	byte [es:bx+4], 04h
  8038                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  8039 000001C1 7407                    		jz	short z_bus_exit
  8040 000001C3 B80041                  		mov	ax, 4100h
  8041 000001C6 30DB                    		xor	bl, bl
  8042 000001C8 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  8043                                  					; AL = condition type, BH = condition compare or mask value
  8044                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  8045                                  					; DX = I/O port	address	if AL bit 4 set
  8046                                  z_bus_exit:				
  8047 000001CA F9                      		stc			; 2C7h:1C8h = 70h:2738h
  8048 000001CB B403                    		mov	ah, 3		; indicate busy	status
  8049 000001CD C3                      		retn
  8050                                  ; ---------------------------------------------------------------------------
  8051                                  
  8052                                  gotchr:					
  8053 000001CE 09C0                    		or	ax, ax
  8054 000001D0 7508                    		jnz	short notbrk	; check	for null after break
  8055 000001D2 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  8056 000001D6 CD16                    		int	16h		; KEYBOARD -
  8057 000001D8 EBC8                    		jmp	short con_rdnd	; get a	real status
  8058                                  ; ---------------------------------------------------------------------------
  8059                                  
  8060                                  notbrk:					
  8061 000001DA 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  8062 000001DD 7504                    		jnz	short rd_ext_chk
  8063 000001DF B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  8064 000001E1 EB12                    		jmp	short rdexit
  8065                                  ; ---------------------------------------------------------------------------
  8066                                  
  8067                                  rd_ext_chk:				
  8068 000001E3 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  8069 000001E8 740B                    		jz	short rdexit
  8070 000001EA 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  8071 000001EC 7507                    		jnz	short rdexit
  8072 000001EE 80FC00                  		cmp	ah, 0		; scan code exist?
  8073 000001F1 7402                    		jz	short rdexit	; yes. greek alpha char.
  8074 000001F3 B000                    		mov	al, 0		; no. extended key stroke.
  8075                                  					; change it for	compatibility
  8076                                  rdexit:					
  8077 000001F5 C41E[1200]              		les	bx, [ptrsav]
  8078 000001F9 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  8079                                  					; return keyboard character here
  8080                                  bc_exvec:				
  8081 000001FD F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  8082                                  					; indicate normal termination
  8083 000001FE C3                      		retn
  8084                                  ; ---------------------------------------------------------------------------
  8085                                  
  8086                                  ;************************************************************************
  8087                                  ;*									*
  8088                                  ;*	con_write - console write routine				*
  8089                                  ;*									*
  8090                                  ;*	entry:	es:di -> buffer						*
  8091                                  ;*		cx    =  count						*
  8092                                  ;*									*
  8093                                  ;************************************************************************
  8094                                  
  8095                                  con_writ:
  8096                                  		;jcxz	short bc_exvec
  8097 000001FF E3FC                    		jcxz	bc_exvec	; 19/10/2022
  8098                                  		; 12/12/2022
  8099                                  		;jcxz	cc_ret
  8100                                  con_lp:					
  8101 00000201 268A05                  		mov	al, [es:di]
  8102 00000204 47                      		inc	di
  8103 00000205 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  8104                                  					; AL = character to display
  8105 00000207 E2F8                    		loop	con_lp
  8106                                  cc_ret:					
  8107 00000209 F8                      		clc
  8108 0000020A C3                      		retn
  8109                                  
  8110                                  ; =============== S U B	R O U T	I N E =======================================
  8111                                  
  8112                                  ;************************************************************************
  8113                                  ;*									*
  8114                                  ;*	con_flush - flush out keyboard queue				*
  8115                                  ;*									*
  8116                                  ;************************************************************************
  8117                                  
  8118                                  con_flush:
  8119 0000020B C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  8120                                  flloop:					; while	(charavail()) charread();	
  8121 00000210 B401                    		mov	ah, 1
  8122 00000212 CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  8123                                  					; Return: ZF clear if character	in buffer
  8124                                  					; AH = scan code, AL = character
  8125                                  					; ZF set if no character in buffer
  8126 00000214 74F3                    		jz	short cc_ret
  8127 00000216 30E4                    		xor	ah, ah
  8128 00000218 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  8129                                  					; Return: AH = scan code, AL = character
  8130 0000021A EBF4                    		jmp	short flloop
  8131                                  
  8132                                  ; ---------------------------------------------------------------------------
  8133                                  
  8134                                  ; 15/10/2022
  8135                                  
  8136                                  ;************************************************************************
  8137                                  ;*									*
  8138                                  ;*	some equates for rom bios printer i/o				*
  8139                                  ;*									*
  8140                                  ;************************************************************************
  8141                                  
  8142                                  ; ibm rom status bits (i don't trust them, neither should you)
  8143                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  8144                                  ; whole slew of bits, only one of which is correct.
  8145                                  
  8146                                  ;notbusystatus	equ 10000000b		; not busy
  8147                                  ;nopaperstatus	equ 00100000b		; no more paper
  8148                                  ;prnselected	equ 00010000b		; printer selected
  8149                                  ;ioerrstatus	equ 00001000b		; some kinda error
  8150                                  ;timeoutstatus	equ 00000001b		; time out.
  8151                                  ;
  8152                                  ;noprinter	equ 00110000b		; no printer attached
  8153                                  
  8154                                  ; 18/03/2019 - Retro DOS v4.0
  8155                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  8156                                  
  8157                                  ; ---------------------------------------------------------------------------
  8158                                  
  8159                                  ;************************************************************************
  8160                                  ;*									*
  8161                                  ;*	prn_input - return with no error but zero chars read		*
  8162                                  ;*									*
  8163                                  ;*	enter with cx = number of characters requested			*
  8164                                  ;*									*
  8165                                  ;************************************************************************
  8166                                  
  8167                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  8168 0000021C E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  8169                                  					; (sub reqpkt.count,cx)
  8170                                  		; 12/12/2022
  8171                                  prn_done:
  8172 0000021F F8                      		clc			; but return with carry	reset for no error
  8173 00000220 C3                      		retn
  8174                                  ; ---------------------------------------------------------------------------
  8175                                  
  8176                                  ;************************************************************************
  8177                                  ;*									*
  8178                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  8179                                  ;*									*
  8180                                  ;*	auxnum has printer number					*
  8181                                  ;*									*
  8182                                  ;************************************************************************
  8183                                  
  8184                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8185                                  		;jcxz	short prn_done	; no chars to output
  8186 00000221 E3FC                    		jcxz	prn_done	; 19/10/2022
  8187                                  prn_loop:				
  8188 00000223 BB0200                  		mov	bx, 2		; retry	count
  8189                                  prn_out:				
  8190 00000226 E83600                  		call	prnstat		; get status
  8191 00000229 751D                    		jnz	short TestPrnError
  8192 0000022B 268A05                  		mov	al, [es:di]	; get character	to print
  8193 0000022E 30E4                    		xor	ah, ah
  8194 00000230 E82E00                  		call	prnop		; print	to printer
  8195 00000233 7419                    		jz	short prn_con	; no error - continue
  8196 00000235 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8197 00000238 7509                    		jnz	short _prnwf
  8198 0000023A B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8199 0000023C C606[0C00]00            		mov	byte [altah], 0
  8200 00000241 EB08                    		jmp	short pmessg
  8201                                  ; ---------------------------------------------------------------------------
  8202                                  
  8203                                  _prnwf:					
  8204 00000243 F6C401                  		test	ah, 1		; timeoutstatus
  8205 00000246 7406                    		jz	short prn_con
  8206                                  TestPrnError:				
  8207 00000248 4B                      		dec	bx		; retry	until count is exhausted.
  8208 00000249 75DB                    		jnz	short prn_out
  8209                                  pmessg:					
  8210 0000024B E98DFE                  		jmp	bc_err_cnt
  8211                                  ; ---------------------------------------------------------------------------
  8212                                  
  8213                                  prn_con:				
  8214 0000024E 47                      		inc	di		; point	to next	char and continue
  8215 0000024F E2D2                    		loop	prn_loop
  8216                                  ;prn_done:				
  8217                                  		; 12/12/2022
  8218                                  prn_done2:
  8219                                  		;clc
  8220                                  		; cf=0
  8221 00000251 C3                      		retn
  8222                                  ; ---------------------------------------------------------------------------
  8223                                  
  8224                                  ;************************************************************************
  8225                                  ;*									*
  8226                                  ;*	prn_stat - device driver entry to return printer status		*
  8227                                  ;*									*
  8228                                  ;************************************************************************
  8229                                  
  8230                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8231 00000252 E80A00                  		call	prnstat		; device in dx
  8232 00000255 75F4                    		jnz	short pmessg
  8233 00000257 F6C480                  		test	ah, 80h		; notbusystatus
  8234                                  		;jnz	short prn_done
  8235                                  		; 12/12/2022
  8236 0000025A 75F5                    		jnz	short prn_done2 ; cf=0
  8237 0000025C E96BFF                  		jmp	z_bus_exit
  8238                                  ; ---------------------------------------------------------------------------
  8239                                  
  8240                                  ;************************************************************************
  8241                                  ;*									*
  8242                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8243                                  ;*		 printer status. Return meaningful error code		*
  8244                                  ;*									*
  8245                                  ;************************************************************************
  8246                                  
  8247                                  prnstat:				
  8248 0000025F B402                    		mov	ah, 2		; set command for get status
  8249                                  					; PRINTER - GET	STATUS
  8250                                  					; DX = printer port (0-3)
  8251                                  					; Return: AH = status
  8252                                  
  8253                                  ; =============== S U B	R O U T	I N E =======================================
  8254                                  
  8255                                  ;************************************************************************
  8256                                  ;*									*
  8257                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8258                                  ;*		return zero true if no error				*
  8259                                  ;*		return zero false if error, al = error code		*
  8260                                  ;*									*
  8261                                  ;************************************************************************
  8262                                  
  8263                                  prnop:	
  8264 00000261 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8265 00000265 CD17                    		int	17h		
  8266                                  
  8267                                  	; This check was added to see if this is a case of no
  8268                                  	; printer being installed. This tests checks to be sure
  8269                                  	; the error is noprinter (30h)
  8270                                  
  8271 00000267 50                      		push	ax
  8272 00000268 80E430                  		and	ah, 30h
  8273 0000026B 80FC30                  		cmp	ah, 30h		; noprinter
  8274 0000026E 58                      		pop	ax
  8275 0000026F 7506                    		jnz	short NextTest
  8276 00000271 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8277 00000274 80CC08                  		or	ah, 8		; ioerrstatus
  8278                                  
  8279                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8280                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8281                                  ; careful about breaking basic.
  8282                                  
  8283                                  NextTest:				
  8284 00000277 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8285                                  					; i/o error?
  8286 0000027A 740A                    		jz	short checknotready ; no, try not ready
  8287                                  
  8288                                  ; at this point, we know we have an error. the converse is not true
  8289                                  
  8290 0000027C B009                    		mov	al, 9		; error_I24_out_of_paper
  8291                                  					; first, assume	out of paper
  8292 0000027E F6C420                  		test	ah, 20h		; out of paper set?
  8293 00000281 7502                    		jnz	short ret1	; yes, error is	set
  8294 00000283 FEC0                    		inc	al		; return al=10 (i/o error)
  8295                                  ret1:					
  8296 00000285 C3                      		retn
  8297                                  ; ---------------------------------------------------------------------------
  8298                                  
  8299                                  checknotready:				
  8300 00000286 B002                    		mov	al, 2		; assume not-ready
  8301 00000288 F6C401                  		test	ah, 1
  8302 0000028B C3                      		retn
  8303                                  
  8304                                  ; ---------------------------------------------------------------------------
  8305                                  
  8306                                  ;************************************************************************
  8307                                  ;*									*
  8308                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8309                                  ;*		     this entry point should never block waiting for	*
  8310                                  ;*		     device to come ready.				*
  8311                                  ;*									*
  8312                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8313                                  ;*	outputs: set the number of bytes transferred in the		*
  8314                                  ;*		 device driver request packet				*
  8315                                  ;*									*
  8316                                  ;************************************************************************
  8317                                  
  8318                                  		; 19/10/2022
  8319                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8320 0000028C 89FE                    		mov	si, di		; everything is	set for	lodsb
  8321                                  prn_tilbloop:				
  8322 0000028E 51                      		push	cx
  8323 0000028F 53                      		push	bx
  8324 00000290 30FF                    		xor	bh, bh
  8325 00000292 8A1E[E704]              		mov	bl, [printdev]
  8326 00000296 D1E3                    		shl	bx, 1
  8327                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8328 00000298 8B8F[E804]              		mov	cx, [wait_count+bx]
  8329 0000029C 5B                      		pop	bx
  8330                                  prn_getstat:				
  8331 0000029D E8BFFF                  		call	prnstat		; get status
  8332 000002A0 7514                    		jnz	short prn_bperr	; error
  8333 000002A2 F6C480                  		test	ah, 80h		; ready	yet?
  8334 000002A5 E1F6                    		loope	prn_getstat	; no, go for more
  8335 000002A7 59                      		pop	cx		; get original count
  8336 000002A8 740D                    		jz	short prn_berr	; still	not ready => done
  8337 000002AA 26                      		es
  8338 000002AB AC                      		lodsb
  8339                                  		;lods	byte ptr es:[si] ; es
  8340                                  					; lodsb
  8341 000002AC 30E4                    		xor	ah, ah
  8342 000002AE E8B0FF                  		call	prnop
  8343 000002B1 7504                    		jnz	short prn_berr	; error
  8344 000002B3 E2D9                    		loop	prn_tilbloop
  8345                                  		; 12/12/2022
  8346                                  		; cf=0 (prnop)
  8347                                  		;clc			; normal no-error return
  8348 000002B5 C3                      		retn			;   from device driver
  8349                                  
  8350                                  ; ---------------------------------------------------------------------------
  8351                                  
  8352                                  prn_bperr:				
  8353 000002B6 59                      		pop	cx		; restore transfer count from stack
  8354                                  prn_berr:				
  8355 000002B7 E921FE                  		jmp	bc_err_cnt
  8356                                  ; ---------------------------------------------------------------------------
  8357                                  
  8358                                  ; 15/10/2022
  8359                                  
  8360                                  ;************************************************************************
  8361                                  ;*									*
  8362                                  ;*	prn_genioctl - get/set printer retry count			*
  8363                                  ;*									*
  8364                                  ;************************************************************************
  8365                                  
  8366                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8367                                  ; 11/01/2019
  8368                                  
  8369                                  ;********************************;*
  8370                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8371                                  ;********************************;*
  8372                                  
  8373                                  ;;RAWIO SUB-FUNCTIONS
  8374                                  ;;get_retry_count equ 65h
  8375                                  ;;set_retry_count equ 45h
  8376                                  
  8377                                  ;;struc A_RETRYCOUNT
  8378                                  ;;.rc_count: resw 1
  8379                                  ;;endstruc
  8380                                  
  8381                                  ;ioc_pc equ 5
  8382                                  
  8383                                  ; ---------------------------------------------------------------------------
  8384                                  
  8385                                  		; 19/10/2022
  8386                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8387 000002BA C43E[1200]              		les	di, [ptrsav]
  8388 000002BE 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8389                                  					; ioc_pc
  8390 000002C3 7403                    		jz	short prnfunc_ok
  8391                                  
  8392                                  prnfuncerr:				
  8393 000002C5 E911FE                  		jmp	bc_cmderr
  8394                                  ; ---------------------------------------------------------------------------
  8395                                  
  8396                                  prnfunc_ok:				
  8397 000002C8 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8398 000002CC 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8399 000002D0 30FF                    		xor	bh, bh
  8400                                  		;mov	bl, ds:printdev	; get index into retry counts
  8401 000002D2 8A1E[E704]              		mov	bl, [printdev]
  8402 000002D6 D1E3                    		shl	bx, 1
  8403                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8404 000002D8 8B8F[E804]              		mov	cx, [wait_count+bx]
  8405 000002DC 3C65                    		cmp	al, 65h		; get_retry_count
  8406 000002DE 7407                    		jz	short prngetcount
  8407 000002E0 3C45                    		cmp	al, 45h		; set_retry_count
  8408 000002E2 75E1                    		jnz	short prnfuncerr
  8409 000002E4 268B0D                  		mov	cx, [es:di]
  8410                                  prngetcount:				
  8411                                  		;mov	ds:wait_count[bx], cx
  8412 000002E7 898F[E804]              		mov	[wait_count+bx], cx
  8413 000002EB 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8414                                  					; return current retry count
  8415                                  		; 12/12/2022
  8416                                  		; cf=0
  8417                                  		;clc
  8418 000002EE C3                      		retn
  8419                                  ; ---------------------------------------------------------------------------
  8420                                  
  8421                                  ;************************************************************************
  8422                                  ;*									*
  8423                                  ;*  prn_ioctl_query							*
  8424                                  ;*									*
  8425                                  ;*  Added for 5.00							*
  8426                                  ;************************************************************************
  8427                                  
  8428                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8429 000002EF C43E[1200]              		les	di, [ptrsav]
  8430 000002F3 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8431                                  					; ioc_pc
  8432 000002F8 750D                    		jnz	short prn_query_err
  8433 000002FA 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8434 000002FE 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8435 00000300 7404                    		jz	short IOCtlSupported
  8436 00000302 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8437 00000304 7501                    		jnz	short prn_query_err
  8438                                  IOCtlSupported:	
  8439                                  		; 12/12/2022
  8440                                  		; cf=0		
  8441                                  		;clc
  8442 00000306 C3                      		retn
  8443                                  ; ---------------------------------------------------------------------------
  8444                                  
  8445                                  prn_query_err:
  8446                                  		; 12/12/2022				
  8447                                  		;stc
  8448 00000307 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8449                                  ; ---------------------------------------------------------------------------
  8450                                  
  8451                                  ;************************************************************************
  8452                                  ;*									*
  8453                                  ;*	aux port driver code -- "aux" == "com1"				*
  8454                                  ;*									*
  8455                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8456                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8457                                  ;*									*
  8458                                  ;************************************************************************
  8459                                  
  8460                                  ;	values in ah, requesting function of int 14h in rom bios
  8461                                  
  8462                                  ;auxfunc_send	 equ	1	;transmit
  8463                                  ;auxfunc_receive equ	2	;read
  8464                                  ;auxfunc_status	 equ	3	;request status
  8465                                  
  8466                                  ;	error flags, reported by int 14h, reported in ah:
  8467                                  
  8468                                  ;flag_data_ready equ	01h	;data ready
  8469                                  ;flag_overrun	 equ	02h	;overrun error
  8470                                  ;flag_parity	 equ	04h	;parity error
  8471                                  ;flag_frame	 equ	08h	;framing error
  8472                                  ;flag_break	 equ	10h	;break detect
  8473                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8474                                  ;flag_timeout	 equ	80h	;timeout
  8475                                  
  8476                                  ;	these flags reported in al:
  8477                                  
  8478                                  ;flag_cts	 equ	10h	;clear to send
  8479                                  ;flag_dsr	 equ	20h	;data set ready
  8480                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8481                                  
  8482                                  ; ---------------------------------------------------------------------------
  8483                                  
  8484                                  ;************************************************************************
  8485                                  ;*									*
  8486                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8487                                  ;*		   at es:di						*
  8488                                  ;*									*
  8489                                  ;************************************************************************
  8490                                  
  8491                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8492                                  		;jcxz	short exvec2
  8493 0000030A E311                    		jcxz	exvec2		; 19/10/2022
  8494 0000030C E87500                  		call	getbx		; put address of auxbuf	in bx
  8495 0000030F 30C0                    		xor	al, al
  8496 00000311 8607                    		xchg	al, [bx]
  8497 00000313 08C0                    		or	al, al
  8498 00000315 7503                    		jnz	short aux2
  8499                                  aux1:					
  8500 00000317 E80500                  		call	auxin		; get character	from port
  8501                                  					; won't return if error
  8502                                  aux2:					
  8503 0000031A AA                      		stosb
  8504 0000031B E2FA                    		loop	aux1		; if more characters, go around	again
  8505                                  exvec2:					
  8506 0000031D F8                      		clc			; all done, successful exit
  8507                                  auxin_retn:	; 18/12/2022
  8508 0000031E C3                      		retn
  8509                                  ; ---------------------------------------------------------------------------
  8510                                  
  8511                                  ;************************************************************************
  8512                                  ;*									*
  8513                                  ;*	auxin - call rom bios to read character from aux port		*
  8514                                  ;*		if error occurs, map the error and return one		*
  8515                                  ;*		level up to device driver exit code, setting		*
  8516                                  ;*		the number of bytes transferred appropriately		*
  8517                                  ;*									*
  8518                                  ;************************************************************************
  8519                                  
  8520                                  auxin:					
  8521 0000031F B402                    		mov	ah, 2		; auxfunc_receive
  8522 00000321 E83A00                  		call	auxop
  8523 00000324 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8524                                  		;jnz	short arbad	; skip if any error bits set
  8525                                  		;retn
  8526                                  		; 25/06/2023 (BugFix)
  8527 00000327 74F5                    		jz	short auxin_retn
  8528                                  ; ---------------------------------------------------------------------------
  8529                                  
  8530                                  arbad:					
  8531 00000329 58                      		pop	ax		; remove return	address	(near call)
  8532                                  		;xor	al, al
  8533                                  		;or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8534                                  		; 11/08/2023
  8535 0000032A B0B0                    		mov	al, 0B0h	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0334h
  8536 0000032C E9ACFD                  		jmp	bc_err_cnt
  8537                                  
  8538                                  ; ---------------------------------------------------------------------------
  8539                                  
  8540                                  ;************************************************************************
  8541                                  ;*									*
  8542                                  ;*	aux_rdnd - non-destructive aux port read			*
  8543                                  ;*									*
  8544                                  ;************************************************************************
  8545                                  
  8546                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8547 0000032F E85200                  		call	getbx
  8548 00000332 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8549 00000334 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8550 00000336 7511                    		jnz	short auxdrx	; then return character
  8551 00000338 E82100                  		call	auxstat		; if not, get status of	aux device
  8552 0000033B F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8553 0000033E 740C                    		jz	short auxbus	; then device is busy (not ready)
  8554 00000340 A820                    		test	al, 20h		; flag_dsr - test data set ready
  8555 00000342 7408                    		jz	short auxbus	; then device is busy (not ready)
  8556 00000344 E8D8FF                  		call	auxin		; else aux is ready, get character
  8557 00000347 8807                    		mov	[bx], al
  8558                                  auxdrx:					
  8559 00000349 E9A9FE                  		jmp	rdexit		; return busy status
  8560                                  ; ---------------------------------------------------------------------------
  8561                                  
  8562                                  auxbus:					
  8563 0000034C E97BFE                  		jmp	z_bus_exit
  8564                                  ; ---------------------------------------------------------------------------
  8565                                  
  8566                                  ;************************************************************************
  8567                                  ;*									*
  8568                                  ;*	aux_wrst - return aux port write status				*
  8569                                  ;*									*
  8570                                  ;************************************************************************
  8571                                  
  8572                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8573 0000034F E80A00                  		call	auxstat		; get status of	aux in ax
  8574 00000352 A820                    		test	al, 20h		; test data set	ready
  8575 00000354 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8576 00000356 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8577 00000359 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8578                                  		; 12/12/2022
  8579                                  		; cf=0	; (test instruction resets cf)
  8580                                  		;clc
  8581 0000035B C3                      		retn
  8582                                  ; ---------------------------------------------------------------------------
  8583                                  
  8584                                  ;************************************************************************
  8585                                  ;*									*
  8586                                  ;*	auxstat - call rom bios to determine aux port status		*
  8587                                  ;*									*
  8588                                  ;*	exit:	ax = status						*
  8589                                  ;*		dx = [auxnum]						*
  8590                                  ;*									*
  8591                                  ;************************************************************************
  8592                                  
  8593                                  auxstat:				
  8594 0000035C B403                    		mov	ah, 3		; auxfunc_status
  8595                                  
  8596                                  		; fall into auxop
  8597                                  
  8598                                  ; =============== S U B	R O U T	I N E =======================================
  8599                                  
  8600                                  ;************************************************************************
  8601                                  ;*									*
  8602                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8603                                  ;*									*
  8604                                  ;*	entry:	ah = int 14h function number				*
  8605                                  ;*	exit:	ax = results						*
  8606                                  ;*		dx = [auxnum]						*
  8607                                  ;*									*
  8608                                  ;************************************************************************
  8609                                  
  8610                                  auxop:		; proc near		
  8611 0000035E 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8612                                  					; 0=init, 1=send, 2=receive, 3=status
  8613                                  					; get port number
  8614 00000362 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8615                                  					; DX = port number (0-3)
  8616                                  					; Return: AX = port status code
  8617 00000364 C3                      		retn
  8618                                  
  8619                                  ; ---------------------------------------------------------------------------
  8620                                  
  8621                                  ;************************************************************************
  8622                                  ;*									*
  8623                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8624                                  ;*		   auxbuf [auxnum] to zero				*
  8625                                  ;*									*
  8626                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8627                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8628                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8629                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8630                                  ;*									*
  8631                                  ;************************************************************************
  8632                                  
  8633                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8634 00000365 E81C00                  		call	getbx		; flush	aux input buffer
  8635 00000368 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8636                                  					; zero out buffer
  8637                                  		;clc			; all done, successful return
  8638                                  		; 12/12/2022
  8639                                  		; cf=0 ('add' instruction in 'getbx')
  8640 0000036B C3                      		retn
  8641                                  ; ---------------------------------------------------------------------------
  8642                                  
  8643                                  ;************************************************************************
  8644                                  ;*									*
  8645                                  ;*	aux_writ - write to aux device					*
  8646                                  ;*									*
  8647                                  ;************************************************************************
  8648                                  
  8649                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8650                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8651 0000036C E3AF                    		jcxz	exvec2		; 19/10/2022
  8652                                  aux_loop:				
  8653 0000036E 268A05                  		mov	al, [es:di]	; get character	to be written
  8654                                  					; move di pointer to next character
  8655 00000371 47                      		inc	di
  8656 00000372 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8657 00000374 E8E7FF                  		call	auxop		; send character over aux port
  8658 00000377 F6C480                  		test	ah, 80h		; check	for error
  8659 0000037A 7405                    		jz	short awok	; then no error
  8660 0000037C B00A                    		mov	al, 10		; else indicate	write fault
  8661 0000037E E95AFD                  		jmp	bc_err_cnt	; call error routines
  8662                                  ; ---------------------------------------------------------------------------
  8663                                  
  8664                                  awok:					
  8665 00000381 E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8666                                  					; still	more character to print
  8667                                  		;clc			; all done, successful return
  8668                                  		; 12/12/2022
  8669                                  		; cf=0 (test instruction above)	
  8670 00000383 C3                      		retn
  8671                                  
  8672                                  ; =============== S U B	R O U T	I N E =======================================
  8673                                  
  8674                                  ;************************************************************************
  8675                                  ;*									*
  8676                                  ;*	getbx - return bx -> single byte input buffer for		*
  8677                                  ;*		selected aux port ([auxnum])				*
  8678                                  ;*									*
  8679                                  ;************************************************************************
  8680                                  
  8681                                  getbx:	
  8682 00000384 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8683                                  					; for selected aux port	([auxnum])
  8684                                  		;add	bx, offset auxbuf
  8685 00000388 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8686                                  		; 12/12/2022
  8687                                  		; cf=0 (if [uaxnum] is valid number) 
  8688 0000038C C3                      		retn
  8689                                  
  8690                                  ; ---------------------------------------------------------------------------
  8691                                  
  8692                                  ; 15/10/2022
  8693                                  
  8694                                  ;----------------------------------------------------------------
  8695                                  ;								:
  8696                                  ;		    clock device driver 			:
  8697                                  ;								:
  8698                                  ;								:
  8699                                  ;   this file contains the clock device driver. 		:
  8700                                  ;								:
  8701                                  ;   the routines in this files are:				:
  8702                                  ;								:
  8703                                  ;	routine 		function			:
  8704                                  ;	------- 		--------			:
  8705                                  ;	tim_writ		set the current time		:
  8706                                  ;	tim_read		read the current time		:
  8707                                  ;	time_to_ticks		convert time to corresponding	:
  8708                                  ;				  number of clock ticks 	:
  8709                                  ;								:
  8710                                  ; the clock ticks at the rate of:				:
  8711                                  ;								:
  8712                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8713                                  ; see each routine for information on the use.			:
  8714                                  ;								:
  8715                                  ;----------------------------------------------------------------
  8716                                  
  8717                                  ; convert time to ticks
  8718                                  ; input : time in cx and dx
  8719                                  ; ticks returned in cx:dx
  8720                                  
  8721                                  ;19/07/2019
  8722                                  ;09/03/2019
  8723                                  
  8724                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8725                                  
  8726                                  ; first convert from hour,min,sec,hund. to
  8727                                  ; total number of 100th of seconds
  8728                                  
  8729 0000038D B03C                    		mov	al, 60
  8730 0000038F F6E5                    		mul	ch		; hours	to minutes
  8731 00000391 B500                    		mov	ch, 0
  8732 00000393 01C8                    		add	ax, cx		; total	minutes
  8733 00000395 B97017                  		mov	cx, 6000	; 60*100
  8734 00000398 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8735 0000039A F7E1                    		mul	cx		; convert to 1/100 sec
  8736 0000039C 89C1                    		mov	cx, ax
  8737 0000039E B064                    		mov	al, 100
  8738 000003A0 F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8739 000003A2 01C1                    		add	cx, ax		; combine seconds with hours and min
  8740 000003A4 83D200                  		adc	dx, 0		; ripple carry
  8741 000003A7 B700                    		mov	bh, 0
  8742 000003A9 01D9                    		add	cx, bx		; combine 1/100	sec
  8743 000003AB 83D200                  		adc	dx, 0
  8744                                  
  8745                                  	; dx:cx is time in 1/100 sec
  8746                                  
  8747 000003AE 92                      		xchg	ax, dx
  8748 000003AF 91                      		xchg	ax, cx		; now time is in cx:ax
  8749 000003B0 BB0BE9                  		mov	bx, 59659
  8750 000003B3 F7E3                    		mul	bx		; multiply low half
  8751 000003B5 87D1                    		xchg	dx, cx
  8752 000003B7 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8753 000003B8 F7E3                    		mul	bx		; multiply high	half
  8754 000003BA 01C8                    		add	ax, cx		; combine overlapping products
  8755 000003BC 83D200                  		adc	dx, 0
  8756 000003BF 92                      		xchg	ax, dx		; ax:dx=time*59659
  8757 000003C0 BB0500                  		mov	bx, 5
  8758 000003C3 F6F3                    		div	bl		; divide high half by 5
  8759 000003C5 88C1                    		mov	cl, al
  8760 000003C7 B500                    		mov	ch, 0
  8761 000003C9 88E0                    		mov	al, ah		; remainder of divide-by-5
  8762 000003CB 98                      		cbw
  8763 000003CC 92                      		xchg	ax, dx		; use it to extend low half
  8764 000003CD F7F3                    		div	bx		; divide low half by 5
  8765 000003CF 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8766 000003D1 CB                      		retf			; far return
  8767                                  
  8768                                  ; ---------------------------------------------------------------------------
  8769                                  
  8770                                  ; 17/10/2022
  8771                                  ; 15/10/2022
  8772                                  
  8773                                  ;--------------------------------------------------------------------
  8774                                  ;
  8775                                  ; tim_writ sets the current time
  8776                                  ;
  8777                                  ; on entry es:[di] has the current time:
  8778                                  ;
  8779                                  ;	number of days since 1-1-80	(word)
  8780                                  ;	minutes (0-59)			(byte)
  8781                                  ;	hours (0-23)			(byte)
  8782                                  ;	hundredths of seconds (0-99)	(byte)
  8783                                  ;	seconds (0-59)			(byte)
  8784                                  ;
  8785                                  ; each number has been checked for the correct range.
  8786                                  ;
  8787                                  ;	NOTE: Any changes in this routine probably require corresponding
  8788                                  ;	changes in the version that is built with the power manager driver.
  8789                                  ;	See ptime.asm.
  8790                                  ;
  8791                                  ;--------------------------------------------------------------------
  8792                                  
  8793                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  8794                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:03EAh
  8795                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8796 000003D2 268B05                  		mov	ax, [es:di]
  8797 000003D5 50                      		push	ax		; daycnt. we need to set this at the very
  8798                                  					; end to avoid tick windows.
  8799 000003D6 803E[F304]00            		cmp	byte [havecmosclock], 0
  8800                                  		;cmp	ds:havecmosclock, 0
  8801 000003DB 7423                    		jz	short no_cmos_1
  8802 000003DD 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8803                                  					; get binary hours
  8804                                  					; convert to bcd
  8805                                  		;call	far [bintobcd]
  8806                                  		;;call	ds:bintobcd	; call far [bintobcd]
  8807                                  		; 08/08/2023
  8808 000003E1 E8E800                  		call	bintobcd
  8809 000003E4 88C5                    		mov	ch, al		; ch = bcd hours
  8810 000003E6 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8811                                  		;call	far [bintobcd]
  8812                                  		;;call	ds:bintobcd	; convert to bcd
  8813 000003EA E8DF00                  		call	bintobcd
  8814 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8815 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8816                                  		;call	far [bintobcd]
  8817                                  		;;call	ds:bintobcd
  8818 000003F3 E8D600                  		call	bintobcd
  8819                                  
  8820 000003F6 88C6                    		mov	dh, al		; dh = bcd seconds
  8821 000003F8 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8822 000003FA FA                      		cli
  8823 000003FB B403                    		mov	ah, 3
  8824 000003FD CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8825                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8826                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8827                                  					; Return: CMOS clock set
  8828 000003FF FB                      		sti
  8829                                  no_cmos_1:				
  8830 00000400 268B4D02                		mov	cx, [es:di+2]
  8831 00000404 268B5504                		mov	dx, [es:di+4]
  8832                                  		; 17/10/2022
  8833 00000408 FF1E[C106]              		call	far [ttticks]
  8834                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8835                                  					; convert time to ticks
  8836                                  					; cx:dx	now has	time in	ticks
  8837 0000040C FA                      		cli			; turn off timer
  8838 0000040D B401                    		mov	ah, 1
  8839 0000040F CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8840                                  					; CX:DX	= clock	count
  8841                                  					; Return: time of day set
  8842                                  		;pop	ds:daycnt
  8843 00000411 8F06[F004]              		pop	word [daycnt]
  8844 00000415 FB                      		sti
  8845                                  		;cmp	ds:havecmosclock, 0
  8846 00000416 803E[F304]00            		cmp	byte [havecmosclock], 0
  8847 0000041B 7409                    		jz	short no_cmos_2
  8848                                  
  8849                                  		; 08/08/2023
  8850                                  		;call	far [daycnttoday]
  8851                                  		;;call	ds:daycnttoday	; call far [daycnttoday]
  8852                                  					; convert to bcd format
  8853 0000041D E80700                  		call	daycnttoday
  8854                                  
  8855 00000420 FA                      		cli
  8856 00000421 B405                    		mov	ah, 5
  8857 00000423 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8858                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8859                                  					; CH = century (19h or 20h)
  8860                                  					; Return: CMOS clock set
  8861 00000425 FB                      		sti
  8862                                  no_cmos_2:
  8863                                  		; 12/12/2022
  8864                                  		; cf=0
  8865                                  		;clc
  8866 00000426 C3                      		retn
  8867                                  
  8868                                  ; ---------------------------------------------------------------------------
  8869                                  
  8870                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  8871                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0440h
  8872                                  %if 1 
  8873                                  
  8874                                  ; CMOS Clock setting support routines used by MSCLOCK.
  8875                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  8876                                  
  8877                                  daycnttoday:	; proc near
  8878                                  
  8879                                  ; entry: [daycnt] = number of days since 1-1-80
  8880                                  ;
  8881                                  ; return: ch - century in bcd
  8882                                  ;	  cl - year in bcd
  8883                                  ;	  dh - month in bcd
  8884                                  ;	  dl - day in bcd
  8885                                  
  8886                                  		; 08/08/2023 (ds:) (near proc)
  8887                                  		; 16/10/2022 (cs:) (far proc)		
  8888 00000427 FF36[F004]              		push	word [daycnt] ; save daycnt
  8889 0000042B 813E[F004]891C          		cmp	word [daycnt], 7305 ; (365*20+(20/4))
  8890                                  					; # days from 1-1-1980 to 1-1-2000
  8891 00000431 7308                    		jnb	short century20
  8892                                  		;mov	byte [base_century], 19
  8893                                  		;mov	byte [base_year], 80
  8894                                  		; 08/08/2023
  8895 00000433 C706[F404]1350          		mov	word [base_century], 5013h
  8896 00000439 EB0C                    		jmp	short years
  8897                                  ; ----------------------------------------------------------------------------
  8898                                  		
  8899                                  century20:				
  8900                                  		;mov	byte [base_century], 20
  8901                                  		;mov	byte [base_year], 0
  8902                                  		; 08/08/2023
  8903 0000043B C706[F404]1400          		mov	word [base_century], 20
  8904 00000441 812E[F004]891C          		sub	word [daycnt], 7305 ; (365*20+(20/4))
  8905                                  					; adjust daycnt
  8906                                  years:					
  8907 00000447 31D2                    		xor	dx, dx
  8908 00000449 A1[F004]                		mov	ax, [daycnt]
  8909 0000044C BBB505                  		mov	bx, 1461	; (366+365*3)
  8910                                  					; # of days in a Leap year block
  8911 0000044F F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  8912 00000451 8916[F004]              		mov	[daycnt], dx	; save daycnt left
  8913 00000455 B304                    		mov	bl, 4
  8914 00000457 F6E3                    		mul	bl		; AX = # of years. Less	than 100
  8915 00000459 0006[F504]              		add	[base_year], al ; So, ah = 0. Adjust year
  8916 0000045D FF06[F004]              		inc	word [daycnt]	; set daycnt to	1 base
  8917                                  		; 08/08/2023
  8918 00000461 BB6E01                  		mov	bx, 366
  8919 00000464 B90300                  		mov	cx, 3
  8920                                  		;cmp	word [daycnt], 366 ; daycnt=remainder of leap year
  8921 00000467 391E[F004]              		cmp	[daycnt], bx ; 366
  8922 0000046B 7619                    		jbe	short leapyear	; within 366+355+355+355 days.
  8923 0000046D FE06[F504]              		inc	byte [base_year] ; if daycnt <= 366, then leap year
  8924                                  		;sub	word [daycnt], 366 ; else daycnt--, base_year++ ;
  8925 00000471 291E[F004]              		sub	[daycnt], bx ; 366 ; 08/08/2023
  8926                                  		;mov	cx, 3		; And next three years are normal
  8927                                  regularyear:	
  8928                                  		; 08/08/2023
  8929 00000475 4B                      		dec	bx ; 365			
  8930                                  		;cmp	word [daycnt], 365 ; for(i=1; i>3 or daycnt <=365; i++)
  8931 00000476 391E[F004]              		cmp	[daycnt], bx ; 365 ; 08/08/2023
  8932 0000047A 760F                    		jbe	short yeardone	; {if (daycnt >	365)
  8933 0000047C FE06[F504]              		inc	byte [base_year] ; { daycnt -=	365
  8934                                  		;sub	word [daycnt], 365 ; }
  8935 00000480 291E[F004]              		sub	[daycnt], bx ; 365 ; 08/08/2023 
  8936 00000484 E2EF                    		loop	regularyear	; }
  8937                                  					;
  8938                                  					; should never fall through loop
  8939                                  leapyear:	
  8940 00000486 C606[F704]1D            		mov	byte [february], 29 ; 08/08/2023			
  8941                                  		;mov	byte [month_tab+1], 29 ; leap year.
  8942                                  					; change month table.
  8943                                  yeardone:				
  8944 0000048B 31DB                    		xor	bx, bx
  8945 0000048D 31D2                    		xor	dx, dx
  8946 0000048F A1[F004]                		mov	ax, [daycnt]
  8947                                  		;mov	si, offset month_tab
  8948 00000492 BE[F604]                		mov	si, month_tab	; 19/10/2022
  8949                                  		;mov	cx, 12
  8950                                  		; 08/08/2023
  8951 00000495 B10C                    		mov	cl, 12
  8952                                  months:					
  8953 00000497 FEC3                    		inc	bl
  8954                                  		; 08/08/2023
  8955 00000499 8A14                    		mov	dl, [si]	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:04B7h
  8956 0000049B 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  8957                                  					; dh=0
  8958 0000049D 7605                    		jbe	short month_done
  8959 0000049F 46                      		inc	si		; next month
  8960 000004A0 29D0                    		sub	ax, dx		; adjust daycnt
  8961 000004A2 E2F3                    		loop	months		;
  8962                                  					; should never fall through loop
  8963                                  month_done:	
  8964 000004A4 C606[F704]1C            		mov	byte [february], 28 ; 08/08/2023
  8965                                  		;mov	byte [month_tab+1], 28
  8966                                  					; restore month table value
  8967 000004A9 88DA                    		mov	dl, bl
  8968 000004AB 8A36[F504]              		mov	dh, [base_year]
  8969 000004AF 8A0E[F404]              		mov	cl, [base_century] ; al=day,dl=month,dh=year,cl=cntry
  8970 000004B3 E81600                  		call	bintobcd	; convert "day"	to bcd
  8971                                  					; dl = bcd day,	al = month
  8972 000004B6 86D0                    		xchg	dl, al
  8973 000004B8 E81100                  		call	bintobcd	; dh = bcd month, al = year
  8974 000004BB 86F0                    		xchg	dh, al
  8975 000004BD E80C00                  		call	bintobcd	; cl = bcd year, al = century
  8976 000004C0 86C8                    		xchg	cl, al
  8977 000004C2 E80700                  		call	bintobcd	; ch = bcd century
  8978 000004C5 88C5                    		mov	ch, al
  8979 000004C7 8F06[F004]              		pop	word [daycnt] ; restore original value
  8980 000004CB C3                      		retn
  8981                                  
  8982                                  ;----------------------------------------------------------------------------
  8983                                  
  8984                                  bintobcd:	; proc near		; real time clock support
  8985                                  
  8986                                  ;convert a binary input in al (less than 63h or 99 decimal)
  8987                                  ;into a bcd value in al. ah destroyed.	
  8988                                  		
  8989 000004CC D40A                    		aam			; AH = AL/10, AL = AL MOD 10
  8990 000004CE D510                    		aad     10h             ; db 0D5h,10h
  8991                                  					; AL = (AH*10H)+AL, AH = 0
  8992 000004D0 C3                      		retn
  8993                                  %endif
  8994                                  
  8995                                  ;----------------------------------------------------------------------------
  8996                                  
  8997                                  ; 15/10/2022
  8998                                  
  8999                                  ;----------------------------------------------------------------------------
  9000                                  ; gettime reads date and time
  9001                                  ; and returns the following information:
  9002                                  ;
  9003                                  ;	es:[di]  =count of days since 1-1-80
  9004                                  ;	es:[di+2]=hours
  9005                                  ;	es:[di+3]=minutes
  9006                                  ;	es:[di+4]=seconds
  9007                                  ;	es:[di+5]=hundredths of seconds
  9008                                  ;
  9009                                  ;	NOTE:  Any changes in this routine probably require corresponding
  9010                                  ;	changes in the version that is built with the power manager driver.
  9011                                  ;	See ptime.asm.
  9012                                  ;----------------------------------------------------------------------------
  9013                                  
  9014                                  tim_read:				; 2C7h:435h = 70h:29A5h
  9015 000004D1 E84B00                  		call	GetTickCnt
  9016 000004D4 8B36[F004]              		mov	si, [daycnt]
  9017                                  
  9018                                  ; we now need to convert the time in tick to the time in 100th of
  9019                                  ; seconds. the relation between tick and seconds is:
  9020                                  ;
  9021                                  ;		 65,536 seconds
  9022                                  ;	       ----------------
  9023                                  ;		1,193,180 tick
  9024                                  ;
  9025                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  9026                                  ;
  9027                                  ;	ticks from clock  * 65,536 * 100
  9028                                  ;      --------------------------------- = time in 100th of seconds
  9029                                  ;		1,193,180
  9030                                  ;
  9031                                  ; fortunately this formula simplifies to:
  9032                                  ;
  9033                                  ;	ticks from clock * 5 * 65,536
  9034                                  ;      --------------------------------- = time in 100th of seconds
  9035                                  ;		59,659
  9036                                  ;
  9037                                  ; the calculation is done by first multipling tick by 5. next we divide by
  9038                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  9039                                  ; my 16 bits to the left.
  9040                                  ;
  9041                                  ; start with ticks in cx:dx
  9042                                  ; multiply by 5
  9043                                  
  9044 000004D8 89C8                    		mov	ax, cx
  9045 000004DA 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  9046                                  					; multiply by 5
  9047 000004DC D1E2                    		shl	dx, 1
  9048 000004DE D1D1                    		rcl	cx, 1		; times	2
  9049 000004E0 D1E2                    		shl	dx, 1
  9050 000004E2 D1D1                    		rcl	cx, 1		; times	4
  9051 000004E4 01DA                    		add	dx, bx
  9052 000004E6 11C8                    		adc	ax, cx		; times	5
  9053 000004E8 92                      		xchg	ax, dx
  9054                                  
  9055                                  ; now have ticks * 5 in	dx:ax
  9056                                  ; we now need to multiply by 65536 and divide by 59659 d.
  9057                                  
  9058 000004E9 B90BE9                  		mov	cx, 59659	; get divisor
  9059 000004EC F7F1                    		div	cx		; dx now has remainder
  9060                                  					; ax has high word of final quotient
  9061                                  
  9062                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9063                                  		;mov	bx, ax		; put high word	in safe	place
  9064 000004EE 93                      		xchg	bx, ax
  9065 000004EF 31C0                    		xor	ax, ax		; this is the multiply by 65536
  9066 000004F1 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  9067                                  
  9068                                  ; rounding based on the	remainder may be added here
  9069                                  ; the result in	bx:ax is time in 1/100 second.
  9070                                  
  9071 000004F3 89DA                    		mov	dx, bx		
  9072 000004F5 B9C800                  		mov	cx, 200		; extract 1/100's
  9073                                  
  9074                                  ; division by 200 is necessary to ensure no overflow--max result
  9075                                  ; is number of seconds in a day/2 = 43200.
  9076                                  
  9077 000004F8 F7F1                    		div	cx
  9078 000004FA 80FA64                  		cmp	dl, 100		; remainder over 100?
  9079 000004FD 7203                    		jb	short noadj
  9080 000004FF 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  9081                                  noadj:					
  9082 00000502 F5                      		cmc			; if we	subtracted 100,	carry is now set
  9083 00000503 88D3                    		mov	bl, dl		; save 1/100's
  9084                                  
  9085                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  9086                                  ; by two, shifting a one in if the remainder had exceeded 100.
  9087                                  
  9088 00000505 D1D0                    		rcl	ax, 1		
  9089 00000507 B200                    		mov	dl, 0
  9090 00000509 D1D2                    		rcl	dx, 1
  9091 0000050B B93C00                  		mov	cx, 60		; divide out seconds
  9092 0000050E F7F1                    		div	cx
  9093 00000510 88D7                    		mov	bh, dl		; save the seconds
  9094 00000512 F6F1                    		div	cl		; break	into hours and minutes
  9095 00000514 86C4                    		xchg	al, ah
  9096                                  
  9097                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  9098                                  
  9099                                  		; 08/08/2023
  9100                                  		;push	ax
  9101                                  		;mov	ax, si		; daycnt
  9102 00000516 96                      		xchg	ax, si
  9103 00000517 AB                      		stosw
  9104                                  		;pop	ax
  9105 00000518 96                      		xchg	ax, si		; al = hours, ah = minutes
  9106 00000519 AB                      		stosw
  9107 0000051A 89D8                    		mov	ax, bx
  9108 0000051C AB                      		stosw
  9109 0000051D F8                      		clc			; [es:di] = count of days since 1-1-80
  9110                                  					;   [es:di+2] = hours
  9111                                  					;   [es:di+3] = minutes
  9112                                  					;   [es:di+4] = seconds
  9113                                  					;   [es:di+5] = hundredths of seconds
  9114 0000051E C3                      		retn
  9115                                  
  9116                                  ; =============== S U B	R O U T	I N E =======================================
  9117                                  
  9118                                  ; 15/10/2022
  9119                                  
  9120                                  ;----------------------------------------------------------------------------
  9121                                  ;
  9122                                  ; procedure : GetTickCnt
  9123                                  ;
  9124                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  9125                                  ;		of rollover [except when power management driver is in use]. 
  9126                                  ;		Uses the following logic for updating Daycnt
  9127                                  ;
  9128                                  ;		if ( rollover ) {
  9129                                  ;			if ( t_switch )
  9130                                  ;				daycnt++ ;
  9131                                  ;			else
  9132                                  ;				daycnt += rollover ;
  9133                                  ;		}
  9134                                  ;
  9135                                  ; USES : AX
  9136                                  ;
  9137                                  ; RETURNS : CX:DX - tick count
  9138                                  ; MODIFIES : daycnt
  9139                                  ;
  9140                                  ;----------------------------------------------------------------------------
  9141                                  
  9142                                  		; 17/10/2022
  9143                                  GetTickCnt:	
  9144 0000051F 30E4                    		xor	ah, ah
  9145 00000521 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  9146                                  					; Return: CX:DX	= clock	count
  9147                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  9148                                  					; midnight
  9149                                  					; Otherwise, AL	> 0
  9150 00000523 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  9151 00000528 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  9152 0000052A 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  9153                                  					; and not flag
  9154 0000052C 0106[F004]              		add	[daycnt], ax
  9155 00000530 C3                      		retn
  9156                                  ; ---------------------------------------------------------------------------
  9157                                  
  9158                                  inc_case:				
  9159 00000531 08C0                    		or	al, al
  9160 00000533 7404                    		jz	short no_rollover
  9161 00000535 FF06[F004]              		inc	word [daycnt]
  9162                                  no_rollover:				
  9163 00000539 C3                      		retn
  9164                                  
  9165                                  ;----------------------------------------------------------------------------
  9166                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  9167                                  ;----------------------------------------------------------------------------
  9168                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9169                                  ; 09/03/2019 - Retro DOS v4.0
  9170                                  
  9171                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  9172                                  ; 26/05/2018 - Retro DOS v3.0
  9173                                  ; 23/03/2018 - Retro DOS v2.0
  9174                                  
  9175                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  9176                                  
  9177                                  ;struc BPB_TYPE
  9178                                  ;.SECSIZE:	resw 1
  9179                                  ;.SECALL:	resb 1
  9180                                  ;.RESNUM:	resw 1
  9181                                  ;.FATNUM:	resb 1
  9182                                  ;.DIRNUM:	resw 1
  9183                                  ;.SECNUM:	resw 1
  9184                                  ;.FATID:	resb 1
  9185                                  ;.FATSIZE:	resw 1
  9186                                  ;.SLIM:		resw 1
  9187                                  ;.HLIM:		resw 1
  9188                                  ;.HIDDEN:	resw 1
  9189                                  ;.size:
  9190                                  ;endstruc
  9191                                  
  9192                                  ;-----------------------------------------------------------------
  9193                                  ;	disk interface routines
  9194                                  ;-----------------------------------------------------------------
  9195                                  
  9196                                  ; device attribute bits:
  9197                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  9198                                  
  9199                                  ;MAXERR		equ	5
  9200                                  ;MAX_HD_FMT_ERR	equ	2
  9201                                  
  9202                                  ;LSTDRV	equ 504h
  9203                                  
  9204                                  ; some floppies do not have changeline. as a result, media-check would
  9205                                  ; normally return i-don't-know, the dos would continually reread the fat and
  9206                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  9207                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  9208                                  ; the time of the last successful disk operation and compare it with the current
  9209                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  9210                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  9211                                  ; since we cannot trust the timer to be always available, we record the number 
  9212                                  ; of media checks that have occurred when no apparent time has elapsed. while
  9213                                  ; this number is < a given threshold, we say no change. when it exceeds that
  9214                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  9215                                  ; the time of last successful access, if we see that time has passed too,
  9216                                  ; we reset the counter.
  9217                                  
  9218                                  accessmax	equ	5
  9219                                  
  9220                                  ; due to various bogosities, we need to continually adjust what the head
  9221                                  ; settle time is.  the following algorithm is used:
  9222                                  ;
  9223                                  ;   get the current head settle value.
  9224                                  ;   if it is 0, then
  9225                                  ;	set slow = 15
  9226                                  ;   else
  9227                                  ;	set slow = value
  9228                                  ;   ...
  9229                                  ;*********************************************
  9230                                  ;************ old algorithm ******************
  9231                                  ;*   if we are seeking and writing then
  9232                                  ;*	 use slow
  9233                                  ;*   else
  9234                                  ;*	 use fast
  9235                                  ;*********************************************
  9236                                  ;*********** ibm's requested logic ***********
  9237                                  ;   if we are seeking and writing and not on an at then
  9238                                  ;	use slow
  9239                                  ;   else
  9240                                  ;	use fast
  9241                                  ;   ...
  9242                                  ;   restore current head settle value
  9243                                  ;
  9244                                  ;
  9245                                  ;---------------------------------------
  9246                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  9247                                  					; it on after handling config.sys file as a
  9248                                  					; default value, if multrk_flag = multrk_off1.
  9249                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  9250                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  9251                                  
  9252                                  ; close data segment, open Bios_Code segment
  9253                                  
  9254                                  ; 15/10/2022
  9255                                  
  9256                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  9257                                  
  9258                                  ;-----------------------------------------------------------------
  9259                                  ;	command jump table
  9260                                  ;-----------------------------------------------------------------
  9261                                  
  9262 0000053A 00                      		db 0
  9263                                  ; 11/12/2022
  9264                                  %if 0
  9265                                  
  9266                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  9267                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  9268                                  		dw 1742h		; dsk_init
  9269                                  		dw 4EBh			; media_chk
  9270                                  		dw 592h			; get_bpb
  9271                                  		dw 0D5h			; bc_cmderr
  9272                                  		dw 857h			; dsk_read
  9273                                  		dw 83Dh			; x_bus_exit
  9274                                  		dw 558h			; ret_carry_clear
  9275                                  		dw 558h			; ret_carry_clear
  9276                                  		dw 849h			; dsk_writ
  9277                                  		dw 841h			; dsk_writv
  9278                                  		dw 558h			; ret_carry_clear
  9279                                  		dw 558h			; ret_carry_clear
  9280                                  		dw 0D5h			; bc_cmderr
  9281                                  		dw 80Ah			; dsk_open
  9282                                  		dw 81Ah			; dsk_close
  9283                                  		dw 831h			; dsk_rem
  9284                                  		dw 558h			; ret_carry_clear
  9285                                  		dw 558h			; ret_carry_clear
  9286                                  		dw 558h			; ret_carry_clear
  9287                                  		dw 0C6Bh		; do_generic_ioctl
  9288                                  		dw 558h			; ret_carry_clear
  9289                                  		dw 558h			; ret_carry_clear
  9290                                  		dw 558h			; ret_carry_clear
  9291                                  		dw 1124h		; ioctl_getown
  9292                                  		dw 1142h		; ioctl_setown
  9293                                  		dw 129Ah		; ioctl_support_query
  9294                                  
  9295                                  ;dtbl_siz equ $-dsktbl
  9296                                  
  9297                                  %endif
  9298                                  		; 11/12/2022
  9299 0000053B 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  9300 0000053C [6117]                  		dw dsk_init
  9301 0000053E [8405]                  		dw media_chk
  9302 00000540 [2306]                  		dw get_bpb
  9303 00000542 [D900]                  		dw bc_cmderr
  9304 00000544 [D308]                  		dw dsk_read
  9305 00000546 [B908]                  		dw x_bus_exit
  9306 00000548 [EE05]                  		dw ret_carry_clear
  9307 0000054A [EE05]                  		dw ret_carry_clear
  9308 0000054C [C508]                  		dw dsk_writ
  9309 0000054E [BD08]                  		dw dsk_writv
  9310 00000550 [EE05]                  		dw ret_carry_clear
  9311 00000552 [EE05]                  		dw ret_carry_clear
  9312 00000554 [D900]                  		dw bc_cmderr
  9313 00000556 [8908]                  		dw dsk_open
  9314 00000558 [9808]                  		dw dsk_close
  9315 0000055A [AE08]                  		dw dsk_rem
  9316 0000055C [EE05]                  		dw ret_carry_clear
  9317 0000055E [EE05]                  		dw ret_carry_clear
  9318 00000560 [EE05]                  		dw ret_carry_clear
  9319 00000562 [E00C]                  		dw do_generic_ioctl
  9320 00000564 [EE05]                  		dw ret_carry_clear
  9321 00000566 [EE05]                  		dw ret_carry_clear
  9322 00000568 [EE05]                  		dw ret_carry_clear
  9323 0000056A [7711]                  		dw ioctl_getown
  9324 0000056C [9411]                  		dw ioctl_setown
  9325 0000056E [E212]                  		dw ioctl_support_query
  9326                                  
  9327                                  dtbl_siz equ $-dsktbl
  9328                                  
  9329                                  ; =============== S U B	R O U T	I N E =======================================
  9330                                  
  9331                                  ; ---------------------------------------------------------------------------
  9332                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9333                                  ; the one that belongs to the drive specified. carry is set if none exists
  9334                                  ; for the drive. Pointer is returned in es:[di]
  9335                                  ;
  9336                                  ;  AL contains the logical drive number.
  9337                                  ; ---------------------------------------------------------------------------
  9338                                  
  9339                                  SetDrive:	
  9340                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9341 00000570 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9342                                  X_Scan_Loop:				
  9343 00000574 26384505                		cmp	[es:di+5], al	
  9344 00000578 7409                    		jz	short X_SetDrv
  9345 0000057A 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9346 0000057D 83FFFF                  		cmp	di, 0FFFFh
  9347 00000580 75F2                    		jnz	short X_Scan_Loop
  9348 00000582 F9                      		stc
  9349                                  X_SetDrv:				
  9350 00000583 C3                      		retn
  9351                                  
  9352                                  ; ---------------------------------------------------------------------------
  9353                                  
  9354                                  ; 15/10/2022
  9355                                  
  9356                                  ; ---------------------------------------------------------------------
  9357                                  ; if id is f9, have a 96tpi disk else
  9358                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9359                                  ;  otherwise if within 2 secs of last disk operation media could not
  9360                                  ;    have changed, otherwise dont know if media has changed
  9361                                  ; ---------------------------------------------------------------------
  9362                                  
  9363                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9364 00000584 E8E9FF                  		call	SetDrive
  9365 00000587 BE0100                  		mov	si, 1
  9366 0000058A 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9367                                  					; fchanged_by_format
  9368 0000058F 7415                    		jz	short WeAreNotFakingIt
  9369                                  		; 12/12/2022
  9370 00000591 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9371                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9372                                  					; ~fchanged_by_format ;	reset flag
  9373 00000596 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9374                                  					; Ensure that we ask the rom if media has changed
  9375 0000059B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9376                                  					; fnon_removable
  9377 000005A0 740B                    		jz	short wehaveafloppy
  9378                                  		;mov	si, 0FFFFh	; Indicate media changed
  9379                                  		; 11/08/2023
  9380 000005A2 F7DE                    		neg	si		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05E0h
  9381 000005A4 EB2B                    		jmp	short Media_Done ; Media_Done
  9382                                  ; ---------------------------------------------------------------------------
  9383                                  
  9384                                  WeAreNotFakingIt:
  9385                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9386 000005A6 26F6452301              		test	byte [es:di+23h], 1
  9387 000005AB 7524                    		jnz	short Media_Done
  9388                                  wehaveafloppy:				
  9389                                  		;xor	si, si ; 0	; Presume "I don't know"
  9390                                  		; 11/08/2023
  9391 000005AD 4E                      		dec	si ; 0 		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05EBh
  9392                                  
  9393                                  		; If we have a floppy with changeline support, we ask the ROM
  9394                                  		; to determine if media has changed. We do not perform the
  9395                                  		; 2 second check for these drives.
  9396                                  
  9397 000005AE 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9398 000005B3 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9399 000005B5 E88112                  		call	mediacheck	;  Call	into removable routine
  9400 000005B8 7236                    		jb	short err_exitj
  9401 000005BA E8D113                  		call	haschange
  9402 000005BD 7512                    		jnz	short Media_Done
  9403                                  mChk_NoChangeLine:
  9404                                  		; If we come here, we have a floppy with no changeline support
  9405                                  			
  9406 000005BF BE0100                  		mov	si, 1		; Presume no change
  9407 000005C2 A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9408 000005C5 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9409                                  					; Is drive of last access the same?
  9410 000005C9 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9411 000005CB E82800                  		call	Check_Time_Of_Access
  9412 000005CE EB01                    		jmp	short Media_Done
  9413                                  ; ---------------------------------------------------------------------------
  9414                                  
  9415                                  Media_Unk:				
  9416 000005D0 4E                      		dec	si		; ; Return "I don't know"
  9417                                  
  9418                                  		; SI now contains the correct value for media change.
  9419                                  		; Clean up the left overs
  9420                                  Media_Done:	
  9421                                  		; 19/10/2022			
  9422 000005D1 06                      		push	es
  9423 000005D2 C41E[1200]              		les	bx, [ptrsav]
  9424 000005D6 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9425 000005DA 07                      		pop	es
  9426 000005DB 09F6                    		or	si, si
  9427 000005DD 790F                    		jns	short ret_carry_clear ;	volidok
  9428 000005DF 803E[7700]00            		cmp	byte [fhave96], 0
  9429 000005E4 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9430 000005E6 E83713                  		call	media_set_vid
  9431                                  mChk1_NoChangeLine:			
  9432 000005E9 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9433                                  					; Make sure we ask rom for media check
  9434                                  ret_carry_clear:			
  9435 000005EE F8                      		clc			; volidok
  9436 000005EF C3                      		retn
  9437                                  ; ---------------------------------------------------------------------------
  9438                                  
  9439                                  err_exitj:				
  9440 000005F0 E87806                  		call	maperror	; guaranteed to	set carry
  9441                                  ret81:					
  9442 000005F3 B481                    		mov	ah, 81h		; return error status
  9443 000005F5 C3                      		retn			; return with carry set
  9444                                  
  9445                                  ; =============== S U B	R O U T	I N E =======================================
  9446                                  
  9447                                  ; ---------------------------------------------------------------------------
  9448                                  ; perform a check on the time passed since the last access for this physical
  9449                                  ; drive.
  9450                                  ; we are accessing the same drive. if the time of last successful access was
  9451                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9452                                  ; returns in si:
  9453                                  ;	0 - if time of last access was >= 2 seconds
  9454                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9455                                  ; registers affected ax,cx,dx, flags.
  9456                                  ;
  9457                                  ;	assume es:di -> bds, ds->Bios_Data
  9458                                  ; ---------------------------------------------------------------------------
  9459                                  
  9460                                  		; 19/10/2022
  9461                                  Check_Time_Of_Access:
  9462 000005F6 BE0100                  		mov	si, 1		; presume no change.
  9463 000005F9 E823FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9464 000005FC 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9465                                  					; get stored time
  9466 00000600 29C2                    		sub	dx, ax
  9467 00000602 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9468 00000606 19C1                    		sbb	cx, ax
  9469                                  		; 11/08/2023
  9470                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0646h
  9471                                  		;mov	al, [accesscount]
  9472 00000608 7515                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9473 0000060A 09D2                    		or	dx, dx		; time must pass
  9474 0000060C 750C                    		jnz	short timepassed ; yes, examine max value
  9475                                  		; 11/08/2023
  9476                                  		;inc	al
  9477                                  		;cmp	al, 5
  9478                                  		;;inc	byte [accesscount]
  9479                                  		;;cmp	byte [accesscount], 5 
  9480                                  		;			; if count is less than threshold, ok
  9481                                  		;jb	short timecheck_ret
  9482                                  		;;dec	byte [accesscount] ; don't let the count wrap
  9483                                  		; 11/08/2023
  9484                                  		;dec	al
  9485                                  		;jmp	short timecheck_unk ; "i don't know" if media changed
  9486                                  		; 11/08/2023
  9487 0000060E 803E[1D01]04            		cmp	byte [accesscount], 4
  9488 00000613 730A                    		jnb	short timecheck_unk
  9489 00000615 FE06[1D01]              		inc	byte [accesscount]
  9490 00000619 C3                      		retn
  9491                                  
  9492                                  ; ---------------------------------------------------------------------------
  9493                                  
  9494                                  timepassed:
  9495 0000061A 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9496                                  					; min elapsed time? (2 seconds)
  9497 0000061D 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9498                                  
  9499                                  		; everything indicates that we do not know what has happened.
  9500                                  timecheck_unk:				
  9501 0000061F 4E                      		dec	si		; presume i don't know
  9502                                  timecheck_ret:
  9503                                  		; 11/08/2023
  9504                                  		;mov	[accesscount], al
  9505 00000620 C3                      		retn
  9506                                  
  9507                                  ; ---------------------------------------------------------------------------
  9508                                  ; 15/10/2022
  9509                                  Err_Exitj2:
  9510 00000621 EBCD                    		jmp	short err_exitj
  9511                                  
  9512                                  ; ---------------------------------------------------------------------------
  9513                                  
  9514                                  ; 15/10/2022
  9515                                  
  9516                                  ; ==========================================================================
  9517                                  ; Build a valid bpb for the disk in the drive.
  9518                                  ; ==========================================================================
  9519                                  
  9520                                  		; 19/10/2022
  9521                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9522 00000623 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9523 00000626 E847FF                  		call	SetDrive	; get the correct bds for the drive
  9524 00000629 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9525                                  					; fnon_removable
  9526 0000062E 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9527                                  
  9528                                  		; let's set the default value for volid,vol_serial,
  9529                                  		; filesys_id in bds table
  9530                                  
  9531 00000630 E83700                  		call	clear_ids
  9532                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9533 00000633 C606[0205]01            		mov	byte [set_id_flag], 1
  9534 00000638 E85B00                  		call	GetBp		; build	a bpb if necessary
  9535 0000063B 72B6                    		jb	short ret81
  9536                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9537 0000063D 803E[0205]02            		cmp	byte [set_id_flag], 2
  9538                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9539 00000642 C606[0205]00            		mov	byte [set_id_flag], 0
  9540 00000647 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9541                                  					; otherwise, conventional boot record
  9542                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9543 00000649 803E[7700]00            		cmp	byte [fhave96], 0
  9544 0000064E 7403                    		jz	short already_gotbpb ; brif not
  9545 00000650 E84113                  		call	set_volume_id
  9546                                  already_gotbpb:				
  9547 00000653 83C706                  		add	di, 6		; BDS.BPB
  9548                                  					; return the bpb from the current bds
  9549                                  
  9550                                  ;		 fall into setptrsav, es:di -> result
  9551                                  
  9552                                  ; ---------------------------------------------------------------------------
  9553                                  
  9554                                  ; 15/10/2022
  9555                                  
  9556                                  ; ==========================================================================
  9557                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9558                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9559                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9560                                  ;It fails, for instance, when we install an external drive using driver.sys
  9561                                  ;because then the BDS segment is no longer Bios_Data. 
  9562                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9563                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9564                                  ;restored before returning to the caller.
  9565                                  ; ==========================================================================
  9566                                  
  9567                                  		; 19/10/2022
  9568                                  SetPtrSav:	; return point for dsk_init				
  9569 00000656 8CC1                    		mov	cx, es		; save es
  9570                                  		;les	bx, ds:ptrsav
  9571 00000658 C41E[1200]              		les	bx, [ptrsav]
  9572 0000065C 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9573 00000660 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9574 00000664 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9575 00000668 F8                      		clc
  9576 00000669 C3                      		retn
  9577                                  
  9578                                  ; =============== S U B	R O U T	I N E =======================================
  9579                                  
  9580                                  ; 15/10/2022
  9581                                  
  9582                                  ; -----------------------------------------------------
  9583                                  ; clear ids in bds table. only applied for floppies.
  9584                                  ;input:  es:di -> bds table
  9585                                  ;	assumes ds: -> Bios_Data
  9586                                  ;output: volid set to "NO NAME    "
  9587                                  ;	 vol_serial set to 0.
  9588                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9589                                  ;	   depending on the flag fatsize in bds.
  9590                                  ;
  9591                                  ;	trashes si, cx
  9592                                  ; -----------------------------------------------------
  9593                                  
  9594                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9595                                  ;size_of_EXT_SYSTEM_ID equ 8
  9596                                  
  9597                                  clear_ids:
  9598 0000066A 57                      		push	di
  9599 0000066B 31C9                    		xor	cx, cx		; no serial number
  9600 0000066D 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9601 00000671 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9602                                  
  9603                                  		; BUGBUG - there's a lot in common here and with
  9604                                  		; mov_media_ids.. see if we can save some space by
  9605                                  		; merging them... jgl
  9606                                  
  9607                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9608                                  		; 10/12/2022
  9609 00000675 B10B                    		mov	cl, 11 ; cx = 11		
  9610                                  
  9611                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9612 00000677 BE[1505]                		mov	si, vol_no_name	; 19/10/2022
  9613 0000067A 83C74B                  		add	di, 75		; BDS.volid
  9614 0000067D F3A4                    		rep movsb
  9615                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9616                                  		;test	byte [es:di+1Fh], 40h
  9617                                  		; 11/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9618 0000067F 26F6061F0040            		test	byte [es:BDS.fatsiz], fbig
  9619                                  			; ! NOTE - 11/08/2023 - Erdogan Tan
  9620                                  			; Microsoft/IBM code has a bug here because the BDS's
  9621                                  			; .volid and .filesys_id fields will be reset
  9622                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9623                                  			; at the BDS offset 31 but current (this) code checks flags
  9624                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9625                                  			;
  9626                                  			; Correct Code:
  9627                                  			; test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9628                                  			;
  9629                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9630                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9631                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9632                                  			;
  9633                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9634                                  			; 'clear_ids' is used for floppy disks only and the default
  9635                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9636                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9637                                  
  9638                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9639 00000685 BE[0C05]                		mov	si, fat_16_id	; 19/10/2022
  9640 00000688 7503                    		jnz	short ci_bigfat
  9641                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9642 0000068A BE[0305]                		mov	si, fat_12_id	 ; 19/10/2022
  9643                                  ci_bigfat:				
  9644                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9645                                  		; 10/12/2022
  9646 0000068D B108                    		mov	cl, 8 ; cx = 8 
  9647 0000068F 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9648                                  					; 11/08/2023
  9649                                  					; di points to filesys_id field (BDS offset 91)
  9650 00000692 F3A4                    		rep movsb
  9651 00000694 5F                      		pop	di		; restore bds pointer
  9652 00000695 C3                      		retn
  9653                                  
  9654                                  ; =============== S U B	R O U T	I N E =======================================
  9655                                  
  9656                                  ; 15/10/2022
  9657                                  
  9658                                  ; ---------------------------------------------------------------------------
  9659                                  ;	getbp - return bpb from the drive specified by the bds.
  9660                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9661                                  ;	    note that we never come here for fixed disks.
  9662                                  ;	    for all other cases,
  9663                                  ;	      - it reads boot sector to pull out the bpb
  9664                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9665                                  ;		to get the fat id byte to build the bpb from there.
  9666                                  ;
  9667                                  ;   inputs:	es:di point to correct bds.
  9668                                  ;
  9669                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9670                                  ;		carry set, and al=7 if invalid disk.
  9671                                  ;		carry set and error code in al if other error.
  9672                                  ;		if failed to recognize the boot record, then will set the
  9673                                  ;		set_id_flag to 0.
  9674                                  ;		this routine will only work for a floppy diskette.
  9675                                  ;		     for a fixed disk, it will just return.
  9676                                  ;
  9677                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9678                                  ;	  segment definitions. It should be migrated towards.
  9679                                  ;	   now es:di has the bds, ds: has Bios_Data
  9680                                  ; ---------------------------------------------------------------------------
  9681                                  
  9682                                  GetBp:		; if returning fake bpb then return bpb as is.
  9683                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9684 00000696 26F6452305              		test	byte [es:di+23h], 5
  9685 0000069B 7403                    		jz	short getbp1	; getbp1
  9686 0000069D E99A00                  		jmp	getret_exit
  9687                                  ; ---------------------------------------------------------------------------
  9688                                  
  9689                                  getbp1:					
  9690 000006A0 51                      		push	cx
  9691 000006A1 52                      		push	dx
  9692 000006A2 53                      		push	bx
  9693                                  
  9694                                  		; attempt to read in boot sector and determine bpb.
  9695                                  		; we assume that the 2.x and greater dos disks all
  9696                                  		; have a valid boot sector.
  9697                                  
  9698 000006A3 E8A900                  		call	readbootsec
  9699 000006A6 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9700 000006A8 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9701 000006AA 7508                    		jnz	short dofatbpb
  9702 000006AC E8EE00                  		call	movbpb		; move bpb into	registers
  9703 000006AF EB57                    		jmp	short Has1
  9704                                  ; ---------------------------------------------------------------------------
  9705                                  
  9706                                  getbp_err_ret_brdg:			
  9707 000006B1 E98700                  		jmp	getbp_err_ret
  9708                                  ; ---------------------------------------------------------------------------
  9709                                  
  9710                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9711                                  		; and fill in bpb from there.
  9712                                  dofatbpb:				
  9713 000006B4 E85201                  		call	readfat		; puts media descriptor	byte in	ah
  9714 000006B7 72F8                    		jb	short getbp_err_ret_brdg
  9715                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9716 000006B9 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9717 000006BE 7403                    		jz	short bpb_nochangeline	; brif not
  9718 000006C0 E87212                  		call	hidensity	; may not return! May add sp, 2	and
  9719                                  					; jump to has1!!!!!! or	has720K
  9720                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9721 000006C3 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9722                                  					; ffSmall
  9723 000006C8 7515                    		jnz	short is_floppy
  9724 000006CA 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9725 000006CD 7576                    		jnz	short got_unknown_medium
  9726                                  Has720K:				
  9727                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9728 000006CF BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9729                                  
  9730                                  		; es points to segment of bds. the following should be modified
  9731                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9732                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9733                                  
  9734                                  		; 10/12/2022
  9735                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9736                                  		; 21/12/2022
  9737 000006D2 8A07                    		mov	al, [bx]
  9738 000006D4 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9739 000006D7 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9740 000006DA 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9741                                  		; 19/10/2022 - Temporary !
  9742                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9743                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9744                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9745                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9746                                  
  9747 000006DD EB29                    		jmp	short Has1
  9748                                  ; ---------------------------------------------------------------------------
  9749                                  
  9750                                  is_floppy:			; must be a 5.25" floppy if we come here
  9751 000006DF 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9752 000006E2 7261                    		jb	short got_unknown_medium
  9753 000006E4 B001                    		mov	al, 1		; set number of	fat sectors
  9754 000006E6 BB0840                  		mov	bx, 16392	; 64*256+8
  9755                                  					; set dir entries and sector max
  9756 000006E9 B94001                  		mov	cx, 320		; 40*8
  9757                                  					; set size of drive
  9758 000006EC BA0101                  		mov	dx, 257		; 01*256+1
  9759                                  					; set head limit and sec/all unit
  9760 000006EF F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9761 000006F2 7507                    		jnz	short has8	; nz = has 8 sectors
  9762 000006F4 FEC0                    		inc	al		; inc number of	fat sectors
  9763 000006F6 FEC3                    		inc	bl		; inc sector max
  9764                                  		;add	cx, 40		; increase size	(to 360)
  9765                                  		; 18/12/2022
  9766 000006F8 80C128                  		add	cl, 40
  9767                                  has8:					
  9768 000006FB F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9769 000006FE 7408                    		jz	short Has1	; jz = 1 head
  9770 00000700 01C9                    		add	cx, cx		; double size of disk
  9771 00000702 B770                    		mov	bh, 112		; increase number of directory entries
  9772 00000704 FEC6                    		inc	dh		; inc sec/all unit
  9773 00000706 FEC2                    		inc	dl		; inc head limit
  9774                                  Has1:	
  9775                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
  9776 00000708 1E                      		push	ds
  9777 00000709 06                      		push	es
  9778 0000070A 1F                      		pop	ds		
  9779                                  				
  9780                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9781                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9782                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9783                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
  9784                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9785                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9786                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9787                                  
  9788 0000070B 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
  9789 0000070E 30F6                    		xor	dh, dh
  9790 00000710 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
  9791 00000713 88FA                    		mov	dl, bh
  9792 00000715 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  9793 00000718 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
  9794 0000071B 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
  9795 0000071E 886510                  		mov	[di+10h], ah	; [di+BDS.media]
  9796 00000721 88C2                    		mov	dl, al
  9797 00000723 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
  9798 00000726 88DA                    		mov	dl, bl
  9799 00000728 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
  9800                                  
  9801                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9802                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9803                                  		; to 0 since this code is for floppies
  9804                                  
  9805                                  		; 18/12/2022
  9806                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9807                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9808                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9809                                  		; 18/12/2022
  9810 0000072B 29C9                    		sub	cx, cx ; 0
  9811                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9812                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9813                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9814                                  		
  9815                                  		; 02/09/2023
  9816 0000072D 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
  9817 00000730 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
  9818 00000733 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
  9819                                  		
  9820 00000736 1F                      		pop	ds ; 02/09/2023
  9821                                  getret:					
  9822 00000737 5B                      		pop	bx
  9823 00000738 5A                      		pop	dx
  9824 00000739 59                      		pop	cx
  9825                                  getret_exit:				
  9826 0000073A C3                      		retn
  9827                                  ; ---------------------------------------------------------------------------
  9828                                  
  9829                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9830                                  		;mov	ds:set_id_flag,	0
  9831                                  		; 19/10/2022
  9832 0000073B C606[0205]00            		mov	byte [set_id_flag], 0
  9833 00000740 E82805                  		call	maperror
  9834 00000743 EBF2                    		jmp	short getret
  9835                                  ; ---------------------------------------------------------------------------
  9836                                  
  9837                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9838                                  		; we do	not assume any type of bpb for this medium.
  9839                                  
  9840                                  got_unknown_medium:			
  9841                                  		;mov	ds:set_id_flag,	0 
  9842 00000745 C606[0205]00            		mov	byte [set_id_flag], 0
  9843 0000074A B007                    		mov	al, 7
  9844 0000074C F9                      		stc
  9845 0000074D EBE8                    		jmp	short getret
  9846                                  
  9847                                  ; =============== S U B	R O U T	I N E =======================================
  9848                                  
  9849                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9850                                  
  9851                                  ; ----------------------------------------------------------------
  9852                                  ; read in the boot sector. set carry if error in reading sector.
  9853                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9854                                  ;
  9855                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9856                                  ; ----------------------------------------------------------------
  9857                                  
  9858                                  ; 10/03/2019 - Retro DOS v4.0
  9859                                  
  9860                                  readbootsec:	
  9861 0000074F B600                    		mov	dh, 0		; head 0
  9862 00000751 B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9863 00000754 E8BF00                  		call	read_sector
  9864 00000757 7243                    		jb	short err_ret
  9865 00000759 31DB                    		xor	bx, bx		; assume valid boot sector
  9866                                  
  9867                                  		; put a sanity check for the boot sector in here to detect
  9868                                  		; boot sectors that do not have valid bpbs. we examine the
  9869                                  		; first two bytes - they must contain a long jump (69h) or a
  9870                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9871                                  		; (E9h). if this test is passed, we further check by examining
  9872                                  		; the signature at the end of the boot sector for the word
  9873                                  		; AA55h. if the signature is not present, we examine the media
  9874                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9875                                  		; logic is modified a little bit. we are not going to check
  9876                                  		; signature. instead we are going to sanity check the media
  9877                                  		; byte in bpb regardless of the validity of signature. this is
  9878                                  		; to save the already developed commercial products that have
  9879                                  		; good jump instruction and signature but with the false bpb
  9880                                  		; informations
  9881                                  
  9882                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9883                                  
  9884                                  		; 02/09/2023
  9885                                  		; 19/10/2022
  9886                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
  9887                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
  9888                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9889                                  		;jz	short check_bpb_mediabyte ; no need for	nop
  9890                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
  9891                                  		;jnz	short invalidbootsec
  9892                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
  9893                                  		;jnz	short invalidbootsec
  9894                                  
  9895                                  		; 02/09/2023 (PCDOS 7.1)
  9896 0000075B A0[4E01]                		mov	al, [disksector]
  9897 0000075E 3C69                    		cmp	al, 69h		; is it a direct jump?
  9898 00000760 740F                    		je	short check_bpb_mediabyte
  9899                                  					; don't need to find a nop
  9900 00000762 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
  9901 00000764 740B                    		je	short check_bpb_mediabyte
  9902                                  					; no need for nop
  9903 00000766 3CEB                    		cmp	al, 0EBh	; how about a short jump?
  9904 00000768 7530                    		jne	short invalidbootsec
  9905 0000076A 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9906 0000076F 7529                    		jne	short invalidbootsec
  9907                                  
  9908                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9909                                  ;
  9910                                  ;; 10/03/2019
  9911                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9912                                  ;;
  9913                                  ;; Don't have to perform the following signature check since
  9914                                  ;; we need to check the media byte even with the good signatured diskette.
  9915                                  ;;
  9916                                  ;;check_signature:
  9917                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9918                                  ;;							 ; disk or 1.x media.
  9919                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9920                                  ;;					       ; may need some special handling
  9921                                  
  9922                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9923                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9924                                  ; by examining the media descriptor in the boot sector.
  9925                                  
  9926                                  		; 19/10/2022
  9927                                  check_bpb_mediabyte:
  9928 00000771 A0[6301]                		mov	al, [disksector+15h]
  9929                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9930 00000774 50                      		push	ax ; 02/09/2023
  9931 00000775 24F0                    		and	al, 0F0h
  9932 00000777 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9933 00000779 58                      		pop	ax ; 02/09/2023
  9934 0000077A 751E                    		jnz	short invalidbootsec
  9935                                  
  9936                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9937                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9938                                  ; sectors. these are specifically diskettes that were formatted in drives
  9939                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9940                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9941                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9942                                  ; help our build bpb routine to recognise these specific cases, and to
  9943                                  ; set up out copy of the bpb accordingly.
  9944                                  ; we do this by checking to see if the boot sector is off a diskette that
  9945                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9946                                  ; sec/clus field to 1. if not, we carry on as normal.
  9947                                  
  9948                                  checksinglesided:
  9949                                  		;mov	al, [disksector+15h]
  9950                                  		; 02/09/2023
  9951                                  		; al = [disksector+15h]
  9952 0000077C 3CF0                    		cmp	al, 0F0h
  9953 0000077E 741B                    		jz	short gooddsk
  9954 00000780 A801                    		test	al, 1
  9955 00000782 7517                    		jnz	short gooddsk
  9956 00000784 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9957 0000078A 7507                    		jnz	short mustbeearlier
  9958 0000078C 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9959 00000791 7308                    		jnb	short gooddsk
  9960                                  
  9961                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9962                                  
  9963                                  mustbeearlier:				
  9964 00000793 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9965                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9966 00000798 EB01                    		jmp	short gooddsk
  9967                                  ; ---------------------------------------------------------------------------
  9968                                  
  9969                                  invalidbootsec:				
  9970 0000079A 43                      		inc	bx		; indicate that boot sector invalid
  9971                                  		; 10/12/2022
  9972                                  movbpb_ret:
  9973                                  gooddsk:				
  9974 0000079B F8                      		clc
  9975                                  err_ret:
  9976 0000079C C3                      		retn
  9977                                  ; ---------------------------------------------------------------------------
  9978                                  
  9979                                  		; 10/12/2022
  9980                                  ;err_ret:				
  9981                                  		;retn
  9982                                  
  9983                                  ; =============== S U B	R O U T	I N E =======================================
  9984                                  
  9985                                  ; 15/10/2022
  9986                                  ; ---------------------------------------------------------------------------
  9987                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9988                                  ; getbp routine at has1
  9989                                  ;
  9990                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9991                                  ; serial number, volume label, file system id in bds according to
  9992                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9993                                  ; to signal that volume label is set already from the extended boot record
  9994                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9995                                  ; the volume label in the root directory.)
  9996                                  ; ---------------------------------------------------------------------------
  9997                                  
  9998                                  ; 10/03/2019 - Retro DOS v4.0
  9999                                  
 10000                                  		; 19/10/2022
 10001                                  movbpb:	
 10002 0000079D 8A36[5B01]              		mov	dh, [disksector+0Dh]
 10003                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 10004                                  					; sectors per unit
 10005 000007A1 8A3E[5F01]              		mov	bh, [disksector+11h]
 10006                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 10007                                  					; number of directory entries
 10008 000007A5 8B0E[6101]              		mov	cx, [disksector+13h]
 10009                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 10010                                  					; size of drive
 10011 000007A9 8A26[6301]              		mov	ah, [disksector+15h]
 10012                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 10013                                  					; media	descriptor
 10014 000007AD A0[6401]                		mov	al, [disksector+16h];
 10015                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 10016                                  					; number of fat	sectors
 10017 000007B0 8A1E[6601]              		mov	bl, [disksector+18h]
 10018                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 10019                                  					; sectors per track
 10020 000007B4 8A16[6801]              		mov	dl, [disksector+1Ah]
 10021                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 10022                                  					; number of heads
 10023 000007B8 803E[0205]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 10024 000007BD 75DC                    		jnz	short movbpb_ret
 10025 000007BF E81200                  		call	mov_media_ids
 10026 000007C2 7205                    		jb	short movbpb_conv ; conventional boot record?
 10027 000007C4 C606[0205]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 10028                                  movbpb_conv:				
 10029 000007C9 803E[7700]01            		cmp	byte [fhave96], 1
 10030 000007CE 75CB                    		jnz	short movbpb_ret
 10031 000007D0 E8B511                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 10032                                  		; 10/12/2022
 10033                                  		; cf = 0
 10034                                  ;movbpb_ret:				
 10035                                  		;clc
 10036 000007D3 C3                      		retn
 10037                                  
 10038                                  ; =============== S U B	R O U T	I N E =======================================
 10039                                  
 10040                                  ;copy the boot_serial number, volume id, and filesystem id from the
 10041                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 10042                                  ;by es:di.
 10043                                  
 10044                                  ;in.) es:di -> bds
 10045                                  ;     ds:disksector = valid extended boot record.
 10046                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 10047                                  ;      the boot record information.
 10048                                  ;     carry flag set if not an extended bpb.
 10049                                  ;     all registers saved except the flag.
 10050                                  
 10051                                  		; 19/10/2022
 10052                                  mov_media_ids:		
 10053 000007D4 803E[7401]29            		cmp	byte [disksector+26h], 29h
 10054                                  					; [disksector+EXT_BOOT.SIG],
 10055                                  					; EXT_BOOT_SIGNATURE
 10056 000007D9 752C                    		jnz	short mmi_not_ext
 10057 000007DB 51                      		push	cx
 10058 000007DC 8B0E[7501]              		mov	cx, [disksector+27h]
 10059                                  					; [disksector+EXT_BOOT.SERIAL]
 10060 000007E0 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 10061 000007E4 8B0E[7701]              		mov	cx, [disksector+29h]
 10062                                  					; [disksector+EXT_BOOT.SERIAL+2]
 10063 000007E8 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 10064 000007EC 57                      		push	di
 10065 000007ED 56                      		push	si
 10066 000007EE B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 10067 000007F1 BE[7901]                		mov	si, disksector+2Bh
 10068                                  		;mov	si, (offset disksector+2Bh) ;
 10069                                  					; disksector+EXT_BOOT.VOL_LABEL
 10070 000007F4 83C74B                  		add	di, 75		; BDS.volid
 10071 000007F7 F3A4                    		rep movsb
 10072                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 10073                                  		; 10/12/2022
 10074 000007F9 B108                    		mov	cl, 8 ; cx = 8
 10075 000007FB BE[8401]                		mov	si, disksector+36h
 10076                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 10077 000007FE 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 10078 00000801 F3A4                    		rep movsb
 10079 00000803 5E                      		pop	si
 10080 00000804 5F                      		pop	di
 10081 00000805 59                      		pop	cx
 10082                                  		; 10/12/2022
 10083                                  		; cf = 0
 10084                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 10085                                  				; (20/09/2022)
 10086 00000806 C3                      		retn
 10087                                  ; ---------------------------------------------------------------------------
 10088                                  
 10089                                  mmi_not_ext:				
 10090 00000807 F9                      		stc
 10091 00000808 C3                      		retn
 10092                                  
 10093                                  ; =============== S U B	R O U T	I N E =======================================
 10094                                  
 10095                                  ; 15/10/2022
 10096                                  ; --------------------------------------------------------------
 10097                                  ; read in the fat sector and get the media byte from it.
 10098                                  ; input : es:di -> bds
 10099                                  ; output:
 10100                                  ;	  carry set if an error occurs, ax contains error code.
 10101                                  ;	  otherwise, ah contains media byte on exit
 10102                                  ; --------------------------------------------------------------
 10103                                  
 10104                                  readfat:	
 10105                                  		;mov	dh, 0
 10106                                  		; 10/12/2022
 10107 00000809 30F6                    		xor	dh, dh
 10108 0000080B B90200                  		mov	cx, 2		; head 0
 10109                                  					; cylinder 0, sector 2
 10110 0000080E E80500                  		call	read_sector
 10111 00000811 7202                    		jb	short bad_fat_ret
 10112 00000813 8A27                    		mov	ah, [bx]	; media	byte
 10113                                  bad_fat_ret:				
 10114 00000815 C3                      		retn
 10115                                  
 10116                                  ; =============== S U B	R O U T	I N E =======================================
 10117                                  
 10118                                  ; 15/10/2022
 10119                                  
 10120                                  ; ---------------------------------------------------------------------------
 10121                                  ; read a single sector into the temp buffer.
 10122                                  ; perform three retries in case of error.
 10123                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 10124                                  ;		cx has sector and cylinder
 10125                                  ;		dh has head
 10126                                  ;		es:di has bds
 10127                                  ;		ds has Bios_Data
 10128                                  ;
 10129                                  ;   outputs:	carry clear
 10130                                  ;		    Bios_Data:bx point to sector
 10131                                  ;		       (note: some callers assume location of buffer)
 10132                                  ;
 10133                                  ;		carry set
 10134                                  ;		    ax has rom error code
 10135                                  ;
 10136                                  ; register bp is preserved.
 10137                                  ; ---------------------------------------------------------------------------
 10138                                  
 10139                                  ; 10/03/2019 - Retro DOS v4.0
 10140                                  
 10141                                  		; 19/10/2022
 10142                                  read_sector:	
 10143 00000816 55                      		push	bp
 10144 00000817 BD0300                  		mov	bp, 3		; make 3 attempts
 10145 0000081A 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 10146 0000081E BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
 10147                                  rd_ret:					
 10148 00000821 06                      		push	es
 10149 00000822 1E                      		push	ds
 10150 00000823 07                      		pop	es
 10151 00000824 B80102                  		mov	ax, 201h
 10152 00000827 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10153                                  					; AL = number of sectors to read, CH = track, CL = sector
 10154                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10155                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10156 00000829 07                      		pop	es
 10157 0000082A 734A                    		jnb	short okret2
 10158                                  rd_rty:					
 10159 0000082C E87404                  		call	again		; reset	disk, decrement	bp, preserve ax
 10160 0000082F 7442                    		jz	short err_rd_ret
 10161 00000831 26F6452301              		test	byte [es:di+23h], 1
 10162                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 10163                                  					; fnon_removable
 10164 00000836 75E9                    		jnz	short rd_ret
 10165 00000838 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10166 0000083D 7510                    		jnz	short rd_skip1_dpt
 10167 0000083F 50                      		push	ax
 10168 00000840 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 10169 00000841 C536[2D01]              		lds	si, [dpt]
 10170                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10171                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 10172                                  		;			; NORMSETTLE
 10173                                  		; 12/12/2022
 10174 00000845 B00F                    		mov	al, 15
 10175 00000847 864409                  		xchg	al, [si+9]
 10176                                  		; 
 10177 0000084A 1F                      		pop	ds
 10178 0000084B A2[2A01]                		mov	[save_head_sttl], al
 10179 0000084E 58                      		pop	ax
 10180                                  rd_skip1_dpt:				
 10181 0000084F 06                      		push	es
 10182 00000850 1E                      		push	ds
 10183 00000851 07                      		pop	es
 10184 00000852 B80102                  		mov	ax, 201h
 10185 00000855 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10186                                  					; AL = number of sectors to read, CH = track, CL = sector
 10187                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10188                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10189 00000857 07                      		pop	es
 10190 00000858 9C                      		pushf
 10191 00000859 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10192 0000085E 750E                    		jnz	short rd_skip2_dpt
 10193 00000860 50                      		push	ax
 10194 00000861 A0[2A01]                		mov	al, [save_head_sttl]
 10195 00000864 1E                      		push	ds
 10196 00000865 C536[2D01]              		lds	si, [dpt]
 10197 00000869 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10198 0000086C 1F                      		pop	ds
 10199 0000086D 58                      		pop	ax
 10200                                  rd_skip2_dpt:				
 10201 0000086E 9D                      		popf
 10202 0000086F 7305                    		jnb	short okret2
 10203 00000871 EBB9                    		jmp	short rd_rty
 10204                                  ; ---------------------------------------------------------------------------
 10205                                  
 10206                                  err_rd_ret:				
 10207 00000873 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 10208                                  					; return error
 10209 00000875 F9                      		stc
 10210                                  
 10211                                  ; update information pertaining to last drive accessed, time of access, last
 10212                                  ; track accessed in that drive.
 10213                                  
 10214                                  okret2:					
 10215 00000876 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 10216 0000087A 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 10217 0000087E 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10218                                  					; save last track accessed on this drive
 10219                                  					; preserve flags in case error occurred
 10220 00000882 9C                      		pushf
 10221 00000883 E8FD03                  		call	set_tim
 10222 00000886 9D                      		popf			; restore flags
 10223 00000887 5D                      		pop	bp
 10224 00000888 C3                      		retn
 10225                                  
 10226                                  ;----------------------------------------------------------------------------
 10227                                  ;	disk open/close routines
 10228                                  ;----------------------------------------------------------------------------
 10229                                  
 10230                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 10231 00000889 803E[7700]00            		cmp	byte [fhave96], 0
 10232 0000088E 7407                    		jz	short dsk_open_exit ; done if no changeline support
 10233 00000890 E8DDFC                  		call	SetDrive	; get bds for drive
 10234 00000893 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 10235                                  dsk_open_exit:	
 10236                                  		; 10/12/2022
 10237                                  		; cf = 0			
 10238                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10239                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10240 00000897 C3                      		retn
 10241                                  ; ---------------------------------------------------------------------------
 10242                                  
 10243                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 10244 00000898 803E[7700]00            		cmp	byte [fhave96], 0
 10245 0000089D 740E                    		jz	short exitjx	; done if no changeline	support
 10246 0000089F E8CEFC                  		call	SetDrive	; get bds for drive
 10247 000008A2 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 10248 000008A7 7404                    		jz	short exitjx	; watch	out for	wrap
 10249 000008A9 26FF4D20                		dec	word [es:di+20h]
 10250                                  exitjx:					
 10251                                  		; 10/12/2022
 10252                                  		; cf = 0
 10253                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10254                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10255 000008AD C3                      		retn
 10256                                  
 10257                                  ;----------------------------------------------------------------------------
 10258                                  ;		disk removable routine
 10259                                  ;----------------------------------------------------------------------------
 10260                                  
 10261                                  		; al is	unit #
 10262                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 10263 000008AE E8BFFC                  		call	SetDrive	; get bds for this drive
 10264                                  		;test	byte [es:di+BDS.flags], fnon_removable
 10265 000008B1 26F6452301              		test	byte [es:di+23h], 1
 10266                                  		;jnz	short x_bus_exit ; non_rem
 10267 000008B6 7501                    		jnz	short non_rem	; 15/10/2022
 10268                                  		; 10/12/2022
 10269                                  		; cf = 0
 10270                                  		;clc			; CF is already ZERO here
 10271                                  					; 15/10/2022
 10272 000008B8 C3                      		retn
 10273                                  ; ---------------------------------------------------------------------------
 10274                                  
 10275                                  non_rem:
 10276                                  x_bus_exit:				
 10277 000008B9 B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 10278                                  					; return busy status
 10279 000008BB F9                      		stc
 10280                                  dsk_ret:				
 10281 000008BC C3                      		retn
 10282                                  
 10283                                  ;----------------------------------------------------------------------------
 10284                                  ;		disk i/o routines
 10285                                  ;----------------------------------------------------------------------------
 10286                                  
 10287                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 10288                                  		;mov	word [wrtverify], 103h
 10289                                  		; 19/10/2022
 10290 000008BD C706[2001]0301          		mov	word [rflag], 103h
 10291                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 10292 000008C3 EB06                    		jmp	short dsk_cl
 10293                                  ; ---------------------------------------------------------------------------
 10294                                  
 10295                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 10296                                  		;mov	word [wrtverify], 3
 10297                                  		; 19/10/2022
 10298 000008C5 C706[2001]0300          		mov	word [rflag], 3
 10299                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 10300                                  
 10301                                  dsk_cl:					
 10302 000008CB E89800                  		call	diskio		; romwrite
 10303                                  ; ---------------------------------------------------------------------------
 10304                                  
 10305                                  dsk_io:					
 10306 000008CE 73EC                    		jnb	short dsk_ret
 10307 000008D0 E908F8                  		jmp	bc_err_cnt
 10308                                  ; ---------------------------------------------------------------------------
 10309                                  
 10310                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 10311 000008D3 E88B00                  		call	diskrd
 10312 000008D6 EBF6                    		jmp	short dsk_io
 10313                                  
 10314                                  ; =============== S U B	R O U T	I N E =======================================
 10315                                  
 10316                                  ; 15/10/2022
 10317                                  ; 10/03/2019 - Retro DOS v4.0
 10318                                  
 10319                                  ;-----------------------------------------------------------
 10320                                  ; miscellaneous odd jump routines. 
 10321                                  ; moved out of mainline for speed.
 10322                                  
 10323                                  ; if we have a system where we have virtual drives, we need 
 10324                                  ; to prompt the user to place the correct disk in the drive.
 10325                                  ;
 10326                                  ;	assume es:di -> bds, ds:->Bios_Data
 10327                                  ;-----------------------------------------------------------
 10328                                  
 10329                                  		; 19/10/2022
 10330                                  checksingle:		
 10331 000008D8 50                      		push	ax
 10332 000008D9 53                      		push	bx
 10333 000008DA 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 10334                                  
 10335                                  ; if hard drive, cannot change disk.
 10336                                  ; if current owner of physical drive, no need to change diskette.
 10337                                  
 10338 000008DE F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 10339 000008E1 7573                    		jnz	short singleret
 10340 000008E3 F6C310                  		test	bl, 10h		; fi_am_mult
 10341                                  					; is there a drive sharing this	physical drive?
 10342 000008E6 746E                    		jz	short singleret
 10343                                  
 10344                                  
 10345                                  ; look for the previous owner of this physical drive
 10346                                  ; and reset its ownership flag.
 10347                                  
 10348 000008E8 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10349                                  					; get physical drive number
 10350 000008EC 06                      		push	es		; preserve pointer to current bds
 10351 000008ED 57                      		push	di
 10352 000008EE C43E[1901]              		les	di, [start_bds] ; get first bds
 10353                                  scan_list:				
 10354 000008F2 26384504                		cmp	[es:di+4], al
 10355 000008F6 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10356 000008F8 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10357 000008FA 26845D23                		test	[es:di+23h], bl
 10358 000008FE 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10359 00000900 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10360 00000904 5F                      		pop	di		; restore pointer to current bds
 10361 00000905 07                      		pop	es
 10362 00000906 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10363                                  
 10364                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10365                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10366                                  ; in this case.
 10367 0000090A 803E[7A00]01            		cmp	byte [fsetowner], 1
 10368 0000090F 7517                    		jnz	short not_fsetowner
 10369                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10370 00000911 26807D0400              		cmp	byte [es:di+4], 0
 10371 00000916 753E                    		jnz	short singleret
 10372 00000918 268A4505                		mov	al, [es:di+5]
 10373                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10374                                  					; get the DOS drive letter
 10375 0000091C 06                      		push	es
 10376 0000091D 8E06[1A00]              		mov	es, [zeroseg]
 10377 00000921 26A20405                		mov	[es:LSTDRV], al
 10378                                  		;mov	es:504h, al	; [es:LSTDRV]
 10379                                  					; set up sdsb
 10380 00000925 07                      		pop	es		; restore bds pointer
 10381 00000926 EB2E                    		jmp	short singleret
 10382                                  ; ---------------------------------------------------------------------------
 10383                                  
 10384                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10385                                  ; we now check to see if we are in a single drive system and the application
 10386                                  ; has "cleverly" diddled the sdsb
 10387                                  
 10388                                  not_fsetowner:				
 10389 00000928 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10390 0000092D 7517                    		jnz	short ignore_sdsb
 10391 0000092F 50                      		push	ax
 10392 00000930 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10393 00000934 88C4                    		mov	ah, al
 10394 00000936 06                      		push	es
 10395 00000937 8E06[1A00]              		mov	es, [zeroseg]
 10396 0000093B 2686060405              		xchg	al, [es:LSTDRV]
 10397                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10398                                  					; then swap(curr_drv,req_drv)
 10399 00000940 07                      		pop	es
 10400 00000941 38C4                    		cmp	ah, al		; else
 10401 00000943 58                      		pop	ax		; swap(curr_drv,req_drv)
 10402 00000944 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10403                                  ignore_sdsb:				
 10404 00000946 E8690E                  		call	swpdsk
 10405 00000949 EB0B                    		jmp	short singleret
 10406                                  ; ---------------------------------------------------------------------------
 10407                                  
 10408                                  scan_skip:	
 10409 0000094B 26C43D                  		les	di, [es:di]			
 10410                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10411                                  					; go to	next bds
 10412 0000094E 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10413 00000951 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10414 00000953 F9                      		stc
 10415 00000954 5F                      		pop	di		; restore current bds
 10416 00000955 07                      		pop	es
 10417                                  
 10418                                  singleret:				
 10419 00000956 5B                      		pop	bx
 10420 00000957 58                      		pop	ax
 10421 00000958 C3                      		retn
 10422                                  
 10423                                  ; ---------------------------------------------------------------------------
 10424                                  
 10425                                  baddrive:				
 10426 00000959 B008                    		mov	al, 8		; sector not found
 10427 0000095B EB02                    		jmp	short baddrive_ret
 10428                                  ; ---------------------------------------------------------------------------
 10429                                  
 10430                                  unformatteddrive:				
 10431 0000095D B007                    		mov	al, 7		; unknown media
 10432                                  baddrive_ret:				
 10433 0000095F F9                      		stc
 10434                                  ; ---------------------------------------------------------------------------
 10435                                  
 10436                                  ioret:		
 10437 00000960 C3                      		retn
 10438                                  
 10439                                  ; ---------------------------------------------------------------------------
 10440                                  
 10441                                  ; 15/10/52022
 10442                                  
 10443                                  ; ---------------------------------------------------------------------------
 10444                                  ;	disk i/o handler
 10445                                  ;
 10446                                  ;	al = drive number (0-6)
 10447                                  ;	ah = media descriptor
 10448                                  ;	cx = sector count
 10449                                  ;	dx = first sector (low)
 10450                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10451                                  ;	ds = cs
 10452                                  ;	es:di = transfer address
 10453                                  ;	[rflag]=operation (2=read, 3=write)
 10454                                  ;	[verify]=1 for verify after write
 10455                                  ;
 10456                                  ;	if successful carry flag = 0
 10457                                  ;	  else cf=1 and al contains error code
 10458                                  ; ---------------------------------------------------------------------------
 10459                                  
 10460                                  diskrd:	
 10461                                  		;mov	ds:rflag, 2	; romread
 10462                                  		; 19/10/2022
 10463 00000961 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10464                                  
 10465                                  ; =============== S U B	R O U T	I N E =======================================
 10466                                  
 10467                                  		; 19/10/2022
 10468                                  diskio:
 10469 00000966 89FB                    		mov	bx, di		; es:bx	= transfer address
 10470 00000968 8C06[2F05]              		mov	[xfer_seg], es	; save transfer	segment
 10471 0000096C E801FC                  		call	SetDrive
 10472 0000096F 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10473 00000973 A2[1F01]                		mov	[medbyt], al
 10474                                  		;jcxz	short ioret
 10475 00000976 E3E8                    		jcxz	ioret
 10476                                  
 10477                                  ; see if the media is formatted or not by checking the flags field in
 10478                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10479                                  ; go to the error exit at label unformatteddrive.
 10480                                  
 10481 00000978 26F6452402              		test	byte [es:di+24h], 2
 10482                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10483                                  					; unformatted_media
 10484 0000097D 75DE                    		jnz	short unformatteddrive
 10485 0000097F 890E[2201]              		mov	[seccnt], cx	; save sector count
 10486 00000983 8926[3501]              		mov	[spsav], sp	; save sp
 10487                                  
 10488                                  ; ensure that we are trying to access valid sectors on the drive
 10489                                  
 10490 00000987 89D0                    		mov	ax, dx
 10491 00000989 31F6                    		xor	si, si
 10492 0000098B 01CA                    		add	dx, cx
 10493                                  		;adc	si, 0
 10494                                  		; 02/09/2023 (PCDOS 7.1)
 10495 0000098D D1D6                    		rcl	si, 1
 10496 0000098F 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10497                                  					; > 32 bit sector ?
 10498 00000994 740C                    		jz	short sanity32
 10499                                  		;cmp	si, 0
 10500                                  		; 02/09/2023
 10501 00000996 09F6                    		or	si, si
 10502 00000998 75BF                    		jnz	short baddrive
 10503 0000099A 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10504 0000099E 77B9                    		ja	short baddrive
 10505 000009A0 EB12                    		jmp	short sanityok
 10506                                  ; ---------------------------------------------------------------------------
 10507                                  
 10508                                  sanity32:				
 10509 000009A2 0336[2305]              		add	si, [start_sec_h]
 10510 000009A6 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10511 000009AA 7208                    		jb	short sanityok
 10512 000009AC 77AB                    		ja	short baddrive
 10513 000009AE 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10514 000009B2 77A5                    		ja	short baddrive
 10515                                  
 10516                                  sanityok:				
 10517 000009B4 8B16[2305]              		mov	dx, [start_sec_h]
 10518 000009B8 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10519 000009BC 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10520                                  
 10521                                  ; now dx;ax have the physical first sector.
 10522                                  ; since the following procedures is going to destroy ax, let's
 10523                                  ; save it temporarily to saved_word.
 10524                                  
 10525 000009C0 A3[2505]                		mov	[saved_word], ax ; save the sector number (low)
 10526                                  
 10527                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10528                                  ; will do it because we will skip the set up stuff with hard disks.
 10529                                  
 10530 000009C3 06                      		push	es
 10531                                  		;mov	es, [zeroseg]
 10532                                  		; 02/09/2023
 10533 000009C4 31F6                    		xor	si, si ; 0
 10534 000009C6 8EC6                    		mov	es, si
 10535 000009C8 26C4367800              		les	si, [es:DSKADR]
 10536                                  		;les	si, es:78h	; [es:DSKADR]
 10537                                  					; current disk parm table
 10538 000009CD 8936[2D01]              		mov	[dpt], si
 10539 000009D1 8C06[2F01]              		mov	[dpt+2], es
 10540 000009D5 07                      		pop	es
 10541 000009D6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10542                                  					; fnon_removable
 10543 000009DB 7510                    		jnz	short skip_setup
 10544 000009DD E8F8FE                  		call	checksingle
 10545                                  
 10546                                  ; check to see if we have previously noted a change line. the routine
 10547                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10548                                  ; the proper error code.
 10549                                  
 10550 000009E0 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10551 000009E5 7403                    		jz	short diskio_nochangeline ; brif not
 10552 000009E7 E8960E                  		call	checklatchio	; will do a sneaky pop stack return
 10553                                  					; if a disk error occurs
 10554                                  diskio_nochangeline:			
 10555 000009EA E84700                  		call	iosetup		; set up tables	and variables for i/o
 10556                                  
 10557                                  ; now the settle values are correct for the following code
 10558                                  
 10559                                  skip_setup:
 10560                                  
 10561                                  ; 32 bit sector calculation.
 10562                                  ; dx:[saved_word] = starting sector number.
 10563                                  				
 10564 000009ED 89D0                    		mov	ax, dx
 10565 000009EF 31D2                    		xor	dx, dx
 10566                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10567                                  					 ; divide by sec per track
 10568                                  		; 02/09/2023
 10569 000009F1 268B4D13                		mov	cx, [es:di+13h]
 10570 000009F5 F7F1                    		div	cx
 10571 000009F7 A3[2105]                		mov	[temp_h], ax
 10572 000009FA A1[2505]                		mov	ax, [saved_word]
 10573 000009FD F7F1                    		div	cx ; 02/09/2023
 10574                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10575                                  					; now, [temp_h]:ax = track #, dx = sector
 10576                                  		;inc	dl		; sector number	is 1 based.
 10577                                  		; 18/12/2022
 10578 000009FF 42                      		inc	dx
 10579 00000A00 8816[3101]              		mov	[cursec], dl	; save current sector
 10580 00000A04 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10581                                  					; get number of	heads
 10582 00000A08 50                      		push	ax
 10583 00000A09 31D2                    		xor	dx, dx
 10584 00000A0B A1[2105]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10585 00000A0E F7F1                    		div	cx
 10586 00000A10 A3[2105]                		mov	[temp_h], ax
 10587 00000A13 58                      		pop	ax
 10588 00000A14 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10589 00000A16 833E[2105]00            		cmp	word [temp_h], 0
 10590 00000A1B 7714                    		ja	short baddrive_brdg
 10591 00000A1D 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10592 00000A20 770F                    		ja	short baddrive_brdg
 10593 00000A22 8816[3201]              		mov	[curhd], dl	; save current head
 10594 00000A26 A3[3301]                		mov	[curtrk], ax	; save current track
 10595                                  
 10596                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10597                                  ; violations here. not true. we perform the operation as if everything is
 10598                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10599                                  
 10600 00000A29 A1[2201]                		mov	ax, [seccnt]
 10601 00000A2C E88400                  		call	block		; (cas - call/ret)
 10602                                  		;call	done
 10603                                  		;retn
 10604                                  		; 18/12/2022
 10605 00000A2F EB4B                    		jmp	done
 10606                                  
 10607                                  ; ---------------------------------------------------------------------------
 10608                                  
 10609                                  baddrive_brdg:				
 10610 00000A31 E925FF                  		jmp	baddrive
 10611                                  
 10612                                  ; =============== S U B	R O U T	I N E =======================================
 10613                                  
 10614                                  ;--------------------------------------------------------------
 10615                                  ; set the drive-last-accessed flag for diskette only. 
 10616                                  ; we know that the hard disk will not be removed.
 10617                                  ; es:di -> current bds.
 10618                                  ; ds -> Bios_Data
 10619                                  ; ax,cx,si are destroyed.
 10620                                  ;--------------------------------------------------------------
 10621                                  
 10622                                  		; 19/10/2022
 10623                                  iosetup:	
 10624 00000A34 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10625 00000A38 A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10626                                  
 10627                                  ; determine proper head settle values
 10628                                  
 10629 00000A3B 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10630 00000A40 7539                    		jnz	short skip_dpt_setting
 10631 00000A42 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10632 00000A45 1E                      		push	ds
 10633 00000A46 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10634 00000A4A 884404                  		mov	[si+4],	al
 10635 00000A4D 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10636 00000A50 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10637 00000A53 1F                      		pop	ds
 10638 00000A54 A2[2601]                		mov	[motorstartup], al
 10639 00000A57 8826[2B01]              		mov	[save_eot], ah
 10640                                  
 10641                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10642                                  ; motor start time to 4. this checking for every i/o is going to affect
 10643                                  ; performance across the board, but is necessary!!
 10644                                  
 10645 00000A5B 1E                      		push	ds
 10646 00000A5C C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10647 00000A60 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10648                                  					; ffSmall
 10649 00000A65 7505                    		jnz	short motor_start_ok
 10650 00000A67 B004                    		mov	al, 4
 10651 00000A69 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10652                                  motor_start_ok:
 10653                                  
 10654                                  ; ds:si now points to disk parameter table.
 10655                                  ; get current settle and set fast settle
 10656                                  				
 10657                                  		;xor	al, al
 10658                                  		;inc	al		; ibm wants fast settle	to be 1
 10659                                  		; 18/12/2022
 10660 00000A6C 31C0                    		xor	ax, ax
 10661 00000A6E 40                      		inc	ax
 10662 00000A6F 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10663                                  					; get settle and set up	for fast
 10664 00000A72 1F                      		pop	ds
 10665 00000A73 A2[2701]                		mov	[settlecurrent], al
 10666 00000A76 B00F                    		mov	al, 15		; NORMSETTLE
 10667                                  					; someone has diddled the settle
 10668 00000A78 A2[2801]                		mov	[settleslow], al
 10669                                  skip_dpt_setting:			
 10670 00000A7B C3                      		retn
 10671                                  
 10672                                  ; =============== S U B	R O U T	I N E =======================================
 10673                                  
 10674                                  ;--------------------------------------------------------------
 10675                                  ; set time of last access, and reset default values in the dpt.
 10676                                  ;
 10677                                  ;	  note: trashes (at least) si
 10678                                  ;--------------------------------------------------------------
 10679                                  
 10680                                  		; 19/10/2022
 10681                                  done:
 10682 00000A7C 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10683                                  					; fnon_removable
 10684 00000A81 752F                    		jnz	short ddbx	; do not set for non-removable media
 10685 00000A83 E8FD01                  		call	set_tim
 10686                                  ;diddleback:
 10687                                  ; 09/12/2022
 10688                                  diddle_back:				
 10689 00000A86 9C                      		pushf
 10690 00000A87 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10691 00000A8C 7523                    		jnz	short nodiddleback
 10692 00000A8E 50                      		push	ax
 10693 00000A8F 06                      		push	es
 10694 00000A90 C436[2D01]              		les	si, [dpt]
 10695 00000A94 A0[2B01]                		mov	al, [save_eot]
 10696 00000A97 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10697 00000A9B A0[2701]                		mov	al, [settlecurrent]
 10698 00000A9E 8A26[2601]              		mov	ah, [motorstartup]
 10699 00000AA2 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10700 00000AA6 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10701 00000AAB 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10702 00000AAF 07                      		pop	es
 10703 00000AB0 58                      		pop	ax
 10704                                  nodiddleback:				
 10705 00000AB1 9D                      		popf
 10706                                  ddbx:					
 10707 00000AB2 C3                      		retn
 10708                                  
 10709                                  ; =============== S U B	R O U T	I N E =======================================
 10710                                  
 10711                                  ;--------------------------------------------------------------
 10712                                  ;read the number of sectors specified in ax, 
 10713                                  ;handling track boundaries
 10714                                  ;es:di -> bds for this drive
 10715                                  ;--------------------------------------------------------------
 10716                                  
 10717                                  		 ; 19/10/2022
 10718                                  block:	
 10719 00000AB3 09C0                    		or	ax, ax
 10720 00000AB5 74FB                    		jz	short ddbx
 10721 00000AB7 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10722                                  					; fnon_removable
 10723 00000ABC 740D                    		jz	short block_floppy ;
 10724                                  
 10725                                  ; check	to see if multi	track operation	is allowed. if not
 10726                                  ; we have to go	to the block_floppy below to break up the operation.
 10727                                  
 10728 00000ABE F606[2705]80            		test	byte [multrk_flag], 80h
 10729                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10730 00000AC3 7406                    		jz	short block_floppy
 10731 00000AC5 E82900                  		call	Disk
 10732 00000AC8 31C0                    		xor	ax, ax
 10733 00000ACA C3                      		retn
 10734                                  ; ---------------------------------------------------------------------------
 10735                                  
 10736                                  block_floppy:
 10737                                  
 10738                                  ; read at most 1 track worth. perform minimization at sector / track
 10739                                  				
 10740 00000ACB 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10741 00000ACF FEC1                    		inc	cl
 10742 00000AD1 2A0E[3101]              		sub	cl, [cursec]
 10743 00000AD5 30ED                    		xor	ch, ch
 10744 00000AD7 39C8                    		cmp	ax, cx
 10745 00000AD9 7302                    		jnb	short gotmin
 10746 00000ADB 89C1                    		mov	cx, ax
 10747                                  
 10748                                  gotmin:
 10749                                  
 10750                                  ; ax is the requested number of sectors to read
 10751                                  ; cx is the number that we can do on this track
 10752                                  					
 10753 00000ADD 50                      		push	ax
 10754 00000ADE 51                      		push	cx
 10755 00000ADF 89C8                    		mov	ax, cx
 10756 00000AE1 E80D00                  		call	Disk
 10757 00000AE4 59                      		pop	cx
 10758 00000AE5 58                      		pop	ax
 10759                                  
 10760                                  ; cx is the number of sectors just transferred
 10761                                  
 10762 00000AE6 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10763 00000AE8 D0E1                    		shl	cl, 1
 10764 00000AEA 00CF                    		add	bh, cl		; adjust transfer address
 10765 00000AEC EBC5                    		jmp	short block
 10766                                  dskerr_brdg:				
 10767 00000AEE E9EC00                  		jmp	dskerr
 10768                                  
 10769                                  ; =============== S U B	R O U T	I N E =======================================
 10770                                  
 10771                                  ; 15/10/2022
 10772                                  
 10773                                  ;--------------------------------------------------------------
 10774                                  ;perform disk i/o with retries
 10775                                  ; al = number of sectors (1-8, all on one track)
 10776                                  ; es:di point to drive parameters
 10777                                  ; xfer_seg:bx = transfer address 
 10778                                  ;		(must not cross a 64k physical boundary)
 10779                                  ; [rflag] = 2 if read, 3 if write
 10780                                  ; [verify] = 0 for normal, 1 for verify after write
 10781                                  ;--------------------------------------------------------------
 10782                                  
 10783                                  		 ; 19/10/2022
 10784                                  Disk:
 10785                                  
 10786                                  ; Check for hard disk format and
 10787                                  ; if TRUE then set max error count to 2
 10788                                  
 10789 00000AF1 BD0500                  		mov	bp, 5		; MAXERR
 10790                                  					; set up retry count
 10791 00000AF4 26F6452301              		test	byte [es:di+23h], 1	;
 10792                                  					; [es:di+BDS.flags], fnon_removable
 10793 00000AF9 7408                    		jz	short GetRdWrInd
 10794 00000AFB 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10795 00000AFE 7403                    		jz	short GetRdWrInd
 10796 00000B00 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10797                                  GetRdWrInd:				
 10798 00000B03 892E[2A05]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10799 00000B07 892E[2C05]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10800 00000B0B 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10801                                  ;retry:
 10802                                  ; 09/12/2022
 10803                                  _retry:					
 10804 00000B0F 50                      		push	ax
 10805 00000B10 8B16[3301]              		mov	dx, [curtrk]
 10806 00000B14 26F6452301              		test	byte [es:di+23h], 1
 10807 00000B19 740B                    		jz	short disk_not_mini
 10808 00000B1B 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10809                                  					; is this a mini disk? ((logical dos partition))
 10810 00000B20 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10811 00000B22 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10812                                  					; add hidden trks.
 10813                                  disk_not_mini:				
 10814 00000B26 D0CE                    		ror	dh, 1
 10815 00000B28 D0CE                    		ror	dh, 1
 10816 00000B2A 0A36[3101]              		or	dh, [cursec]
 10817 00000B2E 89D1                    		mov	cx, dx
 10818 00000B30 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10819 00000B32 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10820 00000B36 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10821                                  					; [es:di+BDS.drivenum]
 10822 00000B3A 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10823 00000B3F 7413                    		jz	short do_fast	; hard files use fast speed
 10824                                  
 10825                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10826                                  ; this helps when we have just done a reset disk operation and the head has
 10827                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10828                                  
 10829 00000B41 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10830 00000B46 740A                    		jz	short do_writej
 10831 00000B48 80FC02                  		cmp	ah, 2		; romread
 10832 00000B4B 7407                    		jz	short do_fast
 10833 00000B4D 80FC04                  		cmp	ah, 4		; romverify
 10834 00000B50 7402                    		jz	short do_fast
 10835                                  do_writej:	
 10836                                  
 10837                                  ; reads always fast, unless we have just done a disk reset operation
 10838                                  			
 10839 00000B52 EB56                    		jmp	short do_write	; reads	always fast
 10840                                  ; ---------------------------------------------------------------------------
 10841                                  
 10842                                  do_fast:				
 10843 00000B54 E8FC00                  		call	fastspeed	; change settle	mode
 10844                                  
 10845                                  testerr:				
 10846 00000B57 7295                    		jb	short dskerr_brdg
 10847                                  
 10848                                  ; set drive and track of last access
 10849                                  
 10850 00000B59 8816[7600]              		mov	[step_drv], dl
 10851 00000B5D 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10852                                  no_set:
 10853                                  		;cmp	word [wrtverify], 103h
 10854 00000B61 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10855 00000B67 7452                    		jz	short doverify
 10856                                  noverify:				
 10857 00000B69 58                      		pop	ax
 10858                                  
 10859                                  ; check the flags word in the bds to see if the drive is non removable
 10860                                  ; if not we needn't do anything special
 10861                                  ; if it is a hard disk then check to see if multi-track operation
 10862                                  ; is specified. if specified we don't have to calculate for the next
 10863                                  ; track since we are already done. so we can go to the exit of this routine.
 10864                                  
 10865 00000B6A 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10866                                  					; fnon_removable
 10867 00000B6F 7407                    		jz	short its_removable
 10868 00000B71 F606[2705]80            		test	byte [multrk_flag], 80h ; multrk_on
 10869 00000B76 7530                    		jnz	short disk_ret
 10870                                  its_removable:				
 10871 00000B78 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10872 00000B7B 30E4                    		xor	ah, ah
 10873 00000B7D 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10874 00000B81 00C1                    		add	cl, al
 10875 00000B83 880E[3101]              		mov	[cursec], cl
 10876 00000B87 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10877                                  					; see if sector/track limit reached
 10878 00000B8B 761B                    		jbe	short disk_ret
 10879 00000B8D C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10880 00000B92 8A36[3201]              		mov	dh, [curhd]
 10881 00000B96 FEC6                    		inc	dh
 10882 00000B98 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10883 00000B9C 7206                    		jb	short noxor
 10884 00000B9E 30F6                    		xor	dh, dh
 10885 00000BA0 FF06[3301]              		inc	word [curtrk]
 10886                                  noxor:					
 10887 00000BA4 8836[3201]              		mov	[curhd], dh
 10888                                  disk_ret:				
 10889 00000BA8 F8                      		clc
 10890 00000BA9 C3                      		retn
 10891                                  ; ---------------------------------------------------------------------------
 10892                                  
 10893                                  ; 15/10/2022
 10894                                  
 10895                                  ;--------------------------------------------------------------
 10896                                  ; the request is for write. determine if we are talking about
 10897                                  ; the same track and drive. if so, use the fast speed.
 10898                                  ;--------------------------------------------------------------
 10899                                  
 10900                                  do_write:				
 10901 00000BAA 3A16[7600]              		cmp	dl, [step_drv]
 10902 00000BAE 7506                    		jnz	short do_norm	; we have changed drives
 10903 00000BB0 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10904 00000BB4 749E                    		jz	short do_fast	; we are still on the same track
 10905                                  
 10906                                  do_norm:				
 10907 00000BB6 E87500                  		call	normspeed
 10908 00000BB9 EB9C                    		jmp	short testerr
 10909                                  ; ---------------------------------------------------------------------------
 10910                                  
 10911                                  ;--------------------------------------------------------------
 10912                                  ; we have a verify request also. get state info and go verify
 10913                                  ;--------------------------------------------------------------
 10914                                  
 10915                                  doverify:				
 10916 00000BBB 58                      		pop	ax
 10917 00000BBC 50                      		push	ax
 10918 00000BBD B404                    		mov	ah, 4
 10919 00000BBF E89100                  		call	fastspeed
 10920 00000BC2 73A5                    		jnb	short noverify
 10921                                  
 10922                                  ; check the error returned in ah to see if it is a soft ecc error.
 10923                                  ; if it is not we needn't do anything special. if it is a soft
 10924                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10925                                  ; this retry count becomes 0 then we just ignore the error and go to
 10926                                  ; no_verify but if we can still try then we call the routine to reset
 10927                                  ; the disk and go to dskerr1 to retry the operation.
 10928                                  
 10929 00000BC4 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10930 00000BC7 750B                    		jnz	short not_softecc_err
 10931 00000BC9 FF0E[2C05]              		dec	word [soft_ecc_cnt]
 10932 00000BCD 749A                    		jz	short noverify	; no more retry
 10933 00000BCF E83705                  		call	ResetDisk	; reset	disk
 10934 00000BD2 EB3E                    		jmp	short dskerr1	; retry
 10935                                  ; ---------------------------------------------------------------------------
 10936                                  
 10937                                  not_softecc_err:			; other error.			
 10938 00000BD4 E83205                  		call	ResetDisk
 10939 00000BD7 FF0E[2A05]              		dec	word [vretry_cnt]
 10940 00000BDB EB1C                    		jmp	short dskerr0
 10941                                  ; ---------------------------------------------------------------------------
 10942                                  
 10943                                  ;--------------------------------------------------------------
 10944                                  ; need to special case the change-line error ah=06h.
 10945                                  ; if we get this, we need to return it.
 10946                                  ;--------------------------------------------------------------
 10947                                  
 10948                                  dskerr:					
 10949 00000BDD 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10950 00000BE2 7403                    		jz	short dskerr_nochangeline ; brif not
 10951 00000BE4 E80B0D                  		call	checkio
 10952                                  dskerr_nochangeline:			
 10953 00000BE7 803E[2E05]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10954 00000BEC 7508                    		jnz	short dochkagain ; no more retry.
 10955 00000BEE BD0100                  		mov	bp, 1
 10956 00000BF1 C606[2E05]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10957                                  dochkagain:				
 10958 00000BF6 E8AA00                  		call	again
 10959                                  dskerr0:				
 10960 00000BF9 7420                    		jz	short harderr
 10961 00000BFB 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10962                                  					; fnon_removable
 10963 00000C00 7505                    		jnz	short skip_timeout_chk
 10964 00000C02 80FC80                  		cmp	ah, 80h		; timeout?
 10965 00000C05 7414                    		jz	short harderr
 10966                                  skip_timeout_chk:			
 10967 00000C07 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10968 00000C0A 740A                    		jz	short write_fault_err ;	then, don't retry.
 10969 00000C0C C706[2C05]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10970                                  					; set soft_ecc_cnt back	to maxerr
 10971                                  dskerr1:				
 10972 00000C12 58                      		pop	ax		; restore sector count
 10973                                  		;jmp	retry
 10974                                  		; 09/12/2022
 10975 00000C13 E9F9FE                  		jmp	_retry
 10976                                  ; ---------------------------------------------------------------------------
 10977                                  
 10978                                  write_fault_err:			
 10979 00000C16 BD0100                  		mov	bp, 1		; just retry only once
 10980                                  					; for write fault error.
 10981 00000C19 EBF7                    		jmp	short dskerr1
 10982                                  
 10983                                  		; fall into harderr
 10984                                  ; ---------------------------------------------------------------------------
 10985                                  
 10986                                  ; entry point for routines that call maperror themselves
 10987                                  
 10988                                  harderr:				
 10989 00000C1B E84D00                  		call	maperror
 10990                                  harderr2:				
 10991 00000C1E C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10992                                  					; force a media check through rom
 10993 00000C23 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10994 00000C27 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10995                                  
 10996                                  ; since we are performing a non-local goto, restore the disk parameters
 10997                                  
 10998                                  		;jmp	diddleback
 10999                                  		; 09/12/2022
 11000 00000C2B E958FE                  		jmp	diddle_back
 11001                                  
 11002                                  ; =============== S U B	R O U T	I N E =======================================
 11003                                  
 11004                                  ; change settle value from settlecurrent to whatever is appropriate
 11005                                  ; note that this routine is never called for a fixed disk.
 11006                                  
 11007                                  		; 19/10/2022
 11008                                  normspeed:
 11009 00000C2E 803E[3006]00            		cmp	byte [media_set_for_format], 0
 11010 00000C33 751E                    		jnz	short fastspeed
 11011 00000C35 06                      		push	es
 11012 00000C36 50                      		push	ax
 11013 00000C37 A0[2801]                		mov	al, [settleslow]
 11014 00000C3A C436[2D01]              		les	si, [dpt]	; current disk parm table
 11015 00000C3E 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11016 00000C42 58                      		pop	ax
 11017 00000C43 07                      		pop	es
 11018 00000C44 E80C00                  		call	fastspeed
 11019 00000C47 06                      		push	es
 11020 00000C48 C436[2D01]              		les	si, [dpt]
 11021 00000C4C 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11022                                  					; 1 is fast settle value
 11023 00000C51 07                      		pop	es
 11024 00000C52 C3                      		retn
 11025                                  
 11026                                  ; =============== S U B	R O U T	I N E =======================================
 11027                                  
 11028                                  ; if the drive has been marked as too big (i.e. starting sector of the
 11029                                  ; partition is > 16 bits, then always return drive not ready.
 11030                                  
 11031                                  fastspeed:		
 11032 00000C53 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 11033                                  					; ftoobig
 11034 00000C58 750D                    		jnz	short notready
 11035 00000C5A 06                      		push	es
 11036 00000C5B 8E06[2F05]              		mov	es, [xfer_seg]
 11037 00000C5F CD13                    		int	13h		; DISK -
 11038 00000C61 8C06[2F05]              		mov	[xfer_seg], es
 11039 00000C65 07                      		pop	es
 11040 00000C66 C3                      		retn
 11041                                  ; ---------------------------------------------------------------------------
 11042                                  
 11043                                  notready:				
 11044 00000C67 F9                      		stc
 11045 00000C68 B480                    		mov	ah, 80h
 11046 00000C6A C3                      		retn
 11047                                  
 11048                                  ; =============== S U B	R O U T	I N E =======================================
 11049                                  
 11050                                  ; map error returned by rom in ah into corresponding code to be returned to
 11051                                  ; dos in al. trashes di. guaranteed to set carry.
 11052                                  
 11053                                  maperror:	
 11054 00000C6B 51                      		push	cx
 11055 00000C6C 06                      		push	es
 11056 00000C6D 1E                      		push	ds		; set es=Bios_Data
 11057 00000C6E 07                      		pop	es
 11058 00000C6F 88E0                    		mov	al, ah		; put error code in al
 11059 00000C71 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 11060                                  		;mov	cx, 11 ; PCDOS 7.1 ; 02/09/2023
 11061 00000C74 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 11062                                  					; number of possible error conditions
 11063 00000C77 BF[3C01]                		mov	di, errin	; point to error conditions
 11064 00000C7A F2AE                    		repne scasb
 11065                                  		; 02/09/2023
 11066                                  		;mov	al, [di+10] ; PCDOS 7.1
 11067                                  		; 10/12/2022
 11068 00000C7C 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 11069                                  					; get translation
 11070                                  		; 19/10/2022 - Temporary ! 
 11071                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 11072 00000C7F 07                      		pop	es
 11073 00000C80 59                      		pop	cx
 11074 00000C81 F9                      		stc			; flag error condition
 11075 00000C82 C3                      		retn
 11076                                  
 11077                                  ; =============== S U B	R O U T	I N E =======================================
 11078                                  
 11079                                  ; set the time of last access for this drive.
 11080                                  ; this is done only for removable media. es:di -> bds
 11081                                  
 11082                                  set_tim:		
 11083 00000C83 50                      		push	ax
 11084 00000C84 E898F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 11085                                  
 11086                                  ; we have the new time. if we see that the time has passed,
 11087                                  ; then we reset the threshold counter...
 11088                                  
 11089 00000C87 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 11090 00000C8B 7506                    		jnz	short setaccess
 11091 00000C8D 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 11092                                  		;jz	short done_set
 11093                                  		; 12/12/2022
 11094 00000C91 740E                    		je	short done_set2
 11095                                  setaccess:				
 11096 00000C93 C606[1D01]00            		mov	byte [accesscount], 0
 11097 00000C98 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 11098 00000C9C 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 11099                                  done_set:				
 11100 00000CA0 F8                      		clc
 11101                                  done_set2:		; 12/12/2022
 11102 00000CA1 58                      		pop	ax
 11103 00000CA2 C3                      		retn
 11104                                  
 11105                                  ; =============== S U B	R O U T	I N E =======================================
 11106                                  
 11107                                  ; this routine is called if an error occurs while formatting or verifying.
 11108                                  ; it resets the drive,and decrements the retry count.
 11109                                  ; on entry - ds:di - points to bds for the drive
 11110                                  ;	     bp    - contains retry count
 11111                                  ; on exit    flags indicate result of decrementing retry count
 11112                                  
 11113                                  again:	
 11114 00000CA3 E86304                  		call	ResetDisk
 11115 00000CA6 80FC06                  		cmp	ah, 6
 11116 00000CA9 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 11117                                  					; do not decrement retry count.
 11118 00000CAB 4D                      		dec	bp		; decrement retry count
 11119 00000CAC C3                      		retn
 11120                                  ; ---------------------------------------------------------------------------
 11121                                  
 11122                                  dont_dec_retry_count:			
 11123 00000CAD 08E4                    		or	ah, ah
 11124 00000CAF C3                      		retn
 11125                                  
 11126                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 11127                                  
 11128                                  ;----------------------------------------------------------------------------
 11129                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 11130                                  ;----------------------------------------------------------------------------
 11131                                  ; 11/03/2019 - Retro DOS v4.0
 11132                                  
 11133                                  ; 18/03/2019
 11134                                  
 11135                                  ; ==========================================================================
 11136                                  ;
 11137                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 11138                                  ;
 11139                                  ;      This function is intended to give the user to control the
 11140                                  ;      bds table flags of unformatted_media bit.
 11141                                  ;      GetAccessFlag will show the status -
 11142                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 11143                                  ;						1 disk i/o allowed
 11144                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 11145                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 11146                                  ;						1 disallow disk i/o
 11147                                  ; ==========================================================================
 11148                                  
 11149                                  		; generic ioctl dispatch tables
 11150                                  
 11151                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 11152                                  
 11153                                  ; ---------------------------------------------------------------------------
 11154 00000CB0 00                      		db 0
 11155                                  
 11156                                  ; 09/12/2022 
 11157                                  %if 0
 11158                                  
 11159                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 11160                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 11161                                  		dw 0EE8h	; 61h	; ReadTrack
 11162                                  		dw 0E86h	; 62h	; VerifyTrack
 11163                                  		dw 0CA3h	 	; Cmd_Error_Proc
 11164                                  		dw 0CA3h		; Cmd_Error_Proc
 11165                                  		dw 0CA3h		; Cmd_Error_Proc
 11166                                  		dw 119Ah	; 66h	; GetMediaId
 11167                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 11168                                  		dw 12C1h	; 68h	; SenseMediaType
 11169                                  
 11170                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 11171                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 11172                                  		dw 0EEFh	; 41h	; WriteTrack
 11173                                  		dw 0DC1h	; 42h	; FormatTrack
 11174                                  		dw 0CA3h		; Cmd_Error_Proc
 11175                                  		dw 0CA3h		; Cmd_Error_Proc
 11176                                  		dw 0CA3h		; Cmd_Error_Proc
 11177                                  		dw 11D2h	; 46h	; SetMediaId
 11178                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 11179                                  
 11180                                  %endif
 11181                                  
 11182                                  		; 09/12/2022
 11183 00000CB1 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 11184 00000CB2 [1C0D]                  		dw GetDeviceParameters	; 60h
 11185 00000CB4 [5E0F]                  		dw ReadTrack		; 61h
 11186 00000CB6 [FE0E]                  		dw VerifyTrack		; 62h
 11187 00000CB8 [180D]                  		dw Cmd_Error_Proc
 11188 00000CBA [180D]                  		dw Cmd_Error_Proc
 11189 00000CBC [180D]                  		dw Cmd_Error_Proc
 11190 00000CBE [E811]                  		dw GetMediaId		; 66h
 11191 00000CC0 [B412]                  		dw GetAccessFlag	; 67h ; unpublished function
 11192 00000CC2 [0613]                  		dw SenseMediaType	; 68h
 11193                                  
 11194 00000CC4 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 11195 00000CC5 [670D]                  		dw SetDeviceParameters	; 40h
 11196 00000CC7 [650F]                  		dw WriteTrack		; 41h
 11197 00000CC9 [3A0E]                  		dw FormatTrack		; 42h
 11198 00000CCB [180D]                  		dw Cmd_Error_Proc
 11199 00000CCD [180D]                  		dw Cmd_Error_Proc
 11200 00000CCF [180D]                  		dw Cmd_Error_Proc
 11201 00000CD1 [1E12]                  		dw SetMediaId		; 46h
 11202 00000CD3 [CA12]                  		dw SetAccessFlag	; 47h ; unpublished function
 11203                                  
 11204                                  ; ==========================================================================
 11205                                  ; IOC_DC_Table
 11206                                  ;
 11207                                  ; This table contains all of the valid generic IOCtl Minor codes for
 11208                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 11209                                  ; Added for 5.00
 11210                                  ; ==========================================================================
 11211                                  
 11212 00000CD5 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 11213 00000CD6 40                      		db 40h			; SET_DEVICE_PARAMETERS
 11214 00000CD7 61                      		db 61h			; READ_TRACK
 11215 00000CD8 41                      		db 41h			; WRITE_TRACK
 11216 00000CD9 62                      		db 62h			; VERIFY_TRACK
 11217 00000CDA 42                      		db 42h			; FORMAT_TRACK
 11218 00000CDB 66                      		db 66h			; GET_MEDIA_ID
 11219 00000CDC 46                      		db 46h			; SET_MEDIA_ID
 11220 00000CDD 67                      		db 67h			; GET_ACCESS_FLAG
 11221 00000CDE 47                      		db 47h			; SET_ACCESS_FLAG
 11222 00000CDF 68                      		db 68h			; SENSE_MEDIA_TYPE
 11223                                  
 11224                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 11225                                  
 11226                                  ; ---------------------------------------------------------------------------
 11227                                  
 11228                                  ; 16/10/2022
 11229                                  
 11230                                  ; ==========================================================================
 11231                                  ; Do_Generic_IOCtl: perform generic ioctl request
 11232                                  ;
 11233                                  ;    input: AL contains logical drive
 11234                                  ;
 11235                                  ;	functions are dispatched through a call. On return, carry indicates
 11236                                  ;	error code in al. Note::bES:b& ds undefined on return from
 11237                                  ;	subfunctions.
 11238                                  ;
 11239                                  ; ==========================================================================
 11240                                  
 11241                                  ; 11/03/2019
 11242                                  		; 19/10/2022
 11243                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 11244 00000CE0 E88DF8                  		call	SetDrive	; ES:DI	Points to bds for drive
 11245 00000CE3 06                      		push	es
 11246 00000CE4 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 11247 00000CE8 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 11248                                  					; RAWIO
 11249 00000CED 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 11250 00000CF1 07                      		pop	es
 11251 00000CF2 7525                    		jnz	short IoctlFuncErr
 11252                                  
 11253                                  		; cas note: Could do the above two blocks in reverse order.
 11254                                  		; Would have to preserve al for SetDrive
 11255                                  
 11256                                  		; 10/12/2022
 11257 00000CF4 BE[B10C]                		mov	si, IoReadJumpTable
 11258                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 11259                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 11260 00000CF7 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 11261 00000CF9 7503                    		jnz	short NotGenericWrite ; function is a read.
 11262                                  		; 10/12/2022
 11263 00000CFB BE[C40C]                		mov	si, IoWriteJumpTable
 11264                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 11265                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 11266                                  NotGenericWrite:			
 11267 00000CFE 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 11268 00000D00 2C40                    		sub	al, 40h		; offset for base function
 11269 00000D02 2E3A04                  		cmp	al, [cs:si]
 11270 00000D05 7712                    		ja	short IoctlFuncErr
 11271 00000D07 98                      		cbw
 11272 00000D08 D1E0                    		shl	ax, 1
 11273 00000D0A 46                      		inc	si
 11274 00000D0B 01C6                    		add	si, ax
 11275 00000D0D 2EFF14                  		call	near [cs:si]
 11276                                  		;call	word ptr cs:[si]
 11277 00000D10 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11278                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11279                                  					; 2C7h:30h = 70h:25A0h
 11280 00000D15 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 11281 00000D17 C3                      		retn			; Pass carry flag through to exit code
 11282                                  ; ---------------------------------------------------------------------------
 11283                                  
 11284                                  		; Cmd_Error_Proc is called as a procedure and also use
 11285                                  		; as a fall through from above
 11286                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 11287 00000D18 5A                      		pop	dx
 11288                                  
 11289                                  IoctlFuncErr:				
 11290 00000D19 E9BDF3                  		jmp	bc_cmderr
 11291                                  ; ---------------------------------------------------------------------------
 11292                                  
 11293                                  ; 16/10/2022
 11294                                  
 11295                                  ; ==========================================================================
 11296                                  ;**	GetDeviceParameters:
 11297                                  ;
 11298                                  ;	GetDeviceParameters implements the generic ioctl function:
 11299                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 11300                                  ;
 11301                                  ;	ENTRY	(ES:di) = BDS for drive
 11302                                  ;		PtrSav = long pointer to request header
 11303                                  ;	EXIT	??? BUGBUG
 11304                                  ;	USES	??? BUGBUG
 11305                                  ; ==========================================================================
 11306                                  
 11307                                  		; 19/10/2022
 11308                                  GetDeviceParameters:
 11309                                  		; Copy info from bds to the device parameters packet
 11310                                  
 11311 00000D1C C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11312 00000D20 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11313                                  					; (DS:BX) = return buffer
 11314 00000D23 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 11315 00000D27 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11316 00000D2A 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 11317 00000D2E 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 11318                                  					; Mask off other bits
 11319 00000D31 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11320 00000D34 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 11321 00000D38 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11322 00000D3B 30C0                    		xor	al, al		; Set media type to default
 11323 00000D3D 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11324                                  					
 11325                                  		; copy recommended bpb
 11326 00000D40 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 11327 00000D43 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11328                                  					; BUILD_DEVICE_BPB
 11329 00000D46 7412                    		jz	short UseBpbPresent
 11330 00000D48 1E                      		push	ds		; Save request packet segment
 11331 00000D49 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11332                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11333                                  					; 2C7h:30h = 70h:25A0h
 11334                                  					; Point back to Bios_Data
 11335 00000D4E E887FB                  		call	checksingle
 11336 00000D51 E842F9                  		call	GetBp		; Build	the bpb	from scratch
 11337 00000D54 1F                      		pop	ds		; Restore request packet segment
 11338 00000D55 720F                    		jb	short GetParmRet
 11339 00000D57 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 11340                                  					; Use this subfield of bds instead
 11341                                  UseBpbPresent:				
 11342 00000D5A 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11343                                  					; This is where	the result goes
 11344 00000D5D B91900                  		mov	cx, 25		; A_BPB.size - 6
 11345                                  					; For now use 'small' bpb
 11346 00000D60 1E                      		push	ds		; reverse segments for copy
 11347 00000D61 06                      		push	es
 11348 00000D62 1F                      		pop	ds
 11349 00000D63 07                      		pop	es
 11350 00000D64 F3A4                    		rep movsb
 11351                                  		
 11352                                  		; 12/12/2022
 11353                                  		; cf=0 (test instruction -above- resets cf) 	
 11354                                  		;clc
 11355                                  GetParmRet:				
 11356 00000D66 C3                      		retn
 11357                                  ; ---------------------------------------------------------------------------
 11358                                  
 11359                                  ; 17/10/2022
 11360                                  ; 16/10/2022
 11361                                  
 11362                                  ; ==========================================================================
 11363                                  ; SetDeviceParameters:
 11364                                  ;
 11365                                  ; input: ES:di points to bds for drive
 11366                                  ; ==========================================================================
 11367                                  
 11368                                  		; 19/10/2022
 11369                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11370 00000D67 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11371 00000D6B C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11372 00000D6E 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11373                                  					; fchanged_by_format|fchanged
 11374 00000D74 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11375                                  					; ONLY_SET_TRACKLAYOUT
 11376 00000D77 7579                    		jnz	short setTrackTable
 11377 00000D79 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11378 00000D7C 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11379 00000D80 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11380 00000D83 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11381 00000D87 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11382 00000D8A 1E                      		push	ds
 11383                                  		; 17/10/2022
 11384 00000D8B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11385                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11386                                  					; 2C7h:30h = 70h:25A0h
 11387                                  		;cmp	byte [fhave96], 0
 11388 00000D90 803E[7700]00            		cmp	byte [fhave96], 0
 11389 00000D95 1F                      		pop	ds
 11390 00000D96 7502                    		jnz	short HaveChange ; we have changeline support
 11391                                  		; 10/12/2022
 11392 00000D98 24FD                    		and	al, 0FDh
 11393                                  		;and	ax, 0FFFDh	; ~fchangeline
 11394                                  
 11395                                  		; Ignore all bits except non_removable and changeline
 11396                                  HaveChange:				
 11397 00000D9A 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11398 00000D9D 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11399 00000DA1 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11400 00000DA5 09C8                    		or	ax, cx
 11401 00000DA7 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11402 00000DAB 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11403                                  					; Set media type
 11404 00000DAE 1E                      		push	ds
 11405 00000DAF 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11406                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11407 00000DB4 A2[2F06]                		mov	[mediatype], al
 11408                                  		;mov	ds:mediatype, al
 11409 00000DB7 1F                      		pop	ds
 11410                                  
 11411                                  		; The media changed (maybe) so we will have to do a set dasd
 11412                                  		; the next time we format a track
 11413                                  
 11414                                  		; 10/12/2022
 11415 00000DB8 26804D2380              		or	byte [es:di+35], 80h
 11416                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11417                                  					; set_dasd_true
 11418 00000DBD 57                      		push	di		; Save bds pointer
 11419                                  
 11420                                  		; Figure out what we are supposed to do with the bpb
 11421                                  		; were we asked to install a fake bpb?
 11422                                  
 11423 00000DBE F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11424                                  					; INSTALL_FAKE_BPB
 11425 00000DC1 7514                    		jnz	short InstallFakeBpb
 11426                                  
 11427                                  		; were we returning a fake bpb when asked to build a bpb?
 11428                                  
 11429                                  		; 10/12/2022
 11430 00000DC3 26F6452304              		test	byte [es:di+35], 4
 11431                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11432                                  					; return_fake_bpb
 11433 00000DC8 7405                    		jz	short InstallRecommendedBpb
 11434                                  
 11435                                  		; we were returning a fake bpb but we can stop now
 11436                                  
 11437                                  		; 10/12/2022
 11438 00000DCA 26806523FB              		and	byte [es:di+35], 0FBh
 11439                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11440                                  					; ~return_fake_bpb
 11441                                  InstallRecommendedBpb:			
 11442 00000DCF B91F00                  		mov	cx, 31		; A_BPB.size
 11443 00000DD2 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11444 00000DD5 EB0B                    		jmp	short CopyTheBpb
 11445                                  ; ---------------------------------------------------------------------------
 11446                                  
 11447                                  InstallFakeBpb:
 11448                                  		; 10/12/2022
 11449 00000DD7 26804D2304              		or	byte [es:di+35], 4				
 11450                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11451                                  					; return_fake_bpb
 11452 00000DDC B91900                  		mov	cx, 25		; A_BPB.size - 6
 11453                                  					; move 'smaller' bpb
 11454 00000DDF 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11455                                  
 11456                                  CopyTheBpb:				
 11457 00000DE2 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11458 00000DE5 F3A4                    		rep movsb
 11459 00000DE7 1E                      		push	ds		; Save packet segment
 11460                                  		; 17/10/2022
 11461 00000DE8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11462                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11463                                  					; Setup	for ds -> Bios_Data
 11464 00000DED E8CA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11465 00000DF0 1F                      		pop	ds		; Restore packet segment
 11466 00000DF1 5F                      		pop	di		; Restore bds pointer
 11467                                  setTrackTable:				
 11468 00000DF2 8B4F26                  		mov	cx, [bx+38]
 11469 00000DF5 1E                      		push	ds
 11470 00000DF6 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11471 00000DFB 890E[3105]              		mov	[sectorspertrack], cx
 11472 00000DFF 1F                      		pop	ds
 11473                                  		; 10/12/2022
 11474 00000E00 26806523F7              		and	byte [es:di+35], 0F7h
 11475                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11476                                  					; ~good_tracklayout
 11477 00000E05 F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11478                                  					; TRACKLAYOUT_IS_GOOD
 11479 00000E08 7405                    		jz	short UglyTrackLayOut
 11480                                  		; 10/12/2022
 11481 00000E0A 26804D2308              		or	byte [es:di+35], 8
 11482                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11483                                  					; good_tracklayout
 11484                                  UglyTrackLayOut:			
 11485 00000E0F 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11486 00000E12 7722                    		ja	short TooManyPerTrack
 11487                                  		;jcxz	short SectorInfoSaved
 11488 00000E14 E31E                    		jcxz	SectorInfoSaved	; 19/10/2022
 11489 00000E16 BF[3305]                		mov	di, tracktable
 11490 00000E19 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11491                                  		; 17/10/2022
 11492 00000E1C 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11493                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11494                                  					; Trash	our bds	pointer
 11495                                  StoreSectorInfo:
 11496 00000E21 47                      		inc	di
 11497 00000E22 47                      		inc	di		; Skip over cylinder and head
 11498 00000E23 AD                      		lodsw			; Get sector id
 11499 00000E24 AA                      		stosb			; Copy it
 11500 00000E25 AD                      		lodsw			; Get sector size
 11501                                  		
 11502                                  		; 02/09/2023 (PCDOS 7.1)
 11503                                  		;call	SectSizeToSectIndex
 11504 00000E26 80FC03                  		cmp	ah, 3 ; 02/09/2023
 11505                                  		;cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11506                                  					; examine upper	byte only
 11507 00000E29 7704                    		ja	short OneK
 11508 00000E2B 88E0                    		mov	al, ah		; value	in AH is the index!
 11509 00000E2D EB02                    		jmp	short sdp_s
 11510                                  OneK:
 11511 00000E2F B003                    		mov	al, 3
 11512                                  sdp_s:
 11513 00000E31 AA                      		stosb			; Store	sector SIZE index
 11514 00000E32 E2ED                    		loop	StoreSectorInfo
 11515                                  SectorInfoSaved:
 11516 00000E34 F8                      		clc
 11517 00000E35 C3                      		retn
 11518                                  ; ---------------------------------------------------------------------------
 11519                                  
 11520                                  TooManyPerTrack:			
 11521 00000E36 B00C                    		mov	al, 0Ch
 11522 00000E38 F9                      		stc
 11523 00000E39 C3                      		retn
 11524                                  ; ---------------------------------------------------------------------------
 11525                                  
 11526                                  ; 16/10/2022
 11527                                  
 11528                                  ; ==========================================================================
 11529                                  ; FormatTrack:
 11530                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11531                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11532                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11533                                  ;
 11534                                  ; input: ES:di points to bds for drive
 11535                                  ;
 11536                                  ; output:
 11537                                  ;	for status call:
 11538                                  ;	specialfunction byte set to:
 11539                                  ;		0 - rom support + legal combination
 11540                                  ;		1 - no rom support
 11541                                  ;		2 - illegal combination
 11542                                  ;		3 - no media present
 11543                                  ;	carry cleared.
 11544                                  ;
 11545                                  ;	for format track:
 11546                                  ;		carry set if error
 11547                                  ;
 11548                                  ; ==========================================================================
 11549                                  
 11550                                  ; 16/03/2019
 11551                                  
 11552                                  		; 19/10/2022
 11553                                  FormatTrack:
 11554 00000E3A C51E[1200]              		lds	bx, [ptrsav]
 11555 00000E3E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11556 00000E41 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11557                                  					; STATUS_FOR_FORMAT
 11558 00000E44 740E                    		jz	short DoFormatTrack
 11559 00000E46 1E                      		push	ds
 11560                                  		; 17/10/2022
 11561 00000E47 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11562                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11563 00000E4C E82602                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11564 00000E4F 1F                      		pop	ds
 11565 00000E50 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11566 00000E52 F8                      		clc
 11567 00000E53 C3                      		retn
 11568                                  ; ---------------------------------------------------------------------------
 11569                                  
 11570                                  DoFormatTrack:				
 11571 00000E54 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11572                                  					; DEV_HARDDISK
 11573 00000E59 7508                    		jnz	short DoFormatDiskette
 11574                                  		; 17/10/2022
 11575 00000E5B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11576                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11577                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11578 00000E60 E99B00                  		jmp	VerifyTrack
 11579                                  ; ---------------------------------------------------------------------------
 11580                                  
 11581                                  DoFormatDiskette:			
 11582 00000E63 8B4F01                  		mov	cx, [bx+1]
 11583 00000E66 8B5703                  		mov	dx, [bx+3]
 11584 00000E69 F60702                  		test	byte [bx], 2
 11585                                  		; 17/10/2022
 11586 00000E6C 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11587                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11588                                  					; Setup	ds-> Bios_Data for verify
 11589 00000E71 7403                    		jz	short DoFormatDiskette_1
 11590 00000E73 E9E300                  		jmp	VerifyTrack_Err
 11591                                  ; ---------------------------------------------------------------------------
 11592                                  
 11593                                  DoFormatDiskette_1:			
 11594 00000E76 E8FC01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11595 00000E79 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11596 00000E7B 7406                    		jz	short NeedToSetDasd ; Old rom
 11597 00000E7D 3C03                    		cmp	al, 3		; Time out error?
 11598 00000E7F 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11599                                  					; about	the illegal combination)
 11600 00000E81 EB66                    		jmp	short FormatFailed
 11601                                  ; ---------------------------------------------------------------------------
 11602                                  
 11603                                  NeedToSetDasd:				
 11604 00000E83 52                      		push	dx
 11605 00000E84 E89001                  		call	SetDasd		; INT 13h, AH=17h
 11606 00000E87 5A                      		pop	dx
 11607                                  NoSetDasd:				
 11608 00000E88 E84DFA                  		call	checksingle	; Do any needed	diskette swapping
 11609 00000E8B 89D0                    		mov	ax, dx		; Get track from packet
 11610 00000E8D A3[3901]                		mov	[trknum], ax
 11611 00000E90 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11612 00000E94 88CC                    		mov	ah, cl
 11613 00000E96 BB[3305]                		mov	bx, tracktable
 11614 00000E99 8B0E[3105]              		mov	cx, [sectorspertrack]
 11615                                  
 11616                                  StoreCylinderHead:			
 11617 00000E9D 8907                    		mov	[bx], ax	; Store	into TrackTable
 11618 00000E9F 83C304                  		add	bx, 4		; Skip to next sector field
 11619 00000EA2 E2F9                    		loop	StoreCylinderHead
 11620                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 11621                                  		; 02/09/2023
 11622 00000EA4 B105                    		mov	cl, 5
 11623                                  FormatRetry:				
 11624 00000EA6 51                      		push	cx
 11625 00000EA7 BB[3305]                		mov	bx, tracktable
 11626 00000EAA A0[3105]                		mov	al, [sectorspertrack]
 11627 00000EAD B405                    		mov	ah, 5		; romformat
 11628 00000EAF 8C1E[2F05]              		mov	[xfer_seg], ds
 11629 00000EB3 E86902                  		call	ToRom
 11630 00000EB6 59                      		pop	cx
 11631 00000EB7 7216                    		jb	short FormatError
 11632 00000EB9 51                      		push	cx		; Now verify the sectors just formatted.
 11633                                  					; NOTE:	because	of bug in some BIOSes we have to
 11634                                  					;	set ES:BX to 00:00
 11635 00000EBA 53                      		push	bx
 11636 00000EBB 31DB                    		xor	bx, bx
 11637 00000EBD 891E[2F05]              		mov	[xfer_seg], bx
 11638 00000EC1 A0[3105]                		mov	al, [sectorspertrack]
 11639 00000EC4 B404                    		mov	ah, 4		; romverify
 11640 00000EC6 B101                    		mov	cl, 1
 11641 00000EC8 E85402                  		call	ToRom
 11642 00000ECB 5B                      		pop	bx
 11643 00000ECC 59                      		pop	cx
 11644 00000ECD 7329                    		jnb	short FormatOk
 11645                                  FormatError:				
 11646 00000ECF E83702                  		call	ResetDisk
 11647 00000ED2 C606[3106]01            		mov	byte [had_format_error], 1
 11648 00000ED7 50                      		push	ax
 11649 00000ED8 51                      		push	cx
 11650 00000ED9 52                      		push	dx
 11651 00000EDA E89801                  		call	SetMediaForFormat
 11652 00000EDD 3C01                    		cmp	al, 1
 11653 00000EDF 7503                    		jnz	short WhileErr
 11654 00000EE1 E83301                  		call	SetDasd
 11655                                  WhileErr:				
 11656 00000EE4 5A                      		pop	dx
 11657 00000EE5 59                      		pop	cx
 11658 00000EE6 58                      		pop	ax
 11659 00000EE7 E2BD                    		loop	FormatRetry
 11660                                  FormatFailed:				
 11661 00000EE9 C606[3106]01            		mov	byte [had_format_error], 1
 11662                                  					; Set the format error flag
 11663 00000EEE 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11664 00000EF1 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11665 00000EF3 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11666                                  DoMapIt:				
 11667 00000EF5 E973FD                  		jmp	maperror
 11668                                  ; ---------------------------------------------------------------------------
 11669                                  
 11670                                  FormatOk:				
 11671 00000EF8 C606[3106]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11672 00000EFD C3                      		retn
 11673                                  ; ---------------------------------------------------------------------------
 11674                                  
 11675                                  ; 16/10/2022
 11676                                  
 11677                                  ; ==========================================================================
 11678                                  ;
 11679                                  ; VerifyTrack:
 11680                                  ;
 11681                                  ; input: ES:di points to bds for drive
 11682                                  ; ==========================================================================
 11683                                  
 11684                                  VerifyTrack:				
 11685 00000EFE 1E                      		push	ds
 11686 00000EFF C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11687 00000F03 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11688                                  
 11689                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11690                                  
 11691 00000F06 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11692 00000F09 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11693 00000F0C 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11694 00000F0F 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11695                                  					; Get option flag word
 11696 00000F11 1F                      		pop	ds
 11697 00000F12 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11698 00000F17 890E[3301]              		mov	[curtrk], cx
 11699 00000F1B A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11700 00000F1E 8B0E[3105]              		mov	cx, [sectorspertrack]
 11701                                  
 11702                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11703                                  		; specified if not we should go to the normal track verification
 11704                                  		; routine. If fast format has been specified we should get the
 11705                                  		; number of tracks to be verified and check it to see if it is
 11706                                  		; > 255. If it is then it is an error and we should go to
 11707                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11708                                  		; sectors per track to get the total number of sectors to be
 11709                                  		; verified. This should also be less than equal to 255
 11710                                  		; otherwise we go to same error exit. If everything is okay
 11711                                  		; we initalise cx to the total sectors. use ax as a temporary
 11712                                  		; register.
 11713                                  
 11714                                  					; Special function requested?	
 11715 00000F22 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11716 00000F25 7421                    		jz	short NormVerifyTrack
 11717 00000F27 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11718 00000F29 08E4                    		or	ah, ah
 11719 00000F2B 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11720 00000F2D F6E1                    		mul	cl
 11721 00000F2F 08E4                    		or	ah, ah
 11722 00000F31 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11723 00000F33 89C1                    		mov	cx, ax
 11724                                  		; 10/12/2022
 11725 00000F35 26F6452301              		test	byte [es:di+35], 1
 11726                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11727                                  					; fnon_removable
 11728 00000F3A 740C                    		jz	short NormVerifyTrack
 11729                                  					; Multitrack operation = on?
 11730                                  		; 10/12/2022
 11731                                  		; 19/10/2022
 11732 00000F3C F606[2705]80            		test	byte [multrk_flag], 80h
 11733                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11734                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11735 00000F41 7405                    		jz	short NormVerifyTrack
 11736 00000F43 C606[2E05]01            		mov	byte [multitrk_format_flag], 1
 11737                                  NormVerifyTrack:			
 11738 00000F48 31C0                    		xor	ax, ax		; 1st sector
 11739 00000F4A 31DB                    		xor	bx, bx
 11740 00000F4C 891E[2F05]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11741 00000F50 E83F00                  		call	TrackIo
 11742 00000F53 C606[2E05]00            		mov	byte [multitrk_format_flag], 0
 11743 00000F58 C3                      		retn
 11744                                  ; ---------------------------------------------------------------------------
 11745                                  
 11746                                  VerifyTrack_Err:			
 11747 00000F59 B401                    		mov	ah, 1
 11748 00000F5B E90DFD                  		jmp	maperror
 11749                                  ; ---------------------------------------------------------------------------
 11750                                  
 11751                                  ; 16/10/2022
 11752                                  
 11753                                  ; ==========================================================================
 11754                                  ;
 11755                                  ; ReadTrack:
 11756                                  ;
 11757                                  ; input: ES:di points to bds for drive
 11758                                  ;
 11759                                  ; ==========================================================================
 11760                                  
 11761                                  ReadTrack:				
 11762 00000F5E C606[2001]02            		mov	byte [rflag], 2	; romread
 11763 00000F63 EB05                    		jmp	short ReadWriteTrack
 11764                                  ; ---------------------------------------------------------------------------
 11765                                  
 11766                                  WriteTrack:
 11767                                  
 11768                                  ; ==========================================================================
 11769                                  ;
 11770                                  ; WriteTrack:
 11771                                  ;
 11772                                  ; input: ES:di points to bds for drive
 11773                                  ;
 11774                                  ; ==========================================================================
 11775                                  				
 11776 00000F65 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11777                                  
 11778                                  		; Fall into ReadWriteTrack
 11779                                  
 11780                                  ; ==========================================================================
 11781                                  ;
 11782                                  ; readWriteTrack:
 11783                                  ;
 11784                                  ; input:
 11785                                  ;    ES:di points to bds for drive
 11786                                  ;    rFlag - 2 for read,3 for write
 11787                                  ;
 11788                                  ; ==========================================================================
 11789                                  
 11790                                  ReadWriteTrack:	
 11791                                  		; save bds pointer segment so we can use it to access
 11792                                  		; our packet. Notice that this is not the standard register
 11793                                  		; assignment for accessing packets
 11794                                  		
 11795                                  		; 19/10/2022	
 11796 00000F6A 06                      		push	es
 11797 00000F6B C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11798 00000F6F 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11799 00000F73 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11800 00000F77 A3[3301]                		mov	[curtrk], ax
 11801 00000F7A 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11802 00000F7E A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11803 00000F81 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11804 00000F85 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11805 00000F89 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11806                                  					; Get transfer address
 11807                                  
 11808                                  		; we just trashed our packet address, but we no longer care
 11809                                  
 11810 00000F8D 8C06[2F05]              		mov	[xfer_seg], es	; Pass transfer	segment
 11811 00000F91 07                      		pop	es
 11812                                  
 11813                                  		; Fall into TrackIo
 11814                                  
 11815                                  ; =============== S U B	R O U T	I N E =======================================
 11816                                  
 11817                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11818                                  
 11819                                  ; ==========================================================================
 11820                                  ;
 11821                                  ; TrackIo:
 11822                                  ;    performs track read/write/verify
 11823                                  ;
 11824                                  ;   input:
 11825                                  ;      rFlag	- 2 = read
 11826                                  ;		  3 = write
 11827                                  ;		  4 = verify
 11828                                  ;      AX	- Index into track table of first sector to io
 11829                                  ;      CX	- Number of sectors to io
 11830                                  ;      Xfer_Seg:BX - Transfer address
 11831                                  ;      ES:DI	- Pointer to bds
 11832                                  ;      CurTrk	- Current cylinder
 11833                                  ;      CurHd	- Current head
 11834                                  ;
 11835                                  ; ==========================================================================
 11836                                  
 11837                                  ; 16/03/2019 - Retro DOS v4.0
 11838                                  		
 11839                                  		; 19/10/2022
 11840                                  TrackIo:	
 11841                                  					; Procedure `disk' will pop stack to
 11842 00000F92 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11843 00000F96 E83FF9                  		call	checksingle	; Ensure correct disk is in drv
 11844 00000F99 803E[3006]01            		cmp	byte [media_set_for_format], 1
 11845                                  					; See if we have already set	disk
 11846 00000F9E 7407                    		jz	short Dptalreadyset ; base table
 11847 00000FA0 50                      		push	ax		; set up tables	and variables for i/o
 11848 00000FA1 51                      		push	cx
 11849 00000FA2 E88FFA                  		call	iosetup
 11850 00000FA5 59                      		pop	cx
 11851 00000FA6 58                      		pop	ax
 11852                                  Dptalreadyset:				; Point si at the table entry of the			
 11853 00000FA7 BE[3305]                		mov	si, tracktable	; first sector to be io'd
 11854 00000FAA D1E0                    		shl	ax, 1
 11855 00000FAC D1E0                    		shl	ax, 1
 11856 00000FAE 01C6                    		add	si, ax
 11857                                  
 11858                                  		; WE WANT:
 11859                                  		; CX to	be the number of times we have to loop
 11860                                  		; DX to	be the number of sectors we read on each iteration
 11861                                  		
 11862 00000FB0 BA0100                  		mov	dx, 1
 11863                                  		; 12/12/2022
 11864 00000FB3 26F6452308              		test	byte [es:di+23h], 8
 11865                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11866                                  					; good_tracklayout
 11867 00000FB8 7402                    		jz	short ionextsector
 11868                                  		
 11869 00000FBA 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11870                                  ionextsector:				
 11871 00000FBC 51                      		push	cx
 11872 00000FBD 52                      		push	dx
 11873 00000FBE 46                      		inc	si
 11874 00000FBF 46                      		inc	si		; Skip over the	cylinder and head in
 11875                                  					; the track table
 11876 00000FC0 AC                      		lodsb			; Get sector ID	from track table
 11877 00000FC1 A2[3101]                		mov	[cursec], al
 11878                                  
 11879                                  		; assumptions for a fixed disk multi-track disk	i/o
 11880                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11881                                  		;     only CL is valid.
 11882                                  		; 2). Sector size should be set	to 512 bytes.
 11883                                  		; 3). Good track layout
 11884                                  		
 11885                                  		; 12/12/2022
 11886 00000FC4 26F6452301              		test	byte [es:di+23h], 1
 11887                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11888                                  					; fnon_removable ; Fixed disk?
 11889 00000FC9 7414                    		jz	short IoRemovable ; No
 11890                                  		; 12/12/2022
 11891 00000FCB F606[2705]80            		test	byte [multrk_flag], 80h
 11892                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11893                                  						; Allow multi-track operation?
 11894 00000FD0 740D                    		jz	short IoRemovable ; No,don't do that.
 11895 00000FD2 8916[2201]              		mov	[seccnt], dx
 11896 00000FD6 89D0                    		mov	ax, dx
 11897 00000FD8 E816FB                  		call	Disk
 11898 00000FDB 5A                      		pop	dx
 11899 00000FDC 59                      		pop	cx
 11900 00000FDD F8                      		clc
 11901 00000FDE C3                      		retn
 11902                                  ; ---------------------------------------------------------------------------
 11903                                  
 11904                                  IoRemovable:				
 11905 00000FDF AC                      		lodsb			; Get sector size index	from track
 11906                                  					; table	and save it
 11907 00000FE0 50                      		push	ax
 11908 00000FE1 56                      		push	si
 11909 00000FE2 1E                      		push	ds		; Save Bios_Data
 11910 00000FE3 50                      		push	ax
 11911 00000FE4 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11912                                  					; Fetch	EOT while ds-> Bios_Data
 11913 00000FE8 C536[2D01]              		lds	si, [dpt]
 11914 00000FEC 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11915 00000FEF 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11916 00000FF2 58                      		pop	ax
 11917 00000FF3 1F                      		pop	ds
 11918 00000FF4 88D0                    		mov	al, dl
 11919 00000FF6 A3[2201]                		mov	[seccnt], ax
 11920 00000FF9 E8F5FA                  		call	Disk
 11921 00000FFC 5E                      		pop	si		; Advance buffer pointer by adding
 11922                                  					; sector size
 11923 00000FFD 58                      		pop	ax
 11924                                  
 11925                                  		; 02/09/2023 (PCDOS 7.1)
 11926                                  		;call	SectorSizeIndexToSectorSize
 11927 00000FFE 88C1                    		mov	cl, al
 11928 00001000 B88000                  		mov	ax, 128
 11929 00001003 D3E0                    		shl	ax, cl
 11930                                  
 11931 00001005 01C3                    		add	bx, ax
 11932 00001007 5A                      		pop	dx
 11933 00001008 59                      		pop	cx
 11934 00001009 E2B1                    		loop	ionextsector
 11935 0000100B 803E[3006]01            		cmp	byte [media_set_for_format], 1
 11936                                  		;jz	short NoNeedDone
 11937                                  		; 12/12/2022
 11938 00001010 7404                    		je	short NoNeedDone2
 11939 00001012 E867FA                  		call	done		; set time of last access, and reset
 11940                                  					; entries in Dpt.
 11941                                  NoNeedDone:
 11942 00001015 F8                      		clc
 11943                                  NoNeedDone2:
 11944 00001016 C3                      		retn
 11945                                  
 11946                                  ; =============== S U B	R O U T	I N E =======================================
 11947                                  
 11948                                  ; ---------------------------------------------------------------------------
 11949                                  ;
 11950                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11951                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11952                                  ; are permissible.
 11953                                  ;
 11954                                  ; On Input   AX contains sector size in bytes
 11955                                  ; On Output  AL Contains index
 11956                                  ; All other registers preserved
 11957                                  ;
 11958                                  ; ---------------------------------------------------------------------------
 11959                                  
 11960                                  ; 02/09/2023
 11961                                  ;SectSizeToSectIndex:
 11962                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11963                                  ;					; examine upper	byte only
 11964                                  ;		ja	short OneK
 11965                                  ;		mov	al, ah		; value	in AH is the index!
 11966                                  ;		retn
 11967                                  
 11968                                  ; ---------------------------------------------------------------------------
 11969                                  ;
 11970                                  ;OneK:
 11971                                  ;		mov	al, 3
 11972                                  ;		retn
 11973                                  
 11974                                  ; =============== S U B	R O U T	I N E =======================================
 11975                                  
 11976                                  ; 02/09/2023
 11977                                  ;SectorSizeIndexToSectorSize:
 11978                                  ;		mov	cl, al
 11979                                  ;		mov	ax, 128
 11980                                  ;		shl	ax, cl
 11981                                  ;		retn
 11982                                  
 11983                                  ; =============== S U B	R O U T	I N E =======================================
 11984                                  
 11985                                  ; 16/10/2022
 11986                                  
 11987                                  ; ---------------------------------------------------------------------------
 11988                                  ;
 11989                                  ; SetDASD
 11990                                  ;
 11991                                  ; Set up the rom for formatting.
 11992                                  ; we have to tell the rom bios what type of disk is in the drive.
 11993                                  ;
 11994                                  ; On Input   - ES:di - Points to bds
 11995                                  ;
 11996                                  ; ---------------------------------------------------------------------------
 11997                                  
 11998                                  		; 19/10/2022
 11999                                  SetDasd:
 12000 00001017 803E[3106]01            		cmp	byte [had_format_error], 1 ;
 12001                                  					; See if we've previously set dasd type
 12002 0000101C 740C                    		jz	short DoSetDasd
 12003                                  		; 10/12/2022
 12004 0000101E 26F6452380              		test	byte [es:di+23h], 80h
 12005                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 12006                                  					; set_dasd_true
 12007 00001023 7447                    		jz	short DasdHasBeenSet
 12008                                  		; 10/12/2022
 12009 00001025 268065237F              		and	byte [es:di+23h], 7Fh
 12010                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 12011                                  					; ~set_dasd_true
 12012                                  DoSetDasd:
 12013 0000102A C606[3106]00            		mov	byte [had_format_error], 0 ; Reset it
 12014 0000102F C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 12015 00001034 B004                    		mov	al, 4
 12016                                  		; 02/09/2023
 12017 00001036 268A6522                		mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 12018 0000103A 80FC02                  		cmp	ah, 2
 12019                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12020                                  					; DEV_3INCH720KB
 12021 0000103D 7415                    		jz	short DoSet
 12022 0000103F 80FC01                  		cmp	ah, 1
 12023                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 12024                                  					; DEV_5INCH96TPI
 12025                                  		;jz	short GotBig
 12026 00001042 B001                    		mov	al, 1
 12027                                  		;jmp	short DoSet
 12028                                  		; 02/09/2023
 12029 00001044 750E                    		jnz	short DoSet
 12030                                  
 12031                                  ; ---------------------------------------------------------------------------
 12032                                  
 12033                                  GotBig:
 12034                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 12035                                  		; 02/09/2023
 12036 00001046 40                      		inc	ax  ; mov al, 2
 12037 00001047 803E[2F06]00            		cmp	byte [mediatype], 0
 12038 0000104C 7506                    		jnz	short DoSet
 12039                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 12040                                  		; 10/12/2022
 12041                                  		;inc	al  ; al = 3
 12042                                  		; 18/12/2022
 12043 0000104E 40                      		inc	ax  ; al = 3
 12044 0000104F C606[3B01]54            		mov	byte [gap_patch], 54h
 12045                                  DoSet:
 12046 00001054 1E                      		push	ds
 12047 00001055 56                      		push	si
 12048                                  
 12049                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 12050                                  		; 02/09/2023
 12051 00001056 31F6                    		xor	si, si
 12052 00001058 8EDE                    		mov	ds, si	; 0
 12053                                  
 12054 0000105A C5367800                		lds	si, [DSKADR]
 12055                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 12056                                  		;;lds	si, ds:78h
 12057                                  
 12058 0000105E C644090F                		mov	byte [si+9], 0Fh ;
 12059                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 12060 00001062 5E                      		pop	si
 12061 00001063 1F                      		pop	ds
 12062 00001064 B417                    		mov	ah, 17h
 12063 00001066 268A5504                		mov	dl, [es:di+4]
 12064 0000106A CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 12065                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 12066                                  DasdHasBeenSet:
 12067 0000106C 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 12068 00001070 8826[3701]              		mov	[formt_eot], ah
 12069 00001074 C3                      		retn
 12070                                  
 12071                                  ; =============== S U B	R O U T	I N E =======================================
 12072                                  
 12073                                  ; 16/10/2022
 12074                                  
 12075                                  ; ---------------------------------------------------------------------------
 12076                                  ;
 12077                                  ; Set Media Type for Format
 12078                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 12079                                  ; BPB area in the BDS can be handled by the rom.
 12080                                  ; On Input, ES:DI -> current BDS.
 12081                                  ; The status of the operation is returned in AL
 12082                                  ;
 12083                                  ;	- 0 - if the support is available,and the combination is valid.
 12084                                  ;	- 1 - no rom support
 12085                                  ;	- 2 - illegal combination
 12086                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 12087                                  ;
 12088                                  ; Flags also may be altered. All other registers preserved.
 12089                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 12090                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 12091                                  ; to the one returned. the original pointer to the disk base table is stored
 12092                                  ; in TempDpt, until it is restored.
 12093                                  ;
 12094                                  ; ---------------------------------------------------------------------------
 12095                                  
 12096                                  		; 19/10/2022
 12097                                  SetMediaForFormat:	
 12098 00001075 51                      		push	cx
 12099 00001076 52                      		push	dx
 12100                                  
 12101                                  		; If we have a format error, then do not change Dpt, TempDpt.
 12102                                  		; but we need to call int 13h, ah=18h again.
 12103                                  
 12104 00001077 803E[3106]01            		cmp	byte [had_format_error], 1
 12105 0000107C 7425                    		jz	short SkipSaveDskAdr
 12106 0000107E 30C0                    		xor	al, al		; If already done return 0
 12107 00001080 803E[3006]01            		cmp	byte [media_set_for_format], 1
 12108 00001085 7502                    		jnz	short DoSetMediaForFormat
 12109 00001087 EB7D                    		jmp	SetMediaRet	; Media	already	set
 12110                                  ; ---------------------------------------------------------------------------
 12111                                  
 12112                                  DoSetMediaForFormat:			
 12113 00001089 06                      		push	es
 12114 0000108A 56                      		push	si
 12115                                  		
 12116                                  		; 02/09/2023
 12117                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 12118 0000108B 31F6                    		xor	si, si ; 0
 12119 0000108D 8EC6                    		mov	es, si
 12120                                  
 12121 0000108F 26C4367800              		les	si, [es:DSKADR]
 12122                                  		;les	si, es:78h	; [es:DSKADR]
 12123                                  					; Get pointer to disk base table
 12124 00001094 8936[2D01]              		mov	[dpt], si
 12125 00001098 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12126                                  
 12127                                  		; Initialize the head settle time to 0Fh. See the offsets
 12128                                  		; given in dskprm.inc.
 12129                                  
 12130 0000109C 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12131 000010A1 5E                      		pop	si
 12132 000010A2 07                      		pop	es
 12133                                  SkipSaveDskAdr:
 12134 000010A3 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 12135 000010A7 49                      		dec	cx
 12136 000010A8 80E503                  		and	ch, 3
 12137 000010AB D0CD                    		ror	ch, 1
 12138 000010AD D0CD                    		ror	ch, 1
 12139 000010AF 86E9                    		xchg	ch, cl
 12140 000010B1 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 12141 000010B5 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12142 000010B9 06                      		push	es
 12143 000010BA 1E                      		push	ds
 12144 000010BB 56                      		push	si
 12145 000010BC 57                      		push	di
 12146 000010BD B418                    		mov	ah, 18h
 12147 000010BF CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 12148                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 12149 000010C1 7231                    		jb	short FormaStatErr
 12150 000010C3 803E[3106]01            		cmp	byte [had_format_error], 1
 12151 000010C8 7423                    		jz	short skip_disk_base_setting
 12152 000010CA 06                      		push	es		; Save segment returned	by the rom
 12153                                  
 12154                                  		; 02/09/2023
 12155                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 12156 000010CB 31F6                    		xor	si, si
 12157 000010CD 8EC6                    		mov	es, si ; 0
 12158 000010CF 06                      		push	es ; * ; 02/09/2023
 12159                                  
 12160 000010D0 26C4367800              		les	si, [es:DSKADR]
 12161                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 12162                                  					; Get current disk base	table
 12163 000010D5 8936[3206]              		mov	[tempdpt], si
 12164 000010D9 8C06[3406]              		mov	[tempdpt+2], es ; Save it
 12165                                  
 12166                                  		; 02/09/2023
 12167                                  		;;mov	es, [zeroseg]
 12168                                  		;xor	si, si ; 0
 12169                                  		;mov	es, si
 12170 000010DD 07                      		pop	es ; * ; 02/09/2023
 12171                                  
 12172                                  		;mov	es:78h,	di
 12173 000010DE 26893E7800              		mov	[es:DSKADR], di
 12174                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 12175 000010E3 268F067A00              		pop	word [es:DSKADR+2]
 12176 000010E8 C606[3006]01            		mov	byte [media_set_for_format], 1
 12177                                  skip_disk_base_setting:
 12178 000010ED 30C0                    		xor	al, al		; Legal	combination + rom support code
 12179                                  		;mov	ds:had_format_error, al	; Reset	the flag
 12180 000010EF A2[3106]                		mov	[had_format_error], al
 12181 000010F2 EB0E                    		jmp	short PopStatRet
 12182                                  ; ---------------------------------------------------------------------------
 12183                                  
 12184                                  FormaStatErr:
 12185                                  		; 10/12/2022
 12186 000010F4 B003                    		mov	al, 3
 12187                                  				
 12188 000010F6 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 12189                                  					; Illegal combination =	0Ch
 12190 000010F9 7406                    		jz	short FormatStatIllegalComb
 12191 000010FB 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 12192 000010FE 7402                    		jz	short FormatStatTimeOut
 12193                                  		; 10/12/2022
 12194                                  		;dec	al
 12195                                  		; 18/12/2022
 12196 00001100 48                      		dec	ax
 12197                                  		; al = 2
 12198                                  		;mov	al, 1		; Function not supported.
 12199                                  		;jmp	short PopStatRet
 12200                                  ; ---------------------------------------------------------------------------
 12201                                  
 12202                                  FormatStatIllegalComb:
 12203                                  		; 10/12/2022
 12204                                  		;dec	al	; 3 -> 2 or 2 -> 1
 12205                                  		; 18/12/2022
 12206 00001101 48                      		dec	ax
 12207                                  		; al = 2				
 12208                                  		;mov	al, 2		; Function supported, but
 12209                                  					; Illegal sect/trk,trk combination.
 12210                                  		; 10/12/2022
 12211                                  		;jmp	short PopStatRet
 12212                                  ; ---------------------------------------------------------------------------
 12213                                  
 12214                                  FormatStatTimeOut:
 12215                                  		; 10/12/2022
 12216                                  		; al = 3
 12217                                  		;mov	al, 3		; Function supported, but
 12218                                  					; Media	not present.
 12219                                  PopStatRet:
 12220 00001102 5F                      		pop	di
 12221 00001103 5E                      		pop	si
 12222 00001104 1F                      		pop	ds
 12223 00001105 07                      		pop	es
 12224                                  SetMediaRet:
 12225 00001106 5A                      		pop	dx
 12226 00001107 59                      		pop	cx
 12227 00001108 C3                      		retn
 12228                                  
 12229                                  ; =============== S U B	R O U T	I N E =======================================
 12230                                  
 12231                                  ; 16/10/2022
 12232                                  
 12233                                  ; ---------------------------------------------------------------------------
 12234                                  ;
 12235                                  ; RESET THE DRIVE
 12236                                  ;
 12237                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 12238                                  ; slow head settle time for the next operation. this is because the reset
 12239                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 12240                                  ; time around - there is a problem with 3.5" drives in that the head does
 12241                                  ; not settle down in time,even for read operations!!
 12242                                  ;
 12243                                  ; ---------------------------------------------------------------------------
 12244                                  
 12245                                  ResetDisk:
 12246 00001109 50                      		push	ax
 12247                                  
 12248                                  		; 02/09/2023
 12249 0000110A B80100                  		mov	ax, 1 ; PCDOS 7.1
 12250 0000110D 3806[3006]              		cmp	[media_set_for_format], al ; 1
 12251                                  		;cmp	byte [media_set_for_format], 1
 12252                                  					; Reset while formatting?
 12253 00001111 7503                    		jnz	short ResetDisk_cont
 12254                                  					; Then verify operation in "fmt & vrfy"
 12255                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 12256 00001113 A2[3106]                		mov	[had_format_error], al ; 1
 12257                                  ResetDisk_cont:
 12258                                  		; 02/09/2023 (ah=0)
 12259                                  		;xor	ah, ah		; So signals that we had a format error
 12260 00001116 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 12261                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 12262 00001118 C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 12263                                  					; Zap up the speed
 12264 0000111D 58                      		pop	ax
 12265 0000111E C3                      		retn
 12266                                  
 12267                                  ; =============== S U B	R O U T	I N E =======================================
 12268                                  
 12269                                  ; 16/10/2022
 12270                                  
 12271                                  ; ---------------------------------------------------------------------------
 12272                                  ;
 12273                                  ; This routine sets up the drive parameter table with the values needed for
 12274                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 12275                                  ;
 12276                                  ; on entry  -	ES:DI - points to bds for the drive
 12277                                  ;		Xfer_Seg:BX - points to trkbuf
 12278                                  ;		AL    - number of sectors
 12279                                  ;		AH    - int 13 function code
 12280                                  ;		CL    - sector number for verify
 12281                                  ;		DS    - Bios_Data
 12282                                  ;
 12283                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 12284                                  ;		AX and flags are the results of the int 13
 12285                                  ;
 12286                                  ; ---------------------------------------------------------------------------
 12287                                  
 12288                                  		; 19/10/2022
 12289                                  ToRom:	
 12290 0000111F 53                      		push	bx
 12291 00001120 56                      		push	si
 12292                                  
 12293                                  		; Compaq bug fix - check whether we are using new ROM
 12294                                  		; functionality to set up format, not merely if it exists.
 12295                                  		; This was formerly a check against [new_rom]
 12296                                  
 12297 00001121 F606[3006]01            		test	byte [media_set_for_format], 1
 12298 00001126 7536                    		jnz	short GotValidDpt
 12299 00001128 50                      		push	ax
 12300 00001129 06                      		push	es		; Save bds segment
 12301 0000112A 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12302                                  					; ffSmall ; is it a 3.5" drive?
 12303 0000112F 9C                      		pushf			; (Save	the cmp	result)
 12304 00001130 8E06[1A00]              		mov	es, [zeroseg]
 12305                                  		;les	si, es:78h	; Get pointer to disk base table
 12306 00001134 26C4367800              		les	si, [es:DSKADR]
 12307                                  		;mov	word ptr ds:dpt, si
 12308                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 12309 00001139 8936[2D01]              		mov	[dpt], si
 12310 0000113D 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12311                                  		
 12312 00001141 A0[3701]                		mov	al, [formt_eot]
 12313 00001144 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 12314 00001148 A0[3B01]                		mov	al, [gap_patch]
 12315 0000114B 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 12316                                  					; Important for	format
 12317 0000114F 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12318                                  					; Assume we are	doing a	seek operation
 12319                                  					; Setup	motor start correctly for 3.5" drives
 12320 00001154 9D                      		popf			; Get result of	earlier	cmp
 12321 00001155 7505                    		jnz	short MotorStrtOK
 12322 00001157 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 12323                                  MotorStrtOK:				
 12324 0000115C 07                      		pop	es		; Restore bds segment
 12325 0000115D 58                      		pop	ax
 12326                                  GotValidDpt:				
 12327 0000115E 8B16[3901]              		mov	dx, [trknum]	; Set track number
 12328 00001162 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 12329 00001164 268A5504                		mov	dl, [es:di+4]	; Set drive number
 12330 00001168 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 12331 0000116C 06                      		push	es		; Save bds segment
 12332 0000116D 8E06[2F05]              		mov	es, [xfer_seg]
 12333 00001171 CD13                    		int	13h		; DISK -
 12334 00001173 07                      		pop	es		; Restore bds segment
 12335 00001174 5E                      		pop	si
 12336 00001175 5B                      		pop	bx
 12337 00001176 C3                      		retn
 12338                                  
 12339                                  ; ---------------------------------------------------------------------------
 12340                                  
 12341                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12342                                  
 12343                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 12344                                  
 12345                                  ; ==========================================================================
 12346                                  ;
 12347                                  ; get the owner of the physical drive represented by the logical drive in al.
 12348                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 12349                                  ; if this is not the case, the system may hang, just following the linked list.
 12350                                  ;
 12351                                  ; ==========================================================================
 12352                                  
 12353                                  		; 19/10/2022
 12354                                  ioctl_getown:
 12355 00001177 E8F6F3                  		call	SetDrive
 12356 0000117A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12357                                  					; Get physical drive number
 12358 0000117E C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12359                                  ownloop:				
 12360 00001182 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12361 00001186 7507                    		jnz	short getnextBDS
 12362                                  		; 10/12/2022
 12363 00001188 26F6452320              		test	byte [es:di+23h], 20h
 12364                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12365                                  					; fi_own_physical
 12366 0000118D 7514                    		jnz	short exitown
 12367                                  getnextBDS:				
 12368 0000118F 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12369 00001192 EBEE                    		jmp	short ownloop
 12370                                  ; ---------------------------------------------------------------------------
 12371                                  
 12372                                  ; ==========================================================================
 12373                                  ;
 12374                                  ; set the ownership of the physical drive represented by the logical drive
 12375                                  ; in al to al.
 12376                                  ;
 12377                                  ; ==========================================================================
 12378                                  
 12379                                  		; 19/10/2022
 12380                                  ioctl_setown:
 12381 00001194 E8D9F3                  		call	SetDrive
 12382 00001197 C606[7A00]01            		mov	byte [fsetowner], 1
 12383                                  					; set flag for CheckSingle to look at.
 12384 0000119C E839F7                  		call	checksingle
 12385                                  		; 02/09/2023
 12386 0000119F FE0E[7A00]              		dec	byte [fsetowner] ; 0
 12387                                  		;mov	byte [fsetowner], 0
 12388                                  					; set ownership	of drive reset flag
 12389                                  		; Fall into ExitOwn
 12390                                  
 12391                                  ; ==========================================================================
 12392                                  ;
 12393                                  ; if there is only one logical drive assigned to this physical drive, return
 12394                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12395                                  ;
 12396                                  ; ==========================================================================
 12397                                  
 12398                                  exitown:				
 12399 000011A3 30C9                    		xor	cl, cl
 12400                                  		; 12/12/2022
 12401 000011A5 26F6452310              		test	byte [es:di+23h], 10h
 12402                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12403                                  					; fi_am_mult
 12404 000011AA 7406                    		jz	short exitnomult
 12405 000011AC 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12406                                  					; Get logical drive number
 12407                                  					; Get it 1-based
 12408 000011B0 FEC1                    		inc	cl
 12409                                  exitnomult:				
 12410 000011B2 C51E[1200]              		lds	bx, [ptrsav]
 12411 000011B6 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12412                                  					; Exit normal termination
 12413                                  		; 12/12/2022
 12414                                  		; cf=0
 12415                                  		;clc
 12416 000011B9 C3                      		retn
 12417                                  
 12418                                  ; =============== S U B	R O U T	I N E =======================================
 12419                                  
 12420                                  ; 16/10/2022
 12421                                  
 12422                                  ; ---------------------------------------------------------------------------
 12423                                  ;
 12424                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12425                                  ; only if the first byte of TempDpt is not -1.
 12426                                  ; all registers (including flags) are preserved.
 12427                                  ;
 12428                                  ; ---------------------------------------------------------------------------
 12429                                  
 12430                                  		; 19/10/2022
 12431                                  RestoreOldDpt:
 12432                                  		; if we have already restored the disk base table earlier,
 12433                                  		; do not do it again.
 12434                                  	
 12435 000011BA 50                      		push	ax
 12436 000011BB 30C0                    		xor	al, al
 12437 000011BD A2[3106]                		mov	[had_format_error], al	; Reset flag and 
 12438 000011C0 8606[3006]              		xchg	al, [media_set_for_format] ; get current flag setting
 12439 000011C4 08C0                    		or	al, al
 12440 000011C6 741E                    		jz	short DontRestore
 12441 000011C8 56                      		push	si
 12442 000011C9 1E                      		push	ds
 12443 000011CA 06                      		push	es
 12444 000011CB C536[3206]              		lds	si, [tempdpt]
 12445                                  
 12446                                  		; 17/10/2022
 12447 000011CF 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 12448                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12449 000011D4 268E06[1A00]            		mov	es, [es:zeroseg]
 12450                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 12451                                  
 12452                                  		;mov	es:78h,	si	; [es:DSKADR]
 12453 000011D9 2689367800              		mov	[es:DSKADR], si
 12454                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12455 000011DE 268C1E7A00              		mov	[es:DSKADR+2], ds
 12456 000011E3 07                      		pop	es
 12457 000011E4 1F                      		pop	ds
 12458 000011E5 5E                      		pop	si
 12459                                  DontRestore:				
 12460 000011E6 58                      		pop	ax
 12461                                  		; 12/12/2022
 12462                                  		; cf=0
 12463                                  		;clc			;  Clear carry
 12464 000011E7 C3                      		retn
 12465                                  
 12466                                  ; ---------------------------------------------------------------------------
 12467                                  
 12468                                  ; 16/10/2022
 12469                                  
 12470                                  ; ==========================================================================
 12471                                  ;	get media id
 12472                                  ; ==========================================================================
 12473                                  ;
 12474                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12475                                  ;	    the media that has the extended boot record.
 12476                                  ;	    for the conventional media,this routine will return "unknown
 12477                                  ;	    media type" error to dos.
 12478                                  ;
 12479                                  ; INPUT :   ES:di -> bds table for this drive.
 12480                                  ;
 12481                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12482                                  ;	    if carry set,then al contains the device driver error number
 12483                                  ;	    that will be returned to dos.
 12484                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12485                                  ;
 12486                                  ; SUBROUTINES TO BE CALLED:
 12487                                  ;	BootIo:NEAR
 12488                                  ;
 12489                                  ; LOGIC:
 12490                                  ;	to recognize the extended boot record,this logic will actually
 12491                                  ;	access the boot sector even if it is a hard disk.
 12492                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12493                                  ;	field of bpb and the extended boot signature.
 12494                                  ;
 12495                                  ; {
 12496                                  ;	get logical drive number from bds table;
 12497                                  ;	rFlag = read operation;
 12498                                  ;	BootIo;		 /*get the media boot record into the buffer
 12499                                  ;	if (no error) then
 12500                                  ;	     if (extended boot record) then
 12501                                  ;		{ set volume label,volume serial number and system id
 12502                                  ;		  of the request packet to those of the boot record;
 12503                                  ;		};
 12504                                  ;	     else		  /*not an extended bpb */
 12505                                  ;		{ set register al to "unknown media.." error code;
 12506                                  ;		  set carry bit;
 12507                                  ;		};
 12508                                  ;	else
 12509                                  ;	     ret;	/*already error code is set in the register al
 12510                                  ;
 12511                                  ; ==========================================================================
 12512                                  
 12513                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12514                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12515                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12516                                  
 12517                                  		; 19/10/2022
 12518                                  GetMediaId:
 12519 000011E8 E89F00                  		call	ChangeLineChk
 12520 000011EB 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12521 000011EF C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12522 000011F4 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12523 000011F7 7224                    		jb	short IOCtl_If1
 12524                                  					; Valid? (0F0h-0FFh?)
 12525 000011F9 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12526                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12527 000011FE 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12528                                  		; 10/12/2022
 12529 00001200 BE[7401]                		mov	si, disksector+26h
 12530 00001203 803C29                  		cmp	byte [si], 29h
 12531                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12532                                  					; EXT_BOOT_SIGNATURE
 12533 00001206 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12534 00001208 C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12535 0000120C 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12536                                  		; 10/12/2022
 12537 00001210 46                      		inc	si
 12538                                  		; si = disksector+27h 
 12539                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12540 00001211 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12541 00001214 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12542                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12543                                  					; +size_of_EXT_SYSTEM_ID
 12544 00001217 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12545                                  	
 12546                                  		; 10/12/2022
 12547                                  		; cf = 0
 12548                                  		;clc
 12549                                  
 12550 00001219 C3                      		retn
 12551                                  ; ---------------------------------------------------------------------------
 12552                                  
 12553                                  IOCtl_If2:				
 12554 0000121A B007                    		mov	al, 7		; error_unknown_media
 12555 0000121C F9                      		stc
 12556                                  IOCtl_If1:				
 12557 0000121D C3                      		retn
 12558                                  ; ---------------------------------------------------------------------------
 12559                                  
 12560                                  ; 16/10/2022
 12561                                  
 12562                                  ; ==========================================================================
 12563                                  ;  set media id
 12564                                  ; ==========================================================================
 12565                                  
 12566                                  ; function: set the volume label, the system id and the serial number of
 12567                                  ;	    the media that has the extended boot record.
 12568                                  ;	    for the conventional media, this routine will return "unknown
 12569                                  ;	    media.." error to dos.
 12570                                  ;	    this routine will also set the corresponding informations in
 12571                                  ;	    the bds table.
 12572                                  ;
 12573                                  ; input :   ES:di -> bds table for this drive.
 12574                                  ;
 12575                                  ; output:   the extended boot record in the media will be set according to
 12576                                  ;	    the request packet.
 12577                                  ;	    if carry set, then al contains the device driver error number
 12578                                  ;	    that will be returned to dos.
 12579                                  ;
 12580                                  ; subroutines to be called:
 12581                                  ;	BootIo:NEAR
 12582                                  ;
 12583                                  ; logic:
 12584                                  ;
 12585                                  ; {
 12586                                  ;	get drive_number from bds;
 12587                                  ;	rFlag = "read operation";
 12588                                  ;	BootIo;
 12589                                  ;	if (no error) then
 12590                                  ;	     if (extended boot record) then
 12591                                  ;		{ set volume label,volume serial number and system id
 12592                                  ;		  of the boot record to those of the request packet;
 12593                                  ;		  rFlag = "write operation";
 12594                                  ;		  get drive number from bds;
 12595                                  ;		  BootIo;	  /*write it back*/
 12596                                  ;		};
 12597                                  ;	     else		  /*not an extended bpb */
 12598                                  ;		{ set register al to "unknown media.." error code;
 12599                                  ;		  set carry bit;
 12600                                  ;		  ret;	 /*return back to caller */
 12601                                  ;		};
 12602                                  ;	else
 12603                                  ;	     ret;		 /*already error code is set */
 12604                                  ;
 12605                                  ; ==========================================================================
 12606                                  
 12607                                  		; 19/10/2022
 12608                                  SetMediaId:
 12609 0000121E E86900                  		call	ChangeLineChk
 12610 00001221 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12611                                  					; Logical drive	number
 12612 00001225 88C2                    		mov	dl, al
 12613 00001227 C606[2001]02            		mov	byte [rflag], 2	; romread
 12614 0000122C 52                      		push	dx
 12615 0000122D E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12616 00001230 5A                      		pop	dx
 12617 00001231 723E                    		jb	short IOCtl_If6
 12618                                  					; Valid? (0F0h-0FFh?)
 12619 00001233 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12620                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12621 00001238 7234                    		jb	short IOCtl_If7	; Brif not
 12622 0000123A 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12623                                  					; EXT_BOOT_SIGNATURE
 12624 0000123F 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12625 00001241 06                      		push	es		; Save BDS pointer
 12626 00001242 57                      		push	di
 12627 00001243 1E                      		push	ds		; Point	ES To boot record
 12628 00001244 07                      		pop	es
 12629 00001245 BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12630 00001248 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12631 0000124C C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12632 0000124F 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12633 00001252 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12634                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12635                                  					; +size_of_EXT_SYSTEM_ID
 12636 00001255 F3A4                    		rep movsb
 12637 00001257 06                      		push	es		; point	ds back	to Bios_Data
 12638 00001258 1F                      		pop	ds
 12639 00001259 5F                      		pop	di		; restore bds pointer
 12640 0000125A 07                      		pop	es
 12641 0000125B E876F5                  		call	mov_media_ids	; update the bds media id info.
 12642 0000125E 88D0                    		mov	al, dl
 12643 00001260 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12644 00001265 E80A00                  		call	BootIo		; write	it back.
 12645 00001268 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12646                                  					; make sure chk_media check the driver
 12647                                  					; return with error code from BootIo
 12648 0000126D C3                      		retn
 12649                                  ; ---------------------------------------------------------------------------
 12650                                  
 12651                                  IOCtl_If7:				
 12652 0000126E B007                    		mov	al, 7		; error_unknown_media
 12653 00001270 F9                      		stc
 12654                                  IOCtl_If6:				
 12655 00001271 C3                      		retn
 12656                                  
 12657                                  ; =============== S U B	R O U T	I N E =======================================
 12658                                  
 12659                                  ; 16/10/2022
 12660                                  
 12661                                  ; ---------------------------------------------------------------------------
 12662                                  ;	BootIo
 12663                                  ; ---------------------------------------------------------------------------
 12664                                  ;
 12665                                  ; function: read/write the boot record into boot sector.
 12666                                  ;
 12667                                  ; input :
 12668                                  ;	    al=logical drive number
 12669                                  ;	    rFlag = operation (read/write)
 12670                                  ;
 12671                                  ; output:   for read operation,the boot record of the drive specified in bds
 12672                                  ;	    be read into the DiskSector buffer.
 12673                                  ;	    for write operation,the DiskSector buffer image will be written
 12674                                  ;	    to the drive specified in bds.
 12675                                  ;	    if carry set,then al contains the device driver error number
 12676                                  ;	    that will be returned to dos.
 12677                                  ;	    AX,CX,DX register destroyed.
 12678                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12679                                  ;
 12680                                  ; subroutines to be called:
 12681                                  ;	DiskIO:NEAR
 12682                                  ;
 12683                                  ; logic:
 12684                                  ;
 12685                                  ; {
 12686                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12687                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12688                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12689                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12690                                  ; }
 12691                                  ; ==========================================================================
 12692                                  
 12693                                  		; 19/10/2022
 12694                                  BootIo:	
 12695 00001272 06                      		push	es
 12696 00001273 57                      		push	di
 12697 00001274 53                      		push	bx
 12698 00001275 1E                      		push	ds
 12699 00001276 07                      		pop	es		; Point ES: to Bios_Data
 12700                                  
 12701                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12702                                  		; need to be initialized for this subroutine out here are
 12703                                  		; - Transfer address to Bios_Data:DiskSector
 12704                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12705                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12706                                  		; - Number of sectors <-- 1
 12707                                  
 12708 00001277 BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12709 0000127A 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12710 0000127C 8916[2305]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12711 00001280 B90100                  		mov	cx, 1
 12712 00001283 E8E0F6                  		call	diskio
 12713 00001286 5B                      		pop	bx
 12714 00001287 5F                      		pop	di
 12715 00001288 07                      		pop	es
 12716 00001289 C3                      		retn
 12717                                  
 12718                                  ; =============== S U B	R O U T	I N E =======================================
 12719                                  
 12720                                  ; 16/10/2022
 12721                                  
 12722                                  ; ---------------------------------------------------------------------------
 12723                                  ;	ChangeLineChk
 12724                                  ; ---------------------------------------------------------------------------
 12725                                  ;
 12726                                  ; when the user calls get/set media id call before dos establishes the media
 12727                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12728                                  ; lost.	this routine will check the change line activity and will save the
 12729                                  ; history in the flags.
 12730                                  ;
 12731                                  ; FUNCTION: check the change line error activity
 12732                                  ;
 12733                                  ; INPUT :  ES:di -> bds table.
 12734                                  ;
 12735                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12736                                  ;
 12737                                  ; SUBROUTINES TO BE CALLED:
 12738                                  ;	Set_Changed_DL
 12739                                  ;
 12740                                  ; ---------------------------------------------------------------------------
 12741                                  
 12742                                  ChangeLineChk:	
 12743 0000128A 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12744 0000128E 08D2                    		or	dl, dl		; Fixed	disk?
 12745 00001290 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12746                                  		; 12/12/2022
 12747 00001292 26F6452304              		test	byte [es:di+23h], 4
 12748                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12749                                  					; return_fake_bpb
 12750 00001297 751A                    		jnz	short ChangeLnChkRet
 12751 00001299 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12752 0000129E 7513                    		jnz	short ChangeLnChkRet
 12753 000012A0 E8EB06                  		call	haschange	; This drive support change line?
 12754 000012A3 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12755                                  
 12756                                  		; Execute the rom disk interrupt to check changeline activity.
 12757                                  
 12758 000012A5 B416                    		mov	ah, 16h
 12759 000012A7 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12760                                  					; DL = drive to	check
 12761                                  					; Return: AH = disk change status
 12762 000012A9 7308                    		jnb	short ChangeLnChkRet
 12763 000012AB 53                      		push	bx
 12764 000012AC BB4000                  		mov	bx, 40h		; fchanged
 12765                                  					; Update flag in BDS for this
 12766                                  					; physical drive
 12767 000012AF E8B506                  		call	set_changed_dl
 12768 000012B2 5B                      		pop	bx
 12769                                  ChangeLnChkRet:				
 12770 000012B3 C3                      		retn
 12771                                  
 12772                                  ; ---------------------------------------------------------------------------
 12773                                  
 12774                                  ; 16/10/2022
 12775                                  
 12776                                  ; ==========================================================================
 12777                                  ;	GetAccessFlag
 12778                                  ; ==========================================================================
 12779                                  ;
 12780                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12781                                  ;
 12782                                  ; INPUT :
 12783                                  ;	    ES:di -> bds table
 12784                                  ;
 12785                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12786                                  ;						 = 1 if disk i/o allowed.
 12787                                  ; ==========================================================================
 12788                                  
 12789                                  		; 19/10/2022
 12790                                  GetAccessFlag:				
 12791 000012B4 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12792 000012B8 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12793                                  		;mov	al, 0		; Assume result	is unformatted
 12794                                  		; 10/12/2022
 12795 000012BB 28C0                    		sub	al, al
 12796                                  		; 10/12/2022
 12797 000012BD 26F6452402              		test	byte [es:di+36], 02h
 12798                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12799                                  					; unformatted_media
 12800 000012C2 7502                    		jnz	short GafDone	; Done if unformatted
 12801 000012C4 FEC0                    		inc	al		; Return true for formatted
 12802                                  
 12803                                  GafDone:				
 12804 000012C6 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12805 000012C9 C3                      		retn
 12806                                  ; ---------------------------------------------------------------------------
 12807                                  
 12808                                  ; 16/10/2022
 12809                                  
 12810                                  ; ==========================================================================
 12811                                  ;	SetAccessFlag
 12812                                  ; ==========================================================================
 12813                                  ;
 12814                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12815                                  ;
 12816                                  ; input :
 12817                                  ;	    ES:di -> bds table
 12818                                  ;
 12819                                  ; output:   unformtted_media bit modified according to the user request
 12820                                  ; ==========================================================================
 12821                                  
 12822                                  		; 19/10/2022
 12823                                  SetAccessFlag:				
 12824 000012CA C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12825 000012CE C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12826                                  		; 10/12/2022
 12827 000012D1 26806524FD              		and	byte [es:di+36], 0FDh
 12828                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12829                                  					; ~unformatted_media
 12830 000012D6 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12831 000012DA 7505                    		jnz	short saf_Done
 12832                                  		; 10/12/2022
 12833 000012DC 26804D2402              		or	byte [es:di+36], 02h
 12834                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12835                                  					; unformatted_media
 12836                                  saf_Done:				
 12837 000012E1 C3                      		retn
 12838                                  ; ---------------------------------------------------------------------------
 12839                                  
 12840                                  ; 16/10/2022
 12841                                  
 12842                                  ; ==========================================================================
 12843                                  ; Ioctl_Support_Query
 12844                                  ; ==========================================================================
 12845                                  ;
 12846                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12847                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12848                                  ; device attributes specifies if this function is supported.
 12849                                  ;
 12850                                  ; ==========================================================================
 12851                                  
 12852                                  		; 19/10/2022
 12853                                  ioctl_support_query:
 12854 000012E2 06                      		push	es
 12855 000012E3 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12856 000012E7 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12857                                  					; AL ==	Major, AH == Minor
 12858                                  
 12859                                  		; 02/09/2023 (PCDOS 7.1)
 12860                                  		;cmp	al, 48h		; IOC_NEW_DC (PCDOS 7.1)
 12861                                  		;			; new generic ioctl function (FAT32)
 12862                                  		;jz	short ioctl_support
 12863                                  
 12864 000012EB 3C08                    		cmp	al, 8		; IOC_DC
 12865                                  					; See if major code is 8
 12866 000012ED 7513                    		jnz	short nosupport
 12867                                  ioctl_support:
 12868 000012EF 0E                      		push	cs
 12869 000012F0 07                      		pop	es
 12870                                  		; 02/09/2023
 12871                                  		;mov	cx, 14          ; (PCDOS 7.1) IOC_DC_TABLE_LEN
 12872 000012F1 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12873                                  		; 10/12/2022
 12874 000012F4 BF[D50C]                		mov	di, IOC_DC_Table
 12875                                  		;mov	di, 0C60h	; IOC_DC_Table
 12876                                  					; at 2C7h:0C60h	= 70h:31D0h
 12877 000012F7 86C4                    		xchg	al, ah		; Put minor code in AL
 12878 000012F9 F2AE                    		repne scasb		; Scan for minor code in AL
 12879 000012FB 7505                    		jnz	short nosupport	; it was not found
 12880 000012FD B80001                  		mov	ax, 100h
 12881                                  		; 10/12/2022
 12882                                  		; (jump to ioctlsupexit is not required)
 12883                                  		;jmp	short $+2	; ioctlsupexit
 12884                                  					; Signal ioctl is supported
 12885                                  		;;jmp	short ioctlsupexit
 12886                                  ; ---------------------------------------------------------------------------
 12887                                  ioctlsupexit:
 12888 00001300 07                      		pop	es
 12889                                  		; 10/12/2022
 12890                                  		; cf = 0
 12891                                  		;clc
 12892 00001301 C3                      		retn
 12893                                  ; ---------------------------------------------------------------------------
 12894                                  nosupport:
 12895 00001302 07                      		pop	es
 12896 00001303 E9D3ED                  		jmp	bc_cmderr
 12897                                  ; ---------------------------------------------------------------------------
 12898                                  
 12899                                  ; 16/10/2022
 12900                                  
 12901                                  ; ==========================================================================
 12902                                  ;	GetMediaSenseStatus
 12903                                  ; ==========================================================================
 12904                                  ;
 12905                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12906                                  ;	    diskette drive and whether the media is the default type
 12907                                  ;	    for that drive. (default type means the max size for that
 12908                                  ;	    drive)
 12909                                  ;
 12910                                  ; INPUT :   ES:DI -> BDS table
 12911                                  ; OUTPUT:   If carry clear
 12912                                  ;	    DS:BX -> Updated IOCtlPacket
 12913                                  ;
 12914                                  ;			 Special Function at offset 0:
 12915                                  ;				0	- Media detected is not default type
 12916                                  ;				1	- Media detected is default type
 12917                                  ;
 12918                                  ;			 Device Type at offset 1:
 12919                                  ;				2       - 720K 3.5" 80 tracks
 12920                                  ;				7	- 1.44M 3.5" 80 tracks
 12921                                  ;				9	- 2.88M 3.5" 80 tracks
 12922                                  ;
 12923                                  ; Error Codes returned in AX if carry set:
 12924                                  ;
 12925                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12926                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12927                                  ;				  the media is really unkown, any error
 12928                                  ;				  other than "media not present"
 12929                                  ; 
 12930                                  ; ==========================================================================
 12931                                  
 12932                                  		; 19/10/2022
 12933                                  SenseMediaType:				
 12934 00001306 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12935 0000130A C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12936                                  		; 10/10/2022
 12937                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12938 0000130D 31D2                    		xor	dx, dx
 12939 0000130F 8917                    		mov	[bx], dx ; 0
 12940                                  		;
 12941 00001311 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12942                                  					; Get int 13h drive number from	BDS
 12943                                  		; 10/12/2022
 12944                                  		;xor	dh, dh		; DX = physical	drive number
 12945 00001315 B420                    		mov	ah, 20h		; Get Media Type function
 12946                                  					; If no	carry media type in AL
 12947 00001317 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12948 00001319 7216                    		jb	short MediaSenseEr ; error code	in AH
 12949 0000131B FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12950                                  DetermineMediaType:			
 12951 0000131D FEC8                    		dec	al
 12952 0000131F 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12953 00001321 740A                    		jz	short GotMediaType
 12954 00001323 0404                    		add	al, 4
 12955 00001325 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12956 00001327 7404                    		jz	short GotMediaType
 12957 00001329 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12958 0000132B 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12959                                  GotMediaType:				
 12960 0000132D 884701                  		mov	[bx+1],	al	; Save the return value
 12961                                  		; 10/12/2022
 12962                                  		; cf = 0
 12963                                  		;clc			; Signal success
 12964 00001330 C3                      		retn
 12965                                  ; ---------------------------------------------------------------------------
 12966                                  
 12967                                  MediaSenseEr:				
 12968 00001331 80FC32                  		cmp	ah, 32h		; See if not default media error
 12969 00001334 74E7                    		jz	short DetermineMediaType ; Not really an error
 12970 00001336 B002                    		mov	al, 2		; Now assume drive not ready
 12971 00001338 80FC31                  		cmp	ah, 31h		; See if media was present
 12972 0000133B 7402                    		jz	short SenseErrExit ; Return drive not ready
 12973                                  UnknownMediaType:			
 12974 0000133D B007                    		mov	al, 7		; Just don't know the media type
 12975                                  SenseErrExit:				
 12976 0000133F B481                    		mov	ah, 81h		; Signal error return
 12977 00001341 F9                      		stc
 12978 00001342 C3                      		retn
 12979                                  
 12980                                  ; ---------------------------------------------------------------------------
 12981                                  		; 10/12/2022
 12982                                  		;db    0
 12983                                  ; ---------------------------------------------------------------------------
 12984                                  
 12985                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12986                                  
 12987                                  ;-----------------------------------------------------------------------------
 12988                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12989                                  ;-----------------------------------------------------------------------------
 12990                                  ; 16/03/2019 - Retro DOS v4.0
 12991                                  
 12992                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12993                                  ;	after booting. this allows testing and implementation of custom int_13
 12994                                  ;	handlers, without giving up ms-dos error recovery
 12995                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12996                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12997                                  ;	exit:	orig13	== address of new int_13 handler
 12998                                  ;		ds:dx	== old orig13 value
 12999                                  ;		es:bx	== old old13  value
 13000                                  ;
 13001                                  ; int 2f handler for external block drivers to communicate with the internal
 13002                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 13003                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 13004                                  ; dsk_entry, the entry point for all disk requests.
 13005                                  ;
 13006                                  ; on exit from this driver, we will return to the external driver
 13007                                  ; that issued this int 2f, and can then remove the flags from the stack.
 13008                                  ; this scheme allows us to have a small external device driver, and makes
 13009                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 13010                                  ; since we only need to make changes in one place (most of the time).
 13011                                  ;
 13012                                  ;   ax=800h - check for installed handler - reserved
 13013                                  ;   ax=801h - install the bds into the linked list
 13014                                  ;   ax=802h - dos request
 13015                                  ;   ax=803h - return bds table starting pointer in ds:di
 13016                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 13017                                  ;	    problem. bds table is going to be used to get head/sector
 13018                                  ;	    informations without calling generic ioctl get device parm call.)
 13019                                  
 13020                                  ;BIOSSEGMENT equ 70h
 13021                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 13022                                  
 13023                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 13024                                  
 13025                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 13026 00001343 80FC13                  		cmp	ah, 13h
 13027 00001346 7413                    		jz	short int2f_replace_int13
 13028 00001348 80FC08                  		cmp	ah, 8
 13029 0000134B 7431                    		jz	short mine
 13030                                  
 13031                                  ; Check for WIN386 startup and return the BIOS instance data
 13032                                  
 13033 0000134D 80FC16                  		cmp	ah, 16h		; MultWin386
 13034 00001350 746C                    		jz	short win386call
 13035 00001352 80FC4A                  		cmp	ah, 4Ah		; multMULT
 13036 00001355 7503                    		jnz	short i2f_handler_iret
 13037 00001357 E99700                  		jmp	handle_multmult
 13038                                  ; ---------------------------------------------------------------------------
 13039                                  
 13040                                  i2f_handler_iret:			
 13041 0000135A CF                      		iret
 13042                                  ; ---------------------------------------------------------------------------
 13043                                  
 13044                                  int2f_replace_int13:
 13045 0000135B 50                      		push	ax	; free up a register for caller's ds
 13046 0000135C 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 13047                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 13048                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13049                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13050 0000135E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 13051                                  		; 19/10/2022
 13052                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 13053                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 13054                                  		;push	word ptr ds:Old13	; return them to caller
 13055                                  		;push	word ptr ds:Old13+2
 13056                                  		
 13057                                  		; 02/09/2023 (PCDOS 7.1)
 13058                                  		;push	word [Orig13]
 13059 00001363 FF36[B600]              		push	word [Orig13+2]
 13060                                  		;push	word [Old13]
 13061 00001367 FF36[0801]              		push	word [Old13+2]
 13062                                  
 13063                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 13064                                  		;mov	word ptr ds:Orig13+2, ax
 13065                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 13066                                  		;mov	word ptr ds:Old13+2, es
 13067                                  		
 13068                                  		;mov	[Orig13], dx
 13069                                  		; 02/09/2023
 13070 0000136B 8716[B400]              		xchg	dx, [Orig13]
 13071 0000136F A3[B600]                		mov	[Orig13+2], ax
 13072                                  		;mov	[Old13], bx
 13073                                  		; 02/09/2023
 13074 00001372 871E[0601]              		xchg	bx, [Old13]
 13075 00001376 8C06[0801]              		mov	[Old13+2], es
 13076                                  
 13077 0000137A 07                      		pop	es			; es:bx := old old13 vector
 13078                                  		; 02/09/2023
 13079                                  		;pop	bx
 13080 0000137B 1F                      		pop	ds			; ds:dx := old orig13 vector
 13081                                  		;pop	dx ; 02/09/2023
 13082 0000137C 58                      		pop	ax
 13083                                  i2f_iret:
 13084 0000137D CF                      		iret
 13085                                  ; ---------------------------------------------------------------------------
 13086                                  
 13087                                  mine:
 13088 0000137E 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 13089 00001380 73FB                    		jnb	short i2f_iret
 13090 00001382 08C0                    		or	al, al			; a get installed state request?
 13091 00001384 7503                    		jnz	short disp_func
 13092 00001386 B0FF                    		mov	al, 0FFh
 13093                                  		;jmp	short i2f_iret
 13094                                  		; 02/09/2023
 13095 00001388 CF                      		iret
 13096                                  ; ---------------------------------------------------------------------------
 13097                                  
 13098                                  disp_func:
 13099 00001389 3C01                    		cmp	al, 1			; request for installing bds?
 13100 0000138B 7418                    		jz	short do_subfun_01
 13101 0000138D 3C03                    		cmp	al, 3			; get bds vector?
 13102 0000138F 7423                    		jz	short do_get_bds_vector
 13103                                  
 13104                                  ; set up pointer to request packet
 13105                                  
 13106 00001391 1E                      		push	ds
 13107 00001392 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 13108                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13109                                  					; = [0070h:25A0h] = [02C7h:0030h]
 13110                                  		; 19/10/2022
 13111                                  		;mov	word ptr ds:ptrsav, bx
 13112                                  		;mov	word ptr ds:ptrsav+2, es
 13113 00001397 891E[1200]              		mov	[ptrsav], bx
 13114 0000139B 8C06[1400]              		mov	[ptrsav+2], es
 13115 0000139F 1F                      		pop	ds
 13116                                  		;jmp	far ptr	i2f_dskentry
 13117                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 13118                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1708h
 13119 000013A0 EA[1907]7000            		jmp	DOSBIOSSEG:dsk_entry ; BIOSDATA:dsk_entry
 13120                                  		;; 17/10/2022
 13121                                  		;;jmp	far DOSBIOSSEG:dsk_entry		
 13122                                  		;jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 13123                                  					; NOTE: jump to a FAR function, not an
 13124                                  					;  IRET type function. Callers of
 13125                                  					;  this int2f subfunction will have
 13126                                  					;  to be careful to do a popf
 13127                                  
 13128                                  ; ---------------------------------------------------------------------------
 13129                                  
 13130                                  do_subfun_01:
 13131 000013A5 06                      		push	es
 13132 000013A6 1E                      		push	ds
 13133 000013A7 1E                      		push	ds
 13134 000013A8 07                      		pop	es
 13135                                  		; 17/10/2022
 13136 000013A9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 13137                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13138                                  					; point	ds: -> Bios_Data
 13139 000013AE E8BC03                  		call	install_bds
 13140 000013B1 1F                      		pop	ds
 13141 000013B2 07                      		pop	es
 13142                                  		;jmp	short i2f_iret
 13143                                  		; 02/09/2023
 13144 000013B3 CF                      		iret
 13145                                  ; ---------------------------------------------------------------------------
 13146                                  
 13147                                  do_get_bds_vector:
 13148                                  		; 17/10/2022
 13149 000013B4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 13150                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13151 000013B9 C53E[1901]              		lds	di, [start_bds]
 13152                                  		;lds	di, ds:start_bds
 13153                                  ;ii2f_iret:	; 10/12/2022
 13154                                  		;jmp	short i2f_iret
 13155                                  		; 02/09/2023
 13156 000013BD CF                      		iret
 13157                                  ; ---------------------------------------------------------------------------
 13158                                  
 13159                                  ; 17/10/2022
 13160                                  ; 16/10/2022
 13161                                  
 13162                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 13163                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 13164                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 13165                                  
 13166                                  win386call:				
 13167 000013BE 1E                      		push	ds
 13168 000013BF 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13169                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13170                                  					; at 2C7h:30h =	70h:25A0h
 13171 000013C4 3C05                    		cmp	al, 5		; Win386_Init
 13172                                  					; is it	win386 initializing?
 13173 000013C6 7410                    		jz	short Win386Init
 13174 000013C8 3C06                    		cmp	al, 6		; Win386_Exit
 13175                                  					; is it	win386 exiting?
 13176 000013CA 7523                    		jnz	short win_iret	; if not, continue int2f chain
 13177                                  		; 12/12/2022
 13178 000013CC F6C201                  		test	dl, 1
 13179                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 13180 000013CF 751E                    		jnz	short win_iret	; if not win386, then continue
 13181                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 13182 000013D1 8026[6F08]00            		and	byte [IsWin386], 0 
 13183 000013D6 EB17                    		jmp	short win_iret
 13184                                  ; ---------------------------------------------------------------------------
 13185                                  
 13186                                  Win386Init:
 13187                                  		; 12/12/2022
 13188 000013D8 F6C201                  		test	dl, 1
 13189                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 13190 000013DB 7512                    		jnz	short win_iret	; if not win386, then continue
 13191                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 13192 000013DD 800E[6F08]01            		or	byte [IsWin386], 1
 13193                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 13194                                  		;mov	word ptr ds:SI_Next+2, es
 13195 000013E2 891E[3D08]              		mov	[SI_Next], bx
 13196 000013E6 8C06[3F08]              		mov	[SI_Next+2], es
 13197                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 13198 000013EA BB[3B08]                		mov	bx, Win386_SI	; 19/10/2022
 13199 000013ED 1E                      		push	ds
 13200 000013EE 07                      		pop	es
 13201                                  win_iret:
 13202 000013EF 1F                      		pop	ds
 13203                                  ii2f_iret:	; 10/12/2022
 13204                                  		;jmp	short i2f_iret	; return back up the chain
 13205                                  		; 02/09/2023
 13206 000013F0 CF                      		iret
 13207                                  ; ---------------------------------------------------------------------------
 13208                                  
 13209                                  handle_multmult:
 13210 000013F1 3C01                    		cmp	al, 1
 13211 000013F3 7514                    		jnz	short try_2
 13212 000013F5 1E                      		push	ds
 13213 000013F6 E84500                  		call	HMAPtr		; get offset of free HMA
 13214                                  		; 10/12/2022
 13215                                  		;xor	bx, bx
 13216                                  		;dec	bx
 13217 000013F9 BBFFFF                  		mov	bx, 0FFFFh
 13218 000013FC 8EC3                    		mov	es, bx		; seg of HMA
 13219 000013FE 89FB                    		mov	bx, di
 13220 00001400 F7D3                    		not	bx
 13221 00001402 09DB                    		or	bx, bx
 13222 00001404 7401                    		jz	short try_1
 13223 00001406 43                      		inc	bx
 13224                                  try_1:
 13225 00001407 1F                      		pop	ds
 13226                                  		;jmp	short ii2f_iret
 13227                                  		; 02/09/2023
 13228 00001408 CF                      		iret
 13229                                  ; ---------------------------------------------------------------------------
 13230                                  
 13231                                  try_2:
 13232 00001409 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 13233 0000140B 7530                    		jnz	short try_3
 13234 0000140D 1E                      		push	ds
 13235                                  		; 10/12/2022
 13236                                  		;xor	di, di
 13237                                  		;dec	di
 13238 0000140E BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 13239 00001411 8EC7                    		mov	es, di
 13240 00001413 E82800                  		call	HMAPtr		; get offset of free HMA
 13241 00001416 83FFFF                  		cmp	di, 0FFFFh
 13242 00001419 7421                    		jz	short InsuffHMA
 13243 0000141B F7DF                    		neg	di		; free space in HMA
 13244 0000141D 39FB                    		cmp	bx, di
 13245 0000141F 7605                    		jbe	short try_4
 13246                                  		; 10/12/2022
 13247                                  		;sub	di, di
 13248                                  		;dec	di
 13249 00001421 BFFFFF                  		mov	di, 0FFFFh
 13250                                  		;jmp	short InsuffHMA
 13251                                  		; 02/09/2023
 13252 00001424 1F                      		pop	ds
 13253 00001425 CF                      		iret
 13254                                  ; ---------------------------------------------------------------------------
 13255                                  
 13256                                  try_4:
 13257                                  		;mov	di, ds:FreeHMAPtr
 13258 00001426 8B3E[9608]              		mov	di, [FreeHMAPtr]
 13259 0000142A 83C30F                  		add	bx, 15
 13260                                  		;and	bx, 0FFF0h
 13261                                  		; 10/12/2022
 13262 0000142D 80E3F0                  		and	bl, 0F0h
 13263                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 13264 00001430 011E[9608]              		add	[FreeHMAPtr], bx
 13265 00001434 7506                    		jnz	short InsuffHMA
 13266 00001436 C706[9608]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 13267                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 13268                                  					; no more HMA if we have wrapped
 13269                                  InsuffHMA:
 13270 0000143C 1F                      		pop	ds
 13271                                  		; 10/12/2022
 13272                                  try_3:		
 13273                                  		;jmp	short ii2f_iret
 13274                                  		; 02/09/2023
 13275 0000143D CF                      		iret
 13276                                  ; ---------------------------------------------------------------------------
 13277                                  
 13278                                  		; 10/12/2022
 13279                                  ;try_3:
 13280                                  		;jmp	ii2f_iret
 13281                                  
 13282                                  ; =============== S U B	R O U T	I N E =======================================
 13283                                  
 13284                                  ; 16/10/2022
 13285                                  
 13286                                  ;--------------------------------------------------------------------------
 13287                                  ;
 13288                                  ; procedure : HMAPtr
 13289                                  ;
 13290                                  ;		Gets the offset of the free HMA area ( with respect to
 13291                                  ;							seg ffff )
 13292                                  ;		If DOS has not moved high, tries to move DOS high.
 13293                                  ;		In the course of doing this, it will allocate all the HMA
 13294                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 13295                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 13296                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 13297                                  ;
 13298                                  ;	RETURNS : offset of free HMA in DI
 13299                                  ;		  BIOS_DATA, seg in DS
 13300                                  ;
 13301                                  ;--------------------------------------------------------------------------
 13302                                  
 13303                                  		; 17/10/2022
 13304                                  HMAPtr:
 13305 0000143E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13306                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13307 00001443 8B3E[9608]              		mov	di, [FreeHMAPtr]
 13308                                  		;mov	di, ds:FreeHMAPtr
 13309 00001447 83FFFF                  		cmp	di, 0FFFFh
 13310 0000144A 750F                    		jnz	short HMAPtr_retn
 13311 0000144C 803E[9C08]00            		cmp	byte [SysinitPresent], 0
 13312                                  		;cmp	ds:SysinitPresent, 0
 13313 00001451 7408                    		jz	short HMAPtr_retn
 13314 00001453 FF1E[9808]              		call	far [MoveDOSIntoHMA]
 13315                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 13316 00001457 8B3E[9608]              		mov	di, [FreeHMAPtr]
 13317                                  		;mov	di, ds:FreeHMAPtr
 13318                                  HMAPtr_retn:				
 13319 0000145B C3                      		retn
 13320                                  
 13321                                  ; =============== S U B	R O U T	I N E =======================================
 13322                                  
 13323                                  ; 16/10/2022
 13324                                  
 13325                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 13326                                  ; but go ahead and update direction flag, si, & di
 13327                                  
 13328                                  move_sector:
 13329                                  
 13330                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 13331                                  ; any segment to be a fault. Theoretically, this could be handled
 13332                                  ; by the fault handler and the behavior of an 8086 could be emulated
 13333                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 13334                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 13335                                  ; also handles the fault incorrectly in their ROM BIOS for real
 13336                                  ; mode. Their fault handler was only designed to deal with one
 13337                                  ; special case which occurred in a magazine benchmark, but didn't
 13338                                  ; handle the general case worth beans.
 13339                                  ;
 13340                                  ; Simply changing this code to do a byte loop would work okay but
 13341                                  ; would involve a general case performance hit. Therefore, we'll
 13342                                  ; check for either source or destination offsets being within one
 13343                                  ; sector of the end of their segments and only in that case fall
 13344                                  ; back to a byte move.
 13345                                  
 13346 0000145C FC                      		cld
 13347 0000145D 51                      		push	cx
 13348 0000145E B90001                  		mov	cx, 256
 13349 00001461 81FE00FE                		cmp	si, 0FE00h
 13350 00001465 770A                    		ja	short movsec_bytes
 13351 00001467 81FF00FE                		cmp	di, 0FE00h
 13352 0000146B 7704                    		ja	short movsec_bytes
 13353 0000146D F3A5                    		rep movsw
 13354 0000146F 59                      		pop	cx
 13355 00001470 C3                      		retn
 13356                                  ; ---------------------------------------------------------------------------
 13357                                  
 13358                                  movsec_bytes:				
 13359 00001471 D1E1                    		shl	cx, 1
 13360 00001473 F3A4                    		rep movsb
 13361 00001475 59                      		pop	cx
 13362 00001476 C3                      		retn
 13363                                  
 13364                                  ; =============== S U B	R O U T	I N E =======================================
 13365                                  
 13366                                  ; 16/10/2022
 13367                                  
 13368                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 13369                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 13370                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 13371                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 13372                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 13373                                  ; but we break down a request when we get an ecc or dma error into several
 13374                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 13375                                  ; number of sectors on a track on the medium, and the request would fail.
 13376                                  ;
 13377                                  ; input conditions:
 13378                                  ;	all registers set up for an int 13 request.
 13379                                  ;
 13380                                  ; output:
 13381                                  ;	dh - contains starting head number for request
 13382                                  ;	cx - contains starting sector and cylinder numbers
 13383                                  ;	(the above may or may not have been changed, and are 0-based)
 13384                                  ;	all other registers preserved.
 13385                                  
 13386                                  check_wrap:	
 13387 00001477 50                      		push	ax
 13388 00001478 53                      		push	bx
 13389 00001479 06                      		push	es
 13390 0000147A 57                      		push	di
 13391 0000147B E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 13392 0000147E 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 13393                                  		; 12/12/2022
 13394 00001480 26F6452301              		test	byte [es:di+23h], 1
 13395                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13396 00001485 7457                    		jz	short no_wrap	; no wrapping for removable media
 13397 00001487 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13398 0000148B 89C8                    		mov	ax, cx
 13399 0000148D 83E03F                  		and	ax, 3Fh		; extract sector number
 13400 00001490 39D8                    		cmp	ax, bx		; are we going to wrap?
 13401 00001492 764A                    		jbe	short no_wrap
 13402 00001494 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13403                                  
 13404                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13405                                  ; last sector on that track.
 13406                                  
 13407 00001496 08E4                    		or	ah, ah
 13408 00001498 7503                    		jnz	short not_on_bound
 13409                                  		; 18/12/2022
 13410 0000149A 48                      		dec	ax ; *
 13411 0000149B 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13412                                  					; if on	boundary
 13413                                  		;dec	al ; *		; also decrement # of head wraps
 13414                                  not_on_bound:
 13415 0000149D 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13416 000014A0 08E1                    		or	cl, ah		; or in	new sector #
 13417 000014A2 30E4                    		xor	ah, ah		; ax = # of head wraps
 13418 000014A4 40                      		inc	ax
 13419 000014A5 00F0                    		add	al, dh		; add in starting head #
 13420 000014A7 80D400                  		adc	ah, 0		; catch	any carry
 13421                                  		; 02/09/2023
 13422 000014AA 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13423 000014AE 39D8                    		cmp	ax, bx
 13424                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13425                                  					; are we going to wrap around a	head?
 13426 000014B0 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13427 000014B2 52                      		push	dx		; preserve drive number and head number
 13428 000014B3 31D2                    		xor	dx, dx
 13429                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13430 000014B5 F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13431                                  
 13432                                  ; careful here! if new head # is 0, then we are on the last head.
 13433                                  
 13434 000014B7 09D2                    		or	dx, dx
 13435 000014B9 7507                    		jnz	short no_head_bound
 13436 000014BB 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13437                                  
 13438                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13439                                  
 13440 000014BD 09C0                    		or	ax, ax
 13441 000014BF 7401                    		jz	short no_head_bound
 13442 000014C1 48                      		dec	ax		; reduce number	of cylinder wraps
 13443                                  no_head_bound:				
 13444 000014C2 88D7                    		mov	bh, dl		; bh has new head number
 13445 000014C4 5A                      		pop	dx		; restore drive number and head number
 13446 000014C5 FECF                    		dec	bh		; get it 0-based
 13447 000014C7 88FE                    		mov	dh, bh		; set up new head number in dh
 13448 000014C9 88CF                    		mov	bh, cl
 13449 000014CB 80E73F                  		and	bh, 3Fh		; preserve sector number
 13450 000014CE B306                    		mov	bl, 6
 13451 000014D0 86CB                    		xchg	cl, bl
 13452 000014D2 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13453 000014D4 00C5                    		add	ch, al		; add in cylinder wrap
 13454 000014D6 10E3                    		adc	bl, ah		; add in high byte
 13455 000014D8 D2E3                    		shl	bl, cl		; move up to ms	end
 13456 000014DA 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13457 000014DC 08F9                    		or	cl, bh		; or in	sector number
 13458                                  no_wrap:				
 13459 000014DE F8                      		clc
 13460 000014DF 5F                      		pop	di
 13461 000014E0 07                      		pop	es
 13462 000014E1 5B                      		pop	bx
 13463 000014E2 58                      		pop	ax
 13464 000014E3 C3                      		retn
 13465                                  ; ---------------------------------------------------------------------------
 13466                                  
 13467                                  no_wrap_head:				
 13468 000014E4 88C6                    		mov	dh, al		; do not lose new head number
 13469 000014E6 FECE                    		dec	dh		; get it 0-based
 13470 000014E8 EBF4                    		jmp	short no_wrap
 13471                                  
 13472                                  ; =============== S U B	R O U T	I N E =======================================
 13473                                  
 13474                                  ; 16/10/2022
 13475                                  
 13476                                  ; this is a special version of the bds lookup code which is
 13477                                  ; based on physical drives rather than the usual logical drives
 13478                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13479                                  ; otherwise carry is clear
 13480                                  ;
 13481                                  ; guaranteed to trash no registers except es:di
 13482                                  
 13483                                  		; 19/10/2022
 13484                                  find_bds:	
 13485 000014EA C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13486                                  fbds_1:					
 13487 000014EE 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13488 000014F2 7409                    		jz	short fdbs_2
 13489 000014F4 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13490                                  					; go to next bds
 13491 000014F7 83FFFF                  		cmp	di, 0FFFFh
 13492 000014FA 75F2                    		jnz	short fbds_1
 13493 000014FC F9                      		stc
 13494                                  fdbs_2:					
 13495 000014FD C3                      		retn
 13496                                  
 13497                                  ; =============== S U B	R O U T	I N E =======================================
 13498                                  
 13499                                  ; 16/10/2022
 13500                                  		; 17/10/2022
 13501                                  doint:
 13502                                  		; 10/12/2022
 13503 000014FE 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13504                                  					; get physical drive number
 13505                                  		; 19/10/2022 - Temporary !
 13506                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13507                                  		
 13508 00001501 30E4                    		xor	ah, ah
 13509 00001503 08C0                    		or	al, al
 13510 00001505 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13511                                  		; 10/12/2022
 13512 00001507 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13513                                  					; get request code
 13514                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13515 0000150A FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13516                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13517 0000150D 9D                      		popf
 13518                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13519                                  		; 17/10/2022
 13520 0000150E 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13521                                  		;;call	call_orig13	; call far 70h:797h
 13522                                  					; call far KERNEL_SEGMENT:call_orig13
 13523 00001513 9C                      		pushf
 13524                                  		; 10/12/2022
 13525 00001514 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13526                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13527                                  dointdone:				
 13528 00001517 C3                      		retn
 13529                                  
 13530                                  ;----------------------------------------------------------------------------
 13531                                  
 13532                                  ; 16/10/2022
 13533                                  
 13534                                  ; this is the true int 13 handler. we parse the request to see if there is
 13535                                  ; a dma violation. if so, depending on the function, we:
 13536                                  ;   read/write break the request into three pieces and move the middle one
 13537                                  ;	       into our internal buffer.
 13538                                  ;
 13539                                  ;   format     copy the format table into the buffer
 13540                                  ;   verify     point the transfer address into the buffer
 13541                                  ;
 13542                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13543                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13544                                  ; the offending sector into the buffer below and do the i/o from there.
 13545                                  
 13546                                  ;struc INT13FRAME
 13547                                  ;.oldbp: resw
 13548                                  ;.oldax: resw 
 13549                                  ;.oldbx: resw
 13550                                  ;.oldcx: resw
 13551                                  ;.olddx: resw
 13552                                  ;.oldds: resw	; now we save caller's ds, too
 13553                                  ;.olddd: resd
 13554                                  ;.oldf:	resw
 13555                                  ;end struc
 13556                                  
 13557                                  ;----------------------------------------------------------------------------
 13558                                  
 13559                                  ;   entry conditions:
 13560                                  ;	ah = function
 13561                                  ;	al = number of sectors
 13562                                  ;	es:bx = dma address
 13563                                  ;	cx = packed track and sector
 13564                                  ;	dx = head and drive
 13565                                  ;   output conditions:
 13566                                  ;	no dma violation.
 13567                                  
 13568                                  ;	use extreme caution when working with this code. In general,
 13569                                  ;	  all registers are hot at all times.
 13570                                  ;
 13571                                  ;	question:  does this code handle cases where dma errors
 13572                                  ;	  occur during ecc retries, and where ecc errors occur during
 13573                                  ;	  dma breakdowns???? Hmmmmm.
 13574                                  
 13575                                  ;----------------------------------------------------------------------------
 13576                                  
 13577                                  ; ---------------------------------------------------------------------------
 13578                                  
 13579 00001518 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13580                                  
 13581                                  ; 17/10/2022
 13582                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13583                                  ; 09/12/2022
 13584                                  DTYPEARRAY equ dtype_array
 13585                                  
 13586                                  ; ---------------------------------------------------------------------------
 13587                                  
 13588                                  ; stick some special stuff out of mainline
 13589                                  
 13590                                  ; we know we're doing a format command. if we have changeline
 13591                                  ; support, then flag some special changed stuff and set changed
 13592                                  ; by format bit for all logical drives using this physical drive
 13593                                  
 13594                                  format_special_stuff:			
 13595 0000151C 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13596 00001521 7459                    		jz	short format_special_stuff_done ; brif not
 13597 00001523 53                      		push	bx
 13598 00001524 BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13599 00001527 E83D04                  		call	set_changed_dl	; indicate that media changed by format
 13600 0000152A 5B                      		pop	bx
 13601 0000152B EB4F                    		jmp	short format_special_stuff_done
 13602                                  ; ---------------------------------------------------------------------------
 13603                                  
 13604                                  ; 16/10/2022
 13605                                  
 13606                                  ; we know we've got ec35's on the system. Now see if we're doing
 13607                                  ; a floppy. If so, create a mask and see if this particular
 13608                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13609                                  
 13610                                  		; 19/10/2022
 13611                                  ec35_special_stuff:			
 13612 0000152D 84D2                    		test	dl, dl		; floppy or hard disk?
 13613 0000152F 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13614 00001531 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13615 00001532 51                      		push	cx
 13616 00001533 88D1                    		mov	cl, dl		; turn drive number into bit map
 13617 00001535 B001                    		mov	al, 1		; assume drive 0
 13618 00001537 D2E0                    		shl	al, cl		; shift	over correct number of times
 13619 00001539 8406[2905]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13620 0000153D 59                      		pop	cx
 13621 0000153E 58                      		pop	ax
 13622 0000153F 7442                    		jz	short ec35_special_stuff_done
 13623                                  					; done if this floppy is not an	ec35
 13624 00001541 53                      		push	bx		; free up a far	pointer	(es:bx)
 13625 00001542 06                      		push	es
 13626                                  		; 17/10/2022
 13627 00001543 2EC41E[1815]            		les	bx, [cs:DTYPEARRAY]
 13628                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13629                                  					; 0070h:3A65h =	2C7h:14F5h
 13630 00001548 00D3                    		add	bl, dl
 13631 0000154A 80D700                  		adc	bh, 0		; find entry for this drive
 13632 0000154D 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13633                                  					; (360k	disk in	360k drive,
 13634                                  					; no double-stepping, 250 kbs transfer rate)
 13635 00001551 07                      		pop	es
 13636 00001552 5B                      		pop	bx
 13637 00001553 EB2E                    		jmp	short ec35_special_stuff_done
 13638                                  ; ---------------------------------------------------------------------------
 13639                                  
 13640                                  ; 16/10/2022
 13641                                  
 13642                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13643                                  ; this function does not reset the common buses after the execution.
 13644                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13645                                  ; will issue ah=1 (read status) call to reset the buses.
 13646                                  
 13647                                  ps2_special_stuff:			
 13648 00001555 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13649                                  					; read driver parm ?
 13650 0000155A 7407                    		jz	short ps2_30_problem
 13651 0000155C 803E[1E00]15            		cmp	byte [prevoper], 15h
 13652                                  					; apparently function 15h fails, too
 13653 00001561 752D                    		jnz	short ps2_special_stuff_done
 13654                                  ps2_30_problem:				
 13655 00001563 50                      		push	ax
 13656 00001564 B401                    		mov	ah, 1
 13657                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13658                                  		; 17/10/2022
 13659 00001566 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13660                                  		;call	call_orig13	; call far 70:797h
 13661                                  					; call far KERNEL_SEGMENT:call_orig13
 13662 0000156B 58                      		pop	ax
 13663 0000156C EB22                    		jmp	short ps2_special_stuff_done
 13664                                  ; ---------------------------------------------------------------------------
 13665                                  
 13666                                  ; 17/10/2022
 13667                                  ; 16/10/2022
 13668                                  
 13669                                  ; here is the actual int13 handler
 13670                                  
 13671                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13672                                  
 13673                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13674                                  ; vectoring up here from Bios_Data
 13675                                  
 13676                                  		; 19/10/2022
 13677 0000156E 1E                      		push	ds		; save caller's ds register first thing
 13678                                  		;;mov	ds, word [cs:0030h]
 13679                                  					; and set up our own ds -> Bios_Data
 13680 0000156F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13681                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13682                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13683                                  
 13684                                  ; let the operation proceed. if there is a dma violation, then we do things
 13685                                  
 13686 00001574 A3[1E00]                		mov	[prevoper], ax	; save request
 13687 00001577 80FC05                  		cmp	ah, 5		; romformat
 13688 0000157A 74A0                    		jz	short format_special_stuff
 13689                                  					; go do special stuff for format
 13690                                   format_special_stuff_done:		
 13691 0000157C 803E[2905]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13692 00001581 75AA                    		jnz	short ec35_special_stuff
 13693                                  					; go handle it out of line if so
 13694                                  ec35_special_stuff_done:
 13695                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13696 00001583 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13697                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13698                                  		
 13699 00001588 9C                      		pushf			; save result flags
 13700                                  		
 13701 00001589 803E[3606]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13702                                  					; mdl_ps2_30
 13703 0000158E 74C5                    		jz	short ps2_special_stuff
 13704                                  					; exit mainline to address special
 13705                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13706 00001590 9D                      		popf
 13707 00001591 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13708                                  ret_from_i13:				
 13709 00001593 1F                      		pop	ds
 13710 00001594 CA0200                  		retf	2		; restore ds &	iret w/flags
 13711                                  ; ---------------------------------------------------------------------------
 13712                                  
 13713                                  ; most of our code exits through here. If carry isn't set, then
 13714                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13715                                  ; a changeline error.
 13716                                  
 13717                                  i13ret_ck_chglinerr:			
 13718 00001597 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13719                                  i13_ret_error:				
 13720 00001599 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13721 0000159C 7513                    		jnz	short int13b	; skip if wrong	error
 13722 0000159E 08D2                    		or	dl, dl		; is this for the hard disk?
 13723 000015A0 780F                    		js	short int13b	; yes, ignore
 13724 000015A2 803E[7700]00            		cmp	byte [fhave96], 0
 13725 000015A7 7408                    		jz	short int13b	; just in case ROM returned this
 13726                                  					; error	even though it told us it
 13727                                  					; never	would
 13728 000015A9 53                      		push	bx
 13729 000015AA BB4000                  		mov	bx, 40h		; fchanged
 13730 000015AD E8B703                  		call	set_changed_dl
 13731 000015B0 5B                      		pop	bx
 13732                                  int13b:					
 13733 000015B1 F9                      		stc			; now return the error
 13734 000015B2 EBDF                    		jmp	short ret_from_i13
 13735                                  ; ---------------------------------------------------------------------------
 13736                                  
 13737                                  ; some kind of error occurred. see if it is dma violation
 13738                                  
 13739                                  goterr13:				
 13740 000015B4 80FC09                  		cmp	ah, 9		; dma error?
 13741 000015B7 747C                    		jz	short gotdmaerr
 13742                                  goterr13_xxxx:				
 13743 000015B9 80FC11                  		cmp	ah, 11h		; ecc error?
 13744 000015BC 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13745 000015BE 803E[3006]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13746 000015C3 74D4                    		jz	short i13_ret_error
 13747                                  
 13748 000015C5 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13749                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13750                                  					; (2 = romread)
 13751                                  					; ECC correction only applies to reads
 13752 000015CA 75CD                    		jnz	short i13_ret_error
 13753                                  
 13754 000015CC 30E4                    		xor	ah, ah
 13755                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13756                                  		; 17/10/2022
 13757 000015CE 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13758                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13759                                  					; call far 70:797h
 13760 000015D3 A1[1E00]                		mov	ax, [prevoper]
 13761 000015D6 30E4                    		xor	ah, ah		; return code =	no error
 13762 000015D8 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13763 000015DA 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13764 000015DC 53                      		push	bx
 13765 000015DD 51                      		push	cx
 13766 000015DE 52                      		push	dx
 13767 000015DF A2[2000]                		mov	[number_of_sec], al
 13768                                  loop_ecc:				
 13769 000015E2 B80102                  		mov	ax, 201h	; read one sector
 13770                                  
 13771                                  ; we do reads one sector at a time. this ensures that we will eventually
 13772                                  ; finish the request since ecc errors on one sector do read in that sector.
 13773                                  ;
 13774                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13775                                  ; that attempt to read more sectors than are available on a particular
 13776                                  ; track.
 13777                                  ;
 13778                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13779                                  ; this request.
 13780                                  ;
 13781                                  ; at this point, all registers are set up for the call to orig13, except
 13782                                  ; that there may be a starting sector number that is bigger than the number
 13783                                  ; of sectors on a track.
 13784                                  ;
 13785 000015E5 E88FFE                  		call	check_wrap	; get correct parameters for int 13
 13786                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13787                                  		; 17/10/2022
 13788 000015E8 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13789                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13790 000015ED 730C                    		jnb	short ok11_op
 13791 000015EF 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13792 000015F2 741B                    		jz	short handle_dma_during_ecc
 13793 000015F4 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13794 000015F7 7510                    		jnz	short ok11_exit_err
 13795                                  		; 10/12/2022
 13796                                  		; xor ax ax -> ah = 0
 13797                                  		;mov	ah, 0		; ecc error. reset the system again.
 13798 000015F9 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13799                                  					; was the last sector, no error	code
 13800                                  					; will be returned for the corrected
 13801                                  					; read.	(clear carry too.)
 13802                                  ok11_op:				
 13803 000015FB FE0E[2000]              		dec	byte [number_of_sec]
 13804 000015FF 7409                    		jz	short ok11_exit	; all done?
 13805 00001601 FEC1                    		inc	cl		; advance sector number
 13806                                  					; add 200h to address
 13807 00001603 FEC7                    		inc	bh
 13808 00001605 FEC7                    		inc	bh
 13809 00001607 EBD9                    		jmp	short loop_ecc
 13810                                  ; ---------------------------------------------------------------------------
 13811                                  
 13812                                  ; locate error returns centrally
 13813                                  
 13814                                  ok11_exit_err:				
 13815 00001609 F9                      		stc			; set carry bit again.
 13816                                  ok11_exit:				
 13817 0000160A 5A                      		pop	dx
 13818 0000160B 59                      		pop	cx
 13819 0000160C 5B                      		pop	bx
 13820 0000160D EB88                    		jmp	short i13ret_ck_chglinerr
 13821                                  ; ---------------------------------------------------------------------------
 13822                                  
 13823                                  ; do the single sector read again, this time into our temporary
 13824                                  ; buffer, which is guaranteed not to have a DMA error, then
 13825                                  ; move the data to its proper location and proceed
 13826                                  
 13827                                  handle_dma_during_ecc:			
 13828 0000160F 06                      		push	es
 13829 00001610 53                      		push	bx
 13830 00001611 BB[4E01]                		mov	bx, disksector
 13831 00001614 1E                      		push	ds
 13832 00001615 07                      		pop	es		; point es:bx to buffer
 13833 00001616 B80102                  		mov	ax, 201h	; read one sector
 13834                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13835                                  		; 17/10/2022
 13836 00001619 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13837                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13838 0000161E 5B                      		pop	bx
 13839 0000161F 07                      		pop	es
 13840 00001620 7305                    		jnb	short handle_dma_during_ecc_noerr
 13841 00001622 80FC11                  		cmp	ah, 11h
 13842 00001625 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13843                                  
 13844                                  ; now we're kosher. Copy the data to where it belongs and resume
 13845                                  ; the ECC looping code.
 13846                                  
 13847                                  handle_dma_during_ecc_noerr:		
 13848 00001627 56                      		push	si
 13849 00001628 57                      		push	di
 13850 00001629 89DF                    		mov	di, bx
 13851 0000162B BE[4E01]                		mov	si, disksector
 13852 0000162E E82BFE                  		call	move_sector
 13853 00001631 5F                      		pop	di
 13854 00001632 5E                      		pop	si
 13855 00001633 EBC6                    		jmp	short ok11_op
 13856                                  ; ---------------------------------------------------------------------------
 13857                                  
 13858                                  ; we truly have a dma violation. restore register ax and retry the
 13859                                  ; operation as best we can.
 13860                                  
 13861                                  gotdmaerr:				
 13862 00001635 A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13863 00001638 FB                      		sti
 13864 00001639 80FC02                  		cmp	ah, 2		; romread
 13865 0000163C 723B                    		jb	short i13_done_dmaerr
 13866                                  					; just pass dma error thru for
 13867                                  					; functions we don't handle
 13868 0000163E 80FC04                  		cmp	ah, 4		; romverify
 13869 00001641 743C                    		jz	short intverify
 13870 00001643 80FC05                  		cmp	ah, 5		; romformat
 13871 00001646 7448                    		jz	short intformat
 13872 00001648 772F                    		ja	short i13_done_dmaerr
 13873                                  
 13874                                  ; we are doing a read/write call. check for dma problems
 13875                                  
 13876                                  ;	******** set up stack frame here!!! ********
 13877                                  
 13878 0000164A 52                      		push	dx
 13879 0000164B 51                      		push	cx
 13880 0000164C 53                      		push	bx
 13881 0000164D 50                      		push	ax
 13882 0000164E 55                      		push	bp
 13883 0000164F 89E5                    		mov	bp, sp
 13884 00001651 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13885 00001653 D1E2                    		shl	dx, 1
 13886 00001655 D1E2                    		shl	dx, 1
 13887 00001657 D1E2                    		shl	dx, 1
 13888 00001659 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13889 0000165B 01DA                    		add	dx, bx		; combine with offset
 13890 0000165D 81C2FF01                		add	dx, 511		; simulate a transfer
 13891                                  
 13892                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13893                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13894                                  
 13895 00001661 7303                    		jnb	short no_skip_first
 13896 00001663 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13897                                  ; ---------------------------------------------------------------------------
 13898                                  
 13899                                  no_skip_first:				
 13900 00001666 D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13901 00001668 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13902 0000166A 28F4                    		sub	ah, dh
 13903                                  
 13904                                  ; ah is now the number of sectors that we can successfully write in this
 13905                                  ; segment. if this number is above or equal to the requested number, then we
 13906                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13907                                  ;
 13908                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13909                                  ; first place is because we got a dma error. so it's impossible
 13910                                  ; for the whole block to fit, unless the dma error was returned
 13911                                  ; in error.
 13912                                  
 13913 0000166C 38C4                    		cmp	ah, al		; can we fit it	in?
 13914 0000166E 7236                    		jb	short doblock	; no, perform blocking.
 13915                                  
 13916                                  ; yes, the request fits. let it happen.
 13917                                  
 13918 00001670 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13919                                  					; set up head number
 13920 00001673 E888FE                  		call	doint
 13921 00001676 E9D900                  		jmp	bad13		; and return from this place
 13922                                  ; ---------------------------------------------------------------------------
 13923                                  
 13924                                  i13_done_dmaerr:			
 13925 00001679 B409                    		mov	ah, 9		; pass dma error thru to caller
 13926 0000167B F9                      		stc
 13927 0000167C E914FF                  		jmp	ret_from_i13	; return with error,
 13928                                  					; we know it's not a changeline error
 13929                                  ; ---------------------------------------------------------------------------
 13930                                  
 13931                                  ; verify the given sectors. place the buffer pointer into our space.
 13932                                  
 13933                                  intverify:				
 13934 0000167F 06                      		push	es		; save caller's dma address
 13935 00001680 53                      		push	bx
 13936 00001681 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13937 00001682 07                      		pop	es
 13938                                  dosimple:				
 13939 00001683 BB[4E01]                		mov	bx, disksector
 13940                                  					; do the i/o from Bios_Data:disksector
 13941                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13942                                  		; 17/10/2022
 13943 00001686 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13944                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13945 0000168B 5B                      		pop	bx
 13946 0000168C 07                      		pop	es
 13947 0000168D E907FF                  		jmp	i13ret_ck_chglinerr
 13948                                  ; ---------------------------------------------------------------------------
 13949                                  
 13950                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13951                                  
 13952                                  intformat:				
 13953 00001690 06                      		push	es
 13954 00001691 53                      		push	bx
 13955 00001692 56                      		push	si
 13956 00001693 57                      		push	di
 13957 00001694 1E                      		push	ds
 13958                                  
 13959                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13960                                  ; in other words, swap (ds, es)
 13961                                  
 13962 00001695 06                      		push	es
 13963 00001696 1E                      		push	ds
 13964 00001697 07                      		pop	es
 13965 00001698 1F                      		pop	ds
 13966 00001699 89DE                    		mov	si, bx
 13967 0000169B BF[4E01]                		mov	di, disksector
 13968 0000169E E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 13969 000016A1 1F                      		pop	ds
 13970 000016A2 5F                      		pop	di
 13971 000016A3 5E                      		pop	si		; do the i/o from
 13972 000016A4 EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13973                                  ; ---------------------------------------------------------------------------
 13974                                  
 13975                                  ; we can't fit the request into the entire block. perform the operation on
 13976                                  ; the first block.
 13977                                  ;
 13978                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13979                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13980                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13981                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13982                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13983                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13984                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13985                                  ; doblock will handle the first block of requested sectors within the
 13986                                  ; boundary of this safe value.
 13987                                  
 13988                                  doblock:
 13989                                  
 13990                                  ; try to get the # of sectors/track from bds via rom drive number.
 13991                                  ; for any mini disks installed, here we have to pray that they have the
 13992                                  ; same # of sector/track as the main dos partition disk drive.
 13993                                  				
 13994 000016A6 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13995                                  					; get head #, drive #
 13996 000016A9 51                      		push	cx
 13997 000016AA 06                      		push	es
 13998 000016AB 57                      		push	di		; ah - # of sectors before dma boundary
 13999                                  					; al - requested # of sectors for i/o.
 14000 000016AC E83BFE                  		call	find_bds
 14001 000016AF 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 14002                                  		; 12/12/2022
 14003 000016B3 26F6452301              		test	byte [es:di+23h], 1
 14004                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 14005 000016B8 5F                      		pop	di
 14006 000016B9 07                      		pop	es
 14007 000016BA 88E0                    		mov	al, ah		; set al=ah for	floppies
 14008 000016BC 7404                    		jz	short doblockflop ; they are track by track operation
 14009 000016BE B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 14010 000016C0 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 14011                                  doblockflop:				
 14012 000016C2 59                      		pop	cx
 14013                                  doblockcontinue:			
 14014 000016C3 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 14015 000016C5 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 14016 000016C7 50                      		push	ax
 14017 000016C8 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 14018 000016CA EB03                    		jmp	short doblockdoint
 14019                                  ; ---------------------------------------------------------------------------
 14020                                  
 14021                                  doblocklast:				
 14022 000016CC 88C4                    		mov	ah, al
 14023 000016CE 50                      		push	ax
 14024                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 14025 000016CF E82CFE                  		call	doint
 14026 000016D2 727E                    		jb	short bad13	; something happened, bye!
 14027 000016D4 58                      		pop	ax
 14028 000016D5 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 14029                                  					; decrement by the successful operation
 14030 000016D8 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 14031 000016DA 00E7                    		add	bh, ah		; advance dma addres
 14032 000016DC 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 14033 000016DE 38C4                    		cmp	ah, al		; check	the previous value
 14034 000016E0 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 14035                                  					; then we are done already.
 14036 000016E2 28E0                    		sub	al, ah		; otherwise,
 14037                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 14038 000016E4 E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 14039 000016E7 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 14040                                  ; ---------------------------------------------------------------------------
 14041                                  
 14042                                  bufferx:				
 14043 000016E9 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 14044                                  					; set up head number
 14045                                  buffer:					
 14046 000016EC 53                      		push	bx
 14047 000016ED 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 14048 000016F0 80FC03                  		cmp	ah, 3		; romwrite
 14049 000016F3 7525                    		jnz	short doread	;
 14050                                  					
 14051                                  ; copy the offending sector into local buffer
 14052                                  
 14053 000016F5 06                      		push	es
 14054 000016F6 1E                      		push	ds
 14055 000016F7 56                      		push	si
 14056 000016F8 57                      		push	di
 14057 000016F9 1E                      		push	ds		; exchange segment registers
 14058 000016FA 06                      		push	es
 14059 000016FB 1F                      		pop	ds
 14060 000016FC 07                      		pop	es
 14061 000016FD BF[4E01]                		mov	di, disksector	; where to move
 14062 00001700 57                      		push	di		; save it
 14063 00001701 89DE                    		mov	si, bx		; source
 14064 00001703 E856FD                  		call	move_sector	; move sector into local buffer
 14065 00001706 5B                      		pop	bx		; new transfer address
 14066                                  					; (es:bx = Bios_Data:diskbuffer)
 14067 00001707 5F                      		pop	di		; restore caller's di & si
 14068 00001708 5E                      		pop	si
 14069 00001709 1F                      		pop	ds		; restore Bios_Data
 14070                                  
 14071                                  ; see if we are wrapping around a track or head
 14072                                  
 14073 0000170A B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 14074                                  					; get drive number
 14075 0000170C 8A5608                  		mov	dl, [bp+8]
 14076 0000170F E865FD                  		call	check_wrap	; sets up registers if wrap-around
 14077                                  					;
 14078                                  					; ah is	function
 14079                                  					; al is	1 for single sector transfer
 14080                                  					; es:bx	is local transfer addres
 14081                                  					; cx is	track/sector number
 14082                                  					; dx is	head/drive number
 14083                                  					; si,di	unchanged
 14084 00001712 E8E9FD                  		call	doint
 14085 00001715 07                      		pop	es		; restore caller's dma segment
 14086 00001716 723A                    		jb	short bad13	; go clean up
 14087 00001718 EB22                    		jmp	short dotail
 14088                                  ; ---------------------------------------------------------------------------
 14089                                  
 14090                                  ; reading a sector. do int first, then move things around
 14091                                  
 14092                                  doread:					
 14093 0000171A 06                      		push	es
 14094 0000171B 53                      		push	bx
 14095 0000171C 1E                      		push	ds		; es = Bios_Code
 14096 0000171D 07                      		pop	es
 14097 0000171E BB[4E01]                		mov	bx, disksector
 14098 00001721 B001                    		mov	al, 1
 14099 00001723 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 14100                                  					; get drive number
 14101 00001726 E84EFD                  		call	check_wrap	;
 14102                                  					; ah = function
 14103                                  					; al = 1 for single sector
 14104                                  					; es:bx	points to local	buffer
 14105                                  					; cx, dx are track/sector, head/drive
 14106 00001729 E8D2FD                  		call	doint
 14107 0000172C 5B                      		pop	bx
 14108 0000172D 07                      		pop	es
 14109 0000172E 7222                    		jb	short bad13
 14110 00001730 56                      		push	si
 14111 00001731 57                      		push	di
 14112 00001732 89DF                    		mov	di, bx
 14113 00001734 BE[4E01]                		mov	si, disksector
 14114 00001737 E822FD                  		call	move_sector
 14115 0000173A 5F                      		pop	di
 14116 0000173B 5E                      		pop	si
 14117                                  
 14118                                  ; note the fact that we've done 1 more sector
 14119                                  
 14120                                  dotail:					
 14121 0000173C 5B                      		pop	bx		; retrieve new dma area
 14122 0000173D 80C702                  		add	bh, 2		; advance over sector
 14123 00001740 41                      		inc	cx
 14124 00001741 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 14125 00001744 F8                      		clc
 14126 00001745 FEC8                    		dec	al
 14127 00001747 7409                    		jz	short bad13	; no more i/o
 14128                                  
 14129                                  ; see if we wrap around a track or head boundary with starting sector
 14130                                  ; we already have the correct head number to pass to check_wrap
 14131                                  
 14132 00001749 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 14133 0000174C E828FD                  		call	check_wrap
 14134 0000174F E8ACFD                  		call	doint
 14135                                  
 14136                                  ; we are done. ax has the final code; we throw away what we got before
 14137                                  
 14138                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 14139                                  ;	   or we've finished. If carry is set now, our only
 14140                                  ;	   hope for salvation is that it was a read operation
 14141                                  ;	   and the error code is ECC error. In that case, we'll
 14142                                  ;	   just pop the registers and go do the old ECC thing.
 14143                                  ;	   When the DMA error that got us here in the first
 14144                                  ;	   place occurs, it'll handle it.
 14145                                  
 14146                                  bad13:					
 14147 00001752 89EC                    		mov	sp, bp
 14148 00001754 5D                      		pop	bp
 14149 00001755 5B                      		pop	bx
 14150 00001756 5B                      		pop	bx
 14151 00001757 59                      		pop	cx
 14152 00001758 5A                      		pop	dx
 14153 00001759 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 14154 0000175B E935FE                  		jmp	ret_from_i13	; non-error exit
 14155                                  ; ---------------------------------------------------------------------------
 14156                                  
 14157                                  xgoterr13_xxxx:				
 14158 0000175E E958FE                  		jmp	goterr13_xxxx
 14159                                  
 14160                                  ; ---------------------------------------------------------------------------
 14161                                  		; 10/12/2022
 14162                                  		;db 	0
 14163                                  ; ---------------------------------------------------------------------------
 14164                                  
 14165                                  ;Bios_Code ends
 14166                                  
 14167                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14168                                  
 14169                                  ;-----------------------------------------------------------------------------
 14170                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 14171                                  ;-----------------------------------------------------------------------------
 14172                                  ; 17/03/2019 - Retro DOS v4.0
 14173                                  
 14174                                  		; 19/10/2022
 14175                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 14176 00001761 8A26[7500]              		mov	ah, [drvmax]
 14177 00001765 BF[7F06]                		mov	di, dskdrvs
 14178 00001768 1E                      		push	ds		; pass result in es:di
 14179 00001769 07                      		pop	es
 14180 0000176A E9E9EE                  		jmp	SetPtrSav
 14181                                  
 14182                                  ; =============== S U B	R O U T	I N E =======================================
 14183                                  
 14184                                  ;---------------------------------------------------------------------------
 14185                                  ; install_bds installs a bds at location es:di into the current linked list of
 14186                                  ; bds maintained by this device driver. it places the bds at the end of the
 14187                                  ; list. Trashes (at least) ax, bx, di, si
 14188                                  ;---------------------------------------------------------------------------
 14189                                  
 14190                                  install_bds:
 14191 0000176D 1E                      		push	ds		; save Bios_Data segment
 14192 0000176E BE[1901]                		mov	si, start_bds	; beginning of chain
 14193                                  
 14194                                  		; ds:si now points to link to first bds
 14195                                  		; assume bds list is non-empty
 14196                                  loop_next_bds:
 14197 00001771 C534                    		lds	si, [si]	; [si+BDS.link]
 14198                                  					; fetch	next bds
 14199 00001773 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14200 00001777 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 14201                                  					; drive	with new one?
 14202 0000177A 7518                    		jnz	short next_bds
 14203 0000177C B310                    		mov	bl, 10h		; fi_am_mult
 14204 0000177E 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14205                                  					; set both of them to i_am_mult	if so
 14206 00001782 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 14207 00001785 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 14208                                  					; we don't own it
 14209 0000178A 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 14210                                  					; determine if changeline available
 14211 0000178D 80E302                  		and	bl, 2		; fchangeline
 14212 00001790 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14213                                  next_bds:
 14214                                  		; 02/09/2023 (PCDOS 7.1)
 14215 00001794 B8FFFF                  		mov	ax, 0FFFFh	; -1
 14216 00001797 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 14217                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 14218                                  					; are we at end	of list?
 14219 00001799 75D6                    		jnz	short loop_next_bds
 14220 0000179B 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 14221                                  					; install bds
 14222 0000179E 893C                    		mov	[si], di
 14223 000017A0 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 14224                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 14225                                  					; set next pointer to null
 14226 000017A3 1F                      		pop	ds
 14227                                  
 14228                                  ; 01/07/2023 - Retro DOS v4.2 (MSDOS 6.22 IO.SYS - BIOSCODE:1785h)
 14229                                  ; 16/10/2022 (MSDOS 6.0 Code)
 14230                                  
 14231                                  ; **** If the new drive has a higher EOT value, we must alter the
 14232                                  ;      'eot' variable appropriately.
 14233                                  
 14234                                  		; 01/06/2019
 14235                                  		;mov	al, [es:di+52]
 14236 000017A4 268A4534                		mov	al, [es:di+BDS.rsecpertrack]
 14237 000017A8 3A06[2C01]              		cmp	al, [eot]
 14238 000017AC 7603                    		jbe	short _eot_ok
 14239 000017AE A2[2C01]                		mov	[eot], al
 14240                                  _eot_ok:
 14241 000017B1 C3                      		retn
 14242                                  
 14243                                  ; ---------------------------------------------------------------------------
 14244                                  
 14245                                  ; 17/10/2022
 14246                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 14247                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 14248                                  ; 09/12/2022
 14249                                  DRVLET equ drvlet
 14250                                  SNGMSG equ sngmsg
 14251                                  
 14252                                  ; 16/10/2022
 14253                                  
 14254                                  ;---------------------------------------------------------------------------
 14255                                  ;  ask to swap the disk in drive a:
 14256                                  ;	es:di -> bds
 14257                                  ;	ds -> Bios_Data
 14258                                  ;---------------------------------------------------------------------------
 14259                                  
 14260                                  		; 19/10/2022
 14261                                  swpdsk:		
 14262 000017B2 F606[6F08]01            		test	byte [IsWin386], 1			
 14263                                  		;test	ds:IsWin386, 1	; Is win386 present?
 14264 000017B7 7405                    		jz	short no_win386	; no, skip SetFocus
 14265                                  		
 14266                                  		; set focus to the correct VM
 14267                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 14268                                  		; 17/10/2022
 14269 000017B9 9A[7008]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 14270                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 14271                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 14272                                  no_win386:				
 14273 000017BE 51                      		push	cx
 14274 000017BF 52                      		push	dx
 14275 000017C0 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 14276                                  					; get the drive	letter
 14277                                  
 14278                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 14279                                  ;           then existing dsk is drive A & vice versa
 14280                                  
 14281 000017C4 88D6                    		mov	dh, dl
 14282 000017C6 80F601                  		xor	dh, 1
 14283 000017C9 29C9                    		sub	cx, cx		; nobody has handled swap disk
 14284 000017CB B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 14285                                  					; broad	cast code for swap disk
 14286                                  					; Broadcast it
 14287 000017CE CD2F                    		int	2Fh	
 14288 000017D0 41                      		inc	cx		; cx == -1 ?
 14289 000017D1 741E                    		jz	short swpdsk9	; somebody has handled it
 14290                                  
 14291                                  ; using a different drive in a one drive system so request the user change disks
 14292                                  
 14293 000017D3 80C241                  		add	dl, 'A'
 14294                                  		; 17/10/2022
 14295 000017D6 2E8816[1018]            		mov	[cs:DRVLET], dl
 14296                                  		; 16/10/2022
 14297                                  		;;mov	byte [cs:drvlet], dl
 14298                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 14299                                  					; 0070h:3D54h =	2C7h:17E4h
 14300 000017DB BE[F417]                		mov	si, SNGMSG
 14301                                  		;mov	si, 17C8h	; sngmsg
 14302                                  					; 0070h:3D38h =	2C7h:17C8h
 14303 000017DE 53                      		push	bx
 14304 000017DF 2E                      		cs
 14305 000017E0 AC                      		lodsb			; get the next character of the message
 14306                                  		;lods	byte ptr cs:[si]
 14307                                  wrmsg_loop:				
 14308 000017E1 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 14309                                  					; AL = character to display
 14310 000017E3 2E                      		cs
 14311 000017E4 AC                      		lodsb
 14312                                  		;lods	byte ptr cs:[si] ; cs lodsb
 14313                                  					; get the next character of the	message
 14314 000017E5 08C0                    		or	al, al
 14315 000017E7 75F8                    		jnz	short wrmsg_loop
 14316 000017E9 E81FEA                  		call	con_flush	; flush out keyboard queue
 14317                                  					; call rom-bios
 14318 000017EC 30E4                    		xor	ah, ah
 14319 000017EE CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 14320                                  					; Return: AH = scan code, AL = character
 14321 000017F0 5B                      		pop	bx
 14322                                  swpdsk9:				
 14323 000017F1 5A                      		pop	dx
 14324 000017F2 59                      		pop	cx
 14325 000017F3 C3                      		retn
 14326                                  
 14327                                  ; ---------------------------------------------------------------------------
 14328                                  
 14329                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14330                                  
 14331                                  ;--------------------------------------------------------
 14332                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 14333                                  ;--------------------------------------------------------
 14334                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 14335                                  ;--------------------------------------------------------
 14336                                  ; 17/03/2019 - Retro DOS v4.0
 14337                                  
 14338                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 14339 000017F4 0D0A                    sngmsg:		db 0Dh,0Ah
 14340 000017F6 496E73657274206469-     		db 'Insert diskette for drive '
 14340 000017FF 736B6574746520666F-
 14340 00001808 7220647269766520   
 14341                                  
 14342                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 14343 00001810 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 14343 00001819 65737320616E79206B-
 14343 00001822 6579207768656E2072-
 14343 0000182B 656164790D0A       
 14344 00001831 0A00                    		db 0Ah,0
 14345                                  
 14346                                  ; =============== S U B	R O U T	I N E =======================================
 14347                                  
 14348                                  ;---------------------------------------------------------------------------
 14349                                  ; input : es:di points to current bds for drive.
 14350                                  ; return : zero set if no open files
 14351                                  ;	   zero reset if open files
 14352                                  ;---------------------------------------------------------------------------
 14353                                  
 14354                                  chkopcnt:		
 14355 00001833 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14356 00001838 C3                      		retn
 14357                                  
 14358                                  ; =============== S U B	R O U T	I N E =======================================
 14359                                  
 14360                                  ;---------------------------------------------------------------------------
 14361                                  ; at media check time, we need to really get down and check what the change is.
 14362                                  ; this is guaranteed to be expensive.
 14363                                  ;
 14364                                  ;	es:di -> bds, ds -> Bios_Data
 14365                                  ;---------------------------------------------------------------------------
 14366                                  
 14367                                  mediacheck:	
 14368 00001839 E89CF0                  		call	checksingle	; make sure correct disk is in place
 14369 0000183C 31F6                    		xor	si, si
 14370 0000183E E84D01                  		call	haschange
 14371 00001841 742F                    		jz	short mediaret
 14372 00001843 E83C01                  		call	checkromchange
 14373 00001846 752B                    		jnz	short mediadovolid
 14374 00001848 50                      		push	ax
 14375 00001849 52                      		push	dx
 14376 0000184A 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14377                                  					; set logical drive number
 14378 0000184E B416                    		mov	ah, 16h
 14379 00001850 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 14380                                  					; DL = drive to	check
 14381                                  					; Return: AH = disk change status
 14382 00001852 5A                      		pop	dx
 14383 00001853 58                      		pop	ax
 14384 00001854 721D                    		jb	short mediadovolid
 14385 00001856 BE0100                  		mov	si, 1		; signal no change
 14386                                  
 14387                                  ; there are some drives with changeline that "lose" the changeline indication
 14388                                  ; if a different drive is accessed after the current one. in order to avoid
 14389                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 14390                                  ; is not active and we are accessing a different drive from the last one.
 14391                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 14392                                  ; status.
 14393                                  		; 19/10/2022
 14394 00001859 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 14395 0000185D 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14396                                  					; (If the last drive accessed is not current drive
 14397                                  					; media	change status may be incorrect.	So,
 14398                                  					; "I don't now" will be returned even if it is indicated
 14399                                  					; as media is not changed.)
 14400 00001861 740F                    		jz	short mediaret	; (same	drive,
 14401                                  					; media	changeline indication is reliable)
 14402                                  
 14403                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14404                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14405                                  ; "not changed" here since the 2 second test said no change.)
 14406                                  
 14407 00001863 50                      		push	ax
 14408 00001864 51                      		push	cx
 14409 00001865 52                      		push	dx
 14410 00001866 E88DED                  		call	Check_Time_Of_Access
 14411 00001869 5A                      		pop	dx
 14412 0000186A 59                      		pop	cx
 14413 0000186B 58                      		pop	ax
 14414 0000186C 09F6                    		or	si, si
 14415 0000186E 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14416                                  					; (volume id will be checked)
 14417 00001870 31F6                    		xor	si, si		; return "i don't know"
 14418                                  mediaret:				
 14419 00001872 C3                      		retn
 14420                                  ; ---------------------------------------------------------------------------
 14421                                  
 14422                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14423                                  ; because this may be different since we only set medbyt when doing a read
 14424                                  ; or write.
 14425                                  
 14426                                  mediadovolid:				
 14427 00001873 E820EE                  		call	GetBp		; build	a new bpb in current bds
 14428 00001876 72FA                    		jb	short mediaret
 14429 00001878 E82D00                  		call	check_vid
 14430 0000187B 73F5                    		jnb	short mediaret
 14431 0000187D E9EBF3                  		jmp	maperror	; fix up al for	return to dos
 14432                                  ; ---------------------------------------------------------------------------
 14433                                  
 14434                                  ; simple, quick check of latched change. if no indication, then return
 14435                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14436                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14437                                  ; dos.
 14438                                  ;
 14439                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14440                                  
 14441                                  ;	call with es:di -> bds, ds -> Bios_Data
 14442                                  ;	***** warning:  this routine will return one level up on the stack
 14443                                  ;			if an error occurs!
 14444                                  
 14445                                  checklatchio:	
 14446                                  
 14447                                  ; if returning fake bpb then assume the disk has not changed
 14448                                  			
 14449 00001880 E8B0FF                  		call	chkopcnt
 14450 00001883 741B                    		jz	short checkret	; done if zero
 14451                                  
 14452                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14453                                  
 14454 00001885 E8FA00                  		call	checkromchange
 14455 00001888 7416                    		jz	short checkret
 14456                                  
 14457                                  ; we now see that a change line has been seen in the past. let's do the
 14458                                  ; expensive verification.
 14459                                  
 14460 0000188A E809EE                  		call	GetBp		; build	bpb in current bds
 14461 0000188D 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14462 0000188F E81600                  		call	check_vid
 14463 00001892 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14464 00001894 09F6                    		or	si, si		; is changed for sure?
 14465 00001896 7908                    		jns	short checkret
 14466 00001898 E87B00                  		call	returnvid
 14467                                  checklatchret:				
 14468 0000189B E8CDF3                  		call	maperror	; fix up al for	return to dos
 14469                                  ret_no_error_map:			
 14470 0000189E F9                      		stc
 14471 0000189F 5E                      		pop	si		; pop off return address
 14472                                  checkret:				
 14473 000018A0 C3                      		retn
 14474                                  ; ---------------------------------------------------------------------------
 14475                                  
 14476                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14477                                  ; only if there was a disk error. return that error code in ax.
 14478                                  ;
 14479                                  ;	called with es:di -> bds, ds -> Bios_Data
 14480                                  
 14481                                  checkfatvid:				
 14482 000018A1 E8BD01                  		call	fat_check	; check	the fat	and the	vid
 14483 000018A4 09F6                    		or	si, si
 14484 000018A6 7827                    		js	short changed_drv ;
 14485                                  
 14486                                  ; the fat was the same. fall into check_vid and check volume id.
 14487                                  
 14488                                  		; fall into check_vid
 14489                                  
 14490                                  ; =============== S U B	R O U T	I N E =======================================
 14491                                  
 14492                                  ; now with the extended boot record, the logic should be enhanced.
 14493                                  ;
 14494                                  ; if it is the extended boot record, then we check the volume serial
 14495                                  ; number instead of volume id. if it is different, then set si to -1.
 14496                                  ;
 14497                                  ; if it is same, then si= 1 (no change).
 14498                                  ;
 14499                                  ; if it is not the extended boot record, then just follows the old
 14500                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14501                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14502                                  ; should have already covered by extended boot structure checking.
 14503                                  ; so, we will return "i don't know" by setting si to 0.
 14504                                  ;
 14505                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14506                                  ; (this will be gauranteed by a successful getbp call right before this
 14507                                  ; routine.)
 14508                                  ;
 14509                                  ;	called with es:di -> bds, ds -> bds
 14510                                  
 14511                                  		; 19/10/2022
 14512                                  check_vid:
 14513                                  
 14514                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14515                                  ; boot signature. if it is set then go to do the extended
 14516                                  ; id check otherwise continue with code below
 14517                                  
 14518 000018A8 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14519                                  					; [disksector+EXT_BOOT.SIG],
 14520                                  					; EXT_BOOT_SIGNATURE
 14521 000018AD 7427                    		jz	short do_ext_check_id
 14522 000018AF E8DC00                  		call	haschange
 14523 000018B2 74EC                    		jz	short checkret
 14524 000018B4 31F6                    		xor	si, si
 14525 000018B6 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14526                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14527 000018BB 7411                    		jz	short checkfatret ; don't read vol id
 14528                                  					; if not fat system
 14529 000018BD E8EE00                  		call	read_volume_id
 14530 000018C0 720C                    		jb	short checkfatret
 14531 000018C2 E89201                  		call	check_volume_id
 14532 000018C5 BEFFFF                  		mov	si, 0FFFFh	; -1
 14533                                  					; definitely changed
 14534 000018C8 7505                    		jnz	short changed_drv
 14535                                  
 14536 000018CA 46                      		inc	si		; not changed
 14537                                  vid_no_changed:				
 14538 000018CB E8BA00                  		call	resetchanged
 14539                                  		; 12/12/2022
 14540                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14541                                  		;clc
 14542                                  checkfatret:				
 14543 000018CE C3                      		retn
 14544                                  ; ---------------------------------------------------------------------------
 14545                                  
 14546                                  		; 12/12/2022
 14547                                  changed_drv:
 14548 000018CF F8                      		clc			; cas -- return	no error
 14549 000018D0 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14550                                  					; ensure that we ask rom for media
 14551 000018D5 C3                      		retn			; check	next time round
 14552                                  ; ---------------------------------------------------------------------------
 14553                                  
 14554                                  ; extended id check
 14555                                  
 14556                                  ; 16/10/2022
 14557                                  
 14558                                  ; the code to check extended id is basically a check to see if the
 14559                                  ; volume serial number is still the same. the volume serial number
 14560                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14561                                  ; ds:di points to the bds of the drive under consideration.
 14562                                  ; the bds has fields containing the high and low words 
 14563                                  ; of the volume serial number of the media in the drive.
 14564                                  ; compare these fields to the fields mentioned above. if these fields
 14565                                  ; do not match the media has changed and so we should jump to the code
 14566                                  ; starting at ext_changed else return "i don't know" status
 14567                                  ; in the register used for the changeline status and continue executing
 14568                                  ; the code given below. for temporary storage use the register which
 14569                                  ; has been saved and restored around this block.
 14570                                  ;
 14571                                  ; bds fields in inc\msbds.inc
 14572                                  
 14573                                  		; 19/10/2022
 14574                                  do_ext_check_id:
 14575 000018D6 50                      		push	ax
 14576                                  		;mov	ax, word ptr ds:disksector+27h
 14577                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14578 000018D7 A1[7501]                		mov	ax, [disksector+27h]
 14579                                  		; 02/09/2023
 14580 000018DA 31F6                    		xor	si, si ; 0
 14581 000018DC 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14582 000018E0 750C                    		jnz	short ext_changed
 14583 000018E2 A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14584 000018E5 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14585 000018E9 7503                    		jnz	short ext_changed
 14586                                  		;xor	si, si		; 0
 14587                                  					; don't know
 14588 000018EB 58                      		pop	ax
 14589 000018EC EBDD                    		jmp	short vid_no_changed
 14590                                  					; reset the flag
 14591                                  ; ---------------------------------------------------------------------------
 14592                                  
 14593                                  ext_changed:
 14594 000018EE 58                      		pop	ax
 14595                                  		; 02/09/2023
 14596 000018EF 4E                      		dec	si ; mov si, 0FFFFh ; -1
 14597                                  		;mov	si, 0FFFFh	; -1
 14598                                  					; disk changed!
 14599                                  		; 12/12/2022
 14600                                  		; ('changed_drv' clears cf)
 14601                                  		;clc
 14602 000018F0 EBDD                    		jmp	short changed_drv
 14603                                  
 14604                                  ; ---------------------------------------------------------------------------
 14605                                  
 14606                                  ; at i/o time, we detected the error. now we need to determine whether the
 14607                                  ; media was truly changed or not. we return normally if media change unknown.
 14608                                  ; and we pop off the call and jmp to harderr if we see an error.
 14609                                  ;
 14610                                  ; es:di -> bds
 14611                                  
 14612                                  checkio:				
 14613 000018F2 80FC06                  		cmp	ah, 6
 14614 000018F5 75D7                    		jnz	short checkfatret
 14615 000018F7 E839FF                  		call	chkopcnt
 14616 000018FA 74D2                    		jz	short checkfatret
 14617 000018FC E897ED                  		call	GetBp
 14618 000018FF 7212                    		jb	short no_error_map
 14619 00001901 E89DFF                  		call	checkfatvid
 14620 00001904 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14621 00001906 09F6                    		or	si, si		; is changed for sure?
 14622 00001908 7802                    		js	short checkioerr ; yes changed
 14623 0000190A 45                      		inc	bp		; allow	a retry
 14624 0000190B C3                      		retn
 14625                                  ; ---------------------------------------------------------------------------
 14626                                  
 14627                                  checkioerr:				
 14628 0000190C E80700                  		call	returnvid
 14629                                  
 14630                                  checkioret:				
 14631 0000190F F9                      		stc			; make sure carry gets passed through
 14632 00001910 E908F3                  		jmp	harderr
 14633                                  ; ---------------------------------------------------------------------------
 14634                                  
 14635                                  no_error_map:				
 14636 00001913 E908F3                  		jmp	harderr2
 14637                                  
 14638                                  ; =============== S U B	R O U T	I N E =======================================
 14639                                  
 14640                                  ; return vid sets up the vid for a return to dos.
 14641                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14642                                  ;  **** trashes si! ****
 14643                                  
 14644                                  returnvid:		
 14645 00001916 BE1600                  		mov	si, 22		; extra
 14646                                  					; offset into pointer to return	value
 14647 00001919 E80700                  		call	vid_into_packet
 14648 0000191C B406                    		mov	ah, 6
 14649 0000191E F9                      		stc
 14650 0000191F C3                      		retn
 14651                                  
 14652                                  ; ---------------------------------------------------------------------------
 14653                                  
 14654                                  ; moves the pointer to the volid for the drive into the original request packet
 14655                                  ; no attempt is made to preserve registers.
 14656                                  ;
 14657                                  ; assumes es:di -> bds
 14658                                  ; **trashes si**
 14659                                  
 14660                                  media_set_vid:				
 14661 00001920 BE0F00                  		mov	si, 15		; trans+1
 14662                                  					; return the value here	in packet
 14663                                  
 14664                                  		; fall into vid_into_packet
 14665                                  
 14666                                  ; =============== S U B	R O U T	I N E =======================================
 14667                                  
 14668                                  ; return pointer to vid in bds at es:di in packet[si]
 14669                                  
 14670                                  		; 19/10/2022
 14671                                  vid_into_packet:
 14672 00001923 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14673 00001924 C51E[1200]              		lds	bx, [ptrsav]
 14674 00001928 83C74B                  		add	di, 75		; BDS.volid
 14675 0000192B 8938                    		mov	[bx+si], di
 14676 0000192D 83EF4B                  		sub	di, 75		; BDS.volid
 14677 00001930 8C4002                  		mov	[bx+si+2], es
 14678 00001933 1F                      		pop	ds
 14679                                  dofloppy:	; 18/12/2022
 14680 00001934 C3                      		retn
 14681                                  
 14682                                  ; ---------------------------------------------------------------------------
 14683                                  
 14684                                  ;----------------------------------------------------------------------------
 14685                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14686                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14687                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14688                                  ;   of getbp. for 3.5" media, we just return.
 14689                                  ;
 14690                                  ;   inputs:	es:di point to correct bds for this drive
 14691                                  ;		ah has media byte
 14692                                  ;
 14693                                  ;   outputs:	carry clear
 14694                                  ;		    no registers modified
 14695                                  ;		carry set
 14696                                  ;		    al = sectors/fat
 14697                                  ;		    bh = number of root directory entries
 14698                                  ;		    bl = sectors per track
 14699                                  ;		    cx = number of sectors
 14700                                  ;		    dh = sectors per allocation unit
 14701                                  ;		    dl = number of heads
 14702                                  ;
 14703                                  ;----------------------------------------------------------------------------
 14704                                  
 14705                                  hidensity:
 14706                                  
 14707                                  ; check for correct drive
 14708                                  		
 14709                                  		; 12/12/2022
 14710 00001935 26F6452302              		test	byte [es:di+23h], 2		
 14711                                  		;test	word [es:di+23h], 2 ; is it special?	
 14712                                  					; [es:di+BDS.flags], fchangeline
 14713 0000193A 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14714                                  
 14715                                  ; we have a media byte that is pretty complex. examine drive information
 14716                                  ; table to see what kind it is.
 14717                                  
 14718 0000193C 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14719 00001941 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14720                                  					; yes, use fatid...
 14721                                  ; 96 tpi drive?
 14722 00001943 80FCF9                  		cmp	ah, 0F9h
 14723 00001946 75EC                    		jnz	short dofloppy
 14724                                  
 14725                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14726                                  ;------ a 720K diskette
 14727                                  
 14728                                  		; 02/09/2023 (PCDOS 7.1)
 14729 00001948 268A4522                		mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 14730 0000194C 3C07                    		cmp	al, 7
 14731                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14732                                  					; ffOther
 14733 0000194E 7413                    		jz	short Is720K
 14734 00001950 3C09                    		cmp	al, 9
 14735                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14736                                  					; ff288
 14737 00001952 740F                    		jz	short Is720K
 14738 00001954 B007                    		mov	al, 7		; seven	sectors	/ fat
 14739 00001956 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14740                                  					; 224 root dir entries
 14741                                  					; & 0Fh sector max
 14742 00001959 B96009                  		mov	cx, 2400	; 80*15*2
 14743                                  					; 80 tracks, 15 sectors/track,
 14744                                  					; 2 sides
 14745                                  		; 02/09/2023
 14746 0000195C 5A                      		pop	dx		; pop off return address
 14747 0000195D BA0201                  		mov	dx, 258		; 1*256+2
 14748                                  					; sectors/allocation unit
 14749                                  					; & head max
 14750                                  		;add	sp, 2		; pop off return address
 14751 00001960 E9A5ED                  		jmp	Has1		; return to tail of getbp
 14752                                  ; ---------------------------------------------------------------------------
 14753                                  
 14754                                  Is720K:
 14755                                  		; 02/09/2023
 14756 00001963 5B                      		pop	bx		; pop off return address	
 14757                                  		;add	sp, 2		; pop off return address
 14758 00001964 E968ED                  		jmp	Has720K		; return to 720K code
 14759                                  ; ---------------------------------------------------------------------------
 14760                                  
 14761                                  		; 18/12/2022
 14762                                  ;dofloppy:
 14763                                  		;retn
 14764                                  
 14765                                  ; =============== S U B	R O U T	I N E =======================================
 14766                                  
 14767                                  ; 16/10/2022
 14768                                  
 14769                                  ;---------------------------------------------------------------------------
 14770                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14771                                  ;		   essentially used to indicate changeline, or format.
 14772                                  ;
 14773                                  ;   inputs:	dl contains physical drive number
 14774                                  ;		bx contains bits to set in the flag field in the bdss
 14775                                  ;   outputs:	none
 14776                                  ;   registers modified: flags
 14777                                  ;
 14778                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14779                                  ;
 14780                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14781                                  ;---------------------------------------------------------------------------
 14782                                  
 14783                                  set_changed_dl:	
 14784 00001967 06                      		push	es
 14785 00001968 57                      		push	di
 14786                                  		;les	di, ds:start_bds
 14787                                  		; 19/10/2022
 14788 00001969 C43E[1901]              		les	di, [start_bds]
 14789                                  
 14790                                  ; note: we assume that the list is non-empty
 14791                                  
 14792                                  scan_bds:				
 14793 0000196D 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14794 00001971 7504                    		jnz	short get_next_bds
 14795                                  
 14796                                  ; someone may complain, but this *always* must be done when a disk change is
 14797                                  ; noted. there are *no* other compromising circumstances.
 14798                                  
 14799 00001973 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14800                                  					; signal change	on other drive
 14801                                  get_next_bds:				
 14802 00001977 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14803                                  					; go to	next bds
 14804 0000197A 83FFFF                  		cmp	di, 0FFFFh
 14805 0000197D 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14806 0000197F 5F                      		pop	di
 14807 00001980 07                      		pop	es
 14808 00001981 C3                      		retn
 14809                                  
 14810                                  ; =============== S U B	R O U T	I N E =======================================
 14811                                  
 14812                                  ;---------------------------------------------------------------------------
 14813                                  ; checkromchange - see if external program has diddled rom change line.
 14814                                  ;
 14815                                  ;   inputs:	es:di points to current bds.
 14816                                  ;   outputs:	zero set - no change
 14817                                  ;		zero reset - change
 14818                                  ;   registers modified: none
 14819                                  ;---------------------------------------------------------------------------
 14820                                  
 14821                                  checkromchange:	
 14822                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14823                                  		; 10/12/2022
 14824 00001982 26F6452340              		test	byte [es:di+23h], 40h
 14825                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14826                                  					; fchanged
 14827 00001987 C3                      		retn
 14828                                  
 14829                                  ; =============== S U B	R O U T	I N E =======================================
 14830                                  
 14831                                  ;---------------------------------------------------------------------------
 14832                                  ; resetchanged - restore value of change line
 14833                                  ;
 14834                                  ;   inputs:	es:di points to current bds
 14835                                  ;   outputs:	none
 14836                                  ;   registers modified: none
 14837                                  ;---------------------------------------------------------------------------
 14838                                  
 14839                                  resetchanged:	
 14840                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14841                                  		; 10/12/2022
 14842 00001988 26806523BF              		and	byte [es:di+23h], 0BFh
 14843                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14844                                  					; ~fchanged
 14845 0000198D C3                      		retn
 14846                                  
 14847                                  ; =============== S U B	R O U T	I N E =======================================
 14848                                  
 14849                                  ;---------------------------------------------------------------------------
 14850                                  ; haschange - see if drive can supply change line
 14851                                  ;
 14852                                  ;   inputs:	es:di points to current bds
 14853                                  ;   outputs:	zero set - no change line available
 14854                                  ;		zero reset - change line available
 14855                                  ;   registers modified: none
 14856                                  ;---------------------------------------------------------------------------
 14857                                  
 14858                                  haschange:
 14859                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14860                                  		; 10/12/2022
 14861 0000198E 26F6452302              		test	byte [es:di+23h], 2		
 14862                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14863                                  					; fchangeline
 14864 00001993 C3                      		retn
 14865                                  
 14866                                  ; ---------------------------------------------------------------------------
 14867                                  
 14868                                  ; 16/10/2022
 14869                                  
 14870                                  ;-------------------------------------------------------------------------
 14871                                  ; set_volume_id      -	main routine, calls other routines.
 14872                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14873                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14874                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14875                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14876                                  ;-------------------------------------------------------------------------
 14877                                  
 14878                                  ; set_volume_id
 14879                                  ;   if drive has changeline support, read in and set the volume_id
 14880                                  ; and the last fat_id byte. if no change line support then do nothing.
 14881                                  ;
 14882                                  ;   on entry:
 14883                                  ;	es:di points to the bds for this disk.
 14884                                  ;	ah contains media byte
 14885                                  ;
 14886                                  ;   on exit:
 14887                                  ;	carry clear:
 14888                                  ;	   successful call
 14889                                  ;	carry set
 14890                                  ;	   error and ax has error code
 14891                                  
 14892                                  set_volume_id:				
 14893 00001994 52                      		push	dx		; save registers
 14894 00001995 50                      		push	ax
 14895 00001996 E8F5FF                  		call	haschange	; does drive have changeline support?
 14896 00001999 740B                    		jz	short setvret	; no, get out
 14897 0000199B E81000                  		call	read_volume_id
 14898 0000199E 7209                    		jb	short seterr
 14899 000019A0 E8A800                  		call	transfer_volume_id ; copy the volume id	to special drive
 14900 000019A3 E8E2FF                  		call	resetchanged	; restore value	of change line
 14901                                  setvret:				
 14902                                  		; 10/12/2022
 14903                                  		; cf = 0
 14904                                  		;clc			; no error, clear carry flag
 14905 000019A6 58                      		pop	ax		; restore registers
 14906 000019A7 5A                      		pop	dx
 14907 000019A8 C3                      		retn
 14908                                  ; ---------------------------------------------------------------------------
 14909                                  
 14910                                  seterr:					
 14911 000019A9 5A                      		pop	dx		; pop stack but don't overwrite ax
 14912 000019AA 5A                      		pop	dx		; restore dx
 14913 000019AB C3                      		retn
 14914                                  ; ---------------------------------------------------------------------------
 14915 000019AC 0000                    root_sec:	dw 0			; root sector #
 14916                                  
 14917                                  ; 16/10/2022
 14918                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14919                                  ; 09/12/2022
 14920                                  ROOTSEC equ root_sec
 14921                                  
 14922                                  ; =============== S U B	R O U T	I N E =======================================
 14923                                  
 14924                                  ; 16/10/2022
 14925                                  
 14926                                  ; read_volume_id read the volume id and tells if it has been changed.
 14927                                  ;
 14928                                  ;   on entry:
 14929                                  ;	es:di points to current bds for drive.
 14930                                  ;
 14931                                  ;   on exit:
 14932                                  ;	carry clear
 14933                                  ;	    si = 1  no change
 14934                                  ;	    si = 0  ?
 14935                                  ;	    si = -1 change
 14936                                  ;
 14937                                  ;	carry set:
 14938                                  ;	    error and ax has error code.
 14939                                  
 14940                                  read_volume_id:
 14941 000019AE 52                      		push	dx		; preserve registers
 14942 000019AF 51                      		push	cx
 14943 000019B0 53                      		push	bx
 14944 000019B1 50                      		push	ax
 14945 000019B2 06                      		push	es		; stack the bds last
 14946 000019B3 57                      		push	di
 14947 000019B4 1E                      		push	ds		; point es to Bios_Data
 14948 000019B5 07                      		pop	es
 14949 000019B6 BF[AB08]                		mov	di, tmp_vid	; "NO NAME	 "
 14950 000019B9 BE[9F08]                		mov	si, nul_vid	; "NO NAME	 "
 14951                                  		;mov	cx, 11		; PCDOS 7.1 - 02/09/2023
 14952 000019BC B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14953 000019BF F3A4                    		rep movsb
 14954 000019C1 5F                      		pop	di
 14955 000019C2 07                      		pop	es
 14956 000019C3 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14957                                  					; # of fats
 14958 000019C7 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14959                                  					; sectors / fat
 14960 000019CB F6E1                    		mul	cl		; size taken by	fats
 14961 000019CD 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14962                                  					; add on reserved sectors
 14963                                  					;
 14964                                  					; ax is	now sector # (0	based)
 14965                                  		; 17/10/2022
 14966 000019D1 2EA3[AC19]              		mov	[cs:ROOTSEC], ax
 14967                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14968                                  					; 0070h:3EFFh =	2C7h:198Fh
 14969 000019D5 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14970                                  					; # root dir entries
 14971 000019D9 B104                    		mov	cl, 4		; 16 entries/sector
 14972 000019DB D3E8                    		shr	ax, cl		; divide by 16
 14973                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 14974                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 14975 000019DD 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 14976                                  next_sec:
 14977 000019DE 51                      		push	cx		; save outer loop counter
 14978 000019DF 2EA1[AC19]              		mov	ax, [cs:ROOTSEC]
 14979                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14980                                  					; get sector #
 14981 000019E3 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14982                                  					; sectors / track
 14983 000019E7 31D2                    		xor	dx, dx
 14984 000019E9 F7F1                    		div	cx
 14985                                  
 14986                                  ; set up registers for call to read_sector
 14987                                  
 14988 000019EB 42                      		inc	dx		; dx= sectors into track
 14989                                  					; ax= track count from 0
 14990 000019EC 88D1                    		mov	cl, dl		; sector to read
 14991 000019EE 31D2                    		xor	dx, dx
 14992 000019F0 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14993                                  					; # heads on this disc
 14994 000019F4 88D6                    		mov	dh, dl		; head number
 14995 000019F6 88C5                    		mov	ch, al		; track	#
 14996 000019F8 E81BEE                  		call	read_sector	; get first sector of the root directory,
 14997                                  					; ds:bx	-> directory sector
 14998 000019FB 723F                    		jb	short readviderr
 14999 000019FD B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 15000 00001A00 B008                    		mov	al, 8		; volume label bit
 15001                                  fvid_loop:
 15002                                  		; 02/09/2023 (PCDOS 7.1)
 15003 00001A02 382F                    		cmp	[bx], ch ; 0				
 15004                                  		;cmp	byte [bx], 0 ; end of dir?
 15005 00001A04 7433                    		jz	short no_vid	; yes, no vol id
 15006 00001A06 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 15007 00001A09 7405                    		jz	short ent_loop	; yes, skip
 15008 00001A0B 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 15009 00001A0E 750F                    		jnz	short found_vid	; jmp yes
 15010                                  ent_loop:
 15011 00001A10 83C320                  		add	bx, 32		; add length of	directory entry
 15012 00001A13 E2ED                    		loop	fvid_loop
 15013 00001A15 59                      		pop	cx		; outer loop
 15014 00001A16 2EFF06[AC19]            		inc	word [cs:ROOTSEC]
 15015                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 15016                                  					; next sector
 15017 00001A1B E2C1                    		loop	next_sec	; continue
 15018                                  notfound:
 15019                                  		; 02/09/2023
 15020                                  		;xor	si, si
 15021 00001A1D EB13                    		jmp	short fvid_ret
 15022                                  ; ---------------------------------------------------------------------------
 15023                                  
 15024                                  found_vid:
 15025                                  		; 02/09/2023
 15026                                  		; cf = 0  ('test' instruction clears cf)  			
 15027 00001A1F 59                      		pop	cx		; clean stack of outer loop counter
 15028 00001A20 89DE                    		mov	si, bx		; point	to volume_id
 15029 00001A22 06                      		push	es		; preserve current bds
 15030 00001A23 57                      		push	di
 15031 00001A24 1E                      		push	ds
 15032 00001A25 07                      		pop	es		; point es to Bios_Data
 15033 00001A26 BF[AB08]                		mov	di, tmp_vid	; "NO NAME	 "
 15034 00001A29 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 15035                                  					; length of string minus nul
 15036 00001A2C F3A4                    		rep movsb		; mov volume label to tmp_vid
 15037                                  		;xor	al, al
 15038                                  		; 02/09/2023
 15039 00001A2E 91                      		xchg	ax, cx		; ax = 0
 15040 00001A2F AA                      		stosb			; null terminate
 15041                                  		;;xor	si, si
 15042                                  		; 02/09/2023
 15043                                  		;xchg	ax, si		; si = 0
 15044 00001A30 5F                      		pop	di		; restore current bds
 15045 00001A31 07                      		pop	es
 15046                                  fvid_ret:
 15047                                  		; 02/09/2023
 15048 00001A32 31F6                    		xor	si, si ; 0
 15049                                  				
 15050 00001A34 58                      		pop	ax
 15051                                  		; 10/12/2022
 15052                                  		; cf = 0
 15053                                  		;clc
 15054                                  rvidret:
 15055 00001A35 5B                      		pop	bx		; restore registers
 15056 00001A36 59                      		pop	cx
 15057 00001A37 5A                      		pop	dx
 15058 00001A38 C3                      		retn
 15059                                  ; ---------------------------------------------------------------------------
 15060                                  
 15061                                  no_vid:
 15062 00001A39 59                      		pop	cx		; clean stack of outer loop counter
 15063                                  		;jmp	short notfound	; not found
 15064                                  		; 02/09/2023
 15065 00001A3A EBF6                    		jmp	short fvid_ret
 15066                                  ; ---------------------------------------------------------------------------
 15067                                  
 15068                                  readviderr:
 15069 00001A3C 5E                      		pop	si		; trash the outer loop counter
 15070 00001A3D 5E                      		pop	si		; caller's ax, return error code instead 
 15071 00001A3E EBF5                    		jmp	short rvidret
 15072                                  
 15073                                  ; ---------------------------------------------------------------------------
 15074                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 15075                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 15076                                  preset_volid_addr:
 15077 00001A40 BE[AB08]                		mov	si, tmp_vid	; "NO NAME    "
 15078                                  		;
 15079                                  		; PCDOS 7.1
 15080                                  		;add	di, 125		; BDS.volid
 15081                                  		;mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 15082                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 15083 00001A43 83C74B                  		add	di, 75		; BDS.volid
 15084 00001A46 B90C00                  		mov	cx, 12		; VOLID_SIZ
 15085                                  		;
 15086 00001A49 FC                      		cld
 15087 00001A4A C3                      		retn
 15088                                  
 15089                                  ; =============== S U B	R O U T	I N E =======================================
 15090                                  
 15091                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 15092                                  ;
 15093                                  ; inputs:	es:di has current bds
 15094                                  ; outputs:	bds for drive has volume id from tmp
 15095                                  
 15096                                  transfer_volume_id:
 15097 00001A4B 57                      		push	di		; copy the volume id from tmp to special drive
 15098 00001A4C 56                      		push	si
 15099 00001A4D 51                      		push	cx
 15100                                  		
 15101                                  		;mov	si, tmp_vid	; "NO NAME	 "
 15102                                  		;;add	di, BDS.volid
 15103                                  		;add	di, 75		; BDS.volid
 15104                                  		;;mov	cx, VOLID_SIZ
 15105                                  		;mov	cx, 12		; VOLID_SIZ
 15106                                  		;cld
 15107                                  		; 02/09/2023 (PCDOS 7.1)
 15108 00001A4E E8EFFF                  		call	preset_volid_addr
 15109                                  
 15110 00001A51 F3A4                    		rep movsb
 15111 00001A53 59                      		pop	cx
 15112 00001A54 5E                      		pop	si
 15113 00001A55 5F                      		pop	di
 15114 00001A56 C3                      		retn
 15115                                  
 15116                                  ; =============== S U B	R O U T	I N E =======================================
 15117                                  
 15118                                  ;  check_volume_id - compare volume id in tmp area with
 15119                                  ;		     one expected for drive
 15120                                  ;
 15121                                  ;   inputs:	es:di has current bds for drive
 15122                                  ;   outputs:	zero true means it matched
 15123                                  
 15124                                  check_volume_id:
 15125 00001A57 57                      		push	di
 15126 00001A58 51                      		push	cx
 15127                                  		
 15128                                  		;mov	si, tmp_vid	; "NO NAME	 "
 15129                                  		;;add	di, BDS.volid
 15130                                  		;add	di, 75		; BDS.volid
 15131                                  		;;mov	cx, VOLID_SIZ
 15132                                  		;mov	cx, 12		; VOLID_SIZ
 15133                                  		;cld
 15134                                  		; 02/09/2023 (PCDOS 7.1)
 15135 00001A59 E8E4FF                  		call	preset_volid_addr
 15136                                  
 15137 00001A5C F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 15138 00001A5E 59                      		pop	cx
 15139 00001A5F 5F                      		pop	di
 15140 00001A60 C3                      		retn
 15141                                  
 15142                                  ; =============== S U B	R O U T	I N E =======================================
 15143                                  
 15144                                  ;   fat_check - see of the fatid has changed in the specified drive.
 15145                                  ;	      - uses the fat id obtained from the boot sector.
 15146                                  ;
 15147                                  ;   inputs:	medbyt is expected fat id
 15148                                  ;		es:di points to current bds
 15149                                  ;
 15150                                  ;   output:	si = -1 if fat id different,
 15151                                  ;		si = 0 otherwise
 15152                                  ;
 15153                                  ;   no other registers changed.
 15154                                  
 15155                                  fat_check:		
 15156 00001A61 50                      		push	ax
 15157 00001A62 31F6                    		xor	si, si		; say fat id's are same.
 15158 00001A64 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 15159 00001A67 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 15160                                  					; compare it with the bds medbyte
 15161 00001A6B 7401                    		jz	short okret1	; carry	clear
 15162 00001A6D 4E                      		dec	si
 15163                                  okret1:					
 15164 00001A6E 58                      		pop	ax
 15165 00001A6F C3                      		retn
 15166                                  
 15167                                  ; ---------------------------------------------------------------------------
 15168                                  
 15169                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 15170                                  		;times 7 db 0
 15171                                  
 15172                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 15173                                  
 15174                                  		; 09/12/2022
 15175                                  		;times 4 db 0	; 17/10/2022
 15176                                  		;db 4 dup(0)	; times 4 db 0
 15177                                  
 15178                                  ; ---------------------------------------------------------------------------
 15179                                  
 15180                                  		; 09/12/2022
 15181                                  		;db 0
 15182                                  
 15183                                  number2div	equ ($-BCode_start)
 15184                                  number2mod	equ (number2div % 16)
 15185                                  
 15186                                  %if number2mod>0 & number2mod<16
 15187 00001A70 00<rep 10h>             		times (16-number2mod) db 0
 15188                                  %endif
 15189                                  
 15190                                  ;align 16
 15191                                  
 15192                                  ; 09/12/2022
 15193                                  BCODE_END	equ $ - BCode_start
 15194                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 15195                                  ; 13/12/2022
 15196                                  SYSINITOFFSET	equ BCODE_END
 15197                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 15198                                  
 15199                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 15200                                  
 15201                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15202                                  ; 01/05/2019 - Retro DOS v4.0 
 15203                                  ; ============================================================================
 15204                                  ; end of BIOSCODE
 15205                                  
 15206                                  ; ----------------------------------------------------------------------------
 15207                                  ; %include sysinit5.s	; 09/12/2022
 15208                                  ; ----------------------------------------------------------------------------
 15209                                  
 15210                                  ;=============================================================================
 15211                                  ; (IO.SYS) SYSINIT SEGMENT 
 15212                                  ;=============================================================================
 15213                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15214                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 15215                                  
 15216                                  section .SYSINIT vstart=0
 15217                                  
 15218                                  ; ****************************************************************************
 15219                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 15220                                  ; ----------------------------------------------------------------------------
 15221                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 15222                                  ; ----------------------------------------------------------------------------
 15223                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 15224                                  ; ----------------------------------------------------------------------------
 15225                                  ; Assembler: NASM version 2.15
 15226                                  ; ----------------------------------------------------------------------------
 15227                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 15228                                  ; ----------------------------------------------------------------------------
 15229                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 15230                                  ; ----------------------------------------------------------------------------
 15231                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 15232                                  ; source code by Microsoft, 1991 
 15233                                  ; ----------------------------------------------------------------------------
 15234                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 15235                                  ; by Microsoft, 12/10/1983
 15236                                  ; ****************************************************************************
 15237                                  ; main file: 'retrodos4.s'
 15238                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 15239                                  
 15240                                  ; 30/12/2022 - Retro DOS v4.2 
 15241                                  ; Retro DOS v4.0 - 2019
 15242                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 15243                                   
 15244                                  ; 21/10/2022
 15245                                  ; ----------------------------------------------------------------------------
 15246                                  ; This source code (version) is based on SYSINIT source code of disassembled
 15247                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 15248                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 15249                                  ; ----------------------------------------------------------------------------
 15250                                  ; Binary file splitter & joiner: FFSJ v3.3
 15251                                  
 15252                                  ;--------------------------------------------------------------
 15253                                  ; SYSINIT.TXT (27/01/1983)
 15254                                  ;--------------------------------------------------------------
 15255                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 15256                                  ;over  the  system  initialization  after  the  OEM  bios   has
 15257                                  ;performed any  initialization  it  needs  to  do.   Control is
 15258                                  ;transfered with a long jump to the external  variable  SYSINIT
 15259                                  ;
 15260                                  ;
 15261                                  ;   The OEM  has  the  following  variables declared external:
 15262                                  ;
 15263                                  ;   CURRENT_DOS_LOCATION    WORD
 15264                                  ;
 15265                                  ;This word  contains  the  segment  number of the DOS before it
 15266                                  ;is relocated.  The OEM bios must set this value.
 15267                                  ;
 15268                                  ;   FINAL_DOS_LOCATION      WORD
 15269                                  ;
 15270                                  ;This word contains the segment number of the DOS after SYSINIT
 15271                                  ;moves it.  The OEM bios must set this value.
 15272                                  ;
 15273                                  ;   DEVICE_LIST             DWORD
 15274                                  ;
 15275                                  ;This  double  word  pointer  points  to  the  linked  list  of
 15276                                  ;character and block device drivers.  The  OEM  must  set  this
 15277                                  ;value.
 15278                                  ;
 15279                                  ;   MEMORY_SIZE             WORD
 15280                                  ;
 15281                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 15282                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 15283                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 15284                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 15285                                  ;and read it back until it gets a mismatch.
 15286                                  ;
 15287                                  ;   DEFAULT_DRIVE           BYTE
 15288                                  ;
 15289                                  ;This is  the initial default drive when the system first comes
 15290                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 15291                                  ;it then drive a is assumed.
 15292                                  ;
 15293                                  ;   BUFFERS                 BYTE
 15294                                  ;
 15295                                  ;This is  the  default  number of buffers for the system.  This
 15296                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15297                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 15298                                  ;
 15299                                  ;   FILES                   BYTE
 15300                                  ;
 15301                                  ;This is  the  default  number  of  files for the system.  This
 15302                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15303                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 15304                                  ;
 15305                                  ;   SYSINIT                 FAR
 15306                                  ;
 15307                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 15308                                  ;this label at the end of its INIT code.
 15309                                  ;
 15310                                  ;   The OEM  has  the  following  variables declared public:
 15311                                  ;
 15312                                  ;   RE_INIT                 FAR
 15313                                  ;
 15314                                  ;This is an entry point which allows the BIOS to do some INIT
 15315                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 15316                                  ;PRESERVED.  On entry DS points to the first available memory
 15317                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 15318                                  ;prefix which represents  the  "program"  currently  running.
 15319                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 15320                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 15321                                  ;that  no  memory  is  allocated to it, it is running in free
 15322                                  ;memory.
 15323                                  ;NOTES:
 15324                                  ;     At the time this routine is called SYSINIT occupies the
 15325                                  ;highest 10K of memory ("highest" is determined by the  value
 15326                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 15327                                  ;     Since this is called AFTER DOS is initialized, you can
 15328                                  ;make system calls.  This also implies that the code for this
 15329                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 15330                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 15331                                  ;     If you don't want  anything done just set this to point
 15332                                  ;at a FAR RET instruction.
 15333                                  
 15334                                  ; ----------------------------------------------------------------------
 15335                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 15336                                  ; ----------------------------------------------------------------------
 15337                                  
 15338                                  ;include version.inc
 15339                                  ; ----------------------------------------------------------------------
 15340                                  
 15341                                  ;FALSE   EQU     0
 15342                                  ;TRUE    EQU     0FFFFh
 15343                                  
 15344                                  ;IBMVER	    EQU     TRUE
 15345                                  ;IBMCOPYRIGHT EQU   FALSE
 15346                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 15347                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 15348                                  ;MSVER      EQU     FALSE
 15349                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 15350                                  ;KANJI      EQU     FALSE
 15351                                  
 15352                                  ;(MSDOS 6.0, versiona.inc, 1991)
 15353                                  ; ----------------------------------------------------------------------
 15354                                  ;MAJOR_VERSION  EQU	6
 15355                                  ;;MINOR_VERSION	EQU	0	;6.00
 15356                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 15357                                  
 15358                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 15359                                  ; ----------------------------------------------------------------------
 15360                                  ;MAJOR_VERSION   EQU	5
 15361                                  ;MINOR_VERSION   EQU	0
 15362                                  
 15363                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 15364                                  MAJOR_VERSION   EQU	6
 15365                                  MINOR_VERSION   EQU	22
 15366                                  
 15367                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 15368                                  
 15369                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 15370                                  				; currently 0.
 15371                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 15372                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 15373                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 15374                                  
 15375                                  ;      if1
 15376                                  ;      %OUT  ... for DOS Version 5.00 ...
 15377                                  ;      endif
 15378                                  
 15379                                         ;******************************
 15380                                         ;Each assembler program should:
 15381                                         ;  mov ah,030h                   ;DOS Get Version function
 15382                                         ;  int 021h                      ;Version ret. in AX,minor version first
 15383                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 15384                                         ;  jne error_handler             ; EXACT version match.
 15385                                         ;******************************
 15386                                  
 15387                                  ; ----------------------------------------------------------------------
 15388                                  ; device definitions
 15389                                  
 15390                                  ;Attribute bit masks
 15391                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 15392                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 15393                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 15394                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 15395                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 15396                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 15397                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 15398                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 15399                                  
 15400                                  ; The device table list has the form:
 15401                                  struc	SYSDEV
 15402 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 15403 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 15404 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 15405 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 15406 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 15407                                  .size:
 15408                                  endstruc
 15409                                  
 15410                                  ;Static Reguest Header
 15411                                  struc	SRHEAD
 15412 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 15413 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 15414 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 15415 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 15416 00000005 ????????????????                	resb 8		;Reserved for queue links
 15417                                  .size:
 15418                                  endstruc
 15419                                  
 15420                                  ;Status word masks
 15421                                  STERR   EQU     8000H           ;Bit 15 - Error
 15422                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 15423                                  STDON   EQU     0100H           ;Bit 8 - Done
 15424                                  STECODE EQU     00FFH           ;Error code
 15425                                  WRECODE EQU     0
 15426                                  
 15427                                  ;Function codes
 15428                                  DEVINIT EQU     0               ;Initialization
 15429                                  DINITHL EQU     26              ;Size of init header
 15430                                  DEVMDCH EQU     1               ;Media check
 15431                                  DMEDHL  EQU     15              ;Size of media check header
 15432                                  DEVBPB  EQU     2               ;Get BPB
 15433                                  DEVRDIOCTL EQU  3               ;IOCTL read
 15434                                  DBPBHL  EQU     22              ;Size of Get BPB header
 15435                                  DEVRD   EQU     4               ;Read
 15436                                  DRDWRHL EQU     22              ;Size of RD/WR header
 15437                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 15438                                  DRDNDHL EQU     14              ;Size of non destructive read header
 15439                                  DEVIST  EQU     6               ;Input status
 15440                                  DSTATHL EQU     13              ;Size of status header
 15441                                  DEVIFL  EQU     7               ;Input flush
 15442                                  DFLSHL  EQU     15              ;Size of flush header
 15443                                  DEVWRT  EQU     8               ;Write
 15444                                  DEVWRTV EQU     9               ;Write with verify
 15445                                  DEVOST  EQU     10              ;Output status
 15446                                  DEVOFL  EQU     11              ;Output flush
 15447                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15448                                  
 15449                                  ; ----------------------------------------------------------------------
 15450                                  struc	SYS_FCB
 15451 00000000 ??                      .fcb_drive:	resb 1
 15452 00000001 ????????????????        .fcb_name:	resb 8
 15453 00000009 ??????                  .fcb_ext:	resb 3
 15454 0000000C ????                    .fcb_EXTENT:	resw 1
 15455 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15456 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15457                                                          ; word
 15458 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15459 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15460 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15461 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15462                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15463                                                          ; If file, bit 6=0 if dirty
 15464                                                          ; If I/O device, bit 6=0 if EOF (input)
 15465                                                          ;               Bit 5=1 if Raw mode
 15466                                                          ;               Bit 0=1 if console input device
 15467                                                          ;               Bit 1=1 if console output device
 15468                                                          ;               Bit 2=1 if null device
 15469                                                          ;               Bit 3=1 if clock device
 15470 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15471 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15472 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15473 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15474 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15475 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15476                                  .size:
 15477                                  endstruc
 15478                                  
 15479                                  ; ----------------------------------------------------------------------
 15480                                  ; Field definition for I/O buffer information
 15481                                  
 15482                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15483                                  
 15484                                  struc buffinfo
 15485 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15486 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15487 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15488                                  			; SFT table index (bit 7 = 1)
 15489                                  			; = FFh if buffer free
 15490 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15491                                  			;	= 0 if Local device buffer
 15492                                  			; Bit 6 = 1 if buffer dirty
 15493                                  			; Bit 5 = Reserved
 15494                                  			; Bit 4 = Search bit (bit 7 = 1)
 15495                                  			; Bit 3 = 1 if buffer is DATA
 15496                                  			; Bit 2 = 1 if buffer is DIR
 15497                                  			; Bit 1 = 1 if buffer is FAT
 15498                                  			; Bit 0 = Reserved
 15499 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15500                                  ; The next two items are often refed as a word (bit 7 = 0)
 15501 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15502 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15503 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15504 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15505 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15506                                  .size:
 15507                                  endstruc
 15508                                  
 15509                                  %define buf_offset	dword [buf_sector]
 15510                                  			;For bit 7 = 1, this is the byte
 15511                                  			;offset of the start of the buffer in
 15512                                  			;the file pointed to by buf_ID.  Thus
 15513                                  			;the buffer starts at location
 15514                                  			;buf_offset in the file and contains
 15515                                  			;buf_fill bytes.
 15516                                  
 15517                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15518                                  
 15519                                  
 15520                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15521                                  
 15522                                  ;Flag byte masks
 15523                                  buf_isnet	EQU	10000000B
 15524                                  buf_dirty	EQU	01000000B
 15525                                  ;***
 15526                                  buf_visit	EQU	00100000B
 15527                                  ;***
 15528                                  buf_snbuf	EQU	00010000B
 15529                                  
 15530                                  buf_isDATA	EQU	00001000B
 15531                                  buf_isDIR	EQU	00000100B
 15532                                  buf_isFAT	EQU	00000010B
 15533                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15534                                  
 15535                                  buf_NetID	EQU	bufinsiz
 15536                                  
 15537                                  ; ----------------------------------------------------------------------
 15538                                  
 15539                                  ; ----------------------------------------------------------------------
 15540                                  ;**	DPB - Drive Parameter Block
 15541                                  
 15542                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15543                                  
 15544                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15545                                  ;	possibly inaccurate deductions from code study... - jgl
 15546                                  ;
 15547                                  ;	The DPB is DOS's main structure for describing block devices.
 15548                                  ;	It contains info about the "Drive" intermingled with info about
 15549                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15550                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15551                                  ;
 15552                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15553                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15554                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15555                                  
 15556                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15557                                  
 15558                                  ; 12/05/2019 - Retro DOS v4.0
 15559                                  
 15560                                  struc	DPB
 15561 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15562 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15563 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15564 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15565 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15566 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15567 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15568 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15569 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15570 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15571                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15572 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15573 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15574 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15575 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15576 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15577                                  				; check the first time this DPB is used
 15578 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15579 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15580 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15581                                  .size:
 15582                                  endstruc
 15583                                  
 15584                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15585                                  
 15586                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15587                                  
 15588                                  ; ----------------------------------------------------------------------
 15589                                  ; 26/03/2018
 15590                                  
 15591                                  ; IOCTL SUB-FUNCTIONS
 15592                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15593                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15594                                  IOCTL_READ_HANDLE	EQU	2
 15595                                  IOCTL_WRITE_HANDLE	EQU	3
 15596                                  IOCTL_READ_DRIVE	EQU	4
 15597                                  IOCTL_WRITE_DRIVE	EQU	5
 15598                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15599                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15600                                  IOCTL_CHANGEABLE?	EQU	8
 15601                                  IOCTL_SHARING_RETRY	EQU	11
 15602                                  GENERIC_IOCTL_HANDLE	EQU	12
 15603                                  GENERIC_IOCTL		EQU	13
 15604                                  
 15605                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15606                                  RAWIO			EQU	8
 15607                                  
 15608                                  ; RAWIO SUB-FUNCTIONS
 15609                                  GET_DEVICE_PARAMETERS	EQU	60H
 15610                                  SET_DEVICE_PARAMETERS	EQU	40H
 15611                                  READ_TRACK		EQU	61H
 15612                                  WRITE_TRACK		EQU	41H
 15613                                  VERIFY_TRACK		EQU	62H
 15614                                  FORMAT_TRACK		EQU	42H
 15615                                  
 15616                                  ; DEVICETYPE VALUES
 15617                                  MAX_SECTORS_IN_TRACK	EQU	63
 15618                                  DEV_5INCH		EQU	0
 15619                                  DEV_5INCH96TPI		EQU	1
 15620                                  DEV_3INCH720KB		EQU	2
 15621                                  DEV_8INCHSS		EQU	3
 15622                                  DEV_8INCHDS		EQU	4
 15623                                  DEV_HARDDISK		EQU	5
 15624                                  DEV_OTHER		EQU	7
 15625                                  ;DEV_3INCH1440KB	EQU	7
 15626                                  DEV_3INCH2880KB		EQU	9
 15627                                  ; Retro DOS v2.0 - 26/03/2018
 15628                                  ;;DEV_TAPE		EQU	6
 15629                                  ;;DEV_ERIMO		EQU	8
 15630                                  ;DEV_3INCH2880KB	EQU	9
 15631                                  DEV_3INCH1440KB		EQU	10
 15632                                  
 15633                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15634                                  					; CURRENTLY SUPPORT.
 15635                                  MAX_DEV_TYPE		EQU	10
 15636                                  
 15637                                  struc A_SECTORTABLE
 15638 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15639 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15640                                  .size:
 15641                                  endstruc
 15642                                  
 15643                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15644                                  
 15645                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15646                                  ;
 15647                                  ;	The BPB contains information about the disk structure.  It dates
 15648                                  ;	back to the earliest FAT systems and so FAT information is
 15649                                  ;	intermingled with physical driver information.
 15650                                  ;
 15651                                  ;	A boot sector contains a BPB for its device; for other disks
 15652                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15653                                  ;	information in the DPB.
 15654                                  ;
 15655                                  ;	The BDS structure contains a BPB within it.
 15656                                  
 15657                                  struc A_BPB
 15658 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15659 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15660 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15661 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15662 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15663 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15664 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15665 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15666 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15667 0000000F ????                    .BPB_HEADS:		resw	1
 15668 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15669 00000013 ????                    			resw	1
 15670 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15671 00000017 ????                    			resw	1
 15672 00000019 ????????????            			resb	6	; NOTE:  many times these
 15673                                  ;					; 	 6 bytes are omitted
 15674                                  ;					;	 when BPB manipulations
 15675                                  ;					;	 are performed!
 15676                                  .size:
 15677                                  endstruc
 15678                                  
 15679                                  struc A_DEVICEPARAMETERS
 15680 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15681 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15682 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15683 00000004 ????                    .DP_CYLINDERS:		resw	1
 15684 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15685 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15686 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15687 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15688                                  endstruc
 15689                                  
 15690                                  ; ----------------------------------------------------------------------
 15691                                  ; structure, equates for devmark for mem command.
 15692                                  
 15693                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15694                                  
 15695                                  struc devmark
 15696 00000000 ??                       .id:	    resb 1
 15697 00000001 ????                     .seg:	    resw 1
 15698 00000003 ????                     .size:	    resw 1
 15699 00000005 ??????                   .dum:	    resb 3
 15700 00000008 ????????????????         .filename: resb 8
 15701                                  endstruc
 15702                                  
 15703                                  devmark_stk	equ	'S'
 15704                                  devmark_device	equ	'D'
 15705                                  devmark_ifs	equ	'I'
 15706                                  devmark_buf	equ	'B'
 15707                                  devmark_cds	equ	'L' ; lastdrive
 15708                                  devmark_files	equ	'F'
 15709                                  devmark_fcbs	equ	'X'
 15710                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15711                                  devmark_ems_stub equ	'E'
 15712                                  
 15713                                  setbrkdone	equ	00000001b
 15714                                  for_devmark	equ	00000010b
 15715                                  not_for_devmark equ	11111101b
 15716                                  
 15717                                  ; ----------------------------------------------------------------------
 15718                                  ; Memory arena structure
 15719                                  
 15720                                  ; 24/03/2019 - Retro DOS v4.0 
 15721                                  ; (MSDOS 6.0, ARENA.INC)
 15722                                  
 15723                                  ;** Arena Header
 15724                                  
 15725                                  struc ARENA
 15726 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15727 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15728 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15729 00000005 ??????                  .RESERVED	resb 3		; reserved
 15730 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15731                                  endstruc
 15732                                  
 15733                                  ; 12/04/2019
 15734                                  
 15735                                  arena_owner_system	EQU 0	; free block indication
 15736                                  
 15737                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15738                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15739                                  
 15740                                  ; ----------------------------------------------------------------------
 15741                                  ; Process data block (otherwise known as program header)
 15742                                  
 15743                                  ; 23/03/2019 - Retro DOS v4.0
 15744                                  
 15745                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15746                                  
 15747                                  FILPERPROC	EQU     20
 15748                                  
 15749                                  struc PDB	; Process_data_block
 15750 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15751 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15752 00000004 ??                                      resb 1
 15753 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15754 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15755 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15756 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15757 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15758 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15759 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15760 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15761 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15762 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15763 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15764 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15765 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15766 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15767 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15768 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15769 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15770 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15771 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15772 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15773 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15774 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15775                                  ;.size:
 15776                                  endstruc
 15777                                  
 15778                                  ; ----------------------------------------------------------------------
 15779                                  ; <system call definitions>
 15780                                  
 15781                                  ; 23/03/2019 - Retro DOS v4.0
 15782                                  
 15783                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15784                                  
 15785                                  ABORT                           EQU 0   ;  0      0
 15786                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15787                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15788                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15789                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15790                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15791                                  RAW_CON_IO                      EQU 6   ;  6      6
 15792                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15793                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15794                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15795                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15796                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15797                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15798                                  DISK_RESET                      EQU 13  ; 13      D
 15799                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15800                                  FCB_OPEN                        EQU 15  ; 15      F
 15801                                  FCB_CLOSE                       EQU 16  ; 16     10
 15802                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15803                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15804                                  FCB_DELETE                      EQU 19  ; 19     13
 15805                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15806                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15807                                  FCB_CREATE                      EQU 22  ; 22     16
 15808                                  FCB_RENAME                      EQU 23  ; 23     17
 15809                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15810                                  SET_DMA                         EQU 26  ; 26     1A
 15811                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15812                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15813                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15814                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15815                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15816                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15817                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15818                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15819                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15820                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15821                                  GET_DATE                        EQU 42  ; 42     2A
 15822                                  SET_DATE                        EQU 43  ; 43     2B
 15823                                  GET_TIME                        EQU 44  ; 44     2C
 15824                                  SET_TIME                        EQU 45  ; 45     2D
 15825                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15826                                  ; Extended functionality group
 15827                                  GET_DMA                         EQU 47  ; 47     2F
 15828                                  GET_VERSION                     EQU 48  ; 48     30
 15829                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15830                                  GET_DPB                         EQU 50  ; 50     32
 15831                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15832                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15833                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15834                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15835                                  CHAR_OPER                       EQU 55  ; 55     37
 15836                                  INTERNATIONAL                   EQU 56  ; 56     38
 15837                                  ;   Directory Group
 15838                                  MKDIR                           EQU 57  ; 57     39
 15839                                  RMDIR                           EQU 58  ; 58     3A
 15840                                  CHDIR                           EQU 59  ; 59     3B
 15841                                  ;   File Group
 15842                                  CREAT                           EQU 60  ; 60     3C
 15843                                  OPEN                            EQU 61  ; 61     3D
 15844                                  CLOSE                           EQU 62  ; 62     3E
 15845                                  READ                            EQU 63  ; 63     3F
 15846                                  WRITE                           EQU 64  ; 64     40
 15847                                  UNLINK                          EQU 65  ; 65     41
 15848                                  LSEEK                           EQU 66  ; 66     42
 15849                                  CHMOD                           EQU 67  ; 67     43
 15850                                  IOCTL                           EQU 68  ; 68     44
 15851                                  XDUP                            EQU 69  ; 69     45
 15852                                  XDUP2                           EQU 70  ; 70     46
 15853                                  CURRENT_DIR                     EQU 71  ; 71     47
 15854                                  ;    Memory Group
 15855                                  ALLOC                           EQU 72  ; 72     48
 15856                                  DEALLOC                         EQU 73  ; 73     49
 15857                                  SETBLOCK                        EQU 74  ; 74     4A
 15858                                  ;    Process Group
 15859                                  EXEC                            EQU 75  ; 75     4B
 15860                                  EXIT                            EQU 76  ; 76     4C
 15861                                  WAITPROCESS			EQU 77  ; 77     4D
 15862                                  FIND_FIRST                      EQU 78  ; 78     4E
 15863                                  ;   Special Group
 15864                                  FIND_NEXT                       EQU 79  ; 79     4F
 15865                                  ; SPECIAL SYSTEM GROUP
 15866                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15867                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15868                                  GET_IN_VARS                     EQU 82  ; 82     52
 15869                                  SETDPB                          EQU 83  ; 83     53
 15870                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15871                                  DUP_PDB                         EQU 85  ; 85     55
 15872                                  RENAME                          EQU 86  ; 86     56
 15873                                  FILE_TIMES                      EQU 87  ; 87     57
 15874                                  ;
 15875                                  ALLOCOPER			EQU 88	; 88     58	
 15876                                  ; Network extention system calls
 15877                                  GetExtendedError		EQU 89	; 89	 59
 15878                                  CreateTempFile			EQU 90	; 90	 5A
 15879                                  CreateNewFile			EQU 91	; 91	 5B
 15880                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15881                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15882                                  					;	    CloseByName, CloseUser,
 15883                                  					;	    CloseUserProcess,
 15884                                  					;	    GetOpenFileList
 15885                                  UserOper			EQU 94	; 94	 5E Get and Set
 15886                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15887                                  xNameTrans			EQU 96	; 96	 60
 15888                                  PathParse			EQU 97	; 97	 61
 15889                                  GetCurrentPSP			EQU 98	; 98	 62
 15890                                  Hongeul 			EQU 99	; 99	 63
 15891                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15892                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15893                                  GetExtCntry			EQU 101 ; 101	 65
 15894                                  GetSetCdPg			EQU 102 ; 102	 66
 15895                                  ExtHandle			EQU 103 ; 103	 67
 15896                                  Commit				EQU 104 ; 104	 68
 15897                                  GetSetMediaID			EQU 105 ; 105	 69
 15898                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15899                                  ExtOpen 			EQU 108 ; 108	 6C
 15900                                  ;
 15901                                  ;ifdef ROMEXEC
 15902                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15903                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15904                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15905                                  ;endif
 15906                                  ;
 15907                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15908                                  OEM_C1				EQU 249 ; 249	 F9
 15909                                  OEM_C2				EQU 250 ; 250	 FA
 15910                                  OEM_C3				EQU 251 ; 251	 FB
 15911                                  OEM_C4				EQU 252 ; 252	 FC
 15912                                  OEM_C5				EQU 253 ; 253	 FD
 15913                                  OEM_C6				EQU 254 ; 254	 FE
 15914                                  OEM_C7				EQU 255 ; 255	 FF
 15915                                  
 15916                                  ; ----------------------------------------------------------------------
 15917                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15918                                  ; ----------------------------------------------------------------------
 15919                                  
 15920                                  ;;	IF	STACKSW
 15921                                  
 15922                                  ;;
 15923                                  ;; Internal Stack Parameters
 15924                                  ;EntrySize		equ	8
 15925                                  ;
 15926                                  ;MinCount		equ	8
 15927                                  ;DefaultCount		equ	9
 15928                                  ;MaxCount		equ	64
 15929                                  ;
 15930                                  ;MinSize 		equ	32
 15931                                  ;DefaultSize		equ	128
 15932                                  ;MaxSize 		equ	512
 15933                                  
 15934                                  ;;	ENDIF
 15935                                  
 15936                                  ; ----------------------------------------------------------------------
 15937                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15938                                  ; ----------------------------------------------------------------------
 15939                                  					  ;;Rev 3.30 Modification
 15940                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15941                                  									  
 15942                                  ;*******************************					  
 15943                                  ;System Service call ( Int 15h )					  
 15944                                  ;*******************************					  
 15945                                  ;Function AH = 0C0h, Return system configuration			  
 15946                                  ;For PC and PCJR on return:						  
 15947                                  ;	(AH)	= 80h							  
 15948                                  ;	(CY)	= 1							  
 15949                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15950                                  ;	(AH)	= 86h							  
 15951                                  ;	(CY)	= 1							  
 15952                                  ;For all others:							  
 15953                                  ;	(AH)	= 0							  
 15954                                  ;	(CY)	= 0							  
 15955                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15956                                  ; System descriptor :							  
 15957                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15958                                  ;				minimum length = 8			  
 15959                                  ;	DB	xx		model byte				  
 15960                                  ;				0FFh	= PC				  
 15961                                  ;				0FEh	= PC/XT, Portable		  
 15962                                  ;				0FDh	= PC/JR 			  
 15963                                  ;				0FCh	= PC/AT				  
 15964                                  ;				0F9h	= Convertable			  
 15965                                  ;				0F8h	= Model 80			  
 15966                                  ;				0E0 thru 0EFh = reserved		  
 15967                                  ;									  
 15968                                  ;	DB	xx		secondary model byte			  
 15969                                  ;				000h	= PC1				  
 15970                                  ;				000h	= PC/XT, Portable		  
 15971                                  ;				000h	= PC/JR 			  
 15972                                  ;				000h	= PC/AT 			  
 15973                                  ;				001h	= PC/AT Model 339		  
 15974                                  ;				003h	= PC/RT				  
 15975                                  ;				000h	= Convertable			  
 15976                                  ;									  
 15977                                  ;	DB	xx		bios revision level			  
 15978                                  ;				00 for first release, subsequent release  
 15979                                  ;				of code with same model byte and	  
 15980                                  ;				secondary model byte require revison level
 15981                                  ;				to increase by one.			  
 15982                                  ;									  
 15983                                  ;	DB	xx		feature information byte 1		  
 15984                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15985                                  ;					 = 0, DMA channel 3 not used	  
 15986                                  ;									  
 15987                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15988                                  ;					 = 0, 2nd Interrupt chip not present
 15989                                  ;									  
 15990                                  ;				00X00000 = 1, Real Time Clock present	  
 15991                                  ;					 = 0, Real Time Clock not present 
 15992                                  ;									  
 15993                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15994                                  ;						called in keyboard interrupt
 15995                                  ;						(Int 09h).		  
 15996                                  ;					 = 0, Keyboard escape sequence not
 15997                                  ;						called. 		  
 15998                                  ;				0000XXXX reserved			  
 15999                                  ;									  
 16000                                  ;	DB	xx		feature information byte 2 - reserved	  
 16001                                  ;									  
 16002                                  ;	DB	xx		feature information byte 2 - reserved	  
 16003                                  ;									  
 16004                                  ;	DB	xx		feature information byte 2 - reserved	  
 16005                                  ;									  
 16006                                  ;	DB	xx		feature information byte 2 - reserved	  
 16007                                  ;									  
 16008                                  
 16009                                  ; 22/03/2019									  
 16010                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 16011 00000000 ????                    .bios_sd_leng:		resw 1				  
 16012 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 16013                                  .bios_sd_scnd_modelbyte: 
 16014 00000003 ??                      			resb 1					  
 16015 00000004 ??                      			resb 1					  
 16016 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 16017 00000006 ????????                			resb 4					  
 16018                                  endstruc					  
 16019                                  									  
 16020                                  ;FeatureByte1	bit map equates 					  
 16021                                  DMAchannel3		equ 10000000b					  
 16022                                  ScndIntController	equ 01000000b					  
 16023                                  RealTimeClock		equ 00100000b					  
 16024                                  KeyEscapeSeq		equ 00010000b					  
 16025                                  					;;End of Modification
 16026                                  
 16027                                  ; ----------------------------------------------------------------------
 16028                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 16029                                  ; ----------------------------------------------------------------------
 16030                                  ; 22/03/2019 - Retro DOS v4.0
 16031                                  
 16032                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 16033                                  
 16034                                  struc SysInitVars
 16035                                  ; MSDOS 3.3
 16036 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 16037 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 16038 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 16039 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 16040 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 16041 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 16042 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 16043 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 16044 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 16045 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 16046 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 16047 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 16048                                  ; MSDOS 6.0
 16049 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 16050 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 16051 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 16052 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 16053                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 16054 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 16055 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 16056 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 16057 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 16058 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 16059 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 16060 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 16061                                  .size:
 16062                                  endstruc
 16063                                  
 16064                                  ;This is added for more information exchage between DOS, BIOS.
 16065                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 16066                                  
 16067                                  ; 22/03/2019
 16068                                  struc SysInitVars_Ext
 16069 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 16070 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 16071                                  endstruc
 16072                                  
 16073                                  ; 09/06/2018
 16074                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 16075                                  SYSI_DPB    equ	0
 16076                                  SYSI_SFT    equ 4
 16077                                  SYSI_CLOCK  equ 8
 16078                                  SYSI_CON    equ 12
 16079                                  SYSI_MAXSEC equ 16
 16080                                  SYSI_BUF    equ 18 		
 16081                                  SYSI_CDS    equ 22
 16082                                  SYSI_FCB    equ 26
 16083                                  SYSI_KEEP   equ 30
 16084                                  SYSI_NUMIO  equ	32
 16085                                  SYSI_NCDS   equ	33
 16086                                  SYSI_DEV    equ 34
 16087                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 16088                                  SYSI_ATTR	  equ 38
 16089                                  SYSI_STRAT	  equ 40
 16090                                  SYSI_INTER	  equ 42
 16091                                  SYSI_NAME	  equ 44
 16092                                  SYSI_SPLICE	  equ 52
 16093                                  SYSI_IBMDOS_SIZE  equ 53
 16094                                  SYSI_IFS_DOSCALL@ equ 55
 16095                                  SYSI_IFS	  equ 59
 16096                                  SYSI_BUFFERS	  equ 63
 16097                                  SYSI_BOOT_DRIVE   equ 67
 16098                                  SYSI_DWMOVE	  equ 68
 16099                                  SYSI_EXT_MEM	  equ 69
 16100                                  
 16101                                  ;The SYSI_BUF of SysInitVars points to the following structure
 16102                                  
 16103                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 16104                                  
 16105                                  struc BUFFINF 	; BUFFINFO
 16106 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 16107 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 16108 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 16109 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 16110                                  
 16111 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 16112                                  				; are in HMA
 16113 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 16114                                  				;  used to read/write on disks
 16115 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 16116 00000015 ????                    .UU_EMS_NPA640:		resw 1
 16117 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 16118 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 16119 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 16120 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 16121 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 16122 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 16123 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 16124                                  .size:
 16125                                  endstruc
 16126                                  
 16127                                  ; ----------------------------------------------------------------------
 16128                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 16129                                  ; ----------------------------------------------------------------------
 16130                                  ; 22/03/2019 - Retro DOS v4.0
 16131                                  
 16132                                  ;**	CDS - Current Directory Structure
 16133                                  ;
 16134                                  ; CDS items are used bu the internal routines to store cluster numbers and
 16135                                  ; network identifiers for each logical name.  The ID field is used dually,
 16136                                  ; both as net ID and for a cluster number for local devices. In the case
 16137                                  ; of local devices, the cluster number will be -1 if there is a potential
 16138                                  ; of the disk being changed or if the path must be recracked.
 16139                                  ;
 16140                                  ;	Some pathnames have special preambles, such as
 16141                                  ;
 16142                                  ;		\\machine\sharename\...
 16143                                  ;	For these pathnames we can't allow ".." processing to back us
 16144                                  ;	up into the special front part of the name.  The CURDIR_END field
 16145                                  ;	holds the address of the seperator character which marks
 16146                                  ;	the split between the special preamble and the regular
 16147                                  ;	path list; ".." processing isn't allowed to back us up past
 16148                                  ;	(i.e., before) CURDIR_END
 16149                                  ;	For the root, it points at the leading /. For net
 16150                                  ;	assignments it points at the end (nul) of the initial assignment:
 16151                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 16152                                  ;	  ^		 ^		     ^
 16153                                  
 16154                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 16155                                  TEMPLEN 	EQU	DIRSTRLEN*2
 16156                                  
 16157                                  struc 		curdir_list
 16158                                  ; MSDOS 3.3
 16159 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 16160 00000043 ????                    .cdir_flags	resw	1		; various flags
 16161 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 16162 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 16163 0000004D ????                    .cdir_usr_word	resw	1
 16164 0000004F ????                    .cdir_end	resw	1		; end of assignment
 16165                                  ; MSDOS 6.0
 16166 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 16167 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 16168 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 16169                                  .size:
 16170                                  endstruc
 16171                                  
 16172                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 16173                                  						; ASM87 which doesn't allow
 16174                                  						; Size directive as a macro
 16175                                  						; argument
 16176                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 16177                                  
 16178                                  ;**	Flag values for CURDIR_FLAGS
 16179                                  
 16180                                  ;Flag word masks
 16181                                  curdir_isnet	EQU	1000000000000000B
 16182                                  curdir_isifs	EQU	1000000000000000B
 16183                                  curdir_inuse	EQU	0100000000000000B
 16184                                  curdir_splice	EQU	0010000000000000B
 16185                                  curdir_local	EQU	0001000000000000B
 16186                                  
 16187                                  ; ----------------------------------------------------------------------
 16188                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 16189                                  ; ----------------------------------------------------------------------
 16190                                  ; 25/03/2019 - Retro DOS v4.0
 16191                                  
 16192                                  ; system file table
 16193                                  
 16194                                  ;**	System File Table SuperStructure
 16195                                  ;
 16196                                  ;	The system file table entries are allocated in contiguous groups.
 16197                                  ;	There may be more than one such groups; the SF "superstructure"
 16198                                  ;	tracks the groups.
 16199                                  
 16200                                  struc	SF
 16201 00000000 ????????                .SFLink:	resd	1
 16202 00000004 ????                    .SFCount:	resw	1		; number of entries
 16203 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 16204                                  .size:
 16205                                  endstruc
 16206                                  
 16207                                  ;**	System file table entry
 16208                                  ;
 16209                                  ;	These are the structures which are at SFTABLE in the SF structure.
 16210                                  
 16211                                  struc	SF_ENTRY
 16212 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 16213                                  					;   if FCB then ref count
 16214 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 16215 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 16216 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 16217                                  					; Bit 15 = 1 if remote file
 16218                                  					;	 = 0 if local file or device
 16219                                  					; Bit 14 = 1 if date/time is not to be
 16220                                  					;   set from clock at CLOSE.  Set by
 16221                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 16222                                  					;   other reseters of the dirty bit
 16223                                  					;   (WRITE)
 16224                                  					; Bit 13 = Pipe bit (reserved)
 16225                                  					;
 16226                                  					; Bits 0-7 (old FCB_devid bits)
 16227                                  					; If remote file or local file, bit
 16228                                  					; 6=0 if dirty Device ID number, bits
 16229                                  					; 0-5 if local file.
 16230                                  					; bit 7=0 for local file, bit 7
 16231                                  					;      =1 for local I/O device
 16232                                  					; If local I/O device, bit 6=0 if EOF (input)
 16233                                  					;		Bit 5=1 if Raw mode
 16234                                  					;		Bit 0=1 if console input device
 16235                                  					;		Bit 1=1 if console output device
 16236                                  					;		Bit 2=1 if null device
 16237                                  					;		Bit 3=1 if clock device
 16238 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 16239                                  					; to device header if local device,
 16240                                  					; points to net device header if
 16241                                  					; remote
 16242 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 16243                                  ;.sf_lstclus:	resw	1 ; *	
 16244 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 16245 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 16246 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 16247 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 16248                                  ;
 16249                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 16250                                  ; ID
 16251                                  ;
 16252 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 16253 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 16254 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 16255                                  ;
 16256                                  ; End of 7 bytes of file-system specific info.
 16257                                  ;
 16258 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 16259                                  					; directory entry.  This is used by
 16260                                  					; close to detect file deleted and
 16261                                  					; disk changed errors.
 16262                                  ; SHARING INFO
 16263 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 16264 0000002D ????                    .sf_UID:	resw	1
 16265 0000002F ????                    .sf_PID:	resw	1
 16266 00000031 ????                    .sf_MFT:	resw	1
 16267 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 16268 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 16269                                  .size:
 16270                                  endstruc
 16271                                  
 16272                                  ; ----------------------------------------------------------------------
 16273                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 16274                                  ; ----------------------------------------------------------------------
 16275                                  ; 11/06/2018 - Retro DOS v3.0
 16276                                  
 16277                                  ;Equates for COUNTRY INFORMATION.
 16278                                  SetCountryInfo		EQU	1	;country info
 16279                                  SetUcase		EQU	2	;uppercase table
 16280                                  SetLcase		EQU	3	;lowercase table (Reserved)
 16281                                  SetUcaseFile		EQU	4	;uppercase file spec table
 16282                                  SetFileList		EQU	5	;valid file character list
 16283                                  SetCollate		EQU	6	;collating sequence
 16284                                  SetDBCS 		EQU	7	;double byte character set
 16285                                  SetALL			EQU	-1	;all the entries
 16286                                  
 16287                                  ;DOS country and code page information table structure.
 16288                                  ;Internally, IBMDOS gives a pointer to this table.
 16289                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 16290                                  ;this structure.
 16291                                  
 16292                                  struc country_cdpg_info ; DOS_country_cdpg_info
 16293 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 16294 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 16295 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 16296 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 16297 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 16298 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 16299                                  
 16300 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 16301 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 16302                                  
 16303 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 16304 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 16305                                  
 16306 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 16307 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 16308                                  
 16309 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 16310 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 16311 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 16312 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 16313 00000067 ????                    .ccDFormat:		resw	1	;date format
 16314 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 16315                                  					;5 byte of (currency symbol+0)
 16316 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 16317 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 16318 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 16319 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 16320 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 16321 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 16322 00000078 ??                      .ccTFormat:		resb	1	;time format
 16323 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 16324 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 16325 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 16326                                  .size:
 16327                                  endstruc
 16328                                  
 16329                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 16330                                  
 16331                                  ; ======================================================================
 16332                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 16333                                  ; ======================================================================
 16334                                  ; 21/03/2019 - Retro DOS v4.0
 16335                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16336                                  
 16337                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 16338                                  ; 21/10/2022
 16339                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 16340                                  ; 22/10/2022
 16341                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 16342                                  ; 09/12/2022
 16343                                  DOSBIOCODESEG equ IOSYSCODESEG
 16344                                  
 16345                                  ; Note: These offset addresses must be chanqed when the code 
 16346                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 16347                                  
 16348                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 16349                                  
 16350                                  ; 09/12/2022
 16351                                  %if 0
 16352                                  
 16353                                  ; 13/05/2019
 16354                                  
 16355                                  ;IsWin386         equ 08CFh
 16356                                  ;V86_Crit_SetFocus equ 08D0h
 16357                                  ; 21/10/2022
 16358                                  IsWin386          equ 08D0h
 16359                                  V86_Crit_SetFocus equ 08D1h 
 16360                                  
 16361                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 16362                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16363                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 16364                                  
 16365                                  ;SysinitPresent	  equ 08FCh
 16366                                  ; 21/10/2022
 16367                                  SysinitPresent	  equ 08FDh
 16368                                  
 16369                                  inHMA		  equ 000Dh
 16370                                  xms		  equ 000Eh
 16371                                  ;FreeHMAPtr	  equ 08F6h
 16372                                  ;multrk_flag	  equ 0533h
 16373                                  ;ec35_flag	  equ 0535h
 16374                                  ;EOT		  equ 012Eh
 16375                                  ; 21/10/2022
 16376                                  FreeHMAPtr	  equ 08F7h
 16377                                  multrk_flag	  equ 052Fh
 16378                                  ec35_flag	  equ 0531h
 16379                                  EOT		  equ 012Ch
 16380                                  
 16381                                  ;NextStack	  equ 08BFh
 16382                                  ;IT_StackLoc	  equ 08C5h
 16383                                  ;IT_StackSize	  equ 08C9h
 16384                                  ; 21/10/2022
 16385                                  NextStack	  equ 08C0h
 16386                                  IT_StackLoc	  equ 08C6h
 16387                                  IT_StackSize	  equ 08CAh
 16388                                  
 16389                                  ;MoveDOSIntoHMA	  equ 08F8h
 16390                                  ; 21/10/2022
 16391                                  MoveDOSIntoHMA	  equ 08F9h
 16392                                  
 16393                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 16394                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 16395                                  ; 21/10/2022
 16396                                  INT19SEM equ 0640h ; (iosys5.txt)
 16397                                  I19_LST  equ 0641h ; (iosys5.txt)
 16398                                  
 16399                                  %endif
 16400                                  
 16401                                  ; 09/12/2022
 16402                                  seg_reinit equ _seg_reinit
 16403                                  ec35_flag  equ ec35flag		
 16404                                  INT19SEM   equ int19sem
 16405                                  I19_LST    equ i19_lst
 16406                                  
 16407                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 16408                                  INT19OLD08 equ I19_LST+6
 16409                                  INT19OLD09 equ I19_LST+11
 16410                                  INT19OLD0A equ I19_LST+16
 16411                                  INT19OLD0B equ I19_LST+21
 16412                                  INT19OLD0C equ I19_LST+26
 16413                                  INT19OLD0D equ I19_LST+31
 16414                                  INT19OLD0E equ I19_LST+36
 16415                                  INT19OLD70 equ I19_LST+41
 16416                                  INT19OLD72 equ I19_LST+46
 16417                                  INT19OLD73 equ I19_LST+51
 16418                                  INT19OLD74 equ I19_LST+56
 16419                                  INT19OLD76 equ I19_LST+61
 16420                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 16421                                  
 16422                                  ; 09/12/2022
 16423                                  %if 0
 16424                                  
 16425                                  ;keyrd_func	equ 04E9h
 16426                                  ;keysts_func	equ 04EAh
 16427                                  ;t_switch	equ 04F6h
 16428                                  ; 21/10/2022
 16429                                  keyrd_func	equ 04E5h
 16430                                  keysts_func	equ 04E6h
 16431                                  t_switch	equ 04F2h
 16432                                  
 16433                                  ; 22/10/2022
 16434                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 16435                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 16436                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 16437                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 16438                                  
 16439                                  %endif
 16440                                  
 16441                                  ; 09/12/2022
 16442                                  BCODESTART	equ BIOSDATAWORD
 16443                                  RE_INIT		equ re_init
 16444                                  
 16445                                  ; ----------------------------------------------------------------------
 16446                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16447                                  ; ----------------------------------------------------------------------
 16448                                  ; 15/04/2019 - Retro DOS v4.0
 16449                                  
 16450                                  CONFIG_BEGIN        equ  '['
 16451                                  CONFIG_BREAK        equ  'C'
 16452                                  CONFIG_BUFFERS      equ  'B'
 16453                                  CONFIG_COMMENT      equ  'Y'
 16454                                  CONFIG_COUNTRY      equ  'Q'
 16455                                  CONFIG_DEVICE       equ  'D'
 16456                                  CONFIG_DEVICEHIGH   equ  'U'
 16457                                  CONFIG_DOS          equ  'H'
 16458                                  CONFIG_DRIVPARM     equ  'P'
 16459                                  CONFIG_FCBS         equ  'X'
 16460                                  CONFIG_FILES        equ  'F'
 16461                                  CONFIG_INCLUDE      equ  'J'
 16462                                  CONFIG_INSTALL      equ  'I'
 16463                                  CONFIG_INSTALLHIGH  equ  'W'
 16464                                  CONFIG_LASTDRIVE    equ  'L'
 16465                                  CONFIG_MENUCOLOR    equ  'R'
 16466                                  CONFIG_MENUDEFAULT  equ  'A'
 16467                                  CONFIG_MENUITEM     equ  'E'
 16468                                  CONFIG_MULTITRACK   equ  'M'
 16469                                  CONFIG_NUMLOCK      equ  'N'
 16470                                  CONFIG_REM          equ  '0'
 16471                                  CONFIG_SEMICOLON    equ  ';'
 16472                                  CONFIG_SET          equ  'V'
 16473                                  CONFIG_SHELL        equ  'S'
 16474                                  CONFIG_STACKS       equ  'K'
 16475                                  CONFIG_SUBMENU      equ  'O'
 16476                                  CONFIG_SWITCHES     equ  '1'
 16477                                  
 16478                                  CONFIG_UNKNOWN      equ  'Z'
 16479                                  
 16480                                  CONFIG_OPTION_QUERY equ 80h
 16481                                  
 16482                                  ; ----------------------------------------------------------------------
 16483                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16484                                  ; ----------------------------------------------------------------------
 16485                                  ; 21/03/2019 - Retro DOS v4.0
 16486                                  
 16487                                  true	equ	0FFFFh
 16488                                  false	equ	0
 16489                                  cr	equ	13
 16490                                  lf	equ	10
 16491                                  tab	equ	9
 16492                                  
 16493                                  multMULT	   equ	4Ah
 16494                                  multMULTGETHMAPTR  equ	1
 16495                                  multMULTALLOCHMA   equ	2
 16496                                  
 16497                                  ;NOEXEC    equ	FALSE
 16498                                  
 16499                                  stacksw    equ	true	;include switchable hardware stacks
 16500                                  mycds_size equ	88	;size of curdir_list. if it is not
 16501                                  			;the same, then will generate compile error.
 16502                                  
 16503                                  entrysize   equ     8
 16504                                  
 16505                                  mincount    equ     8
 16506                                  defaultcount equ    9
 16507                                  maxcount    equ     64
 16508                                  
 16509                                  minsize     equ     32
 16510                                  defaultsize equ     128
 16511                                  maxsize     equ     512
 16512                                  
 16513                                  ;%define allocbyte  byte [es:bp+0]
 16514                                  ;%define intlevel   byte [es:bp+1]
 16515                                  ;%define savedsp    word [es:bp+2]
 16516                                  ;%define savedss    word [es:bp+4]
 16517                                  ;%define newsp	    word [es:bp+6]
 16518                                  
 16519                                  allocbyte   equ     0
 16520                                  intlevel    equ     1
 16521                                  savedsp     equ     2
 16522                                  savedss     equ     4
 16523                                  newsp       equ     6
 16524                                  
 16525                                  free	    equ     0
 16526                                  allocated   equ     1
 16527                                  overflowed  equ     2
 16528                                  clobbered   equ     3
 16529                                  
 16530                                  ;---------------------------------------
 16531                                  ; external variable defined in ibmbio module for multi-track
 16532                                  
 16533                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16534                                  			  ; it on after handling config.sys file as a
 16535                                  			  ; default value,if multrk_flag = multrk_off1.
 16536                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16537                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16538                                  
 16539                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16540                                  
 16541                                  SYSINIT$:
 16542                                  	;IF	STACKSW 
 16543                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16544                                  	; include STKMES.INC	;Fatal stack error message
 16545                                  	;   public Endstackcode
 16546                                  ;Endstackcode	label byte
 16547                                  	;ENDIF
 16548                                  
 16549                                  ; 05/07/2018
 16550                                  ; ----------------------------------------------------------------------
 16551                                  ; 04/06/2018 - Retro DOS v3.0
 16552                                  
 16553                                  ; ----------------------------------------------------------------------
 16554                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16555                                  ; ----------------------------------------------------------------------
 16556                                  
 16557                                  ;	MSStack.inc
 16558                                  ;
 16559                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16560                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16561                                  ;	a standard header structure.
 16562                                  ;	Fyi, the following shows the relations between
 16563                                  ;	the interrupt vector and interrupt level.
 16564                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16565                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16566                                  ;	MSSTACK module modifies the following interrupt vectors
 16567                                  ;	to meet the standard Interrupt Sharing standard;
 16568                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16569                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16570                                  ;	should be initialized to indicat whether this interrupt handler is
 16571                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16572                                  ;	program header is initialized in STKINIT.INC module.
 16573                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16574                                  ;
 16575                                  
 16576                                  ;  User specifies the number of stack elements - default = 9
 16577                                  ;						 minimum = 8
 16578                                  ;						 maximum = 64
 16579                                  ;
 16580                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16581                                  ;
 16582                                  ;  Picks a stack from pool of stacks and switches to it
 16583                                  ;
 16584                                  ;  Calls the previously saved interrupt vector after pushing flags
 16585                                  ;
 16586                                  ;  On return, returns the stack to the stack pool
 16587                                  ;
 16588                                  
 16589                                  ; This is a modification of STACKS:
 16590                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16591                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16592                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16593                                  ;    . Allows system to work if the only stack that got too big was the most
 16594                                  ;      deeply nested one
 16595                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16596                                  ; 4. Does not intercept any interupts on a PCjr.
 16597                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16598                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16599                                  
 16600                                  		;EVEN
 16601                                  ;align 2
 16602                                  		; 21/10/2022
 16603                                  
 16604 00000000 0000                    		dw	0	; spare field but leave these in order
 16605 00000002 0000                    stackcount:	dw	0
 16606 00000004 0000                    stackat: 	dw	0
 16607 00000006 0000                    stacksize:	dw	0
 16608 00000008 0000                    stacks:		dw	0
 16609 0000000A 0000                    		dw	0
 16610                                  
 16611 0000000C [0800]                  firstentry:	dw	stacks
 16612 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16613 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16614                                  
 16615                                  ;***********************************************************************
 16616                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16617                                  
 16618                                  ; ----------------------------------------------------------------------
 16619                                  
 16620 00000012 00000000                old02:	dd	0
 16621                                  
 16622                                  int02:
 16623                                  
 16624                                  ; *********************************************************************
 16625                                  ;
 16626                                  ; this is special support for the pc convertible / nmi handler
 16627                                  ;
 16628                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16629                                  ;	caused by using the "out" instructions to certain ports. when this
 16630                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16631                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16632                                  ;	includes other type of interrupts (hardware and software), and
 16633                                  ;	also includes other type of nmi's. when any nmi has occured,
 16634                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16635                                  ;	the software takes specific steps to allow further interrupting.
 16636                                  ;
 16637                                  ;	for pc convertible, the situation where the nmi is generated by the
 16638                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16639                                  ;	otherwords, it is actually a "restartable exception". in this
 16640                                  ;	case, the software handler must be able to get to the stack in
 16641                                  ;	order to figure out what instruction caused the problem, where
 16642                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16643                                  ;	we will not switch stacks in this situation. this situation is
 16644                                  ;	detected by interrogating port 62h, and checking for a bit value
 16645                                  ;	of 80h. if set, *****do not switch stacks*****.
 16646                                  ;
 16647                                  ; *********************************************************************
 16648                                  
 16649 00000016 50                      	push	ax
 16650 00000017 06                      	push	es
 16651 00000018 B800F0                  	mov	ax,0F000h
 16652 0000001B 8EC0                    	mov	es,ax
 16653                                  	; 02/11/2022
 16654 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16655 00000023 07                      	pop	es
 16656 00000024 750C                    	jne	short normal02
 16657                                  
 16658 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16659                                  				; 0-3: values of DIP switches
 16660                                  				; 5: 1=Timer 2 channel out
 16661                                  				; 6: 1=I/O channel check
 16662                                  				; 7: 1=RAM parity check error occurred.
 16663 00000028 A880                    	test	al,80h
 16664 0000002A 7406                    	jz	short normal02
 16665                                  special02:
 16666 0000002C 58                      	pop	ax
 16667 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16668                                  normal02:
 16669 00000032 58                      	pop	ax
 16670 00000033 E81101                  	call	do_int_stacks
 16671 00000036 [1200]                  	dw	old02
 16672                                  
 16673                                  ; ----------------------------------------------------------------------
 16674                                  
 16675 00000038 00000000                old08:	dd	0
 16676                                  
 16677                                  int08:
 16678 0000003C E80801                  	call	do_int_stacks
 16679 0000003F [3800]                  	dw	old08
 16680                                  
 16681                                  ; ----------------------------------------------------------------------
 16682                                  
 16683 00000041 00000000                old09:	dd	0
 16684                                  
 16685                                  int09:
 16686                                  
 16687                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16688                                  ; as its first instruction for compatibility reasons
 16689                                  
 16690 00000045 EB02                    	jmp	short keyboard_lbl
 16691 00000047 90                      	nop
 16692 00000048 00                      	db	0
 16693                                  
 16694                                  keyboard_lbl:
 16695 00000049 E8FB00                  	call	do_int_stacks
 16696 0000004C [4100]                  	dw	old09
 16697                                  
 16698                                  ; ----------------------------------------------------------------------
 16699                                  
 16700 0000004E 00000000                old70:	dd	0
 16701                                  
 16702                                  int70:
 16703 00000052 E8F200                  	call	do_int_stacks
 16704 00000055 [4E00]                  	dw	old70
 16705                                  
 16706                                  ; ----------------------------------------------------------------------
 16707                                  
 16708                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16709                                  ;public	int&a
 16710                                  ;public	old&a
 16711                                  ;public	firstflag&a
 16712                                  ;int&a	proc	far
 16713                                  ;	jmp	short entry_int&a&_stk
 16714                                  ;old&a	dd	  0		;forward pointer
 16715                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16716                                  ;firstflag&a db   0		;the firstly hooked.
 16717                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16718                                  ;	db	7 dup (0)	;reserved for future.
 16719                                  ;entry_int&a&_stk:
 16720                                  ;	call	do_int_stacks
 16721                                  ;	dw	old&a
 16722                                  ;intret_&a:
 16723                                  ;	iret
 16724                                  ;int&a	endp
 16725                                  ;	endm
 16726                                  
 16727                                  ; ----------------------------------------------------------------------
 16728                                  
 16729                                  int0A:
 16730 00000057 EB10                    	jmp	short entry_int0A_stk
 16731 00000059 00000000                old0A:	dd	0	
 16732 0000005D 4B42                    	dw	424Bh
 16733                                  firstflag0A:
 16734 0000005F 00                      	db	0
 16735 00000060 EB0C                    	jmp	short intret_0A
 16736 00000062 00<rep 7h>              	times	7 db 0
 16737                                  
 16738                                  entry_int0A_stk:
 16739 00000069 E8DB00                  	call	do_int_stacks
 16740 0000006C [5900]                  	dw	old0A
 16741                                  intret_0A:
 16742 0000006E CF                      	iret
 16743                                  
 16744                                  ; ----------------------------------------------------------------------
 16745                                  
 16746                                  int0B:
 16747 0000006F EB10                    	jmp	short entry_int0B_stk
 16748 00000071 00000000                old0B:	dd	0	
 16749 00000075 4B42                    	dw	424Bh
 16750                                  firstflag0B:
 16751 00000077 00                      	db	0
 16752 00000078 EB0C                    	jmp	short intret_0B
 16753 0000007A 00<rep 7h>              	times	7 db 0
 16754                                  
 16755                                  entry_int0B_stk:
 16756 00000081 E8C300                  	call	do_int_stacks
 16757 00000084 [7100]                  	dw	old0B
 16758                                  intret_0B:
 16759 00000086 CF                      	iret
 16760                                  
 16761                                  ; ----------------------------------------------------------------------
 16762                                  
 16763                                  int0C:
 16764 00000087 EB10                    	jmp	short entry_int0C_stk
 16765 00000089 00000000                old0C:	dd	0	
 16766 0000008D 4B42                    	dw	424Bh
 16767                                  firstflag0C:
 16768 0000008F 00                      	db	0
 16769 00000090 EB0C                    	jmp	short intret_0C
 16770 00000092 00<rep 7h>              	times	7 db 0
 16771                                  
 16772                                  entry_int0C_stk:
 16773 00000099 E8AB00                  	call	do_int_stacks
 16774 0000009C [8900]                  	dw	old0C
 16775                                  intret_0C:
 16776 0000009E CF                      	iret
 16777                                  
 16778                                  ; ----------------------------------------------------------------------
 16779                                  
 16780                                  int0D:
 16781 0000009F EB10                    	jmp	short entry_int0D_stk
 16782 000000A1 00000000                old0D:	dd	0	
 16783 000000A5 4B42                    	dw	424Bh
 16784                                  firstflag0D:
 16785 000000A7 00                      	db	0
 16786 000000A8 EB0C                    	jmp	short intret_0D
 16787 000000AA 00<rep 7h>              	times	7 db 0
 16788                                  
 16789                                  entry_int0D_stk:
 16790 000000B1 E89300                  	call	do_int_stacks
 16791 000000B4 [A100]                  	dw	old0D
 16792                                  intret_0D:
 16793 000000B6 CF                      	iret
 16794                                  
 16795                                  ; ----------------------------------------------------------------------
 16796                                  
 16797                                  int0E:
 16798 000000B7 EB10                    	jmp	short entry_int0E_stk
 16799 000000B9 00000000                old0E:	dd	0	
 16800 000000BD 4B42                    	dw	424Bh
 16801                                  firstflag0E:
 16802 000000BF 00                      	db	0
 16803 000000C0 EB0C                    	jmp	short intret_0E
 16804 000000C2 00<rep 7h>              	times	7 db 0
 16805                                  
 16806                                  entry_int0E_stk:
 16807 000000C9 E87B00                  	call	do_int_stacks
 16808 000000CC [B900]                  	dw	old0E
 16809                                  intret_0E:
 16810 000000CE CF                      	iret
 16811                                  
 16812                                  ; ----------------------------------------------------------------------
 16813                                  
 16814                                  int72:
 16815 000000CF EB10                    	jmp	short entry_int72_stk
 16816 000000D1 00000000                old72:	dd	0	
 16817 000000D5 4B42                    	dw	424Bh
 16818                                  firstflag72:
 16819 000000D7 00                      	db	0
 16820 000000D8 EB0C                    	jmp	short intret_72
 16821 000000DA 00<rep 7h>              	times	7 db 0
 16822                                  
 16823                                  entry_int72_stk:
 16824 000000E1 E86300                  	call	do_int_stacks
 16825 000000E4 [D100]                  	dw	old72
 16826                                  intret_72:
 16827 000000E6 CF                      	iret
 16828                                  
 16829                                  ; ----------------------------------------------------------------------
 16830                                  
 16831                                  int73:
 16832 000000E7 EB10                    	jmp	short entry_int73_stk
 16833 000000E9 00000000                old73:	dd	0	
 16834 000000ED 4B42                    	dw	424Bh
 16835                                  firstflag73:
 16836 000000EF 00                      	db	0
 16837 000000F0 EB0C                    	jmp	short intret_73
 16838 000000F2 00<rep 7h>              	times	7 db 0
 16839                                  
 16840                                  entry_int73_stk:
 16841 000000F9 E84B00                  	call	do_int_stacks
 16842 000000FC [E900]                  	dw	old73
 16843                                  intret_73:
 16844 000000FE CF                      	iret
 16845                                  
 16846                                  ; ----------------------------------------------------------------------
 16847                                  
 16848                                  int74:
 16849 000000FF EB10                    	jmp	short entry_int74_stk
 16850 00000101 00000000                old74:	dd	0	
 16851 00000105 4B42                    	dw	424Bh
 16852                                  firstflag74:
 16853 00000107 00                      	db	0
 16854 00000108 EB0C                    	jmp	short intret_74
 16855 0000010A 00<rep 7h>              	times	7 db 0
 16856                                  
 16857                                  entry_int74_stk:
 16858 00000111 E83300                  	call	do_int_stacks
 16859 00000114 [0101]                  	dw	old74
 16860                                  intret_74:
 16861 00000116 CF                      	iret
 16862                                  
 16863                                  ; ----------------------------------------------------------------------
 16864                                  
 16865                                  int76:
 16866 00000117 EB10                    	jmp	short entry_int76_stk
 16867 00000119 00000000                old76:	dd	0	
 16868 0000011D 4B42                    	dw	424Bh
 16869                                  firstflag76:
 16870 0000011F 00                      	db	0
 16871 00000120 EB0C                    	jmp	short intret_76
 16872 00000122 00<rep 7h>              	times	7 db 0
 16873                                  
 16874                                  entry_int76_stk:
 16875 00000129 E81B00                  	call	do_int_stacks
 16876 0000012C [1901]                  	dw	old76
 16877                                  intret_76:
 16878 0000012E CF                      	iret
 16879                                  
 16880                                  ; ----------------------------------------------------------------------
 16881                                  
 16882                                  int77:
 16883 0000012F EB10                    	jmp	short entry_int77_stk
 16884 00000131 00000000                old77:	dd	0	
 16885 00000135 4B42                    	dw	424Bh
 16886                                  firstflag77:
 16887 00000137 00                      	db	0
 16888 00000138 EB0C                    	jmp	short intret_77
 16889 0000013A 00<rep 7h>              	times	7 db 0
 16890                                  
 16891                                  entry_int77_stk:
 16892 00000141 E80300                  	call	do_int_stacks
 16893 00000144 [3101]                  	dw	old77
 16894                                  intret_77:
 16895 00000146 CF                      	iret
 16896                                  
 16897                                  ; ----------------------------------------------------------------------
 16898                                  
 16899                                  ;********************************************************************
 16900                                  ;common routines
 16901                                  ;********************************************************************
 16902                                  
 16903                                  ; do interrupt stack switching. the fake return address holds
 16904                                  ; a pointer to the far-pointer of the actual interrupt
 16905                                  ; service routine
 16906                                  
 16907                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16908                                  ; 21/03/2019 - Retro DOS v4.0
 16909                                  
 16910                                  ;allocbyte   equ 0
 16911                                  ;intlevel    equ 1
 16912                                  ;savedsp     equ 2
 16913                                  ;savedss     equ 4
 16914                                  ;newsp       equ 6
 16915                                  
 16916                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 16917                                  ; (MSDOS 6.21 IO:SYS, SYSINIT:0147h)
 16918                                  
 16919                                  do_int_stacks:
 16920 00000147 50                      	push	ax
 16921 00000148 55                      	push	bp
 16922 00000149 06                      	push	es
 16923 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16924 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16925 00000154 B001                    	mov	al,allocated ; 1
 16926                                  	; 21/10/2022
 16927                                  	;xchg	[es:bp+allocbyte],al 
 16928                                  	; 11/12/2022
 16929 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16930 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16931 0000015C 7551                    	jne	short notfree02
 16932                                  
 16933 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16934                                  found02:
 16935 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16936 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16937                                  
 16938 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16939                                  
 16940 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16941                                  	; 21/10/2022
 16942                                  	;mov	bp,[es:bp+6]
 16943                                  	; 11/12/2022
 16944                                  	;cmp	[es:bp+0],ax	
 16945 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16946 00000176 7544                    	jne	short foundbad02
 16947                                  
 16948                                  	; 02/07/2023 (MSDOS 6.21 SYSINIT code)
 16949 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
 16950 0000017A 8EC5                    	mov	es,bp
 16951 0000017C 89E5                    	mov	bp,sp
 16952 0000017E 8B6E06                  	mov	bp,[bp+6]
 16953 00000181 8ED0                    	mov	ss,ax
 16954 00000183 8CC4                    	mov	sp,es
 16955 00000185 8EC0                    	mov	es,ax
 16956 00000187 2E8B6E00                	mov	bp,[cs:bp]
 16957                                  
 16958                                  	; 21/10/2022 (MSDOS 5.0 SYSINIT code)
 16959                                  	;push    bp
 16960                                  	;mov     bp,sp
 16961                                  	;mov     ax,[bp+8]
 16962                                  	;pop     bp
 16963                                  	;push    es
 16964                                  	;pop     ss
 16965                                  	;mov     sp,bp
 16966                                  	;mov     bp,ax
 16967                                  	; 11/12/2022
 16968                                  	;;mov	bp,[cs:bp+0]	
 16969                                  	;mov	bp,[cs:bp]	
 16970                                  
 16971 0000018B 9C                      	pushf				; go execute the real interrupt handler
 16972                                  	; 11/12/2022
 16973 0000018C 2EFF5E00                	call	far [cs:bp]		; which will iret back to here
 16974                                  	; 21/10/2022
 16975                                  	;call	far [cs:bp+0]
 16976                                  
 16977 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16978                                  	; 11/12/2022
 16979 00000192 268B6E00                	mov	bp,[es:bp]		; but leave it on the stack
 16980                                  	; 21/10/2022
 16981                                  	;mov	bp,[es:bp+0]
 16982 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16983 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
 16984                                  
 16985                                  	; 11/12/2022
 16986                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16987                                  	; 21/10/2022
 16988 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
 16989 000001A3 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16990                                  
 16991 000001A8 07                      	pop	es			; saved on entry
 16992 000001A9 5D                      	pop	bp			; saved on entry
 16993 000001AA 58                      	pop	ax			; saved on entry
 16994 000001AB 83C402                  	add	sp,2			; (skip near call return addr) 
 16995 000001AE CF                      	iret				; done with this interrupt
 16996                                  
 16997                                  notfree02:
 16998 000001AF 3C01                    	cmp	al,allocated		; error flag
 16999 000001B1 7404                    	je	short findnext02	; no, continue
 17000                                  	; 11/12/2022
 17001                                  	;xchg	[es:bp+allocbyte],al	; yes, restore error value
 17002                                  	; 21/10/2022
 17003 000001B3 26864600                	xchg	[es:bp],al
 17004                                  
 17005                                  findnext02:
 17006 000001B7 E81200                  	call	longpath
 17007 000001BA EBA8                    	jmp	short found02
 17008                                  
 17009                                  foundbad02:
 17010 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 17011 000001C1 72F4                    	jc	short findnext02
 17012 000001C3 89C5                    	mov	bp,ax			; flag this entry
 17013                                  	; 11/12/2022
 17014                                  	;mov	byte [es:bp+allocbyte],clobbered
 17015                                  	; 21/10/2022
 17016 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
 17017 000001CA EBEB                    	jmp	short findnext02	; keep looking
 17018                                  
 17019                                  ; ----------------------------------------------------------------------
 17020                                  
 17021                                  ; Common routines
 17022                                  
 17023                                  longpath:
 17024                                  	; 21/03/2019
 17025 000001CC 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 17026                                  lploopp:
 17027                                  	; 11/12/2022
 17028                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 17029                                  	; 21/10/2022
 17030 000001D1 26807E0000              	cmp	byte [es:bp],free
 17031 000001D6 7512                    	jne	short inuse		;  no, try next one
 17032                                  
 17033 000001D8 B001                    	mov	al,allocated
 17034                                  	; 11/12/2022
 17035                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 17036                                  	; 21/10/2022
 17037 000001DA 26864600                	xchg	[es:bp],al
 17038 000001DE 3C00                    	cmp	al,free 		; is it still free?
 17039 000001E0 7414                    	je	short found		;  yes, go use it
 17040                                  
 17041 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 17042 000001E4 7404                    	je	short inuse		;  no, check the next one
 17043                                  
 17044                                  	; 11/12/2022
 17045                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 17046                                  	; 21/10/2022
 17047 000001E6 26884600                	mov	[es:bp],al
 17048                                  inuse:
 17049 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 17050 000001EF 7406                    	je	short fatal
 17051 000001F1 83ED08                  	sub	bp,entrysize
 17052 000001F4 EBDB                    	jmp	short lploopp
 17053                                  found:
 17054 000001F6 C3                      	retn
 17055                                  fatal:
 17056 000001F7 1E                      	push	ds
 17057 000001F8 B800F0                  	mov	ax,0F000h		;look at the model byte
 17058 000001FB 8ED8                    	mov	ds,ax
 17059 000001FD 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 17060 00000202 1F                      	pop	ds
 17061 00000203 7504                    	jne	short skip_nmis
 17062                                  
 17063 00000205 B007                    	mov	al,07h			; disable pc convertible nmis
 17064 00000207 E672                    	out	72h,al
 17065                                  
 17066                                  skip_nmis:
 17067 00000209 FA                      	cli				; disable and mask
 17068 0000020A B0FF                    	mov	al,0FFh			;   all other ints
 17069 0000020C E621                    	out	021h,al
 17070 0000020E E6A1                    	out	0A1h,al
 17071                                  
 17072 00000210 8CCE                    	mov	si,cs
 17073 00000212 8EDE                    	mov	ds,si
 17074 00000214 BE[3902]                	mov	si,fatal_msg
 17075                                  ;SR;
 17076                                  ;   We set all foci to this VM to issue the stack failure message
 17077                                  ;
 17078 00000217 50                      	push	ax
 17079 00000218 1E                      	push	ds
 17080                                  	;;mov	ax,Bios_Data ; 0070h
 17081                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17082                                  	; 21/10/2022
 17083 00000219 B87000                  	mov	ax,DOSBIODATASEG
 17084 0000021C 8ED8                    	mov	ds,ax
 17085                                  
 17086                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 17087 0000021E F606[6F08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 17088 00000223 1F                      	pop	ds
 17089 00000224 58                      	pop	ax
 17090 00000225 7405                    	jz	short fatal_loop	; win386 not present, continue
 17091                                  
 17092                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 17093                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 17094                                  	; 21/10/2022
 17095 00000227 9A[7008]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 17096                                  ;
 17097                                  ;SR; We do not bother about the returned status of this call. 
 17098                                  ;
 17099                                  fatal_loop:
 17100 0000022C AC                      	lodsb
 17101 0000022D 3C24                    	cmp	al,'$' ; 24h
 17102 0000022F 7406                    	je	short fatal_done
 17103                                  
 17104 00000231 B307                    	mov	bl,7
 17105                                  	;mov	ah,14
 17106                                  	;mov	ah,0Eh
 17107 00000233 CD10                    	int	10h			; whoops, this enables ints
 17108                                  			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
 17109                                  			; AL = character, BH = display page (alpha modes)
 17110                                  			; BL = foreground color (graphics modes)
 17111 00000235 EBF5                    	jmp	short fatal_loop
 17112                                  
 17113                                  fatal_done:
 17114 00000237 EBFE                    	jmp	short fatal_done
 17115                                  
 17116                                  
 17117                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17118                                  ; ----------------------------------------------------------------------
 17119                                  ;	include msbio.cl5		; fatal stack error message
 17120                                  
 17121                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 17122                                  
 17123                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 17124                                  ; ----------------------------------------------------------------------
 17125                                  ; 04/06/2018 - Retro DOS v3.0
 17126                                  
 17127                                  fatal_msg:
 17128 00000239 0D0A                    	db	0Dh,0Ah
 17129 0000023B 070D0A                  	db	7,0Dh,0Ah
 17130 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 17130 00000247 737461636B206F7665-
 17130 00000250 72666C6F770D0A     
 17131 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 17131 00000260 6C7465640D0A24     
 17132                                  
 17133                                  endstackcode:
 17134                                  
 17135                                  ; ----------------------------------------------------------------------
 17136                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 17137                                  ; ----------------------------------------------------------------------
 17138                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 17139                                  
 17140                                  ; 22/03/2019 - Retro DOS v4.0
 17141                                  
 17142                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 17143                                  
 17144                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 17145                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 17146                                  
 17147                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17148                                  ; ----------------------------------------------------------------------
 17149                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 17150                                  
 17151                                  SYSINIT:	
 17152 00000267 E9A001                          JMP	GOINIT
 17153                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 17154                                  
 17155                                  ; ----------------------------------------------------------------------
 17156                                  
 17157                                  struc DDHighInfo
 17158 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 17159 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 17160 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 17161                                  endstruc
 17162                                  
 17163                                  ; 22/03/2019 - Retro DOS v4.0
 17164                                  
 17165 0000026A 00                      runhigh: db	0
 17166                                  
 17167                                  ; 02/11/2022
 17168                                  ;align 4
 17169                                  
 17170                                  DOSINFO: 
 17171 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 17172                                  ;MSDOS:
 17173                                  dos_temp_location: ; dword ; MSDOS 6.0
 17174                                  dosinit:		; MSDOS 6.0
 17175 0000026F 0000                    	dw	0
 17176                                  
 17177                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17178                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 17179                                  ;	dw	0
 17180                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 17181                                  
 17182                                  CURRENT_DOS_LOCATION:
 17183 00000271 0000                    	dw	0
 17184                                  
 17185                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 17186                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 17187                                  
 17188                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17189                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 17190                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17191                                  
 17192                                  DEVICE_LIST:
 17193 00000273 00000000                	dd	0
 17194                                  
 17195                                  ; 04/06/2018 - Retro DOS v3.0
 17196                                  ; 28/03/2018
 17197                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 17198                                  ;
 17199                                  sysi_country:	
 17200 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 17201                                  
 17202                                  ; MSDOS 6.0
 17203 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 17204                                  
 17205 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 17206 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 17207                                  
 17208 00000283 0000                    def_php:	dw	0
 17209                                  
 17210                                  ; M022--
 17211                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 17212                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 17213                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 17214                                  ;  the new home.
 17215                                  
 17216                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 17217                                  ; 21/10/2022
 17218                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 17219                                  
 17220                                  ; 22/10/2022
 17221                                  seg_reinit_ptr:	; label dword
 17222 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 17223                                  temp_bcode_seg:
 17224                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 17225                                  		; 22/10/2022
 17226 00000287 8602                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 17227                                  
 17228                                  fake_floppy_drv:
 17229 00000289 00                      		db	0	; set to 1 if this machine
 17230                                  				; does not have any floppies!!!
 17231                                  
 17232                                  ; Internal Stack Parameters
 17233                                  
 17234 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 17235 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 17236 0000028E 00000000                stack_addr:	dd	0	
 17237                                  
 17238                                  ; 05/06/2018 - Retro DOS v3.0
 17239                                  
 17240                                  ; various default values
 17241                                  
 17242 00000292 0100                    MEMORY_SIZE:	dw	1
 17243                                  
 17244                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 17245                                  
 17246 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 17247 00000296 00                      DEFAULT_DRIVE:	db	0	; initialized by ibminit.
 17248 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 17249 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 17250 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 17251                                  
 17252 0000029D 08                      FILES:	db	8	; enough files for pipe
 17253 0000029E 04                      FCBS:	db	4	; performance for recycling
 17254 0000029F 00                      KEEP:	db	0	; keep original set
 17255 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 17256                                  
 17257                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 17258                                  ;;CONFBOT: dw	0
 17259                                  ;;ALLOCLIM: dw	0
 17260                                  ;CONFBOT: ; 02/11/2022
 17261                                  ;top_of_cdss: dw 0
 17262                                  
 17263                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 17264                                  ; (SYSINITSEG:02A3h)
 17265 000002A1 0000                    CONFBOT: dw	0
 17266 000002A3 0000                    ALLOCLIM: dw	0
 17267 000002A5 0000                    top_of_cdss: dw 0
 17268                                  
 17269                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 17270                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 17271                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 17272                                  
 17273 000002A7 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 17274                                  
 17275                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 17276                                  %if 0
 17277                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17278                                  ; (SYSINIT:02A9h)
 17279                                  
 17280                                  command_line:
 17281                                  	db	2,0
 17282                                  	db	'P'
 17283                                  	db	0
 17284                                  	times	124 db 0 ; db 124 dup(0)
 17285                                  
 17286                                  %endif
 17287                                  
 17288                                  	
 17289                                  ; (SYSINIT:0329h)
 17290 000002AB 00                      ZERO:	db	0
 17291 000002AC 00                      sepchr:	db	0
 17292 000002AD 0000                    linecount: dw	0			; line count in config.sys
 17293 000002AF 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 17294 000002B7 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 17295                                  
 17296 000002B9 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 17297 000002BA 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 17298                                  
 17299 000002BB 0000                    buf_prev_off:	dw	0
 17300                                  
 17301                                          ;IF      NOT NOEXEC
 17302                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 17303                                          ;ENDIF
 17304                                  
 17305                                  ; 01/05/2018
 17306                                  COMEXE:
 17307 000002BD 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 17308 000002BF [E046]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 17309 000002C1 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17310 000002C3 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 17311 000002C5 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17312 000002C7 [AB02]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 17313 000002C9 0000                    		dw	0
 17314                                  
 17315                                  ; variables for install= command.
 17316                                  
 17317 000002CB 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 17318                                  					;  indicating the pass number
 17319                                  					; 0 - do scan for DOS=HIGH/LOW
 17320                                  					; 1 - load device drivers
 17321                                  					; 2 - was to load IFS
 17322                                  					;      now it is unused
 17323                                  					; 3 - do install=
 17324                                  					; >3 - nop
 17325 000002CC 0000                    install_flag:	dw	0
 17326                                  
 17327                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 17328                                  has_installed	equ	00000010b	; sysinit_base installed.
 17329                                  
 17330 000002CE 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 17331 000002D0 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 17332 000002D4 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 17333 000002D8 0000                    checksum:	dw	0		; used by sum_up
 17334                                  
 17335 000002DA 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 17336 000002EE 00                      ldexec_line:	db	0		; # of parm characters
 17337 000002EF 20                      ldexec_start:	db	' '
 17338 000002F0 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 17339                                  
 17340                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 17341                                  
 17342                                  instexe:
 17343 00000340 0000                    iexec.environ:	dw	0		; seg addr of environment
 17344 00000342 [EE02]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 17345 00000344 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17346 00000346 [DA02]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 17347 00000348 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17348 0000034A [DA02]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 17349 0000034C 0000                    		dw	0
 17350                                  
 17351                                  ; variables for comment=
 17352                                  
 17353 0000034E 00                      com_level:	db	0		; level of " " in command line
 17354 0000034F 00                      cmmt:		db	0		; length of comment string token
 17355 00000350 00                      cmmt1:		db	0		; token
 17356 00000351 00                      cmmt2:		db	0		; token
 17357 00000352 00                      cmd_indicator:	db	0
 17358 00000353 00                      donotshownum:	db	0
 17359                                  
 17360 00000354 0000                    count:		dw	0
 17361 00000356 0000                    org_count:	dw	0
 17362 00000358 0000                    chrptr:		dw	0
 17363 0000035A 0000                    cntryfilehandle: dw	0
 17364 0000035C 0000                    old_area:	dw	0
 17365 0000035E 0000                    impossible_owner_size: dw 0		; paragraph
 17366                                  
 17367                                  bucketptr: ; label dword
 17368                                  bufptr:	   ; label dword		; leave this stuff in order!
 17369 00000360 0000                    memlo:	dw	0
 17370                                  prmblk:	   ; label word
 17371 00000362 0000                    memhi:	dw	0
 17372 00000364 0000                    ldoff:	dw	0
 17373 00000366 0000                    area:	dw	0
 17374                                  
 17375                                  ; Following is the request packet used to call INIT routines for 
 17376                                  ; all device drivers. Some fields may be accessed individually in
 17377                                  ; the code, and hence have individual labels, but they should not
 17378                                  ; be separated.
 17379                                  
 17380 00000368 18                      packet:	db	24			; was 22
 17381 00000369 00                      	db	0
 17382 0000036A 00                      	db	0			; initialize code
 17383 0000036B 0000                    	dw	0
 17384 0000036D 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 17385                                  
 17386 00000375 00                      unitcount:	db	0
 17387 00000376 00000000                break_addr:	dd	0
 17388 0000037A 00000000                bpb_addr:	dd	0
 17389                                  drivenumber:	; 22/10/2022
 17390 0000037E 00                      devdrivenum:	db	0 
 17391 0000037F 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 17392                                  
 17393                                  ; end of request packet
 17394                                  
 17395                                  ;drivenumber:	db	0  ; 22/03/2019
 17396                                  
 17397                                  toomanydrivesflag:
 17398 00000381 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 17399                                  align 2
 17400                                  
 17401                                  BCodeSeg:	; 21/10/2022
 17402 00000382 8602                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 17403                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 17404                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 17405                                  
 17406                                  ; 30/12/2022
 17407                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 17408                                  ;
 17409                                  ; MagicBackdoor: dd 0
 17410                                  ; NullBackdoor: 
 17411                                  ;		retf
 17412                                  
 17413                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17414                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 17415                                  ; 19/04/2019
 17416                                  _timer_lw_:
 17417 00000384 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 17418                                  
 17419                                  ;SR;
 17420                                  ; This is the communication block between the DOS and the BIOS. It starts at
 17421                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 17422                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 17423                                  ;is passed to DOS as part of the DOSINIT call.
 17424                                  ;
 17425                                  
 17426                                  BiosComBlock:
 17427                                  	;dd	Bios_Data:SysinitPresent 
 17428                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 17429 00000386 [9C08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 17430                                  	;dw	KERNEL_SEGMENT ; 0070h
 17431                                  	; 21/10/2022
 17432 00000388 7000                    	dw	DOSBIODATASEG ; 0070h
 17433                                  
 17434                                  ;align 2
 17435                                  
 17436                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 17437                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 17438                                  tempstack:	
 17439 0000038A 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 17440                                  
 17441                                  ; ----------------------------------------------------------------------------
 17442                                  
 17443                                  	; 22/10/2022 - Retro DOS v4.0
 17444                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 17445                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 17446                                  	; 12/12/2022
 17447                                  	; 22/03/2019 - Retro DOS v4.0
 17448                                  	; 06/07/2018
 17449                                  	; 04/06/2018 - Retro DOS v3.0
 17450                                  ; before doing anything else, let's set the model byte
 17451 0000040A B4C0                    	mov	ah,0C0h 		; get system configuration
 17452 0000040C CD15                    	int	15h			; *
 17453 0000040E 7217                    	jc	short no_rom_config
 17454                                  
 17455 00000410 80FC00                  	cmp	ah,0			; double check
 17456 00000413 7512                    	jne	short no_rom_config
 17457 00000415 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 17458 00000419 2EA2[B902]              	mov	[cs:sys_model_byte],al 
 17459 0000041D 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 17460 00000421 2EA2[BA02]              	mov	[cs:sys_scnd_model_byte],al
 17461                                  	;jmp	short SYSIN
 17462                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17463 00000425 EB2D                    	jmp	short move_myself
 17464                                  
 17465                                  no_rom_config:				; Old ROM
 17466 00000427 B800F0                  	mov	ax,0F000h
 17467 0000042A 8ED8                    	mov	ds,ax
 17468 0000042C A0FEFF                  	mov	al,[0FFFEh]
 17469 0000042F 2EA2[B902]              	mov	[cs:sys_model_byte],al	; set the model byte.
 17470                                  
 17471                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 17472                                  ; execute the equipment determination interrupt and then
 17473                                  ; check the returned value to see if we have any floppy drives
 17474                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 17475                                  ; see the at tech ref bios listings for help on the equipment
 17476                                  ; flag interrupt (11h)	
 17477                                  
 17478                                  	; 22/10/2022
 17479                                  check_for_fake_floppy:			; entry point for rom_config above
 17480 00000433 CD11                    	int	11h			; check equipment flag
 17481                                  
 17482                                  	; 12/12/2022
 17483 00000435 A801                    	test	al,1		
 17484                                  	;test	ax,1			; have any floppies?
 17485 00000437 751B                    	jnz	short move_myself	; yes,normal system
 17486                                  
 17487                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17488                                  ; whether it is an old ROM BIOS or a new one
 17489                                  ;
 17490                                  ; WARNING !!!
 17491                                  ;
 17492                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17493                                  ; here will require an equivalent modification in MSINIT.ASM also
 17494                                  
 17495 00000439 06                      	push	es
 17496                                  
 17497 0000043A 30C9                    	xor	cl,cl	
 17498 0000043C B408                    	mov	ah,8			; get disk parameters
 17499 0000043E B200                    	mov	dl,0			; of drive 0
 17500 00000440 CD13                    	int	13h
 17501                                  
 17502 00000442 07                      	pop	es
 17503                                  
 17504 00000443 720F                    	jc	short move_myself	; if error lets assume that the
 17505                                  					;  ROM BIOS lied
 17506 00000445 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 17507 00000448 740A                    	je	short move_myself
 17508                                  
 17509 0000044A 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17510 0000044C 7506                    	jnz	short move_myself
 17511                                  
 17512 0000044E 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17513                                  
 17514                                  move_myself:
 17515 00000454 FC                      	cld				; set up move
 17516 00000455 31F6                    	xor	si,si
 17517 00000457 89F7                    	mov	di,si
 17518                                  
 17519                                  	; 12/12/2022
 17520 00000459 0E                      	push	cs
 17521 0000045A 1F                      	pop	ds
 17522                                  
 17523                                  	;mov	cx,[cs:MEMORY_SIZE]
 17524 0000045B 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17525                                  
 17526                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17527                                  ;;;	if	msver
 17528                                  ;	cmp	cx,1		; 1 means do scan
 17529                                  ;	jnz	short noscan
 17530                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17531                                  ;	xor	bx,bx
 17532                                  ;
 17533                                  ;memscan:inc	cx
 17534                                  ;	jz	setend
 17535                                  ;	mov	ds,cx
 17536                                  ;	mov	al,[bx]
 17537                                  ;	not	al
 17538                                  ;	mov	[bx],al
 17539                                  ;	cmp	al,[bx]
 17540                                  ;	not	al
 17541                                  ;	mov	[bx],al
 17542                                  ;	jz	short memscan
 17543                                  ;setend:
 17544                                  ;	mov	cs:[memory_size],cx
 17545                                  ;;;	endif
 17546                                  
 17547                                  ;noscan: 				; cx is mem size in para
 17548                                  ;;
 17549                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17550                                  ;;		  before we try to run.
 17551                                  ;;	       b) in any case, we should check for sufficient memory and give
 17552                                  ;;		  an appropriate error diagnostic if there isn't enough
 17553                                  ;
 17554                                  ;	push	cs
 17555                                  ;	pop	ds
 17556                                  ;
 17557                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17558                                  ;;	  that way it would be easier to slide them down home in a minimal
 17559                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17560                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17561                                  ;;	  temporary home and the final one.  the problem with doing that
 17562                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17563                                  ;
 17564                                  ;	dec	cx			; one para for an arena at end of mem
 17565                                  ;					; in case of UMBs
 17566                                  
 17567                                  	; 22/10/2022
 17568                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17569                                  
 17570                                  	; 12/12/2022
 17571                                  	;push	cs
 17572                                  	;pop	ds
 17573                                  
 17574 0000045F 49                      	dec	cx
 17575                                  
 17576                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17577                                  
 17578 00000460 31DB                    	xor	bx,bx
 17579 00000462 8EC3                    	mov	es,bx
 17580 00000464 268B1EBC00              	mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17581 00000469 268E06BE00              	mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17582 0000046E 26817F035250            	cmp	word [es:bx+3],'RP'
 17583 00000474 751B                    	jne	short NoRPL
 17584 00000476 26807F054C              	cmp	byte [es:bx+5],'L'
 17585 0000047B 7514                    	jne	short NoRPL
 17586                                  
 17587 0000047D 89CA                    	mov	dx,cx			; get TOM into DX
 17588 0000047F 52                      	push	dx
 17589 00000480 B8064A                  	mov	ax,4A06h
 17590                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17591 00000483 CD2F                    	int	2Fh			; Get new TOM from any RPL
 17592 00000485 58                      	pop	ax
 17593 00000486 89D1                    	mov	cx,dx
 17594 00000488 39C2                    	cmp	dx,ax
 17595 0000048A 7405                    	je	short NoRPL
 17596                                  	
 17597                                  	; 11/12/2022
 17598                                  	; ds = cs
 17599 0000048C 8916[9402]              	mov	[RPLMemTop],dx
 17600                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17601                                  	;mov	[cs:RPLMemTop],dx
 17602                                  	
 17603 00000490 49                      	dec	cx
 17604                                  NoRPL:
 17605 00000491 B8[104E]                	mov	ax,SI_end		; need this much room for sysinit
 17606                                  					; (SI_end == sysinit code size)
 17607 00000494 E8CB07                  	call	off_to_para
 17608 00000497 29C1                    	sub	cx,ax
 17609                                  
 17610                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17611                                  ; code above sysinit in memory
 17612                                  ;
 17613 00000499 81E9000A                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 17614                                  
 17615 0000049D B8801A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17616                                  					; (1A70h for MSDOS 6.21 IO.SYS
 17617 000004A0 E8BF07                  	call	off_to_para		; leave this much room for BIOS code
 17618 000004A3 29C1                    	sub	cx,ax
 17619 000004A5 8EC1                    	mov	es,cx			; segment where sysinit will be located
 17620                                  
 17621 000004A7 B9[104E]                	mov	cx,SI_end		; (sysinit code size)
 17622 000004AA D1E9                    	shr	cx,1			; divide by 2 to get words
 17623 000004AC F3A5                    	rep	movsw			; relocate sysinit
 17624                                  
 17625 000004AE 06                      	push	es			; push relocated segment
 17626 000004AF B8[B404]                	mov	ax,SYSIN
 17627 000004B2 50                      	push	ax			; push relocated entry point
 17628                                  
 17629 000004B3 CB                      	retf				; far jump to relocated sysinit
 17630                                  
 17631                                  ; ----------------------------------------------------------------------------
 17632                                  
 17633                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17634                                  
 17635                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17636                                  	; (SYSINIT:0533h)
 17637                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 17638                                  	; (SYSINIT:04BFh)	
 17639                                  SYSIN:
 17640                                  	; Retro DOS 4.0 - 22/03/2019
 17641                                  	; Retro DOS 2.0 - 25/02/2018
 17642                                  
 17643                                  	; 23/04/2019
 17644                                  	;;mov	ax,Bios_Data
 17645                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17646                                  	; 21/10/2022
 17647 000004B4 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17648 000004B7 8ED8                    	mov	ds,ax
 17649 000004B9 8C0E[9A08]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17650 000004BD C606[9C08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17651                                  
 17652                                  ; first move the MSDOS.SYS image up to a harmless place 
 17653                                  ; on top of our new sysinitseg
 17654                                  
 17655                                  	; 22/10/2022
 17656 000004C2 B8[104E]                	mov	ax,SI_end		; how big is sysinitseg?
 17657 000004C5 E89A07                  	call	off_to_para
 17658 000004C8 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17659 000004CA 01C8                    	add	ax,cx
 17660 000004CC 8EC0                    	mov	es,ax
 17661                                  	
 17662 000004CE 31F6                    	xor	si,si
 17663 000004D0 89F7                    	mov	di,si
 17664                                  
 17665 000004D2 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17666                                  
 17667                                  	;mov	ax,cs	
 17668                                  	;mov	ds,ax
 17669                                  
 17670                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17671                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17672                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17673                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17674                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17675                                  
 17676                                  	; 22/10/2022
 17677 000004D7 B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17678 000004DA F3A5                    	rep     movsw
 17679 000004DC 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17680                                  
 17681                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17682                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17683                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17684                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17685                                  
 17686                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17687                                  	;mov	ax,cs
 17688                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17689                                  	;mov	ds,ax
 17690                                  
 17691                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17692                                  
 17693                                  ;	; 24/04/2019 
 17694                                  ;;ifndef ROMDOS
 17695                                  ;	mov	ax,[es:3] 		; get offset of dos
 17696                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17697                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17698                                  ;	call	off_to_para		; subtract this much from segment
 17699                                  ;	; 23/04/2019
 17700                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17701                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17702                                  ;;else
 17703                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17704                                  ;;
 17705                                  ;;endif ; ROMDOS
 17706                                  
 17707                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17708                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17709                                  
 17710                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17711                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17712                                  
 17713                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17714                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17715 000004E1 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17716                                  
 17717 000004E4 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17718                                  	; 02/11/2022
 17719 000004E8 E87707                  	call	off_to_para		; subtract this much from segment
 17720 000004EB 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17721                                  
 17722                                  	; Current DOSCODE start address = dword [dosinit]
 17723                                  
 17724                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17725                                  ;; until it is determined whether it will be running in HIMEM or not.
 17726                                  
 17727                                  ;ifndef ROMDOS
 17728                                  
 17729                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17730                                  
 17731                                  	; 22/10/2022
 17732 000004F0 8CC0                    	mov	ax,es
 17733 000004F2 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17734 000004F5 8EC0                    	mov	es,ax
 17735 000004F7 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17736 000004FC 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17737                                  
 17738                                  	;mov	si,BCODE_START ; mov si,30h
 17739                                  	; 09/12/2022
 17740 000004FE BE[3000]                	mov	si,BCODESTART
 17741                                  	; 02/11/2022
 17742 00000501 89F7                    	mov	di,si
 17743 00000503 B9801A                  	mov	cx,BCODE_END   ; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 17744 00000506 29F1                    	sub	cx,si
 17745 00000508 D1E9                    	shr	cx,1
 17746 0000050A F3A5                    	rep	movsw			; move Bios_Code into place
 17747                                  
 17748 0000050C 8CC0                    	mov	ax,es			; tell it what segment it's in
 17749 0000050E 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17750                                  
 17751                                  ;endif	; not ROMDOS
 17752                                  
 17753                                  ; now call dosinit while it's in its temporary home
 17754                                  
 17755                                  	;mov	ax,cs
 17756                                  	;mov	ds,ax	 
 17757                                  
 17758                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17759                                  
 17760                                  	; 22/10/2022
 17761                                  
 17762 00000513 2EC43E[8603]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17763                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17764 00000518 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17765                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17766                                  
 17767 0000051D 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17768                                  
 17769 00000522 FA                      	cli
 17770 00000523 8CC8                    	mov	ax,cs
 17771 00000525 8ED0                    	mov	ss,ax
 17772                                  
 17773                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17774                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17775                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17776                                  ;SYSINIT:0532h: 
 17777                                  
 17778                                  ; 22/10/2022
 17779                                  ; ----------------------------------------------------------------------------
 17780                                  ;SYSINIT:05A6h:
 17781                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17782                                  
 17783                                  	;mov	sp, 05A6h
 17784 00000527 BC2605                  	mov     sp,locstack		; set stack
 17785                                  
 17786 0000052A FB                      	sti
 17787                                  
 17788                                  ;align 2
 17789                                  	; 30/03/2018
 17790                                  ;LOCSTACK:
 17791                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17792                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17793                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17794                                  
 17795                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17796                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17797                                  
 17798                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17799                                  ; at the top of memory, to its final location in low memory just above the
 17800                                  ; BIOS data. It will then build important DOS data structures in low 
 17801                                  ; memory following the DOS data. It returns (among many other things) the
 17802                                  ; new starting address of free memory.
 17803                                  
 17804 0000052B 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17805                                  			 ; es:di -> sysinitvars_ext
 17806                                  
 17807 00000530 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17808                                  	
 17809                                  	; 11/12/2022
 17810                                  	; 22/03/2019
 17811 00000535 0E                      	push	cs
 17812 00000536 1F                      	pop	ds
 17813                                  	; 22/10/2022
 17814 00000537 A3[8102]                	mov	[hi_doscod_size],ax
 17815 0000053A 890E[7F02]              	mov	[lo_doscod_size],cx
 17816 0000053E 8916[7B02]              	mov	[dos_segreinit],dx
 17817                                  	
 17818                                  	; 11/12/2022
 17819                                  	; ds = cs
 17820                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17821                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17822                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17823                                  
 17824                                  	; 05/06/2018 - Retro DOS v3.0
 17825                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17826                                  
 17827                                  	; 11/12/2022
 17828                                  	; ds = cs
 17829                                  	; 22/10/2022
 17830                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17831 00000542 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17832                                  	;mov	[cs:DOSINFO],ax
 17833 00000545 A3[6B02]                	mov	[DOSINFO],ax
 17834                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17835 00000548 268B4502                	mov	ax,[es:di+2]
 17836                                  	;mov	[cs:DOSINFO+2],ax
 17837 0000054C A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17838                                  
 17839                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17840 0000054F 268B4504                	mov	ax,[es:di+4]
 17841                                  	;mov	[cs:sysi_country],ax
 17842 00000553 A3[7702]                	mov	[sysi_country],ax
 17843                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17844 00000556 268B4506                	mov	ax,[es:di+6]
 17845                                  	;mov	[cs:sysi_country+2],ax
 17846 0000055A A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17847                                  
 17848                                  	; 20/04/2019
 17849                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17850                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17851                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17852                                  	; 22/10/2022
 17853                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17854                                  	;;;mov	[dos_segreinit+2],es
 17855                                  	;;mov	[dos_segreinit+2],ax
 17856                                  	;mov	[cs:dos_segreinit+2],ax
 17857                                  	; 11/12/2022
 17858                                  	; ds = cs
 17859 0000055D 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17860 00000561 8C06[7D02]              	mov	[dos_segreinit+2],es
 17861                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17862                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17863                                  	;mov	[cs:dos_segreinit+2],es
 17864                                  
 17865                                  ; ----------------------------------------------------------------------------
 17866                                  
 17867                                  ;SYSINIT:0577h:
 17868                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17869                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17870                                  
 17871                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17872                                  ;------ Cover up RPL code with an arena
 17873                                  ;SYSINIT:05EBh:
 17874                                  	; 11/12/2022
 17875                                  	; ds = cs
 17876 00000565 31DB                    	xor	bx,bx
 17877 00000567 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17878                                  	;cmp	word [RPLMemTop],0
 17879                                  	;;cmp	word [cs:RPLMemTop],0
 17880 0000056B 7450                    	je	short NoRPLArena
 17881                                  
 17882                                  ;------ alloc all memory
 17883                                  
 17884                                  	; 11/12/2022
 17885                                  	;mov	bx,0FFFFh
 17886 0000056D 4B                      	dec	bx
 17887                                  	; bx = 0FFFFh
 17888 0000056E B448                    	mov	ah,48h
 17889 00000570 CD21                    	int	21h
 17890                                  			; DOS - 2+ - ALLOCATE MEMORY
 17891                                  			; BX = number of 16-byte paragraphs desired
 17892 00000572 B448                    	mov	ah,48h
 17893 00000574 CD21                    	int	21h
 17894                                  
 17895 00000576 8EC0                    	mov	es,ax			; get it into ES and save it
 17896 00000578 06                      	push	es
 17897                                  
 17898                                  ;------ resize upto RPL mem
 17899                                  
 17900                                  	; 11/12/2022
 17901                                  	; ds = cs
 17902                                  	;sub	ax,[cs:RPLMemTop]
 17903 00000579 2B06[9402]              	sub	ax,[RPLMemTop]
 17904 0000057D F7D8                    	neg	ax
 17905 0000057F 48                      	dec	ax
 17906 00000580 89C3                    	mov	bx,ax
 17907 00000582 B44A                    	mov	ah,4Ah
 17908 00000584 CD21                    	int	21h
 17909                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17910                                  			; ES = segment address of block to change
 17911                                  			; BX = new size in paragraphs
 17912                                  
 17913                                  ;------ allocate the free (RPL MEM)
 17914                                  
 17915 00000586 BBFFFF                  	mov	bx,0FFFFh
 17916 00000589 B448                    	mov	ah,48h
 17917 0000058B CD21                    	int	21h
 17918 0000058D B448                    	mov	ah,48h
 17919 0000058F CD21                    	int	21h
 17920                                  
 17921                                  ;----- mark that it belongs to RPL
 17922                                  
 17923 00000591 48                      	dec	ax
 17924 00000592 8EC0                    	mov	es,ax
 17925                                  	;mov	word [es:arena_owner],8
 17926 00000594 26C70601000800          	mov	word [es:1],8
 17927                                  	;mov	word [es:arena_name],'RP'
 17928 0000059B 26C70608005250          	mov	word [es:8],'RP'
 17929                                  	;mov	word [es:arena_name+2],'L'
 17930 000005A2 26C7060A004C00          	mov	word [es:10],'L'
 17931                                  	;mov	word [es:arena_name+4],0
 17932 000005A9 26C7060C000000          	mov	word [es:12],0
 17933                                  	;mov	word [es:arena_name+6],0
 17934 000005B0 26C7060E000000          	mov	word [es:14],0	
 17935                                  
 17936 000005B7 07                              pop     es                      ; get back ptr to first block
 17937 000005B8 B449                            mov     ah,49h	; Dealloc	; and free it
 17938 000005BA CD21                    	int	21h		
 17939                                  					; DOS - 2+ - FREE MEMORY
 17940                                  					; ES = segment address of area to be freed
 17941                                  	; 11/12/2022
 17942 000005BC F8                      	clc
 17943                                  
 17944                                  ; ----------------------------------------------------------------------------
 17945                                  
 17946                                  NoRPLArena:
 17947                                  	; 11/12/2022
 17948                                  	; ds = cs
 17949                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17950 000005BD C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17951                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17952                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17953                                  
 17954                                  	; 11/12/2022
 17955                                  	;clc				; get the extended memory size
 17956                                  
 17957                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17958                                  ;	if the function reports an error do nothing else store the extended
 17959                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17960                                  ;	currently pointed to by es:di. use the offsets specified in the
 17961                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17962                                  
 17963 000005C1 B488                    	mov	ah,88h
 17964 000005C3 CD15                    	int	15h			; check extended memory size
 17965 000005C5 720B                    	jc	short no_ext_memory
 17966                                  			; Get Extended Memory Size
 17967                                  			; Return: CF clear on success
 17968                                  			; AX = size of memory above 1M in K	
 17969                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17970                                  	; 22/10/2022
 17971 000005C7 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17972 000005CB 09C0                    	or	ax,ax
 17973 000005CD 7403                    	jz	short no_ext_memory
 17974 000005CF E80606                  	call	ClrVDISKHeader
 17975                                  no_ext_memory:
 17976                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17977 000005D2 268B4510                	mov	ax,[es:di+10h]
 17978                                  	;add	ax,bufinsiz
 17979 000005D6 83C014                  	add	ax,20			; size of buffer header
 17980                                  	; 11/12/2022
 17981                                  	; ds = cs
 17982 000005D9 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17983                                  	;mov	[cs:singlebuffersize],ax	
 17984                                  	; 11/12/2022
 17985 000005DC A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17986                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17987                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17988 000005DF 26884543                	mov	[es:di+43h],al
 17989                                  
 17990                                  ; determine if 386 system...
 17991                                  
 17992                                  	;get_cpu_type			; macro to determine cpu type
 17993                                  
 17994                                  get_cpu_type:
 17995                                  	; 11/12/2022
 17996 000005E3 9C                      	pushf
 17997                                  	;push	bx
 17998                                  	;xor	bx,bx
 17999                                  	; 11/12/2022
 18000                                  	;xor	cx,cx
 18001                                  	;
 18002 000005E4 31C0                    	xor	ax,ax
 18003                                  	; ax = 0
 18004 000005E6 50                      	push    ax
 18005 000005E7 9D                      	popf
 18006 000005E8 9C                      	pushf
 18007 000005E9 58                      	pop	ax
 18008 000005EA 2500F0                  	and	ax,0F000h
 18009                                  	;cmp	ax,0F000h
 18010 000005ED 80FCF0                  	cmp	ah,0F0h 
 18011 000005F0 7410                    	je	short cpu_8086
 18012                                  	;mov	ax,0F000h
 18013 000005F2 B4F0                    	mov	ah,0F0h
 18014                                  	; ax = 0F000h
 18015 000005F4 50                      	push	ax
 18016 000005F5 9D                      	popf
 18017 000005F6 9C                      	pushf
 18018 000005F7 58                      	pop	ax
 18019                                  	;and	ax,0F000h
 18020 000005F8 80E4F0                  	and	ah,0F0h
 18021 000005FB 7405                    	jz	short cpu_286
 18022                                  cpu_386:
 18023                                  	; 11/12/2022
 18024                                  	;;inc	bx
 18025                                  	;inc	cx
 18026                                  	; 11/12/2022
 18027                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 18028 000005FD 26C6454401              	mov	byte [es:di+44h],1
 18029                                  cpu_286:
 18030                                  	;;;inc	bx
 18031                                  	;;inc	cx
 18032                                  cpu_8086:
 18033                                  	; 11/12/2022
 18034                                  	;;mov	ax,bx	
 18035                                  	;pop	bx
 18036 00000602 9D                      	popf
 18037                                  
 18038                                  	;...
 18039                                  
 18040                                  	; 11/12/2022
 18041                                  	;or	cl,cl
 18042                                  	;jz	short not_386_system
 18043                                  	; 11/12/202
 18044                                  	;cmp	cl,2
 18045                                  	;;cmp	ax,2			; is it a 386?
 18046                                  	;jne	short not_386_system	; no: don't mess with flag
 18047                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 18048                                  	; 11/12/2022
 18049                                  	; 22/10/2022
 18050                                  	;mov	byte [es:di+44h],1
 18051                                  not_386_system:
 18052                                  	;mov	al,[es:di+SYSI_NUMIO]
 18053 00000603 268A4520                	mov	al,[es:di+20h]
 18054                                  	; 11/12/2022
 18055                                  	; ds = cs
 18056 00000607 A2[7E03]                	mov	[drivenumber],al	; save start of installable block drvs
 18057                                  	;mov	[cs:drivenumber],al
 18058                                  
 18059 0000060A 8CC8                    	mov	ax,cs
 18060 0000060C 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 18061                                  	; 11/12/2022
 18062                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 18063                                  	;;mov	cx,[cs:singlebuffersize]
 18064                                  	;shr	cx,1			
 18065                                  	;shr	cx,1			; divide size by 16...
 18066                                  	;shr	cx,1
 18067                                  	;shr	cx,1			; ...to get paragraphs...
 18068                                  	;inc	cx			; ... and round up
 18069                                  	; 11/12/2022
 18070 0000060F 8B1E[9B02]              	mov	bx,[singlebuffersize]
 18071 00000613 B104                    	mov	cl,4
 18072 00000615 D3EB                    	shr	bx,cl
 18073 00000617 43                      	inc	bx
 18074                                  
 18075                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 18076                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 18077                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 18078                                  ;	  it is probably safe to assume that the sector size always will be.
 18079                                  ;
 18080                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 18081                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 18082                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 18083                                  ;	  other code from ever causing a problem???
 18084                                  
 18085                                  	; 11/12/2022
 18086 00000618 29D8                    	sub	ax,bx
 18087                                  	;sub	ax,cx
 18088 0000061A A3[A502]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 18089                                  	; 22/10/2022
 18090                                  	;mov	[cs:top_of_cdss],ax
 18091                                  
 18092                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 18093                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 18094                                  ;	for allocating memory for MagicDrv.
 18095                                  
 18096 0000061D 06                      	push	es			; preserve pointer to dosinfo
 18097 0000061E 57                      	push	di
 18098                                  
 18099                                  	; 22/10/2022
 18100                                  ;	mov	cx,ax			; save pointer for buffer
 18101                                  ;
 18102                                  ;;	now allocate space for 26 CDSs
 18103                                  ;
 18104                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 18105                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 18106                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 18107                                  
 18108                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 18109                                  	; (SYSINIT:064Ch)
 18110 0000061F 89C1                    	mov	cx,ax ; (*)
 18111 00000621 2D8F00                  	sub	ax,((26 *(curdirlen))+15)/16 ; sub ax,143
 18112 00000624 A3[A302]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 18113 00000627 A3[A102]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 18114                                  	 	
 18115                                  ; setup and initialize the temporary buffer at cx
 18116                                  
 18117                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 18118 0000062A 26C47D12                	les	di,[es:di+12h]
 18119                                  	; 11/12/2022
 18120 0000062E 31DB                    	xor	bx,bx
 18121                                  	;xor	ax,ax
 18122                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 18123                                  	;mov	word [es:di+4],0
 18124 00000630 26895D04                	mov	[es:di+4],bx ; 0
 18125                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 18126                                  	;mov	word [es:di],0
 18127 00000634 26891D                  	mov	[es:di],bx ; 0
 18128                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 18129                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 18130                                  	;mov	[es:di+2],ax
 18131                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 18132                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 18133 00000637 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 18134 0000063B 8EC1                    	mov	es,cx
 18135                                  
 18136                                  	; 11/12/2022
 18137                                  	;xor	ax,ax
 18138                                  	;mov	di,ax			; es:di -> single buffer
 18139 0000063D 89DF                    	mov	di,bx
 18140                                  	; di = 0
 18141                                  
 18142                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 18143                                  	; 11/12/2022
 18144                                  	;mov	[es:di],ax ; 0
 18145 0000063F 26891D                  	mov	[es:di],bx ; 0
 18146                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 18147                                  	; 11/12/2022
 18148                                  	;mov	[es:di+2],ax ; 0
 18149 00000642 26895D02                	mov	[es:di+2],bx ; 0 
 18150                                  
 18151                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 18152                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 18153                                  
 18154                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 18155 00000646 26C74504FF00            	mov	word [es:di+4],00FFh
 18156                                  ;SYSINIT:06E6h
 18157                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 18158                                  	;mov	word [es:di+6],0
 18159                                  	; 11/12/2022
 18160                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 18161 0000064C 26895D06                	mov	[es:di+6],bx ; 0
 18162                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 18163                                  	;mov	word [es:di+8],0
 18164                                  	; 11/12/2022
 18165                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 18166 00000650 26895D08                	mov	[es:di+8],bx ; 0
 18167                                  
 18168 00000654 5F                      	pop	di			; restore pointer to DOSINFO data
 18169 00000655 07                      	pop	es
 18170                                  
 18171                                  	; 11/12/2022
 18172                                  	; ds = cs
 18173                                  	; 22/10/2022
 18174                                  	;push	cs
 18175                                  	;pop	ds
 18176                                  
 18177 00000656 E81206                  	call	TempCDS			; set up cdss so re_init and sysinit
 18178                                  					;  can make disk system calls
 18179                                  					; tempcds trashes ds
 18180                                  	; 10/05/2019
 18181 00000659 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 18182                                  
 18183                                  	;if not ibmjapver
 18184                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 18185                                  	;endif
 18186                                  
 18187                                  	; 22/10/2022
 18188                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 18189                                  	; 30/12/2022
 18190                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 18191                                  	;call	far ptr 70h:89Bh
 18192 0000065E 9A[8F07]7000            	call	DOSBIODATASEG:RE_INIT
 18193                                  
 18194 00000663 FB                      	sti				; ints ok
 18195 00000664 FC                      	cld				; make sure
 18196                                  
 18197                                  ; 23/03/2019
 18198                                  
 18199                                  ;SYSINIT:069Eh	; 30/12/2022
 18200                                  
 18201                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 18202                                  ; of the way by putting it just below sysinit at end of memory.
 18203                                  
 18204 00000665 8CCB                    	mov	bx,cs
 18205 00000667 83EB10                  	sub	bx,10h
 18206 0000066A 8EC3                    	mov	es,bx
 18207 0000066C 31F6                    	xor	si,si
 18208 0000066E 89F7                    	mov	di,si
 18209 00000670 B98000                  	mov	cx,128
 18210 00000673 F3A5                    	rep	movsw
 18211                                  
 18212                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 18213                                  	; 22/10/2022
 18214 00000675 268C063600              	mov	[es:36h],es
 18215                                  
 18216                                   	; Set Process Data Block - Program Segment Prefix address
 18217                                  	; BX = PDB/PSP segment
 18218 0000067A B450                            mov	ah,50h	; SET_CURRENT_PDB
 18219 0000067C CD21                    	int	21h			; tell DOS we moved it
 18220                                  			; DOS - 2+ internal - SET PSP SEGMENT
 18221                                  			; BX = segment address of new PSP
 18222                                  	; 22/10/2022
 18223                                  	; 27/03/2019
 18224 0000067E 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 18225                                  
 18226 0000067F 0E                      	push	cs	
 18227 00000680 1F                      	pop	ds
 18228                                  
 18229                                  	; set up temp. critical error handler
 18230 00000681 BA[9D45]                	mov	dx,int24		; set up int 24 handler
 18231                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 18232                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 18233 00000684 B82425                  	mov	ax,2524h
 18234 00000687 CD21                    	int	21h
 18235                                  
 18236 00000689 803E[8103]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 18237 0000068E 7405                            je      short no_err		   ;  N: continue            M029
 18238 00000690 BA[D24D]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 18239                                          ; 22/10/2022
 18240                                  	;call	print 			   ;		             M029
 18241                                  	; 12/12/2022
 18242 00000693 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 18243                                  no_err:
 18244                                  	; 12/05/2019
 18245                                  	;----------------------------------------------
 18246                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 18247                                  	; 22/10/2022 - Retro DOS v4.0
 18248                                  	; 12/12/2022
 18249 00000695 BA[A145]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 18250                                  p_dosinit_msg:
 18251 00000698 E8DD3E                  	call	print			; Print message
 18252                                  	;----------------------------------------------
 18253                                  	
 18254                                  	; 11/12/2022
 18255                                  	; 22/10/2022
 18256                                  	; 23/03/2019 - Retro DOS v4.0
 18257                                  	;pop	ds			; start of free memory
 18258                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 18259                                  	
 18260                                  	; 11/12/2022
 18261                                  	; 27/03/2019
 18262 0000069B 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 18263 0000069F 1F                      	pop	ds ; */
 18264                                  
 18265 000006A0 08D2                    	or	dl,dl
 18266                                  	;jz	short nodrvset		; bios didn't say
 18267 000006A2 7410                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 18268                                  	;dec	dl			; A = 0
 18269                                  	; 18/12/2022
 18270 000006A4 4A                      	dec	dx
 18271 000006A5 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 18272 000006A7 CD21                    	int	21h			; select the disk
 18273                                  			; DOS - SELECT DISK
 18274                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 18275                                  			; Return: AL = number of logical drives
 18276                                  nodrvset:
 18277                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS SYINIT)
 18278                                  	; (SYSINIT:06DFh)
 18279                                  	;push	ds
 18280 000006A9 29C0                    	sub	ax,ax
 18281 000006AB 8ED8                    	mov	ds,ax ; 0 ; ROM BIOS Data Area
 18282 000006AD A16C04                  	mov	ax,[46Ch] ; timer tick count (18.2 ticks per second)
 18283 000006B0 2EA3[8403]              	mov	[cs:_timer_lw_],ax
 18284                                  	;pop	ds
 18285                                  	; ds <> cs
 18286                                  
 18287                                  	; ---------------------
 18288                                  
 18289                                  	;ifdef	dblspace_hooks
 18290                                  	;	....
 18291                                  	;	....
 18292                                  	;endif	
 18293                                  
 18294                                  	; ---------------------
 18295                                  
 18296                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 18297                                  
 18298                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 18299                                  ; ----------------------------------------------------------------------------
 18300                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 18301                                  ; ----------------------------------------------------------------------------
 18302                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 18303                                  
 18304                                  ProcessConfig:
 18305                                  	;; ds = cs ; 27/03/2019
 18306                                  	; 11/12/2022
 18307                                  	; ds <> cs	
 18308                                  
 18309                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 18310                                  
 18311 000006B4 E82619                  	call	doconf			; do pre-scan for dos=high/low
 18312                                  
 18313                                  	; 11/12/2022
 18314                                  	; 27/03/2019
 18315                                  	; ds = cs (at return from doconf)
 18316                                  
 18317                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 18318                                  ; It will either be relocated to low memory, above the DOS data structures,
 18319                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 18320                                  ; code entry points will be located in low memory. Dos_segreinit is used
 18321                                  ; to tell the DOS data where the code has been placed, and to install the
 18322                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 18323                                  ; must first initialize it in its present location and load the installable
 18324                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 18325                                  ; relocate the DOS code into HiMem.
 18326                                  ;
 18327                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 18328                                  ; to install the low memory stub (this must be done before allowing any
 18329                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 18330                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 18331                                  ; been patched.
 18332                                  
 18333                                  	; 22/10/2022 - Retro DOS v4.0
 18334                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 18335                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 18336                                  	; 11/12/2022
 18337 000006B7 803E[6A02]00            	cmp	byte [runhigh],0
 18338 000006BC 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 18339                                  
 18340                                  ;------ user chose to load high
 18341                                  
 18342                                  	; 22/10/2022
 18343                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 18344                                  	; 11/12/2022
 18345                                  	; ds = cs
 18346 000006BE 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18347                                  
 18348                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18349                                  	; 27/03/2019
 18350                                  	;;mov	es,[FINAL_DOS_LOCATION]
 18351                                  
 18352 000006C2 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 18353                                  	; 11/12/2022
 18354                                  	; ds = cs
 18355                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18356 000006C4 FF1E[7B02]              	call	far [dos_segreinit]
 18357                                  
 18358 000006C8 EB10                    	jmp	short do_multi_pass
 18359                                  
 18360                                  ;------ User chose to load dos low
 18361                                  
 18362                                  dont_install_stub:
 18363                                  	; 22/10/2022
 18364 000006CA 31DB                    	xor	bx,bx			; M012
 18365                                  					; don't use int 21 call to alloc mem
 18366 000006CC E8D002                  	call	MovDOSLo		; move it !
 18367                                  
 18368 000006CF B80100                  	mov	ax,1			; dont install stub
 18369                                  	; 11/12/2022
 18370                                  	; ds = cs
 18371 000006D2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18372                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 18373                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18374                                  	; 27/03/2019
 18375                                  ;do_multi_pass:
 18376                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 18377                                  
 18378                                  	; 11/12/2022
 18379                                  	; ds = cs
 18380                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 18381 000006D6 FF1E[7B02]              	call	far [dos_segreinit]
 18382                                  do_multi_pass:
 18383 000006DA E80C02                  	call	AllocFreeMem		; allocate all the free mem
 18384                                  					; & update [memhi] & [area]
 18385                                  					; start of free memory.
 18386                                  	;ifdef	dblspace_hooks
 18387                                  	;mov	bx,0			; magic backdoor to place int hooks
 18388                                  	;call	cs:MagicBackdoor
 18389                                  	;endif
 18390                                  
 18391                                  ; Now, process config.sys some more.  
 18392                                  ; Load the device drivers and install programs
 18393                                  
 18394                                  	; 22/10/2022
 18395                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 18396                                  	; 11/12/2022
 18397                                  	; ds = cs
 18398 000006DD FE06[CB02]              	inc	byte [multi_pass_id]
 18399 000006E1 E89619                  	call	multi_pass		; load device drivers
 18400 000006E4 E8ED2D                  	call	ShrinkUMB
 18401 000006E7 E8112E                  	call	UnlinkUMB		; unlink all UMBs	;M002
 18402                                  	; 02/11/2022
 18403                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 18404                                  	; 11/12/2022
 18405                                  	; ds = cs
 18406 000006EA FE06[CB02]              	inc	byte [multi_pass_id]
 18407 000006EE E88919                  	call	multi_pass		; was load ifs (now does nothing)
 18408                                  
 18409                                  	;ifdef	dblspace_hooks
 18410                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 18411                                  	;endif
 18412                                  
 18413                                  	; ds = cs
 18414                                  	
 18415 000006F1 E82106                  	call	endfile			; setup fcbs, files, buffers etc
 18416                                  
 18417                                  	;ifdef	dblspace_hooks
 18418                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 18419                                  	;endif
 18420                                  
 18421                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 18422                                  ;to device drivers. This has been moved up to this point to avoid problems 
 18423                                  ;with overlays called from installed programs
 18424                                  
 18425                                  	; 11/12/2022
 18426                                  	; ds = cs
 18427                                  
 18428                                  	;;mov	ax,Bios_Data ; 0070h
 18429                                  	;mov	ax,KERNEL_SEGMENT
 18430                                  	; 21/10/2022
 18431 000006F4 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 18432 000006F7 8EC0                    	mov	es,ax			; point ES to bios data
 18433                                  
 18434 000006F9 26C606[9C08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 18435                                  
 18436                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18437                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 18438                                  	;test	byte [cs:install_flag],1
 18439                                  	; 11/12/2022
 18440                                  	; ds = cs
 18441 000006FF F606[CC02]01            	test	byte [install_flag],1
 18442                                  	;test	byte [cs:install_flag],have_install_cmd
 18443                                  					; are there install commands?
 18444 00000704 7407                    	jz	short dolast		; no, no need for further processing
 18445                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 18446                                  	; 11/12/2022
 18447                                  	; ds =cs
 18448 00000706 FE06[CB02]              	inc	byte [multi_pass_id]
 18449 0000070A E86D19                  	call	multi_pass		; execute install= commands
 18450                                  
 18451                                  dolast:
 18452                                  	
 18453                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 18454                                  ;  free the confbot area used for config.sys and sysinit itself.
 18455                                  
 18456                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 18457                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 18458                                  ; anything, but just set up the ROM area for suballocation (or print
 18459                                  ; a message if HiMem is not available).
 18460                                  ;
 18461                                  ; There is also this little hack for CPM style DOS calls that needs to
 18462                                  ; be done when A20 is set...
 18463                                  
 18464                                  	; 11/12/2022
 18465                                  	; ds = cs
 18466                                  
 18467                                  	; 22/10/2022
 18468                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 18469                                  	; 11/12/2022
 18470 0000070D 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18471 00000712 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 18472 00000714 E83702                  	call	LoadDOSHiOrLo
 18473                                  _@@_:
 18474                                  	;cmp	byte [cs:runhigh],0	; are we running low
 18475                                  	; 11/12/2022
 18476                                  	; ds = cs
 18477 00000717 803E[6A02]00            	cmp	byte [runhigh],0
 18478                                  	;je	short _@@@
 18479 0000071C 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 18480 0000071E E82B05                  	call	CPMHack			; make ffff:d0 same as 0:c0
 18481                                  ;_@@@:
 18482                                  
 18483                                  ; We are now done with CONFIG.SYS processing
 18484                                  
 18485                                  ConfigDone:
 18486                                  	; 12/12/2022
 18487                                  	; 22/10/2022
 18488                                  	;mov	byte [cs:donotshownum],1 
 18489                                  					; done with config.sys.
 18490                                  					; do not show line number message.
 18491                                  	;mov	es,[cs:area]
 18492                                  	; 12/12/2022
 18493                                  	; ds = cs
 18494                                  	; 27/03/2019
 18495 00000721 C606[5303]01            	mov	byte [donotshownum],1
 18496 00000726 8E06[6603]              	mov	es,[area]
 18497                                  
 18498 0000072A B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18499 0000072C CD21                    	int	21h
 18500                                  			; DOS - 2+ - FREE MEMORY
 18501                                  			; ES = segment address of area to be freed
 18502                                  
 18503                                  	; 22/10/2022
 18504                                  	;test	word [cs:install_flag],2
 18505                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18506                                  	;test	byte [cs:install_flag],has_installed
 18507                                  	; 11/12/2022
 18508                                  	; ds = cs
 18509 0000072E F606[CC02]02            	test	byte [install_flag],2 ; has_installed
 18510                                  	;test	byte [install_flag],has_installed
 18511 00000733 741F                    	jz	short skip_free_sysinitbase ; no.
 18512                                  
 18513                                  ; set block from the old_area with impossible_owner_size.
 18514                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18515                                  ; handle install= command.
 18516                                  
 18517                                  	; 12/12/2022
 18518                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18519                                  	;push	bx
 18520                                  	
 18521                                  	; 22/10/2022
 18522                                  	;mov	es,[cs:old_area]
 18523                                  	;mov	bx,[cs:impossible_owner_size]
 18524                                  	; 12/12/2022
 18525                                  	; ds = cs
 18526 00000735 8E06[5C03]              	mov	es,[old_area]
 18527 00000739 8B1E[5E03]              	mov	bx,[impossible_owner_size]
 18528                                  	
 18529 0000073D B44A                    	mov	ah,4Ah ; SETBLOCK
 18530 0000073F CD21                    	int	21h
 18531                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18532                                  			; ES = segment address of block to change
 18533                                  			; BX = new size in paragraphs
 18534 00000741 8CC0                    	mov	ax,es
 18535 00000743 48                      	dec	ax
 18536 00000744 8EC0                    	mov	es,ax			; point to arena
 18537                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18538 00000746 26C70601000800          	mov	word [es:1],8
 18539                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18540 0000074D 26C70608005344          	mov	word [es:8],'SD'
 18541                                  	
 18542                                  	; 12/12/2022
 18543                                  	;pop	bx
 18544                                          ;pop	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18545                                  
 18546                                  skip_free_sysinitbase:
 18547                                  	; 22/10/2022
 18548                                  	;cmp	byte [cs:runhigh],0
 18549                                  	; 12/12/2022
 18550                                  	; ds = cs
 18551 00000754 803E[6A02]00            	cmp	byte [runhigh],0	
 18552 00000759 7403                    	je	short _@@@_ ; 04/07/2023
 18553                                  
 18554 0000075B E8D003                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18555                                  
 18556                                  ; ----------------------------------------------------------------------------
 18557                                  
 18558                                  _@@@_:
 18559                                  	; 12/12/2022
 18560                                  	; ds = cs
 18561                                  	; 22/10/2022
 18562                                  	; 27/03/2019
 18563                                  	;push	cs
 18564                                  	;pop	ds			; point DS to sysinitseg
 18565                                  
 18566                                  ; set up the parameters for command
 18567                                  
 18568                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18569                                  ;;ifdef	MULTI_CONFIG
 18570                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18571                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18572                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18573                                  ;	; !!!
 18574                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18575                                  ;       ; !!!
 18576                                  ;	call    disable_autoexec        ; no, we should disable it
 18577                                  ;process_autoexec:
 18578                                  ;;endif	; !!!
 18579                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18580                                  ;	; !!!
 18581                                  
 18582                                  	; 22/10/2022 
 18583                                  	;mov     cl,[command_line]
 18584                                          ;mov     ch,0
 18585                                          ;inc     cx
 18586                                          ;mov     si,command_line	
 18587                                  	;add     si,cx
 18588                                          ;mov     byte [si],cr	; cr-terminate command line
 18589                                  
 18590                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18591                                  	; (SYSINIT:0809h)
 18592                                  
 18593                                  	;;;;
 18594                                  
 18595                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 18596                                  	; (SYSINIT:0813h)
 18597                                  	; ds = cs
 18598                                  	; push	cs
 18599                                  	; pop	ds
 18600                                  
 18601 0000075E C606[DD14]00            	mov	byte [config_cmd],0	; set special code for query_user
 18602 00000763 E8DB39                  	call    query_user		; to issue the AUTOEXEC prompt
 18603 00000766 7308                    	jnc	short process_autoexec	; we should process autoexec normally
 18604                                  	; !!!
 18605 00000768 800E[AA47]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18606                                  	; !!!
 18607 0000076D E8CD3A                  	call    disable_autoexec        ; no, we should disable it
 18608                                  process_autoexec:
 18609                                  	; !!!
 18610 00000770 E8153B                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18611                                  
 18612                                  	;mov     cl,[command_line]
 18613                                  	; 30/12/2022
 18614 00000773 BE[E046]                	mov	si,command_line
 18615 00000776 8A0C                    	mov	cl,[si]
 18616 00000778 B500                    	mov     ch,0
 18617 0000077A 41                      	inc     cx
 18618                                  	;mov	si,command_line
 18619 0000077B 01CE                    	add     si,cx
 18620 0000077D C6040D                  	mov     byte [si],cr	; cr-terminate command line
 18621                                  	
 18622                                  	;;;;		
 18623                                  
 18624                                  ; 30/12/2022 - Retro DOS v4.2
 18625                                  %if 0
 18626                                  	;mov	si,(offset command_line+1)
 18627                                  	mov	si,command_line+1
 18628                                  	push    ds
 18629                                  	pop     es
 18630                                  	mov     di,si
 18631                                  	mov     cl,0FFh ; -1
 18632                                  _@_loop:
 18633                                  	inc     cl ; +1
 18634                                  	lodsb
 18635                                  	stosb
 18636                                  	or      al,al
 18637                                  	jnz     short _@_loop
 18638                                  	dec     di
 18639                                  	mov     al,0Dh
 18640                                  	stosb			; cr-terminate command line
 18641                                  	mov     [command_line],cl ; command line length (except CR)
 18642                                  
 18643                                  %endif
 18644                                  
 18645                                  ; ----------------------------------------------------------------------------
 18646                                  
 18647                                  ;   Once we get to this point, the above code, which is below "retry"
 18648                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18649                                  ;   which follow....)
 18650                                  
 18651                                  retry:
 18652 00000780 BA[5246]                	mov	dx,commnd	; now pointing to file description
 18653                                  
 18654                                  ; we are going to open the command interpreter and size it as is done in
 18655                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18656                                  ; there is not enough room for the command interpreter,exec will probably
 18657                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18658                                  ; here to catch it. this code is not perfect (for instance .exe command
 18659                                  ; interpreters are possible) because it does its sizing based on the
 18660                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18661                                  ; correctness to be usable.
 18662                                  
 18663                                  ; first, find out where the command interpreter is going to go.
 18664                                  
 18665 00000783 52                      	push	dx		; save pointer to name
 18666 00000784 BBFFFF                  	mov	bx,0FFFFh
 18667 00000787 B448                    	mov	ah,48h	; ALLOC
 18668 00000789 CD21                            int     21h             ; get biggest piece
 18669 0000078B B448                    	mov	ah,48h	; ALLOC
 18670 0000078D CD21                    	int	21h		; second time gets it
 18671 0000078F 726B                    	jc	short memerrjx	; oooops
 18672                                  
 18673 00000791 8EC0                    	mov	es,ax
 18674 00000793 B449                    	mov	ah,49h	; DEALLOC
 18675 00000795 CD21                    	int	21h		; give it right back
 18676 00000797 89DD                    	mov	bp,bx
 18677                                  
 18678                                  ; es:0 points to block,and bp is the size of the block in para.
 18679                                  
 18680                                  ; we will now adjust the size in bp down by the size of sysinit.
 18681                                  ; we need to do this because exec might get upset if some of the exec
 18682                                  ; data in sysinit is overlayed during the exec.
 18683                                  
 18684                                  	; 22/10/2022
 18685                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18686 00000799 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18687 0000079D 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18688                                  
 18689                                  ; Note that the "config_wrkseg" environment data is a segment in
 18690                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18691                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18692                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18693                                  ; we need to make sure that there's no way Exec will stomp on that data
 18694                                  ; before it can copy it, and one way to do that is to make the available
 18695                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18696                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18697                                  ; of the current sysinit CS....
 18698                                  ;
 18699                                  ; The reason I use the term "paranoid" is because this code should have
 18700                                  ; slid the data required by Exec up to the very top of memory, because as
 18701                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18702                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18703                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18704                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18705                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18706                                  
 18707                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 18708                                  	; (SYSINIT:0858h)
 18709 0000079F 8B0E[D914]              	mov	cx,[config_envlen]
 18710 000007A3 E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 18711 000007A5 A1[DB14]                        mov	ax,[config_wrkseg]	
 18712                                  
 18713                                  	; 22/10/2022
 18714                                  	;mov	cx,[config_envlen]
 18715                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18716                                          ;mov	ax,[config_wrkseg]
 18717                                  ;no_env:
 18718                                  	; 22/10/2022
 18719                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18720                                  no_env:
 18721                                  	; 30/12/2022
 18722                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 18723 000007A8 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18724 000007AA 83C311                  	add	bx,11h		; add the sysinit php
 18725 000007AD 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18726 000007AF 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18727                                  
 18728                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18729 000007B1 B8003D                          mov	ax,3D00h
 18730 000007B4 F9                      	stc                     ; in case of int 24
 18731 000007B5 CD21                    	int	21h
 18732 000007B7 7270                    	jc	short comerr	; ooops
 18733                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18734                                  			; DS:DX -> ASCIZ filename
 18735                                  			; AL = access mode
 18736                                  			; 0 - read
 18737                                  	; 22/10/2022
 18738                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18739 000007B9 89C3                            mov     bx,ax           ; handle in bx
 18740                                  
 18741                                  ;   If the standard command interpreter is being used, verify it is correct
 18742                                  
 18743                                  	; 30/12/2022 - Retro DOS v4.2
 18744                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 18745 000007BB 803E[4F46]00            	cmp	byte [newcmd],0	; was a new shell selected?
 18746 000007C0 7518                    	jne	short skip_validation ; yes
 18747 000007C2 BA[7C07]                	mov	dx,retry-4
 18748 000007C5 B90400                  	mov	cx,4		;
 18749 000007C8 B43F                    	mov	ah,READ		;
 18750 000007CA CD21                    	int	21h		;
 18751 000007CC 803E[7C07]E9            	cmp	byte [retry-4],0E9h
 18752 000007D1 7556                    	jne	short comerr
 18753                                  	; 20/04/2019 - Retro DOS v4.0
 18754                                  	; 30/12/2022 
 18755                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18756                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)	
 18757 000007D3 803E[7F07]66            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18758 000007D8 754F                    	jne	short comerr	;
 18759                                  
 18760                                  	; 22/10/2022
 18761                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18762                                  	;jne	short skip_validation ; yes
 18763                                  	;mov	dx,retry-4
 18764                                  	;mov	cx,4		;
 18765                                  	;mov	ah,READ		;
 18766                                  	;int	21h		;
 18767                                  	;cmp	byte [retry-4],0E9h
 18768                                  	;jne	short comerr
 18769                                  	;; 20/04/2019 - Retro DOS v4.0
 18770                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18771                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18772                                  	;jne	short comerr	;
 18773                                  
 18774                                  ;skip_validation:
 18775                                  	; 22/10/2022
 18776                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18777                                  skip_validation:
 18778                                  	; 30/12/2022
 18779                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 18780 000007DA 31C9                    	xor	cx,cx
 18781 000007DC 31D2                    	xor	dx,dx
 18782                                  	;mov	ax,(LSEEK<<8)|2
 18783 000007DE B80242                  	mov	ax,4202h
 18784 000007E1 F9                      	stc			;in case of int 24
 18785 000007E2 CD21                    	int	21h		; get file size in dx:ax
 18786 000007E4 7243                    	jc	short comerr
 18787                                  				; convert size in dx:ax to para in ax
 18788 000007E6 83C00F                  	add	ax,15		; round up size for conversion to para
 18789 000007E9 83D200                  	adc	dx,0
 18790 000007EC E87304                  	call	off_to_para
 18791 000007EF B10C                    	mov	cl,12
 18792 000007F1 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18793 000007F3 09D0                    	or	ax,dx		; ax is now # of para for file
 18794 000007F5 83C010                  	add	ax,10h		; 100h byte php
 18795 000007F8 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18796 000007FA 7208                    	jb	short okld	; jump if yes.
 18797                                  
 18798                                  ; 30/12/2022
 18799                                  %if 0
 18800                                  	; 22/10/2022
 18801                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18802                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18803                                  	; 02/11/2022
 18804                                  	;jmp	mem_err
 18805                                  	; 11/12/2022
 18806                                  	; ds = cs
 18807                                  	jmp	mem_err2
 18808                                  %endif
 18809                                  	; 30/12/2022
 18810                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 18811                                  memerrjx:
 18812 000007FC BA[9D4B]                	mov	dx,badmem 	; "Configuration too large for memory"
 18813 000007FF E8763D                  	call	print
 18814 00000802 EB3D                    	jmp     short continue
 18815                                  
 18816                                  okld:
 18817 00000804 B43E                    	mov	ah,3Eh ; CLOSE
 18818 00000806 CD21                    	int	21h		; close file
 18819                                  
 18820                                  	; 22/10/2022
 18821 00000808 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18822                                  
 18823                                  	; 24/03/2019
 18824                                  
 18825 00000809 0E                      	push	cs		; point es to sysinitseg
 18826 0000080A 07                      	pop	es
 18827 0000080B BB[BD02]                        mov     bx,COMEXE	; point to exec block
 18828                                  	; 22/10/2022
 18829                                  	;pop	dx              ; recover pointer to name
 18830                                  
 18831                                  ;;ifdef	MULTI_CONFIG
 18832                                  
 18833                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18834                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18835                                  ;   selection was made (in which case the CONFIG environment variable will be
 18836                                  ;   set to that selection).
 18837                                  
 18838                                  	; 23/10/2022
 18839                                  	;mov	cx,[config_envlen]
 18840                                  	;jcxz	no_envdata
 18841                                          ;mov	cx,[config_wrkseg]
 18842                                  ;no_envdata:
 18843                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18844                                  	;mov	[bx],cx
 18845                                  
 18846                                  ;;endif	;MULTI_CONFIG
 18847                                  
 18848                                  	; 30/12/2022 - Retro DOS v4.2
 18849                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 18850 0000080E 8B0E[D914]              	mov	cx,[config_envlen]
 18851 00000812 E304                    	jcxz	no_envdata
 18852 00000814 8B0E[DB14]                      mov	cx,[config_wrkseg]
 18853                                  no_envdata:
 18854                                  	;mov	[bx+EXEC0.ENVIRON],cx
 18855 00000818 890F                    	mov	[bx],cx	
 18856                                  	
 18857                                  	; 23/10/2022
 18858                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18859                                  
 18860                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18861 0000081A 8C4F04                  	mov	[bx+4],cs
 18862                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18863 0000081D 8C4F08                  	mov	[bx+8],cs
 18864                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18865 00000820 8C4F0C                  	mov	[bx+12],cs
 18866                                  
 18867                                  	;mov	ax,(EXEC<<8) + 0
 18868                                  	; 23/10/2022
 18869                                  	;xor	ax,ax
 18870                                  	;mov	ah,4Bh
 18871                                  	; 04/07/2023
 18872                                  	;mov	ax,4B00h
 18873 00000823 B8004B                  	mov	ax,(EXEC<<8)
 18874                                  
 18875 00000826 F9                      	stc                     ; in case of int 24
 18876 00000827 CD21                            int     21h             ; go start up command
 18877                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18878                                  			; DS:DX -> ASCIZ filename
 18879                                  			; ES:BX -> parameter block
 18880                                  			; AL = subfunc: load & execute program
 18881                                  	;push	cs
 18882                                  	;pop	ds
 18883                                  
 18884                                  	; 23/10/2022
 18885                                  	;push	dx		; push to balance fall-through pop
 18886                                  
 18887                                  ; note fall through if exec returns (an error)
 18888                                  comerr:
 18889                                  	; 23/10/2022
 18890                                  ;;ifdef	MULTI_CONFIG
 18891                                  	;cmp	byte [commnd4],0
 18892                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18893                                  	;cmp	byte [newcmd],0
 18894                                  	;je	short continue	; don't print err msg for defaults just yet
 18895                                  ;comerr2:
 18896                                  ;;endif
 18897                                  
 18898                                  	; 30/12/2022 - Retro DOS v4.2
 18899 00000829 0E                      	push	cs
 18900 0000082A 1F                      	pop	ds
 18901 0000082B 803E[C346]00            	cmp	byte [commnd4],0
 18902 00000830 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 18903 00000832 803E[4F46]00            	cmp	byte [newcmd],0
 18904 00000837 7408                    	je	short continue	; don't print err msg for defaults just yet
 18905                                  comerr2:
 18906 00000839 52                      	push	dx ; 30/12/2022
 18907                                  
 18908                                  	; 23/10/2022
 18909 0000083A BA[194B]                        mov     dx,badcom	; want to print command error
 18910 0000083D E80C3D                  	call	badfil
 18911                                  	
 18912 00000840 5A                      	pop	dx  ; 30/12/2022
 18913                                  continue:
 18914                                  	; 23/10/2022
 18915                                  	;pop	dx
 18916                                  
 18917                                  ; 30/12/2022
 18918                                  %if 0
 18919                                  
 18920                                  ;;ifndef MULTI_CONFIG
 18921                                  	;jmp	stall
 18922                                  	; 24/10/2022
 18923                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18924                                  	jmp	short stall
 18925                                  ;;else
 18926                                  
 18927                                  %endif
 18928                                  	
 18929                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 18930                                  ;%if 1
 18931                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 18932                                  ;%if 0	
 18933 00000841 B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 18934 00000843 CD21                    	int	21h             ;
 18935 00000845 0441                    	add	al,'A'          ;
 18936 00000847 88C2                    	mov	dl,al           ; DL == default drive letter
 18937 00000849 BE[9246]                	mov	si,commnd2
 18938 0000084C 803E[4F46]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 18939 00000851 7505                    	jne	short do_def2	; then try the 2nd alternate;
 18940 00000853 C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18941 00000856 EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18942                                  do_def2:			
 18943 00000858 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 18944 0000085B 7554                            jne	short do_alt    ; no
 18945                                  do_def3:
 18946 0000085D BE[A346]                	mov	si,commnd3
 18947 00000860 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 18948 00000863 754C                    	jne	short do_alt	; no
 18949 00000865 BE[C346]                	mov	si,commnd4
 18950 00000868 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 18951 0000086B 7544                    	jne	short do_alt	; no
 18952 0000086D 52                      	push	dx              ;
 18953 0000086E BA[754D]                	mov	dx,badcomprmpt
 18954 00000871 E8043D                  	call	print		;
 18955 00000874 5A                      	pop	dx              ; recover default drive letter in DL
 18956                                  request_input:			;
 18957 00000875 B402                    	mov	ah,STD_CON_OUTPUT
 18958 00000877 CD21                    	int	21h             ;
 18959 00000879 52                      	push	dx              ;
 18960 0000087A B23E                    	mov	dl,'>'          ;
 18961 0000087C CD21                    	int	21h             ;
 18962 0000087E 8A1E[5146]              	mov	bl,[tmplate+1]	;
 18963 00000882 B700                    	mov	bh,0            ;
 18964 00000884 C687[5246]0D            	mov	byte [commnd+bx],0Dh
 18965 00000889 BA[5046]                	mov	dx,tmplate
 18966 0000088C B40A                    	mov	ah,STD_CON_STRING_INPUT
 18967 0000088E CD21                    	int	21h             ; read a line of input
 18968 00000890 BA[C44A]                	mov	dx,crlfm	;
 18969 00000893 E8E23C                  	call	print           ;
 18970 00000896 5A                      	pop	dx              ;
 18971 00000897 8A1E[5146]              	mov	bl,[tmplate+1]	;
 18972 0000089B 08DB                    	or	bl,bl           ; was anything typed?
 18973 0000089D 74D6                    	jz	short request_input ;
 18974 0000089F C606[4F46]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18975 000008A4 C687[5246]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18976 000008A9 C706[E046]000D          	mov	word [command_line],0D00h
 18977 000008AF EB35                    	jmp	short do_exec   ;
 18978                                  do_alt:
 18979 000008B1 1E                      	push	ds
 18980 000008B2 07                      	pop	es
 18981 000008B3 C606[4F46]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 18982 000008B8 BF[5246]                	mov	di,commnd	;
 18983                                  do_alt1:
 18984 000008BB AC                      	lodsb			; copy the alternate, zapping it as we go,
 18985 000008BC C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 18986 000008C0 AA                      	stosb 			;
 18987 000008C1 08C0                    	or	al,al		;
 18988 000008C3 75F6                    	jnz	short do_alt1	;
 18989 000008C5 BF[E046]                	mov	di,command_line
 18990 000008C8 807C023A                	cmp	byte [si+2],':'
 18991 000008CC 7503                    	jne	short do_alt2	;
 18992 000008CE 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 18993                                  do_alt2:			;
 18994 000008D1 AC                      	lodsb			;
 18995 000008D2 AA                      	stosb			;
 18996 000008D3 08C0                    	or	al,al           ;
 18997 000008D5 75FA                    	jnz	short do_alt2   ;
 18998 000008D7 C645FF0D                	mov	byte [di-1],cr  ; ODh
 18999                                  
 19000                                  ;;   Last but not least, see if we need to call disable_autoexec
 19001                                  
 19002                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 19003                                  	;cmp	[command_line-1],0
 19004                                          ;jne	short do_exec   ;
 19005                                          ;mov	[command_line-1],'/'
 19006                                  	;call	disable_autoexec ;
 19007                                  
 19008                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 19009 000008DB C606[A047]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 19010 000008E0 E85A39                  	call	disable_autoexec
 19011 000008E3 E8A239                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 19012                                  do_exec:
 19013 000008E6 E997FE                  	jmp	retry		;
 19014                                  
 19015                                  ;;endif	;MULTI_CONFIG
 19016                                  
 19017                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 19018                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 19019                                  
 19020                                  ; 24/03/2019 - Retro DOS v4.0
 19021                                  
 19022                                  ; ----------------------------------------------------------------------
 19023                                  ; procedure : AllocFreeMem
 19024                                  ;
 19025                                  ; Allocate Max memory from DOS to find out where to load DOS.
 19026                                  ; DOS is at temporary location when this call is being made
 19027                                  ;
 19028                                  ; Inputs : None
 19029                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 19030                                  ;	   [area] & [memhi] set to the para value of the start of the
 19031                                  ;	   free memory.
 19032                                  ;
 19033                                  ; Uses   : AX, BX
 19034                                  ;
 19035                                  ; ----------------------------------------------------------------------
 19036                                  	
 19037                                  	; 30/12/2022 - Retro DOS v4.2
 19038                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 19039                                  
 19040                                  	; 23/10/2022
 19041                                  AllocFreeMem:
 19042 000008E9 BBFFFF                  	mov	bx,0FFFFh
 19043 000008EC B448                    	mov	ah,48h ; ALLOC
 19044 000008EE CD21                    	int	21h			; first time fails
 19045 000008F0 B448                    	mov	ah,48h ; ALLOC
 19046 000008F2 CD21                    	int	21h			; second time gets it
 19047                                  	; 11/12/2022
 19048                                  	; ds = cs
 19049                                  	;mov	[cs:area],ax
 19050                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 19051 000008F4 A3[6603]                	mov	[area],ax
 19052 000008F7 A3[6203]                	mov	[memhi],ax		; memhi:memlo now points to			
 19053 000008FA C3                      	retn				; start of free memory
 19054                                  				
 19055                                  	; include msbio.cl6
 19056                                  ; ----------------------------------------------------------------------
 19057                                  DOSLOMSG:
 19058 000008FB 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 19058 00000904 7661696C61626C653A-
 19058 0000090D 204C6F6164696E6720-
 19058 00000916 444F53206C6F770D0A-
 19058 0000091F 24                 
 19059                                  FEmsg:
 19060 00000920 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 19060 00000929 6F723A2043616E6E6F-
 19060 00000932 7420616C6C6F636174-
 19060 0000093B 65204D656D6F727920-
 19060 00000944 666F7220444F530D0A-
 19060 0000094D 24                 
 19061                                  
 19062                                  ; ----------------------------------------------------------------------
 19063                                  ;
 19064                                  ; procedure : LoadDOSHiOrLo
 19065                                  ;
 19066                                  ;		Tries to move DOS into HMA. If it fails then loads
 19067                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 19068                                  ;		moved; this just tries to allocate the HMA, and prints
 19069                                  ;		a message if this is not possible.
 19070                                  ;
 19071                                  ; ----------------------------------------------------------------------
 19072                                  
 19073                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19074                                  LoadDOSHiOrLo:
 19075                                  	; 27/03/2019 - Retro DOS v4.0
 19076                                  	; ds = cs
 19077 0000094E E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 19078                                  	;jc	short LdngLo		; If that don't work...
 19079                                  	;retn
 19080                                  	; 18/12/2022
 19081 00000951 731C                    	jnc	short LoadDosHi_ok
 19082                                  LdngLo:
 19083                                  	; 23/10/2022
 19084                                  	;push	cs
 19085                                  	;pop	ds
 19086                                  	; 11/12/2022
 19087                                  	; ds = cs
 19088 00000953 B409                    	mov	ah,9
 19089 00000955 BA[FB08]                	mov	dx,DOSLOMSG		; inform user that we are
 19090 00000958 CD21                    	int	21h			; loading low
 19091                                  
 19092                                  ;ifndef ROMDOS
 19093                                  	; actually move the dos, and reinitialize it.
 19094                                  
 19095 0000095A BB0100                  	mov	bx,1				; M012
 19096                                  						;  use int 21 alloc for mem
 19097 0000095D E83F00                  	call	MovDOSLo
 19098                                  	; 11/12/2022
 19099                                  	; ds = cs
 19100                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 19101                                  	; 23/10/2022
 19102 00000960 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 19103                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 19104                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 19105 00000964 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 19106                                  	; 11/12/2022
 19107                                  	; ds = cs
 19108                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 19109 00000966 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 19110                                  	
 19111                                  ;endif ; ROMDOS
 19112                                  	; 23/10/2022
 19113                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 19114                                  	; 11/12/2022
 19115                                  	; ds = cs
 19116 0000096A C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 19117                                  LoadDosHi_ok:	; 18/12/2022
 19118 0000096F C3                      	retn
 19119                                  
 19120                                  ; ----------------------------------------------------------------------
 19121                                  ;
 19122                                  ; procedure : TryToMovDOSHi
 19123                                  ;
 19124                                  ;		This tries to move DOS into HMA.
 19125                                  ;		Returns CY if it failed.
 19126                                  ;		If it succeeds returns with carry cleared.
 19127                                  ;
 19128                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 19129                                  ;		the A20 switching code in the low mem stub to be installed.
 19130                                  ; 
 19131                                  ; ----------------------------------------------------------------------
 19132                                  
 19133                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19134                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 19135                                  TryToMovDOSHi:
 19136                                  	; 11/12/2022
 19137                                  	; 27/03/2019 - Retro DOS v4.0
 19138                                  	; ds = cs
 19139 00000970 E81300                  	call	MovDOSHi
 19140 00000973 7210                    	jc	short ttldhx
 19141                                  
 19142                                  ;ifndef ROMDOS
 19143                                  	; 23/10/2022
 19144                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 19145                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 19146                                  	; 11/12/2022
 19147                                  	; ds = cs
 19148 00000975 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 19149                                  ;else
 19150                                  ;	..
 19151                                  ;endif ; ROMDOS
 19152                                  
 19153                                  	; 11/12/2022
 19154                                  	; ds = cs
 19155 00000979 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 19156                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 19157 0000097B FF1E[7B02]              	call	far [dos_segreinit]
 19158                                  	;mov	byte [cs:runhigh],1
 19159 0000097F C606[6A02]01            	mov	byte [runhigh],1
 19160 00000984 F8                      	clc
 19161                                  ttldhx:
 19162 00000985 C3                      	retn
 19163                                  
 19164                                  ; ----------------------------------------------------------------------
 19165                                  ;
 19166                                  ; procedure : MovDOSHi
 19167                                  ;
 19168                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 19169                                  ;		For ROMDOS, the code is not actually moved, but the
 19170                                  ;		HMA is allocated and prepared for sub-allocation.
 19171                                  ;
 19172                                  ;		Returns : CY if it failed
 19173                                  ;
 19174                                  ; ----------------------------------------------------------------------
 19175                                  
 19176                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19177                                  MovDOSHi:
 19178                                  	; 14/05/2019
 19179                                  	; 27/03/2019 - Retro DOS v4.0
 19180                                  	; ds = cs
 19181 00000986 E8D900                  	call	AllocHMA			; did we get HMA?
 19182 00000989 7213                    	jc	short mdhx			; no
 19183 0000098B B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 19184 0000098E 8EC0                    	mov	es,ax
 19185                                  
 19186                                  ;ifndef ROMDOS
 19187                                  	; actually move the BIOS and DOS
 19188                                  
 19189                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19190                                  	; 24/03/2019
 19191                                  	
 19192                                  	; 23/10/2022
 19193 00000990 E83400                  	call	MovBIOS				; First move BIOS into HMA
 19194                                  
 19195                                  	; ES:DI points to free HMA after BIOS
 19196                                  	
 19197                                  	; 14/05/2019
 19198                                  	; 24/03/2019 - Retro DOS v4.0
 19199                                  	;xor	di,di
 19200                                  	
 19201                                  	; 23/10/2022
 19202                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 19203                                  	; 11/12/2022
 19204                                  	; ds = cs
 19205 00000993 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 19206 00000997 E81100                  	call	MovDOS				; and move it
 19207                                  
 19208                                  	; ES:DI points to free HMA after DOS
 19209                                  ;else
 19210                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 19211                                  ;
 19212                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 19213                                  ;
 19214                                  ;endif ; ROMDOS
 19215                                  
 19216 0000099A E86302                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 19217 0000099D F8                      	clc
 19218                                  mdhx:
 19219 0000099E C3                      	retn
 19220                                  
 19221                                  ; ----------------------------------------------------------------------
 19222                                  ;
 19223                                  ; procedure : MovDOSLo
 19224                                  ;
 19225                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 19226                                  ;
 19227                                  ; ----------------------------------------------------------------------
 19228                                  
 19229                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19230                                  
 19231                                  ;ifndef ROMDOS
 19232                                  
 19233                                  MovDOSLo:
 19234                                  	; 14/05/2019
 19235                                  	; 27/03/2019 - Retro DOS v4.0
 19236                                  	; ds = cs
 19237 0000099F E84800                  	call	AllocMemForDOS			; incestuosly!!!
 19238                                  	
 19239                                  	; 23/10/2022
 19240                                  	; 14/05/2019
 19241                                  	;inc	ax  ; skip MCB
 19242                                  	
 19243 000009A2 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 19244                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19245                                  	; 24/03/2019
 19246                                  	
 19247                                  	; 23/10/2022
 19248 000009A4 E82000                  	call	MovBIOS
 19249                                  
 19250                                  ;------ ES:DI points memory immediately after BIOS
 19251                                  
 19252                                  	; 14/05/2019
 19253                                  	; NOTE: 
 19254                                  	;     Order of (RETRO) DOS kernel sections at memory:
 19255                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 19256                                  
 19257                                  	; 24/03/2019 - Retro DOS v4.0
 19258                                  	;xor	di,di	
 19259                                  
 19260                                  	; 23/10/2022
 19261                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 19262                                  	; 11/12/2022
 19263                                  	; ds = cs
 19264 000009A7 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 19265                                  	;call	MovDOS
 19266                                  	;retn
 19267                                  	; 11/12/2022
 19268                                  	;jmp	short MovDOS
 19269                                  
 19270                                  ;endif ; ROMDOS
 19271                                  
 19272                                  ; 11/12/2022
 19273                                  
 19274                                  ; ----------------------------------------------------------------------
 19275                                  ;
 19276                                  ; procedure : MovDOS
 19277                                  ;
 19278                                  ;		Moves DOS code into requested area
 19279                                  ;
 19280                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19281                                  ;	     CX    - size of DOS code to be moved
 19282                                  ;
 19283                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19284                                  ;
 19285                                  ; ----------------------------------------------------------------------
 19286                                  
 19287                                  	; 11/12/2022
 19288                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19289                                  
 19290                                  ;ifndef ROMDOS
 19291                                  
 19292                                  MovDOS:
 19293                                  	; 14/05/2019
 19294                                  	; 27/03/2019 - Retro DOS v4.0
 19295                                  
 19296                                  	; 11/12/2022
 19297                                  	; ds = cs
 19298                                  
 19299                                  	; 23/10/2022
 19300                                  	;push	ds ; *//
 19301                                  	
 19302 000009AB 06                      	push	es
 19303 000009AC 57                      	push	di
 19304                                  
 19305                                  	; 11/12/2022
 19306 000009AD 1E                      	push	ds ; *// ; 11/12/202
 19307                                  
 19308                                  	; 29/04/2019
 19309 000009AE C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 19310                                  	; 23/10/2022
 19311                                  	;lds	si,[cs:dosinit]
 19312                                  	;;mov	ax,si
 19313                                  
 19314 000009B2 F3A4                    	rep	movsb
 19315                                  
 19316 000009B4 1F                      	pop	ds ; *// ; 11/12/2022
 19317                                  
 19318 000009B5 5B                      	pop	bx				; get back offset into which
 19319                                  						;  DOS was moved
 19320                                  
 19321 000009B6 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 19322                                  						;  wants to run
 19323 000009BA 29D8                    	sub	ax,bx
 19324 000009BC E8A302                  	call	off_to_para
 19325 000009BF 5B                      	pop	bx				; get the segment at which
 19326                                  						;  we moved DOS into
 19327 000009C0 29C3                    	sub	bx,ax				; Adjust segment
 19328                                  	
 19329                                  	; 11/12/2022
 19330                                  	; 23/10/2022
 19331                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19332                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19333                                  	; 11/12/2022
 19334 000009C2 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 19335                                  		
 19336                                  	; 27/03/2019
 19337                                  	;pop	ds ; *//
 19338                                  	; ds = cs
 19339                                  	;mov	[FINAL_DOS_LOCATION],bx
 19340                                  
 19341 000009C6 C3                      	retn
 19342                                  
 19343                                  ;endif ;ROMDOS
 19344                                  
 19345                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19346                                  ; 24/03/2019
 19347                                  ; ----------------------------------------------------------------------
 19348                                  ;
 19349                                  ; procedure : MovBIOS
 19350                                  ;
 19351                                  ;		Moves BIOS code into requested segment
 19352                                  ;
 19353                                  ;	In : ES - segment to which BIOS is to be moved
 19354                                  ;		  ( it moves always into offset BCode_Start)
 19355                                  ;
 19356                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 19357                                  ;
 19358                                  ; ----------------------------------------------------------------------
 19359                                  
 19360                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19361                                  
 19362                                  ;ifndef ROMDOS
 19363                                  
 19364                                  MovBIOS: ; proc	near
 19365                                  	; 11/12/2022
 19366 000009C7 1E                      	push	ds ; ds = cs	
 19367                                  	;
 19368                                  	; 23/10/2022
 19369 000009C8 2E8E1E[8702]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 19370                                  	;mov	si,BCODE_START ; mov si,30h
 19371                                  	; 09/12/2022
 19372 000009CD BE[3000]                	mov	si,BCODESTART
 19373 000009D0 89F7                    	mov	di,si
 19374 000009D2 B9801A                  	mov	cx,BCODE_END ; mov cx,1A60h
 19375 000009D5 29F1                    	sub	cx,si				; size of BIOS
 19376 000009D7 D1E9                    	shr	cx,1				; Both the labels are para
 19377                                  						;  aligned
 19378 000009D9 F3A5                    	rep	movsw
 19379                                  	
 19380                                  	; 11/12/2022
 19381 000009DB 1F                      	pop	ds ; ds = cs
 19382                                  	;
 19383 000009DC 06                      	push	es
 19384 000009DD 57                      	push	di				; save end of BIOS
 19385 000009DE 8CC0                    	mov	ax,es
 19386                                  	;
 19387                                  	; 11/12/2022
 19388                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 19389                                  	;;call	dword ptr cs:_seg_reinit_ptr
 19390                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 19391                                  	; ds = cs
 19392 000009E0 A3[8203]                	mov	[BCodeSeg],ax
 19393 000009E3 FF1E[8502]              	call	far [seg_reinit_ptr]
 19394                                  	;
 19395 000009E7 5F                      	pop	di
 19396 000009E8 07                      	pop	es				; get back end of BIOS
 19397 000009E9 C3                      	retn
 19398                                  
 19399                                  ;MovBIOS endp
 19400                                  
 19401                                  ;endif ; ROMDOS
 19402                                  
 19403                                  ; 11/12/2022
 19404                                  %if 0
 19405                                  
 19406                                  ; 24/03/2019
 19407                                  
 19408                                  ; ----------------------------------------------------------------------
 19409                                  ;
 19410                                  ; procedure : MovDOS
 19411                                  ;
 19412                                  ;		Moves DOS code into requested area
 19413                                  ;
 19414                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19415                                  ;	     CX    - size of DOS code to be moved
 19416                                  ;
 19417                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19418                                  ;
 19419                                  ; ----------------------------------------------------------------------
 19420                                  
 19421                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19422                                  
 19423                                  ;ifndef ROMDOS
 19424                                  
 19425                                  MovDOS:
 19426                                  	; 14/05/2019
 19427                                  	; 27/03/2019 - Retro DOS v4.0
 19428                                  
 19429                                  	; 11/12/2022
 19430                                  	; ds = cs
 19431                                  
 19432                                  	; 23/10/2022
 19433                                  	;push	ds ; *//
 19434                                  	
 19435                                  	push	es
 19436                                  	push	di
 19437                                  
 19438                                  	; 11/12/2022
 19439                                  	push	ds ; *// ; 11/12/202
 19440                                  
 19441                                  	; 29/04/2019
 19442                                  	lds	si,[dosinit] ; 11/12/2022
 19443                                  	; 23/10/2022
 19444                                  	;lds	si,[cs:dosinit]
 19445                                  	;;mov	ax,si
 19446                                  
 19447                                  	rep	movsb
 19448                                  
 19449                                  	pop	ds ; *// ; 11/12/2022
 19450                                  
 19451                                  	pop	bx				; get back offset into which
 19452                                  						;  DOS was moved
 19453                                  
 19454                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 19455                                  						;  wants to run
 19456                                  	sub	ax,bx
 19457                                  	call	off_to_para
 19458                                  	pop	bx				; get the segment at which
 19459                                  						;  we moved DOS into
 19460                                  	sub	bx,ax				; Adjust segment
 19461                                  	
 19462                                  	; 11/12/2022
 19463                                  	; 23/10/2022
 19464                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19465                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19466                                  	; 11/12/2022
 19467                                  	mov	[CURRENT_DOS_LOCATION],bx
 19468                                  		
 19469                                  	; 27/03/2019
 19470                                  	;pop	ds ; *//
 19471                                  	; ds = cs
 19472                                  	;mov	[FINAL_DOS_LOCATION],bx
 19473                                  
 19474                                  	retn
 19475                                  
 19476                                  ;endif ;ROMDOS
 19477                                  
 19478                                  %endif
 19479                                  
 19480                                  ; ----------------------------------------------------------------------
 19481                                  ;
 19482                                  ; procedure : AllocMemForDOS
 19483                                  ;
 19484                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 19485                                  ;
 19486                                  ;	Out : AX - seg of allocated memoryblock
 19487                                  ;
 19488                                  ; ----------------------------------------------------------------------
 19489                                  
 19490                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19491                                  
 19492                                  ;ifndef ROMDOS
 19493                                  
 19494                                  AllocMemForDOS:
 19495                                  	; 11/12/2022
 19496                                  	; 14/05/2019
 19497                                  	; 27/03/2019 - Retro DOS v4.0
 19498                                  	; ds = cs
 19499                                  	;mov	ax,BCode_end
 19500                                  	;sub	ax,BCode_start		; BIOS code size
 19501                                  	; 23/10/2022
 19502 000009EA B8801A                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 19503                                  					; 30/12/2022
 19504                                  	;sub	ax,BCODE_START ; 30h
 19505                                  	; 09/12/2022
 19506 000009ED 2D[3000]                	sub	ax,BCODESTART 
 19507                                  	; 24/03/2019 - Retro DOS v4.0 
 19508                                  	; 02/11/2022
 19509                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 19510                                  	; 11/12/2022
 19511                                  	; ds = cs
 19512 000009F0 0306[7F02]              	add	ax,[lo_doscod_size]
 19513 000009F4 83C00F                  	add	ax,15
 19514 000009F7 E86802                  	call	off_to_para			; convert to para
 19515                                  	; 23/10/2022
 19516                                  	; 14/05/2019
 19517                                  	;inc	ax ; + 1 paragraph for MCB
 19518 000009FA 09DB                    	or	bx,bx				; M012
 19519 000009FC 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 19520 000009FE 741A                    	jz	short update_arena		; M012
 19521 00000A00 B448                    	mov	ah,48h				; request DOS
 19522 00000A02 CD21                    	int	21h
 19523 00000A04 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 19524                                   	; 23/10/2022
 19525                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 19526 00000A06 83E803                  	sub	ax,3				; Take care ORG 30h of
 19527                                  						;  BIOS code
 19528 00000A09 8EC0                    	mov	es,ax
 19529                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 19530                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 19531                                  	; 14/05/2019
 19532                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 19533                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 19534                                  	; 23/10/2022
 19535 00000A0B 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 19536 00000A12 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 19537                                  
 19538 00000A19 C3                      	retn
 19539                                  
 19540                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 19541                                  ;	  using DOS itself causes an arena to be generated.
 19542                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 19543                                  ;	  assume that the device drivers are loaded into
 19544                                  ;	  the first arena. For this reason, MagicDrv's
 19545                                  ;	  main device driver header arena is manually
 19546                                  ;	  truncated from the arena chain, and the space
 19547                                  ;	  for DOS is allocated using the following
 19548                                  ;	  simple code, which also assumes that the
 19549                                  ;	  first arena is the free one where DOS's low
 19550                                  ;	  stub will go.
 19551                                  ;
 19552                                  ; M012 : BEGIN
 19553                                  
 19554                                  	; 23/10/2022
 19555                                  update_arena:
 19556 00000A1A 1E                      	push	ds ; ds = cs
 19557 00000A1B 57                      	push	di
 19558 00000A1C 51                      	push	cx
 19559 00000A1D 52                      	push	dx
 19560                                  	; 23/10/2022
 19561                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 19562                                  	; 11/12/2022
 19563                                  	; ds = cs 
 19564 00000A1E C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 19565 00000A22 4F                      	dec	di
 19566 00000A23 4F                      	dec	di				; Arena head is immediately
 19567                                  						;  before sysvar
 19568 00000A24 8E05                    	mov	es,[di]				; es = arena head
 19569                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 19570 00000A26 268B0E0300              	mov	cx,[es:3]
 19571 00000A2B 39D9                    	cmp	cx,bx				; is it sufficient ?
 19572 00000A2D 7227                    	jb	short FatalErr			; no, fatal error
 19573                                  
 19574                                  	;mov	dl,[es:ARENA.SIGNATURE]
 19575 00000A2F 268A160000              	mov	dl,[es:0]
 19576 00000A34 8CC0                    	mov	ax,es
 19577 00000A36 01D8                    	add	ax,bx				; ax = new arena head
 19578 00000A38 8905                    	mov	[di],ax				; store it in DOS data area
 19579 00000A3A 8ED8                    	mov	ds,ax
 19580                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 19581 00000A3C 88160000                	mov	[0],dl
 19582                                  	;mov	word [ARENA.OWNER],0		; free
 19583 00000A40 C70601000000            	mov	word [1],0
 19584 00000A46 29D9                    	sub	cx,bx				; size of the new block
 19585                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 19586 00000A48 890E0300                	mov	[3],cx
 19587 00000A4C 8CC0                    	mov	ax,es				; return seg to the caller
 19588                                  	; 23/10/2022
 19589                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 19590 00000A4E 83E803                  	sub	ax,3				;  BIOS code
 19591 00000A51 5A                      	pop	dx
 19592 00000A52 59                      	pop	cx
 19593 00000A53 5F                      	pop	di
 19594 00000A54 1F                      	pop	ds ; ds = cs
 19595 00000A55 C3                      	retn
 19596                                  ;
 19597                                  ; M012 : END
 19598                                  ;
 19599                                  FatalErr:
 19600 00000A56 0E                      	push	cs
 19601 00000A57 1F                      	pop	ds
 19602 00000A58 BA[2009]                	mov	dx,FEmsg
 19603 00000A5B B409                    	mov	ah,9
 19604 00000A5D CD21                    	int	21h 		; DOS - PRINT STRING
 19605                                  				; DS:DX -> string terminated by "$"
 19606                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 19607 00000A5F E93F07                  	jmp	stall
 19608                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 19609                                  	;cli
 19610                                  	;hlt
 19611                                  
 19612                                  ;endif ;ROMDOS
 19613                                  
 19614                                  ; 25/03/2019 - Retro DOS v4.0
 19615                                  
 19616                                  ; ----------------------------------------------------------------------
 19617                                  ;
 19618                                  ; procedure : AllocHMA
 19619                                  ;
 19620                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19621                                  ;	  up there. If it gets any sort of error, it will return with
 19622                                  ;	  carry set so that we can resort to running low.
 19623                                  ;
 19624                                  ;	It also returns ES: -> 0ffffh if it returns success
 19625                                  ;
 19626                                  ; ----------------------------------------------------------------------
 19627                                  
 19628                                  AllocHMA:
 19629                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19630                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19631                                  ;		   been deleted because it can be recycled for skipping the
 19632                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19633                                  ;		   in the case of a pre-286.
 19634                                  
 19635                                  ;;	see if we're running on a pre-286. If not, force low.
 19636                                  ;
 19637                                  ;	xor	ax,ax
 19638                                  ;	pushf			; save flags (like int)
 19639                                  ;	push	ax
 19640                                  ;	popf
 19641                                  ;	pushf
 19642                                  ;	pop	ax
 19643                                  ;	popf			; restore original flags (like int)
 19644                                  ;	and	ax,0F000h
 19645                                  ;	cmp	ax,0F000h	; 8088/8086?
 19646                                  ;	jz	short grab_hma_error
 19647                                  
 19648                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19649                                  	; (SYSINIT:0A26h)
 19650                                  
 19651 00000A62 1E                      	push	ds
 19652                                  	;;mov	ax,Bios_Data
 19653                                  	;mov	ax,KERNEL_SEGMENT
 19654                                  	; 21/10/2022
 19655 00000A63 B87000                  	mov	ax,DOSBIODATASEG
 19656 00000A66 8ED8                    	mov	ds,ax
 19657                                  
 19658 00000A68 E84A00                  	call	IsXMSLoaded
 19659 00000A6B 7545                    	jnz	short grabhma_error
 19660                                  
 19661 00000A6D B81043                  	mov	ax,4310h
 19662 00000A70 CD2F                    	int	2Fh		; get the vector into es:bx
 19663                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19664                                  		; Return: ES:BX -> driver entry point
 19665                                  
 19666 00000A72 891E[0E00]              	mov	[xms],bx
 19667                                  	;mov	[0Eh], bx
 19668 00000A76 8C06[1000]              	mov	[xms+2],es
 19669                                  	;mov	[10h],es
 19670                                  
 19671 00000A7A B401                    	mov	ah,1		; request HMA
 19672 00000A7C BAFFFF                  	mov	dx,0FFFFh
 19673                                  	;call	dword ptr ds:0Eh
 19674 00000A7F FF1E[0E00]              	call	far [xms]
 19675 00000A83 48                      	dec	ax
 19676 00000A84 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19677                                  
 19678                                  ;------ Himem may be lying because it has allocated mem for int 15
 19679                                  
 19680 00000A86 B488                    	mov	ah,88h
 19681 00000A88 CD15                    	int	15h
 19682                                  		; Get Extended Memory Size
 19683                                  		; Return: CF clear on success
 19684                                  		; AX = size of memory above 1M in K
 19685 00000A8A 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19686                                  	;jb	short grabhma_error
 19687                                  	; 11/12/2022
 19688 00000A8D 7224                    	jb	short grabhma_err ; cf=1
 19689                                  allocHMA_1:
 19690 00000A8F B405                    	mov	ah,5		; localenableA20
 19691                                  	;call	dword ptr ds:0Eh
 19692 00000A91 FF1E[0E00]              	call	far [xms]
 19693 00000A95 48                      	dec	ax
 19694 00000A96 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19695                                  
 19696 00000A98 E88901                  	call	IsVDiskInstalled
 19697 00000A9B 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19698                                  
 19699 00000A9D B8FFFF                  	mov	ax,0FFFFh
 19700 00000AA0 8EC0                    	mov	es,ax
 19701 00000AA2 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19702 00000AA9 26813E10003412          	cmp	word [es:10h],1234h
 19703                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19704                                  	; 11/12/2022
 19705 00000AB0 7401                    	je	short allocHMA_ok	
 19706                                  
 19707                                  ; 11/12/2022
 19708                                  ;	; 11/12/2022
 19709                                  ;	; cf=0
 19710                                  ;	;clc
 19711                                  ;	pop	ds
 19712                                  ;	retn
 19713                                  
 19714                                  grabhma_error:
 19715 00000AB2 F9                      	stc
 19716                                  	; 11/12/022
 19717                                  grabhma_err:	; cf=1
 19718                                  allocHMA_ok:	; cf=0
 19719 00000AB3 1F                      	pop	ds
 19720 00000AB4 C3                      	retn
 19721                                  
 19722                                  ; ----------------------------------------------------------------------
 19723                                  ;
 19724                                  ; procedure : IsXMSLoaded
 19725                                  ;
 19726                                  ;             Checks whether a XMS driver is loaded
 19727                                  ;
 19728                                  ; Returns : Z flag set if XMS driver loaded
 19729                                  ;           Z flag reset if no XMS drivers are present
 19730                                  ;
 19731                                  ; ----------------------------------------------------------------------
 19732                                  
 19733                                  IsXMSLoaded:
 19734 00000AB5 B80043                  	mov	ax,4300h
 19735 00000AB8 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19736                                  				; Return: AL = 80h XMS driver installed
 19737                                  				; AL <> 80h no driver
 19738 00000ABA 3C80                    	cmp	al,80h		; XMS installed?
 19739 00000ABC C3                      	retn
 19740                                  
 19741                                  ; ----------------------------------------------------------------------
 19742                                  ; procedure : FTryToMovDOSHi
 19743                                  ;
 19744                                  ;		Called from HMA suballoc calls
 19745                                  ;	
 19746                                  ; ----------------------------------------------------------------------
 19747                                  
 19748                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19749                                  	; (SYSINIT:0A84h)
 19750                                  
 19751                                  FTryToMovDOSHi:	; proc	far
 19752                                  
 19753 00000ABD 50                      	push	ax
 19754 00000ABE 53                      	push	bx
 19755 00000ABF 51                      	push	cx
 19756 00000AC0 52                      	push	dx
 19757 00000AC1 56                      	push	si
 19758 00000AC2 57                      	push	di
 19759 00000AC3 1E                      	push	ds
 19760 00000AC4 06                      	push	es
 19761                                  
 19762                                  	; 23/10/2022
 19763                                  	; 27/03/2019 - Retro DOS v4.0
 19764                                  	; 11/12/2022
 19765 00000AC5 0E                      	push	cs
 19766 00000AC6 1F                      	pop	ds
 19767                                  
 19768                                  	;cmp	byte [cs:runhigh],0FFh
 19769                                  	; 11/12/2022
 19770 00000AC7 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19771 00000ACC 7503                    	jne	short _ftymdh_1
 19772                                  
 19773                                  	; ds = cs
 19774 00000ACE E89FFE                  	call	TryToMovDOSHi
 19775                                  _ftymdh_1:
 19776 00000AD1 07                      	pop	es
 19777 00000AD2 1F                      	pop	ds
 19778 00000AD3 5F                      	pop	di
 19779 00000AD4 5E                      	pop	si
 19780 00000AD5 5A                      	pop	dx
 19781 00000AD6 59                      	pop	cx
 19782 00000AD7 5B                      	pop	bx
 19783 00000AD8 58                      	pop	ax
 19784                                  
 19785 00000AD9 CB                      	retf
 19786                                  
 19787                                  ; ----------------------------------------------------------------------
 19788                                  ;
 19789                                  ; following piece of code will be moved into a para boundary. And the para
 19790                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19791                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19792                                  ; to determine free extended memory.
 19793                                  ;
 19794                                  ; For more details read "power programming" column by Ray Duncan in the
 19795                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19796                                  ;
 19797                                  ; ----------------------------------------------------------------------
 19798                                  
 19799                                  StartVDHead:
 19800                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19801                                  
 19802 00000ADA 00000000                	dd	0		; link to next device driver
 19803 00000ADE 0080                    	dw	8000h		; device attribute
 19804 00000AE0 0000                    	dw	0		; strategy routine offset
 19805 00000AE2 0000                    	dw	0		; interrupt routine offset
 19806 00000AE4 01                      	db	1		; number of units
 19807                                  	;db	7 dup(0) 
 19808 00000AE5 00<rep 7h>              	times	7 db 0 		; reserved area
 19809                                  VDiskSig1:
 19810 00000AEC 564449534B              	db	'VDISK'
 19811                                  
 19812                                  VLEN1	equ	($-VDiskSig1)
 19813                                  
 19814 00000AF1 202056332E33            	db	'  V3.3'	; vdisk label
 19815                                  	;db	15 dup (0)	; pad
 19816 00000AF7 00<rep Fh>              	times	15 db 0
 19817 00000B06 0000                    	dw	0		; bits 0-15 of free HMA
 19818 00000B08 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19819                                  VDInt19:
 19820 00000B09 EA                      	db	0EAh		; jmp to old vector
 19821                                  OldVDInt19:
 19822 00000B0A 00000000                	dd	0		; Saved int 19 vector
 19823                                  
 19824                                  EndVDHead: ; label byte
 19825                                  
 19826                                  VDiskHMAHead:	
 19827 00000B0E 000000                  	db	0,0,0		; non-bootable disk
 19828                                  VDiskSig2:
 19829 00000B11 564449534B              	db	'VDISK'
 19830                                  
 19831                                  VLEN2	equ	($-VDiskSig2)
 19832                                  
 19833 00000B16 332E33                  	db	'3.3'		; OEM - signature
 19834 00000B19 8000                    	dw	128		; number of bytes/sector
 19835 00000B1B 01                      	db	1		; sectors/cluster
 19836 00000B1C 0100                    	dw	1		; reserved sectors
 19837 00000B1E 01                      	db	1		; number of FAT copies
 19838 00000B1F 4000                    	dw	64		; number of root dir entries
 19839 00000B21 0002                    	dw	512		; number of sectors
 19840 00000B23 FE                      	db	0FEh		; media descriptor
 19841 00000B24 0600                    	dw	6		; number of sectors/FAT
 19842 00000B26 0800                    	dw	8		; sectors per track
 19843 00000B28 0100                    	dw	1		; number of heads
 19844 00000B2A 0000                    	dw	0		; number of hidden sectors
 19845 00000B2C 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19846                                  
 19847                                  EndVDiskHMAHead: ; label byte
 19848                                  
 19849                                  ; ----------------------------------------------------------------------
 19850                                  ;
 19851                                  ; procedure : InstVDiskHeader
 19852                                  ;
 19853                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19854                                  ;	      It puts a 32 byte header at 10000:0 and
 19855                                  ;	      another header at (seg of int19):0
 19856                                  ;
 19857                                  ; Inputs : None
 19858                                  ;
 19859                                  ; Outputs : None
 19860                                  ;
 19861                                  ; USES : DS,SI,AX,CX,DX
 19862                                  ;
 19863                                  ; ----------------------------------------------------------------------
 19864                                  
 19865                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19866                                  
 19867                                  InstVDiskHeader:
 19868 00000B2E 31C0                    	xor	ax,ax
 19869 00000B30 8ED8                    	mov	ds,ax			; seg of int vect table
 19870                                  
 19871                                  ;-------------- save old int 19 vector
 19872                                  
 19873                                  	; 23/10/2022
 19874 00000B32 A16400                  	mov	ax,[19h*4]
 19875                                  	;mov	[OldVDInt19],ax
 19876 00000B35 2EA3[0A0B]              	mov	[cs:OldVDInt19],ax
 19877 00000B39 A16600                  	mov	ax,[19h*4+2]
 19878                                  	;mov	[OldVDInt19+2],ax
 19879 00000B3C 2EA3[0C0B]              	mov	[cs:OldVDInt19+2],ax
 19880                                  
 19881                                  ;-------------- calculate seg of new int 19 handler
 19882                                  
 19883 00000B40 B448                    	mov	ah,48h			; allocate memory
 19884                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19885                                  	; 23/10/2022
 19886 00000B42 BB0400                  	mov	bx,4
 19887 00000B45 CD21                    	int	21h
 19888                                  
 19889                                  ;	if carry, fatal hanging error!!!!!
 19890                                  
 19891 00000B47 48                      	dec	ax			; point to arena
 19892 00000B48 8EC0                    	mov	es,ax
 19893                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19894 00000B4A 26C70601000800          	mov	word [es:1],8
 19895                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19896 00000B51 26C70608005343          	mov	word [es:8],'SC'
 19897 00000B58 40                      	inc	ax
 19898 00000B59 8EC0                    	mov	es,ax			; get back to allocated memory
 19899                                  
 19900                                  ;-------------- install new int 19 vector
 19901                                  
 19902 00000B5B FA                      	cli				; no reboots at this time
 19903                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19904 00000B5C C70664002F00            	mov	word [19h*4],47
 19905 00000B62 A36600                  	mov	[19h*4+2],ax
 19906                                  
 19907                                  ;-------------- move the code into proper place
 19908                                  
 19909                                  	;mov	cx,(EndVDHead-StartVDHead)
 19910 00000B65 B93400                  	mov	cx,52
 19911 00000B68 BE[DA0A]                	mov	si,StartVDHead
 19912 00000B6B 31FF                    	xor	di,di
 19913 00000B6D 0E                      	push	cs
 19914 00000B6E 1F                      	pop	ds
 19915 00000B6F FC                      	cld
 19916 00000B70 F3A4                    	rep	movsb
 19917 00000B72 FB                      	sti				; BUGBUG is sti OK now?
 19918                                  
 19919                                  ;-------------- mov the HMA VDisk head into HMA
 19920                                  
 19921                                  	; 23/10/2022
 19922 00000B73 57                      	push	di
 19923 00000B74 06                      	push	es
 19924                                  
 19925 00000B75 B8FFFF                  	mov	ax,0FFFFh
 19926 00000B78 8EC0                    	mov	es,ax
 19927 00000B7A BF1000                  	mov	di,10h
 19928                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19929 00000B7D B92000                  	mov	cx,32
 19930 00000B80 BE[0E0B]                	mov	si,VDiskHMAHead
 19931 00000B83 F3A4                    	rep	movsb			; ds already set to cs
 19932                                  
 19933 00000B85 5F                      	pop	di
 19934 00000B86 07                      	pop	es
 19935                                  
 19936 00000B87 C3                      	retn
 19937                                  
 19938                                  ; ----------------------------------------------------------------------
 19939                                  ; procedure : ClrVDISKHeader
 19940                                  ;
 19941                                  ;		Clears the first 32 bytes at 1MB boundary
 19942                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19943                                  ;		left by previous DOS=HIGH session
 19944                                  ;
 19945                                  ; ----------------------------------------------------------------------
 19946                                  
 19947                                  struc desc
 19948 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19949 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19950 00000004 ??                       .hi_byte:	resb 	1		; address
 19951 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19952 00000006 ????                     .reserved:	resw	1		;
 19953                                   .size:
 19954                                  endstruc
 19955                                  
 19956                                  		; 23/10/2022
 19957                                  bmove:		;label byte
 19958                                  
 19959                                  dummy:		;times desc.size db 0	; desc	<>
 19960 00000B88 00<rep 8h>              		times 8 db 0		 
 19961                                  gdt:		;times desc.size db 0	; desc	<>
 19962 00000B90 00<rep 8h>              		times 8 db 0
 19963 00000B98 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19964 00000B9A 0000                    		dw	0
 19965 00000B9C 00                      		db	0
 19966 00000B9D 93                      		db	93h
 19967 00000B9E 0000                    		dw	0
 19968 00000BA0 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19969 00000BA2 0000                    		dw	0
 19970 00000BA4 10                      		db	10h
 19971 00000BA5 93                      		db	93h
 19972 00000BA6 0000                    		dw	0
 19973                                  
 19974                                  rombios_code:	;times desc.size db 0	; desc	<>
 19975 00000BA8 00<rep 8h>              		times 8 db 0
 19976                                  temp_stack:	;times desc.size db 0	; desc	<>
 19977 00000BB0 00<rep 8h>              		times 8 db 0
 19978                                  
 19979 00000BB8 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19980                                  
 19981                                  
 19982                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 19983                                  
 19984                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19985                                  ; (SYSINIT:0CA6h)
 19986                                  
 19987                                  ClrVDISKHeader:	; proc	near
 19988                                  
 19989                                  ;; 04/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 19990                                  ;;-----------------------------------------------------------	     ;I070
 19991                                  ;; The following workaround get around a problem with the	     ;I070
 19992                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	     ;I070
 19993                                  ;; is set. On those machines the INT 15h block move code	     ;I070
 19994                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	     ;I070
 19995                                  ;; In password server mode the 8042 is disabled so the block	     ;I070
 19996                                  ;; move crashes the system. We can do this because these	     ;I070
 19997                                  ;; systems clear all of memory on a cold boot.			     ;I070
 19998                                  ;								     ;I070
 19999                                  ;	in      al,64h         		; Test for passwd servr mode ;I070
 20000                                  ;	test    al,10h			; Is keyboard inhibited?     ;I070
 20001                                  ;	jnz     short ClrVDISKok	; No, go do block move.      ;I070
 20002                                  ;					; Check for Tortugas...	     ;I070
 20003                                  ;	;;cmp	word [cs:sys_model_byte],19F8h                	     ;I070
 20004                                  ;	;cmp	word [sys_model_byte],19F8h  ; ds = cs       
 20005                                  ;	mov	ax,[sys_model_byte]
 20006                                  ;	cmp	ax,19F8h
 20007                                  ;	je      short ClrVDISKno                            	     ;I070
 20008                                  ;					; Check for mod 30-286	     ;I070
 20009                                  ;	;;cmp	word [cs:sys_model_byte],09FCh			     ;I070
 20010                                  ;	;cmp	word [sys_model_byte],09FCh	
 20011                                  ;	cmp	ax,09FCh
 20012                                  ;	jne     short ClrVDISKok			      	     ;I070
 20013                                  ;ClrVDISKno:							     ;I070	
 20014                                  ;	retn	               		; Return w/o block move.     ;I070
 20015                                  ;ClrVDISKok:							     ;I070
 20016                                  ;-----------------------------------------------------------	     ;I070
 20017                                  
 20018                                  	; 12/12/2022
 20019                                  	; ds = cs
 20020                                  
 20021                                  	; 30/12/2022 - Retro DOS v4.2
 20022                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 20023                                  
 20024 00000BD8 06                      	push	es
 20025 00000BD9 8CC8                    	mov	ax,cs
 20026 00000BDB 89C2                    	mov	dx,ax
 20027 00000BDD B10C                    	mov	cl,12
 20028 00000BDF D3EA                    	shr	dx,cl
 20029 00000BE1 B104                    	mov	cl,4
 20030 00000BE3 D3E0                    	shl	ax,cl
 20031 00000BE5 05[B80B]                	add	ax,ClrdVDISKHead
 20032 00000BE8 80D200                  	adc	dl,0
 20033                                  
 20034                                  	;; 23/10/2022
 20035                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 20036                                  	;mov	[cs:src_desc+2],ax
 20037                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 20038                                  	;mov	[cs:src_desc+4],dl
 20039                                  	; 12/12/2022
 20040                                  	;mov	[src_desc+desc.lo_word],ax
 20041 00000BEB A3[9A0B]                	mov	[src_desc+2],ax
 20042                                  	;mov	[src_desc+desc.hi_byte],dl
 20043 00000BEE 8816[9C0B]              	mov	[src_desc+4],dl
 20044                                  
 20045 00000BF2 B91000                  	mov	cx,16	; 16 words
 20046 00000BF5 0E                      	push	cs
 20047 00000BF6 07                      	pop	es
 20048 00000BF7 BE[880B]                	mov	si,bmove
 20049 00000BFA B487                    	mov	ah,87h
 20050 00000BFC CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 20051                                  			; CX = number of words to move 
 20052                                  			; ES:SI -> global descriptor table
 20053                                  			; Return: CF set on error, AH = status
 20054 00000BFE 07                      	pop	es
 20055 00000BFF C3                      	retn
 20056                                  
 20057                                  ; ----------------------------------------------------------------------
 20058                                  ;
 20059                                  ; procedure : SaveFreeHMAPtr
 20060                                  ;
 20061                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 20062                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 20063                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 20064                                  ;		the offset.
 20065                                  ;
 20066                                  ; Inputs : ES:DI - pointer to free HMA
 20067                                  ; Output : FreeHMAPtr in BIOS data segment updated
 20068                                  ;
 20069                                  ; ----------------------------------------------------------------------
 20070                                  
 20071                                  SaveFreeHMAPtr:
 20072 00000C00 8CC3                    	mov	bx,es
 20073 00000C02 B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 20074 00000C05 29D8                    	sub	ax,bx
 20075 00000C07 83C70F                  	add	di,15			; para round
 20076 00000C0A 83E7F0                  	and	di,0FFF0h
 20077 00000C0D B104                    	mov	cl,4
 20078 00000C0F D3E0                    	shl	ax,cl
 20079 00000C11 29C7                    	sub	di,ax
 20080 00000C13 1E                      	push	ds
 20081                                  	;;mov	ax,Bios_Data ; 0070h
 20082                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 20083                                  	; 21/10/2022
 20084 00000C14 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20085 00000C17 8ED8                    	mov	ds,ax
 20086 00000C19 893E[9608]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 20087 00000C1D C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 20088 00000C22 1F                      	pop	ds
 20089 00000C23 C3                      	retn
 20090                                  
 20091                                  ; ----------------------------------------------------------------------
 20092                                  ;
 20093                                  ; procedure : IsVDiskInstalled
 20094                                  ;
 20095                                  ;		Checks for the presence of VDISK header at 1MB boundary
 20096                                  ;		& INT 19 vector
 20097                                  ;
 20098                                  ; Inputs  : A20 flag should be ON
 20099                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 20100                                  ;
 20101                                  ; ----------------------------------------------------------------------
 20102                                  
 20103                                  IsVDiskInstalled:
 20104 00000C24 31C0                    	xor	ax,ax
 20105 00000C26 8ED8                    	mov	ds,ax
 20106 00000C28 8E1E4E00                	mov	ds,[19*4+2]
 20107                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 20108                                  	; 23/10/2022
 20109 00000C2C BE1200                  	mov	si,12h ; 18
 20110                                  	;mov	cx,VLEN1 ; 5
 20111 00000C2F B90500                  	mov	cx,5
 20112 00000C32 0E                      	push	cs
 20113 00000C33 07                      	pop	es
 20114 00000C34 BF[EC0A]                	mov	di,VDiskSig1
 20115 00000C37 F3A6                    	rep	cmpsb
 20116 00000C39 7410                    	je	short ivdins_retn
 20117 00000C3B B8FFFF                  	mov	ax,0FFFFh
 20118 00000C3E 8ED8                    	mov	ds,ax
 20119                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 20120 00000C40 BE1300                  	mov	si,13h
 20121 00000C43 BF[110B]                	mov	di,VDiskSig2
 20122                                  	;mov	cx,VLEN2  ; 5
 20123 00000C46 B90500                  	mov	cx,5
 20124 00000C49 F3A6                    	rep	cmpsb
 20125                                  ivdins_retn: 
 20126 00000C4B C3                      	retn			; returns the Zero flag
 20127                                  
 20128                                  ; ----------------------------------------------------------------------
 20129                                  ;
 20130                                  ; procedure : CPMHack
 20131                                  ;
 20132                                  ;		Copies the code from 0:c0 into ffff:0d0h
 20133                                  ;		for CPM compatibility
 20134                                  ;
 20135                                  ; ----------------------------------------------------------------------
 20136                                  
 20137                                  	; 11/12/2022
 20138                                  CPMHack:
 20139 00000C4C 1E                      	push	ds
 20140 00000C4D B9FFFF                  	mov	cx,0FFFFh
 20141 00000C50 8EC1                    	mov	es,cx		; ES = 0FFFFh
 20142                                  	;xor	cx,cx
 20143                                  	; 11/12/2022
 20144 00000C52 41                      	inc	cx  ; cx = 0
 20145 00000C53 8ED9                    	mov	ds,cx		; DS = 0
 20146 00000C55 BEC000                  	mov	si,0C0h
 20147 00000C58 BFD000                  	mov	di,0D0h
 20148                                  	;mov	cx,5
 20149 00000C5B B105                    	mov	cl,5
 20150 00000C5D FC                      	cld
 20151 00000C5E F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 20152 00000C60 1F                      	pop	ds
 20153 00000C61 C3                      	retn
 20154                                  
 20155                                  ; ----------------------------------------------------------------------
 20156                                  ;
 20157                                  ; procedure : off_to_para
 20158                                  ;
 20159                                  ; ----------------------------------------------------------------------
 20160                                  off_to_para:
 20161 00000C62 D1E8                    	shr	ax,1
 20162 00000C64 D1E8                    	shr	ax,1
 20163 00000C66 D1E8                    	shr	ax,1
 20164 00000C68 D1E8                    	shr	ax,1
 20165 00000C6A C3                      	retn
 20166                                  
 20167                                  ; ----------------------------------------------------------------------
 20168                                  ;**	TempCDS - Create (Temporary?) CDS
 20169                                  ;
 20170                                  ;	ENTRY	?? BUGBUG
 20171                                  ;		(DS) = SysInitSeg
 20172                                  ;	EXIT	?? BUGBUG
 20173                                  ;	USES	?? BUGBUG
 20174                                  ; ----------------------------------------------------------------------
 20175                                  
 20176                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20177                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20178                                  TempCDS:
 20179 00000C6B C43E[6B02]              	les	di,[DOSINFO]
 20180 00000C6F 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 20181                                  	;mov	cl,[es:di+20h]
 20182 00000C73 30ED                    	xor	ch,ch			; (cx) = # of block devices
 20183                                  
 20184 00000C75 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 20185                                  	;mov	[es:di+21h],cl	
 20186                                  
 20187 00000C79 88C8                    	mov	al,cl
 20188 00000C7B B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 20189                                  	;mov	ah,88
 20190 00000C7D F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 20191 00000C7F E8E604                  	call	ParaRound		; (ax) = paragraph size for CDSs
 20192 00000C82 8B36[A502]              	mov	si,[top_of_cdss] ; 31/12/2022
 20193                                  
 20194                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 20195                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 20196                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 20197                                  ;		   variable which has the top of free memory for
 20198                                  ;		   device driver loads, etc.
 20199                                  
 20200 00000C86 29C6                    	sub	si,ax
 20201                                  
 20202                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 20203                                  ;		that automatically updates alloclim every time we
 20204                                  ;		set up some new CDSs. Instead, I've added code
 20205                                  ;		which pre-allocates space for 26 CDSs. This
 20206                                  ;	        way we've got room for worst case CDSs before
 20207                                  ;		we place MagicDrv.sys
 20208                                  ;
 20209                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 20210                                  
 20211                                  	; 30/12/2022
 20212                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20213                                  	; (SYSINIT:0C52h)
 20214                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 20215                                  
 20216 00000C88 26897518                	mov	[es:di+SYSI_CDS+2],si
 20217                                  	;mov	[es:di+18h],si
 20218 00000C8C 89F0                    	mov	ax,si
 20219 00000C8E 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 20220                                  	;mov	[word es:di+16h],0
 20221                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 20222 00000C94 26C535                  	lds	si,[es:di]
 20223 00000C97 8EC0                    	mov	es,ax
 20224 00000C99 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 20225                                  
 20226                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 20227                                  ;	info from the corresponding DPB.
 20228                                  ;
 20229                                  ;	(cx) = count of CDSs left to process
 20230                                  ;	(es:di) = address of next CDS
 20231                                  
 20232                                  fooset:
 20233                                  	; 23/10/2022
 20234 00000C9B 2EA1[A702]              	mov	ax,[cs:DirStrng] ; "A:"
 20235 00000C9F AB                      	stosw				; setup the root as the curdir
 20236                                  	
 20237                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 20238                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 20239                                  
 20240                                  	; 30/12/2022
 20241                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 20242 00000CA0 E85C00                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 20243                                  
 20244                                  ;	(ds:si) = address of DPB
 20245                                  ;		 (si) = -1 if no drive
 20246                                  
 20247 00000CA3 2EA1[A902]              	mov	ax,[cs:DirStrng+2] ; "\",0
 20248 00000CA7 AB                      	stosw
 20249 00000CA8 2EFE06[A702]            	inc	byte [cs:DirStrng]
 20250 00000CAD 31C0                    	xor	ax,ax
 20251 00000CAF 51                      	push	cx
 20252                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 20253 00000CB0 B93F00                  	mov	cx,63	; 23/10/2022
 20254 00000CB3 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 20255                                  
 20256                                  ;	should handle the system that does not have any floppies.
 20257                                  ;	in this case,we are going to pretended there are two dummy floppies
 20258                                  ;	in the system. still they have dpb and cds,but we are going to
 20259                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 20260                                  ;	"invalid drive specification" message when the user try to
 20261                                  ;	access them.
 20262                                  ;
 20263                                  ;	(ax) = 0
 20264                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20265                                  ;	(ds:si) = Next DPB (-1 if none)
 20266                                  
 20267 00000CB5 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 20268 00000CB8 7414                    	je	short fooset_zero	; don't have any physical drive.
 20269                                  
 20270                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 20271                                  ;	if we are faking floppy drives then see if this cds being initialised
 20272                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 20273                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 20274                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 20275                                  ;	for dpb offsets look at inc\dpb.inc.
 20276                                  
 20277 00000CBA 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 20278 00000CC0 7513                    	jne	short normcds 		; machine has floppy drives
 20279                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 20280 00000CC2 803C01                  	cmp	byte [si],1
 20281 00000CC5 770E                    	ja	short normcds
 20282 00000CC7 B103                    	mov	cl,3			; the next dbp pointer
 20283                                  					; AX should be zero here
 20284 00000CC9 F3AB                    	rep	stosw
 20285 00000CCB 59                      	pop	cx
 20286 00000CCC EB18                    	jmp	short get_next_dpb
 20287                                  
 20288                                  ;	(ax) = 0
 20289                                  
 20290                                  fooset_zero:
 20291 00000CCE B103                    	mov	cl,3
 20292 00000CD0 F3AB                    	rep	stosw
 20293 00000CD2 59                      	pop	cx
 20294 00000CD3 EB11                    	jmp	short fincds
 20295                                  
 20296                                  ;*	We have a "normal" DPB and thus a normal CDS.
 20297                                  ;
 20298                                  ;	(ax) = 0
 20299                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20300                                  ;	(ds:si) = Next DPB (-1 if none)
 20301                                  
 20302                                  normcds:
 20303 00000CD5 59                      	pop	cx
 20304                                  
 20305                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 20306                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 20307                                  ;	this media is a non-fat based one.
 20308                                  
 20309                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 20310                                  	; 23/10/2022
 20311 00000CD6 807C0800                	cmp	byte [si+8],0
 20312 00000CDA 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 20313 00000CDC B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 20314                                  	;mov	ax,4000h
 20315                                  setnormcds:
 20316 00000CDF AB                      	stosw				; curdir_flags
 20317 00000CE0 89F0                    	mov	ax,si
 20318 00000CE2 AB                      	stosw				; curdir_devptr
 20319 00000CE3 8CD8                    	mov	ax,ds
 20320 00000CE5 AB                      	stosw
 20321                                  
 20322                                  get_next_dpb:				; entry point for fake_fooset_zero
 20323                                  	; 30/12/2022
 20324                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 20325                                  	; 23/10/2022
 20326                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 20327                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20328                                  fincds:	; get_next_dpb
 20329                                  	; 30/12/2022
 20330                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 20331 00000CE6 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 20332 00000CE9 AB                      	stosw				; curdir_id
 20333 00000CEA AB                      	stosw				; curdir_id
 20334 00000CEB AB                      	stosw				; curdir_user_word
 20335 00000CEC B80200                  	mov	ax,2
 20336 00000CEF AB                      	stosw				; curdir_end
 20337 00000CF0 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 20338 00000CF2 AA                      	stosb
 20339 00000CF3 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 20340 00000CF4 AB                      	stosw
 20341 00000CF5 AB                      	stosw
 20342                                  
 20343 00000CF6 E2A3                    	loop	fooset
 20344                                  	
 20345 00000CF8 2EC606[A702]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 20346                                  	
 20347 00000CFE C3                      	retn
 20348                                  
 20349                                  ; ----------------------------------------------------------------------
 20350                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 20351                                  ;
 20352                                  ;	entry:
 20353                                  ;	   al == ASCII CAPS drive letter
 20354                                  ;
 20355                                  ;	exit:
 20356                                  ;	   ds:si -> DPB, or si = -1 if not found
 20357                                  ; ----------------------------------------------------------------------
 20358                                  
 20359                                  ; 30/12/2022
 20360                                  ; (MSDOS 6.21 SYSINIT:0DEAh)
 20361                                  ; 23/10/2022
 20362                                  ;%if 0
 20363                                  get_dpb_for_drive_al:
 20364 00000CFF 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 20365                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 20366 00000D04 C534                    	lds	si,[si]
 20367 00000D06 2C41                    	sub	al,'A'
 20368                                  
 20369                                  get_dpb_for_drive_1:
 20370                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 20371 00000D08 3A04                    	cmp	al,[si]
 20372 00000D0A 7408                    	je	short got_dpb_for_drive	;  done if so
 20373                                  
 20374 00000D0C C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20375 00000D0F 83FEFF                  	cmp	si,-1
 20376 00000D12 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 20377                                  
 20378                                  got_dpb_for_drive:
 20379 00000D14 C3                      	retn
 20380                                  ;%endif  ; 23/10/2022
 20381                                  
 20382                                  ;=======================================================================
 20383                                  
 20384                                  ;**	EndFile - Build DOS structures
 20385                                  ;
 20386                                  ; This procedure is called after the config.sys has been processed and
 20387                                  ; installable device drivers have been loaded (but before "install="
 20388                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 20389                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 20390                                  ; to allow for the safe EXECing of "install=" programs. All memory
 20391                                  ; above these structures is deallocated back to DOS.
 20392                                  ;
 20393                                  ;	ENTRY	?? BUGBUG
 20394                                  ;	EXIT	?? BUGBUG
 20395                                  ;	USES	?? BUGBUG
 20396                                  
 20397                                  ;=======================================================================
 20398                                  ; allocate files
 20399                                  ; ----------------------------------------------------------------------
 20400                                  
 20401                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20402                                  	; (SYSINIT:0CCDh)
 20403                                  
 20404                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20405                                  	; (SYSINIT:0E00h)
 20406                                  endfile:
 20407                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 20408                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 20409                                  ; to confbot.
 20410                                  
 20411                                  ;	if this procedure has been called to take care of install= command,
 20412                                  ;	   then we have to save es,si registers.
 20413                                  
 20414                                  	; 11/12/2022
 20415                                  	; ds = cs
 20416                                  
 20417                                  	; 23/10/2022
 20418                                  	; 31/03/2019
 20419 00000D15 1E                      	push	ds
 20420                                  
 20421                                  	;;mov	ax,Bios_Data ; 0070h
 20422                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 20423                                  	; 21/10/2022
 20424 00000D16 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20425 00000D19 8ED8                    	mov	ds,ax
 20426                                  
 20427                                  	;cmp	word [052Fh],0
 20428 00000D1B 833E[2705]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 20429 00000D20 7505                    	jne	short multrk_flag_done
 20430                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20431                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 20432                                  	; 12/12/2022
 20433 00000D22 800E[2705]80            	or	byte [multrk_flag],multrk_on ; 80h
 20434                                  multrk_flag_done:
 20435                                  	; 23/10/2022
 20436                                  	; 31/03/2019
 20437 00000D27 1F                      	pop	ds
 20438                                  
 20439                                  	; 11/12/2022
 20440                                  	; ds = cs
 20441                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 20442                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20443                                  	; (SYSINIT:0E14h)
 20444 00000D28 A1[A102]                	mov	ax,[CONFBOT]
 20445 00000D2B A3[A302]                	mov	[ALLOCLIM],ax
 20446                                  	; 23/10/2022
 20447                                  	;mov	ax, [cs:top_of_cdss]
 20448                                  	;mov	[cs:ALLOCLIM], ax 
 20449                                  
 20450                                  	; 11/12/2022
 20451                                  	; ds = cs
 20452                                  	;push	cs
 20453                                  	;pop	ds
 20454                                  	
 20455                                  	;mov	ax,[CONFBOT]
 20456                                  	;mov	[ALLOCLIM],ax
 20457                                  
 20458 00000D2E E8D435                  	call	round
 20459                                  	; 11/12/2022
 20460                                  	; ds = cs
 20461 00000D31 A0[9D02]                	mov	al,[FILES]
 20462                                  	; 23/10/2022
 20463                                  	;mov	al,[cs:FILES]
 20464 00000D34 2C05                    	sub	al,5
 20465 00000D36 764B                    	jbe	short dofcbs
 20466                                  
 20467 00000D38 50                      	push	ax
 20468                                  	;mov	al,devmark_files ; 'F'
 20469 00000D39 B046                    	mov	al,'F'
 20470 00000D3B E87B07                  	call	setdevmark		; set devmark for sfts (files)
 20471 00000D3E 58                      	pop	ax
 20472 00000D3F 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20473                                  					;  it does sign extend.
 20474                                  	; 11/12/2022
 20475                                  	; ds = cs
 20476 00000D41 8B1E[6003]              	mov	bx,[memlo]
 20477 00000D45 8B16[6203]              	mov	dx,[memhi]
 20478 00000D49 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20479                                  	; 23/10/2022
 20480                                  	;mov	bx,[cs:memlo]
 20481                                  	;mov	dx,[cs:memhi]
 20482                                  	;lds	di,[cs:DOSINFO]		
 20483                                  
 20484                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 20485 00000D4D C57D04                  	lds	di,[di+4]
 20486                                  
 20487                                  	;mov	[di+SF.SFLink],bx
 20488 00000D50 891D                    	mov	[di],bx
 20489 00000D52 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 20490                                  
 20491 00000D55 0E                      	push	cs
 20492 00000D56 1F                      	pop	ds
 20493                                  
 20494                                  	; 11/12/2022
 20495                                  	; ds = cs
 20496 00000D57 C43E[6003]              	les	di,[memlo]		;point to new sft
 20497                                  	; 23/10/2022
 20498                                  	;les	di,[cs:memlo]
 20499                                  
 20500                                  	;mov	word [es:di+SF.SFLink],-1
 20501 00000D5B 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 20502                                  	;mov	[es:di+SF.SFCount],ax
 20503 00000D60 26894504                	mov	[es:di+4],ax
 20504                                  	;mov	bl,SF_ENTRY.size ; 59
 20505 00000D64 B33B                    	mov	bl,59
 20506 00000D66 F6E3                    	mul	bl			;ax = number of bytes to clear
 20507 00000D68 89C1                    	mov	cx,ax
 20508                                  	; 11/12/2022
 20509                                  	; ds = cs
 20510 00000D6A 0106[6003]              	add	[memlo],ax		;allocate memory
 20511                                  	; 23/10/2022
 20512                                  	;add	[cs:memlo],ax
 20513 00000D6E B80600                  	mov	ax,6
 20514                                  	; 11/12/2022
 20515 00000D71 0106[6003]              	add	[memlo],ax		;remember the header too
 20516                                  	;add	[cs:memlo],ax
 20517                                  	; 11/12/2022
 20518 00000D75 800E[E214]02            	or	byte [setdevmarkflag],for_devmark ; 2
 20519                                  	; 23/10/2022
 20520                                  	;or	byte [cs:setdevmarkflag],2
 20521 00000D7A E88835                  	call	round			; check for mem error before the stosb
 20522 00000D7D 01C7                    	add	di,ax
 20523 00000D7F 31C0                    	xor	ax,ax
 20524 00000D81 F3AA                    	rep	stosb			;clean out the stuff
 20525                                  
 20526                                  ; allocate fcbs
 20527                                  ; ----------------------------------------------------------------------
 20528                                  
 20529                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20530                                  	; (SYSINIT:0D48h)
 20531                                  dofcbs:
 20532                                  	; 11/12/2022
 20533                                  	; ds = cs
 20534                                  	;push	cs
 20535                                  	;pop	ds
 20536 00000D83 E87F35                  	call	round
 20537                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 20538 00000D86 B058                    	mov	al,'X'
 20539 00000D88 E82E07                  	call	setdevmark
 20540                                  	; 11/12/2022
 20541                                  	; ds = cs
 20542 00000D8B A0[9E02]                	mov	al,[FCBS]
 20543                                  	;mov	al,[cs:FCBS]
 20544 00000D8E 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20545                                  					;  it does sign extend.
 20546                                  	; 11/12/2022
 20547 00000D90 8B1E[6003]              	mov	bx,[memlo]
 20548 00000D94 8B16[6203]              	mov	dx,[memhi]
 20549 00000D98 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20550                                  	; 23/10/2022
 20551                                  	;mov	bx,[cs:memlo]
 20552                                  	;mov	dx,[cs:memhi]
 20553                                  	;lds	di,[cs:DOSINFO]
 20554                                  
 20555                                  	;mov	[di+SYSI_FCB],bx
 20556                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 20557                                  	; 23/10/2022
 20558 00000D9C 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 20559 00000D9F 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 20560                                  
 20561 00000DA2 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 20562 00000DA7 30FF                    	xor	bh,bh
 20563                                  	;mov	[di+SYSI_KEEP],bx
 20564 00000DA9 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 20565                                  
 20566 00000DAC 0E                      	push	cs
 20567 00000DAD 1F                      	pop	ds
 20568                                  	
 20569 00000DAE C43E[6003]              	les	di,[memlo]		; point to new table
 20570                                  	;mov	word [es:di+SF.SFLink],-1
 20571 00000DB2 26C705FFFF              	mov	word [es:di],-1
 20572                                  	;mov	[es:di+SF.SFCount],ax
 20573                                  	; 02/11/2022
 20574 00000DB7 26894504                	mov	[es:di+4],ax
 20575 00000DBB B339                    	mov	bl,SF_ENTRY.size ; 59
 20576 00000DBD 89C1                    	mov	cx,ax
 20577 00000DBF F6E3                    	mul	bl			; ax = number of bytes to clear
 20578 00000DC1 0106[6003]              	add	[memlo],ax		; allocate memory
 20579                                  	;mov	ax,6
 20580 00000DC5 B80600                  	mov	ax,SF.size-2 ; 6
 20581 00000DC8 0106[6003]              	add	[memlo],ax		; remember the header too
 20582                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20583 00000DCC 800E[E214]02            	or	byte [setdevmarkflag],2
 20584 00000DD1 E83135                  	call	round			; check for mem error before the stosb
 20585 00000DD4 01C7                    	add	di,ax			; skip over header
 20586 00000DD6 B041                    	mov	al,'A'
 20587                                  fillloop:
 20588 00000DD8 51                      	push	cx			; save count
 20589 00000DD9 B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 20590 00000DDC FC                      	cld
 20591 00000DDD F3AA                    	rep	stosb			; filled
 20592                                  
 20593                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 20594                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 20595                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 20596                                  
 20597                                  	; 18/12/2022
 20598                                  	;cx = 0
 20599 00000DDF 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 20600 00000DE3 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 20601 00000DE7 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 20602                                  	
 20603                                  	; 23/10/2022	
 20604                                  	;mov     word [es:di-3Bh],0
 20605                                  	;mov     word [es:di-26h],0
 20606                                  	;mov     word [es:di-24h],0
 20607                                  
 20608 00000DEB 59                      	pop	cx
 20609 00000DEC E2EA                    	loop	fillloop
 20610                                  
 20611                                  ; allocate buffers
 20612                                  ; ----------------------------------------------------------------------
 20613                                  
 20614                                  ; search through the list of media supported and allocate 3 buffers if the
 20615                                  ; capacity of the drive is > 360kb
 20616                                  
 20617                                  	; 18/12/2022
 20618                                  	; cx = 0
 20619 00000DEE 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 20620 00000DF3 7403                    	je	short dodefaultbuff
 20621 00000DF5 E98700                  	jmp	dobuff			; the user entered the buffers=.
 20622                                  
 20623                                  dodefaultbuff:
 20624                                  	; 18/12/2022
 20625 00000DF8 890E[9902]              	mov	[h_buffers],cx ; 0
 20626 00000DFC 41                      	inc	cx
 20627 00000DFD 41                      	inc	cx
 20628 00000DFE 890E[9702]              	mov	[buffers],cx ; 2	
 20629                                  	
 20630                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20631                                  	;mov	word [buffers],2	; default to 2 buffers
 20632                                  
 20633                                  	; 23/10/2022	
 20634 00000E02 50                      	push	ax
 20635 00000E03 1E                      	push	ds ; 26/03/2019
 20636                                  	;les	bp,[DOSINFO]		; search through the dpb's
 20637 00000E04 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 20638                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20639                                  	; 11/12/2022
 20640 00000E09 26C46E00                	les	bp,[es:bp]
 20641                                  	; 23/10/2022
 20642                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20643                                  
 20644 00000E0D 0E                      	push	cs
 20645 00000E0E 1F                      	pop	ds
 20646                                  ;SYSINIT:0DE2h:
 20647                                  nextdpb:				; test if the drive supports removeable media
 20648                                  	;mov	bl,[es:bp+DPB.drive]
 20649                                  	; 11/12/2022
 20650 00000E0F 268A5E00                	mov	bl,[es:bp]
 20651                                  	; 23/10/2022
 20652                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20653                                  
 20654                                  	;inc	bl
 20655                                  	; 18/12/2022
 20656 00000E13 43                      	inc	bx
 20657                                  
 20658                                  	;mov	ax,(IOCTL<<8)|8
 20659 00000E14 B80844                  	mov	ax,4408h
 20660 00000E17 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20661                                  
 20662                                  ; ignore fixed disks
 20663                                  
 20664 00000E19 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20665 00000E1B 7534                    	jnz	short nosetbuf
 20666                                  
 20667                                  ; get parameters of drive
 20668                                  
 20669 00000E1D 31DB                    	xor	bx,bx
 20670                                  	;;mov	bl,[es:bp+DPB.drive]
 20671                                  	; 11/12/2022
 20672 00000E1F 268A5E00                	mov	bl,[es:bp]
 20673                                  	; 23/10/2022
 20674                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20675                                  	
 20676                                  	;inc	bl
 20677                                  	; 18/12/2022
 20678 00000E23 43                      	inc	bx
 20679                                  
 20680 00000E24 BA[DA48]                	mov	dx,deviceparameters
 20681                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20682 00000E27 B80D44                  	mov	ax,440Dh
 20683                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20684 00000E2A B96008                  	mov	cx,860h
 20685 00000E2D CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20686 00000E2F 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20687                                  					; generic ioctl
 20688                                  ; determine capacity of drive
 20689                                  ; media capacity = #sectors * bytes/sector
 20690                                  
 20691                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20692                                  	; 23/10/2022
 20693 00000E31 8B1E[E948]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20694                                  	
 20695                                  ; to keep the magnitude of the media capacity within a word,
 20696                                  ; scale the sector size
 20697                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20698                                  
 20699                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20700                                  	; 23/10/2022
 20701 00000E35 A1[E148]                	mov	ax,[deviceparameters+7] ; bytes per sector
 20702 00000E38 31D2                    	xor	dx,dx
 20703 00000E3A B90002                  	mov	cx,512
 20704 00000E3D F7F1                    	div	cx			; scale sector size in factor of
 20705                                  					; 512 bytes
 20706 00000E3F F7E3                    	mul	bx			; ax = #sectors * size factor
 20707 00000E41 09D2                    	or	dx,dx			; just in case of large floppies
 20708 00000E43 7505                    	jnz	short setbuf
 20709 00000E45 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20710 00000E48 7607                    	jbe	short nosetbuf
 20711                                  setbuf:
 20712                                  	; 18/12/2022
 20713                                  	; word [buffers] = 2
 20714 00000E4A C606[9702]03            	mov	byte [buffers],3
 20715                                  	;mov	word [buffers],3
 20716 00000E4F EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20717                                  					; for default buffer count
 20718                                  nosetbuf:
 20719                                  	; 23/10/2022
 20720                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20721 00000E51 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20722 00000E56 7406                    	je	short chk_memsize_for_buffers
 20723                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20724 00000E58 26C46E19                	les	bp,[es:bp+19h]
 20725 00000E5C EBB1                    	jmp	short nextdpb
 20726                                  
 20727                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20728                                  ;memory size too.
 20729                                  ; default buffers = 2
 20730                                  ; if diskette media > 360 kb,then default buffers = 3
 20731                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20732                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20733                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20734                                  
 20735                                  chk_memsize_for_buffers:
 20736                                  	; 18/12/2022
 20737                                  	;cmp	word [MEMORY_SIZE],2000h
 20738                                  	;jbe	short bufset
 20739                                  	;mov	word [buffers],5
 20740                                  	;cmp	word [MEMORY_SIZE],4000h
 20741                                  	;jbe	short bufset
 20742                                  	;mov	word [buffers],10
 20743                                  	;cmp	word [MEMORY_SIZE],8000h
 20744                                  	;jbe	short bufset
 20745                                  	;mov	word [buffers],15
 20746                                  
 20747                                  	; 18/12/2022
 20748                                  	; word [buffers] = 3 or 2
 20749 00000E5E BB[9702]                	mov	bx,buffers
 20750 00000E61 A1[9202]                	mov	ax,[MEMORY_SIZE]
 20751 00000E64 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20752                                  
 20753 00000E65 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20754 00000E68 7213                    	jb	short bufset
 20755 00000E6A C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20756 00000E6D 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20757 00000E70 730B                    	jnb	short bufset
 20758 00000E72 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20759 00000E75 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20760 00000E78 7303                    	jnb	short bufset
 20761 00000E7A C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20762                                  bufset:
 20763                                  	; 23/10/2022
 20764                                  	; 26/03/2019
 20765 00000E7D 1F                      	pop	ds
 20766 00000E7E 58                      	pop	ax
 20767                                  
 20768                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20769                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20770                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20771                                  
 20772                                  ; 26/03/2019
 20773                                  
 20774                                  ;*******************************************************************************
 20775                                  ;									       *
 20776                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20777                                  ; input :								       *
 20778                                  ;    memhi:memlo - start of the next available memory			       *
 20779                                  ;    buffers = number of buffers					       *
 20780                                  ;    h_buffers = number of secondary buffers				       *
 20781                                  ;									       *
 20782                                  ; output:								       *
 20783                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20784                                  ;	buffinfo set.							       *
 20785                                  ;	bufferqueue set.						       *
 20786                                  ;									       *
 20787                                  ; subroutines to be called:						       *
 20788                                  ;									       *
 20789                                  ;*******************************************************************************
 20790                                  
 20791                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20792                                  	; (SYSINIT:0E60h)
 20793                                  dobuff:
 20794                                  	; ds = cs ; 31/03/2019
 20795                                  	; 23/10/2022
 20796 00000E7F 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20797                                  	;mov	ax,[buffers] ; 31/03/2019
 20798                                  	;lds	bx,[DOSINFO]
 20799 00000E84 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 20800                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20801 00000E88 89473F                  	mov	[bx+3Fh],ax
 20802 00000E8B 2EA1[9902]              	mov	ax,[cs:h_buffers]
 20803                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20804 00000E8F 894741                  	mov	[bx+41h],ax
 20805 00000E92 C55F12                  	lds	bx,[bx+12h]
 20806                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20807 00000E95 E86D34                  	call	round		; get [memhi]:[memlo]
 20808                                  	;mov	al,devmark_buf	; ='B'
 20809 00000E98 B042                    	mov	al,'B'	
 20810 00000E9A E81C06                  	call	setdevmark
 20811                                  
 20812                                  ;allocate buffers
 20813                                  
 20814 00000E9D 1E                      	push	ds			; save buffer info. ptr.
 20815 00000E9E 53                      	push	bx
 20816                                  
 20817 00000E9F E85303                  	call	set_buffer
 20818                                  
 20819 00000EA2 5B                      	pop	bx
 20820 00000EA3 1F                      	pop	ds
 20821                                  
 20822                                  ;now set the secondary buffer if specified.
 20823                                  
 20824 00000EA4 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20825 00000EAA 742D                    	je	short xif16
 20826 00000EAC E85634                  	call	round
 20827                                  	; 23/10/2022
 20828 00000EAF 2E8B0E[6003]            	mov	cx,[cs:memlo]
 20829                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20830 00000EB4 894F06                  	mov	[bx+6],cx
 20831 00000EB7 2E8B0E[6203]            	mov	cx,[cs:memhi]
 20832                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20833 00000EBC 894F08                  	mov	[bx+8],cx
 20834 00000EBF 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20835                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20836 00000EC4 894F0A                  	mov	[bx+10],cx
 20837 00000EC7 B80002                  	mov	ax,512			; 512 byte
 20838 00000ECA F7E1                    	mul	cx
 20839 00000ECC 2EA3[6003]              	mov	[cs:memlo],ax
 20840                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20841 00000ED0 2E800E[E214]02          	or	byte [cs:setdevmarkflag],2
 20842 00000ED6 E82C34                  	call	round
 20843                                  xif16:
 20844                                  
 20845                                  ; ----------------------------------------------------------------------
 20846                                  ; allocate cdss
 20847                                  ; ----------------------------------------------------------------------
 20848                                  
 20849                                  buf1:
 20850 00000ED9 E82934                  	call	round
 20851                                  
 20852 00000EDC 50                      	push	ax
 20853                                  	; 23/10/2022
 20854                                  	;mov	ax,devmark_cds		;='L'
 20855 00000EDD B84C00                  	mov	ax, 'L'
 20856 00000EE0 E8D605                  	call	setdevmark
 20857 00000EE3 58                      	pop	ax
 20858                                  
 20859 00000EE4 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20860                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20861 00000EE9 268A4D20                	mov	cl,[es:di+20h]
 20862 00000EED 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20863 00000EF2 7305                    	jae	short gotncds 		; user setting must be at least numio
 20864 00000EF4 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20865                                  gotncds:
 20866 00000EF9 30ED                    	xor	ch,ch
 20867                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20868 00000EFB 26884D21                	mov	[es:di+21h],cl
 20869 00000EFF 2EA1[6203]              	mov	ax,[cs:memhi]
 20870                                  	;mov	[es:di+SYSI_CDS+2],ax
 20871 00000F03 26894518                	mov	[es:di+18h],ax
 20872 00000F07 2EA1[6003]              	mov	ax,[cs:memlo]
 20873                                  	;mov	[es:di+SYSI_CDS],ax
 20874 00000F0B 26894516                	mov	[es:di+16h],ax
 20875 00000F0F 88C8                    	mov	al,cl
 20876                                  	;mov	ah,curdirlen ; curdir_list.size
 20877 00000F11 B458                    	mov	ah,88
 20878 00000F13 F6E4                    	mul	ah
 20879 00000F15 E85002                  	call	ParaRound
 20880 00000F18 2E0106[6203]            	add	[cs:memhi],ax
 20881                                  
 20882                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20883 00000F1D 2E800E[E214]02          	or	byte [cs:setdevmarkflag],2
 20884 00000F23 E8DF33                  	call	round			; check for mem error before initializing
 20885                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20886 00000F26 26C535                  	lds	si,[es:di]
 20887                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20888 00000F29 26C47D16                	les	di,[es:di+16h]
 20889 00000F2D E86BFD                  	call	fooset
 20890                                  
 20891                                  ; ----------------------------------------------------------------------
 20892                                  ; allocate space for internal stack
 20893                                  ; ----------------------------------------------------------------------
 20894                                  
 20895 00000F30 0E                      	push	cs
 20896 00000F31 1F                      	pop	ds
 20897                                  
 20898                                  ;	if the user did not entered stacks= command, as a default, do not install
 20899                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20900                                  ;	otherwise,install it to the user specified value or to the default
 20901                                  ;	value of 9,128 for other systems.
 20902                                  
 20903 00000F32 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20904 00000F37 740E                    	je	short doinstallstack	; then install as specified by the user
 20905 00000F39 803E[BA02]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20906 00000F3E 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20907 00000F40 803E[B902]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20908 00000F45 736D                    	jae	short skipstack
 20909                                  doinstallstack:
 20910 00000F47 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20911 00000F4A 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20912 00000F4C 7466                    	jz	short skipstack		; don't install stack.
 20913                                  
 20914                                  ;	dynamic relocation of stack code.
 20915                                  
 20916 00000F4E E8B433                  	call	round			; [memhi] = seg. for stack code
 20917                                  					; [memlo] = 0
 20918                                  
 20919                                  ; set devmark block into memory for mem command
 20920                                  ; devmark_id = 's' for stack
 20921                                  
 20922                                  	;mov	al,devmark_stk	;='S'
 20923                                  	; 23/10/2022
 20924 00000F51 B053                    	mov	al,'S'
 20925 00000F53 E86305                  	call	setdevmark
 20926                                  
 20927 00000F56 A1[6203]                	mov	ax,[memhi]
 20928 00000F59 8EC0                    	mov	es,ax		; es -> seg. the stack code is going to move.
 20929                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20930                                  	; 11/12/2022
 20931                                  	; ds = cs
 20932                                  	;push	cs
 20933                                  	;pop	ds
 20934 00000F5B 31F6                    	xor	si,si		; !!we know that stack code is at the beginning of sysinit.
 20935 00000F5D 31FF                    	xor	di,di
 20936 00000F5F B9[6702]                	mov	cx,endstackcode
 20937 00000F62 890E[6003]              	mov	[memlo],cx
 20938 00000F66 E89C33                  	call	round		; have enough space for relocation?
 20939 00000F69 F3A4                    	rep	movsb
 20940                                  
 20941 00000F6B 1E                      	push	ds		; stick the location of the NextStack entry
 20942                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20943                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20944                                  	; 21/10/2022
 20945 00000F6C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20946 00000F6F 8ED8                    	mov	ds,ax
 20947 00000F71 C706[5F08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20948 00000F77 8C06[6108]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20949                                  
 20950 00000F7B 2EA1[6003]              	mov	ax,[cs:memlo]
 20951 00000F7F 2EA3[8E02]              	mov	[cs:stack_addr],ax ; set for stack area initialization
 20952 00000F83 A3[6508]                	mov	[IT_StackLoc],ax  ; pass it as Instance Data, too
 20953 00000F86 2EA1[6203]              	mov	ax,[cs:memhi]	 ; this will be used by stack_init routine.
 20954 00000F8A 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20955 00000F8E A3[6708]                	mov	[IT_StackLoc+2],ax
 20956                                  
 20957                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20958                                  
 20959                                  	;mov	ax,entrysize ; mov ax,8
 20960                                  	; 23/10/2022
 20961 00000F91 B80800                  	mov	ax,8
 20962 00000F94 2E0306[8C02]            	add	ax,[cs:stack_size]
 20963 00000F99 2EF726[8A02]            	mul	word [cs:stack_count]
 20964                                  
 20965 00000F9E A3[6908]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20966                                  
 20967 00000FA1 1F                      	pop	ds		; no more need to access Instance Table
 20968                                  
 20969 00000FA2 E8C301                  	call	ParaRound	; convert size to paragraphs
 20970                                  	
 20971                                  	; 11/12/2022
 20972                                  	; ds = cs
 20973                                  	;add	[cs:memhi],ax
 20974 00000FA5 0106[6203]              	add	[memhi],ax
 20975                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20976                                  	;or	byte [cs:setdevmarkflag],2
 20977 00000FA9 800E[E214]02            	or	byte [setdevmarkflag],2
 20978                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20979                                  				; to set the devmark_size for stack by round routine.
 20980 00000FAE E85433                  	call	round		; check for memory error before
 20981                                  				; continuing
 20982 00000FB1 E8EA02                  	call	stackinit	; initialize hardware stack. 
 20983                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20984                                  skipstack:
 20985                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20986                                  	; (SYSINIT:0F99h)
 20987                                  
 20988                                  	; 11/12/2022
 20989                                  	; ds = cs
 20990                                  	;push	cs
 20991                                  	;pop	ds
 20992                                  
 20993 00000FB4 A0[9D02]                	mov	al,[FILES]
 20994 00000FB7 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20995                                  				;  it does sign extend.
 20996 00000FB9 89C1                    	mov	cx,ax
 20997 00000FBB 31DB                    	xor	bx,bx		;close standard input
 20998 00000FBD B43E                    	mov	ah,3Eh ; CLOSE
 20999 00000FBF CD21                    	int	21h
 21000 00000FC1 BB0200                  	mov	bx,2
 21001                                  rcclloop:			;close everybody but standard output
 21002 00000FC4 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 21003 00000FC6 CD21                    	int	21h		; in case we can't get new one open.
 21004 00000FC8 43                      	inc	bx
 21005 00000FC9 E2F9                    	loop	rcclloop
 21006                                  
 21007 00000FCB BA[EA45]                	mov	dx,condev
 21008 00000FCE B002                    	mov	al,2
 21009 00000FD0 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 21010 00000FD2 F9                      	stc			; set for possible int 24
 21011 00000FD3 CD21                    	int	21h
 21012 00000FD5 7305                    	jnc	short goaux
 21013 00000FD7 E87235                  	call	badfil
 21014 00000FDA EB13                    	jmp	short goaux2
 21015                                  goaux:	
 21016 00000FDC 50                      	push	ax
 21017 00000FDD BB0100                  	mov	bx,1		;close standard output
 21018 00000FE0 B43E                    	mov	ah,3Eh ; CLOSE
 21019 00000FE2 CD21                    	int	21h
 21020 00000FE4 58                      	pop	ax
 21021                                  
 21022 00000FE5 89C3                    	mov	bx,ax		;new device handle
 21023 00000FE7 B445                    	mov	ah,45h ; XDUP
 21024 00000FE9 CD21                    	int	21h		;dup to 1,stdout
 21025 00000FEB B445                    	mov	ah,45h ; XDUP
 21026 00000FED CD21                    	int	21h		;dup to 2,stderr
 21027                                  goaux2: 
 21028 00000FEF BA[EE45]                	mov	dx,auxdev
 21029 00000FF2 B002                    	mov	al,2		;read/write access
 21030 00000FF4 E88635                  	call	open_dev
 21031                                  
 21032 00000FF7 BA[F245]                	mov	dx,prndev
 21033 00000FFA B001                    	mov	al,1		;write only
 21034 00000FFC E87E35                  	call	open_dev
 21035                                  
 21036                                  ;global rearm command for shared interrupt devices attached in the system;
 21037                                  ;shared interrupt attachment has some problem when it issues interrupt
 21038                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 21039                                  ;no further interrupts on that level will be presented until a global rearm
 21040                                  ;is issued. by the request of the system architecture group, msbio will
 21041                                  ;issue a global rearm after every device driver is loaded.
 21042                                  ;to issue a global rearm:	;for pc1,xt,palace
 21043                                  ;
 21044                                  ;			  out 02f2h,xx  ; interrupt level 2
 21045                                  ;			  out 02f3h,xx  ; interrupt level 3
 21046                                  ;			  out 02f4h,xx  ; interrupt level 4
 21047                                  ;			  out 02f5h,xx  ; interrupt level 5
 21048                                  ;			  out 02f6h,xx  ; interrupt level 6
 21049                                  ;			  out 02f7h,xx  ; interrupt level 7
 21050                                  ;
 21051                                  ;	for pc at,in addition to the above commands,
 21052                                  ;	need to handle the secondary interrupt handler
 21053                                  ;
 21054                                  ;			  out 06f2h,xx  ; interrupt level 10
 21055                                  ;			  out 06f3h,xx  ; interrupt level 11
 21056                                  ;			  out 06f4h,xx  ; interrupt level 12
 21057                                  ;			  out 06f6h,xx  ; interrupt level 14
 21058                                  ;			  out 06f7h,xx  ; interrupt level 15
 21059                                  ;
 21060                                  ;	for round-up machine
 21061                                  ;
 21062                                  ;			  none.
 21063                                  
 21064                                  ; where xx stands for any value.
 21065                                  ;
 21066                                  ; for your information,after naples level machine,the system service bios
 21067                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 21068                                  
 21069                                  	; 24/10/2022
 21070                                  
 21071 00000FFF 50                      	push	ax
 21072 00001000 53                      	push	bx
 21073 00001001 52                      	push	dx
 21074 00001002 06                      	push	es
 21075                                  
 21076 00001003 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 21077 00001005 BAF202                  	mov	dx,2F2h 		;get starting address
 21078 00001008 EE                      	out	dx,al			; out 02f2h,0ffh
 21079 00001009 42                      	inc	dx
 21080 0000100A EE                      	out	dx,al			; out 02f3h,0ffh
 21081 0000100B 42                      	inc	dx
 21082 0000100C EE                      	out	dx,al			; out 02f4h,0ffh
 21083 0000100D 42                      	inc	dx
 21084 0000100E EE                      	out	dx,al			; out 02f5h,0ffh
 21085 0000100F 42                      	inc	dx
 21086 00001010 EE                      	out	dx,al			; out 02f6h,0ffh
 21087 00001011 42                      	inc	dx
 21088 00001012 EE                      	out	dx,al			; out 02f7h,0ffh
 21089                                  
 21090                                  ;sb secondary global rearm
 21091                                  
 21092 00001013 B800F0                  	mov	ax,0F000h		;get machine type
 21093 00001016 8EC0                    	mov	es,ax
 21094 00001018 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 21095 0000101E 740D                    	je	short startrearm	; *if at no need to check
 21096                                  
 21097 00001020 B4C0                    	mov	ah,0C0h 		;get system configuration
 21098 00001022 CD15                    	int	15h			; *
 21099 00001024 7216                    	jc	short finishrearm	; *jmp if old rom
 21100                                  
 21101                                  ; test feature byte for secondary interrupt controller
 21102                                  
 21103 00001026 26F6470540              	test	byte [es:bx+5],40h
 21104                                  	; 24/10/2022
 21105                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 21106 0000102B 740F                    	je	short finishrearm	;jmp if it is there
 21107                                  
 21108                                  startrearm:
 21109 0000102D B0FF                    	mov	al,0FFh 		;write any pattern to port
 21110 0000102F BAF206                  	mov	dx,6F2h 		;get starting address
 21111 00001032 EE                      	out	dx,al			;out 06f2h,0ffh
 21112 00001033 42                      	inc	dx			;bump address
 21113 00001034 EE                      	out	dx,al			;out 06f3h,0ffh
 21114 00001035 42                      	inc	dx			;bump address
 21115 00001036 EE                      	out	dx,al			;out 06f4h,0ffh
 21116 00001037 42                      	inc	dx			;bump address
 21117 00001038 42                      	inc	dx			;bump address
 21118 00001039 EE                      	out	dx,al			;out 06f6h,0ffh
 21119 0000103A 42                      	inc	dx			;bump address
 21120 0000103B EE                      	out	dx,al			;out 06f7h,0ffh
 21121                                  
 21122                                  finishrearm:
 21123 0000103C 07                      	pop	es
 21124 0000103D 5A                      	pop	dx
 21125 0000103E 5B                      	pop	bx
 21126 0000103F 58                      	pop	ax
 21127                                  
 21128                                  ;    global rearm end *******************
 21129                                  
 21130                                  ; ----------------------------------------------------------------------
 21131                                  ; allocate sysinit_base for install= command
 21132                                  ; ----------------------------------------------------------------------
 21133                                  ; sysinit_base allocation.
 21134                                  ;   check if endfile has been called to handle install= command.
 21135                                  
 21136                                  set_sysinit_base:
 21137                                  
 21138                                  ; ----------------------------------------------------------------------
 21139                                  ;sysinit_base will be established in the secure area of
 21140                                  ;lower memory when it handles the first install= command.
 21141                                  ;sysinit_base is the place where the actual exec function will be called and
 21142                                  ;will check sysinit module in high memory if it is damaged by the application
 21143                                  ;program.  if sysinit module has been broken,then "memory error..." message
 21144                                  ;is displayed by sysinit_base.
 21145                                  ; ----------------------------------------------------------------------
 21146                                  
 21147                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 21148                                  	; (SYSINIT:1028h)
 21149                                  
 21150                                  	; 11/12/2022
 21151                                  	; ds = cs
 21152 00001040 50                      	push	ax			; set devmark for mem command
 21153 00001041 A1[6203]                	mov	ax,[memhi]
 21154 00001044 2B06[6603]              	sub	ax,[area]
 21155 00001048 A3[5E03]                	mov	[impossible_owner_size],ax ; remember the size in case.
 21156                                  	;mov	al,devmark_inst ; 'T'
 21157 0000104B B054                    	mov	al,'T'
 21158 0000104D E86904                  	call	setdevmark
 21159 00001050 58                      	pop	ax
 21160                                  
 21161 00001051 8B3E[6203]              	mov	di,[memhi]
 21162 00001055 8EC7                    	mov	es,di
 21163 00001057 893E[D202]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 21164 0000105B 31FF                    	xor	di,di
 21165 0000105D 893E[D002]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 21166 00001061 BE[7411]                	mov	si,sysinit_base		; ds:si -> source code to be relocated.
 21167 00001064 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 21168                                  	; 24/10/2022 
 21169                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 21170 00001067 010E[6003]              	add	[memlo],cx
 21171                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 21172                                  	; 11/12/2022
 21173                                  	; ds = cs
 21174                                  	;or	byte [cs:setdevmarkflag],2
 21175 0000106B 800E[E214]02            	or	byte [setdevmarkflag],2
 21176                                  	;or	byte [setdevmarkflag],for_devmark
 21177 00001070 E89232                  	call	round			; check mem error. also,readjust memhi for the next use.
 21178 00001073 F3A4                    	rep	movsb			; reallocate it.
 21179                                  
 21180 00001075 C706[D402][5B11]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 21181 0000107B 8C0E[D602]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 21182                                  	;or	word [install_flag],has_installed ; set the flag.
 21183                                  	;or	byte [install_flag],has_installed ; 2
 21184                                  	; 11/12/2022
 21185 0000107F 800E[CC02]02            	or	byte [install_flag],2
 21186                                  	; 24/10/2022
 21187                                  	;or	word [install_flag],2	
 21188                                  
 21189                                  ; ----------------------------------------------------------------------
 21190                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 21191                                  ; the top of the memory will be allocated for sysinit and config.sys if
 21192                                  ; have_install_cmd.
 21193                                  ; ----------------------------------------------------------------------
 21194                                  
 21195 00001084 E87E32                  	call	round
 21196 00001087 8B1E[6203]              	mov	bx,[memhi]
 21197 0000108B A1[6603]                	mov	ax,[area]
 21198 0000108E A3[5C03]                	mov	[old_area],ax		; save [area]
 21199 00001091 8EC0                    	mov	es,ax			;calc what we needed
 21200 00001093 29C3                    	sub	bx,ax
 21201                                  	; 24/10/2022
 21202 00001095 B44A                    	mov	ah,4Ah ; SETBLOCK
 21203 00001097 CD21                    	int	21h			;give the rest back
 21204                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21205                                  		; ES = segment address of block to change
 21206                                  		; BX = new size in paragraphs
 21207 00001099 06                      	push	es
 21208 0000109A 8CC0                    	mov	ax,es
 21209 0000109C 48                      	dec	ax
 21210 0000109D 8EC0                    	mov	es,ax			;point to arena
 21211                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 21212                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 21213                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 21214                                  	; 24/10/2022
 21215 0000109F 26C70601000800          	mov	word [es:1],8		;set impossible owner
 21216 000010A6 26C70608005344          	mov	word [es:8],'SD'	; System Data
 21217 000010AD 07                      	pop	es
 21218                                  
 21219 000010AE BBFFFF                  	mov	bx,0FFFFh
 21220 000010B1 B448                    	mov	ah,48h ; ALLOC
 21221 000010B3 CD21                    	int	21h
 21222 000010B5 B448                    	mov	ah,48h ; ALLOC
 21223 000010B7 CD21                    	int	21h			; allocate the rest of the memory
 21224                                  		; DOS - 2+ - ALLOCATE MEMORY
 21225                                  		; BX = number of 16-byte paragraphs desired
 21226 000010B9 A3[6203]                	mov	[memhi],ax		; start of the allocated memory
 21227 000010BC C706[6003]0000          	mov	word [memlo],0		;  to be used next.
 21228                                  
 21229                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 21230                                  ;;;; allocated.
 21231                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 21232                                  ;;;; this time) to the top-of-the memory),here we are going to
 21233                                  ;;;; 1). "setblock" from memhi to confbot.
 21234                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 21235                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 21236                                  
 21237                                  ;memory allocation for sysinit,confbot module.
 21238                                  
 21239 000010C2 8EC0                    	mov	es,ax
 21240                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21241                                  	; (SYSINIT:11DFh)
 21242 000010C4 8B1E[A102]              	mov	bx,[CONFBOT]
 21243                                  	; 24/10/2022
 21244                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 21245 000010C8 29C3                    	sub	bx,ax			; confbot - memhi
 21246 000010CA 4B                      	dec	bx			; make a room for the memory block id.
 21247 000010CB 4B                      	dec	bx			; make sure!!!.
 21248 000010CC B44A                    	mov	ah,4Ah ; SETBLOCK
 21249 000010CE CD21                    	int	21h			; this will free (confbot to top of memory)
 21250                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21251                                  		; ES = segment address of block to change
 21252                                  		; BX = new size in paragraphs
 21253 000010D0 BBFFFF                  	mov	bx,0FFFFh
 21254 000010D3 B448                    	mov	ah,48h ; ALLOC
 21255 000010D5 CD21                    	int	21h
 21256 000010D7 B448                    	mov	ah,48h ; ALLOC
 21257 000010D9 CD21                    	int	21h			; allocate (confbot to top of memory)
 21258                                  		; DOS - 2+ - ALLOCATE MEMORY
 21259                                  		; BX = number of 16-byte paragraphs desired
 21260 000010DB A3[6603]                	mov	[area],ax		; save allocated memory segment.
 21261                                  					; need this to free this area for command.com.
 21262 000010DE 8E06[6203]              	mov	es,[memhi]
 21263 000010E2 B449                    	mov	ah,49h			; free allocated memory.
 21264 000010E4 CD21                    	int	21h			; free (memhi to confbot(=area))
 21265                                  		; DOS - 2+ - FREE MEMORY
 21266                                  		; ES = segment address of area to be freed
 21267                                  endfile_ret:
 21268 000010E6 C3                      	retn
 21269                                  
 21270                                  ; End of "EndFile" DOS structure configuration.
 21271                                  
 21272                                  ; ----------------------------------------------------------------------
 21273                                  ; 26/03/2019 - Retro DOS v4.0
 21274                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 21275                                  ; ----------------------------------------------------------------------
 21276                                  ; Do_Install_Exec
 21277                                  ;
 21278                                  ; This procedure is used to EXEC a program being loaded via the 
 21279                                  ; "install=" mechanism in config.sys. It does this by setting up
 21280                                  ; the parameters, and then jumping to sysinit_base, which has been
 21281                                  ; setup in low memory. When complete, sysinit_base will jump back
 21282                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 21283                                  ; program).
 21284                                  
 21285                                  ;SYSINIT:10CFh:
 21286                                  
 21287                                  do_install_exec:			; now,handles install= command.
 21288                                  
 21289 000010E7 56                      	push	si			; save si for config.sys again.
 21290                                  
 21291                                  ; we are going to call load/exec function.
 21292                                  ; set es:bx to the parameter block here;;;;;;;
 21293                                  ; set ds:dx to the asciiz string. remember that we already has 0
 21294                                  ; after the filename. so parameter starts after that. if next
 21295                                  ; character is a line feed (i.e. 10),then assume that the 0
 21296                                  ; we already encountered used to be a carrage return. in this
 21297                                  ; case,let's set the length to 0 which will be followed by
 21298                                  ; carridge return.
 21299                                  
 21300                                  ; es:si -> command line in config.sys. points to the first non blank
 21301                                  ;character after =.
 21302                                  
 21303 000010E8 06                      	push	es
 21304 000010E9 1E                      	push	ds
 21305 000010EA 07                      	pop	es
 21306 000010EB 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 21307 000010EC 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 21308                                  
 21309 000010EE 31C9                    	xor	cx,cx
 21310 000010F0 FC                      	cld
 21311 000010F1 2EC606[EF02]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 21312 000010F7 BF[F002]                	mov	di,ldexec_parm
 21313                                  installfilename:			; skip the file name
 21314 000010FA AC                      	lodsb				; al = ds:si; si++
 21315 000010FB 3C00                    	cmp	al,0
 21316 000010FD 7402                    	je	short got_installparm
 21317 000010FF EBF9                    	jmp	short installfilename
 21318                                  got_installparm:			; copy the parameters to ldexec_parm
 21319 00001101 AC                      	lodsb
 21320 00001102 268805                  	mov	[es:di],al
 21321 00001105 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 21322 00001107 7405                    	je	short done_installparm
 21323 00001109 FEC1                    	inc	cl			; # of char. in the parm.
 21324 0000110B 47                      	inc	di
 21325 0000110C EBF3                    	jmp	short got_installparm
 21326                                  done_installparm:
 21327 0000110E 2E880E[EE02]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 21328 00001113 80F900                  	cmp	cl,0			; if no parm,then
 21329 00001116 7506                    	jne	short install_seg_set 	; let the parm area
 21330 00001118 2EC606[EF02]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 21331                                  					; starts with cr.
 21332                                  install_seg_set:
 21333 0000111E 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 21334 00001125 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 21335                                  
 21336                                  ;---------------------------------------------------M067----------------
 21337                                  ;
 21338                                  ; 	the environment pointer is made 0. so the current environment ptr.
 21339                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 21340                                  ;
 21341                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 21342                                  ;
 21343                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 21344                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 21345                                  ; 	was fixed. 
 21346                                  ;
 21347                                  ; ----------------------------------------------------------------------
 21348                                  
 21349                                  ;;ifdef   MULTI_CONFIG
 21350                                  
 21351                                  ; If there's any environment data in "config_wrkseg", pass to app
 21352                                  
 21353                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 21354                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21355                                  ;%if 0
 21356 00001127 89C1                            mov     cx,ax
 21357 00001129 2E833E[D914]00                  cmp     word [cs:config_envlen],0
 21358 0000112F 7405                            je      short no_envdata2
 21359 00001131 2E8B0E[DB14]                    mov     cx,[cs:config_wrkseg]
 21360                                  no_envdata2:
 21361                                  ;;endif  ;MULTI_CONFIG
 21362                                  
 21363                                  ;%endif	; 24/10/2022
 21364                                  
 21365                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 21366                                  	; 24/10/2022
 21367                                  	;mov	[cs:iexec.environ],cx
 21368                                  	; 02/11/2022
 21369 00001136 2EA3[4003]              	mov	[cs:iexec.environ],ax	
 21370                                  
 21371                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 21372 0000113A 2EA3[4403]              	mov	[cs:iexec.ldexec_line+2],ax
 21373                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 21374 0000113E 2EA3[4803]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 21375                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 21376 00001142 2EA3[4C03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 21377 00001146 E86000                  	call	sum_up
 21378 00001149 26A3[D802]              	mov	[es:checksum],ax	; save the value of the sum
 21379 0000114D 31C0                    	xor	ax,ax
 21380 0000114F B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 21381 00001151 BB[4003]                	mov	bx,instexe		; es:bx -> parm block.
 21382 00001154 06                      	push	es			; save es,ds for load/exec
 21383 00001155 1E                      	push	ds			; these registers will be restored in sysinit_base.
 21384 00001156 2EFF2E[D002]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 21385                                  					; load/exec function and check sum.
 21386                                  
 21387                                  ;----------------------------------------
 21388                                  
 21389                                  ;j.k. this is the returning address from sysinit_base.
 21390                                  
 21391                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21392                                  
 21393                                  sysinitptr:				; returning far address from sysinit_base
 21394 0000115B 5E                      	pop	si			; restore si for config.sys file.
 21395 0000115C 06                      	push	es
 21396 0000115D 1E                      	push	ds
 21397 0000115E 07                      	pop	es
 21398 0000115F 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 21399 00001160 7305                            jnc     short install_exit_ret
 21400                                  
 21401 00001162 56                      	push	si			; error in loading the file for install=.
 21402 00001163 E8EA33                  	call	badload 		; es:si-> path,filename,0.
 21403 00001166 5E                      	pop	si
 21404                                  
 21405                                  	; 24/10/2022
 21406                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 21407                                  	; 11/12/2022
 21408                                  	; ds = cs
 21409                                  
 21410                                  	; 30/12/2022 - Retro DOS v4.2
 21411                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 21412                                  
 21413                                  install_exit_ret:
 21414 00001167 C3                      	retn
 21415                                  
 21416                                  ; 30/12/2022 - Retro DOS v4.2
 21417                                  %if 0
 21418                                  install_exit_ret:
 21419                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 21420                                  
 21421                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 21422                                  ;SYSINIT:1142h:
 21423                                  	mov     ah,4Dh
 21424                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 21425                                  	cmp     ah,3
 21426                                  	jz      short sysinitptr_retn
 21427                                  	call    error_line
 21428                                  	stc
 21429                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 21430                                  	retn		
 21431                                  
 21432                                  %endif ; 24/10/2022
 21433                                  
 21434                                  ; ----------------------------------------------------------------------
 21435                                  
 21436                                  ;**	ParaRound - Round Up length to paragraph multiple
 21437                                  ;
 21438                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 21439                                  ;	by 16 yielding a "length in paragraphs" value.
 21440                                  ;
 21441                                  ;	ENTRY	(ax) = byte length
 21442                                  ;	EXIT	(ax) = rounded up length in paragraphs
 21443                                  ;	USES	ax, flags
 21444                                  
 21445                                  ParaRound:
 21446 00001168 83C00F                  	add	ax,15
 21447 0000116B D1D8                    	rcr	ax,1
 21448 0000116D D1E8                    	shr	ax,1
 21449 0000116F D1E8                    	shr	ax,1
 21450 00001171 D1E8                    	shr	ax,1
 21451 00001173 C3                      	retn
 21452                                  
 21453                                  ; ----------------------------------------------------------------------
 21454                                  ; sysinit_base module.
 21455                                  ;
 21456                                  ; This module is relocated by the routine EndFile to a location in low
 21457                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 21458                                  ; that are being loaded by the "install=" command. After the EXEC call
 21459                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 21460                                  ; top of memory) to be sure that the EXECed program did not damage it.
 21461                                  ; If it did, then this module will print an error message and stop the
 21462                                  ; system. Otherwise, it returns control to SYSINIT.
 21463                                  ;
 21464                                  ;in: after relocation,
 21465                                  ;    ax = 4b00h - load and execute the program dos function.
 21466                                  ;    ds = confbot. segment of config.sys file image
 21467                                  ;    es = sysinitseg. segment of sysinit module itself.
 21468                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 21469                                  ;    es:bx = pointer to a parameter block for load.
 21470                                  ;    SI_end (byte) - offset value of end of sysinit module label
 21471                                  ;    bigsize (word) - # of word from confbot to SI_end.
 21472                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 21473                                  ;			word boundary moduler form.
 21474                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 21475                                  ;
 21476                                  ;note: sysinit should save necessary registers and when the control is back
 21477                                  
 21478                                  	; 24/10/2022
 21479                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 21480                                  sysinit_base:				
 21481 00001174 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 21482 00001179 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 21483 0000117E CD21                    	int	21h			; load/exec dos call.
 21484 00001180 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 21485 00001185 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 21486 0000118A 1F                      	pop	ds			; restore confbot seg
 21487 0000118B 07                      	pop	es			; restore sysinitseg
 21488 0000118C 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 21489                                  					; at this time,i don't have to worry about
 21490                                  					; that sysinit module has been broken or not.
 21491 0000118E E81800                  	call	sum_up			; otherwise,check if it is good.
 21492 00001191 263906[D802]            	cmp	[es:checksum],ax
 21493 00001196 740C                    	je	short sysinit_base_end
 21494                                  
 21495                                  ;	memory broken. show "memory allocation error" message and stall.
 21496                                  
 21497 00001198 B409                    	mov	ah,9
 21498 0000119A 0E                      	push	cs
 21499 0000119B 1F                      	pop	ds
 21500                                  	; 30/12/2022
 21501                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 21502                                  	;mov	dx, 102
 21503 0000119C BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 21504                                  					; 66h (for MSDOS 6.21 SYSINIT)
 21505 0000119F CD21                    	int	21h
 21506                                  		; DOS - PRINT STRING
 21507                                  		; DS:DX -> string terminated by "$"
 21508                                  
 21509                                  	; 30/12/2022 - Retro DOS v4.2
 21510                                  stall:
 21511                                  	; 24/10/2022
 21512                                  _stall: 
 21513                                  	; 11/12/2022
 21514 000011A1 F4                      	hlt 
 21515                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21516                                  	;hlt				;use HLT to minimize energy consumption
 21517 000011A2 EBFD                            jmp	short _stall
 21518                                  
 21519                                  sysinit_base_end: 
 21520 000011A4 26FF2E[D402]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 21521                                  
 21522                                  ;-------------------------------------
 21523                                  
 21524                                  sum_up:
 21525                                  
 21526                                  ;in:   es - sysinitseg.
 21527                                  ;out:  ax - result
 21528                                  ;
 21529                                  ;remark: since this routine will only check starting from "locstack" to the end of
 21530                                  ;	 sysinit segment,the data area, and the current stack area are not
 21531                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 21532                                  ;	 gaurantee to be safe.
 21533                                  ;
 21534                                  ;first sum up confbot seg.
 21535                                  
 21536 000011A9 1E                      	push	ds
 21537                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21538                                  	; (SYSINIT:12C6h)
 21539 000011AA 26A1[A102]              	mov	ax,[es:CONFBOT]
 21540                                  	; 24/10/2022
 21541                                  	;mov	ax,[es:top_of_cdss]
 21542 000011AE 8ED8                    	mov	ds,ax
 21543 000011B0 31F6                    	xor	si,si
 21544 000011B2 31C0                    	xor	ax,ax
 21545 000011B4 268B0E[CE02]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 21546                                  					; whole test better fail.
 21547 000011B9 D1E9                    	shr	cx,1			; make it a word count
 21548 000011BB 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 21549                                  sum1:
 21550 000011BD 0304                    	add	ax,[si]
 21551 000011BF 46                      	inc	si
 21552 000011C0 46                      	inc	si
 21553 000011C1 E2FA                    	loop	sum1
 21554                                  ;now,sum up sysinit module.
 21555                                  sum_sys_code:
 21556                                  	; 24/10/2022
 21557 000011C3 BEC211                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 21558                                  			    ; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 21559                                  				        ; starting after the stack.  M069
 21560                                  					;  this does not cover the possible stack code!!!
 21561                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 21562                                  	; 02/11/2022
 21563                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 21564                                  	; 30/12/2022  
 21565 000011C6 B9[104E]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 21566 000011C9 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 21567 000011CB D1E9                    	shr	cx,1
 21568                                  sum2:
 21569 000011CD 260304                  	add	ax,[es:si]
 21570 000011D0 46                      	inc	si
 21571 000011D1 46                      	inc	si
 21572 000011D2 E2F9                    	loop	sum2
 21573 000011D4 1F                      	pop	ds
 21574 000011D5 C3                      	retn
 21575                                  
 21576                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21577                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 21578                                  ; (SYSINIT:12F2h)
 21579                                  
 21580                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 21581                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h) 	
 21582 000011D6 0000                    	dw	0
 21583                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 21584                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1292h)
 21585 000011D8 0000                    	dw	0	
 21586                                  
 21587                                  mem_alloc_err_msgx:
 21588                                  
 21589                                         ;include msbio.cl4		; memory allocation error message
 21590                                  
 21591                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 21592 000011DA 0D0A                    	db	0Dh,0Ah
 21593 000011DC 4D656D6F727920616C-     	db 	'Memory allocation error $'
 21593 000011E5 6C6F636174696F6E20-
 21593 000011EE 6572726F722024     
 21594                                  
 21595                                  end_sysinit_base: ; label byte
 21596                                  	; 24/10/2022
 21597                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 21598                                  
 21599                                  ; ----------------------------------------------------------------------
 21600                                  ; Set_Buffer
 21601                                  ;
 21602                                  ;function: set buffers in the real memory.				  
 21603                                  ;	   lastly set the memhi,memlo for the next available free address.
 21604                                  ;
 21605                                  ;input:    ds:bx -> buffinfo.
 21606                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 21607                                  ;	   singlebuffersize = buffer header size + sector size		  
 21608                                  ;
 21609                                  ;output:   buffers Queue established.	       				   
 21610                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 21611                                  ; ----------------------------------------------------------------------
 21612                                  
 21613                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21614                                  	; (SYSINIT:11DCh)
 21615                                  
 21616                                  set_buffer:
 21617 000011F5 30D2                    	xor	dl,dl				; assume buffers not in HMA
 21618 000011F7 E85500                  	call	GetBufferAddr
 21619 000011FA 7402                    	jz	short set_buff_1
 21620 000011FC B201                    	mov	dl,1				; buffers in HMA
 21621                                  set_buff_1:
 21622                                  	; 25/10/2022
 21623                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 21624 000011FE 893F                    	mov	[bx],di
 21625                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 21626 00001200 8C4702                  	mov	[bx+2],es
 21627                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 21628 00001203 C747040000              	mov	word [bx+4],0
 21629                                  
 21630 00001208 89F8                    	mov	ax,di
 21631 0000120A 2E8B0E[9702]            	mov	cx,[cs:buffers]
 21632 0000120F 57                      	push	di				; remember first buffer
 21633                                  
 21634                                  ;	for each buffer
 21635                                  
 21636                                  nxt_buff:
 21637 00001210 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 21638 00001213 89C7                    	mov	di,ax
 21639 00001215 E2F9                    	loop	nxt_buff
 21640                                  
 21641 00001217 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 21642                                  
 21643 0000121C 59                      	pop	cx				; get first buffer
 21644                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 21645 0000121D 26890D                  	mov	[es:di],cx
 21646 00001220 87CF                    	xchg	cx,di
 21647                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21648                                  	; 25/10/2022
 21649 00001222 26894D02                	mov	[es:di+2],cx
 21650                                  
 21651 00001226 08D2                    	or	dl,dl				; In HMa ?
 21652 00001228 7417                    	jz	short set_buff_2		; no
 21653                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21654 0000122A C6470C01                	mov	byte [bx+12],1
 21655 0000122E 2EA1[6203]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21656                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of scratch buff is 0
 21657 00001232 C7470D0000              	mov	word [bx+13],0
 21658                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21659 00001237 89470F                  	mov	word [bx+15],ax
 21660 0000123A 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21661                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21662 0000123E 83E814                  	sub	ax,20
 21663                                  set_buff_2:
 21664 00001241 2E0106[6003]            	add	[cs:memlo],ax
 21665                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21666 00001246 2E800E[E214]02          	or	byte [cs:setdevmarkflag],2
 21667                                  	;call	round
 21668                                  	;retn
 21669                                  	; 12/12/2022
 21670 0000124C E9B630                  	jmp	round
 21671                                  
 21672                                  ; ----------------------------------------------------------------------
 21673                                  ; procedure : GetBufferAddr
 21674                                  ;
 21675                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21676                                  ;
 21677                                  ; returns in es:di the buffer adress
 21678                                  ; returns NZ if allocated in HMA
 21679                                  ; ----------------------------------------------------------------------
 21680                                  
 21681                                  	; 25/10/2022 
 21682                                  GetBufferAddr:
 21683 0000124F 53                      	push	bx
 21684 00001250 52                      	push	dx
 21685 00001251 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21686 00001255 2EF726[9702]            	mul	word [cs:buffers]
 21687                                  	;add	ax,0Fh
 21688 0000125A 83C00F                  	add	ax,15 
 21689                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21690                                  	;and	ax,~15	; 0FFF0h	; para round
 21691                                  	; 12/12/2022
 21692 0000125D 24F0                    	and	al,~15	; 0F0h
 21693 0000125F 89C3                    	mov	bx,ax
 21694 00001261 B8024A                  	mov	ax,4A02h
 21695                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21696 00001264 CD2F                    	int	2Fh
 21697 00001266 83FFFF                  	cmp	di,0FFFFh
 21698 00001269 7508                    	jne	short got_hma
 21699 0000126B BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 21700                                  	;zf=1
 21701                                  	;xor	di,di	; 25/10/2022
 21702                                  	;zf=1
 21703 0000126E 2E8E06[6203]            	mov	es,[cs:memhi]
 21704                                  got_hma:
 21705 00001273 5A                      	pop	dx
 21706 00001274 5B                      	pop	bx
 21707 00001275 C3                      	retn
 21708                                  
 21709                                  ; ----------------------------------------------------------------------
 21710                                  
 21711                                  set_buffer_info:
 21712                                  
 21713                                  ;function: set buf_link,buf_id,buf_sector
 21714                                  ;
 21715                                  ;in: es:di -> buffer header to be set.
 21716                                  ;    ax = di
 21717                                  ;
 21718                                  ;out:
 21719                                  ;    above entries set.
 21720                                  
 21721                                  	; 25/10/2022 
 21722 00001276 2EFF36[BB02]            	push	word [cs:buf_prev_off]
 21723                                  	;pop	word [es:di+buffinfo.buf_prev]
 21724 0000127B 268F4502                	pop	word [es:di+2]
 21725 0000127F 2EA3[BB02]              	mov	[cs:buf_prev_off],ax
 21726 00001283 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	; adjust ax
 21727                                  	;mov	[es:di+buffinfo.buf_next],ax
 21728 00001288 268905                  	mov	[es:di],ax
 21729                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21730 0000128B 26C74504FF00            	mov	word [es:di+4],00FFh
 21731                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21732 00001291 26C745060000            	mov	word [es:di+6],0
 21733                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21734 00001297 26C745080000            	mov	word [es:di+8],0
 21735 0000129D C3                      	retn
 21736                                  
 21737                                  ; ======================================================================
 21738                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21739                                  ; ----------------------------------------------------------------------
 21740                                  ; 27/03/2019 - Retro DOS v4.0
 21741                                  
 21742                                  ; ----------------------------------------------------------------------
 21743                                  ; ibmstack initialization routine.
 21744                                  ;
 21745                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21746                                  ;	has been modified. this initialization routine also has to
 21747                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21748                                  ;	should be set to signal that this interrupt handler is the
 21749                                  ;	first handler hooked to this interrupt vector.
 21750                                  ;	we determine this by looking at the instruction pointed by
 21751                                  ;	this vector. if it is iret, then this handler should be the
 21752                                  ;	first one. in our case, only the interrupt vector 77h is the
 21753                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21754                                  ;
 21755                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21756                                  ;	some design changes are needed to the above interrupt sharing
 21757                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21758                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21759                                  ;	interrupts would only be generated on levels 7 and 15.
 21760                                  ;	these assumptions are not true any more. we have to use the firstflag
 21761                                  ;	for every level of interrupt. we will set the firstflag on the following
 21762                                  ;	conditions:
 21763                                  ;
 21764                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21765                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21766                                  ;	 c. else if cs:ip points to an iret, then "first"
 21767                                  ;	 d. else if cs:ip points to dummy, then "first"
 21768                                  ;
 21769                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21770                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21771                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21772                                  ;	the bioses for all of the machines.
 21773                                  ;
 21774                                  ;	system design group requests bios to handle the phantom interrupts.
 21775                                  ;
 21776                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21777                                  ;	produced by the bogus adapter card even without interrupt request is
 21778                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21779                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21780                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21781                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21782                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21783                                  ;	interrupt line.
 21784                                  ;
 21785                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21786                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21787                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21788                                  ;	control. if it is the first, then the following action should be
 21789                                  ;	taken. we don't have to implement stack logic in this case.
 21790                                  ;
 21791                                  ;	to implement this logic, we rather choose a simple method.
 21792                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21793                                  ;	going to hook this interrupt vector. the reason is if the original
 21794                                  ;	vector points to "iret" and do nothing, we don't need
 21795                                  ;	to implement the stack logic for it. this will simplify implementation
 21796                                  ;	while maintaining compatibility with the old version of dos.
 21797                                  ;	this implies that in the main stack code, there might be a stack code
 21798                                  ;	that will never be used, a dead code.
 21799                                  ;
 21800                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21801                                  
 21802                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21803                                  	; (SYSINIT:1287h)
 21804                                  
 21805                                  	; 14/12/2022
 21806                                  stackinit:
 21807 0000129E 50                      	push	ax
 21808 0000129F 1E                      	push	ds
 21809 000012A0 06                      	push	es
 21810 000012A1 53                      	push	bx
 21811 000012A2 51                      	push	cx
 21812 000012A3 52                      	push	dx
 21813 000012A4 57                      	push	di
 21814 000012A5 56                      	push	si
 21815 000012A6 55                      	push	bp
 21816                                  
 21817                                  ;currently es -> stack code area
 21818                                  
 21819                                  	; 12/12/2022
 21820                                  	; ds = cs
 21821 000012A7 A1[8A02]                	mov	ax,[stack_count]
 21822 000012AA 89C1                    	mov	cx,ax  ; *!*!*  
 21823                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21824                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21825                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21826 000012AC 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21827                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21828 000012B0 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21829 000012B3 26A3[0600]              	mov	[es:stacksize],ax
 21830                                  	; 12/12/2022
 21831 000012B7 A1[8E02]                	mov	ax,[stack_addr]			; offset
 21832                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21833                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21834                                  	;mov	ax,[cs:stack_addr]  ; !!
 21835 000012BA 26A3[0800]              	mov	[es:stacks],ax
 21836                                  	; 12/12/2022
 21837 000012BE 89C5                    	mov	bp,ax ; *!*
 21838 000012C0 A1[9002]                	mov	ax,[stack_addr+2]
 21839                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21840                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21841                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21842 000012C3 26A3[0A00]              	mov	[es:stacks+2],ax
 21843                                  
 21844                                  ; initialize the data fields with the parameters
 21845                                  
 21846                                  ; "firstentry" will always be at stacks
 21847                                  
 21848                                  	;mov	bp,[es:stacks]			; get offset of stack
 21849                                  	; 12/12/2022
 21850                                  	; bp = [es:stacks] ; *!*
 21851 000012C7 26892E[0C00]            	mov	[es:firstentry],bp
 21852                                  
 21853                                  ; the stacks will always immediately follow the table entries
 21854                                  
 21855 000012CC B80800                  	mov	ax,entrysize ; 8
 21856                                  	;mov	cx,[es:stackcount]
 21857                                  	; 12/12/2022
 21858                                  	; cx = [es:stackcount] ; *!*!*
 21859 000012CF F7E1                    	mul	cx
 21860 000012D1 01E8                    	add	ax,bp
 21861 000012D3 26A3[0400]              	mov	[es:stackat],ax
 21862 000012D7 89C3                    	mov	bx,ax
 21863 000012D9 83EB02                  	sub	bx,2
 21864                                  
 21865                                  ; zero the entire stack area to start with
 21866                                  
 21867 000012DC 268B3E[0400]            	mov	di,[es:stackat]
 21868 000012E1 26A1[0600]              	mov	ax,[es:stacksize]
 21869 000012E5 F7E1                    	mul	cx
 21870 000012E7 89C1                    	mov	cx,ax
 21871 000012E9 31C0                    	xor	ax,ax
 21872 000012EB 06                      	push	es
 21873 000012EC 1F                      	pop	ds				;ds = relocated stack code seg.
 21874                                  
 21875                                  ;now, ds -> stack code area
 21876                                  
 21877 000012ED 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21878 000012F1 FC                      	cld
 21879 000012F2 F3AA                    	rep	stosb
 21880                                  
 21881 000012F4 8B0E[0200]              	mov	cx,[stackcount]
 21882                                  
 21883                                  ; loop for "count" times, building a table entry
 21884                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21885                                  ;  cx = number of entries
 21886                                  ;  es:bp => base of stacks - 2
 21887                                  ;  es:bx => first table entry
 21888                                  
 21889                                  buildloop:
 21890                                  	; 11/12/2022
 21891                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21892                                  	; 25/10/2022
 21893                                  	;mov	byte [es:bp],free
 21894                                  	; 06/07/2023
 21895 000012F8 26884600                	mov	[es:bp],al ; 0 ; free
 21896 000012FC 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21897                                  	;mov	[es:bp+1],al
 21898 00001300 26894602                	mov	[es:bp+savedsp],ax
 21899                                  	;mov	[es:bp2],ax
 21900 00001304 26894604                	mov	[es:bp+savedss],ax
 21901                                  	;mov	[es:bp+4],ax
 21902 00001308 031E[0600]              	add	bx,[stacksize]
 21903 0000130C 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21904                                  	;mov	[es:bp+6],bx
 21905 00001310 26892F                  	mov	[es:bx],bp
 21906 00001313 83C508                  	add	bp,entrysize ; 8
 21907                                  
 21908 00001316 E2E0                    	loop	buildloop
 21909                                  
 21910 00001318 83ED08                  	sub	bp,entrysize ; 8
 21911 0000131B 892E[0E00]              	mov	[lastentry],bp
 21912 0000131F 892E[1000]              	mov	[nextentry],bp
 21913                                  
 21914 00001323 1E                      	push	ds
 21915 00001324 B800F0                  	mov	ax,0F000h		;look at the model byte
 21916 00001327 8ED8                    	mov	ds,ax
 21917 00001329 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 21918 0000132E 1F                      	pop	ds
 21919 0000132F 7504                    	jne	short skip_disablenmis
 21920                                  
 21921 00001331 B007                    	mov	al,07h			; disable convertible nmis
 21922 00001333 E672                    	out	72h,al
 21923                                  
 21924                                  skip_disablenmis:
 21925 00001335 31C0                    	xor	ax,ax
 21926 00001337 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21927                                  					;ds - relocated stack code segment
 21928 00001339 FA                      	cli
 21929                                  
 21930                                  	;irp	aa,<02,08,09,70>
 21931                                  	;
 21932                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21933                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21934                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21935                                  	;mov	dx,offset int&aa	;pass where new handler is
 21936                                  	;call	new_init_loop		;adjust the vector to new handler,
 21937                                  	;				;saving pointer to original owner
 21938                                  	;endm
 21939                                  
 21940                                  stkinit_02:
 21941 0000133A BE0800                  	mov	si,02h*4 ; 8
 21942 0000133D BF[3A06]                	mov	di,INT19OLD02
 21943 00001340 BB[1200]                	mov	bx,old02
 21944 00001343 BA[1600]                	mov	dx,int02
 21945 00001346 E84901                  	call	new_init_loop
 21946                                  stkinit_08:
 21947 00001349 BE2000                  	mov	si,08h*4 ; 32
 21948 0000134C BF[3F06]                	mov	di,INT19OLD08
 21949 0000134F BB[3800]                	mov	bx,old08
 21950 00001352 BA[3C00]                	mov	dx,int08
 21951 00001355 E83A01                  	call	new_init_loop
 21952                                  stkinit_09:
 21953 00001358 BE2400                  	mov	si,09h*4 ; 36
 21954 0000135B BF[4406]                	mov	di,INT19OLD09
 21955 0000135E BB[4100]                	mov	bx,old09
 21956 00001361 BA[4500]                	mov	dx,int09
 21957 00001364 E82B01                  	call	new_init_loop
 21958                                  stkinit_70:
 21959 00001367 BEC001                  	mov	si,70h*4 ; 448
 21960 0000136A BF[6206]                	mov	di,INT19OLD70
 21961 0000136D BB[4E00]                	mov	bx,old70
 21962 00001370 BA[5200]                	mov	dx,int70
 21963 00001373 E81C01                  	call	new_init_loop
 21964                                  
 21965                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21966                                  	;
 21967                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21968                                  	;push	ds			;save relocated stack code segment
 21969                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21970                                  	;push	ds
 21971                                  	;pop	dx			;dx = segment value
 21972                                  	;	
 21973                                  	;cmp	dx,0
 21974                                  	;jz	int&aa&_first
 21975                                  	;
 21976                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21977                                  	;jz	int&aa&_first
 21978                                  	;
 21979                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21980                                  	;jz	int&aa&_not_first
 21981                                  	;
 21982                                  	;cmp	dx,0f000h		;rom bios segment
 21983                                  	;jnz	int&aa&_not_first
 21984                                  	;
 21985                                  	;push	es
 21986                                  	;push	dx
 21987                                  	;mov	dx,0f000h
 21988                                  	;mov	es,dx
 21989                                  	;cmp	bx,word ptr es:0ff01h
 21990                                         	;pop	dx
 21991                                  	;pop	es
 21992                                  	;jz	int&aa&_first
 21993                                  	;
 21994                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21995                                  	;pop	ds
 21996                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21997                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21998                                  	;mov	dx, offset int&aa	;pass where new handler is
 21999                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 22000                                  	;				;pointer to original owner.
 22001                                  	;jmp	short int&aa&_end
 22002                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 22003                                  	;pop	ds
 22004                                  ;int&aa&_end:
 22005                                  	;
 22006                                  	;endm
 22007                                  
 22008                                  stkinit_0A:
 22009 00001376 BE2800                  	mov	si,0Ah*4 ; 40
 22010                                  	
 22011                                  ; 14/12/2022
 22012                                  %if 0	
 22013                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22014                                  	push	ds
 22015                                  	
 22016                                  	lds	bx,[es:si]
 22017                                  	push	ds
 22018                                  	pop	dx
 22019                                  		
 22020                                  	cmp	dx,0
 22021                                  	je	short int_0A_first
 22022                                  	
 22023                                  	cmp	byte [bx],0CFh
 22024                                  	je	short int_0A_first
 22025                                  	
 22026                                  	cmp	word [bx+6],424Bh
 22027                                  	je	short int_0A_not_first
 22028                                  	
 22029                                  	cmp	dx,0F000h
 22030                                  	jne	short int_0A_not_first
 22031                                  	
 22032                                  	push	es
 22033                                  	push	dx
 22034                                  	mov	dx,0F000h
 22035                                  	mov	es,dx
 22036                                  	cmp	bx,[es:0FF01h]
 22037                                         	pop	dx
 22038                                  	pop	es
 22039                                  	je	short int_0A_first
 22040                                  %Endif
 22041                                  
 22042                                  	; 14/12/2022
 22043                                  	; 25/10/2022
 22044 00001379 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 22045 0000137C 730C                    	jnc	short int_0A_first
 22046                                  	
 22047                                  int_0A_not_first:
 22048                                  	; 14/12/2022
 22049                                  	; 25/10/2022
 22050                                  	;pop	ds
 22051 0000137E BF[4906]                	mov	di,INT19OLD0A
 22052 00001381 BB[5900]                	mov	bx,old0A
 22053 00001384 BA[5700]                	mov	dx,int0A
 22054 00001387 E80801                  	call	new_init_loop
 22055                                  	
 22056                                  	; 14/12/2022	
 22057                                  	;jmp	short int_0A_end
 22058                                  ;int_0A_first:
 22059                                  	; 25/10/2022
 22060                                  	;pop	ds
 22061                                  
 22062                                  	; 14/12/2022
 22063                                  int_0A_first:
 22064                                  int_0A_end:
 22065                                  
 22066                                  stkinit_0B:
 22067 0000138A BE2C00                  	mov	si,0Bh*4 ; 44
 22068                                  	
 22069                                  	; 14/12/2022
 22070                                  	; 25/10/2022
 22071 0000138D E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 22072 00001390 730C                    	jnc	short int_0B_end ; int_0B_first
 22073                                  
 22074                                  ; 14/12/2022
 22075                                  %if 0	
 22076                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22077                                  	push	ds
 22078                                  	lds	bx,[es:si]
 22079                                  	push	ds
 22080                                  	pop	dx
 22081                                  		
 22082                                  	cmp	dx,0
 22083                                  	je	short int_0B_first
 22084                                  
 22085                                  	cmp	byte [bx],0CFh
 22086                                  	je	short int_0B_first
 22087                                  	
 22088                                  	cmp	word [bx+6],424Bh
 22089                                  	je	short int_0B_not_first
 22090                                  	
 22091                                  	cmp	dx,0F000h
 22092                                  	jne	short int_0B_not_first
 22093                                  
 22094                                  	push	es
 22095                                  	push	dx
 22096                                  	mov	dx,0F000h
 22097                                  	mov	es,dx
 22098                                  	cmp	bx,[es:0FF01h]
 22099                                  	pop	dx
 22100                                  	pop	es
 22101                                  	je	short int_0B_first
 22102                                  %endif
 22103                                  
 22104                                  int_0B_not_first:
 22105                                  	; 14/12/2022
 22106                                  	; 25/10/2022
 22107                                  	;pop	ds
 22108 00001392 BF[4E06]                	mov	di,INT19OLD0B
 22109 00001395 BB[7100]                	mov	bx,old0B
 22110 00001398 BA[6F00]                	mov	dx,int0B
 22111 0000139B E8F400                  	call	new_init_loop
 22112                                  
 22113                                  	; 14/12/2022
 22114                                  	;jmp	short int_0B_end
 22115                                  ;int_0B_first:
 22116                                  	; 25/10/2022
 22117                                  	;pop	ds
 22118                                  
 22119                                  int_0B_end:
 22120                                  	
 22121                                  stkinit_0C:
 22122 0000139E BE3000                  	mov	si,0Ch*4 ; 48
 22123                                  	
 22124                                  	; 14/12/2022
 22125                                  	; 25/10/2022
 22126 000013A1 E8C300                  	call	int_xx_first_check
 22127 000013A4 730C                    	jnc	short int_0C_end ; int_0C_first
 22128                                  
 22129                                  ; 14/12/2022
 22130                                  %if 0	
 22131                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22132                                  	push	ds
 22133                                  	lds	bx,[es:si]
 22134                                  	push	ds
 22135                                  	pop	dx
 22136                                  		
 22137                                  	cmp	dx,0
 22138                                  	je	short int_0C_first
 22139                                  
 22140                                  	cmp	byte [bx],0CFh
 22141                                  	je	short int_0C_first
 22142                                  	
 22143                                  	cmp	word [bx+6],424Bh
 22144                                  	je	short int_0C_not_first
 22145                                  	
 22146                                  	cmp	dx,0F000h
 22147                                  	jne	short int_0C_not_first
 22148                                  
 22149                                  	push	es
 22150                                  	push	dx
 22151                                  	mov	dx,0F000h
 22152                                  	mov	es,dx
 22153                                  	cmp	bx,[es:0FF01h]
 22154                                  	pop	dx
 22155                                  	pop	es
 22156                                  	je	short int_0C_first
 22157                                  %endif
 22158                                  	
 22159                                  int_0C_not_first:
 22160                                  	; 14/12/2022
 22161                                  	; 25/10/2022
 22162                                  	;pop	ds
 22163 000013A6 BF[5306]                	mov	di,INT19OLD0C
 22164 000013A9 BB[8900]                	mov	bx,old0C
 22165 000013AC BA[8700]                	mov	dx,int0C
 22166 000013AF E8E000                  	call	new_init_loop
 22167                                  
 22168                                  	; 14/12/2022
 22169                                  	;jmp	short int_0C_end
 22170                                  ;int_0C_first:
 22171                                  	; 25/10/2022
 22172                                  	;pop	ds
 22173                                  
 22174                                  int_0C_end:
 22175                                  
 22176                                  stkinit_0D:
 22177 000013B2 BE3400                  	mov	si,0Dh*4 ; 52
 22178                                  
 22179                                  	; 14/12/2022	
 22180                                  	; 25/10/2022
 22181 000013B5 E8AF00                  	call	int_xx_first_check
 22182 000013B8 730C                    	jnc	short int_0D_end ; int_0D_first
 22183                                  
 22184                                  ; 14/12/2022
 22185                                  %if 0	
 22186                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22187                                  	push	ds
 22188                                  	lds	bx,[es:si]
 22189                                  	push	ds
 22190                                  	pop	dx
 22191                                  		
 22192                                  	cmp	dx,0
 22193                                  	je	short int_0D_first
 22194                                  
 22195                                  	cmp	byte [bx],0CFh
 22196                                  	je	short int_0D_first
 22197                                  	
 22198                                  	cmp	word [bx+6],424Bh
 22199                                  	je	short int_0D_not_first
 22200                                  	
 22201                                  	cmp	dx,0F000h
 22202                                  	jne	short int_0D_not_first
 22203                                  
 22204                                  	push	es
 22205                                  	push	dx
 22206                                  	mov	dx,0F000h
 22207                                  	mov	es,dx
 22208                                  	cmp	bx,[es:0FF01h]
 22209                                  	pop	dx
 22210                                  	pop	es
 22211                                  	je	short int_0D_first
 22212                                  %endif
 22213                                  	
 22214                                  int_0D_not_first:
 22215                                  	; 14/12/2022
 22216                                  	; 25/10/2022
 22217                                  	;pop	ds
 22218 000013BA BF[5806]                	mov	di,INT19OLD0D
 22219 000013BD BB[A100]                	mov	bx,old0D
 22220 000013C0 BA[9F00]                	mov	dx,int0D
 22221 000013C3 E8CC00                  	call	new_init_loop
 22222                                  
 22223                                  	; 14/12/2022
 22224                                  	;jmp	short int_0D_end
 22225                                  	; 02/11/2022
 22226                                  ;int_0D_first:
 22227                                  	;pop	ds
 22228                                  
 22229                                  int_0D_end:
 22230                                  
 22231                                  stkinit_0E:
 22232 000013C6 BE3800                  	mov	si,0Eh*4 ; 56
 22233                                  
 22234                                  	; 14/12/2022	
 22235                                  	; 25/10/2022
 22236 000013C9 E89B00                  	call	int_xx_first_check
 22237 000013CC 730C                    	jnc	short int_0E_end ; int_0E_first
 22238                                  
 22239                                  ; 14/12/2022
 22240                                  %if 0	
 22241                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22242                                  	push	ds
 22243                                  	lds	bx,[es:si]
 22244                                  	push	ds
 22245                                  	pop	dx
 22246                                  		
 22247                                  	cmp	dx,0
 22248                                  	je	short int_0E_first
 22249                                  
 22250                                  	cmp	byte [bx],0CFh
 22251                                  	je	short int_0E_first
 22252                                  	
 22253                                  	cmp	word [bx+6],424Bh
 22254                                  	je	short int_0E_not_first
 22255                                  	
 22256                                  	cmp	dx,0F000h
 22257                                  	jne	short int_0E_not_first
 22258                                  
 22259                                  	push	es
 22260                                  	push	dx
 22261                                  	mov	dx,0F000h
 22262                                  	mov	es,dx
 22263                                  	cmp	bx,[es:0FF01h]
 22264                                  	pop	dx
 22265                                  	pop	es
 22266                                  	je	short int_0E_first
 22267                                  %endif
 22268                                  	
 22269                                  int_0E_not_first:
 22270                                  	; 14/12/2022
 22271                                  	; 25/10/2022
 22272                                  	;pop	ds
 22273 000013CE BF[5D06]                	mov	di,INT19OLD0E
 22274 000013D1 BB[B900]                	mov	bx,old0E
 22275 000013D4 BA[B700]                	mov	dx,int0E
 22276 000013D7 E8B800                  	call	new_init_loop
 22277                                  
 22278                                  	; 14/12/2022
 22279                                  	;jmp	short int_0E_end
 22280                                  ;int_0E_first:
 22281                                  	; 25/10/2022
 22282                                  	;pop	ds	
 22283                                  
 22284                                  int_0E_end:
 22285                                  
 22286                                  stkinit_72:
 22287 000013DA BEC801                  	mov	si,72h*4 ; 456
 22288                                  	
 22289                                  	; 14/12/2022
 22290                                  	; 25/10/2022
 22291 000013DD E88700                  	call	int_xx_first_check
 22292 000013E0 730C                    	jnc	short int_72_end ; int_72_first
 22293                                  
 22294                                  ; 14/12/2022
 22295                                  %if 0	
 22296                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22297                                  	push	ds
 22298                                  	lds	bx,[es:si]
 22299                                  	push	ds
 22300                                  	pop	dx
 22301                                  		
 22302                                  	cmp	dx,0
 22303                                  	je	short int_72_first
 22304                                  
 22305                                  	cmp	byte [bx],0CFh
 22306                                  	je	short int_72_first
 22307                                  	
 22308                                  	cmp	word [bx+6],424Bh
 22309                                  	je	short int_72_not_first
 22310                                  	
 22311                                  	cmp	dx,0F000h
 22312                                  	jne	short int_72_not_first
 22313                                  
 22314                                  	push	es
 22315                                  	push	dx
 22316                                  	mov	dx,0F000h
 22317                                  	mov	es,dx
 22318                                  	cmp	bx,[es:0FF01h]
 22319                                  	pop	dx
 22320                                  	pop	es
 22321                                  	je	short int_72_first
 22322                                  %endif
 22323                                  	
 22324                                  int_72_not_first:
 22325                                  	; 14/12/2022
 22326                                  	; 25/10/2022
 22327                                  	;pop	ds
 22328 000013E2 BF[6706]                	mov	di,INT19OLD72
 22329 000013E5 BB[D100]                	mov	bx,old72
 22330 000013E8 BA[CF00]                	mov	dx,int72
 22331 000013EB E8A400                  	call	new_init_loop
 22332                                  
 22333                                  	; 14/12/2022
 22334                                  	;jmp	short int_72_end
 22335                                  ;int_72_first:
 22336                                  	; 25/10/2022
 22337                                  	;pop	ds
 22338                                  
 22339                                  int_72_end:
 22340                                  
 22341                                  stkinit_73:
 22342 000013EE BECC01                  	mov	si,73h*4 ; 460
 22343                                  	
 22344                                  	; 14/12/2022
 22345                                  	; 25/10/2022
 22346 000013F1 E87300                  	call	int_xx_first_check
 22347 000013F4 730C                    	jnc	short int_73_end ; int_73_first
 22348                                  
 22349                                  ; 14/12/2022
 22350                                  %if 0	
 22351                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22352                                  	push	ds
 22353                                  	lds	bx,[es:si]
 22354                                  	push	ds
 22355                                  	pop	dx
 22356                                  		
 22357                                  	cmp	dx,0
 22358                                  	je	short int_73_first
 22359                                  
 22360                                  	cmp	byte [bx],0CFh
 22361                                  	je	short int_73_first
 22362                                  	
 22363                                  	cmp	word [bx+6],424Bh
 22364                                  	je	short int_73_not_first
 22365                                  	
 22366                                  	cmp	dx,0F000h
 22367                                  	jne	short int_73_not_first
 22368                                  
 22369                                  	push	es
 22370                                  	push	dx
 22371                                  	mov	dx,0F000h
 22372                                  	mov	es,dx
 22373                                  	cmp	bx,[es:0FF01h]
 22374                                  	pop	dx
 22375                                  	pop	es
 22376                                  	je	short int_73_first
 22377                                  %endif	
 22378                                  	
 22379                                  int_73_not_first:
 22380                                  	; 14/12/2022
 22381                                  	; 25/10/2022
 22382                                  	;pop	ds
 22383 000013F6 BF[6C06]                	mov	di,INT19OLD73
 22384 000013F9 BB[E900]                	mov	bx,old73
 22385 000013FC BA[E700]                	mov	dx,int73
 22386 000013FF E89000                  	call	new_init_loop
 22387                                  
 22388                                  	; 14/12/2022
 22389                                  	;jmp	short int_73_end
 22390                                  ;int_73_first:
 22391                                  	; 25/10/2022
 22392                                  	;pop	ds
 22393                                  
 22394                                  int_73_end:
 22395                                  
 22396                                  stkinit_74:
 22397 00001402 BED001                  	mov	si,74h*4 ; 464
 22398                                  	
 22399                                  	; 14/12/2022
 22400                                  	; 25/10/2022
 22401 00001405 E85F00                  	call	int_xx_first_check
 22402 00001408 730C                    	jnc	short int_74_end ; int_74_first
 22403                                  
 22404                                  ; 14/12/2022
 22405                                  %if 0		
 22406                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22407                                  	push	ds
 22408                                  	lds	bx,[es:si]
 22409                                  	push	ds
 22410                                  	pop	dx
 22411                                  		
 22412                                  	cmp	dx,0
 22413                                  	je	short int_74_first
 22414                                  
 22415                                  	cmp	byte [bx],0CFh
 22416                                  	je	short int_74_first
 22417                                  	
 22418                                  	cmp	word [bx+6],424Bh
 22419                                  	je	short int_74_not_first
 22420                                  	
 22421                                  	cmp	dx,0F000h
 22422                                  	jne	short int_74_not_first
 22423                                  
 22424                                  	push	es
 22425                                  	push	dx
 22426                                  	mov	dx,0F000h
 22427                                  	mov	es,dx
 22428                                  	cmp	bx,[es:0FF01h]
 22429                                  	pop	dx
 22430                                  	pop	es
 22431                                  	je	short int_74_first
 22432                                  %endif
 22433                                  
 22434                                  int_74_not_first:
 22435                                  	; 14/12/2022
 22436                                  	; 25/10/2022
 22437                                  	;pop	ds
 22438 0000140A BF[7106]                	mov	di,INT19OLD74
 22439 0000140D BB[0101]                	mov	bx,old74
 22440 00001410 BA[FF00]                	mov	dx,int74
 22441 00001413 E87C00                  	call	new_init_loop
 22442                                  	
 22443                                  	; 14/12/2022
 22444                                  	;jmp	short int_74_end
 22445                                  ;int_74_first:
 22446                                  	; 25/10/2022
 22447                                  	;pop	ds
 22448                                  
 22449                                  int_74_end:
 22450                                  
 22451                                  stkinit_76:
 22452 00001416 BED801                  	mov	si,76h*4 ; 472
 22453                                  	
 22454                                  	; 14/12/2022
 22455                                  	; 25/10/2022
 22456 00001419 E84B00                  	call	int_xx_first_check
 22457 0000141C 730E                    	jnc	short int_76_end ; int_76_first
 22458                                  
 22459                                  ; 14/12/2022
 22460                                  %if 0	
 22461                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22462                                  	push	ds
 22463                                  	lds	bx,[es:si]
 22464                                  	push	ds
 22465                                  	pop	dx
 22466                                  		
 22467                                  	cmp	dx,0
 22468                                  	je	short int_76_first
 22469                                  
 22470                                  	cmp	byte [bx],0CFh
 22471                                  	je	short int_76_first
 22472                                  	
 22473                                  	cmp	word [bx+6],424Bh
 22474                                  	je	short int_76_not_first
 22475                                  	
 22476                                  	cmp	dx,0F000h
 22477                                  	jne	short int_76_not_first
 22478                                  
 22479                                  	push	es
 22480                                  	push	dx
 22481                                  	mov	dx,0F000h
 22482                                  	mov	es,dx
 22483                                  	cmp	bx,[es:0FF01h]
 22484                                  	pop	dx
 22485                                  	pop	es
 22486                                  	je	short int_76_first
 22487                                  %endif
 22488                                  	
 22489                                  int_76_not_first:
 22490                                  	; 14/12/2022
 22491                                  	; 25/10/2022
 22492                                  	;pop	ds
 22493 0000141E BF[7606]                	mov	di,INT19OLD76
 22494 00001421 BB[1901]                	mov	bx,old76
 22495 00001424 BA[1701]                	mov	dx,int76
 22496 00001427 E86800                  	call	new_init_loop
 22497                                  
 22498                                  	; 14/12/2022
 22499 0000142A EB00                    	jmp	short int_76_end
 22500                                  ;int_76_first:
 22501                                  	; 25/10/2022
 22502                                  	;pop	ds
 22503                                  
 22504                                  int_76_end:
 22505                                  
 22506                                  stkinit_77:
 22507 0000142C BEDC01                  	mov	si,77h*4 ; 476
 22508                                  	
 22509                                  	; 14/12/2022
 22510                                  	; 25/10/2022
 22511 0000142F E83500                  	call	int_xx_first_check
 22512 00001432 730C                    	jnc	short int_77_end ; int_77_first
 22513                                  
 22514                                  ; 14/12/2022
 22515                                  %if 0	
 22516                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22517                                  	push	ds
 22518                                  	lds	bx,[es:si]
 22519                                  	push	ds
 22520                                  	pop	dx
 22521                                  		
 22522                                  	cmp	dx,0
 22523                                  	je	short int_77_first
 22524                                  
 22525                                  	cmp	byte [bx],0CFh
 22526                                  	je	short int_77_first
 22527                                  	
 22528                                  	cmp	word [bx+6],424Bh
 22529                                  	je	short int_77_not_first
 22530                                  	
 22531                                  	cmp	dx,0F000h
 22532                                  	jne	short int_77_not_first
 22533                                  
 22534                                  	push	es
 22535                                  	push	dx
 22536                                  	mov	dx,0F000h
 22537                                  	mov	es,dx
 22538                                  	cmp	bx,[es:0FF01h]
 22539                                  	pop	dx
 22540                                  	pop	es
 22541                                  	je	short int_77_first
 22542                                  %endif
 22543                                  	
 22544                                  int_77_not_first:
 22545                                  	; 14/12/2022
 22546                                  	; 25/10/2022
 22547                                  	;pop	ds
 22548 00001434 BF[7B06]                	mov	di,INT19OLD77
 22549 00001437 BB[3101]                	mov	bx,old77
 22550 0000143A BA[2F01]                	mov	dx,int77
 22551 0000143D E85200                  	call	new_init_loop
 22552                                  
 22553                                  	; 14/12/2022
 22554                                  	;jmp	short int_77_end
 22555                                  ;int_77_first:
 22556                                  	; 25/10/2022
 22557                                  	;pop	ds
 22558                                  
 22559                                  int_77_end:
 22560 00001440 1E                      	push	ds
 22561 00001441 B800F0                  	mov	ax,0F000h		; look at the model byte
 22562 00001444 8ED8                    	mov	ds,ax
 22563 00001446 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 22564 0000144B 1F                      	pop	ds
 22565 0000144C 7504                    	jne	short skip_enablenmis
 22566                                  
 22567 0000144E B027                    	mov	al,27h			; enable convertible nmis
 22568 00001450 E672                    	out	72h,al
 22569                                  
 22570                                  ; 25/10/2022
 22571                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 22572                                  
 22573                                  skip_enablenmis:
 22574 00001452 FB                      	sti
 22575                                  	;;mov	ax,Bios_Data ; 70h
 22576                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22577                                  	; 21/10/2022
 22578 00001453 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22579 00001456 8ED8                    	mov	ds,ax
 22580                                  
 22581                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 22582                                  
 22583 00001458 C606[3806]01            	mov	byte [INT19SEM],1	; indicate that int 19h
 22584                                  					; initialization is complete
 22585                                  
 22586 0000145D 5D                      	pop	bp			; restore all
 22587 0000145E 5E                      	pop	si
 22588 0000145F 5F                      	pop	di
 22589 00001460 5A                      	pop	dx
 22590 00001461 59                      	pop	cx
 22591 00001462 5B                      	pop	bx
 22592 00001463 07                      	pop	es
 22593 00001464 1F                      	pop	ds
 22594 00001465 58                      	pop	ax
 22595 00001466 C3                      	retn
 22596                                  
 22597                                  ; 14/12/2022
 22598                                  ; ----------------------------------------------------------------------
 22599                                  
 22600                                  	; 14/12/2022
 22601                                  	; 25/10/2022
 22602                                  ;%if 0
 22603                                  	; 27/03/2019 - Retro DOS v4.0
 22604                                  int_xx_first_check:
 22605 00001467 1E                      	push	ds
 22606 00001468 26C51C                  	lds	bx,[es:si]
 22607 0000146B 1E                      	push	ds
 22608 0000146C 5A                      	pop	dx
 22609                                  		
 22610 0000146D 83FA00                  	cmp	dx,0
 22611 00001470 741E                    	je	short int_xx_first
 22612                                  	
 22613 00001472 803FCF                  	cmp	byte [bx],0CFh
 22614 00001475 7419                    	je	short int_xx_first
 22615                                  	
 22616 00001477 817F064B42              	cmp	word [bx+6],424Bh
 22617 0000147C 7411                    	je	short int_xx_not_first
 22618                                  	
 22619 0000147E 81FA00F0                	cmp	dx,0F000h
 22620 00001482 750B                    	jne	short int_xx_not_first
 22621                                  
 22622 00001484 06                      	push	es
 22623                                  	;push	dx
 22624                                  	;mov	dx,0F000h
 22625 00001485 8EC2                    	mov	es,dx
 22626 00001487 263B1E01FF              	cmp	bx,[es:0FF01h]
 22627                                        	;pop	dx
 22628 0000148C 07                      	pop	es
 22629 0000148D 7401                    	je	short int_xx_first
 22630                                  
 22631                                  int_xx_not_first:
 22632 0000148F F9                      	stc
 22633                                  int_xx_first:
 22634 00001490 1F                      	pop	ds
 22635 00001491 C3                      	retn
 22636                                  
 22637                                  ;%endif
 22638                                  
 22639                                  ; ----------------------------------------------------------------------
 22640                                  ; 27/03/2019 - Retro DOS v4.0
 22641                                  
 22642                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22643                                  ; (SYSINIT:1610h)
 22644                                  
 22645                                  new_init_loop:
 22646                                  
 22647                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 22648                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22649                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22650                                  ;	di=offset value of int19old&aa variable in bios.
 22651                                  ;	es=zero, segid of vector table
 22652                                  ;	ds=relocated stack code segment
 22653                                  
 22654 00001492 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22655 00001495 8907                    	mov	[bx],ax			; to original owner in ds
 22656 00001497 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22657 0000149B 894702                  	mov	[bx+2],ax		; to original owner in ds
 22658                                  
 22659 0000149E 1E                      	push	ds
 22660                                  	;;mov	ax,Bios_Data ; 70h
 22661                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22662                                  	; 21/10/2022
 22663 0000149F B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22664 000014A2 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22665 000014A4 268B04                  	mov	ax,[es:si]		;int 19 handler
 22666 000014A7 8905                    	mov	[di],ax
 22667 000014A9 268B4402                	mov	ax,[es:si+2]
 22668 000014AD 894502                  	mov	word [di+2],ax
 22669 000014B0 1F                      	pop	ds
 22670                                  
 22671 000014B1 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22672 000014B4 268C5C02                	mov	[es:si+2],ds
 22673 000014B8 C3                      	retn
 22674                                  
 22675                                  ; End of STACK initialization routine
 22676                                  ; ----------------------------------------------------------------------
 22677                                  
 22678                                  ; ----------------------------------------------------------------------
 22679                                  ;set the devmark for mem command.
 22680                                  ;in: [memhi] - the address to place devmark
 22681                                  ;    [memlo] = 0
 22682                                  ;    al = id for devmark_id
 22683                                  ;out: devmark established.
 22684                                  ;     the address saved in cs:[devmark_addr]
 22685                                  ;     [memhi] increase by 1.
 22686                                  ; ----------------------------------------------------------------------
 22687                                  
 22688                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22689                                  ; (SYSINIT:1637h)
 22690                                  
 22691                                  setdevmark:
 22692                                  
 22693 000014B9 06                      	push	es
 22694 000014BA 51                      	push	cx
 22695                                  
 22696 000014BB 2E8B0E[6203]            	mov	cx,[cs:memhi]
 22697 000014C0 2E890E[E014]            	mov	[cs:devmark_addr],cx
 22698 000014C5 8EC1                    	mov	es,cx
 22699                                  	; 25/10/2022
 22700                                  	;mov	[es:devmark.id],al
 22701 000014C7 26A20000                	mov	[es:0],al
 22702 000014CB 41                      	inc	cx
 22703                                  	;mov	[es:devmark.seg],cx
 22704 000014CC 26890E0100              	mov	[es:1],cx
 22705                                  
 22706 000014D1 59                      	pop	cx
 22707 000014D2 07                      	pop	es
 22708 000014D3 2EFF06[6203]            	inc	word [cs:memhi]
 22709 000014D8 C3                      	retn
 22710                                  
 22711                                  ; ----------------------------------------------------------------------
 22712                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22713                                  ; ----------------------------------------------------------------------
 22714                                  ; 27/03/2019 - Retro DOS v4.0
 22715                                  
 22716                                  ;MULTI_CONFIG	equ 1
 22717                                  
 22718                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22719                                                                          ; allocation strategy call
 22720                                  
 22721                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22722                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22723                                  
 22724                                  default_filenum equ 8
 22725                                  
 22726                                  ;stacksw	equ true		; include switchable hardware stacks
 22727                                  
 22728                                  ; external variable defined in ibmbio module for multi-track
 22729                                  
 22730                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22731                                  					; it on after handling config.sys file as a
 22732                                  					; default value,if multrk_flag = multrk_off1.
 22733                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22734                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22735                                  
 22736                                  ; if stacksw
 22737                                  
 22738                                  ; internal stack parameters
 22739                                  
 22740                                  ;entrysize	equ 8
 22741                                  
 22742                                  ;mincount	equ 8
 22743                                  ;defaultcount	equ 9
 22744                                  ;maxcount	equ 64
 22745                                  
 22746                                  ;minsize 	equ 32
 22747                                  ;defaultsize	equ 128
 22748                                  ;maxsize 	equ 512
 22749                                  
 22750                                  DOS_FLAG_OFFSET	equ 86h
 22751                                  
 22752                                  ;ifdef MULTI_CONFIG
 22753                                  ;
 22754                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22755                                  ;   may be loaded as a dword ptr
 22756                                  
 22757                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 22758                                  ; 25/10/2022
 22759 000014D9 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 22760                                                 				;  a scratch env, this is its length
 22761 000014DB 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 22762                                                     			;  segment of work area
 22763                                  
 22764 000014DD 00                      config_cmd:	db  0  			; current config cmd
 22765                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 22766 000014DE 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 22767                                  
 22768                                  ;endif ; MULTI_CONFIG
 22769                                  
 22770 000014DF 00                      multdeviceflag:	db  0
 22771                                  
 22772 000014E0 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22773                                  
 22774 000014E2 00                      setdevmarkflag: db  0			;flag used for devmark
 22775                                  
 22776                                  ; 30/12/2022
 22777                                  ; 12/12/2022
 22778 000014E3 00                      driver_units:	db  0			;total unitcount for driver
 22779                                  
 22780                                  ; 12/12/2022
 22781                                  ;ems_stub_installed:
 22782                                  ;		db  0
 22783                                  
 22784                                  ; 12/12/2022	
 22785                                  ;align 2
 22786                                  
 22787                                  badparm_ptr:	; label	dword
 22788 000014E4 0000                    badparm_off:	dw  0
 22789 000014E6 0000                    badparm_seg:	dw  0
 22790                                  
 22791                                  ;******************************************************************************
 22792                                  ;take care of config.sys file.
 22793                                  ;system parser data and code.
 22794                                  ;******************************************************************************
 22795                                  
 22796                                  ;*******************************************************************
 22797                                  ; parser options set for msbio sysconf module
 22798                                  ;*******************************************************************
 22799                                  ;
 22800                                  ;**** default assemble swiches definition **************************
 22801                                  
 22802                                  ;farsw	equ 0		; near call expected
 22803                                  ;datesw	equ 0		; check date format
 22804                                  ;timesw	equ 0		; check time format
 22805                                  ;filesw	equ 1		; check file specification
 22806                                  ;capsw	equ 0		; perform caps if specified
 22807                                  ;cmpxsw	equ 0		; check complex list
 22808                                  ;numsw	equ 1		; check numeric value
 22809                                  ;keysw	equ 0		; support keywords
 22810                                  ;swsw	equ 1		; support switches
 22811                                  ;val1sw	equ 1		; support value definition 1
 22812                                  ;val2sw	equ 0		; support value definition 2
 22813                                  ;val3sw	equ 1		; support value definition 3
 22814                                  ;drvsw	equ 1		; support drive only format
 22815                                  ;qussw	equ 0		; support quoted string format
 22816                                  
 22817                                  ; psdata_seg equ cs
 22818                                  
 22819                                  	;.xlist
 22820                                  	;include parse.asm		;together with psdata.inc
 22821                                  	;.list
 22822                                  
 22823                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22824                                  ; ======================================================================
 22825                                  ; 27/03/2019 - Retro DOS v4.0
 22826                                  
 22827                                  ; 30/03/2019
 22828                                  ; VERSION.INC (MSDOS 6.0) 
 22829                                  ; Set DBCS Blank constant
 22830                                  
 22831                                  ; ifndef DBCS
 22832                                  DB_SPACE EQU 2020h
 22833                                  DB_SP_HI EQU 20h
 22834                                  DB_SP_LO EQU 20h
 22835                                  ; else
 22836                                  
 22837                                  ;*******************************************************************
 22838                                  ; Parser include file
 22839                                  ;*******************************************************************
 22840                                  
 22841                                  ;**** Equation field
 22842                                  ;-------- Character code definition
 22843                                  
 22844                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22845                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22846                                  _$P_Period	   equ	"."             ;AN020;
 22847                                  _$P_Slash	   equ	"/"             ;AN020;
 22848                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22849                                  _$P_Comma	   equ	","             ;AN000;
 22850                                  _$P_Switch	   equ	"/"             ;AN000;
 22851                                  _$P_Keyword	   equ	"="             ;AN000;
 22852                                  _$P_Colon	   equ	":"             ;AN000;
 22853                                  _$P_Plus 	   equ	"+"             ;AN000;
 22854                                  _$P_Minus	   equ	"-"             ;AN000;
 22855                                  _$P_Rparen	   equ	")"             ;AN000;
 22856                                  _$P_Lparen	   equ	"("             ;AN000;
 22857                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22858                                  _$P_DQuote	   equ	'"'             ;AN000;
 22859                                  _$P_NULL 	   equ	0		;AN000;
 22860                                  _$P_TAB		   equ	9		;AN000;
 22861                                  _$P_CR		   equ	0Dh		;AN000;
 22862                                  _$P_LF		   equ	0Ah		;AN000;
 22863                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22864                                  
 22865                                  ;-------- Masks
 22866                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22867                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22868                                  
 22869                                  ;-------- DOS function call related equs
 22870                                  
 22871                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22872                                  					; by this call, following information
 22873                                  struc _$P_CDI	
 22874 00000000 ????                     .DateF: resw 1
 22875 00000002 ??????????               .Money: resb 5
 22876 00000007 ????                     .1000:	 resb 2
 22877 00000009 ????                     .Dec:	 resb 2
 22878 0000000B ????                     .DateS: resb 2
 22879 0000000D ????                     .TimeS: resb 2
 22880 0000000F ??                          	 resb 1
 22881 00000010 ??                      	 resb 1
 22882 00000011 ??                       .TimeF: resb 1	 
 22883 00000012 ????????                	 resw 2
 22884 00000016 ????                    	 resb 2
 22885 00000018 <res Ah>                	 resw 5
 22886                                   .size:
 22887                                  endstruc
 22888                                  
 22889                                  _$P_Date_MDY	   equ	0		;AN000;
 22890                                  _$P_Date_DMY	   equ	1		;AN000;
 22891                                  _$P_Date_YMD	   equ	2		;AN000;
 22892                                  ;-------------
 22893                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22894                                  					;AN000; DS:SI will points to DBCS EV
 22895                                  ;-------------
 22896                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22897                                  					;AN000; following parameters are set
 22898                                  					;AN000; to get casemap table.
 22899                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22900                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22901                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22902                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22903                                  					; By this call following information
 22904                                  					; is returned.
 22905                                  struc _$P_DOS_TBL
 22906 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22907 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22908 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22909                                  endstruc
 22910                                  
 22911                                  ; ----------------------------------------------------------------------------
 22912                                  ; PARMS 	LABEL	BYTE
 22913                                  ;		DW	PARMSX
 22914                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22915                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22916                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22917                                  ;					; TYPICAL ARE ";", "="
 22918                                  ;					; "," & WHITESPACE ALWAYS
 22919                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22920                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22921                                  ; ----------------------------------------------------------------------------
 22922                                  
 22923                                  ;-------------------------------- PARMS block structure
 22924                                  struc _$P_PARMS_Blk
 22925 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22926 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22927 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22928                                  endstruc
 22929                                  
 22930                                  _$P_Len_PARMS	   equ	4		;AN000;
 22931                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22932                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22933                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22934                                  
 22935                                  ; ----------------------------------------------------------------------------
 22936                                  ; PARMSX	LABEL	BYTE
 22937                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22938                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22939                                  ;		:			; REPEATS maxp-1 TIMES
 22940                                  ;		DB	maxs		; # OF SWITCHES
 22941                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22942                                  ;		:			; REPEATS maxs-1 TIMES
 22943                                  ;		DB	maxk		; # OF KEYWORD
 22944                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22945                                  ;		:			; REPEATS maxk-1 TIMES
 22946                                  ; ----------------------------------------------------------------------------
 22947                                  
 22948                                  ;-------------------------------- PARMSX block structure
 22949                                  struc _$P_PARMSX_Blk		;AN000;
 22950 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22951 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22952 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22953                                  endstruc
 22954                                  
 22955                                  ; ----------------------------------------------------------------------------
 22956                                  ; << Control field definition  >>
 22957                                  ;
 22958                                  ;
 22959                                  ;CONTROL   LABEL   BYTE
 22960                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22961                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22962                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22963                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22964                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22965                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22966                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22967                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22968                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22969                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22970                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22971                                  ;				   ; 0002H=REPEATS ALLOWED
 22972                                  ;				   ; 0001H=OPTIONAL
 22973                                  ;	   DW	   FUNCTION_FLAGS
 22974                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22975                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22976                                  ;				   ; 0010H=REMOVE ":" AT END
 22977                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22978                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22979                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22980                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22981                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22982                                  ;	   :
 22983                                  ;
 22984                                  ;Note:
 22985                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22986                                  ;      DATE bit simalteniously.
 22987                                  ;
 22988                                  ;      The parser examins each bit along with the following priority.
 22989                                  ;
 22990                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22991                                  ;      FILE SPEC -> SIMPLE STRING.
 22992                                  ;
 22993                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22994                                  ;      in the result buffer is capitalized.
 22995                                  ;
 22996                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22997                                  ;
 22998                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22999                                  ;      switch, for example, '/A', then STRING points to;
 23000                                  ;
 23001                                  ;			DB    1 	; number of following synonyms
 23002                                  ;			DB   '/A',0
 23003                                  ;
 23004                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 23005                                  ;
 23006                                  ;			DB    1 	; number of following synonyms
 23007                                  ;			DB   'CODEPAGE=',0
 23008                                  ;
 23009                                  ;    - "..." must consist of upper case characters only because the parser
 23010                                  ;      performs pattern matching after converting input to upper case (by
 23011                                  ;      using the current country upper case table)
 23012                                  ;
 23013                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 23014                                  ;      example /A and /B, the format will be;
 23015                                  ;
 23016                                  ;			DB    2 	; number of following synonyms
 23017                                  ;			DB    '/A',0
 23018                                  ;			DB    '/B',0
 23019                                  ; ----------------------------------------------------------------------------
 23020                                  
 23021                                  ;**** Match_Flags
 23022                                  
 23023                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 23024                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 23025                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 23026                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 23027                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 23028                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 23029                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 23030                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 23031                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 23032                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 23033                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 23034                                  _$P_Optional	   equ	0001h		;AN000; Optional
 23035                                  
 23036                                  ;**** Function flags
 23037                                  
 23038                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 23039                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 23040                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 23041                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 23042                                  
 23043                                  ;-------------------------------- Control block structure
 23044                                  struc _$P_Control_Blk
 23045 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 23046 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 23047 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 23048 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 23049 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 23050 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 23051                                  endstruc
 23052                                  
 23053                                  ; ----------------------------------------------------------------------------
 23054                                  ; << Value List Definition >>
 23055                                  ;
 23056                                  ;VALUES 	LABEL	BYTE
 23057                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 23058                                  ;	     +-
 23059                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 23060                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 23061                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 23062                                  ;	     |	:
 23063                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 23064                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 23065                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 23066                                  ;	     |	:
 23067                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 23068                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 23069                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 23070                                  ;	     +-	:
 23071                                  ;
 23072                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 23073                                  ;
 23074                                  ;Note:
 23075                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 23076                                  ;      when no choice lists are provided.
 23077                                  ;
 23078                                  ;    - STRING must consist of upper case characters only because the parser
 23079                                  ;      performs pattern matching after converting input to upper case (by
 23080                                  ;      using the current country upper case table)
 23081                                  ; ----------------------------------------------------------------------------
 23082                                  
 23083                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 23084                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 23085                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 23086                                  _$P_nval_String	   equ	3		;AN000; string list ID
 23087                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 23088                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 23089                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 23090                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 23091                                  
 23092                                  struc _$P_Val_List
 23093 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 23094 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 23095 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 23096 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 23097 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 23098                                  endstruc
 23099                                  
 23100                                  ; ----------------------------------------------------------------------------
 23101                                  ; << Result Buffer Definition  >>
 23102                                  ;
 23103                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 23104                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 23105                                  ;						;	1=NUMBER, 2=LIST INDEX,
 23106                                  ;						;	3=STRING, 4=COMPLEX,
 23107                                  ;						;	5=FILESPEC, 6=DRIVE
 23108                                  ;						;	7=DATE, 8=TIME
 23109                                  ;						;	9=QUOTED STRING
 23110                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 23111                                  ;
 23112                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 23113                                  ;
 23114                                  ;            +-
 23115                                  ;	    | DD	n			; VALUE IF NUMBER
 23116                                  ;	    | or
 23117                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 23118                                  ;	    |					; (ES presents Segment address)
 23119                                  ;	    | or
 23120                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 23121                                  ;	    | or
 23122                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 23123                                  ;	    | or
 23124                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 23125                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 23126                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 23127                                  ;	    | or
 23128                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 23129                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 23130                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 23131                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 23132                                  ;	    +-
 23133                                  ;
 23134                                  ;
 23135                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 23136                                  ;      list.
 23137                                  ;
 23138                                  ;      YEAR: If the input value for the year is less than 100, parser
 23139                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 23140                                  ;	     the year value, he returns 1987.
 23141                                  ; ----------------------------------------------------------------------------
 23142                                  
 23143                                  ;-------------------------------- Result block structure
 23144                                  struc _$P_Result_Blk
 23145 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 23146 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 23147 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 23148 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 23149                                  endstruc
 23150                                  
 23151                                  ;--------------------------------
 23152                                  ;**** values for the type field in the result block
 23153                                  
 23154                                  _$P_EOL		   equ	0		;AN000; End of line
 23155                                  _$P_Number	   equ	1		;AN000; Number
 23156                                  _$P_List_Idx	   equ	2		;AN000; List Index
 23157                                  _$P_String	   equ	3		;AN000; String
 23158                                  _$P_Complex	   equ	4		;AN000; Complex
 23159                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 23160                                  _$P_Drive	   equ	6		;AN000; Drive
 23161                                  _$P_Date_F	   equ	7		;AN000; Date
 23162                                  _$P_Time_F	   equ	8		;AN000; Time
 23163                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 23164                                  
 23165                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 23166                                  
 23167                                  ;**** Return code
 23168                                  ;
 23169                                  ; following return code will be returned in the AX register.
 23170                                  
 23171                                  _$P_No_Error	   equ	0		;AN000; No error
 23172                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 23173                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 23174                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 23175                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 23176                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 23177                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 23178                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 23179                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 23180                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 23181                                  
 23182                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 23183                                  
 23184                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 23185                                  
 23186                                  ;********************** Local Data *************************************
 23187 000014E8 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 23188 000014EA 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 23189 000014EC 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 23190 000014EE 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 23191 000014F0 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 23192 000014F1 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 23193 000014F3 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 23194 000014F5 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 23195                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 23196                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 23197                                  
 23198                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 23199                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 23200                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 23201                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 23202                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 23203                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 23204                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 23205                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 23206                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 23207                                  
 23208                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 23209                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 23210                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 23211                                  
 23212 000014F7 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 23213 000014F9 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 23214 000014FB 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 23215 000014FD 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 23216                                  
 23217 000014FF 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 23218                                  _$P_STRING_BUF_END equ	$		;AN000;
 23219                                  
 23220                                  ; 25/10/2022
 23221                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 23222                                  
 23223 0000157F FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 23224 00001580 0000                    		   dw	0		;AN000; offset	of char case map table
 23225 00001582 0000                    		   dw	0		;AN000; segment of char case map table
 23226                                  ; 25/10/2022
 23227                                  ;IF CAPSW
 23228                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 23229                                  ;		   dw	0		;AN000; offset	of file case map table
 23230                                  ;		   dw	0		;AN000; segment of file case map table
 23231                                  ;ENDIF
 23232                                  
 23233                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 23234                                  ;
 23235                                  
 23236                                  ;M029
 23237                                  ;!!!WARNING!!!
 23238                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 23239                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 23240                                  ;changes need to be made in SYSPARSE
 23241                                  
 23242                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 23243                                  
 23244                                  ; 25/10/2022
 23245                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 23246                                  
 23247 00001584 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 23248                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 23249                                  
 23250                                  ;ENDIF					;AN000;(of FileSW)
 23251                                  
 23252                                  ; delimiter parsing
 23253                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 23254                                  _$P_period_only	   equ	02h		;AN032; check only for period
 23255                                  
 23256                                  ;filespec error flag
 23257 0000158D 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 23258                                  					;AN033;  was detected.
 23259                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 23260                                  
 23261                                  
 23262                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 23263                                  ; ======================================================================
 23264                                  ; 27/03/2019 - Retro DOS v4.0
 23265                                  
 23266                                  ;***********************************************************************
 23267                                  ; SysParse;
 23268                                  ;
 23269                                  ;  Function : Parser Entry
 23270                                  ;
 23271                                  ;  Input: DS:SI -> command line
 23272                                  ;	  ES:DI -> parameter block
 23273                                  ;	  cs -> psdata.inc
 23274                                  ;	  CX = operand ordinal
 23275                                  ;
 23276                                  ;	  Note:  ES is the segment containing all the control blocks defined
 23277                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 23278                                  ;		 is in DS.
 23279                                  ;
 23280                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 23281                                  ;		    invalid value list. But this parser does NOT implement
 23282                                  ;		    this feature. Therefore CY always zero.
 23283                                  ;
 23284                                  ;	   CY = 0   AX = return code
 23285                                  ;		    BL = terminated delimiter code
 23286                                  ;		    CX = new operand ordinal
 23287                                  ;		    SI = set past scaned operand
 23288                                  ;		    DX = selected result buffer
 23289                                  ;
 23290                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 23291                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 23292                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 23293                                  ;
 23294                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 23295                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 23296                                  ;
 23297                                  ;-------- Modification History -----------------------------------------
 23298                                  ;
 23299                                  ;  4/04/87 : Created by K. K,
 23300                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 23301                                  ;	   : JMP SHORT assemble error (tm02)
 23302                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 23303                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 23304                                  ;	     DateSW equ 1)	      (tm04)
 23305                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 23306                                  ;				      (tm05) in PSDATA.INC
 23307                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 23308                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 23309                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 23310                                  ;	     value-list block	      (tm07)
 23311                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 23312                                  ;	     switch (keyword) or not. If there is, backup si for next call
 23313                                  ;	     (tm08)
 23314                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 23315                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 23316                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 23317                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 23318                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 23319                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 23320                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 23321                                  ;					  (tm12)
 23322                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 23323                                  ;					  (tm13)
 23324                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 23325                                  ;					  (tm14)
 23326                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 23327                                  ;					  (tm15)
 23328                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 23329                                  
 23330                                  ;  7/24/87 : Quoted strings being returned with quotes.
 23331                                  
 23332                                  ;  7/28/87 : Kerry S (;AN018;)
 23333                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 23334                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 23335                                  ;	     affected: _$P_Chk_SW_Control.
 23336                                  
 23337                                  ;  7/29/87 : Kerry S (;AN019;)
 23338                                  ;	     Now allow the optional bit in match flags for switches.  This
 23339                                  ;	     allows the switch to be encountered with a value or without a
 23340                                  ;	     value and no error is returned.
 23341                                  ;
 23342                                  
 23343                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 23344                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 23345                                  ;	     within a date response, instead of checking just for the one
 23346                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 23347                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 23348                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 23349                                  
 23350                                  ;  9/1/87  : Kerry S (;AN021)
 23351                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 23352                                  ;	     the command line with the string in the control block the
 23353                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 23354                                  ;	     on the command line and assuming a match.	This allowed a shorter
 23355                                  ;	     string on the command line than in the synonym list in the control
 23356                                  ;	     block.  I put in a test for a null in the control block so the
 23357                                  ;	     string in the control block must be the same length as the string
 23358                                  ;	     preceeding the colon or equal on the command line.
 23359                                  
 23360                                  ;  8/28/87 : Kerry S (;AN022;)
 23361                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 23362                                  ;	     problems for people who included it themselves in a segment other
 23363                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 23364                                  ;	     segment.
 23365                                  
 23366                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 23367                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 23368                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 23369                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 23370                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 23371                                  ;	     BL be used if TIME is being parsed.
 23372                                  
 23373                                  ;  9/24/87 : Ed K
 23374                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 23375                                  ;	     invocations with their normally expanded code; made comments
 23376                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 23377                                  
 23378                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 23379                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 23380                                  ;	     pointed to by non-existant CONTROL.
 23381                                  
 23382                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 23383                                  ;	     A quoted text string can be framed only by double quote.  Remove
 23384                                  ;	     support to frame quoted text string with single quote.
 23385                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 23386                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 23387                                  ;	     single quote in PROC prologues are left as is for history reasons.
 23388                                  
 23389                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 23390                                  ;	     quote chars within a quoted string is supposed to be reported as
 23391                                  ;	     one quote character, but is reported as two quotes.  This changed
 23392                                  ;	     two instructions in PROC _$P_Quoted_Str.
 23393                                  
 23394                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 23395                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 23396                                  
 23397                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 23398                                  
 23399                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 23400                                  ;	     psdata buffer should have cs.
 23401                                  
 23402                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 23403                                  ;	     positional missing.
 23404                                  
 23405                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 23406                                  ;	     as a line delimiter, should use carriage return.
 23407                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 23408                                  
 23409                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 23410                                  
 23411                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 23412                                  ;	     endless loop since SI is returned still pointing to start
 23413                                  ;	     of that parm.
 23414                                  
 23415                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 23416                                  ;	     Vector to returned string has CS instead of cs, but
 23417                                  ;	     when tried to fix it on previous version, changed similar
 23418                                  ;	     but wrong place.
 23419                                  
 23420                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 23421                                  ;	     delimiters between hours, minutes, seconds for time. And period
 23422                                  ;	     and comma are valid delimiters between seconds and 100th second.
 23423                                  
 23424                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 23425                                  ;	     in a filespec, then flag an error.
 23426                                  
 23427                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 23428                                  ;	     indexed off of the cs equate instead of the DS register.
 23429                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 23430                                  ;  -->	     local parser data. Why were some references to local data changed
 23431                                  ;	     to do this before, but not all ?????
 23432                                  
 23433                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 23434                                  
 23435                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 23436                                  ;
 23437                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 23438                                  
 23439                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 23440                                  
 23441                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 23442                                  ;	     separator in TIME before hundredths field.
 23443                                  ;
 23444                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 23445                                  ;			strings as keywords.
 23446                                  ;
 23447                                  ;***********************************************************************
 23448                                  
 23449                                  ;IF FarSW				;AN000;(Check if need far return)
 23450                                  ;SysParse proc far			;AN000;
 23451                                  ;ELSE					;AN000;
 23452                                  ;SysParse proc near			;AN000;
 23453                                  ;ENDIF					;AN000;(of FarSW)
 23454                                  
 23455                                  ; 27/03/2019 - Retro DOS v4.0
 23456                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 23457                                  
 23458                                  ; 25/10/2022 - Retro DOS v4.0
 23459                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 23460                                  
 23461                                  SysParse:
 23462 0000158E 2EC706[F514]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 23463 00001595 FC                      	cld				;AN000; confirm forward direction
 23464 00001596 2E890E[E814]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 23465 0000159B 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 23466 000015A2 2EC706[FD14]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 23467                                  
 23468 000015A9 2EC706[EE14]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 23469                                  
 23470                                  ;M029 -- Begin changes
 23471                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 23472                                  ;entry to SysParse. This is in the non-checksum region and any program that
 23473                                  ;corrupts this table but does not corrupt the checksum region will leave
 23474                                  ;command.com parsing in an inconsistent state.
 23475                                  ; NB: The special characters string has been hardcoded here. If any change
 23476                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 23477                                  
 23478                                  ;IF FileSW + DrvSW
 23479 000015B0 2EC706[8415]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 23480 000015B7 2EC706[8615]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 23481 000015BE 2EC706[8815]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 23482 000015C5 2EC706[8A15]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 23483                                  ;ENDIF
 23484                                  
 23485                                  ;M029 -- End of changes
 23486                                  
 23487 000015CC E89606                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 23488 000015CF 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 23489                                  ;--------------------------- End of Line
 23490 000015D1 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 23491 000015D4 53                      	push	bx			;AN000;
 23492                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 23493                                  					;AN000; Get the PARMSX address to
 23494 000015D5 268B1D                  	mov	bx,[es:di]
 23495                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 23496                                  					;AN000; check ORDINAL to see if the minimum
 23497 000015D8 263A0F                  	cmp	cl,[es:bx]	
 23498 000015DB 7303                    	jae	short _$P_Fin		;AN000; positional found.
 23499                                  
 23500 000015DD B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 23501                                  _$P_Fin: 				;AN000;
 23502 000015E0 5B                      	pop	bx			;AN000;
 23503 000015E1 E91F01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 23504                                  ;---------------------------
 23505                                  _$P_Start:				;AN000;
 23506 000015E4 2E8936[F714]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 23507 000015E9 53                      	push	bx			;AN000; quoted string or file spec.
 23508 000015EA 57                      	push	di			;AN000;
 23509 000015EB 55                      	push	bp			;AN000;
 23510                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 23511                                  	; 02/11/2022
 23512 000015EC 8D1E[FF14]              	lea	bx,[_$P_STRING_BUF]
 23513 000015F0 2EF606[F614]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 23514 000015F6 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 23515                                  
 23516                                  _$P_Pack_Loop:				;AN000;
 23517 000015F8 AC                      	lodsb				;AN000; Pick a operand from buffer
 23518 000015F9 E80E07                  	call	_$P_Chk_Switch		;AN000; Check switch character
 23519 000015FC 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 23520                                  
 23521 000015FE E88606                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 23522 00001601 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 23523                                  
 23524 00001603 E8B606                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 23525 00001606 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 23526                                  
 23527 00001608 2EF606[F614]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 23528                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 23529 0000160E 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 23530                                  
 23531 00001610 E85206                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 23532 00001613 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 23533                                  
 23534                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 23535 00001615 2EF606[F614]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 23536 0000161B 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 23537                                  
 23538 0000161D 4E                      	dec	si			;AN000; (tm08)
 23539 0000161E EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 23540                                  
 23541                                  _$P_PL01:				;AN000;
 23542 00001620 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 23543 00001623 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 23544 00001625 7506                    	jne	short _$P_PL00 		;AN000; then
 23545                                  
 23546 00001627 2E800E[F614]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 23547                                  _$P_PL00:				;AN000;
 23548 0000162D 43                      	inc	bx			;AN000; ready to see next byte
 23549 0000162E E8F206                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 23550 00001631 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 23551                                  
 23552 00001633 AC                      	lodsb				;AN000; if yes, store
 23553 00001634 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 23554 00001637 43                      	inc	bx			;AN000; update pointer
 23555 00001638 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 23556                                  
 23557                                  _$P_Pack_End_BY_EOL:			;AN000;
 23558 0000163A 4E                      	dec	si			;AN000; backup si pointer
 23559                                  _$P_Pack_End:				;AN000;
 23560 0000163B 2E8936[EC14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 23561 00001640 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 23562 00001644 2E891E[FB14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 23563                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 23564 00001649 268B1D                  	mov	bx,[es:di]
 23565                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 23566                                  	; 02/11/2022
 23567 0000164C 8D36[FF14]              	lea	si,[_$P_STRING_BUF]
 23568 00001650 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 23569 00001654 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 23570                                  
 23571 00001656 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 23572 0000165A 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 23573                                  
 23574 0000165C 2EF606[F614]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 23575 00001662 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 23576                                  
 23577                                  _$P_Positional_Manager:			;AN000; else process as positional
 23578 00001664 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23579 00001668 30E4                    	xor	ah,ah			;AN000; ax = maxp
 23580 0000166A 2E3906[E814]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 23581 0000166F 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 23582                                  
 23583 00001671 2EA1[E814]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 23584 00001675 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 23585 00001677 43                      	inc	bx			;AC035; add '2' to
 23586 00001678 43                      	inc	bx			;AC035;  BX reg
 23587                                  					;AN000; now bx points to 1st CONTROL
 23588 00001679 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 23589 0000167B 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 23590 0000167E E88400                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 23591 00001681 EB65                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23592                                  
 23593                                  _$P_Too_Many_Error:			;AN000;
 23594 00001683 2EC706[EA14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 23595 0000168A EB5C                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23596                                  
 23597                                  _$P_SW_Manager:				;AN000;
 23598 0000168C 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23599 00001690 30E4                    	xor	ah,ah			;AN000; ax = maxp
 23600 00001692 40                      	inc	ax			;AN000;
 23601 00001693 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23602 00001695 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23603 00001697 268A0F                  	mov	cl,[es:bx]		;AN000;
 23604 0000169A 30ED                    	xor	ch,ch			;AN000; cx = maxs
 23605                                  	;or	cx,cx			;AN000; at least one switch ?
 23606                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 23607                                  	; 07/07/2023
 23608 0000169C E30F                    	jcxz	_$P_SW_Not_Found	; no
 23609                                  
 23610 0000169E 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 23611                                  
 23612                                  _$P_SW_Mgr_Loop: 			;AN000;
 23613 0000169F 53                      	push	bx			;AN000;
 23614 000016A0 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 23615 000016A3 E8BF00                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 23616 000016A6 5B                      	pop	bx			;AN000;
 23617 000016A7 733F                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 23618                                  
 23619 000016A9 43                      	inc	bx			;AC035; add '2' to
 23620 000016AA 43                      	inc	bx			;AC035;  BX reg
 23621                                  					;AN000; else bx points to the next CONTROL
 23622 000016AB E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 23623                                  
 23624                                  _$P_SW_Not_Found:			;AN000;
 23625 000016AD 2EC706[EA14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 23626 000016B4 EB32                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 23627                                  
 23628                                  _$P_Key_Manager: 			;AN000;
 23629 000016B6 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23630 000016BA 30E4                    	xor	ah,ah			;AN000; ax = maxp
 23631 000016BC 40                      	inc	ax			;AN000;
 23632 000016BD D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23633 000016BF 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23634 000016C1 268A07                  	mov	al,[es:bx]		;AN000;
 23635 000016C4 30E4                    	xor	ah,ah			;AN000; ax = maxs
 23636 000016C6 D1E0                    	shl	ax,1			;AN000;
 23637 000016C8 40                      	inc	ax			;AN000; ax = ax*2+1
 23638 000016C9 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 23639 000016CB 268A0F                  	mov	cl,[es:bx]		;AN000;
 23640 000016CE 30ED                    	xor	ch,ch			;AN000; cx = maxk
 23641                                  	;or	cx,cx			;AN000; at least one keyword ?
 23642                                  	;jz	short _$P_Key_Not_Found	;AN000;
 23643                                  	; 07/07/2023
 23644 000016D0 E30F                    	jcxz	_$P_Key_Not_Found	; no
 23645                                  
 23646 000016D2 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 23647                                  
 23648                                  _$P_Key_Mgr_Loop:			;AN000;
 23649 000016D3 53                      	push	bx			;AN000;
 23650 000016D4 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 23651 000016D7 E85A00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 23652 000016DA 5B                      	pop	bx			;AN000;
 23653 000016DB 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 23654                                  
 23655 000016DD 43                      	inc	bx			;AC035; add '2' to
 23656 000016DE 43                      	inc	bx			;AC035;  BX reg
 23657                                  					;AN000; else bx points to the next CONTROL
 23658 000016DF E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23659                                  
 23660                                  _$P_Key_Not_Found:			;AN000;
 23661 000016E1 2EC706[EA14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23662                                  _$P_Return_to_Caller:			;AN000;
 23663 000016E8 5D                      	pop	bp			;AN000;
 23664 000016E9 5F                      	pop	di			;AN000;
 23665 000016EA 5B                      	pop	bx			;AN000;
 23666 000016EB 2E8B0E[E814]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23667 000016F0 2EA1[EA14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23668 000016F4 2E8B36[EC14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23669 000016F9 2E8B16[EE14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23670 000016FE 2E8A1E[F014]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23671                                  _$P_Single_Exit: 			;AN000;
 23672 00001703 F8                      	clc				;AN000;
 23673 00001704 C3                      	retn				;AN000;
 23674                                  
 23675                                  ;***********************************************************************
 23676                                  ; _$P_Chk_Pos_Control
 23677                                  ;
 23678                                  ; Function: Parse CONTROL block for a positional
 23679                                  ;
 23680                                  ; Input:     ES:BX -> CONTROL block
 23681                                  ;	     cs:SI -> _$P_STRING_BUF
 23682                                  ;
 23683                                  ; Output:    None
 23684                                  ;
 23685                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23686                                  ;
 23687                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23688                                  ;***********************************************************************
 23689                                  
 23690                                  _$P_Chk_Pos_Control:
 23691 00001705 50                      	push	ax			;AN000;
 23692                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23693 00001706 268B07                  	mov	ax,[es:bx]
 23694                                  	; 12/12/2022
 23695 00001709 A802                    	test	al,_$P_Repeat
 23696                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23697 0000170B 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23698                                  
 23699 0000170D 2EFF06[E814]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23700                                  _$P_CPC00:				;AN000;
 23701 00001712 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23702 00001716 7517                    	jne	short _$P_CPC01		;AN000;
 23703                                  
 23704                                  	; 12/12/2022
 23705 00001718 A801                    	test	al,_$P_Optional
 23706                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23707 0000171A 7509                    	jnz	short _$P_CPC02		;AN000;
 23708                                  
 23709 0000171C 2EC706[EA14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23710 00001723 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 23711                                  
 23712                                  _$P_CPC02:				;AN000;
 23713 00001725 50                      	push	ax			;AN000;
 23714                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 23715                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23716                                  	; 07/07/2023
 23717 00001726 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23718 00001729 E89800                  	call	_$P_Fill_Result		;AN000;
 23719 0000172C 58                      	pop	ax			;AN000;
 23720 0000172D EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23721                                  
 23722                                  _$P_CPC01:				;AN000;
 23723 0000172F E81701                  	call	_$P_Check_Match_Flags	;AN000;
 23724                                  _$P_CPC_Exit:				;AN000;
 23725 00001732 58                      	pop	ax			;AN000;
 23726 00001733 C3                      	retn				;AN000;
 23727                                  
 23728                                  ;***********************************************************************
 23729                                  ; _$P_Chk_Key_Control
 23730                                  ;
 23731                                  ; Function: Parse CONTROL block for a keyword
 23732                                  ;
 23733                                  ; Input:     ES:BX -> CONTROL block
 23734                                  ;	     cs:SI -> _$P_STRING_BUF
 23735                                  ;
 23736                                  ; Output:    CY = 1 : not match
 23737                                  ;
 23738                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23739                                  ;
 23740                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23741                                  ;***********************************************************************
 23742                                  
 23743                                  _$P_Chk_Key_Control:
 23744 00001734 F9                      	stc				;AN000; this logic works when the KeySW
 23745 00001735 C3                      	retn				;AN000; is reset.
 23746                                  
 23747                                  ;***********************************************************************
 23748                                  ; _$P_Search_KEYorSW:
 23749                                  ;
 23750                                  ; Function: Seach specified keyword or switch from CONTROL
 23751                                  ;
 23752                                  ; Input:     ES:BX -> CONTROL block
 23753                                  ;	     cs:SI -> _$P_STRING_BUF
 23754                                  ;
 23755                                  ; Output:    CY = 1 : not match
 23756                                  ;
 23757                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 23758                                  ;***********************************************************************
 23759                                  
 23760                                  	; 25/10/2022 - Retro DOS v4.0
 23761                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 23762                                  
 23763                                  _$P_Search_KEYorSW:			;AN000;
 23764 00001736 55                      	push	bp			;AN000;
 23765 00001737 51                      	push	cx			;AN000;
 23766 00001738 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23767 0000173C 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23768                                  	;or	cx,cx			;AN000; No synonyms specified ?
 23769                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23770                                  	; 07/07/2023
 23771 0000173E E30D                    	jcxz	_$P_KEYorSW_Not_Found
 23772                                  
 23773                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23774                                  	; 25/10/2022
 23775 00001740 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23776                                  	;lea	bp,[bx+9]
 23777                                  _$P_KEYorSW_Loop:			;AN000;
 23778 00001743 E8BB03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 23779 00001746 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 23780                                  
 23781 00001748 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 23782 0000174B E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 23783                                  _$P_KEYorSW_Not_Found:			;AN000;
 23784 0000174D F9                      	stc				;AN000; indicate not found in synonym list
 23785 0000174E EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 23786                                  
 23787                                  _$P_KEYorSW_Found:			;AN000;
 23788 00001750 2E892E[FD14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 23789 00001755 F8                      	clc				;AN000; indicate found
 23790                                  _$P_KEYorSW_Exit:			;AN000;
 23791 00001756 59                      	pop	cx			;AN000;
 23792 00001757 5D                      	pop	bp			;AN000;
 23793 00001758 C3                      	retn				;AN000;
 23794                                   
 23795                                  ;***********************************************************************
 23796                                  ; _$P_MoveBP_NUL
 23797                                  ;***********************************************************************
 23798                                  
 23799                                  _$P_MoveBP_NUL:
 23800                                  _$P_MBP_Loop:				;AN000;
 23801                                  	; 11/12/2022
 23802 00001759 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 23803                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 23804                                  	; (SYSINIT:18DBh)
 23805                                   	;cmp     byte [es:bp+0],0
 23806 0000175E 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 23807                                  
 23808 00001760 45                      	inc	bp			;AN000; until
 23809 00001761 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 23810                                  
 23811                                  _$P_MBP_Exit:				;AN000;
 23812 00001763 45                      	inc	bp			;AN000; bp points to next to NULL
 23813 00001764 C3                      	retn				;AN000;
 23814                                  
 23815                                  ;***********************************************************************
 23816                                  ; _$P_Chk_SW_Control
 23817                                  ;
 23818                                  ; Function: Parse CONTROL block for a switch
 23819                                  ;
 23820                                  ; Input:     ES:BX -> CONTROL block
 23821                                  ;	     cs:SI -> _$P_STRING_BUF
 23822                                  ;
 23823                                  ; Output:    CY = 1 : not match
 23824                                  ;
 23825                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23826                                  ;
 23827                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23828                                  ;***********************************************************************
 23829                                  
 23830                                  _$P_Chk_SW_Control:
 23831                                  
 23832                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23833                                  	;or	byte [cs:_$P_Flags+1],10h
 23834 00001765 2E800E[F614]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23835 0000176B E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23836 0000176E 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23837                                  
 23838                                  	;and	[cs:_$P_Flags+],0EFh
 23839 00001770 2E8026[F614]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23840                                  					;AC034; reset the indicator previously set
 23841 00001776 50                      	push	ax			;AN000; 	      /switch:
 23842 00001777 2EA1[F914]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23843 0000177B 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23844 0000177D 2E0106[F714]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23845 00001782 58                      	pop	ax			;AN000;
 23846                                  
 23847 00001783 2E8B36[F914]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23848 00001788 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23849 0000178C 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23850                                  
 23851 0000178E 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23852 00001793 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23853                                  
 23854 00001795 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23855 0000179C EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23856                                  
 23857                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23858                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23859 0000179E 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23860 000017A2 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23861                                  
 23862                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23863                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23864                                  	;test	word [es:bx],1
 23865                                  	; 12/12/2022
 23866                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23867 000017A4 26F60701                	test	byte [es:bx],_$P_Optional
 23868 000017A8 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23869                                  
 23870 000017AA 2EC706[EA14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23871 000017B1 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23872                                  
 23873                                  _$P_CSW00:				;AN000;
 23874 000017B3 E89300                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23875 000017B6 F8                      	clc				;AN000; indicate match
 23876                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23877                                  	; 12/12/2022
 23878 000017B7 C3                      	retn
 23879                                  
 23880                                  _$P_Chk_SW_Err0: 			;AN000;
 23881 000017B8 F9                      	stc				;AN000; not found in switch synonym list
 23882                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23883                                  	; 12/12/2022
 23884 000017B9 C3                      	retn	
 23885                                  
 23886                                  _$P_Chk_SW_Exit: 			;AN000;
 23887 000017BA 50                      	push	ax			;AN000;
 23888                                  	;mov	al,_$P_String		;AN000;
 23889                                  	;mov	ah,_$P_No_Tag		;AN000;
 23890                                  	; 07/07/2023
 23891 000017BB B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23892 000017BE E80300                  	call	_$P_Fill_Result		;AN000; set result buffer
 23893 000017C1 58                      	pop	ax			;AN000;
 23894 000017C2 F8                      	clc				;AN000;
 23895                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23896 000017C3 C3                      	retn				;AN000;
 23897                                  ;ELSE					;AN000;(of IF SwSW)
 23898                                  ;	stc				;AN000; this logic works when the SwSW
 23899                                  ;	retn				;AN000; is reset.
 23900                                  
 23901                                  ;***********************************************************************
 23902                                  ; _$P_Fill_Result
 23903                                  ;
 23904                                  ; Function: Fill the result buffer
 23905                                  ;
 23906                                  ; Input:    AH = Item tag
 23907                                  ;	    AL = type
 23908                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23909                                  ;		  AL = 2: DX has index(offset) into value list
 23910                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23911                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23912                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23913                                  ;			  amd CH has hundredths
 23914                                  ;		  AL = else: cs:SI points to returned string buffer
 23915                                  ;	    ES:BX -> CONTROL block
 23916                                  ;
 23917                                  ; Output:   None
 23918                                  ;
 23919                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23920                                  ;
 23921                                  ; Vars: _$P_DX(W)
 23922                                  ;***********************************************************************
 23923                                  
 23924                                  _$P_Fill_Result:
 23925 000017C4 57                      	push	di			;AN000;
 23926 000017C5 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23927                                  					;AN000; di points to result buffer
 23928 000017C9 2E893E[EE14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23929 000017CE 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23930 000017D1 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23931 000017D5 50                      	push	ax			;AN000;
 23932 000017D6 2EA1[FD14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23933 000017DA 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23934                                  					;AN000;   then set it to the result
 23935 000017DE 58                      	pop	ax			;AN000;
 23936                                  _$P_RLT04:				;AN000;
 23937 000017DF 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23938 000017E1 750A                    	jne	short _$P_RLT00		;AN000;
 23939                                  
 23940                                  _$P_RLT02:				;AN000;
 23941 000017E3 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23942 000017E7 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23943 000017EB EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23944                                  
 23945                                  _$P_RLT00:				;AN000;
 23946 000017ED 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23947 000017EF 7506                    	jne	short _$P_RLT01		;AN000;
 23948                                  
 23949 000017F1 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 23950                                  					;AN000; then store list index
 23951 000017F5 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23952                                  
 23953                                  _$P_RLT01:				;AN000;
 23954 000017F7 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23955 000017F9 74E8                    	je	short _$P_RLT02		;AN000;
 23956                                  
 23957 000017FB 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23958 000017FD 74E4                    	je	short _$P_RLT02		;AN000;
 23959                                  
 23960 000017FF 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23961 00001801 7506                    	jne	short _$P_RLT03		;AN000;
 23962                                  
 23963 00001803 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23964 00001807 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23965                                  
 23966                                  _$P_RLT03:				;AN000;
 23967 00001809 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23968 0000180B 750F                    	jne	short _$P_RLT05		;AN000;
 23969                                  
 23970 0000180D 2EA1[F714]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23971 00001811 40                      	inc	ax			;AN000; skip left Parentheses
 23972 00001812 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23973 00001816 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23974 0000181A EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23975                                  
 23976                                  _$P_RLT05:				;AN000;
 23977                                  ;------------------------  AL = 3, 5, or 9
 23978 0000181C 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23979                                  					;AN000; store offset of STRING_BUF
 23980 00001820 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23981                                  					;AN031; store segment of STRING_BUF
 23982 00001824 50                      	push	ax			;AN000;
 23983 00001825 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23984                                  					;AN000; need CAPS by file table?
 23985 0000182A 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23986                                  
 23987 0000182C B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23988 0000182E EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23989                                  
 23990                                  _$P_RLT_CAP00:				;AN000;
 23991 00001830 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23992                                  					;AN000; need CAPS by char table ?
 23993 00001835 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23994                                  
 23995 00001837 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23996                                  _$P_RLT_CAP02:				;AN000;
 23997 00001839 E8DF00                  	call	_$P_Do_CAPS_String	;AN000; process CAPS along the table
 23998                                  _$P_RLT_CAP01:				;AN000;
 23999 0000183C 58                      	pop	ax			;AN000;
 24000 0000183D 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 24001                                  					;AN000; removing colon at end ?
 24002 00001842 7403                    	jz	short _$P_RLT_Exit	;AN000;
 24003                                  
 24004 00001844 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 24005                                  _$P_RLT_Exit:				;AN000;
 24006 00001847 5F                      	pop	di			;AN000;
 24007 00001848 C3                      	retn				;AN000;
 24008                                  
 24009                                  ;***********************************************************************
 24010                                  ; _$P_Check_Match_Flags
 24011                                  ;
 24012                                  ; Function:  Check the match_flags and make the exit code and set the
 24013                                  ;	     result buffer
 24014                                  ;
 24015                                  ;	    Check for types in this order:
 24016                                  ;		Complex
 24017                                  ;		Date
 24018                                  ;		Time
 24019                                  ;		Drive
 24020                                  ;		Filespec
 24021                                  ;		Quoted String
 24022                                  ;		Simple String
 24023                                  ;
 24024                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24025                                  ;	     ES:BX -> CONTROL block
 24026                                  ;
 24027                                  ; Output:    None
 24028                                  ;
 24029                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 24030                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 24031                                  ;	     _$P_Drive_Format
 24032                                  ;***********************************************************************
 24033                                  
 24034                                  	; 25/10/2022 - Retro DOS v4.0
 24035                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 24036                                  
 24037                                  	; 12/12/2022
 24038                                  _$P_Check_Match_Flags:
 24039 00001849 2EC606[8D15]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 24040                                  					;AN033;AC034;; clear filespec error flag.
 24041 0000184F 50                      	push	ax			;AN000;
 24042                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 24043 00001850 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 24044 00001853 09C0                    	or	ax,ax			;AC035; test ax for zero
 24045 00001855 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 24046 00001857 50                      	push	ax			;AN000; (tm12)
 24047 00001858 53                      	push	bx			;AN000; (tm12)
 24048 00001859 52                      	push	dx			;AN000; (tm12)
 24049 0000185A 57                      	push	di			;AN000; (tm12)
 24050 0000185B 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 24051                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 24052                                  	;mov	al,_$P_String		;AN000; (tm12)
 24053                                  	; 07/07/2023
 24054 00001862 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24055 00001865 E85CFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 24056 00001868 5F                      	pop	di			;AN000; (tm12)
 24057 00001869 5A                      	pop	dx			;AN000; (tm12)
 24058 0000186A 5B                      	pop	bx			;AN000; (tm12)
 24059 0000186B 58                      	pop	ax			;AN000; (tm12)
 24060                                  	; 12/12/2022
 24061                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 24062                                  	; 12/12/2022
 24063                                  ;_$P_Mat: 				;AN000; (tm12)
 24064                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 24065                                  _$P_Bridge:
 24066 0000186C EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 24067                                  	
 24068                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24069                                  	; (SYSINIT:19F9h)
 24070                                  	; 12/12/2022
 24071                                  	;nop	; db 90h
 24072                                  
 24073                                  ; 12/12/2022
 24074                                  _$P_Mat:
 24075                                  _$P_Match03:				;AN000;
 24076                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 24077                                  	; 07/07/2023
 24078 0000186E F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 24079 00001871 7412                    	jz	short _$P_Match04	;AN000;
 24080                                  
 24081 00001873 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24082 0000187A E81F01                  	call	_$P_Value		;AN000; do process
 24083 0000187D 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24084 00001883 7557                    	jne	short _$P_Match_Exit	;AN000;
 24085                                  _$P_Match04:				;AN000;
 24086                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 24087                                  	; 07/07/2023
 24088 00001885 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 24089 00001888 7412                    	jz	short _$P_Match05	;AN000;
 24090                                  
 24091 0000188A 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24092 00001891 E8E400                  	call	_$P_SValue		;AN000; do process
 24093 00001894 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24094 0000189A 7540                    	jne	short _$P_Match_Exit	;AN000;
 24095                                  _$P_Match05:				;AN000;
 24096                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 24097                                  	; 07/07/2023
 24098 0000189C F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 24099 0000189F 7415                    	jz	short _$P_Match06	;AN000;
 24100                                  
 24101 000018A1 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24102 000018A8 E8F402                  	call	_$P_File_Format		;AN000; 1st, call file format
 24103 000018AB E87503                  	call	_$P_Drive_Format	;AN000; check drive format, next
 24104 000018AE 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24105 000018B4 7526                    	jne	short _$P_Match_Exit	;AN000;
 24106                                  _$P_Match06:				;AN000;
 24107                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 24108                                  	; 07/07/2023
 24109 000018B6 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24110 000018B9 7412                    	jz	short _$P_Match07	;AN000;
 24111                                  
 24112 000018BB 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24113 000018C2 E8DA02                  	call	_$P_File_Format		;AN000; do process
 24114 000018C5 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24115 000018CB 750F                    	jne	short _$P_Match_Exit	;AN000;
 24116                                  _$P_Match07:				;AN000;
 24117                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 24118                                  	; 07/07/2023
 24119 000018CD F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 24120 000018D0 740A                    	jz	short _$P_Match09	;AN000;
 24121                                  
 24122 000018D2 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24123 000018D9 E8BC01                  	call	_$P_Simple_String	;AN000; do process
 24124                                  _$P_Match09:				;AN000;
 24125                                  _$P_Match_Exit:				;AN000;
 24126 000018DC 2E833E[8D15]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 24127 000018E2 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 24128 000018E4 2E833E[EA14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 24129 000018EA 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 24130 000018EC 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 24131                                  _$P_Match2_Exit: 			;AN033;
 24132 000018F3 58                      	pop	ax			;AN000;
 24133 000018F4 C3                      	retn				;AN000;
 24134                                  
 24135                                  ;***********************************************************************
 24136                                  ; _$P_Remove_Colon;
 24137                                  ;
 24138                                  ; Function: Remove colon at end
 24139                                  ;
 24140                                  ; Input:    cs:SI points to string buffer to be examineed
 24141                                  ;
 24142                                  ; Output:   None
 24143                                  ;
 24144                                  ; Use:	_$P_Chk_DBCS
 24145                                  ;***********************************************************************
 24146                                  
 24147                                  _$P_Remove_Colon:
 24148 000018F5 50                      	push	ax			;AN000;
 24149 000018F6 56                      	push	si			;AN000;
 24150                                  _$P_RCOL_Loop:				;AN000;
 24151 000018F7 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24152 000018FA 08C0                    	or	al,al			;AN000; end of string ?
 24153 000018FC 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 24154                                  
 24155 000018FE 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 24156 00001900 750D                    	jne	short _$P_RCOL00	;AN000;
 24157                                  
 24158 00001902 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 24159 00001907 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 24160                                  
 24161 00001909 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 24162 0000190D EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 24163                                  
 24164                                  _$P_RCOL00:				;AN000;
 24165 0000190F E81104                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 24166 00001912 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 24167                                  
 24168 00001914 46                      	inc	si			;AN000; if yes, skip trailing byte
 24169                                  _$P_RCOL01:				;AN000;
 24170 00001915 46                      	inc	si			;AN000; si points to next byte
 24171 00001916 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 24172                                  
 24173                                  _$P_RCOL_Exit:				;AN000;
 24174 00001918 5E                      	pop	si			;AN000;
 24175 00001919 58                      	pop	ax			;AN000;
 24176 0000191A C3                      	retn				;AN000;
 24177                                  
 24178                                  ;***********************************************************************
 24179                                  ; _$P_Do_CAPS_String;
 24180                                  ;
 24181                                  ; Function: Perform capitalization along with the file case map table
 24182                                  ;	    or character case map table.
 24183                                  ;
 24184                                  ; Input:    AL = 2 : Use character table
 24185                                  ;	    AL = 4 : Use file table
 24186                                  ;	    cs:SI points to string buffer to be capitalized
 24187                                  ;
 24188                                  ; Output:   None
 24189                                  ;
 24190                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 24191                                  ;***********************************************************************
 24192                                  
 24193                                  _$P_Do_CAPS_String:
 24194 0000191B 56                      	push	si			;AN000;
 24195 0000191C 52                      	push	dx			;AN000;
 24196 0000191D 88C2                    	mov	dl,al			;AN000; save info id
 24197                                  _$P_DCS_Loop:				;AN000;
 24198 0000191F 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 24199 00001922 E8FE03                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 24200 00001925 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 24201                                  
 24202 00001927 08C0                    	or	al,al			;AN000; end of string ?
 24203 00001929 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 24204                                  
 24205 0000192B E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 24206 0000192E 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 24207 00001931 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 24208                                  _$P_DCS00:				;AN000;
 24209 00001933 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 24210                                  _$P_DCS01:				;AN000;
 24211 00001934 46                      	inc	si			;AN000; si point to next byte
 24212 00001935 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 24213                                  _$P_DCS_Exit:				;AN000;
 24214 00001937 5A                      	pop	dx			;AN000;
 24215 00001938 5E                      	pop	si			;AN000;
 24216 00001939 C3                      	retn
 24217                                  
 24218                                  ;***********************************************************************
 24219                                  ; _$P_Do_CAPS_Char;
 24220                                  ;
 24221                                  ; Function: Perform capitalization along with the file case map table
 24222                                  ;	    or character case map table.
 24223                                  ;
 24224                                  ; Input:    DL = 2 : Use character table
 24225                                  ;	    DL = 4 : Use file table
 24226                                  ;	    AL = character to be capitalized
 24227                                  ;
 24228                                  ; Output:   None
 24229                                  ;
 24230                                  ; Use:	INT 21h /w AH=65h
 24231                                  ;***********************************************************************
 24232                                  
 24233                                  _$P_Do_CAPS_Char:
 24234 0000193A 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 24235 0000193C 730B                    	jae	short _$P_DCC_Go	;AN000; no
 24236                                  
 24237 0000193E 3C61                    	cmp	al,"a"                  ;AN000; check if  "a" <= AL <= "z"
 24238 00001940 7235                    	jb	short _$P_CAPS_Ret	;AN000;   
 24239                                  
 24240 00001942 3C7A                    	cmp	al,"z"                  ;AN000;
 24241 00001944 7731                    	ja	short _$P_CAPS_Ret	;AN000;
 24242                                  
 24243 00001946 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000; make CAPS
 24244                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 24245                                  	; 07/07/2023
 24246 00001948 C3                      	retn
 24247                                  
 24248                                  _$P_DCC_Go:				;AN000;
 24249 00001949 53                      	push	bx			;AN000;
 24250 0000194A 06                      	push	es			;AN000;
 24251 0000194B 57                      	push	di			;AN000;
 24252                                  
 24253                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 24254 0000194C 8D3E[7F15]              	lea	di,[_$P_Char_CAP_Ptr]
 24255                                  _$P_DCC00:				;AN000;
 24256 00001950 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 24257 00001953 7415                    	je	short _$P_DCC01		;AN000; no
 24258                                  
 24259                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 24260                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 24261                                  ; call, regardless of what base register is currently be defined as cs.
 24262                                  
 24263 00001955 50                      	push	ax			;AN000; get CAPS table thru DOS call
 24264 00001956 51                      	push	cx			;AN000;
 24265 00001957 52                      	push	dx			;AN000;
 24266                                  
 24267 00001958 0E                      	push	cs			;AC036; pass current base seg into
 24268                                  					;(Note: this used to push CS.  BUG...
 24269 00001959 07                      	pop	es			;AN000;   ES reg, required for
 24270                                  					;get extended country information
 24271                                  	;mov	al,dl ; function	;AN000; upper case table
 24272                                  	; 07/07/2023
 24273 0000195A 92                      	xchg	ax,dx
 24274 0000195B B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 24275 0000195D BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 24276 00001960 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 24277                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 24278                                  	; 07/07/2023
 24279 00001963 89DA                    	mov	dx,bx ; 0FFFFh
 24280                                  					;DI already set to point to buffer
 24281 00001965 CD21                    	int	21h			;AN000; es:di point to buffer that
 24282                                  					;now has been filled in with info
 24283 00001967 5A                      	pop	dx			;AN000;
 24284 00001968 59                      	pop	cx			;AN000;
 24285 00001969 58                      	pop	ax			;AN000;
 24286                                  
 24287                                  _$P_DCC01:				;AN000;
 24288                                  
 24289                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 24290                                  ; by the previous GET COUNTRY INFO DOS call. This usage of ES is made
 24291                                  ; regardless of which base reg is currently the cs reg.
 24292                                  
 24293                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 24294                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 24295                                  	; 07/07/2023
 24296 0000196A 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 24297 0000196E 43                      	inc	bx			;AC035; add '2' to
 24298 0000196F 43                      	inc	bx			;AC035;  BX reg
 24299                                  					;AN000; skip length field
 24300 00001970 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 24301                                  	;xlat	es:[bx] 		;AN000; perform case map
 24302 00001972 26                      	es
 24303 00001973 D7                      	xlat
 24304 00001974 5F                      	pop	di			;AN000;
 24305 00001975 07                      	pop	es			;AN000;
 24306 00001976 5B                      	pop	bx			;AN000;
 24307                                  _$P_CAPS_Ret:				;AN000;
 24308 00001977 C3                      	retn				;AN000;
 24309                                  
 24310                                  ;***********************************************************************
 24311                                  ; _$P_Value / _$P_SValue
 24312                                  ;
 24313                                  ; Function:  Make 32bit value from cs:SI and see value list
 24314                                  ;	     and make result buffer.
 24315                                  ;	     _$P_SValue is an entry point for the signed value
 24316                                  ;	     and this will simply call _$P_Value after the handling
 24317                                  ;	     of the sign character, "+" or "-"
 24318                                  ;
 24319                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24320                                  ;	     ES:BX -> CONTROL block
 24321                                  ;
 24322                                  ; Output:    None
 24323                                  ;
 24324                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 24325                                  ;
 24326                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 24327                                  ;***********************************************************************
 24328                                  
 24329                                  	; 26/10/2022 - Retro DOS v4.0
 24330                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 24331                                  
 24332                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24333                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C46h)  	
 24334                                  _$P_SValue:				;AN000; when signed value here
 24335 00001978 50                      	push	ax			;AN000;
 24336 00001979 2E800E[F614]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 24337 0000197F 2E8026[F614]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 24338                                  	;and	byte [cs:_$P_Flags2],~_$P_Neg ; 07/07/2023 
 24339 00001985 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 24340 00001988 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 24341 0000198A 740A                    	je	short _$P_SVal00	;AN000;
 24342                                  
 24343 0000198C 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 24344 0000198E 7507                    	jne	short _$P_Sval01	;AN000; else
 24345                                  
 24346 00001990 2E800E[F614]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 24347                                  _$P_SVal00:				;AN000;
 24348 00001996 46                      	inc	si			;AN000; skip sign char
 24349                                  _$P_Sval01:				;AN000;
 24350 00001997 E80200                  	call	_$P_Value		;AN000; and process value
 24351 0000199A 58                      	pop	ax			;AN000;
 24352 0000199B C3                      	retn
 24353                                  
 24354                                  ;***********************************************************************
 24355                                  
 24356                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24357                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C6Ah)
 24358                                  
 24359                                  	; 26/10/2022
 24360                                  _$P_Value:				;AN000;
 24361 0000199C 50                      	push	ax			;AN000;
 24362 0000199D 51                      	push	cx			;AN000;
 24363 0000199E 52                      	push	dx			;AN000;
 24364 0000199F 56                      	push	si			;AN000;
 24365 000019A0 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 24366 000019A2 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 24367 000019A4 53                      	push	bx			;AN000; save control pointer
 24368                                  _$P_Value_Loop:				;AN000;
 24369 000019A5 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24370 000019A8 08C0                    	or	al,al			;AN000; end of line ?
 24371 000019AA 743C                    	jz	short _$P_Value00	;AN000;
 24372                                  
 24373 000019AC E8DD00                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 24374 000019AF 7233                    	jc	short _$P_Value_Err0	;AN000;
 24375                                  
 24376 000019B1 30E4                    	xor	ah,ah			;AN000;
 24377 000019B3 89C5                    	mov	bp,ax			;AN000; save binary number
 24378                                  
 24379                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24380                                  ; Ref: Disassembled PCDOS 7.1 IBMBIO.COM SYSINIT code
 24381                                  ;				Erdogan Tan - July 2023 
 24382                                  %if 0
 24383                                  	shl	dx,1			;AN000; to have 2*x
 24384                                  	rcl	cx,1			;AN000; shift left w/ carry
 24385                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24386                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24387                                  
 24388                                  	mov	bx,dx			;AN000; save low(2*x)
 24389                                  	mov	ax,cx			;AN000; save high(2*x)
 24390                                  	shl	dx,1			;AN000; to have 4*x
 24391                                  	rcl	cx,1			;AN000; shift left w/ carry
 24392                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24393                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24394                                  
 24395                                  	shl	dx,1			;AN000; to have 8*x
 24396                                  	rcl	cx,1			;AN000; shift left w/ carry
 24397                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24398                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24399                                  
 24400                                  	add	dx,bx			;AN000; now have 10*x
 24401                                  	adc	cx,ax			;AN000; 32bit ADD
 24402                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24403                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24404                                  
 24405                                  	add	dx,bp			;AN000; Add the current one degree decimal
 24406                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 24407                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24408                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24409                                  
 24410                                  	inc	si			;AN000; update pointer
 24411                                  	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 24412                                  ;_$P_Value_Err0:
 24413                                  %endif
 24414                                  ;****
 24415                                  %if 1
 24416                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24417                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2130h)
 24418                                  
 24419 000019B5 30E4                    	xor	ah,ah
 24420 000019B7 89C5                    	mov	bp,ax			; save binary number
 24421 000019B9 E81C00                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 24422 000019BC 89D3                    	mov	bx,dx			; ax:bx = 2*(cx:dx)
 24423 000019BE 89C8                    	mov	ax,cx
 24424 000019C0 E81500                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 24425 000019C3 E81200                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 24426 000019C6 01DA                    	add	dx,bx			; 8*(cx:dx)+2*(cx:dx) = 10*(cx:dx)
 24427 000019C8 11C1                    	adc	cx,ax
 24428 000019CA E80F00                  	call	_$P_Value_Chk_Add_OVF
 24429 000019CD 01EA                    	add	dx,bp			; Add the current one degree decimal
 24430                                  					; if carry, add 1 to high 16bit
 24431 000019CF 83D100                  	adc	cx,0
 24432 000019D2 E80700                  	call	_$P_Value_Chk_Add_OVF	; Overflow occurred ?
 24433                                  					; then error, exit (without return here)
 24434 000019D5 46                      	inc	si			; update pointer
 24435 000019D6 EBCD                    	jmp	short _$P_Value_Loop
 24436                                  
 24437                                  _$P_Value_2x_OVF:
 24438 000019D8 D1E2                    	shl	dx,1 			; to have 2*x
 24439 000019DA D1D1                    	rcl	cx,1			; shift left w/ carry
 24440                                  _$P_Value_Chk_Add_OVF:
 24441 000019DC E89B00                  	call	_$P_Check_OVF		; check overflow (for the last shift or add)
 24442 000019DF 7201                    	jc	short _$P_Value_OVF
 24443 000019E1 C3                      	retn
 24444                                  _$P_Value_OVF:
 24445 000019E2 44                      	inc	sp 			; skip "call" return address to the caller
 24446 000019E3 44                      	inc	sp
 24447                                  
 24448                                  ;_$P_Value_Err0:	
 24449                                  %endif
 24450                                  ;****
 24451                                  
 24452                                  _$P_Value_Err0:				;AN000;
 24453 000019E4 5B                      	pop	bx			;AN000;
 24454 000019E5 E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 24455                                  ;
 24456                                  _$P_Value00:				;AN000;
 24457 000019E8 5B                      	pop	bx			;AN000; restore control pointer
 24458 000019E9 2EF606[F614]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 24459 000019EF 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 24460                                  
 24461 000019F1 F7D1                    	not	cx			;AN000; +
 24462 000019F3 F7D2                    	not	dx			;AN000; |- Make 2's complement
 24463 000019F5 83C201                  	add	dx,1			;AN000; |
 24464 000019F8 83D100                  	adc	cx,0			;AN000; +
 24465                                  
 24466                                  _$P_Value01:				;AN000; / nval = 0
 24467 000019FB 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 24468 000019FF 268A04                  	mov	al,[es:si]		;AN000; get nval
 24469 00001A02 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 24470                                  	;*jne	short _$P_Value02	;AN000;
 24471                                  	;* 07/07/2023
 24472 00001A04 7459                    	je	short _$P_Value05
 24473                                  
 24474                                  	;mov	al,_$P_Number		;AN000; Set type
 24475                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24476                                  	; 07/07/2023
 24477                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24478                                  	;*jmp	short _$P_Value_Exit	;AN000;
 24479                                  
 24480                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 24481                                  	; (SYSINIT:1BA5h)
 24482                                  	; 12/12/2022
 24483                                  	;nop	; db  90h
 24484                                  
 24485                                  _$P_Value02:				;AN000; / nval = 1
 24486                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 24487                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 24488                                  ;(tm07) jne	short _$P_Value03	;AN000;
 24489                                  
 24490 00001A06 46                      	inc	si			;AN000;
 24491 00001A07 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 24492 00001A0A 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 24493 00001A0C 745D                    	je	short _$P_Value03	;AN000; (tm07)
 24494                                  
 24495 00001A0E 46                      	inc	si			;AN000; si points to 1st item_tag
 24496                                  _$P_Val02_Loop:				;AN000;
 24497 00001A0F 2EF606[F614]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 24498 00001A15 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 24499                                  
 24500 00001A17 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 24501 00001A1B 7234                    	jb	short _$P_Val02_Next	;AN000;
 24502 00001A1D 7706                    	ja	short _$P_Val_In	;AN000;
 24503                                  
 24504 00001A1F 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 24505 00001A23 722C                    	jb	short _$P_Val02_Next	;AN000;
 24506                                  
 24507                                  _$P_Val_In:				;AN000;
 24508 00001A25 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 24509 00001A29 7726                    	ja	short _$P_Val02_Next	;AN000;
 24510 00001A2B 7237                    	jb	short _$P_Val_Found	;AN000;
 24511                                  
 24512 00001A2D 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 24513 00001A31 771E                    	ja	short _$P_Val02_Next	;AN000;
 24514                                  
 24515 00001A33 EB2F                    	jmp	short _$P_Val_Found	;AN000;
 24516                                  
 24517                                  _$P_Val02_Sign:				;AN000;
 24518 00001A35 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 24519 00001A39 7C16                    	jl	short _$P_Val02_Next	;AN000;
 24520 00001A3B 7F06                    	jg	short _$P_SVal_In	;AN000;
 24521                                  
 24522 00001A3D 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 24523 00001A41 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 24524                                  
 24525                                  _$P_SVal_In:				;AN000;
 24526 00001A43 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 24527 00001A47 7F08                    	jg	short _$P_Val02_Next	;AN000;
 24528                                  
 24529 00001A49 7C19                    	jl	short _$P_Val_Found	;AN000;
 24530                                  
 24531 00001A4B 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 24532                                  	;jg	short _$P_Val02_Next	;AN000;
 24533                                  	;jmp	short _$P_Val_Found	;AN000;
 24534                                  	; 07/07/2023
 24535 00001A4F 7E13                    	jng	short _$P_Val_Found
 24536                                  
 24537                                  _$P_Val02_Next:				;AN000;
 24538 00001A51 83C609                  	add	si,_$P_Len_Range 	;AN000;
 24539 00001A54 FEC8                    	dec	al			;AN000; loop nrng times in AL
 24540 00001A56 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 24541                                  					; / Not found
 24542 00001A58 2EC706[EA14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 24543                                  	;mov	al,_$P_Number		;AN000;
 24544                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24545                                  _$P_Value05:		;* 07/07/2023
 24546                                  	; 07/07/2023
 24547 00001A5F B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24548 00001A62 EB0E                    	jmp	short _$P_Value_Exit	;AN000;
 24549                                  
 24550                                  _$P_Val_Found:				;AN000;
 24551 00001A64 B001                    	mov	al,_$P_Number		;AN000;
 24552 00001A66 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 24553 00001A69 EB07                    	jmp	short _$P_Value_Exit	;AN000;
 24554                                  
 24555                                  _$P_Value03:				;AN000; / nval = 2
 24556                                  
 24557                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 24558                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 24559                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 24560                                  ;(tm07) inc	si			;AN000;
 24561                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 24562                                  ;	mov	ah,$P_Len_Range 	;AN000;
 24563                                  ;	mul	ah			;AN000;  Skip nrng field
 24564                                  ;	inc	ax			;AN000;
 24565                                  ;	add	si,ax			;AN000; si points to nnval
 24566                                  ;	mov	al,es:[si]		;AN000; get nnval
 24567                                  ;	inc	si			;AN000; si points to 1st item_tag
 24568                                  ;$P_Val03_Loop:				;AN000;
 24569                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 24570                                  ;	jne	$P_Val03_Next		;AN000;
 24571                                  ;
 24572                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 24573                                  ;	je	$P_Val_Found		;AN000;
 24574                                  ;
 24575                                  ;$P_Val03_Next:				;AN000;
 24576                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 24577                                  ;	dec	al			;AN000; loop nval times in AL
 24578                                  ;	jne	$P_Val03_Loop		;AN000;
 24579                                  ;					;AN000; / Not found
 24580                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 24581                                  ;	mov	al,$P_Number		;AN000;
 24582                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 24583                                  ;	jmp	short $P_Value_Exit	;AN000;
 24584                                  ;
 24585                                  ;ENDIF					;AN000;(of Val2SW)
 24586                                  ;$P_Value04:
 24587                                  
 24588                                  _$P_Value_Err:				;AN000;
 24589 00001A6B 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24590                                  	;mov	al,_$P_String		;AN000; Set type
 24591                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24592                                  	; 07/07/2023
 24593                                  	;mov	ax,(_$P_No_Tag<<8)|_$P_String
 24594                                  _$P_Value_Exit:				;AN000;
 24595 00001A72 E84FFD                  	call	_$P_Fill_Result		;AN000;
 24596 00001A75 5E                      	pop	si			;AN000;
 24597 00001A76 5A                      	pop	dx			;AN000;
 24598 00001A77 59                      	pop	cx			;AN000;
 24599 00001A78 58                      	pop	ax			;AN000;
 24600 00001A79 C3                      	retn				;AN000;
 24601                                  
 24602                                  ; 28/03/2019 - Retro DOS v4.0
 24603                                  
 24604                                  ;***********************************************************************
 24605                                  ; _$P_Check_OVF
 24606                                  ;
 24607                                  ; Function:  Check if overflow is occurred with consideration of
 24608                                  ;	     signed or un-signed numeric value
 24609                                  ;
 24610                                  ; Input:     Flag register
 24611                                  ;
 24612                                  ; Output:    CY = 1  :	Overflow
 24613                                  ;
 24614                                  ; Vars:     _$P_Flags(R)
 24615                                  ;***********************************************************************
 24616                                  
 24617                                  	; 26/10/2022
 24618                                  _$P_Check_OVF:
 24619 00001A7A 9C                      	pushf				;AN000;
 24620 00001A7B 2EF606[F614]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 24621 00001A81 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 24622                                  
 24623 00001A83 9D                      	popf				;AN000; by the CY bit
 24624 00001A84 C3                      	retn				;AN000;
 24625                                  
 24626                                  _$P_COVF:				;AN000;
 24627 00001A85 9D                      	popf				;AN000; else,
 24628 00001A86 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 24629                                  
 24630 00001A88 F8                      	clc				;AN000; indicate it with CY bit
 24631 00001A89 C3                      	retn				;AN000; CY=0 means no overflow
 24632                                  
 24633                                  _$P_COVF00:				;AN000;
 24634 00001A8A F9                      	stc				;AN000; and CY=1 means overflow
 24635 00001A8B C3                      	retn				;AN000;
 24636                                  
 24637                                  ;***********************************************************************
 24638                                  ; _$P_0099;
 24639                                  ;
 24640                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 24641                                  ;
 24642                                  ; Input:     AL = character code
 24643                                  ;
 24644                                  ; Output:    CY = 1 : AL is not number
 24645                                  ;	     CY = 0 : AL contains binary value
 24646                                  ;***********************************************************************
 24647                                  
 24648                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24649                                  %if 0
 24650                                  _$P_0099:
 24651                                  	cmp	al,"0"                  ;AN000;
 24652                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24653                                  	; 12/12/2022
 24654                                  	jb	short _$P_0099Err2  ; cf=1
 24655                                  
 24656                                  	cmp	al,"9"                  ;AN000;
 24657                                  	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24658                                  
 24659                                  	sub	al,"0"                  ;AN000; make char -> bin
 24660                                  	; 12/12/2022
 24661                                  	; cf=0	
 24662                                  	;clc				;AN000; indicate no error
 24663                                  	retn				;AN000;
 24664                                  
 24665                                  _$P_0099Err:				;AN000;
 24666                                  	stc				;AN000; indicate error
 24667                                  _$P_0099Err2: ; 12/12/2022	
 24668                                  	retn				;AN000;
 24669                                  %endif
 24670                                  
 24671                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24672                                  %if 1
 24673                                  _$P_0099:
 24674 00001A8C 3C30                    	cmp	al,"0"                  ; cmp al,30h
 24675 00001A8E 7207                    	jb	short _$P_0099Err	; must be 0 =< al =< 9
 24676 00001A90 3C3A                    	cmp	al,"9"+1                ; cmp al,3Ah  
 24677 00001A92 F5                      	cmc				; cf=0 -> cf=1
 24678 00001A93 7202                    	jb	short _$P_0099Err
 24679 00001A95 2C30                    	sub	al,"0"	; sub al,30h 	; make char -> bin
 24680                                  	; cf=0
 24681                                  _$P_0099Err:	; cf=1
 24682 00001A97 C3                      	retn
 24683                                  %endif	
 24684                                  
 24685                                  ;***********************************************************************
 24686                                  ; _$P_Simple_String
 24687                                  ;
 24688                                  ; Function:  See value list for the simple string
 24689                                  ;	     and make result buffer.
 24690                                  ;
 24691                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24692                                  ;	     ES:BX -> CONTROL block
 24693                                  ;
 24694                                  ; Output:    None
 24695                                  ;
 24696                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 24697                                  ;
 24698                                  ; Vars: _$P_RC(W)
 24699                                  ;***********************************************************************
 24700                                  
 24701                                  _$P_Simple_String:
 24702 00001A98 50                      	push	ax			;AN000;
 24703 00001A99 53                      	push	bx			;AN000;
 24704 00001A9A 52                      	push	dx			;AN000;
 24705 00001A9B 57                      	push	di			;AN000;
 24706 00001A9C 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 24707 00001AA0 268A05                  	mov	al,[es:di]		;AN000; get nval
 24708 00001AA3 08C0                    	or	al,al			;AN000; no value list ?
 24709 00001AA5 7504                    	jnz	short _$P_Sim00		;AN000; then
 24710                                  
 24711 00001AA7 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24712 00001AA9 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 24713                                  
 24714                                  _$P_Sim00:				;AN000;
 24715                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 24716 00001AAB 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 24717 00001AAD 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 24718                                  
 24719 00001AAF 47                      	inc	di			;AN000;
 24720 00001AB0 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 24721 00001AB3 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 24722 00001AB5 F6E4                    	mul	ah			;AN000; Skip nrng field
 24723 00001AB7 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 24724 00001AB8 01C7                    	add	di,ax			;AN000; di points to nnval
 24725 00001ABA 268A05                  	mov	al,[es:di]		;AN000; get nnval
 24726 00001ABD B405                    	mov	ah,_$P_Len_Value 	;AN000;
 24727 00001ABF F6E4                    	mul	ah			;AN000; Skip nnval field
 24728 00001AC1 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 24729 00001AC2 01C7                    	add	di,ax			;AN000; di points to nstrval
 24730 00001AC4 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 24731 00001AC7 47                      	inc	di			;AC035; add '2' to
 24732 00001AC8 47                      	inc	di			;AC035;  DI reg
 24733                                  					;AN000; di points to 1st string in list
 24734                                  _$P_Sim_Loop:				;AN000;
 24735 00001AC9 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 24736 00001ACC E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 24737 00001ACF 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 24738                                  
 24739 00001AD1 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 24740 00001AD4 FEC8                    	dec	al			;AN000; loop nstval times in AL
 24741 00001AD6 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 24742                                  					;AN000; / Not found
 24743 00001AD8 2EC706[EA14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 24744 00001ADF B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24745 00001AE1 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 24746                                  
 24747                                  _$P_Sim_Found:				;AN000;
 24748 00001AE3 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 24749 00001AE7 B002                    	mov	al,_$P_List_Idx		;AN000;
 24750 00001AE9 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 24751 00001AEC EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 24752                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 24753                                  _$P_Sim01:				;AN000;
 24754 00001AEE 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24755 00001AF5 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24756                                  _$P_Sim_Exit:				;AN000;
 24757 00001AF7 B003                    	mov	al,_$P_String		;AN000; Set type
 24758                                  _$P_Sim_Exit0:				;AN000;
 24759 00001AF9 E8C8FC                  	call	_$P_Fill_Result		;AN000;
 24760 00001AFC 5F                      	pop	di			;AN000;
 24761 00001AFD 5A                      	pop	dx			;AN000;
 24762 00001AFE 5B                      	pop	bx			;AN000;
 24763 00001AFF 58                      	pop	ax			;AN000;
 24764 00001B00 C3                      	retn				;AN000;
 24765                                  
 24766                                  ;***********************************************************************
 24767                                  ; _$P_String_Comp:
 24768                                  ;
 24769                                  ; Function:  Compare two string
 24770                                  ;
 24771                                  ; Input:     cs:SI -> 1st string
 24772                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 24773                                  ;	     ES:BX -> CONTROL block
 24774                                  ;
 24775                                  ; Output:    CY = 1 if not match
 24776                                  ;
 24777                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 24778                                  ;
 24779                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 24780                                  ;***********************************************************************
 24781                                  
 24782                                  _$P_String_Comp:
 24783 00001B01 50                      	push	ax			;AN000;
 24784 00001B02 55                      	push	bp			;AN000;
 24785 00001B03 52                      	push	dx			;AN000;
 24786 00001B04 56                      	push	si			;AN000;
 24787 00001B05 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24788                                  _$P_SCOM_Loop:				;AN000;
 24789 00001B07 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24790 00001B0A E81602                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24791 00001B0D 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24792                                  
 24793 00001B0F E828FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24794                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24795 00001B12 2EF606[F614]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24796 00001B18 740D                    	jz	short _$P_SCOM04	;AN000;
 24797                                  
 24798 00001B1A 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 24799 00001B1C 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 24800                                  
 24801 00001B1E 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 24802 00001B23 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 24803                                  
 24804 00001B25 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 24805                                  
 24806                                  _$P_SCOM04:				;AN000;
 24807 00001B27 2EF606[F614]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 24808 00001B2D 740E                    	jz	short _$P_SCOM03	;AN000;
 24809                                  
 24810 00001B2F 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 24811 00001B31 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 24812                                  
 24813                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24814                                  	;cmp	byte [es:bp+0],_$P_NULL
 24815                                  	; 11/12/2022
 24816 00001B33 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 24817 00001B38 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 24818                                  
 24819                                  _$P_SCOM05:				;AN000;   found a match
 24820 00001B3A 46                      	inc	si			;AN000; si points to just after "=" or ":"
 24821 00001B3B EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 24822                                  
 24823                                  _$P_SCOM03:				;AN000;
 24824                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 24825                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24826                                  	;cmp	al,[es:bp+0]
 24827                                  	; 11/12/2022
 24828 00001B3D 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 24829 00001B41 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 24830                                  
 24831 00001B43 08C0                    	or	al,al			;AN000; end of line
 24832 00001B45 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 24833                                  
 24834                                  	; 12/12/2022
 24835                                  	;inc	si			;AN000; update operand pointer
 24836                                  	;inc	bp			;AN000;    and synonym pointer
 24837                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24838 00001B47 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 24839                                  
 24840                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 24841                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24842                                  	;cmp	al,[es:bp+0]
 24843                                  	; 11/12/2022
 24844 00001B49 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 24845 00001B4D 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 24846                                  
 24847 00001B4F 46                      	inc	si			;AN000; else, load next byte
 24848 00001B50 2E8A04                  	mov	al,[cs:si]		;AN000; and
 24849 00001B53 45                      	inc	bp			;AN000;
 24850                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24851                                  	;cmp	al,[es:bp+0]
 24852                                  	; 11/12/2022
 24853 00001B54 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 24854 00001B58 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 24855                                  
 24856                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24857                                  	; 12/12/2022
 24858                                  _$P_SCOM01:
 24859 00001B5A 46                      	inc	si			;AN000; else update operand pointer
 24860 00001B5B 45                      	inc	bp			;AN000; 		and synonym pointer
 24861                                  ;_$P_SCOM01:				;AN000;
 24862 00001B5C EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 24863                                  
 24864                                  _$P_SCOM_Differ0:			;AN000;
 24865                                  ;IF SwSW				;AN000;(tm10)
 24866 00001B5E 2EF606[F614]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 24867 00001B64 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 24868                                  
 24869                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24870                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 24871                                  	; 12/12/2022
 24872 00001B66 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 24873 00001B6B 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 24874                                  
 24875                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24876                                  	;cmp	byte [es:bp+0],_$P_NULL
 24877                                  	; 11/12/2022
 24878 00001B6D 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 24879                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 24880 00001B72 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 24881                                  
 24882                                  _$P_not_applicable:			;AN000;(tm10)
 24883                                  ;ENDIF					;AN000;(tm10)
 24884                                  
 24885                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24886                                  					;AN000; ignore colon option specified ?
 24887                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 24888                                  	; 12/12/2022
 24889 00001B74 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24890                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24891                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 24892 00001B78 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 24893                                  
 24894 00001B7A 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 24895 00001B7C 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 24896                                  
 24897                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24898                                  	;cmp	byte [es:bp+0],_$P_NULL
 24899                                  	; 11/12/2022
 24900 00001B7E 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24901 00001B83 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24902                                  
 24903 00001B85 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24904                                  
 24905                                  _$P_SCOM02:				;AN000;
 24906 00001B87 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24907 00001B89 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24908                                  
 24909                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24910                                  	;cmp	byte [es:bp+0],_$P_Colon
 24911                                  	; 11/12/2022
 24912 00001B8B 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24913 00001B90 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24914                                  
 24915                                  _$P_SCOM_Differ: 			;AN000;
 24916 00001B92 F9                      	stc				;AN000; indicate not found
 24917 00001B93 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24918                                  
 24919                                  _$P_SCOM_Same:				;AN000;
 24920                                  	; 12/12/2022
 24921                                  	; cf=0
 24922 00001B95 2E8936[F914]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24923                                  	; 12/12/2022
 24924                                  	;clc				;AN000; indicate found
 24925                                  _$P_SCOM_Exit:				;AN000;
 24926 00001B9A 5E                      	pop	si			;AN000;
 24927 00001B9B 5A                      	pop	dx			;AN000;
 24928 00001B9C 5D                      	pop	bp			;AN000;
 24929 00001B9D 58                      	pop	ax			;AN000;
 24930 00001B9E C3                      	retn
 24931                                  
 24932                                  ; 30/03/2019
 24933                                  
 24934                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24935                                  
 24936                                  ;***********************************************************************
 24937                                  ; _$P_File_Format;
 24938                                  ;
 24939                                  ; Function:  Check if the input string is valid file spec format.
 24940                                  ;	     And set the result buffer.
 24941                                  ;
 24942                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24943                                  ;	     ES:BX -> CONTROL block
 24944                                  ;
 24945                                  ; Output:    None
 24946                                  ;
 24947                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24948                                  ;
 24949                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24950                                  ;	_$P_SaveSI_Cmpx(R)
 24951                                  ;***********************************************************************
 24952                                  
 24953                                  _$P_File_Format:
 24954 00001B9F 50                      	push	ax			;AN000;
 24955 00001BA0 57                      	push	di			;AN000;
 24956 00001BA1 56                      	push	si			;AN000;
 24957 00001BA2 2E8B3E[F714]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24958                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24959 00001BA7 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24960 00001BAA 08C0                    	or	al,al			;AN000; end of line ?
 24961 00001BAC 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24962                                  
 24963 00001BAE E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24964 00001BB1 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24965                                  
 24966 00001BB3 2EC606[8D15]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24967                                  					;AN033;AC034;; set error flag- bad char.
 24968 00001BB9 5E                      	pop	si			;AN033;
 24969 00001BBA 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24970 00001BBE 5F                      	pop	di			;AN033;
 24971 00001BBF EB3E                    	jmp	short _$P_FileF02	;AN033;
 24972                                  
 24973                                  _$P_FileF_Err:				;AN000;
 24974 00001BC1 5E                      	pop	si			;AN000;
 24975 00001BC2 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24976 00001BC6 5F                      	pop	di			;AN000;
 24977                                  
 24978                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24979                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24980                                  	; 12/12/2022
 24981 00001BC7 26F60701                	test	byte [es:bx],_$P_Optional
 24982                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24983                                  	;test	word [es:bx],_$P_Optional
 24984 00001BCB 7532                    	jnz	short _$P_FileF02	;AN000;
 24985                                  
 24986 00001BCD 2EC706[EA14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24987 00001BD4 EB29                    	jmp	short _$P_FileF02	;AN000;
 24988                                  
 24989                                  _$P_FileF03:				;AN000;
 24990 00001BD6 58                      	pop	ax			;AN000; discard save si
 24991 00001BD7 56                      	push	si			;AN000; save new si
 24992                                  _$P_FileF_Loop1: 			;AN000;
 24993 00001BD8 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24994 00001BDB 08C0                    	or	al,al			;AN000; end of line ?
 24995 00001BDD 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24996                                  
 24997 00001BDF E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24998 00001BE2 740B                    	je	short _$P_FileF00	;AN000;
 24999                                  
 25000 00001BE4 E83C01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 25001 00001BE7 7302                    	jnc	short _$P_FileF01	;AN000;
 25002 00001BE9 47                      	inc	di			;AN000; if yes, skip next byte
 25003 00001BEA 46                      	inc	si			;AN000;
 25004                                  _$P_FileF01:				;AN000;
 25005 00001BEB 47                      	inc	di			;AN000;
 25006 00001BEC 46                      	inc	si			;AN000;
 25007 00001BED EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 25008                                  ;
 25009                                  _$P_FileF00:				;AN000;
 25010 00001BEF 2EA2[F014]              	mov	[cs:_$P_Terminator],al	;AC034;
 25011 00001BF3 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 25012 00001BF7 47                      	inc	di			;AN000;
 25013 00001BF8 2E893E[EC14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 25014                                  _$P_FileF_RLT:				;AN000;
 25015 00001BFD 5E                      	pop	si			;AN000;
 25016 00001BFE 5F                      	pop	di			;AN000;
 25017                                  _$P_FileF02:				;AN000;
 25018 00001BFF 58                      	pop	ax			;AN000; (tm14)
 25019                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 25020                                  	; 08/07/2023
 25021 00001C00 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 25022 00001C03 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 25023                                  
 25024 00001C05 50                      	push	ax			;AN000; (tm14)
 25025                                  	;mov	ah,_$P_No_Tag		;AN000; set
 25026                                  	;mov	al,_$P_File_Spec 	;AN000; result
 25027                                  	; 08/07/2023
 25028 00001C06 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 25029                                  					      ; set result
 25030 00001C09 E8B8FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 25031 00001C0C 58                      	pop	ax			;AN000;
 25032                                  
 25033                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 25034 00001C0D C3                      	retn				;AN000;
 25035                                  
 25036                                  ;***********************************************************************
 25037                                  ; _$P_FileSp_Chk
 25038                                  ;
 25039                                  ; Function:  Check if the input byte is one of file special characters
 25040                                  ;
 25041                                  ; Input:     cs:SI -> _$P_STRING_BUF
 25042                                  ;	     AL = character code to be examineed
 25043                                  ;
 25044                                  ; Output:    ZF = 1 , AL is one of special characters
 25045                                  ;***********************************************************************
 25046                                  
 25047                                  _$P_FileSp_Chk:
 25048 00001C0E 53                      	push	bx			;AN000;
 25049 00001C0F 51                      	push	cx			;AN000;
 25050                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 25051 00001C10 8D1E[8415]              	lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 25052                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 25053 00001C14 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 25054                                  _$P_FileSp_Loop: 			;AN000;
 25055 00001C17 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 25056 00001C1A 7404                    	je	short _$P_FileSp_Exit	;AN000;
 25057                                  
 25058 00001C1C 43                      	inc	bx			;AN000;
 25059 00001C1D E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 25060                                  
 25061 00001C1F 41                      	inc	cx			;AN000; reset ZF
 25062                                  _$P_FileSp_Exit: 			;AN000;
 25063 00001C20 59                      	pop	cx			;AN000;
 25064 00001C21 5B                      	pop	bx			;AN000;
 25065 00001C22 C3                      	retn
 25066                                  
 25067                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 25068                                  
 25069                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 25070                                  
 25071                                  ;***********************************************************************
 25072                                  ; _$P_Drive_Format;
 25073                                  ;
 25074                                  ; Function:  Check if the input string is valid drive only format.
 25075                                  ;	     And set the result buffer.
 25076                                  ;
 25077                                  ; Input:     cs:SI -> _$P_STRING_BUF
 25078                                  ;	     ES:BX -> CONTROL block
 25079                                  ;
 25080                                  ; Output:    None
 25081                                  ;
 25082                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 25083                                  ;
 25084                                  ; Vars: _$P_RC(W)
 25085                                  ;***********************************************************************
 25086                                  
 25087                                  _$P_Drive_Format:
 25088 00001C23 50                      	push	ax			;AN000;
 25089 00001C24 52                      	push	dx			;AN000;
 25090 00001C25 2E8A04                  	mov	al,[cs:si]		;AN000;
 25091 00001C28 08C0                    	or	al,al			;AN000; if null string
 25092 00001C2A 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 25093                                  
 25094 00001C2C E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 25095 00001C2F 722A                    	jc	short _$P_Drv_Err	;AN000; (yes, error)
 25096                                  
 25097 00001C31 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d",":", 0 ?
 25098 00001C36 740D                    	je	short _$P_DrvF00	;AN000;
 25099                                  
 25100                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 25101                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 25102                                  	; 12/12/2022
 25103 00001C38 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 25104                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25105                                  	;test	word [es:bx],_$P_Ig_Colon
 25106 00001C3C 741D                    	jz	short _$P_Drv_Err	;AN000;
 25107                                  
 25108 00001C3E 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d",0 ?
 25109 00001C43 7516                    	jne	short _$P_Drv_Err	;AN000;
 25110                                  
 25111                                  _$P_DrvF00:				;AN000;
 25112 00001C45 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 25113 00001C47 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 25114 00001C49 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 25115                                  
 25116 00001C4B 3C7A                    	cmp	al,"z"                  ;AN000; "a"-"z"
 25117 00001C4D 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 25118                                  
 25119 00001C4F 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 25120 00001C51 88C2                    	mov	dl,al			;AN000; set
 25121                                  	;mov	ah,_$P_No_Tag		;AN000; result
 25122                                  	;mov	al,_$P_Drive		;AN000; buffer
 25123                                  	; 08/07/2023
 25124 00001C53 B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 25125                                  					      ; set result buffer
 25126 00001C56 E86BFB                  	call	_$P_Fill_Result		;AN000; to drive
 25127 00001C59 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 25128                                  
 25129                                  _$P_Drv_Err:				;AN000;
 25130 00001C5B 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 25131                                  _$P_Drv_Exit:				;AN000;
 25132 00001C62 5A                      	pop	dx			;AN000;
 25133 00001C63 58                      	pop	ax			;AN000;
 25134 00001C64 C3                      	retn				;AN000;
 25135                                  
 25136                                  ;ENDIF					;AN000;(of DrvSW)
 25137                                  
 25138                                  ;***********************************************************************
 25139                                  ; _$P_Skip_Delim;
 25140                                  ;
 25141                                  ; Function: Skip delimiters specified in the PARMS list, white space
 25142                                  ;	    and comma.
 25143                                  ;
 25144                                  ; Input:    DS:SI -> Command String
 25145                                  ;	    ES:DI -> Parameter List
 25146                                  ;
 25147                                  ; Output:   CY = 1 if the end of line encounterd
 25148                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 25149                                  ;	    AL = Last examineed character
 25150                                  ;
 25151                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 25152                                  ;
 25153                                  ; Vars:     _$P_Flags(R)
 25154                                  ;***********************************************************************
 25155                                  
 25156                                  _$P_Skip_Delim:
 25157                                  _$P_Skip_Delim_Loop:			;AN000;
 25158 00001C65 AC                      	lodsb				;AN000;
 25159 00001C66 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 25160 00001C69 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 25161                                  
 25162 00001C6B E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 25163 00001C6E 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 25164                                  
 25165 00001C70 2EF606[F614]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 25166 00001C76 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 25167                                  
 25168 00001C78 2EF606[F614]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 25169                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 25170                                  	; 08/07/2023
 25171                                  	; cf=0
 25172 00001C7E 7505                    	jnz	short _$P_Skip_Delim_Exit
 25173 00001C80 C3                      	retn
 25174                                  
 25175                                  	;dec	si			;AN000; backup si for next call (tm08)
 25176                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 25177                                  	; 12/12/2022
 25178                                  	; cf=0
 25179                                  	; 08/07/2023
 25180                                  	;jmp	short _$P_Skip_Delim_Exit
 25181                                  
 25182                                  _$P_Skip_Delim_CY:			;AN000;
 25183 00001C81 F9                      	stc				;AN000; indicate EOL
 25184 00001C82 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 25185                                  
 25186                                  _$P_Skip_Delim_NCY:			;AN000;
 25187 00001C84 F8                      	clc				;AN000; indicate non delim
 25188                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 25189 00001C85 4E                      	dec	si			;AN000;  backup index pointer
 25190                                  	; 08/07/2023
 25191                                  	; 12/12/2022
 25192                                  ;_$P_Exit_At_Extra:	 ; cf=0
 25193 00001C86 C3                      	retn				;AN000;
 25194                                  
 25195                                  	; 12/12/2022
 25196                                  ;_$P_Exit_At_Extra:			;AN000;
 25197                                  	;clc				;AN000; indicate extra delim
 25198                                  	;retn				;AN000;
 25199                                  
 25200                                  ;***********************************************************************
 25201                                  ; _$P_Chk_EOL;
 25202                                  ;
 25203                                  ; Function: Check if AL is one of End of Line characters.
 25204                                  ;
 25205                                  ; Input:    AL = character code
 25206                                  ;	    ES:DI -> Parameter List
 25207                                  ;
 25208                                  ; Output:   ZF = 1 if one of End of Line characters
 25209                                  ;**********************************************************************
 25210                                  
 25211                                  _$P_Chk_EOL:
 25212 00001C87 53                      	push	bx			;AN000;
 25213 00001C88 51                      	push	cx			;AN000;
 25214 00001C89 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 25215 00001C8B 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25216 00001C8D 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 25217 00001C8F 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25218                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 25219 00001C91 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 25220 00001C93 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25221                                  ;ENDIF					;AN028;
 25222 00001C95 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 25223                                  					;AN000; EOL character specified ?
 25224 00001C9A 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 25225 00001C9C 31DB                    	xor	bx,bx			;AN000;
 25226 00001C9E 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 25227                                  					;AN000; get length of delimiter list
 25228 00001CA2 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 25229                                  	; 08/07/2023
 25230 00001CA5 31C9                    	xor	cx,cx ; *
 25231 00001CA7 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 25232 00001CAB 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 25233                                  	; 08/07/2023
 25234                                  	;;xor	cx,cx			;AN000; Get number of extra character
 25235                                  	;xor	ch,ch ; *
 25236 00001CAD 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 25237                                  _$P_Chk_EOL_Loop:			;AN000;
 25238 00001CB0 43                      	inc	bx			;AN000;
 25239 00001CB1 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 25240 00001CB4 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25241 00001CB6 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 25242                                  	; 08/07/2023
 25243                                  	; cx=0
 25244                                  _$P_Chk_EOL_NZ:				;AN000;
 25245                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 25246                                  	; 08/07/2023
 25247 00001CB8 41                      	inc	cx  ; zf=0  (cx=1) ; *
 25248                                  _$P_Chk_EOL_Exit:			;AN000;
 25249 00001CB9 59                      	pop	cx			;AN000;
 25250 00001CBA 5B                      	pop	bx			;AN000;
 25251 00001CBB C3                      	retn
 25252                                  
 25253                                  ;***********************************************************************
 25254                                  ; _$P_Chk_Delim;
 25255                                  ;
 25256                                  ; Function: Check if AL is one of delimiter characters.
 25257                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 25258                                  ;	    blanks.
 25259                                  ;
 25260                                  ; Input:    AL = character code
 25261                                  ;	    DS:SI -> Next Character
 25262                                  ;	    ES:DI -> Parameter List
 25263                                  ;
 25264                                  ; Output:   ZF = 1 if one of delimiter characters
 25265                                  ;	    SI points to the next character
 25266                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 25267                                  ;***********************************************************************
 25268                                   
 25269                                  	; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 25270                                  	; MSDOS 6.21 IO.SYS - SYSINIT:1FAEh
 25271                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2451h) ; (Retro DOS v5.0)
 25272                                  
 25273                                  _$P_Chk_Delim:
 25274 00001CBC 53                      	push	bx			;AN000;
 25275 00001CBD 51                      	push	cx			;AN000;
 25276 00001CBE 2EC606[F014]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 25277                                  					;AC034; Assume terminated by space
 25278                                  	;and	byte [cs:_$P_Flags20,0DFh
 25279 00001CC4 2E8026[F614]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 25280 00001CCA 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 25281 00001CCC 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25282                                  
 25283 00001CCE 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 25284 00001CD0 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25285                                  
 25286 00001CD2 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 25287 00001CD4 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25288                                  
 25289                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 25290                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 25291                                  ;        Erdogan Tan - 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 25292                                  ;_$P_Chk_Delim00:
 25293                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:246Bh)
 25294                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1FC8h)
 25295                                  %if 0
 25296                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25297                                  _$P_Chk_Delim00: 			;AN000;
 25298                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 25299                                  	jne	short _$P_Chk_Delim01	;AN000;
 25300                                  
 25301                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 25302                                  	jne	short _$P_Chk_Delim01	;AN000;
 25303                                  
 25304                                  	mov	al,_$P_Space		;AN000;
 25305                                  	inc	si			;AN000; make si point to next character
 25306                                  	cmp	al,al			;AN000; Set ZF
 25307                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25308                                  %endif
 25309                                  
 25310                                  _$P_Chk_Delim01: 			;AN000;
 25311 00001CD6 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 25312                                  					;AN000; delimiter character specified ?
 25313 00001CDB 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 25314                                  
 25315                                  	;xor	cx,cx			;AN000;
 25316 00001CDD 30ED                    	xor	ch,ch
 25317                                  	;mov	cl,[es:di+3]
 25318 00001CDF 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 25319                                  					;AN000; get length of delimiter list
 25320                                  	;or	cx,cx			;AN000; No extra Delim character ?
 25321                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 25322                                  	; 08/07/2023
 25323 00001CE3 E30B                    	jcxz	_$P_Chk_Delim_NZ
 25324                                  
 25325 00001CE5 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 25326                                  _$P_Chk_Delim_Loop:			;AN000;
 25327 00001CE8 43                      	inc	bx			;AN000;
 25328 00001CE9 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 25329 00001CEC 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25330                                  
 25331 00001CEE E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 25332                                  
 25333                                  _$P_Chk_Delim_NZ:			;AN000;
 25334                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 25335                                  	; 08/07/2023
 25336                                  	; cx=0 here
 25337 00001CF0 41                      	inc	cx ; cx=1, zf=0
 25338                                  _$P_Chk_Delim_Exit:			;AN000;
 25339                                  _$P_ChkDfin:				;AN000;
 25340 00001CF1 59                      	pop	cx			;AN000;
 25341 00001CF2 5B                      	pop	bx			;AN000;
 25342 00001CF3 C3                      	retn				;AN000;
 25343                                  
 25344                                  _$P_Chk_Delim_Exit0:			;AN000;
 25345 00001CF4 2EA2[F014]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 25346 00001CF8 2EF606[F614]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 25347 00001CFE 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 25348                                  
 25349 00001D00 2E800E[F614]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 25350                                  					;AC034; flag terminated extra delimiter or comma
 25351                                  _$P_No_Set_Extra:			;AN027;
 25352 00001D06 38C0                    	cmp	al,al			;AN000; set ZF
 25353 00001D08 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25354                                  
 25355                                  ;***********************************************************************
 25356                                  ; _$P_Chk_Switch;
 25357                                  ;
 25358                                  ; Function: Check if AL is the switch character not in first position of
 25359                                  ;	    _$P_STRING_BUF
 25360                                  ;
 25361                                  ; Input:    AL = character code
 25362                                  ;	    BX = current pointer within _$P_String_Buf
 25363                                  ;	    SI =>next char on command line (following the one in AL)
 25364                                  ;
 25365                                  ; Output:   CF = 1 (set) if AL is switch character, and not in first
 25366                                  ;		 position, and has no chance of being part of a date string,
 25367                                  ;		 i.e. should be treated as a delimiter.
 25368                                  
 25369                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 25370                                  ;		 position, or is a slash but may be part of a date string, i.e.
 25371                                  ;		 should not be treated as a delimiter.
 25372                                  ;
 25373                                  ; Vars:  _$P_Terminator(W)
 25374                                  
 25375                                  ; Use:	 _$P_0099
 25376                                  ;***********************************************************************
 25377                                  
 25378                                  _$P_Chk_Switch:
 25379                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 25380                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 25381                                  	; 08/07/2023
 25382 00001D0A BD[FF14]                	mov	bp,_$P_STRING_BUF
 25383                                  
 25384                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 25385 00001D0D 39EB                    	cmp	bx,bp			;AN000;
 25386 00001D0F 7406                    	je	short _$P_STRUC_L2	;AN000;
 25387                                  
 25388                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 25389 00001D11 3C2F                    	cmp	al,_$P_Switch		;AN000;
 25390 00001D13 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 25391                                  
 25392 00001D15 F9                      	stc				;AN020;not in first position and is slash
 25393                                  	;jmp     short _$P_STRUC_L1	;AN000;
 25394                                  	; 12/12/2022
 25395 00001D16 C3                      	retn
 25396                                  
 25397                                  ; 12/12/2022
 25398                                  ;_$P_STRUC_L5:				;AN000;
 25399                                  ;	CLC				;AN020;not a slash
 25400                                  ;;	    .ENDIF			;AN020;
 25401                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 25402                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 25403                                  
 25404                                  _$P_STRUC_L2:				;AN000;
 25405                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 25406 00001D17 3C2F                    	cmp     al,_$P_Switch		;AN000;
 25407 00001D19 7506                    	jne	short _$P_STRUC_L12	;AN000;
 25408                                  
 25409 00001D1B 2E800E[F614]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 25410                                  ;	.ENDIF				;AN020;
 25411                                  
 25412                                  	; 12/12/2022
 25413                                  	; cf=0
 25414                                  	;retn
 25415                                  
 25416                                  _$P_STRUC_L5:
 25417                                  	; 12/12/2022
 25418                                  _$P_STRUC_L12:				;AN000;
 25419 00001D21 F8                      	clc				;AN020;CF=0 indicating first char
 25420                                  ;	.ENDIF				;AN020;
 25421                                  _$P_STRUC_L1:				;AN000;
 25422 00001D22 C3                      	retn				;AN000;
 25423                                  
 25424                                  ;**************************************************************************
 25425                                  ; _$P_Chk_DBCS:
 25426                                  ;
 25427                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 25428                                  ;
 25429                                  ;  Input:
 25430                                  ;	  AL	= Code to be examineed
 25431                                  ;
 25432                                  ;  Output:
 25433                                  ;	  If CF is on then a lead byte of DBCS
 25434                                  ;
 25435                                  ; Use: INT 21h w/AH=63
 25436                                  ;
 25437                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 25438                                  ;***************************************************************************
 25439                                  
 25440                                  _$P_Chk_DBCS:
 25441 00001D23 1E                      	push	ds			;AN000;
 25442 00001D24 56                      	push	si			;AN000;
 25443 00001D25 53                      	push	bx			;AN000; (tm11)
 25444                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 25445                                  	;jne	short _$P_DBCS00	;AN000;
 25446                                  	; 08/07/2023
 25447 00001D26 2E8B36[F314]            	mov	si,[cs:_$P_DBCSEV_SEG]
 25448 00001D2B 21F6                    	and	si,si ; 0 ?
 25449 00001D2D 7525                    	jnz	short _$P_DBCS00 ; already set
 25450 00001D2F 50                      	push	ax			;AN000;
 25451 00001D30 1E                      	push	ds			;AN000; (tm11)
 25452 00001D31 51                      	push	cx			;AN000;
 25453 00001D32 52                      	push	dx			;AN000;
 25454 00001D33 57                      	push	di			;AN000;
 25455 00001D34 55                      	push	bp			;AN000;
 25456 00001D35 06                      	push	es			;AN000;
 25457                                  	; si = 0 ; 08/07/2023
 25458                                  	;xor	si,si			;AN000;
 25459 00001D36 8EDE                    	mov	ds,si ; 0		;AN000;
 25460 00001D38 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 25461 00001D3B CD21                    	int	21h			;AN000;
 25462                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 25463 00001D3D 8CDB                    	mov	bx,ds			;AN000; (tm11)
 25464 00001D3F 09DB                    	or	bx,bx			;AN000; (tm11)
 25465 00001D41 07                      	pop	es			;AN000;
 25466 00001D42 5D                      	pop	bp			;AN000;
 25467 00001D43 5F                      	pop	di			;AN000;
 25468 00001D44 5A                      	pop	dx			;AN000;
 25469 00001D45 59                      	pop	cx			;AN000;
 25470 00001D46 1F                      	pop	ds			;AN000; (tm11)
 25471 00001D47 58                      	pop	ax			;AN000;
 25472 00001D48 7424                    	jz	short _$P_NON_DBCS	;AN000;
 25473                                  _$P_DBCS02:				;AN000;
 25474 00001D4A 2E8936[F114]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 25475 00001D4F 2E891E[F314]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 25476                                  _$P_DBCS00:				;AN000;
 25477                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 25478                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 25479                                  	; 08/07/2023
 25480 00001D54 2EC536[F114]            	lds	si,[cs:_$P_DBCSEV_OFF]
 25481                                  _$P_DBCS_LOOP:				;AN000;
 25482 00001D59 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 25483 00001D5C 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 25484 00001D5E 3A04                    	cmp	al,[si] 		;AN000;
 25485 00001D60 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 25486 00001D62 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 25487 00001D65 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 25488 00001D67 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 25489 00001D68 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 25490                                  _$P_DBCS01:				;AN000;
 25491 00001D6A 46                      	inc	si			;AC035; add '2' to
 25492 00001D6B 46                      	inc	si			;AC035;  SI reg
 25493                                  					;AN000; get next vector
 25494 00001D6C EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 25495                                  _$P_NON_DBCS:				;AN000;
 25496                                  	; 12/12/2022
 25497                                  	; cf=0
 25498                                  	;clc				;AN000; indicate SBCS
 25499                                  _$P_DBCS_EXIT:				;AN000;
 25500 00001D6E 5B                      	pop	bx			;AN000; (tm11)
 25501 00001D6F 5E                      	pop	si			;AN000;
 25502 00001D70 1F                      	pop	ds			;AN000;
 25503 00001D71 C3                      	retn				;AN000;
 25504                                  
 25505                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 25506                                  ; ======================================================================
 25507                                  ; 27/03/2019 - Retro DOS v4.0
 25508                                  
 25509                                  ;control block definitions for parser.
 25510                                  ;-----------------------------------------------------------------------
 25511                                  ; buffer = [n | n,m] {/e}
 25512                                  
 25513                                  ; 30/03/2019
 25514                                  
 25515                                  struc p_parms
 25516 00000000 ????                    	resw	1	; dw ?
 25517 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 25518 00000003 ??                      	resb	1	; db 1	; length is 1
 25519 00000004 ??                      	resb 	1	; db ';' ; delimiter
 25520                                  .size:
 25521                                  endstruc
 25522                                  
 25523                                  struc p_pos
 25524 00000000 ????                    	resw	1	; dw ?	; numeric value??
 25525 00000002 ????                    	resw	1	; dw ?	; function
 25526 00000004 ????                    	resw	1	; dw ?	; result value buffer
 25527                                  
 25528                                  ; note: by defining result_val before this structure, we could remove
 25529                                  ;  the "result_val" from every structure invocation
 25530                                  
 25531 00000006 ????                    	resw	1	; dw ?	; value list
 25532 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 25533                                  .size:
 25534                                  endstruc
 25535                                  
 25536                                  struc	p_range
 25537 00000000 ??                      	resb	1	; db 1	; range definition
 25538 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 25539 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 25540 00000003 ????????                	resd	1	; dd ?	; numeric min
 25541 00000007 ????????                	resd	1	; dd ?	; numeric max
 25542                                  .size:
 25543                                  endstruc
 25544                                  
 25545                                  ;-----------------------------------------------------------------------
 25546                                  
 25547                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25548                                  	; (SYSINIT:1F48h)
 25549                                  
 25550                                  	; 08/07/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25551                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2083h
 25552                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:251Dh) ; (Retro DOS v5.0)
 25553                                  
 25554                                  ; buffer = [n | n,m] {/e}
 25555                                  
 25556                                  ;buf_parms p_parms <buf_parmsx>
 25557                                  buf_parms: 
 25558 00001D72 [771D]                  	dw	buf_parmsx
 25559 00001D74 01                      	db	1	; an extra delimiter list
 25560 00001D75 01                      	db	1	; length is 1
 25561 00001D76 3B                      	db	';'	; delimiter
 25562                                  
 25563                                  buf_parmsx:
 25564 00001D77 0102[811D][951D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 25565 00001D7D 01                      	db	1			; one switch
 25566 00001D7E [A91D]                  	dw	sw_x_ctrl
 25567 00001D80 00                      	db	0			; no keywords
 25568                                  
 25569                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 25570                                  buf_pos1:
 25571 00001D81 0080                    	dw	8000h	; numeric value??
 25572 00001D83 0000                    	dw	0	; function
 25573 00001D85 [BB1D]                  	dw	result_val ; result value buffer	
 25574 00001D87 [8A1D]                  	dw	buf_range_1 ; value list
 25575 00001D89 00                      	db	0  	; no switches/keywords
 25576                                  
 25577                                  ;buf_range_1 p_range <,,,1,99>		; M050
 25578                                  buf_range_1:
 25579 00001D8A 01                      	db	1	; range definition
 25580 00001D8B 01                      	db	1	; 1 definition of range
 25581 00001D8C 01                      	db	1	; item tag for this range
 25582 00001D8D 01000000                	dd	1	; numeric min
 25583 00001D91 63000000                	dd	99	; numeric max
 25584                                  
 25585                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 25586                                  buf_pos2:
 25587 00001D95 0180                    	dw	8001h
 25588 00001D97 0000                    	dw	0
 25589 00001D99 [BB1D]                  	dw	result_val	
 25590 00001D9B [9E1D]                  	dw	buf_range_2
 25591 00001D9D 00                      	db	0
 25592                                  
 25593                                  ;buf_range_2 p_range <,,,0,8>
 25594                                  buf_range_2:
 25595 00001D9E 01                      	db	1
 25596 00001D9F 01                      	db	1
 25597 00001DA0 01                      	db	1
 25598 00001DA1 00000000                	dd	0
 25599 00001DA5 08000000                	dd	8
 25600                                  
 25601                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 25602                                  sw_x_ctrl:
 25603 00001DA9 0000                    	dw	0
 25604 00001DAB 0000                    	dw	0
 25605 00001DAD [BB1D]                  	dw	result_val	
 25606 00001DAF [BA1D]                  	dw	noval
 25607 00001DB1 01                      	db	1	; 1 switch
 25608                                  	
 25609                                  switch_x:
 25610 00001DB2 2F5800                  	db	'/X',0		; M016
 25611                                  
 25612                                  p_buffers:
 25613 00001DB5 0000                    	dw	0	; local variables
 25614                                  p_h_buffers:
 25615 00001DB7 0000                    	dw	0
 25616                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25617                                  p_buffer_slash_x:
 25618 00001DB9 00                      	db	0 ; 31/03/2019
 25619                                  
 25620                                  ;-- common definitions -------------------------------------------------
 25621                                  
 25622 00001DBA 00                      noval:	db	0
 25623                                  
 25624                                  result_val: 	;label	byte
 25625 00001DBB 00                      	db	0		; type returned
 25626                                  result_val_itag:
 25627 00001DBC 00                      	db	0		; item tag returned
 25628                                  result_val_swoff:
 25629 00001DBD 0000                    	dw	0		; es:offset of the switch defined
 25630                                  rv_byte:	;label	byte
 25631 00001DBF 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 25632                                  
 25633                                  ;-----------------------------------------------------------------------
 25634                                  
 25635                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25636                                  	; (SYSINIT:1F99h)
 25637                                  
 25638                                  ; break = [ on | off ]
 25639                                  
 25640                                  ;brk_parms p_parms  <brk_parmsx>
 25641                                  brk_parms:
 25642 00001DC3 [C81D]                  	dw	brk_parmsx
 25643 00001DC5 01                      	db	1	; an extra delimiter list
 25644 00001DC6 01                      	db	1	; length is 1
 25645 00001DC7 3B                      	db	';'	; delimiter
 25646                                  
 25647                                  brk_parmsx:
 25648 00001DC8 0101[CE1D]              	dw	101h,brk_pos	; min,max = 1 positional
 25649 00001DCC 00                      	db	0		; no switches
 25650 00001DCD 00                      	db	0		; no keywords
 25651                                  
 25652                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25653                                  brk_pos:
 25654 00001DCE 0020                    	dw	2000h
 25655 00001DD0 0000                    	dw	0
 25656 00001DD2 [BB1D]                  	dw	result_val	
 25657 00001DD4 [D71D]                  	dw	on_off_string
 25658 00001DD6 00                      	db	0
 25659                                  
 25660                                  on_off_string:	;label	byte
 25661 00001DD7 03                      	db	3		; signals that there is a string choice
 25662 00001DD8 00                      	db	0		; no range definition
 25663 00001DD9 00                      	db	0		; no numeric values choice
 25664 00001DDA 02                      	db	2		; 2 strings for choice
 25665 00001DDB 01                      	db	1		; the 1st string tag
 25666 00001DDC [E11D]                  	dw	on_string
 25667 00001DDE 02                      	db	2		; the 2nd string tag
 25668 00001DDF [E41D]                  	dw	off_string
 25669                                  
 25670                                  on_string:
 25671 00001DE1 4F4E00                  	db	"ON",0
 25672                                  off_string:
 25673 00001DE4 4F464600                	db	"OFF",0
 25674                                  
 25675                                  p_ctrl_break:
 25676 00001DE8 00                      	db	0	; local variable
 25677                                  
 25678                                  ;-----------------------------------------------------------------------
 25679                                  
 25680                                  	; 27/10/2022
 25681                                  
 25682                                  ; country = n {m {path}}
 25683                                  ; or
 25684                                  ; country = n,,path
 25685                                  
 25686                                  ;cntry_parms p_parms <cntry_parmsx>
 25687                                  cntry_parms:
 25688 00001DE9 [EE1D]                  	dw	cntry_parmsx
 25689 00001DEB 01                      	db	1
 25690 00001DEC 01                      	db	1
 25691 00001DED 3B                      	db	';'
 25692                                  	
 25693                                  cntry_parmsx:
 25694 00001DEE 0103[F81D][0C1E]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 25694 00001DF4 [151E]             
 25695 00001DF6 00                      	db	0		; no switches
 25696 00001DF7 00                      	db	0		; no keywords
 25697                                  
 25698                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 25699                                  cntry_pos1:
 25700 00001DF8 0080                    	dw	8000h
 25701 00001DFA 0000                    	dw	0
 25702 00001DFC [BB1D]                  	dw	result_val	
 25703 00001DFE [011E]                  	dw	cc_range
 25704 00001E00 00                      	db	0
 25705                                  
 25706                                  ;cc_range p_range <,,,1,999>
 25707                                  cc_range:
 25708 00001E01 01                      	db	1
 25709 00001E02 01                      	db	1
 25710 00001E03 01                      	db	1
 25711 00001E04 01000000                	dd	1
 25712 00001E08 E7030000                	dd	999
 25713                                  
 25714                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 25715                                  cntry_pos2:
 25716 00001E0C 0180                    	dw	8001h
 25717 00001E0E 0000                    	dw	0
 25718 00001E10 [BB1D]                  	dw	result_val	
 25719 00001E12 [011E]                  	dw	cc_range
 25720 00001E14 00                      	db	0
 25721                                  
 25722                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 25723                                  cntry_pos3:
 25724 00001E15 0102                    	dw	201h
 25725 00001E17 0000                    	dw	0
 25726 00001E19 [BB1D]                  	dw	result_val	
 25727 00001E1B [BA1D]                  	dw	noval
 25728 00001E1D 00                      	db	0	
 25729                                  
 25730                                  p_cntry_code:
 25731 00001E1E 0000                    	dw	0	; local variable
 25732                                  p_code_page:
 25733 00001E20 0000                    	dw	0	; local variable
 25734                                  
 25735                                  ;-----------------------------------------------------------------------
 25736                                  
 25737                                  	; 27/10/2022
 25738                                  
 25739                                  ; files = n
 25740                                  
 25741                                  ;files_parms p_parms <files_parmsx>
 25742                                  files_parms:
 25743 00001E22 [271E]                  	dw	files_parmsx
 25744 00001E24 01                      	db	1
 25745 00001E25 01                      	db	1
 25746 00001E26 3B                      	db	';'
 25747                                  
 25748                                  files_parmsx:
 25749 00001E27 0101[2D1E]              	dw	101h,files_pos	; min,max 1 positional
 25750 00001E2B 00                      	db	0		; no switches
 25751 00001E2C 00                      	db	0		; no keywords
 25752                                  
 25753                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 25754                                  files_pos:
 25755 00001E2D 0080                    	dw	8000h
 25756 00001E2F 0000                    	dw	0
 25757 00001E31 [BB1D]                  	dw	result_val	
 25758 00001E33 [361E]                  	dw	files_range
 25759 00001E35 00                      	db	0
 25760                                  
 25761                                  ;files_range p_range <,,,8,255>
 25762                                  files_range:
 25763 00001E36 01                      	db	1
 25764 00001E37 01                      	db	1
 25765 00001E38 01                      	db	1
 25766 00001E39 08000000                	dd	8
 25767 00001E3D FF000000                	dd	255
 25768                                  
 25769                                  p_files:
 25770 00001E41 00                      	db	0		; local variable
 25771                                  
 25772                                  ;-----------------------------------------------------------------------
 25773                                  
 25774                                  	; 27/10/2022
 25775                                  
 25776                                  ; fcbs = n,m
 25777                                  
 25778                                  ;fcbs_parms p_parms <fcbs_parmsx>
 25779                                  fcbs_parms:
 25780 00001E42 [471E]                  	dw	fcbs_parmsx
 25781 00001E44 01                      	db	1
 25782 00001E45 01                      	db	1
 25783 00001E46 3B                      	db	';'
 25784                                  
 25785                                  fcbs_parmsx:
 25786 00001E47 0102[4F1E][631E]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 25787 00001E4D 00                      	db	0		; no switches
 25788 00001E4E 00                      	db	0		; no keywords
 25789                                  
 25790                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 25791                                  fcbs_pos_1:
 25792 00001E4F 0080                    	dw	8000h
 25793 00001E51 0000                    	dw	0
 25794 00001E53 [BB1D]                  	dw	result_val	
 25795 00001E55 [581E]                  	dw	fcbs_range
 25796 00001E57 00                      	db	0
 25797                                  
 25798                                  ;fcbs_range p_range <,,,1,255>
 25799                                  fcbs_range:
 25800 00001E58 01                      	db	1
 25801 00001E59 01                      	db	1
 25802 00001E5A 01                      	db	1
 25803 00001E5B 01000000                	dd	1
 25804 00001E5F FF000000                	dd	255
 25805                                  
 25806                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 25807                                  fcbs_pos_2:
 25808 00001E63 0080                    	dw	8000h
 25809 00001E65 0000                    	dw	0
 25810 00001E67 [BB1D]                  	dw	result_val	
 25811 00001E69 [6C1E]                  	dw	fcbs_keep_range
 25812 00001E6B 00                      	db	0
 25813                                  
 25814                                  ;fcbs_keep_range p_range <,,,0,255>
 25815                                  fcbs_keep_range:
 25816 00001E6C 01                      	db	1
 25817 00001E6D 01                      	db	1
 25818 00001E6E 01                      	db	1
 25819 00001E6F 00000000                	dd	0
 25820 00001E73 FF000000                	dd	255
 25821                                  
 25822 00001E77 00                      p_fcbs:	db	0		; local variable
 25823 00001E78 00                      p_keep:	db	0		; local variable
 25824                                  
 25825                                  ;-----------------------------------------------------------------------
 25826                                  
 25827                                  	; 27/10/2022
 25828                                  
 25829                                  ; lastdrive = x
 25830                                  
 25831                                  ;ldrv_parms p_parms <ldrv_parmsx>
 25832                                  ldrv_parms:
 25833 00001E79 [7E1E]                  	dw	ldrv_parmsx
 25834 00001E7B 01                      	db	1
 25835 00001E7C 01                      	db	1
 25836 00001E7D 3B                      	db	';'
 25837                                  
 25838                                  ldrv_parmsx:
 25839 00001E7E 0101[841E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 25840 00001E82 00                      	db	0		; no switches
 25841 00001E83 00                      	db	0		; no keywords
 25842                                  
 25843                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 25844                                  ldrv_pos:				    ; remove colon at end
 25845 00001E84 1001                    	dw	110h
 25846 00001E86 1000                    	dw	10h
 25847 00001E88 [BB1D]                  	dw	result_val	
 25848 00001E8A [BA1D]                  	dw	noval
 25849 00001E8C 00                      	db	0
 25850                                  	
 25851 00001E8D 00                      p_ldrv:	db	0		; local variable
 25852                                  
 25853                                  ;-----------------------------------------------------------------------
 25854                                  
 25855                                  	; 27/10/2022
 25856                                  
 25857                                  ; stacks = n,m
 25858                                  
 25859                                  ;stks_parms p_parms <stks_parmsx>
 25860                                  stks_parms:
 25861 00001E8E [931E]                  	dw	stks_parmsx
 25862 00001E90 01                      	db	1
 25863 00001E91 01                      	db	1
 25864 00001E92 3B                      	db	';'
 25865                                  
 25866                                  stks_parmsx:
 25867 00001E93 0202[9B1E][AF1E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 25868 00001E99 00                      	db	0		; no switches
 25869 00001E9A 00                      	db	0		; no keywords
 25870                                  
 25871                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 25872                                  stks_pos_1:
 25873 00001E9B 0080                    	dw	8000h
 25874 00001E9D 0000                    	dw	0
 25875 00001E9F [BB1D]                  	dw	result_val	
 25876 00001EA1 [A41E]                  	dw	stks_range
 25877 00001EA3 00                      	db	0
 25878                                  
 25879                                  ;stks_range p_range <,,,0,64>
 25880                                  stks_range:
 25881 00001EA4 01                      	db	1
 25882 00001EA5 01                      	db	1
 25883 00001EA6 01                      	db	1
 25884 00001EA7 00000000                	dd	0
 25885 00001EAB 40000000                	dd	64
 25886                                  
 25887                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 25888                                  stks_pos_2:
 25889 00001EAF 0080                    	dw	8000h
 25890 00001EB1 0000                    	dw	0
 25891 00001EB3 [BB1D]                  	dw	result_val	
 25892 00001EB5 [B81E]                  	dw	stk_size_range
 25893 00001EB7 00                      	db	0
 25894                                  
 25895                                  ;stk_size_range p_range <,,,0,512>
 25896                                  stk_size_range:
 25897 00001EB8 01                      	db	1
 25898 00001EB9 01                      	db	1
 25899 00001EBA 01                      	db	1
 25900 00001EBB 00000000                	dd	0
 25901 00001EBF 00020000                	dd	512	
 25902                                  
 25903                                  p_stack_count:
 25904 00001EC3 0000                    	dw	0	; local variable
 25905                                  p_stack_size:
 25906 00001EC5 0000                    	dw	0	; local variable
 25907                                  
 25908                                  ;-----------------------------------------------------------------------
 25909                                  
 25910                                  	; 27/10/2022
 25911                                  
 25912                                  ; multitrack = [ on | off ]
 25913                                  
 25914                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25915                                  mtrk_parms:
 25916 00001EC7 [CC1E]                  	dw	mtrk_parmsx
 25917 00001EC9 01                      	db	1
 25918 00001ECA 01                      	db	1
 25919 00001ECB 3B                      	db	';'
 25920                                  
 25921                                  mtrk_parmsx:
 25922 00001ECC 0101[D21E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25923 00001ED0 00                      	db	0		; no switches
 25924 00001ED1 00                      	db	0		; no keywords
 25925                                  
 25926                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25927                                  mtrk_pos:
 25928 00001ED2 0020                    	dw	2000h
 25929 00001ED4 0000                    	dw	0
 25930 00001ED6 [BB1D]                  	dw	result_val	
 25931 00001ED8 [D71D]                  	dw	on_off_string
 25932 00001EDA 00                      	db	0
 25933                                  
 25934 00001EDB 00                      p_mtrk:	db	0		; local variable
 25935                                  
 25936                                  ;-----------------------------------------------------------------------
 25937                                  
 25938                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25939                                  	; (SYSINIT:20B2h)
 25940                                  
 25941                                  ; switches=/k
 25942                                  
 25943                                  ;swit_parms p_parms <swit_parmsx>
 25944                                  swit_parms:
 25945 00001EDC [E11E]                  	dw	swit_parmsx
 25946 00001EDE 01                      	db	1
 25947 00001EDF 01                      	db	1
 25948 00001EE0 3B                      	db	';'
 25949                                  
 25950                                  swit_parmsx:
 25951 00001EE1 0000                    	dw	0		; no positionals
 25952                                  	; 08/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 25953 00001EE3 05                      	db	5               ; # of switches
 25954                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25955                                  	;db	3
 25956 00001EE4 [EF1E]                  	dw	swit_k_ctrl	; /k control
 25957                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 25958 00001EE6 [FB1E]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 25959 00001EE8 [071F]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 25960 00001EEA [131F]                  	dw	swit_t_ctrl     ; /t control
 25961 00001EEC [1F1F]                  	dw	swit_w_ctrl     ; /w control
 25962 00001EEE 00                      	db	0		; no keywords
 25963                                  
 25964                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25965                                  swit_k_ctrl:
 25966 00001EEF 00000000[BB1D]-         	dw	0,0,result_val,noval
 25966 00001EF5 [BA1D]             
 25967 00001EF7 01                      	db	1
 25968 00001EF8 2F4B00                  swit_k:	db	'/K',0
 25969                                  
 25970                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 25971                                  ; (SYSINIT:220Ch) ; *
 25972                                  
 25973                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25974                                  ;
 25975                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25976                                  swit_n_ctrl: ; *
 25977 00001EFB 00000000[BB1D]-         	dw	0,0,result_val,noval
 25977 00001F01 [BA1D]             
 25978 00001F03 01                      	db	1
 25979 00001F04 2F4E00                  swit_n: db	'/N',0
 25980                                  
 25981                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25982                                  swit_f_ctrl: ; *
 25983 00001F07 00000000[BB1D]-         	dw	0,0,result_val,noval
 25983 00001F0D [BA1D]             
 25984 00001F0F 01                      	db	1
 25985 00001F10 2F4600                  swit_f: db 	'/F',0
 25986                                  
 25987                                  	; 27/10/2022
 25988                                  
 25989                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25990                                  swit_t_ctrl:
 25991 00001F13 00000000[BB1D]-         	dw	0,0,result_val,noval
 25991 00001F19 [BA1D]             
 25992 00001F1B 01                      	db	1
 25993 00001F1C 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25994                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25995                                  swit_w_ctrl:
 25996 00001F1F 00000000[BB1D]-         	dw	0,0,result_val,noval
 25996 00001F25 [BA1D]             
 25997 00001F27 01                      	db	1
 25998 00001F28 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25999                                  
 26000                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 26001                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 26002                                  ;   in the above table to prevent the parsing code from complaining about them
 26003                                  
 26004 00001F2B 00                      p_swit_k:	db     0	; local variable
 26005 00001F2C 00                      p_swit_t:	db     0	; local variable			M059
 26006 00001F2D 00                      p_swit_w:	db     0	; local variable			M063
 26007                                  
 26008                                  ;-----------------------------------------------------------------------
 26009                                  
 26010                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26011                                  	; (SYSINIT:20E8h)
 26012                                  
 26013                                  ; DOS = [ high | low ]
 26014                                  
 26015                                  ;dos_parms p_parms  <dos_parmsx>
 26016                                  dos_parms:
 26017 00001F2E [331F]                  	dw	dos_parmsx
 26018 00001F30 01                      	db	1
 26019 00001F31 01                      	db	1
 26020 00001F32 3B                      	db	';'
 26021                                  dos_parmsx:
 26022 00001F33 01                      	db	1		; min parameters
 26023 00001F34 02                      	db	2		; max parameters
 26024 00001F35 [3B1F]                  	dw	dos_pos		; 
 26025 00001F37 [3B1F]                  	dw	dos_pos		; 
 26026 00001F39 00                      	db	0		; no switches
 26027 00001F3A 00                      	db	0		; no keywords
 26028                                  
 26029                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 26030                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 26031                                  dos_pos:
 26032 00001F3B 00200000[BB1D]-         	dw	2000h,0,result_val,dos_strings
 26032 00001F41 [4D1F]             
 26033 00001F43 00                      	db	0
 26034 00001F44 00200000[BB1D]-         	dw	2000h,0,result_val,dos_strings
 26034 00001F4A [4D1F]             
 26035 00001F4C 00                      	db	0	
 26036                                  
 26037                                  dos_strings:	;label	byte
 26038 00001F4D 03                      	db	3		; signals that there is a string choice
 26039 00001F4E 00                      	db	0		; no range definition
 26040 00001F4F 00                      	db	0		; no numeric values choice
 26041 00001F50 04                      	db	4		; 4 strings for choice
 26042 00001F51 01                      	db	1		; the 1st string tag
 26043 00001F52 [5D1F]                  	dw	hi_string
 26044 00001F54 02                      	db	2		; the 2nd string tag
 26045 00001F55 [621F]                  	dw	lo_string
 26046 00001F57 03                      	db	3
 26047 00001F58 [661F]                  	dw	umb_string
 26048 00001F5A 04                      	db	4
 26049 00001F5B [6A1F]                  	dw	noumb_string
 26050                                  
 26051 00001F5D 4849474800              hi_string:	db	"HIGH",0
 26052 00001F62 4C4F5700                lo_string:	db	"LOW",0
 26053 00001F66 554D4200                umb_string:	db	"UMB",0
 26054 00001F6A 4E4F554D4200            noumb_string:	db	"NOUMB",0
 26055                                  
 26056 00001F70 00                      p_dos_hi:	db	0	; local variable
 26057                                  				; BUGBUG : I dont know whether PARSER uses
 26058                                  				;          this variable or not
 26059                                  
 26060                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26061                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26062                                  ;%if 0
 26063                                  
 26064                                  ;****************************************************************** RICHID ****
 26065                                  
 26066                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 26067                                  
 26068                                  ; 30/03/2019 - Retro DOS v4.0
 26069                                  ;------------------------------------------------------------------------------
 26070                                  
 26071                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 26072                                  ;
 26073                                  ;   Date:     May 14, 1992
 26074                                  ;
 26075                                  ;******************************************************************************
 26076                                  ;
 26077                                  ;   Modification log:
 26078                                  ;
 26079                                  ;     DATE    WHO      DESCRIPTION
 26080                                  ;   --------  -------  --------------------------------------------------------
 26081                                  ;   05/14/92  t-richj  Original
 26082                                  ;   06/21/92  t-richj  Final revisions before check-in
 26083                                  ;
 26084                                  ;******************************************************************************
 26085                                  ;
 26086                                  ; There are two primary definitions which need to be made, selectively, before
 26087                                  ; this include file should be used.  These are:
 26088                                  ;    HV_Extern - If this has been defined, variables for this module will be
 26089                                  ;                declared as external.  Otherwise, variables will be declared
 26090                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 26091                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 26092                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 26093                                  ;                (as only one module, sysconf.asm, includes this file).
 26094                                  ;    HV_LoadHigh - This should be defined when this module is going into
 26095                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 26096                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 26097                                  ;
 26098                                  ;******************************************************************************
 26099                                  
 26100                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 26101                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 26102                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 26103                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 26104                                  ; space problem (it's just such a nice round number, eh?).
 26105                                  
 26106                                  MAXUMB	equ	16
 26107                                  
 26108                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 26109                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 26110                                  
 26111                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 26112                                  SystemPSPOwner	equ	8
 26113                                  ;JapanPSPOwner	equ	9
 26114                                  
 26115                                  ; for LoadHigh and DeviceHigh:
 26116                                  ;
 26117                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 26118                                  ;	          UnHideUMBs().
 26119                                  ;	fUmbTiny - Is set to 1 if the user has specified /S on the command-
 26120                                  ;	           line.
 26121                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 26122                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 26123                                  ;	          given a command-line like "/L:3,500;4"
 26124                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 26125                                  ;	          matching its index number was specified on the command-line;
 26126                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 26127                                  ;	          will be set to 1. All others will be set to 0.
 26128                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 26129                                  ;	          specified by the user for a UMB (in the above example, all
 26130                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 26131                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 26132                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 26133                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 26134                                  ;	           for details).
 26135                                  
 26136 00001F71 00                      fInHigh:  db	0
 26137 00001F72 00                      fUmbTiny: db	0
 26138 00001F73 0000                    SegLoad:  dw	0
 26139 00001F75 00                      UmbLoad:  db	0
 26140 00001F76 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 26141 00001F86 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 26142 00001FA6 00                      fm_umb:   db	0
 26143 00001FA7 00                      fm_strat: db	0
 26144 00001FA8 00                      fm_argc:  db	0	
 26145                                  
 26146                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 26147                                  ; UmbLoad is set to the UMB number given.
 26148                                  
 26149                                  UNSPECIFIED	equ	-1
 26150                                  
 26151                                  ;%endif ; 27/10/2022
 26152                                  
 26153                                  ;****************************************************************** RICHID ****
 26154                                  
 26155                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 26156                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 26157                                  
 26158                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26159                                  ; (SYSINIT:212Bh)	
 26160                                  
 26161                                  		;public	DevEntry
 26162                                  
 26163 00001FA9 0000                    DevSize:	dw	0	; size of the device driver being loaded (paras)
 26164 00001FAB 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 26165 00001FAD 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 26166 00001FAF 00000000                DevEntry:	dd	0	; Entry point to the device driver
 26167 00001FB3 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 26168                                  ; 30/12/2022
 26169                                  ; 27/10/2022 
 26170 00001FB7 00                      ConvLoad:	db	0	; Use conventional (dos 5 style) InitDevLoad?
 26171                                  ;
 26172 00001FB8 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 26173 00001FB9 0000                    DevUMBAddr:	dw	0	; current UMB used for loading devices (paras)
 26174 00001FBB 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 26175 00001FBD 0000                    DevUMBFree:	dw	0	; Start of free mem blk in the current UMB (paras)
 26176                                  ;
 26177 00001FBF 00000000                DevXMSAddr:	dd	0
 26178                                  ;
 26179 00001FC3 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 26180 00001FC5 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 26181                                  ;
 26182 00001FC7 00                      DeviceHi:	db	0	; Flag indicating whether the current device
 26183                                  				;  is being loaded into UMB
 26184 00001FC8 0000                    DevSizeOption:	dw	0	; SIZE= option
 26185                                  ;
 26186 00001FCA 00                      Int12Lied:	db	0	; did we trap int 12h ?
 26187 00001FCB 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12h ram)
 26188 00001FCD 50524F544D414E24        ThreeComName:	db	'PROTMAN$' ; 3Com Device name
 26189                                  ;
 26190 00001FD5 00                      FirstUMBLinked:	db	0
 26191 00001FD6 0000                    DevDOSData:	dw	0	; segment of DOS Data
 26192 00001FD8 00000000                DevCmdLine:	dd	0	; Current Command line
 26193 00001FDC 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 26194                                  				; to use the file name in the command line
 26195                                  ;
 26196                                  ;	ifdef	dblspace_hooks
 26197                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 26198                                  ;	endif
 26199                                  
 26200                                  ; ===========================================================================
 26201                                  
 26202                                  ; 31/03/2019 - Retro DOS v4.0
 26203                                  
 26204                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26205                                  ; (SYSINIT:215Eh)
 26206                                  
 26207                                  ;----------------------------------------------------------------------------
 26208                                  ;
 26209                                  ; procedure : doconf
 26210                                  ;
 26211                                  ;             Config file is parsed initially with this routine. For the
 26212                                  ;             Subsequent passes 'multi_pass' entry is used .
 26213                                  ;
 26214                                  ;----------------------------------------------------------------------------
 26215                                  
 26216                                  	; 27/10/2022
 26217                                  doconf:
 26218 00001FDD 0E                      	push	cs
 26219 00001FDE 1F                      	pop	ds
 26220                                  
 26221 00001FDF B80037                  	mov	ax,3700h
 26222                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 26223 00001FE2 CD21                    	int	21h
 26224 00001FE4 8816[E146]              	mov	[command_line+1],dl	; set in default command line
 26225                                  
 26226                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 26227                                  ; 27/10/2022
 26228                                  ;;ifdef	MULTI_CONFIG
 26229                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 26230 00001FE8 8816[DF46]              	mov	[def_swchr],dl ; 31/03/2019 
 26231                                  ;;endif	;MULTI_CONFIG
 26232                                  
 26233 00001FEC BA[F645]                	mov	dx,config ;'\CONFIG.SYS' ; now pointing to file description
 26234 00001FEF B8003D                  	mov	ax,3D00h
 26235                                  	;mov	ax,OPEN<<8		; open file "config.sys"
 26236 00001FF2 F9                      	stc				; in case of int 24h
 26237 00001FF3 CD21                    	int	21h			; function request
 26238 00001FF5 7309                    	jnc	short noprob		; brif opened okay
 26239                                  
 26240                                  ; 31/12/2022
 26241                                  ; 27/10/2022
 26242                                  ;;ifdef	MULTI_CONFIG
 26243 00001FF7 E83919                  	call	kbd_read		; we still want to give the guy
 26244                                  ;					; a chance to select clean boot!
 26245                                  ;;endif					; (ie, no autoexec.bat processing)
 26246 00001FFA C606[CB02]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 26247 00001FFF C3                      	retn
 26248                                  noprob: 				; get file size (note < 64k!!)
 26249 00002000 89C3                    	mov	bx,ax  ; File handle
 26250 00002002 31C9                    	xor	cx,cx
 26251 00002004 31D2                    	xor	dx,dx
 26252                                  	;mov	ax,4202h
 26253 00002006 B80242                  	mov	ax,(LSEEK<<8)|2
 26254 00002009 CD21                    	int	21h
 26255 0000200B A3[5403]                	mov	[count],ax
 26256                                  
 26257 0000200E 31D2                    	xor	dx,dx
 26258                                  	;mov	ax,4200h
 26259 00002010 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 26260 00002013 CD21                    	int	21h
 26261                                  
 26262                                  	; 31/12/2022 - Retro DOS v4.2 
 26263 00002015 8B16[A302]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 26264                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26265                                  	;mov	dx,[top_of_cdss] 
 26266                                  
 26267 00002019 A1[5403]                	mov	ax,[count]
 26268 0000201C A3[CE02]                	mov	[config_size],ax	;save the size of config.sys file.
 26269 0000201F E846F1                  	call	ParaRound
 26270 00002022 29C2                    	sub	dx,ax
 26271                                  
 26272                                  ; 31/12/2022
 26273                                  ; 27/10/2022
 26274                                  ;ifdef	MULTI_CONFIG
 26275                                  ;
 26276                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 26277                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 26278                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 26279                                  ;  we (may) add a variable to the environment that does not explicity appear
 26280                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 26281                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 26282                                  ;  of extra space, so here we account for it (the worst case of course is
 26283                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 26284                                  ;
 26285 00002024 4A                      	dec	dx                      ;reserve 1 additional paragraph
 26286 00002025 8916[DB14]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 26287 00002029 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 26288                                  ;;endif	;MULTI_CONFIG
 26289                                  
 26290 0000202B 83EA11                  	sub	dx,11h			;room for header
 26291                                  	
 26292                                  	; 31/12/2022
 26293 0000202E 8916[A302]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 26294 00002032 8916[A102]              	mov	[CONFBOT],dx
 26295                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26296                                  	;mov	[top_of_cdss],dx
 26297                                  	;call    TempCDS 
 26298                                  	
 26299                                  	; 31/12/2022
 26300                                  	; 11/12/2022
 26301                                  	; ds <> cs 
 26302                                  	;mov	dx,[cs:top_of_cdss]
 26303                                   
 26304 00002036 8EDA                    	mov	ds,dx
 26305 00002038 8EC2                    	mov	es,dx
 26306                                  
 26307 0000203A 31D2                    	xor	dx,dx
 26308 0000203C 2E8B0E[5403]            	mov	cx,[cs:count]
 26309 00002041 B43F                    	mov	ah,3Fh
 26310                                  	;mov	ah,READ  ; 3Fh
 26311 00002043 F9                      	stc				;in case of int 24h
 26312 00002044 CD21                    	int	21h			;function request
 26313 00002046 9C                      	pushf
 26314                                  
 26315                                  ; find the eof mark in the file. if present,then trim length.
 26316                                  
 26317 00002047 50                      	push	ax
 26318 00002048 57                      	push	di
 26319 00002049 51                      	push	cx
 26320 0000204A B01A                    	mov	al,1Ah			; eof mark
 26321 0000204C 89D7                    	mov	di,dx			; point to buffer
 26322 0000204E E305                    	jcxz	puteol			; no chars
 26323 00002050 F2AE                    	repnz	scasb			; find end
 26324 00002052 7501                    	jnz	short puteol		; none found and count exhausted
 26325                                  
 26326                                  ; we found a 1a. back up
 26327                                  
 26328 00002054 4F                      	dec	di			; backup past 1Ah
 26329                                  
 26330                                  ;  just for the halibut, stick in an extra eol
 26331                                  
 26332                                  puteol:
 26333 00002055 B00D                    	mov	al,cr ; 0Dh
 26334 00002057 AA                      	stosb
 26335 00002058 B00A                    	mov	al,lf  ;0Ah
 26336 0000205A AA                      	stosb
 26337 0000205B 29D7                    	sub	di,dx			; difference moved
 26338                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26339                                  	;mov	[cs:count],di		; new count
 26340                                  
 26341                                  	; 11/12/2022	
 26342                                  	; 31/03/2019 - Retro DOS v4.0
 26343 0000205D 0E                      	push	cs
 26344 0000205E 1F                      	pop	ds
 26345                                  
 26346 0000205F 893E[5403]              	mov	[count],di		; new count
 26347                                  
 26348 00002063 59                      	pop	cx
 26349 00002064 5F                      	pop	di
 26350 00002065 58                      	pop	ax
 26351                                  
 26352                                  	; 11/12/2022
 26353                                  	; 27/10/2022
 26354                                  	;push	cs
 26355                                  	;pop	ds
 26356                                  
 26357 00002066 50                      	push	ax
 26358                                  	;mov	ah,CLOSE
 26359 00002067 B43E                    	mov	ah,3Eh
 26360 00002069 CD21                    	int	21h
 26361 0000206B 58                      	pop	ax
 26362 0000206C 9D                      	popf
 26363 0000206D 7204                    	jc	short conferr 		;we've got a problem
 26364 0000206F 39C1                    	cmp	cx,ax			; if ax <(>) cx
 26365 00002071 742D                    	jz	short getcom		;couldn't read the file
 26366                                  conferr:
 26367 00002073 BA[F645]                	mov	dx,config		;print config error
 26368 00002076 E8D324                  	call	badfil
 26369                                  ;endconv:	; 01/01/2023
 26370 00002079 C3                      	retn
 26371                                  
 26372                                  ;----------------------------------------------------------------------------
 26373                                  ;
 26374                                  ; entry : multi_pass
 26375                                  ;
 26376                                  ;             called to execute device=,install= commands
 26377                                  ;
 26378                                  ;----------------------------------------------------------------------------
 26379                                  
 26380                                  	; 27/10/2022
 26381                                  multi_pass:
 26382 0000207A 0E                      	push	cs
 26383 0000207B 1F                      	pop	ds
 26384                                  
 26385 0000207C 803E[CB02]0A            	cmp	byte [multi_pass_id],10
 26386                                  ;jae_endconv:
 26387 00002081 731C                    	jae	short endconv 		; do nothing. just return.
 26388                                  
 26389                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26390 00002083 FF36[A102]              	push	word [CONFBOT]
 26391                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26392                                  	;push	word [top_of_cdss]
 26393 00002087 07                      	pop	es			; es = [confbot] (CONFIG.SYS image seg)
 26394                                  
 26395 00002088 8B36[5603]              	mov	si,[org_count]
 26396 0000208C 8936[5403]              	mov	[count],si		; set count
 26397 00002090 31F6                    	xor	si,si ; 0
 26398 00002092 8936[5803]                      mov     [chrptr],si		; reset chrptr
 26399 00002096 8936[AD02]                      mov     [linecount],si		; reset linecount
 26400                                  
 26401 0000209A E8F408                  	call	getchr
 26402 0000209D EB07                    	jmp	short conflp
 26403                                  
 26404                                  	; 01/01/2023
 26405                                  endconv:
 26406 0000209F C3                      	retn	
 26407                                  
 26408                                  getcom:
 26409                                  	; 03/01/2023
 26410                                  	; ds = cs
 26411 000020A0 E84E16                          call    organize                ; organize the file
 26412 000020A3 E8EB08                  	call	getchr
 26413                                  conflp: 
 26414 000020A6 72F7                    	jc	short endconv
 26415                                  
 26416 000020A8 FF06[AD02]                      inc     word [linecount]	; increase linecount
 26417                                  
 26418 000020AC C606[DF14]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 26419 000020B1 C606[E214]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 26420 000020B6 3C0A                    	cmp	al,lf			; linefeed?
 26421 000020B8 7449                    	je	short blank_line	; then ignore this line.
 26422                                  
 26423                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26424                                  ; (SYSINIT:23CCh)
 26425                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26426                                  ;%if 0
 26427                                  
 26428                                  ;ifdef	MULTI_CONFIG
 26429                                  
 26430                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 26431                                  ;   number immediately following it....
 26432                                  
 26433 000020BA A2[DD14]                        mov     [config_cmd],al         ; save original command code
 26434                                  	;and	al,NOT CONFIG_OPTION_QUERY
 26435 000020BD 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 26436 000020BF 803E[DE14]00                    cmp     byte [config_multi],0	; is this a multi-config config.sys?
 26437 000020C4 7427                            je      short not_final		; no, line number is not embedded
 26438                                  
 26439 000020C6 50                              push    ax                      ;
 26440 000020C7 E8C708                          call    getchr                  ; ignore end-of-image errors,
 26441 000020CA 88C4                            mov     ah,al                   ; because if there's an error
 26442 000020CC E8C208                          call    getchr                  ; fetching the line number that's
 26443 000020CF 86C4                            xchg    al,ah                   ; supposed to be there, the next
 26444 000020D1 A3[AD02]                        mov     [linecount],ax          ; getchr call will get the same error
 26445 000020D4 58                              pop     ax
 26446                                  ;
 26447                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 26448                                  ;   which to obtain its original program name, it grovels through all of
 26449                                  ;   memory to find the filename that was used to exec it; it wants to find
 26450                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 26451                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 26452                                  ;   immediately before the filename, but since we are now storing line # info
 26453                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 26454                                  ;   spot.
 26455                                  ;
 26456                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 26457                                  ;   over the line number info, since we no longer need that info anyway. This
 26458                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 26459                                  ;   retrieved.
 26460                                  ;
 26461 000020D5 803E[CB02]02                    cmp	byte [multi_pass_id],2	; final pass?
 26462 000020DA 7211                            jb	short not_final		; no
 26463                                          ;test	word [install_flag],have_install_cmd
 26464 000020DC F606[CC02]01            	test	byte [install_flag],have_install_cmd ; 1
 26465 000020E1 7407                            jz	short final		; no install cmds, so yes it is
 26466 000020E3 803E[CB02]03                    cmp	byte [multi_pass_id],3	; final pass?
 26467 000020E8 7203                            jb	short not_final		; no
 26468                                  final:                                  ;
 26469 000020EA 268804                  	mov	[es:si],al		; save backward-compatible command code
 26470                                  not_final:                              ;
 26471                                  ;endif
 26472                                  
 26473                                  ; 31/12/2022
 26474                                  ;%endif ; 27/10/2022
 26475                                  
 26476 000020ED 88C4                    	mov	ah,al
 26477 000020EF E89F08                  	call	getchr
 26478 000020F2 7314                    	jnc	short tryi
 26479                                  
 26480 000020F4 803E[CB02]02            	cmp	byte [multi_pass_id],2
 26481                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 26482                                  	; 27/10/2022
 26483 000020F9 73A4                    	jnb	short endconv	
 26484 000020FB E95F08                  	jmp	badop
 26485                                  	
 26486                                  coff:	
 26487                                  	; 11/12/2022
 26488                                  	; ds = cs
 26489                                  	;push	cs
 26490                                  	;pop	ds
 26491 000020FE E8CB21                  	call	newline
 26492 00002101 EBA3                    	jmp	short conflp	; 13/05/2019
 26493                                  
 26494                                  blank_line:
 26495 00002103 E88B08                  	call	getchr
 26496 00002106 EB9E                    	jmp	short conflp
 26497                                  
 26498                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26499                                  ; 11/12/2022
 26500                                  ; (there is not a jump or call to here from anywhere!)
 26501                                  ;coff_p:
 26502                                  	;push	cs
 26503                                  	;pop	ds
 26504                                  
 26505                                  ;to handle install= commands,we are going to use multi-pass.
 26506                                  ;the first pass handles the other commands and only set install_flag when
 26507                                  ;it finds any install command. the second pass will only handle the
 26508                                  ;install= command.
 26509                                  
 26510                                  ;------------------------------------------------------------------------------
 26511                                  ;install command
 26512                                  ;------------------------------------------------------------------------------
 26513                                  
 26514                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26515                                  	; (SYSINIT:2250h)
 26516                                  tryi:
 26517 00002108 803E[CB02]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 26518 0000210D 7503                    	jne	short not_init_pass
 26519 0000210F E97F01                  	jmp	multi_try_doshi
 26520                                  not_init_pass:
 26521 00002112 803E[CB02]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 26522                                          ; 11/12/2022
 26523                                  	;je	short multi_pass_coff2	; now it is NOPs
 26524 00002117 74E5                    	je	short coff
 26525                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26526                                  	;je	short multi_pass_coff	
 26527                                  					; This pass can be made use of if
 26528                                  					; we want do some config.sys process
 26529                                  					; after device drivers are loaded
 26530                                  					; and before install= commands
 26531                                  					; are processed
 26532                                  
 26533 00002119 803E[CB02]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 26534 0000211E 741D                    	je	short multi_try_i
 26535 00002120 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 26536                                  	; 11/12/2022
 26537                                  	;je	short multi_pass_coff2
 26538 00002123 74D9                    	je	short coff
 26539                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26540                                  	;je	short multi_pass_coff	
 26541                                  
 26542                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 26543                                  ;       but don't process them now.        
 26544                                          
 26545 00002125 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 26546                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26547 00002128 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 26548                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26549                                  	;jne	short tryb	
 26550                                  	
 26551                                  	;or	word [install_flag],have_install_cmd ; set the flag
 26552 0000212A 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 26553                                  multi_pass_coff2:
 26554 0000212F EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 26555                                  
 26556                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26557                                  ; (SYSINIT:2448h)
 26558                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26559                                  ;%if 0
 26560                                  precheck_installhigh:
 26561 00002131 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 26562 00002134 756B                    	jne     short tryb		; carry on with normal processing
 26563                                  	;or	word [install_flag],have_install_cmd
 26564 00002136 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 26565 0000213B EBC1                    	jmp	short coff
 26566                                  ;%endif ; 27/10/2022
 26567                                  
 26568                                  multi_try_i:
 26569 0000213D 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 26570                                  	; 31/12/2022 - Retro DOS v4.2
 26571 00002140 750A                    	jne	short multi_try_n	; no, check for installhigh
 26572                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26573                                  	;jne	short multi_pass_filter
 26574                                  
 26575                                  ; 31/12/2022
 26576                                  ;%if 1 
 26577                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26578                                  ;%if 0
 26579                                  ;ifdef	MULTI_CONFIG
 26580 00002142 E8FC1F                  	call	query_user              ; query the user if config_cmd
 26581 00002145 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26582                                  ;endif
 26583                                  ;%endif ; 27/10/2022
 26584                                  
 26585 00002147 E89DEF                  	call	do_install_exec 	;install it.
 26586 0000214A EBB2                    	jmp	short coff		;to handle next install= command.
 26587                                  
 26588                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26589                                  ; (SYSINIT:2463h)
 26590                                  ;%if 1
 26591                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26592                                  ;%if 0
 26593                                  
 26594                                  multi_try_n:
 26595 0000214C 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 26596 0000214F 7537                            jne	short multi_pass_filter	; no. ignore this.
 26597                                  ;ifdef	MULTI_CONFIG
 26598 00002151 E8ED1F                          call    query_user              ; query the user if config_cmd
 26599 00002154 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26600                                  ;endif
 26601                                  
 26602                                  ;       The memory environment is in its normal DOS state, so do
 26603                                  ;       the standard calls to set the alloc strategy for loading high
 26604                                  
 26605 00002156 B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 26606 00002159 CD21                    	int	21h			;get alloc strategy
 26607 0000215B 89C3                    	mov	bx,ax
 26608 0000215D 53                              push    bx                      ; save for the return
 26609                                  
 26610 0000215E 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 26611 00002162 B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 26612 00002165 CD21                    	int	21h			;set alloc strategy
 26613                                  
 26614 00002167 B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 26615 0000216A CD21                            int     21h                     ; get link state
 26616 0000216C 30E4                            xor     ah,ah                   ; clear top byte
 26617 0000216E 50                              push    ax                      ; save for return
 26618                                  
 26619 0000216F B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 26620 00002172 BB0100                  	mov	bx,1
 26621 00002175 CD21                    	int	21h			;link in UMBs
 26622                                  
 26623 00002177 E86DEF                  	call	do_install_exec 	;install it.
 26624                                  
 26625 0000217A B80358                          mov     ax,(ALLOCOPER<<8)|3
 26626 0000217D 5B                              pop     bx                      ; recover original link state
 26627 0000217E CD21                            int     21h
 26628 00002180 5B                              pop     bx                      ; recover original alloc strategy
 26629 00002181 B80158                          mov     ax,(ALLOCOPER<<8)|1
 26630 00002184 CD21                            int     21h
 26631                                  
 26632                                  	;jmp	short coff		;to handle next install= command.
 26633                                  	; 01/01/2023
 26634 00002186 EBA7                    	jmp	short multi_pass_coff2
 26635                                  
 26636                                  ;%endif ; 27/10/2022
 26637                                  
 26638                                  multi_pass_filter:
 26639 00002188 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 26640 0000218B 740A                    	je	short multi_pass_adjust
 26641 0000218D 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 26642 00002190 7405                    	je	short multi_pass_adjust
 26643 00002192 80FC30                          cmp     ah,CONFIG_REM     ; '0' ; rem?
 26644 00002195 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 26645                                  
 26646                                  multi_pass_adjust:			; these commands need to
 26647 00002197 FF0E[5803]              	dec	word [chrptr]		;  adjust chrptr,count
 26648 0000219B FF06[5403]              	inc	word [count]		;  for newline proc.
 26649                                  
 26650                                  multi_pass_coff:
 26651                                  	; 11/12/2022
 26652                                  	;jmp	short coff		; to handle next install= commands.
 26653                                  	; 01/01/2023
 26654 0000219F EB8E                    	jmp	short multi_pass_coff2
 26655                                  
 26656                                  ;------------------------------------------------------------------------------
 26657                                  ; buffer command
 26658                                  ;------------------------------------------------------------------------------
 26659                                  
 26660                                  ;******************************************************************************
 26661                                  ;									      *
 26662                                  ; function: parse the parameters of buffers= command.			      *
 26663                                  ;									      *
 26664                                  ; input :								      *
 26665                                  ;	es:si -> parameters in command line.				      *
 26666                                  ; output:								      *
 26667                                  ;	buffers set							      *
 26668                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 26669                                  ;	h_buffers set if secondary buffer cache specified.		      *
 26670                                  ;									      *
 26671                                  ; subroutines to be called:						      *
 26672                                  ;	sysinit_parse							      *
 26673                                  ; logic:								      *
 26674                                  ; {									      *
 26675                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 26676                                  ;	set dx,cx to 0; 						      *
 26677                                  ;	reset buffer_slash_x;						      *
 26678                                  ;	while (end of command line)					      *
 26679                                  ;	{ sysinit_parse;						      *
 26680                                  ;	  if (no error) then						      *
 26681                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 26682                                  ;		    buffer_slash_x = 1					      *
 26683                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 26684                                  ;			  buffers = result_val._$P_picked_val;		      *
 26685                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 26686                                  ;	  else	{show error message;error exit} 			      *
 26687                                  ;	};								      *
 26688                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 26689                                  ; };									      *
 26690                                  ;									      *
 26691                                  ;******************************************************************************
 26692                                  
 26693                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26694                                  	; (SYSINIT:229Ch)
 26695                                  tryb:
 26696 000021A1 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 26697 000021A4 755C                    	jne	short tryc
 26698                                  
 26699                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26700                                  ; (SYSINIT:24BFh)
 26701                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26702                                  ;%if 0
 26703                                  ;ifdef	MULTI_CONFIG
 26704 000021A6 E8981F                  	call	query_user		; query the user if config_cmd
 26705 000021A9 7257                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 26706                                  ;endif
 26707                                  ;%endif ; 27/10/2022
 26708                                  
 26709                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26710                                  	; 18/12/2022
 26711 000021AB 31C9                    	xor	cx,cx
 26712                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 26713 000021AD 880E[B91D]              	mov	[p_buffer_slash_x],cl ; 0
 26714                                  
 26715 000021B1 BF[721D]                	mov	di,buf_parms
 26716                                  	;xor	cx,cx	; 18/12/2022
 26717                                  	; 03/01/2023
 26718                                  	;mov	dx,cx
 26719                                  do7:
 26720 000021B4 E88307                  	call	sysinit_parse
 26721 000021B7 7303                    	jnc	short if7		; parse error,
 26722                                  	;call	badparm_p		;  and show messages and end the search loop.
 26723                                  	;;jmp	short sr7
 26724                                  	; 31/12/2022
 26725                                  ;sr7:
 26726                                  	;jmp	coff
 26727                                  	; 03/01/2023
 26728 000021B9 E9AA06                  	jmp	badparm_p_coff
 26729                                  if7:
 26730 000021BC 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26731 000021BF 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 26732                                  	;cmp	word [result_val_swoff],switch_x ; (/X switch)
 26733 000021C1 813E[BD1D][B21D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 26734                                  	;jne	short if11
 26735                                  	; 31/12/2022
 26736 000021C7 74EB                    	je	short do7 ;je short en11
 26737                                  
 26738                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 26739                                  	;jmp	short en11 ; 31/12/2022
 26740                                  if11:
 26741                                  	;mov	ax,[rv_dword]
 26742 000021C9 A1[BF1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26743 000021CC 83F901                  	cmp	cx,1
 26744 000021CF 7505                    	jne	short if13
 26745                                  
 26746 000021D1 A3[B51D]                	mov	[p_buffers],ax
 26747                                  	;jmp	short en11
 26748                                  	; 31/12/2022
 26749 000021D4 EBDE                    	jmp	short do7
 26750                                  if13:
 26751 000021D6 A3[B71D]                	mov	[p_h_buffers],ax
 26752                                  en11:
 26753 000021D9 EBD9                    	jmp	short do7
 26754                                  en7:
 26755 000021DB 833E[B51D]63            	cmp	word [p_buffers],99
 26756 000021E0 760B                    	jbe	short if18
 26757                                  
 26758                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 26759                                  ;	jne	short if18
 26760                                  
 26761 000021E2 E88407                  	call	badparm_p
 26762 000021E5 C706[B71D]0000          	mov	word [p_h_buffers],0
 26763 000021EB EB12                    	jmp	short sr7
 26764                                  if18:
 26765 000021ED A1[B51D]                	mov	ax,[p_buffers]	; we don't have any problem.
 26766 000021F0 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 26767                                  
 26768 000021F3 A1[B71D]                	mov	ax,[p_h_buffers]
 26769 000021F6 A3[9902]                	mov	[h_buffers],ax
 26770                                  
 26771                                  ;	mov	al,[p_buffer_slash_x]	; M016
 26772                                  ;	mov	[buffer_slash_x],al
 26773                                  
 26774 000021F9 A1[AD02]                	mov	ax,[linecount]
 26775 000021FC A3[B702]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 26776                                  	; 31/12/2022
 26777                                  	;jmp	short sr7
 26778                                  	; 03/01/2023
 26779                                  sr7:
 26780 000021FF E9FCFE                  	jmp	coff
 26781                                  
 26782                                  ;------------------------------------------------------------------------------
 26783                                  ; break command
 26784                                  ;------------------------------------------------------------------------------
 26785                                  
 26786                                  ;****************************************************************************
 26787                                  ;									    *
 26788                                  ; function: parse the parameters of break = command.			    *
 26789                                  ;									    *
 26790                                  ; input :								    *
 26791                                  ;	es:si -> parameters in command line.				    *
 26792                                  ; output:								    *
 26793                                  ;	turn the control-c check on or off.				    *
 26794                                  ;									    *
 26795                                  ; subroutines to be called:						    *
 26796                                  ;	sysinit_parse							    *
 26797                                  ; logic:								    *
 26798                                  ; {									    *
 26799                                  ;	set di to brk_parms;						    *
 26800                                  ;	set dx,cx to 0; 						    *
 26801                                  ;	while (end of command line)					    *
 26802                                  ;	{ sysinit_parse;						    *
 26803                                  ;	  if (no error) then						    *
 26804                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 26805                                  ;		   set p_ctrl_break,on;					    *
 26806                                  ;	       else					  /*off 	 */ *
 26807                                  ;		   set p_ctrl_break,off;				    *
 26808                                  ;	  else {show message;error_exit};				    *
 26809                                  ;	};								    *
 26810                                  ;	if (no error) then						    *
 26811                                  ;	   dos function call to set ctrl_break check according to	    *
 26812                                  ; };									    *
 26813                                  ;									    *
 26814                                  ;****************************************************************************
 26815                                  
 26816                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26817                                  	; (SYSINIT:22FFh)
 26818                                  tryc:
 26819 00002202 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 26820 00002205 7539                    	jne	short trym
 26821                                  
 26822                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26823                                  ; (SYSINIT:2527h)
 26824                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26825                                  ;%if 0
 26826                                  ;ifdef	MULTI_CONFIG
 26827 00002207 E8371F                  	call	query_user              ; query the user if config_cmd
 26828 0000220A 7234                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 26829                                  ;endif
 26830                                  ;%endif ; 27/10/2022
 26831                                  
 26832 0000220C BF[C31D]                	mov	di,brk_parms
 26833 0000220F 31C9                    	xor	cx,cx
 26834                                  	; 03/01/2023
 26835                                  	;mov	dx,cx
 26836                                  do22:
 26837 00002211 E82607                  	call	sysinit_parse
 26838 00002214 7303                    	jnc	short if22		; parse error
 26839                                  	;call	badparm_p		;  show message and end the search loop.
 26840                                  	;;jmp	short sr22
 26841                                  	; 31/12/2022
 26842                                  ;sr22:
 26843                                  	;jmp	coff
 26844                                  	; 03/01/2023
 26845 00002216 E94D06                  	jmp	badparm_p_coff
 26846                                  if22:
 26847 00002219 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26848 0000221C 7415                    	je	short en22		; then end the $endloop
 26849                                  
 26850                                  	;cmp	byte [result_val_itag],1
 26851 0000221E 803E[BC1D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26852 00002223 7507                    	jne	short if26
 26853                                  
 26854 00002225 C606[E81D]01            	mov	byte [p_ctrl_break],1	; turn it on
 26855                                  	;jmp	short en26
 26856                                  	; 31/12/2022
 26857 0000222A EBE5                    	jmp	short do22
 26858                                  if26:
 26859 0000222C C606[E81D]00            	mov	byte [p_ctrl_break],0	; turn it off
 26860                                  en26:
 26861 00002231 EBDE                    	jmp	short do22		; we actually set the ctrl break
 26862                                  en22:
 26863 00002233 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 26864 00002235 B001                    	mov	al,1
 26865 00002237 8A16[E81D]              	mov	dl,[p_ctrl_break]
 26866 0000223B CD21                    	int	21h
 26867                                  	; 31/12/2022
 26868                                  	;jmp	short sr22
 26869                                  	; 03/01/2023
 26870                                  sr22:
 26871 0000223D E9BEFE                  	jmp	coff
 26872                                  
 26873                                  ;------------------------------------------------------------------------------
 26874                                  ; multitrack command
 26875                                  ;------------------------------------------------------------------------------
 26876                                  
 26877                                  ;******************************************************************************
 26878                                  ;									      *
 26879                                  ; function: parse the parameters of multitrack= command.		      *
 26880                                  ;									      *
 26881                                  ; input :								      *
 26882                                  ;	es:si -> parameters in command line.				      *
 26883                                  ; output:								      *
 26884                                  ;	turn multrk_flag on or off.					      *
 26885                                  ;									      *
 26886                                  ; subroutines to be called:						      *
 26887                                  ;	sysinit_parse							      *
 26888                                  ; logic:								      *
 26889                                  ; {									      *
 26890                                  ;	set di to brk_parms;						      *
 26891                                  ;	set dx,cx to 0; 						      *
 26892                                  ;	while (end of command line)					      *
 26893                                  ;	{ sysinit_parse;						      *
 26894                                  ;	  if (no error) then						      *
 26895                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 26896                                  ;		   set p_mtrk,on;					      *
 26897                                  ;	       else					  /*off 	 */   *
 26898                                  ;		   set p_mtrk,off;					      *
 26899                                  ;	  else {show message;error_exit};				      *
 26900                                  ;	};								      *
 26901                                  ;	if (no error) then						      *
 26902                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 26903                                  ;									      *
 26904                                  ; };									      *
 26905                                  ;									      *
 26906                                  ;******************************************************************************
 26907                                  
 26908                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26909                                  trym:
 26910 00002240 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 26911 00002243 7573                    	jne	short tryu
 26912                                  
 26913                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26914                                  ; (SYSINIT:2569h)
 26915                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26916                                  ;%if 0
 26917                                  ;ifdef	MULTI_CONFIG
 26918 00002245 E8F91E                  	call	query_user      ; query the user if config_cmd
 26919 00002248 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 26920                                  ;endif
 26921                                  ;%endif	; 27/10/2022
 26922                                  
 26923 0000224A BF[C71E]                	mov	di,mtrk_parms
 26924 0000224D 31C9                    	xor	cx,cx
 26925                                  	; 03/01/2023
 26926                                  	;mov	dx,cx
 26927                                  do31:
 26928 0000224F E8E806                  	call	sysinit_parse
 26929 00002252 7303                    	jnc	short if31	; parse error
 26930                                  	;call	badparm_p	;  show message and end the search loop.
 26931                                  	;;jmp	short sr31
 26932                                  	; 31/12/2022
 26933                                  ;sr31:
 26934                                  	;jmp	coff
 26935                                  	; 03/01/2023
 26936 00002254 E90F06                  	jmp	badparm_p_coff
 26937                                  if31:
 26938 00002257 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26939 0000225A 7415                    	je	short en31	; then end the $endloop
 26940                                  
 26941                                  	;cmp	byte [result_val_itag],1
 26942 0000225C 803E[BC1D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26943 00002261 7507                    	jne	short if35
 26944                                  
 26945 00002263 C606[DB1E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 26946                                  	;jmp	short en35
 26947                                  	; 31/12/2022
 26948 00002268 EBE5                    	jmp	short do31
 26949                                  if35:
 26950 0000226A C606[DB1E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 26951                                  en35:
 26952 0000226F EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 26953                                  en31:
 26954 00002271 1E                      	push	ds
 26955                                  	;;mov	ax,Bios_Data ; 70h
 26956                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26957                                  	; 21/10/2022
 26958 00002272 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26959 00002275 8ED8                    	mov	ds,ax
 26960                                  
 26961 00002277 2E803E[DB1E]00          	cmp	byte [cs:p_mtrk],0
 26962 0000227D 7508                    	jne	short if39
 26963                                  
 26964 0000227F C706[2705]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26965 00002285 EB06                    	jmp	short en39
 26966                                  if39:
 26967 00002287 C706[2705]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26968                                  en39:
 26969 0000228D 1F                      	pop	ds
 26970                                  	; 31/12/2022
 26971                                  	;jmp	short sr31
 26972                                  	; 03/01/2023
 26973                                  sr31:
 26974 0000228E E96DFE                  	jmp	coff
 26975                                  
 26976                                  ;----------------------------------------------------------------------------
 26977                                  ; DOS=HIGH/LOW command
 26978                                  ;----------------------------------------------------------------------------
 26979                                  
 26980                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26981                                  multi_try_doshi:
 26982 00002291 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26983 00002294 7403                    	je	short it_is_h
 26984                                  skip_it:
 26985 00002296 E9EFFE                  	jmp	multi_pass_filter
 26986                                  it_is_h:				; M003 - removed initing DevUMB
 26987                                  					;	 & runhigh
 26988                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26989                                  ; (SYSINIT:25C1h)
 26990                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26991                                  ;%if 0
 26992                                  ;ifdef	MULTI_CONFIG
 26993 00002299 E8A51E                  	call	query_user              ; query the user if config_cmd
 26994 0000229C 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26995                                  ;endif
 26996                                  ;%endif ; 27/10/2022
 26997                                  
 26998 0000229E BF[2E1F]                	mov	di,dos_parms
 26999 000022A1 31C9                    	xor	cx,cx
 27000                                  	; 03/01/2023
 27001                                  	;mov	dx,cx
 27002                                  h_do_parse:
 27003 000022A3 E89406                  	call	sysinit_parse
 27004 000022A6 7303                    	jnc	short h_parse_ok	
 27005                                  h_badparm:				; parse error
 27006                                  	; 03/01/2023
 27007                                  	;call	badparm_p		; show message and end the search loop.
 27008                                  	;;jmp	short h_end
 27009                                  	; 11/12/2022
 27010                                  ;h_end:
 27011                                  	;jmp	coff
 27012                                  	; 03/01/2023
 27013 000022A8 E9BB05                  	jmp	badparm_p_coff	
 27014                                  h_parse_ok:
 27015 000022AB 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27016 000022AE 7405                    	je	short h_end		; then end the $endloop
 27017 000022B0 E82407                  	call	ProcDOS
 27018 000022B3 EBEE                    	jmp	short h_do_parse
 27019                                  	; 11/12/2022
 27020                                  	; 03/01/2023
 27021                                  h_end:
 27022 000022B5 E946FE                  	jmp	coff
 27023                                  
 27024                                  ;-----------------------------------------------------------------------------
 27025                                  ; devicehigh command
 27026                                  ;-----------------------------------------------------------------------------
 27027                                  
 27028                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27029                                  tryu:
 27030 000022B8 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 27031 000022BB 7552                    	jne	short tryd
 27032                                  
 27033                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27034                                  ; (SYSINIT:25E9h)
 27035                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27036                                  ;%if 0
 27037                                  ;ifdef	MULTI_CONFIG
 27038 000022BD E8811E                  	call	query_user              ; query the user if config_cmd
 27039 000022C0 724D                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 27040                                  ;endif
 27041                                  ;%endif ; 28/10/2022
 27042                                  
 27043                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27044                                  ;%if 0
 27045                                  	; 01/01/2023
 27046                                  	; ds = cs
 27047                                  
 27048 000022C2 E8A907                  	call	InitVar
 27049 000022C5 E88A0F                  	call	ParseSize		; process the size= option
 27050                                  	;jnc	short tryu_0
 27051                                  	; 31/12/2022
 27052 000022C8 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 27053                                  
 27054                                  ;%endif ; 28/10/2022
 27055                                  
 27056                                  ; 31/12/2022
 27057                                  %if 0
 27058                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27059                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 27060                                  	;mov	[cs:badparm_seg], es
 27061                                  	; 11/12/2022
 27062                                  	; ds = cs
 27063                                  	mov	[badparm_off], si
 27064                                  	mov	[badparm_seg], es
 27065                                  
 27066                                  	; 31/12/2022
 27067                                  	;call	ParseSize
 27068                                  	;jnc	short tryu_2	; 28/10/2022
 27069                                  	
 27070                                  	;call	badparm_p
 27071                                  	;jmp	coff
 27072                                  	; 03/01/2023
 27073                                  	jmp	badparm_p_coff
 27074                                  %endif
 27075                                  
 27076                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27077                                  ; (SYSINIT:2606h)
 27078                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27079                                  ;%if 0
 27080                                  tryu_0:
 27081                                  	;mov	ax,[cs:DevSizeOption]
 27082                                  	; 31/12/2022
 27083 000022CA A1[C81F]                	mov	ax,[DevSizeOption] ; ds = cs
 27084 000022CD 09C0                    	or	ax,ax
 27085 000022CF 7510                    	jnz	short tryu_2
 27086                                  
 27087 000022D1 E82C08                  	call	ParseVar
 27088 000022D4 730B                    	jnc	short tryu_2
 27089                                  tryu_1:
 27090                                  	; 31/12/2022
 27091                                  	; ds = cs
 27092 000022D6 8936[E414]              	mov	[badparm_off], si
 27093 000022DA 8C06[E614]              	mov	[badparm_seg], es
 27094                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 27095                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 27096                                  	
 27097                                  	;call	badparm_p		; so all we have to do is choke and
 27098                                  	;jmp	coff			; die, rather verbosely.
 27099                                  	; 03/01/2023
 27100 000022DE E98505                  	jmp	badparm_p_coff
 27101                                  
 27102                                  ;%endif ; 28/10/2022
 27103                                  
 27104                                  tryu_2:	
 27105 000022E1 56                      	push	si
 27106 000022E2 06                      	push	es
 27107                                  tryu_3:
 27108 000022E3 268A04                  	mov	al,[es:si]
 27109 000022E6 3C0D                    	cmp	al,cr
 27110 000022E8 740C                    	je	short tryu_4
 27111 000022EA 3C0A                    	cmp	al,lf
 27112 000022EC 7408                    	je	short tryu_4
 27113 000022EE E8BF1F                  	call	delim
 27114 000022F1 7403                    	jz	short tryu_4
 27115 000022F3 46                      	inc	si
 27116 000022F4 EBED                    	jmp	short tryu_3
 27117                                  tryu_4:	
 27118                                  	; 11/12/2022
 27119                                  	; ds = cs
 27120 000022F6 A2[DC1F]                	mov	[DevSavedDelim],al
 27121                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 27122                                  					;  it with null
 27123                                  	; 18/12/2022
 27124 000022F9 29DB                    	sub	bx,bx
 27125 000022FB 26881C                  	mov	[es:si],bl ; 0
 27126                                   	;mov	byte [es:si],0
 27127                                  
 27128 000022FE 07                      	pop	es
 27129 000022FF 5E                      	pop	si
 27130                                  
 27131                                  ;------------------------------------------------------------------------------
 27132                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 27133                                  ;------------------------------------------------------------------------------
 27134                                  
 27135                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27136                                  ; (SYSINIT:2642h)
 27137                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27138                                  ;%if 0
 27139                                  ; 10/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 27140                                  ; MSDOS 6.21 IO.SYS - SYSINIT:2642h
 27141                                  %if 1
 27142                                  	; 01/01/2023
 27143                                  	; ds = cs
 27144 00002300 E8710C                  	call	UmbTest			; See if UMBs are around...
 27145                                  	; 01/01/2023
 27146                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 27147                                  	
 27148                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 27149                                  	; 31/12/2022
 27150                                  	; ds = cs, bx = 0
 27151                                  	;mov	byte [DeviceHi],bl ; 0
 27152                                  	;jmp	short LoadDevice
 27153                                  	; 01/01/2023
 27154 00002303 7222                    	jc	short LoadDevice ; bl = 0
 27155                                  %endif
 27156                                  ;%endif
 27157                                  
 27158                                  ;------------------------------------------------------------------------------
 27159                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 27160                                  ;------------------------------------------------------------------------------
 27161                                  
 27162                                  NrmTst:
 27163                                  	; 11/12/2022
 27164                                  	; ds = cs
 27165                                  	;;mov	byte [cs:DeviceHi],0
 27166                                  	;mov	byte [DeviceHi],0
 27167                                  	; 18/12/2022
 27168                                  	; bx = 0
 27169 00002305 381E[B81F]              	cmp	[DevUMB],bl ; 0
 27170                                  	;cmp	byte [DevUMB],0
 27171                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 27172 00002309 741C                    	je	short LoadDevice	; no, we don't
 27173                                  	;mov	byte [cs:DeviceHi],1
 27174                                  	; 11/12/2022
 27175                                  	;mov	byte [DeviceHi],1
 27176                                  	; 18/12/2022
 27177 0000230B FEC3                    	inc	bl ; mov bl,1 ; (*)
 27178                                  	; 11/12/2022
 27179                                  	;jmp	short LoadDevice2	; 11/12/2022
 27180 0000230D EB18                    	jmp	short LoadDevice
 27181                                  
 27182                                  ;------------------------------------------------------------------------------
 27183                                  ; device command
 27184                                  ;------------------------------------------------------------------------------
 27185                                  
 27186                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27187                                  	; (SYSINIT:2665h)
 27188                                  
 27189                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27190                                  	; (SYSINIT:2401h)
 27191                                  tryd:
 27192                                  	; 11/12/2022
 27193                                  	;xor 	bx,bx ; 31/12/2022
 27194                                  	;
 27195 0000230F 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 27196 00002312 7403                    	je	short gotd
 27197                                  skip_it2:
 27198 00002314 E99702                  	jmp	tryq
 27199                                  gotd:
 27200                                  
 27201                                  ; 31/12/2022 - Retro DOS v4.2
 27202                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27203                                  ;%if 0
 27204                                  ;ifdef	MULTI_CONFIG
 27205 00002317 E8271E                  	call	query_user              ; query the user if config_cmd
 27206 0000231A 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 27207                                  ;endif
 27208                                  ;%endif ; 28/10/2022
 27209                                  
 27210                                  	; 31/12/2022
 27211 0000231C 29DB                    	sub	bx,bx
 27212                                  	; bx = 0
 27213                                  	; 11/12/2022
 27214                                  	; ds = cs
 27215                                  	;mov	byte [DeviceHi],0
 27216                                  	;mov	word [DevSizeOption],0
 27217 0000231E 891E[C81F]              	mov	[DevSizeOption],bx ; 0
 27218 00002322 C606[DC1F]20            	mov	byte [DevSavedDelim],' '
 27219                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 27220                                  	;mov	word [cs:DevSizeOption],0
 27221                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 27222                                  					;  be replaced with a ' '
 27223                                  LoadDevice:                             ; device= or devicehigh= command.
 27224                                  	; 11/12/2022
 27225                                  	;mov	byte [DeviceHi],0
 27226 00002327 881E[C71F]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 27227                                  LoadDevice2:
 27228                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 27229                                  	;
 27230                                  	;push    cs
 27231                                          ;pop     ds
 27232                                  	;
 27233                                  	;mov	[bpb_addr],si		; pass the command line to the device
 27234                                  	;mov	[bpb_addr+2],es
 27235                                  	;
 27236                                  	;mov	[DevCmdLine],si		; save it for ourself
 27237                                  	;mov	[DevCmdLine+2],es
 27238                                  	;
 27239                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 27240                                  
 27241                                  	; 11/12/2022
 27242                                  	; ds = cs
 27243                                  	;mov	bx,cs
 27244                                  	;mov	ds,bx
 27245                                  
 27246                                  	;mov	[cs:bpb_addr],si	; pass the command line to the device
 27247 0000232B 8936[7A03]              	mov	[bpb_addr],si
 27248                                  	;mov	[cs:bpb_addr+2],es
 27249 0000232F 8C06[7C03]              	mov	[bpb_addr+2],es
 27250                                  
 27251                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 27252 00002333 8936[D81F]              	mov	[DevCmdLine],si
 27253                                  	;mov	[cs:DevCmdLine+2],es	
 27254 00002337 8C06[DA1F]              	mov	[DevCmdLine+2],es
 27255                                  
 27256                                  	; 31/12/2022 - Retro DOS v4.2
 27257 0000233B C606[E314]00            	mov	byte [driver_units],0	; clear total block units for driver	
 27258                                  
 27259 00002340 E8C21F                  	call	round
 27260                                  	
 27261 00002343 E8170E                  	call	SizeDevice
 27262 00002346 723F                    	jc	short BadFile
 27263                                  
 27264                                  	; 11/12/2022
 27265                                  	; ds = cs
 27266                                  
 27267                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 27268                                  
 27269                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27270                                  ; (SYSINIT:26A4h)
 27271                                  
 27272                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27273                                  ;%if 0
 27274 00002348 C606[B71F]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 27275                                  
 27276                                  	; 22/07/2023
 27277                                  	;mov	al,[DeviceHi]		; If not using upper memory,
 27278 0000234D 800E[C71F]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 27279                                  	; 10/07/2023
 27280                                  	;or	al,al
 27281 00002352 741E                    	jz	short DevConvLoad	; the actual load.
 27282                                  
 27283                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 27284 00002354 A0[751F]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 27285                                  
 27286 00002357 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 27287 00002359 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 27288                                  
 27289 0000235B FE0E[B71F]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 27290                                  
 27291 0000235F E8DF09                  	call	GetLoadSize		; Returns size of first UMB specified
 27292 00002362 09C0                    	or	ax,ax
 27293 00002364 7406                    	jz	short tryd_1		; If size is not specified..
 27294                                  
 27295 00002366 3B06[A91F]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 27296 0000236A 7D06                    	jge	short DevConvLoad
 27297                                  tryd_1:
 27298 0000236C A1[A91F]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 27299 0000236F E8DE09                  	call	StoLoadSize		; minsize for load UMB.
 27300                                  
 27301                                  ;%endif ; 28/10/2022
 27302                                  
 27303                                  ; - End DeviceHigh primary logic changes --------------------------------------
 27304                                  
 27305                                  DevConvLoad:
 27306                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27307 00002372 E8E50C                  	call	InitDevLoad
 27308                                  
 27309                                  	; 11/12/2022
 27310                                  	; ds = cs
 27311 00002375 A1[AB1F]                	mov	ax,[DevLoadAddr]
 27312 00002378 0306[A91F]              	add	ax,[DevSize]
 27313 0000237C 7206                    	jc	short NoMem
 27314 0000237E 3906[AD1F]              	cmp	[DevLoadEnd],ax
 27315 00002382 7315                    	jae	short LoadDev
 27316                                  	
 27317                                  	; 11/12/2022
 27318                                  	;mov	ax,[cs:DevLoadAddr]
 27319                                  	;add	ax,[cs:DevSize]
 27320                                  	;jc	short NoMem
 27321                                  	;cmp	[cs:DevLoadEnd],ax
 27322                                  	;jae	short LoadDev
 27323                                  NoMem:
 27324                                  	; 11/12/2022
 27325                                  	; ds = cs
 27326                                  	;jmp	mem_err
 27327 00002384 E9C11F                  	jmp	mem_err2
 27328                                  
 27329                                  BadFile:
 27330                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27331                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 27332                                  	;;cmp	byte [es:si],' '
 27333                                          ;;jae	short tryd_2
 27334                                  	; 31/12/2022	
 27335                                  	;cmp	byte [es:si],0Dh	; cr
 27336                                          ;jne	short tryd_2
 27337                                  	;jmp	badop
 27338                                  	; 31/12/2022
 27339                                  	; ds = cs
 27340                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27341                                  	; (SYSINIT:26E6h)
 27342 00002387 E8340E                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 27343 0000238A 26803C20                	cmp	byte [es:si],' ' 
 27344                                  	;cmp	byte [es:si],20h ; space
 27345 0000238E 7303                    	jnb	short tryd_2
 27346 00002390 E9CA05                  	jmp	badop
 27347                                  tryd_2:
 27348 00002393 E8BA21                  	call	badload
 27349 00002396 E965FD                  	jmp	coff
 27350                                  
 27351                                  LoadDev:
 27352 00002399 06                      	push	es
 27353 0000239A 1F                      	pop	ds
 27354                                  
 27355 0000239B 89F2                    	mov	dx,si			;ds:dx points to file name
 27356 0000239D E8020E                  	call	ExecDev			; load device driver using exec call
 27357                                  badldreset:
 27358 000023A0 1E                      	push	ds
 27359 000023A1 07                      	pop	es			;es:si back to config.sys
 27360 000023A2 0E                      	push	cs
 27361 000023A3 1F                      	pop	ds			;ds back to sysinit
 27362 000023A4 72E1                    	jc	short BadFile
 27363                                  goodld:
 27364                                  	; 11/12/2022
 27365                                  	; ds = cs
 27366                                  
 27367 000023A6 06                      	push	es ; +	; 31/12/2022
 27368 000023A7 56                      	push	si ; ++
 27369 000023A8 E8250E                  	call	RemoveNull
 27370 000023AB 06                      	push	es
 27371 000023AC 56                      	push	si
 27372                                  
 27373 000023AD 0E                      	push	cs
 27374 000023AE 07                      	pop	es
 27375                                  
 27376 000023AF 1E                      	push	ds ; **  ; ds = cs
 27377 000023B0 56                      	push	si
 27378                                  
 27379                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 27380                                  	; 31/12/2022
 27381                                  	; ds = cs
 27382 000023B1 C536[AF1F]              	lds	si,[DevEntry]
 27383                                  
 27384                                  	;test	word [si+4],8000h
 27385                                  	; 11/12/2022
 27386 000023B5 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 27387                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 27388 000023B9 7514                    	jnz	short got_device_com_cont   ; no.
 27389                                  
 27390 000023BB 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 27391                                  	;cmp	byte [si+32],26
 27392 000023C0 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 27393 000023C4 7209                    	jb	short got_device_com_cont
 27394                                  
 27395 000023C6 5E                      	pop	si
 27396 000023C7 1F                      	pop	ds ; **
 27397                                  
 27398 000023C8 5E                      	pop	si			; clear the stack
 27399 000023C9 07                      	pop	es
 27400                                  
 27401                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27402                                  	;call	RetFromUM
 27403                                  	; 31/12/2022
 27404                                  	; ds = cs ; **
 27405 000023CA E8F10D                  	call	RetFromUM		; Do this before we leave
 27406                                  
 27407                                  	;jmp	short badnumblock
 27408                                  	; 31/12/2022
 27409 000023CD EB77                    	jmp	short badnumblock2  ; ds = cs
 27410                                  
 27411                                  got_device_com_cont:
 27412 000023CF 5E                      	pop	si
 27413 000023D0 1F                      	pop	ds
 27414                                  
 27415                                  	; 11/12/2022
 27416                                  	; ds = cs
 27417                                  
 27418 000023D1 E82606                  	call	LieInt12Mem
 27419 000023D4 E88506                  	call	UpdatePDB		; update the PSP:2 value M020
 27420                                  
 27421                                  	; 11/12/2022
 27422                                  	; ds = cs
 27423 000023D7 803E[DF14]00            	cmp	byte [multdeviceflag],0
 27424                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 27425                                  					;  driver in the file ; M027
 27426 000023DC 750E                    	jne	short skip_pass_limit	;		      ; M027
 27427                                  
 27428                                  	; 11/12/2022
 27429                                  	; ds = cs
 27430                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 27431                                  	;mov	bx,[cs:DevLoadEnd]
 27432                                  	;mov	[cs:break_addr+2],bx
 27433                                  
 27434 000023DE C706[7603]0000          	mov	word [break_addr],0
 27435 000023E4 8B1E[AD1F]              	mov	bx,[DevLoadEnd]
 27436 000023E8 891E[7803]              	mov	[break_addr+2],bx
 27437                                  
 27438                                  skip_pass_limit:
 27439                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 27440                                  ;	number of installed devices (including DblSpace drives) where
 27441                                  ;	"drivenumber" is the number that the next block device will
 27442                                  ;	be assigned to. Because some naughty device drivers (like
 27443                                  ;	interlnk) look at the internal DOS variable instead of the
 27444                                  ;	value we pass it, we'll temporarily stick our value into
 27445                                  ;	DOS DATA while we're initializing the device drivers.
 27446                                  ;
 27447                                  ;	Note that this will make it impossible for this device
 27448                                  ;	driver to access the DblSpace drive letters, whether
 27449                                  ;	they are swapped-hosts or unswapped compressed drives,
 27450                                  ;	during its initialization phase.
 27451                                  
 27452                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27453                                  ; (SYSINIT:2752h)
 27454                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27455                                  ;%if 0
 27456                                  	; 31/12/2022
 27457                                  	;push	ds
 27458                                  	
 27459                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27460                                  	; 31/12/2022
 27461                                  	; ds = cs
 27462 000023EC C51E[6B02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 27463                                  
 27464 000023F0 2EA0[7E03]              	mov	al,[cs:drivenumber]	; temporarily use this next drv value
 27465 000023F4 2EA2[7E03]              	mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 27466 000023F8 88C4                    	mov	ah,al
 27467                                  	
 27468 000023FA 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 27469                                  	; 31/12/2022
 27470                                  	;pop	ds
 27471                                  	
 27472 000023FD 50                      	push	ax			; save real sysi_numio/ncds in ax
 27473                                  
 27474                                  ;%endif ; 29/10/2022
 27475                                  
 27476                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27477                                  	; (SYSINIT:24B9h)
 27478                                  
 27479 000023FE BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 27480 00002401 E84D1F                  	call	calldev 		; calldev (sdevstrat);
 27481 00002404 BB0800                  	mov	bx,SYSDEV.INT ; 8
 27482 00002407 E8471F                  	call	calldev 		; calldev (sdevint);
 27483                                  
 27484                                  	; 11/12/2022
 27485                                  	; ds <> cs (from calldev) ; 31/12/2022
 27486                                  
 27487                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27488                                  ; (SYSINIT:2773h)
 27489                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27490                                  ;%if 0
 27491 0000240A 58                      	pop	ax			; get real sysi_numio value
 27492                                  	; 31/12/2022
 27493                                  	;push	ds
 27494 0000240B 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27495 00002410 894720                  	mov	[bx+SYSI_NUMIO],ax	; restore previous/real value
 27496                                  	; 31/12/2022
 27497                                  	;pop	ds
 27498                                  
 27499                                  ;%endif ; 29/10/2022
 27500                                  
 27501                                  	; 11/12/2022
 27502 00002413 0E                      	push	cs
 27503 00002414 1F                      	pop	ds
 27504                                  
 27505 00002415 E81206                  	call	TrueInt12Mem
 27506                                  
 27507                                  	; 11/12/2022
 27508                                  	; ds = cs
 27509                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 27510                                  	;mov	[cs:DevBrkAddr],ax
 27511                                  	;mov	ax,[cs:break_addr+2]
 27512                                  	;mov	[cs:DevBrkAddr+2],ax
 27513 00002418 A1[7603]                	mov	ax,[break_addr]	
 27514 0000241B A3[B31F]                	mov	[DevBrkAddr],ax
 27515 0000241E A1[7803]                	mov	ax,[break_addr+2]
 27516 00002421 A3[B51F]                	mov	[DevBrkAddr+2],ax
 27517                                  
 27518                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27519                                  	;call	RetFromUM		; There we go... all done.
 27520                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27521                                  	; (SYSINIT:2791h)
 27522 00002424 E8970D                  	call	RetFromUM		; There we go... all done.	
 27523                                  
 27524                                  	; 31/12/2022
 27525                                  	; ds = cs
 27526                                  
 27527                                  	; 11/12/2022
 27528 00002427 803E[B81F]00            	cmp	byte [DevUMB],0	
 27529                                  	;cmp	byte [cs:DevUMB],0
 27530 0000242C 7403                    	je	short tryd_3
 27531 0000242E E8C60E                  	call	AllocUMB
 27532                                  	; 31/12/2022
 27533                                  	; ds = cs
 27534                                  tryd_3:
 27535                                  
 27536                                  ;ifndef ROMDOS
 27537                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 27538                                  
 27539                                  	; 11/12/2022
 27540                                  	; ds = cs
 27541                                  	
 27542                                  	;cmp	byte [cs:runhigh],0FFh
 27543 00002431 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 27544 00002436 7503                    	jne	short tryd_4
 27545                                  	
 27546                                  	; 11/12/2022
 27547                                  	; ds = cs
 27548 00002438 E835E5                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 27549                                  tryd_4:
 27550                                  ;endif ; ROMDOS
 27551                                  
 27552 0000243B 5E                      	pop	si
 27553 0000243C 1F                      	pop	ds
 27554 0000243D C60400                  	mov	byte [si],0		; *p = 0;
 27555                                  
 27556 00002440 0E                      	push	cs
 27557 00002441 1F                      	pop	ds
 27558                                  
 27559 00002442 EB1F                    	jmp	short was_device_com
 27560                                  
 27561                                  ;----------------------------------------------------------------------------
 27562                                  
 27563                                  ; 02/04/2019 - Retro DOS v4.0
 27564                                  
 27565                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27566                                  ; (SYSINIT:27B3h)
 27567                                  
 27568                                  badnumblock:
 27569 00002444 0E                      	push	cs
 27570 00002445 1F                      	pop	ds
 27571                                  badnumblock2:	; 31/12/2022 (ds=cs)
 27572 00002446 BA[C44B]                	mov	dx,badblock
 27573 00002449 E82C21                  	call	print
 27574                                  
 27575                                  ;------ fall thru -----------------------------------------------------------
 27576                                  
 27577                                  	; 31/12/2022 - Retro DOS v4.2
 27578                                  
 27579                                  erase_dev_do:				; modified to show message "error in config.sys..."
 27580                                  	
 27581                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 27582                                  				; (Note: 'call CheckDoubleSpace'
 27583                                  				; has been removed at 'erase_dev_do:' pos
 27584                                  				; in PCDOS 7.1 IBMBIO.COM - SYSINIT:2CBAh)
 27585                                  				; Erdogan Tan - 10/07/2023
 27586 0000244C 5E                      	pop	si ; ++
 27587 0000244D 07                      	pop	es ; + ; 31/12/2022
 27588                                  
 27589 0000244E 0E                      	push	cs
 27590 0000244F 1F                      	pop	ds
 27591                                  
 27592                                  skip1_resetmemhi:
 27593                                  	; 11/12/2022
 27594                                  	; ds = cs
 27595 00002450 833E[7F03]00            	cmp	word [configmsgflag],0
 27596                                  	;cmp	word [cs:configmsgflag],0
 27597 00002455 7409                    	je	short no_error_line_msg
 27598                                  
 27599 00002457 E84E05                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 27600                                  	; 11/12/2022
 27601                                  	; ds = cs
 27602                                  	;mov	word [cs:configmsgflag],0
 27603 0000245A C706[7F03]0000          	mov	word [configmsgflag],0	; set the default value again.
 27604                                  
 27605                                  no_error_line_msg:
 27606 00002460 E99BFC                  	jmp	coff
 27607                                  
 27608                                  ;----------------------------------------------------------------------------
 27609                                  
 27610                                  was_device_com:
 27611                                  	; 14/12/2022
 27612                                  	; ds = cs
 27613 00002463 A1[B51F]                	mov	ax,[DevBrkAddr+2]
 27614                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 27615 00002466 3B06[AD1F]              	cmp	ax,[DevLoadEnd]
 27616                                  	;cmp	ax,[cs:DevLoadEnd]
 27617 0000246A 7605                    	jbe	short breakok
 27618                                  
 27619 0000246C 5E                      	pop	si
 27620 0000246D 07                      	pop	es
 27621 0000246E E916FF                  	jmp	BadFile
 27622                                  
 27623                                  breakok:
 27624                                  	; 14/12/2022
 27625                                  	; ds = cs
 27626 00002471 C43E[6B02]              	les	di,[DOSINFO] 
 27627 00002475 C516[AF1F]              	lds	dx,[DevEntry]
 27628                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 27629 00002479 89D6                    	mov	si,dx
 27630                                  
 27631                                  	; 14/11/2022
 27632                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 27633                                  
 27634                                  	; 14/12/2022
 27635                                  	; ds <> cs
 27636                                  	
 27637                                  	;mov	ax,[si+4]
 27638 0000247B 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 27639                                  	; 12/12/2022
 27640 0000247E F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 27641                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 27642 00002481 7426                    	jz	short isblock
 27643                                  
 27644                                  ;------ lets deal with character devices
 27645                                  
 27646 00002483 2E800E[E214]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27647 00002489 E8770D                  	call	DevSetBreak		;go ahead and alloc mem for device
 27648                                  jc_edd:
 27649 0000248C 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 27650                                  
 27651                                  	; 12/12/2022
 27652 0000248E A801                    	test	al,ISCIN
 27653                                  	;test	ax,ISCIN ; 1		;is it a console in?
 27654 00002490 7408                    	jz	short tryclk
 27655                                  
 27656 00002492 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 27657 00002496 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 27658                                  tryclk: 
 27659                                  	; 12/12/2022
 27660 0000249A A808                    	test	al,ISCLOCK
 27661                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 27662 0000249C 7408                    	jz	short golink
 27663                                  
 27664 0000249E 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 27665 000024A2 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 27666                                  golink: 
 27667 000024A6 E9B500                  	jmp	linkit
 27668                                  
 27669                                  ;------ deal with block device drivers
 27670                                  
 27671                                  isblock:
 27672 000024A9 2EA0[7503]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 27673 000024AD 08C0                    	or	al,al
 27674 000024AF 749B                    	jz	short erase_dev_do
 27675                                  	;mov	[si+10],al
 27676 000024B1 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 27677                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27678                                  	;add	[cs:driver_units],al
 27679                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27680 000024B4 2E0006[E314]            	add	[cs:driver_units],al	; keep total for all drivers in file
 27681                                  perdrv:
 27682 000024B9 98                      	cbw				; warning no device > 127 units
 27683 000024BA 89C1                    	mov	cx,ax
 27684 000024BC 88E6                    	mov	dh,ah
 27685                                  	;mov	dl,[es:di+32]
 27686 000024BE 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 27687 000024C2 88D4                    	mov	ah,dl
 27688 000024C4 00C4                    	add	ah,al			; check for too many devices
 27689 000024C6 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 27690 000024C9 7603                    	jbe	short ok_block
 27691 000024CB E976FF                  	jmp	badnumblock
 27692                                  
 27693                                  ok_block:
 27694 000024CE 2E800E[E214]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27695 000024D4 E82C0D                  	call	DevSetBreak		; alloc the device
 27696 000024D7 72B3                    	jc	short jc_edd
 27697 000024D9 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 27698                                  
 27699 000024DD 2E0006[7E03]            	add	[cs:drivenumber],al	; remember amount for next device
 27700 000024E2 2EC51E[7A03]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 27701                                  perunit:
 27702 000024E7 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 27703                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27704                                  	; 11/12/2022
 27705 000024EC 26C46E00                	les	bp,[es:bp]
 27706                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27707                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 27708                                  scandpb:
 27709                                  	;cmp	word [es:bp+25],-1
 27710 000024F0 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 27711 000024F5 7406                    	je	short foundpb
 27712                                  	;les	bp,[es:bp+25]
 27713 000024F7 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 27714 000024FB EBF3                    	jmp	short scandpb
 27715                                  foundpb:
 27716 000024FD 2EA1[B31F]              	mov	ax,[cs:DevBrkAddr]
 27717 00002501 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 27718 00002505 2EA1[B51F]              	mov	ax,[cs:DevBrkAddr+2]
 27719 00002509 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 27720                                  
 27721 0000250D 2EC42E[B31F]            	les	bp,[cs:DevBrkAddr]
 27722 00002512 2E8306[B31F]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 27723                                  
 27724 00002518 E8C70C                  	call	RoundBreakAddr
 27725                                  
 27726 0000251B 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 27727 00002521 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 27728                                  
 27729 00002526 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 27730 00002528 43                      	inc	bx
 27731 00002529 43                      	inc	bx			;point to next guy
 27732                                  	;mov	[es:bp+DPB.DRIVE],dx
 27733                                  	; 11/12/2022
 27734 0000252A 26895600                	mov	[es:bp],dx ; 13/05/2019
 27735                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27736                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 27737                                  	
 27738 0000252E B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 27739 00002530 CD21                    	int	21h
 27740                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 27741                                  			; DS:SI -> BPB (BIOS Parameter Block)
 27742                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 27743                                  
 27744                                  	;mov	ax,[es:bp+2]
 27745 00002532 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 27746 00002536 06                      	push	es
 27747 00002537 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 27748                                  	;cmp	ax,[es:di+10h]
 27749 0000253C 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 27750 00002540 07                      	pop	es
 27751                                  	;jna	short iblk_1
 27752                                  	;jmp	short bad_bpb_size_sector
 27753                                  	; 29/10/2022
 27754 00002541 775D                    	ja	short bad_bpb_size_sector
 27755                                  iblk_1:
 27756 00002543 1E                      	push	ds
 27757 00002544 52                      	push	dx
 27758                                  
 27759 00002545 2EC516[AF1F]            	lds	dx,[cs:DevEntry]
 27760                                  	;mov	[es:bp+13h],dx
 27761 0000254A 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 27762                                  	;mov	[es:bp+15h],ds
 27763 0000254E 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 27764                                  
 27765 00002552 5A                      	pop	dx
 27766 00002553 1F                      	pop	ds
 27767                                  
 27768 00002554 42                      	inc	dx
 27769 00002555 FEC6                    	inc	dh
 27770 00002557 E28E                    	loop	perunit
 27771                                  
 27772 00002559 0E                      	push	cs
 27773 0000255A 1F                      	pop	ds
 27774                                  
 27775 0000255B E80DE7                  	call	TempCDS 		; set cds for new drives
 27776                                  	; 31/12/2022
 27777                                  	; ds <> cs
 27778                                  linkit:
 27779 0000255E 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 27780 00002563 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 27781 00002567 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 27782                                  
 27783 0000256B 2EC536[AF1F]            	lds	si,[cs:DevEntry]	;ds:si = device location
 27784 00002570 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 27785 00002574 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 27786 00002578 8B04                    	mov	ax,[si]			;get pointer to next device
 27787 0000257A 2EA3[AF1F]              	mov	[cs:DevEntry],ax	;and save it
 27788                                  
 27789 0000257E 890C                    	mov	[si],cx			;link in the driver
 27790 00002580 895402                  	mov	[si+2],dx
 27791                                  enddev:
 27792 00002583 5E                      	pop	si
 27793 00002584 07                      	pop	es
 27794 00002585 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 27795 00002586 740B                    	jz	short coffj3
 27796                                  
 27797 00002588 2EFE06[DF14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 27798 0000258D E8950C                  	call	DevBreak		; M009
 27799                                  	; 11/12/2022
 27800                                  	; ds = cs (DevBreak)
 27801                                  
 27802                                  	; 03/04/2019 - Retro DOS v4.0
 27803                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 27804 00002590 E913FE                  	jmp	goodld			; otherwise pretend we loaded it in
 27805                                  coffj3: 
 27806                                  	; 18/12/2022
 27807                                  	; ax = 0
 27808 00002593 2EA2[DF14]              	mov	[cs:multdeviceflag],al ; 0
 27809                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 27810 00002597 E88B0C                  	call	DevBreak
 27811                                  	; 11/12/2022
 27812                                  	; ds = cs (DevBreak)
 27813                                  	
 27814                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27815                                  	; (SYSINIT:2919h)
 27816                                  	; 11/07/2023
 27817 0000259A E88203                  	call	CheckProtmanArena
 27818                                  	
 27819                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 27820                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 27821                                  ;					;  created a bogus arena to try
 27822                                  ;					;  to protect some of its resident-
 27823                                  ;					;  init code.
 27824                                  	;call	CheckDoubleSpace
 27825 0000259D E95EFB                  	jmp	coff
 27826                                  
 27827                                  ;----------------------------------------------------------------------------
 27828                                  
 27829                                  ;CheckDoubleSpace:
 27830                                  ;;;;	ifdef	dblspace_hooks
 27831                                  ;
 27832                                  ;;	Now check for two special MagicDrv cases:
 27833                                  ;;
 27834                                  ;;       a) the last driver load was MagicDrv final placement:
 27835                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 27836                                  ;;
 27837                                  ;;       b) MagicDrv is currently in temporary home:
 27838                                  ;;          -> call it to give it a chance to mount and shuffle drives
 27839                                  ;
 27840                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 27841                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 27842                                  ;
 27843                                  ;;	Now inquire of driver whether it is present, and final located
 27844                                  ;
 27845                                  ;	mov	ax,multMagicdrv ; 4A11h
 27846                                  ;	mov	bx,MD_VERSION ; 0
 27847                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 27848                                  ;	or	ax,ax			; is it there?
 27849                                  ;	jnz	short no_more_magic_calls ; done if not
 27850                                  ;
 27851                                  ;	test	dx,8000h		; is it final placed?
 27852                                  ;	jnz	short magic_not_yet_home ;  skip if not
 27853                                  ;
 27854                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 27855                                  ;;	don't keep checking it, and add its number of drive letters
 27856                                  ;;	to drivenumber.
 27857                                  ;
 27858                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 27859                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 27860                                  ;;					;  the drive number we'll pass to the
 27861                                  ;;					;  next loadable block device.
 27862                                  ;
 27863                                  ;	jmp	short no_more_magic_calls ; and finished.
 27864                                  ;
 27865                                  ;magic_not_yet_home:
 27866                                  ;	push	es
 27867                                  ;	push	si
 27868                                  ;
 27869                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 27870                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 27871                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 27872                                  ;
 27873                                  ;	mov	bx,2
 27874                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 27875                                  ;;					;   by this many units
 27876                                  ;
 27877                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 27878                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 27879                                  ;;					;  sees this, to prevent bad things
 27880                                  ;;					;  from happening if people run the
 27881                                  ;;					;  new driver with an old (dos) BIOS
 27882                                  ;	call	far [cs:MagicBackdoor]
 27883                                  ;
 27884                                  ;	pop	si
 27885                                  ;	pop	es
 27886                                  ;
 27887                                  ;no_more_magic_calls:
 27888                                  ;
 27889                                  ;;;;	endif
 27890                                  ;	retn
 27891                                  
 27892                                  ; 03/04/2019 - Retro DOS v4.0
 27893                                  
 27894                                  bad_bpb_size_sector:
 27895 000025A0 5E                      	pop	si
 27896 000025A1 07                      	pop	es
 27897 000025A2 BA[E64A]                	mov	dx,badsiz_pre
 27898 000025A5 BB[C44A]                	mov	bx,crlfm
 27899 000025A8 E8AB1F                  	call	prnerr
 27900                                  
 27901 000025AB E950FB                  	jmp	coff
 27902                                  
 27903                                  ;------------------------------------------------------------------------------
 27904                                  ; country command
 27905                                  ;      the syntax is:
 27906                                  ;	country=country id {,codepage {,path}}
 27907                                  ;	country=country id {,,path}	:default codepage id in dos
 27908                                  ;------------------------------------------------------------------------------
 27909                                  
 27910                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27911                                  	; (SYSINIT:2663h)
 27912                                  tryq:
 27913 000025AE 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27914 000025B1 7403                    	je	short tryq_cont
 27915                                  skip_it3:
 27916 000025B3 E90D01                  	jmp	tryf
 27917                                  tryq_cont:
 27918                                  
 27919                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27920                                  ; (SYSINIT:297Eh)
 27921                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27922                                  ;%if 0
 27923                                  ;ifdef	MULTI_CONFIG
 27924 000025B6 E8881B                  	call	query_user		; query the user if config_cmd
 27925 000025B9 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27926                                  ;endif
 27927                                  ;%endif ; 02/11/2022
 27928                                  
 27929                                  	; 31/12/2022
 27930                                  	;xor	bx,bx
 27931 000025BB 31C9                    	xor	cx,cx
 27932                                  	; 14/12/2022
 27933                                  	; ds = cs
 27934                                  	; bx = 0
 27935                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27936                                  	;mov	word [cs:p_code_page],0
 27937                                  	; 31/12/2022
 27938                                  	; cx = 0
 27939                                  	;mov	[cntry_drv],bl ; 0
 27940                                  	;mov	[p_code_page],bx ; 0
 27941 000025BD 880E[0246]              	mov	[cntry_drv],cl ; 0
 27942 000025C1 890E[201E]              	mov	[p_code_page],cx ; 0	
 27943                                  
 27944 000025C5 BF[E91D]                	mov	di,cntry_parms
 27945                                  	;xor	cx,cx	; 31/12/2022
 27946                                  	; 03/01/2023
 27947                                  	;mov	dx,cx
 27948                                  do52:
 27949 000025C8 E86F03                  	call	sysinit_parse
 27950 000025CB 730B                    	jnc	short if52		; parse error,check error code and
 27951                                  
 27952 000025CD E8E000                  	call	cntry_error		; show message and end the search loop.
 27953                                  	; 14/12/2022
 27954                                  	; ds = cs
 27955 000025D0 C706[1E1E]FFFF          	mov	word [p_cntry_code],-1
 27956                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 27957 000025D6 EB34                    	jmp	short sr52
 27958                                  if52:
 27959 000025D8 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 27960 000025DB 742F                    	jz	short sr52		; then end the search loop
 27961                                  
 27962                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 27963                                  	; 14/12/2022
 27964                                  	; ds = cs
 27965 000025DD 803E[BB1D]01            	cmp	byte [result_val],_$P_Number	
 27966                                  	;cmp	byte [cs:result_val],_$P_Number
 27967 000025E2 7512                    	jnz	short if56
 27968                                  
 27969                                  	;;mov	ax,[cs:rw_dword]
 27970                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27971                                  	; 14/12/2022
 27972 000025E4 A1[BF1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27973 000025E7 83F901                  	cmp	cx,1
 27974 000025EA 7505                    	jne	short if57
 27975                                  
 27976                                  	;mov	[cs:p_cntry_code],ax
 27977                                  	; 14/12/2022
 27978 000025EC A3[1E1E]                	mov	[p_cntry_code],ax
 27979                                  
 27980                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27981                                  	;jmp	short en57
 27982                                  	; 12/12/2022
 27983                                  	;jmp	short en56
 27984 000025EF EBD7                    	jmp	short do52
 27985                                  if57:
 27986                                  	;mov	[cs:p_code_page],ax
 27987                                  	; 14/12/2022
 27988                                  	; ds = cs
 27989 000025F1 A3[201E]                	mov	[p_code_page],ax
 27990                                  en57:
 27991                                  	;jmp	short en56		; path entered
 27992                                  	; 12/12/2022
 27993 000025F4 EBD2                    	jmp	short do52
 27994                                  if56:
 27995 000025F6 1E                      	push	ds
 27996 000025F7 06                      	push	es
 27997 000025F8 56                      	push	si
 27998 000025F9 57                      	push	di
 27999                                  
 28000 000025FA 0E                      	push	cs
 28001 000025FB 07                      	pop	es
 28002                                  
 28003                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 28004                                  	; 14/12/2022
 28005 000025FC C536[BF1D]              	lds	si,[rv_dword]
 28006 00002600 BF[0246]                	mov	di,cntry_drv
 28007 00002603 E83E1F                  	call	move_asciiz
 28008                                  
 28009 00002606 5F                      	pop	di
 28010 00002607 5E                      	pop	si
 28011 00002608 07                      	pop	es
 28012 00002609 1F                      	pop	ds
 28013                                  
 28014                                  en56:
 28015 0000260A EBBC                    	jmp	short do52
 28016                                  
 28017                                  sr52:
 28018                                  	; 14/12/2022
 28019                                  	; ds = cs
 28020 0000260C 833E[1E1E]FF            	cmp	word [p_cntry_code],-1
 28021                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 28022 00002611 7509                    	jne	short tryq_open
 28023 00002613 E9E8FA                  	jmp	coff
 28024                                  
 28025                                  tryqbad:				;"invalid country code or code page"
 28026 00002616 F9                      	stc
 28027 00002617 BA[2D4B]                	mov     dx,badcountry
 28028 0000261A EB79                    	jmp     tryqchkerr
 28029                                  
 28030                                  tryq_open:
 28031                                  	; 14/12/2022
 28032                                  	; ds = cs
 28033 0000261C 803E[0246]00            	cmp	byte [cntry_drv],0
 28034                                  	;cmp	byte [cs:cntry_drv],0
 28035 00002621 7405                    	je	short tryq_def
 28036 00002623 BA[0246]                	mov	dx,cntry_drv
 28037 00002626 EB03                    	jmp	short tryq_openit
 28038                                  
 28039                                  tryq_def:
 28040 00002628 BA[0446]                	mov	dx,cntry_root
 28041                                  tryq_openit:
 28042 0000262B B8003D                  	mov	ax,3D00h		;open a file
 28043 0000262E F9                      	stc
 28044 0000262F CD21                    	int	21h
 28045 00002631 7242                    	jc	short tryqfilebad	;open failure
 28046                                  
 28047                                  	; 14/12/2022
 28048                                  	; ds = cs
 28049 00002633 A3[5A03]                	mov	[cntryfilehandle],ax
 28050                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 28051 00002636 89C3                    	mov	bx,ax
 28052 00002638 A1[1E1E]                	mov	ax,[p_cntry_code]
 28053 0000263B 8B16[201E]              	mov	dx,[p_code_page]
 28054                                  	;mov	ax,[cs:p_cntry_code]
 28055                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 28056                                  	;mov	cx,[cs:memhi]
 28057 0000263F 8B0E[6203]              	mov	cx,[memhi]
 28058 00002643 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 28059                                  					;M023
 28060                                  	; 14/12/2022
 28061                                  	; ds = cs
 28062 00002647 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 28063                                  	;cmp	cx,[cs:ALLOCLIM]
 28064 0000264B 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 28065                                  
 28066 0000264D BE[0246]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 28067 00002650 803C00                  	cmp	byte [si],0 		;default path?
 28068 00002653 7502                    	jne	short tryq_set_for_dos
 28069                                  
 28070 00002655 46                      	inc	si
 28071 00002656 46                      	inc	si			;ds:si -> cntry_root
 28072                                  
 28073                                  tryq_set_for_dos:
 28074                                  	; 14/12/2022
 28075                                  	; ds = cs
 28076 00002657 C43E[7702]              	les	di,[sysi_country]
 28077                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 28078 0000265B 57                      	push	di			;save di
 28079                                  	;add	di,8
 28080 0000265C 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 28081 0000265F E8E21E                  	call	move_asciiz		;set the path to country.sys in dos.
 28082 00002662 5F                      	pop	di			;es:di -> country info tab again.
 28083                                  
 28084                                  	; 14/12/2022	
 28085 00002663 8B0E[6203]              	mov	cx,[memhi]
 28086                                  	;mov	cx,[cs:memhi]
 28087 00002667 8ED9                    	mov	ds,cx
 28088 00002669 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 28089 0000266B E8661D                  	call	setdoscountryinfo	;now do the job!!!
 28090                                  	; ds <> cs ; 14/12/2022
 28091 0000266E 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 28092                                  
 28093 00002670 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 28094 00002673 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 28095                                  
 28096                                  tryqfilebad:
 28097 00002675 0E                      	push	cs
 28098 00002676 07                      	pop	es
 28099 00002677 2E803E[0246]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 28100 0000267D 7405                    	je	short tryqdefbad
 28101                                  
 28102 0000267F BE[0246]                	mov	si,cntry_drv
 28103 00002682 EB03                    	jmp	short tryqbadload
 28104                                  
 28105                                  tryqdefbad:				;default file has been used.
 28106 00002684 BE[0446]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 28107                                  tryqbadload:
 28108 00002687 E8C61E                  	call	badload 		;ds will be restored to sysinit_seg
 28109                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28110                                  	; (SYSINIT:2A69h)
 28111 0000268A 8B0E[A102]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 28112                                  	;mov	cx,[cs:CONFBOT]
 28113                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28114                                  	;mov	cx,[cs:top_of_cdss]
 28115                                  	; 11/12/2022
 28116                                  	; ds = cs
 28117                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 28118 0000268E 8EC1                    	mov	es,cx			;restore es -> confbot.
 28119 00002690 EB13                    	jmp	short coffj4
 28120                                  
 28121                                  tryqmemory:
 28122 00002692 BA[704B]                	mov	dx,insufmemory
 28123                                  tryqchkerr:
 28124                                  	;mov	cx,[cs:CONFBOT]
 28125                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28126                                  	;mov	cx,[cs:top_of_cdss]
 28127                                  	; 12/12/2022
 28128 00002695 0E                      	push	cs
 28129 00002696 1F                      	pop	ds
 28130                                  	; 31/12/2022 - Retro DOS v4.2
 28131 00002697 8B0E[A102]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 28132                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 28133 0000269B 8EC1                    	mov	es,cx			;restore es -> confbot seg
 28134                                  	;push	cs
 28135                                  	;pop	ds			;restore ds to sysinit_seg
 28136 0000269D 7306                    	jnc	short coffj4		;if no error,then exit
 28137                                  
 28138 0000269F E8D61E                  	call	print			;else show error message
 28139 000026A2 E80303                  	call	error_line
 28140                                  coffj4:
 28141                                  	;mov	bx,[cs:cntryfilehandle]
 28142                                  	; 11/12/2022
 28143                                  	; ds = cs
 28144 000026A5 8B1E[5A03]              	mov	bx,[cntryfilehandle]
 28145 000026A9 B43E                    	mov	ah,3Eh
 28146 000026AB CD21                    	int	21h			;close file. don't care even if it fails.
 28147 000026AD E94EFA                  	jmp	coff
 28148                                  
 28149                                  ;--------------------------------------------
 28150                                  
 28151                                  cntry_error:
 28152                                  
 28153                                  ;function: show "invalid country code or code page" messages,or
 28154                                  ;		"error in country command" depending on the error code
 28155                                  ;		in ax returned by sysparse;
 28156                                  ;in:	ax - error code
 28157                                  ;	ds - sysinitseg
 28158                                  ;	es - confbot
 28159                                  ;out:	show message.  dx destroyed.
 28160                                  
 28161 000026B0 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 28162 000026B3 7505                    	jne	short if64
 28163 000026B5 BA[2D4B]                	mov	dx,badcountry		;"invalid country code or code page"
 28164 000026B8 EB03                    	jmp	short en64
 28165                                  if64:
 28166 000026BA BA[534B]                	mov	dx,badcountrycom	;"error in contry command"
 28167                                  en64:
 28168 000026BD E8B81E                  	call	print
 28169                                  	;call	error_line
 28170                                  	;retn
 28171                                  	; 11/12/2022
 28172 000026C0 E9E502                  	jmp	error_line
 28173                                  
 28174                                  ;------------------------------------------------------------------------------
 28175                                  ; files command
 28176                                  ;------------------------------------------------------------------------------
 28177                                  
 28178                                  ;******************************************************************************
 28179                                  ; function: parse the parameters of files= command.			      *
 28180                                  ;									      *
 28181                                  ; input :								      *
 28182                                  ;	es:si -> parameters in command line.				      *
 28183                                  ; output:								      *
 28184                                  ;	variable files set.						      *
 28185                                  ;									      *
 28186                                  ; subroutines to be called:						      *
 28187                                  ;	sysinit_parse							      *
 28188                                  ; logic:								      *
 28189                                  ; {									      *
 28190                                  ;	set di points to files_parms;					      *
 28191                                  ;	set dx,cx to 0; 						      *
 28192                                  ;	while (end of command line)					      *
 28193                                  ;	{ sysinit_parse;						      *
 28194                                  ;	  if (no error) then						      *
 28195                                  ;	     files = result_val._$P_picked_val				      *
 28196                                  ;	  else								      *
 28197                                  ;	     error exit;						      *
 28198                                  ;	};								      *
 28199                                  ; };									      *
 28200                                  ;									      *
 28201                                  ;******************************************************************************
 28202                                  
 28203                                  tryf:
 28204 000026C3 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 28205 000026C6 7528                    	jne	short tryl
 28206                                  
 28207                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28208                                  ; (SYSINIT:2AABh)
 28209                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28210                                  ;%if 0
 28211                                  ;ifdef	MULTI_CONFIG
 28212 000026C8 E8761A                  	call	query_user              ; query the user if config_cmd
 28213 000026CB 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 28214                                  ;endif
 28215                                  ;%endif ; 30/10/2022
 28216                                  
 28217                                  	; 14/12/2022
 28218                                  	; ds = cs
 28219                                  
 28220 000026CD BF[221E]                	mov	di,files_parms
 28221 000026D0 31C9                    	xor	cx,cx
 28222                                  	; 03/01/2023
 28223                                  	;mov	dx,cx
 28224                                  do67:
 28225 000026D2 E86502                  	call	sysinit_parse
 28226 000026D5 7303                    	jnc	short if67		; parse error
 28227                                  	;call	badparm_p		;  and show messages and end the search loop.
 28228                                  	;jmp	short sr67
 28229                                  	; 03/01/2023
 28230 000026D7 E98C01                  	jmp	badparm_p_coff
 28231                                  if67:
 28232 000026DA 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28233 000026DD 7408                    	je	short en67		; then end the $endloop
 28234                                  
 28235                                  	; 14/12/2022
 28236                                  	; ds = cs
 28237                                  	;;mov	al,[cs:rv_dword]
 28238                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28239                                  	;mov	[cs:p_files],al		; save it temporarily
 28240                                  	;mov	al,[rv_dword]
 28241 000026DF A0[BF1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28242 000026E2 A2[411E]                	mov	[p_files],al
 28243                                  
 28244 000026E5 EBEB                    	jmp	short do67
 28245                                  en67:
 28246                                  	; 14/12/2022
 28247                                  	; ds = cs
 28248 000026E7 A0[411E]                	mov	al,[p_files]
 28249 000026EA A2[9D02]                	mov	[FILES],al	
 28250                                  	;mov	al,[cs:p_files]
 28251                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 28252                                  sr67:
 28253 000026ED E90EFA                  	jmp	coff
 28254                                  
 28255                                  ; 04/04/2019 - Retro DOS v4.0
 28256                                  
 28257                                  ;------------------------------------------------------------------------------
 28258                                  ; lastdrive command
 28259                                  ;------------------------------------------------------------------------------
 28260                                  
 28261                                  ;******************************************************************************
 28262                                  ; function: parse the parameters of lastdrive= command. 		      *
 28263                                  ;									      *
 28264                                  ; input :								      *
 28265                                  ;	es:si -> parameters in command line.				      *
 28266                                  ; output:								      *
 28267                                  ;	set the variable num_cds.					      *
 28268                                  ;									      *
 28269                                  ; subroutines to be called:						      *
 28270                                  ;	sysinit_parse							      *
 28271                                  ; logic:								      *
 28272                                  ; {									      *
 28273                                  ;	set di points to ldrv_parms;					      *
 28274                                  ;	set dx,cx to 0; 						      *
 28275                                  ;	while (end of command line)					      *
 28276                                  ;	{ sysinit_parse;						      *
 28277                                  ;	  if (no error) then						      *
 28278                                  ;	     set num_cds to the returned value; 			      *
 28279                                  ;	  else	/*error exit*/						      *
 28280                                  ;	     error exit;						      *
 28281                                  ;	};								      *
 28282                                  ; };									      *
 28283                                  ;									      *
 28284                                  ;******************************************************************************
 28285                                  
 28286                                  tryl:
 28287 000026F0 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 28288 000026F3 7528                    	jne	short tryp
 28289                                  
 28290                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28291                                  ; (SYSINIT:2AE0h)
 28292                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28293                                  ;%if 0
 28294 000026F5 E8491A                  	call	query_user      ; query the user if config_cmd
 28295 000026F8 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 28296                                  ;endif
 28297                                  ;%endif ; 30/10/2022
 28298                                  
 28299                                  	; 14/12/2022
 28300                                  	; ds = cs
 28301                                  
 28302 000026FA BF[791E]                	mov	di,ldrv_parms
 28303 000026FD 31C9                    	xor	cx,cx
 28304                                  	; 03/01/2023
 28305                                  	;mov	dx,cx
 28306                                  do73:
 28307 000026FF E83802                  	call	sysinit_parse
 28308 00002702 7303                    	jnc	short if73	; parse error
 28309                                  	;call	badparm_p	;  and show messages and end the search loop.
 28310                                  	;jmp	short sr73
 28311                                  	; 03/01/2023
 28312 00002704 E95F01                  	jmp	badparm_p_coff
 28313                                  if73:
 28314 00002707 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28315 0000270A 7408                    	je	short en73	; then end the $endloop
 28316                                  
 28317                                  	; 14/12/2022
 28318                                  	; ds = cs
 28319                                  	;;mov	al,[cs:rv_dword]
 28320                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 28321                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 28322                                  
 28323                                  	;mov	al,[rv_dword]
 28324 0000270C A0[BF1D]                	mov	al,[rv_byte]
 28325 0000270F A2[8D1E]                	mov	[p_ldrv],al
 28326                                  
 28327 00002712 EBEB                    	jmp	short do73
 28328                                  en73:
 28329                                  	; 14/12/2022
 28330                                  	; ds = cs
 28331 00002714 A0[8D1E]                	mov	al,[p_ldrv]
 28332 00002717 A2[A002]                	mov	[NUM_CDS],al
 28333                                  	;mov	al,[cs:p_ldrv]
 28334                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 28335                                  sr73:
 28336 0000271A E9E1F9                  	jmp	coff
 28337                                  
 28338                                  ;--------------------------------------------------------------------------
 28339                                  ; setting drive parameters
 28340                                  ;--------------------------------------------------------------------------
 28341                                  
 28342                                  tryp:
 28343 0000271D 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 28344 00002720 7516                    	jne	short tryk
 28345                                  
 28346                                  ; 31/12/2022 - Retro DOS v4.2
 28347                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28348                                  ;%if 0
 28349                                  ;ifdef	MULTI_CONFIG
 28350 00002722 E81C1A                  	call	query_user      ; query the user if config_cmd
 28351 00002725 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 28352                                  ;endif
 28353                                  ;%endif ; 30/10/2022
 28354                                  
 28355 00002727 E8E50E                  	call	parseline
 28356 0000272A 7209                    	jc	short trypbad
 28357 0000272C E8F90D                  	call	setparms
 28358 0000272F E83B0E                  	call	diddleback
 28359                                  
 28360                                  ; No error check here, because setparms and diddleback have no error 
 28361                                  ; returns, and setparms as coded now can return with carry set. 
 28362                                  ;       jc	short trypbad
 28363                                  
 28364                                  	; 12/12/2022
 28365                                  	; cf = 0
 28366                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28367                                  	;jc	short trypbad
 28368                                  	
 28369 00002732 E9C9F9                  	jmp	coff
 28370                                  trypbad:
 28371 00002735 E92502                  	jmp	badop
 28372                                  
 28373                                  ;--------------------------------------------------------------------------
 28374                                  ; setting internal stack parameters
 28375                                  ; stacks=m,n where
 28376                                  ;	m is the number of stacks (range 8 to 64,default 9)
 28377                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 28378                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 28379                                  ;	any combinations that are not within the specified limits will
 28380                                  ;	result in "unrecognized command" error.
 28381                                  ;--------------------------------------------------------------------------
 28382                                  
 28383                                  ;**************************************************************************
 28384                                  ;									  *
 28385                                  ; function: parse the parameters of stacks= command.			  *
 28386                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 28387                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 28388                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 28389                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 28390                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 28391                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 28392                                  ;	    (or if "0,0" pair has been entered.)			  *
 28393                                  ; input :								  *
 28394                                  ;	es:si -> parameters in command line.				  *
 28395                                  ; output:								  *
 28396                                  ;	set the variables stack_count,stack_size.			  *
 28397                                  ;									  *
 28398                                  ; subroutines to be called:						  *
 28399                                  ;	sysinit_parse							  *
 28400                                  ; logic:								  *
 28401                                  ; {									  *
 28402                                  ;	set di points to stks_parms;					  *
 28403                                  ;	set dx,cx to 0; 						  *
 28404                                  ;	while (end of command line)					  *
 28405                                  ;	{ sysinit_parse;						  *
 28406                                  ;	  if (no error) then						  *
 28407                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 28408                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 28409                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 28410                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 28411                                  ;	     }								  *
 28412                                  ;	  else	/*error exit*/						  *
 28413                                  ;	     error exit;						  *
 28414                                  ;	};								  *
 28415                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 28416                                  ;	if o.k.,then set stack_count,stack_size;			  *
 28417                                  ;	 else error_exit;						  *
 28418                                  ; };									  *
 28419                                  ;**************************************************************************
 28420                                  
 28421                                  tryk:
 28422                                          ;if      stacksw
 28423                                  
 28424 00002738 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 28425 0000273B 7402                    	je	short do_tryk
 28426                                  skip_it4:
 28427 0000273D EB79                    	jmp	short trys	; 15/12/2022
 28428                                  do_tryk:
 28429                                  
 28430                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28431                                  ; (SYSINIT:2B33h)
 28432                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28433                                  ;%if 0
 28434                                  ;ifdef	MULTI_CONFIG
 28435 0000273F E8FF19                         call	query_user              ; query the user if config_cmd
 28436 00002742 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 28437                                  ;endif
 28438                                  ;%endif	; 30/10/2022
 28439                                  
 28440                                  	; 14/12/2022
 28441                                  	; ds = cs
 28442                                  
 28443 00002744 BF[8E1E]                	mov	di,stks_parms
 28444 00002747 31C9                    	xor	cx,cx
 28445                                  	; 03/01/2023
 28446                                  	;mov	dx,cx
 28447                                  do79:
 28448 00002749 E8EE01                  	call	sysinit_parse
 28449 0000274C 730B                    	jnc	short if79		; parse error
 28450                                  
 28451 0000274E BA[DF4B]                	mov	dx,badstack		; "invalid stack parameter"
 28452 00002751 E8241E                  	call	print			;  and show messages and end the search loop.
 28453 00002754 E85102                  	call	error_line
 28454                                  	;jmp	sr79
 28455                                  	; 11/12/2022
 28456 00002757 EB39                    	jmp	short sr79
 28457                                  if79:
 28458 00002759 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28459 0000275C 7412                    	je	short en79		; then end the $endloop
 28460                                  
 28461                                  	; 14/12/2022
 28462                                  	; ds = cs
 28463                                  
 28464                                  	;;mov	ax,[cs:rv_dword]
 28465                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28466                                  	;mov	ax,[rv_dword]
 28467 0000275E A1[BF1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 28468                                  
 28469 00002761 83F901                  	cmp	cx,1
 28470 00002764 7505                    	jne	short if83
 28471                                  
 28472                                  	; 14/12/2022
 28473                                  	;mov	[cs:p_stack_count],ax
 28474                                  	;jmp	short en83
 28475 00002766 A3[C31E]                	mov	[p_stack_count],ax
 28476 00002769 EBDE                    	jmp	short do79
 28477                                  if83:
 28478                                  	; 14/12/2022
 28479                                  	;mov	[cs:p_stack_size],ax
 28480 0000276B A3[C51E]                	mov	[p_stack_size],ax
 28481                                  en83:
 28482 0000276E EBD9                    	jmp	short do79
 28483                                  en79:
 28484                                  	; 14/12/2022
 28485                                  	; ds = cs
 28486 00002770 A1[C31E]                	mov	ax,[p_stack_count]
 28487 00002773 09C0                    	or	ax,ax
 28488 00002775 741E                    	jz	short if87		
 28489                                  
 28490                                  	; 14/12/2022
 28491                                  	;cmp	word [p_stack_count],0
 28492                                  	;;cmp	word [cs:p_stack_count],0
 28493                                  	;je	short if87
 28494                                  
 28495                                  	; 14/12/2022
 28496 00002777 83F808                  	cmp	ax,mincount ; 8
 28497                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 28498                                  	; 15/12/2022
 28499 0000277A 721F                    	jb	short en87
 28500 0000277C 833E[C51E]20            	cmp	word [p_stack_size],minsize ; 32
 28501                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 28502                                  	; 15/12/2022
 28503 00002781 7218                    	jb	short en87
 28504                                  if94:
 28505                                  	; 14/12/2022
 28506                                  	; ds = cs
 28507                                  	; ax = [p_stack_count]
 28508                                  	;mov	ax,[p_stack_count]
 28509                                  	;;mov	ax,[cs:p_stack_count]
 28510 00002783 A3[8A02]                	mov	[stack_count],ax
 28511                                  	;mov	[cs:stack_count],ax
 28512                                  	;mov	ax,[cs:p_stack_size]
 28513 00002786 A1[C51E]                	mov	ax,[p_stack_size]
 28514                                  	;mov	[cs:stack_size],ax
 28515 00002789 A3[8C02]                	mov	[stack_size],ax
 28516                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28517 0000278C C706[8E02]FFFF          	mov	word [stack_addr],-1
 28518                                  sr79:
 28519 00002792 E969F9                  	jmp	coff
 28520                                  
 28521                                  if87:
 28522                                  	; 14/12/2022
 28523 00002795 3906[C51E]              	cmp	[p_stack_size],ax ; 0
 28524 00002799 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 28525                                  	;cmp	word [cs:p_stack_size],0
 28526                                  	;je	short if94
 28527                                  en87:
 28528                                  	; 15/12/2022
 28529                                  	; ([p_stack_count] is invalid, use default values)
 28530                                  	; 14/12/2022
 28531                                  	; ds = cs
 28532 0000279B C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 28533 000027A1 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 28534 000027A7 C706[8E02]0000          	mov	word [stack_addr],0
 28535                                  	;mov	word [cs:stack_count],defaultcount ; 9
 28536                                  	;				; reset to default value.
 28537                                  	;mov	word [cs:stack_size],defaultsize ; 128
 28538                                  	;mov	word [cs:stack_addr],0
 28539                                  
 28540 000027AD BA[DF4B]                	mov	dx,badstack
 28541 000027B0 E8C51D                  	call	print
 28542 000027B3 E8F201                  	call	error_line
 28543 000027B6 EBDA                    	jmp	short sr79
 28544                                  
 28545                                  ; 15/12/2022
 28546                                  %if 0
 28547                                  	mov	di,stks_parms
 28548                                  	xor	cx,cx
 28549                                  	; 03/01/2023
 28550                                  	;mov	dx,cx
 28551                                  do79:
 28552                                  	call	sysinit_parse
 28553                                  	jnc	short if79		; parse error
 28554                                  
 28555                                  	mov	dx,badstack		; "invalid stack parameter"
 28556                                  	call	print			;  and show messages and end the search loop.
 28557                                  	call	error_line
 28558                                  	;jmp	sr79
 28559                                  	; 11/12/2022
 28560                                  	jmp	short sr79
 28561                                  if79:
 28562                                  	cmp	ax,_$P_RC_EOL		; end of line?
 28563                                  	je	short en79		; then end the $endloop
 28564                                  
 28565                                  	;mov	ax,[cs:rv_dword]
 28566                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28567                                  	cmp	cx,1
 28568                                  	jne	short if83
 28569                                  
 28570                                  	mov	[cs:p_stack_count],ax
 28571                                  	jmp	short en83
 28572                                  if83:
 28573                                  	mov	[cs:p_stack_size],ax
 28574                                  en83:
 28575                                  	jmp	short do79
 28576                                  en79:
 28577                                  	cmp	word [cs:p_stack_count],0
 28578                                  	je	short if87
 28579                                  
 28580                                  	cmp	word [cs:p_stack_count],mincount ; 8
 28581                                  	jb	short ll88
 28582                                  	cmp	word [cs:p_stack_size],minsize ; 32
 28583                                  	jnb	short if88
 28584                                  ll88:
 28585                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28586                                  if88:
 28587                                  	jmp	short en87
 28588                                  
 28589                                  	; 11/12/2022
 28590                                  if94:
 28591                                  	mov	ax,[cs:p_stack_count]
 28592                                  	mov	[cs:stack_count],ax
 28593                                  	mov	ax,[cs:p_stack_size]
 28594                                  	mov	[cs:stack_size],ax
 28595                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28596                                  sr79:
 28597                                  	jmp	coff
 28598                                  
 28599                                  if87:
 28600                                  	cmp	word [cs:p_stack_size],0
 28601                                  	je	short en87
 28602                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28603                                  en87:
 28604                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 28605                                  	jne	short if94
 28606                                  
 28607                                  	mov	word [cs:stack_count],defaultcount ; 9
 28608                                  					; reset to default value.
 28609                                  	mov	word [cs:stack_size],defaultsize ; 128
 28610                                  	mov	word [cs:stack_addr],0
 28611                                  
 28612                                  	mov	dx,badstack
 28613                                  	call	print
 28614                                  	call	error_line
 28615                                  	jmp	short sr79
 28616                                  
 28617                                  %endif
 28618                                  
 28619                                  ; 11/12/2022
 28620                                  %if 0 
 28621                                  
 28622                                  if94:
 28623                                  	mov	ax,[cs:p_stack_count]
 28624                                  	mov	[cs:stack_count],ax
 28625                                  	mov	ax,[cs:p_stack_size]
 28626                                  	mov	[cs:stack_size],ax
 28627                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28628                                  sr79:
 28629                                  	jmp	coff
 28630                                  
 28631                                  %endif
 28632                                  
 28633                                  	;endif
 28634                                  
 28635                                  ;------------------------------------------------------------------------
 28636                                  ; shell command
 28637                                  ;------------------------------------------------------------------------
 28638                                  
 28639                                  trys:
 28640 000027B8 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 28641 000027BB 755A                    	jne	short tryx
 28642                                  
 28643                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28644                                  ; (SYSINIT:2BE1h)
 28645                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28646                                  ;%if 0
 28647                                  ;ifdef	MULTI_CONFIG
 28648 000027BD E88119                  	call	query_user              ; query the user if config_cmd
 28649 000027C0 7255                    	jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 28650 000027C2 2EC606[4F46]01          	mov	byte [cs:newcmd],1
 28651                                  ;endif
 28652                                  ;%endif ; 30/10/2022
 28653                                  
 28654                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 28655                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28656                                  	;mov	byte [cs:command_line+1],0
 28657                                  	; 15/12/2022
 28658                                  	; ds = cs
 28659 000027C8 C606[E146]00            	mov	byte [command_line+1],0
 28660                                  
 28661 000027CD BF[5346]                        mov     di,commnd+1		; we already have the first char
 28662 000027D0 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 28663                                  storeshell:
 28664 000027D3 E8BB01                  	call	getchr
 28665 000027D6 08C0                            or      al,al                   ; this is the normal case: "organize"
 28666 000027D8 741C                            jz	short getshparms	; put a ZERO right after the filename
 28667                                  
 28668 000027DA 3C20                            cmp     al," "                  ; this may happen if there are no args
 28669 000027DC 7209                            jb	short endofshell	; I suppose...
 28670 000027DE 8805                    	mov	[di],al
 28671 000027E0 47                      	inc	di
 28672                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 28673                                          ;jb	short storeshell	; commnd (the filename)
 28674                                          ;jmp	short endofshell
 28675                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28676                                  	;jmp	short storeshell
 28677                                  	; 03/01/2023
 28678 000027E1 81FF[9146]              	cmp	di,commnd+63		; this makes sure we don't overflow
 28679 000027E5 72EC                            jb	short storeshell	; commnd (the filename)
 28680                                  	;jmp	short endofshell
 28681                                  
 28682                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28683                                  ;getshparms:
 28684                                  ;	mov     byte [di],0		; zero-terminate the filename
 28685                                  ;	mov     di,command_line+1	; prepare to process the command-line
 28686                                  ;
 28687                                  ;parmloop:
 28688                                  ;	call	getchr
 28689                                  ;	cmp	al," "
 28690                                  ;	jb	short endofparms
 28691                                  ;	mov	[di],al
 28692                                  ;	inc	di
 28693                                  ;	cmp     di,command_line+126
 28694                                  ;	jb	short parmloop
 28695                                  ;endofparms:
 28696                                  ;	mov     cx,di
 28697                                  ;	sub     cx,command_line+1
 28698                                  ;	mov     [cs:command_line],cl
 28699                                  ;
 28700                                  ;endofshell:
 28701                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 28702                                  ;					; the command-line as the case may be)
 28703                                  ;skipline:
 28704                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28705                                  ;       je	short endofline		; the line: watch for ever-present LF
 28706                                  ;call	getchr
 28707                                  ;       jnc	short skipline		; keep it up as long as there are chars
 28708                                  ;
 28709                                  ;endofline:
 28710                                  ;       jmp     conflp
 28711                                  
 28712                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28713                                  endofshell:
 28714 000027E7 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 28715                                  					; the command-line as the case may be)
 28716                                  	; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 28717                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 28718                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:314Eh
 28719                                  	;call	getchr
 28720                                  skipline:		; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 28721 000027EA 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28722 000027EC 7405                    	je	short endofline		; the line: watch for ever-present LF
 28723 000027EE E8A001                  	call	getchr
 28724                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 28725                                  	; (SYSINIT:2C3Ah)
 28726 000027F1 73F7                    	jnb	short skipline
 28727                                  	
 28728                                  endofline:
 28729 000027F3 E9B0F8                  	jmp     conflp
 28730                                  
 28731                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28732                                  getshparms:
 28733                                  	; 18/12/2022
 28734                                  	; al = 0
 28735 000027F6 8805                    	mov	[di],al ; 0
 28736                                  	;mov	byte [di],0		; zero-terminate the filename
 28737 000027F8 BF[E146]                	mov     di,command_line+1	; prepare to process the command-line
 28738                                  parmloop:
 28739 000027FB E89301                  	call	getchr
 28740 000027FE 3C20                    	cmp	al," " ; 20h
 28741                                  	;jb	short endofshell
 28742                                  	; 03/01/2023
 28743 00002800 7209                    	jb	short endofparms
 28744                                  
 28745 00002802 8805                    	mov	[di],al
 28746 00002804 47                      	inc	di
 28747                                  	;jmp	short parmloop
 28748                                  	; 03/01/2023 - Retro DOS v4.2
 28749 00002805 81FF[5E47]              	cmp     di,command_line+126
 28750 00002809 72F0                    	jb	short parmloop
 28751                                  
 28752                                  	; 03/01/2023 - Retro DOS v4.2
 28753                                  endofparms:
 28754 0000280B 89F9                    	mov	cx,di
 28755 0000280D 81E9[E146]              	sub	cx,command_line+1
 28756                                  	;mov	[cs:command_line],cl
 28757                                  	; 03/01/2023
 28758 00002811 880E[E046]              	mov	[command_line],cl
 28759 00002815 EBD0                    	jmp	short endofshell
 28760                                  
 28761                                  ;------------------------------------------------------------------------
 28762                                  ; fcbs command
 28763                                  ;------------------------------------------------------------------------
 28764                                  
 28765                                  ;************************************************************************
 28766                                  ; function: parse the parameters of fcbs= command.			*
 28767                                  ;									*
 28768                                  ; input :								*
 28769                                  ;	es:si -> parameters in command line.				*
 28770                                  ; output:								*
 28771                                  ;	set the variables fcbs,keep.					*
 28772                                  ;									*
 28773                                  ; subroutines to be called:						*
 28774                                  ;	sysinit_parse							*
 28775                                  ; logic:								*
 28776                                  ; {									*
 28777                                  ;	set di points to fcbs_parms;					*
 28778                                  ;	set dx,cx to 0; 						*
 28779                                  ;	while (end of command line)					*
 28780                                  ;	{ sysparse;							*
 28781                                  ;	  if (no error) then						*
 28782                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 28783                                  ;		   fcbs = result_val._$P_picked_val;			*
 28784                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 28785                                  ;		   keep = result_val._$P_picked_val;			*
 28786                                  ;	     }								*
 28787                                  ;	  else	/*error exit*/						*
 28788                                  ;	     error exit;						*
 28789                                  ;	};								*
 28790                                  ; };									*
 28791                                  ;************************************************************************
 28792                                  
 28793                                  tryx:
 28794 00002817 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 28795                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28796 0000281A 7534                    	jne	short try1
 28797                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28798                                  	;jne	short tryy	; comment command
 28799                                  
 28800                                  ; 31/12/2022 - Retro DOS v4.2
 28801                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28802                                  ;%if 0
 28803                                  ;ifdef	MULTI_CONFIG
 28804 0000281C E82219                  	call	query_user      ; query the user if config_cmd
 28805 0000281F 722F                    	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 28806                                  ;endif
 28807                                  ;%endif ; 30/10/2022
 28808                                  
 28809 00002821 BF[421E]                	mov	di,fcbs_parms
 28810 00002824 31C9                    	xor	cx,cx
 28811                                  	; 03/01/2023
 28812                                  	;mov	dx,cx
 28813                                  do98:
 28814 00002826 E81101                  	call	sysinit_parse
 28815                                          ; 03/01/2023
 28816                                  	;jnc	short if98	; parse error
 28817                                          ;call	badparm_p	;  and show messages and end the search loop.
 28818                                  	;jmp	short sr98
 28819                                  	;------------------------
 28820                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28821 00002829 723B                    	jc	short badparm_p_coff
 28822                                  if98:
 28823 0000282B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28824 0000282E 7412                    	je	short en98	; then end the $endloop
 28825                                  
 28826                                  	;;mov	al,[cs:rv_dword]
 28827                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28828                                  	; 15/12/2022
 28829                                  	; ds = cs
 28830 00002830 A0[BF1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28831 00002833 83F901                  	cmp	cx,1		; the first positional?
 28832 00002836 7505                    	jne	short if102
 28833                                  	;mov	[cs:p_fcbs],al
 28834                                  	; 15/12/2022
 28835 00002838 A2[771E]                	mov	[p_fcbs],al
 28836                                  	;jmp	short en102
 28837 0000283B EBE9                    	jmp	short do98
 28838                                  if102:
 28839                                  	;mov	[cs:p_keep],al
 28840                                  	; 15/12/2022
 28841 0000283D A2[781E]                	mov	[p_keep],al
 28842                                  en102:
 28843 00002840 EBE4                    	jmp	short do98
 28844                                  en98:
 28845                                  	; 15/12/2022
 28846                                  	; ds = cs
 28847 00002842 A0[771E]                	mov	al,[p_fcbs]
 28848 00002845 A2[9E02]                	mov	[FCBS],al
 28849 00002848 C606[9F02]00            	mov	byte [KEEP],0
 28850                                  	;mov	al,[cs:p_fcbs]	 ; M017
 28851                                  	;mov	[cs:FCBS],al	 ; M017
 28852                                  	;mov	byte [cs:KEEP],0 ; M017
 28853                                  sr98:
 28854 0000284D E9AEF8                  	jmp	coff
 28855                                  
 28856                                  ; 31/12/2022 - Retro DOS v4.2
 28857                                  %if 0
 28858                                  
 28859                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28860                                  ;-------------------------------------------------------------------------
 28861                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28862                                  ;		line number
 28863                                  ;-------------------------------------------------------------------------
 28864                                  
 28865                                  tryy:
 28866                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28867                                  	jne	short try0
 28868                                  
 28869                                  donothing:
 28870                                  	; 15/12/2022
 28871                                  	; ds = cs
 28872                                  	dec	word [chrptr]
 28873                                  	inc	word [count]
 28874                                  	; 02/11/2022
 28875                                  	;dec	word [cs:chrptr]
 28876                                  	;inc	word [cs:count]
 28877                                  
 28878                                  	jmp	coff
 28879                                  
 28880                                  ;------------------------------------------------------------------------
 28881                                  ; rem command
 28882                                  ;------------------------------------------------------------------------
 28883                                  
 28884                                  try0:				; do nothing with this line.
 28885                                  	cmp     ah,CONFIG_REM ; '0'
 28886                                  	je	short donothing
 28887                                  
 28888                                  %endif
 28889                                  
 28890                                  ; 07/04/2019 - Retro DOS v4.0
 28891                                  
 28892                                  ;-----------------------------------------------------------------------
 28893                                  ; switches command
 28894                                  ;-----------------------------------------------------------------------
 28895                                  
 28896                                  ;***********************************************************************
 28897                                  ;								       *
 28898                                  ; function: parse the option switches specified.		       *
 28899                                  ; note - this command is intended for the future use also.	       *
 28900                                  ; when we need to set system data flag,use this command.	       *
 28901                                  ;								       *
 28902                                  ; input :							       *
 28903                                  ;	es:si -> parameters in command line.			       *
 28904                                  ; output:							       *
 28905                                  ;	p_swit_k set if /k option chosen.			       *
 28906                                  ;								       *
 28907                                  ; subroutines to be called:					       *
 28908                                  ;	sysinit_parse						       *
 28909                                  ; logic:							       *
 28910                                  ; {								       *
 28911                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 28912                                  ;	set dx,cx to 0; 					       *
 28913                                  ;	while (end of command line)				       *
 28914                                  ;	{ sysinit_parse;					       *
 28915                                  ;	  if (no error) then					       *
 28916                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 28917                                  ;		    p_swit_k = 1				       *
 28918                                  ;	       endif						       *
 28919                                  ;	  else {show error message;error exit}			       *
 28920                                  ;	};							       *
 28921                                  ; };								       *
 28922                                  ;								       *
 28923                                  ;***********************************************************************
 28924                                  
 28925                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 28926                                  
 28927                                  try1:
 28928 00002850 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 28929 00002853 7402                    	je	short do_try1	; switches= command entered?
 28930                                  skip_it5:
 28931                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28932                                  	; (SYSINIT:2C8Ah)
 28933 00002855 EB7F                    	jmp	tryv
 28934                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28935                                  	;jmp	tryz
 28936                                  
 28937                                  do_try1:
 28938                                  
 28939                                  ; 31/12/2022 - Retro DOS v4.2
 28940                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28941                                  ;%if 0
 28942                                  ;ifdef	MULTI_CONFIG
 28943 00002857 E8E718                  	call	query_user      ; query the user if config_cmd
 28944 0000285A 72F9                    	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 28945                                  ;endif
 28946                                  ;%endif ; 30/10/2022
 28947                                  
 28948 0000285C BF[DC1E]                	mov	di,swit_parms
 28949 0000285F 31C9                    	xor	cx,cx
 28950                                  	; 03/01/2023
 28951                                  	;mov	dx,cx
 28952                                  do110:
 28953 00002861 E8D600                  	call	sysinit_parse
 28954 00002864 7306                    	jnc	short if110	; parse error
 28955                                  	;call	badparm_p	;  and show messages and end the search loop.
 28956                                  	;jmp	short sr110
 28957                                  	; -----------------------
 28958                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28959                                  badparm_p_coff:
 28960 00002866 E80001                  	call	badparm_p
 28961 00002869 E992F8                  	jmp	coff
 28962                                  	;------------------------
 28963                                  if110:
 28964 0000286C 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28965 0000286F 742D                    	je	short en110	; then jmp to $endloop for semantic check
 28966                                  
 28967                                  	; 15/12/2022
 28968                                  	; ds = cs
 28969                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28970                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28971 00002871 813E[BD1D][F81E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28972 00002877 7507                    	jne	short if115	;				;M059
 28973                                  	; 15/12/2022
 28974 00002879 C606[2B1F]01            	mov	byte [p_swit_k],1
 28975                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28976 0000287E EBE1                    	jmp	short do110
 28977                                  if115:	
 28978                                  	; 15/12/2022						;M059
 28979                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28980                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28981 00002880 813E[BD1D][1C1F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28982 00002886 7507                    	jne	short if116					;M059 M063
 28983                                  	; 15/12/2022
 28984 00002888 C606[2C1F]01            	mov	byte [p_swit_t],1
 28985                                  	;mov	byte [cs:p_swit_t],1				;M059
 28986 0000288D EBD2                    	jmp	short do110					;M059
 28987                                  if116:
 28988                                  	; 15/12/2022
 28989                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28990                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28991 0000288F 813E[BD1D][281F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28992 00002895 75CA                    	jne	short do110					;M063
 28993                                  	; 15/12/2022
 28994 00002897 C606[2D1F]01            	mov	byte [p_swit_w],1
 28995                                  	;mov	byte [cs:p_swit_w],1				;M063
 28996 0000289C EBC3                    	jmp	short do110					;M063
 28997                                  en110:
 28998                                  	; 15/12/2022
 28999                                  	; ds = cs
 29000 0000289E 803E[2B1F]01            	cmp	byte [p_swit_k],1
 29001                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 29002 000028A3 1E                      	push	ds
 29003                                  	;;mov	ax,Bios_Data
 29004                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 29005                                  	; 21/10/2022
 29006 000028A4 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 29007 000028A7 8ED8                    	mov	ds,ax
 29008 000028A9 750A                    	jne	short if117
 29009 000028AB C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 29010 000028B0 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 29011                                  if117:
 29012                                  	; 15/12/2022
 29013                                  	; ds <> cs
 29014 000028B5 2EA0[2C1F]              	mov	al,[cs:p_swit_t]				;M059
 29015 000028B9 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 29016                                  
 29017 000028BC 2E803E[2D1F]00          	cmp	byte [cs:p_swit_w],0				;M063
 29018 000028C2 740E                    	je	short skip_dos_flag				;M063
 29019 000028C4 06                      	push	es
 29020 000028C5 53                      	push	bx
 29021 000028C6 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 29022 000028C8 CD21                    	int	21h						;M063
 29023                                  			; DOS - 2+ internal - GET LIST OF LISTS
 29024                                  			; Return: ES:BX -> DOS list of lists
 29025                                  	;or	bytes [es:86h],2
 29026 000028CA 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 29027 000028D0 5B                      	pop	bx
 29028 000028D1 07                      	pop	es
 29029                                  skip_dos_flag:							;M063
 29030 000028D2 1F                      	pop	ds
 29031                                  sr110:
 29032 000028D3 E928F8                  	jmp	coff
 29033                                  
 29034                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29035                                  ; (SYSINIT:2D14h)
 29036                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29037                                  ;%if 0
 29038                                  
 29039                                  tryv:
 29040                                  
 29041                                  ;ifdef	MULTI_CONFIG
 29042                                  ;------------------------------------------------------------------------
 29043                                  ; set command (as in "set var=value<cr/lf>")
 29044                                  ;------------------------------------------------------------------------
 29045                                  
 29046 000028D6 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 29047 000028D9 750F                    	jne	short tryn
 29048 000028DB E86318                  	call	query_user      ; query the user if config_cmd
 29049 000028DE 720A                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 29050 000028E0 E85714                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 29051 000028E3 73EE                    	jnc	short sr110	; no error
 29052                                  err:    
 29053 000028E5 E8C000                  	call	error_line      ; whoops, display error in line XXX
 29054 000028E8 EBE9                    	jmp	short sr110     ; jump to coff (to skip to next line)
 29055                                  
 29056                                  ;------------------------------------------------------------------------
 29057                                  ; numlock command (as in "numlock=on|off")
 29058                                  ;------------------------------------------------------------------------
 29059                                  tryn:
 29060 000028EA 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 29061 000028ED 750C                    	jne	short tryy      
 29062 000028EF E84F18                  	call	query_user      ; query the user if config_cmd
 29063 000028F2 7207                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 29064 000028F4 E8C410                  	call	set_numlock
 29065 000028F7 72EC                    	jc	short err
 29066 000028F9 EBD8                    	jmp	short sr110	; all done
 29067                                  
 29068                                  ;endif	;MULTI_CONFIG
 29069                                  
 29070                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29071                                  ;-------------------------------------------------------------------------
 29072                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 29073                                  ;		line number
 29074                                  ;-------------------------------------------------------------------------
 29075                                  
 29076                                  	; 31/12/2022
 29077                                  tryy:
 29078 000028FB 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 29079 000028FE 750B                    	jne	short try0
 29080                                  
 29081                                  donothing:
 29082                                  	; 15/12/2022
 29083                                  	; ds = cs
 29084 00002900 FF0E[5803]              	dec	word [chrptr]
 29085 00002904 FF06[5403]              	inc	word [count]
 29086                                  	; 02/11/2022
 29087                                  	;dec	word [cs:chrptr]
 29088                                  	;inc	word [cs:count]
 29089                                  
 29090 00002908 E9F3F7                  	jmp	coff
 29091                                  
 29092                                  ;------------------------------------------------------------------------
 29093                                  ; rem command
 29094                                  ;------------------------------------------------------------------------
 29095                                  
 29096                                  try0:				; do nothing with this line.
 29097 0000290B 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 29098 0000290E 74F0                    	je	short donothing
 29099                                  
 29100                                  ;%endif	; 30/10/2022
 29101                                  
 29102                                  ; 30/10/2022
 29103                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 29104                                  
 29105                                  ;------------------------------------------------------------------------
 29106                                  ; bogus command
 29107                                  ;------------------------------------------------------------------------
 29108                                  
 29109                                  tryz:
 29110 00002910 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 29111                                  	; 31/12/2022
 29112 00002913 74EB                    	je	short donothing
 29113                                  	; 02/11/2022
 29114                                  	;je	short tryz_donothing
 29115                                  
 29116 00002915 FF0E[5803]              	dec	word [chrptr]
 29117 00002919 FF06[5403]              	inc	word [count]
 29118 0000291D EB3E                    	jmp	short badop
 29119                                  
 29120                                  ; 31/12/2022
 29121                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 29122                                  ;tryz_donothing:
 29123                                  ;	jmp	donothing
 29124                                  
 29125                                  ; 07/04/2019 - Retro DOS v4.0
 29126                                  
 29127                                  ;------------------------------------------------------------------------------
 29128                                  
 29129                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29130                                  ; (SYSINIT:2D5Dh)
 29131                                  
 29132                                  ; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29133                                  
 29134                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29135                                  ;
 29136                                  ;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 29137                                  ;
 29138                                  ;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 29139                                  ;
 29140                                  CheckProtmanArena:
 29141 0000291F 06                      	push	es
 29142 00002920 2EA1[6603]              	mov	ax,[cs:area]	; get our arena header
 29143 00002924 48                      	dec	ax
 29144 00002925 8EC0                    	mov	es,ax
 29145                                  	;add	ax,[es:ARENA.SIZE]
 29146 00002927 2603060300              	add	ax,[es:3]	; find end of arena
 29147 0000292C 40                      	inc	ax
 29148 0000292D 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 29149 00002932 7704                    	ja	short CheckProtmanDone
 29150                                  
 29151 00002934 2EA3[A302]              	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 29152                                  CheckProtmanDone:
 29153 00002938 07                      	pop	es
 29154 00002939 C3                      	retn
 29155                                  
 29156                                  ;------------------------------------------------------------------------------
 29157                                  
 29158                                  sysinit_parse:
 29159                                  
 29160                                  ;------------------------------------------------------------------------------
 29161                                  ;set up registers for sysparse
 29162                                  ;in)	es:si -> command line in confbot
 29163                                  ;	di -> offset of the parse control definition.
 29164                                  ;
 29165                                  ;out)	calls sysparse.
 29166                                  ;	carry will set if parse error.
 29167                                  ;	*** the caller should check the eol condition by looking at ax
 29168                                  ;	*** after each call.
 29169                                  ;	*** if no parameters are found,then ax will contain a error code.
 29170                                  ;	*** if the caller needs to look at the synomym@ of the result,
 29171                                  ;	***  the caller should use cs:@ instead of es:@.
 29172                                  ;	cx register should be set to 0 at the first time the caller calls this
 29173                                  ;	 procedure.
 29174                                  ;	ax - exit code
 29175                                  ;	bl - terminated delimeter code
 29176                                  ;	cx - new positional ordinal
 29177                                  ;	si - set to pase scanned operand
 29178                                  ;	dx - selected result buffer
 29179                                  ;------------------------------------------------------------------------------
 29180                                  
 29181                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29182                                  	; (SYSINIT:2D78h)
 29183                                  
 29184                                  	; 24/10/2022
 29185 0000293A 06                      	push	es			;save es,ds
 29186 0000293B 1E                      	push	ds
 29187                                  
 29188 0000293C 06                      	push	es
 29189 0000293D 1F                      	pop	ds			;now ds:si -> command line
 29190                                  
 29191 0000293E 0E                      	push	cs
 29192 0000293F 07                      	pop	es			;now es:di -> control definition
 29193                                  
 29194 00002940 2E8C1E[E614]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 29195 00002945 2E8936[E414]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 29196                                  	;mov	dx,0
 29197                                  	; 03/01/2023
 29198 0000294A 29D2                    	sub	dx,dx ; 0
 29199 0000294C E83FEC                  	call	SysParse
 29200 0000294F 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 29201                                  
 29202                                  ;**cas note:  when zero true after cmp, carry clear
 29203                                  
 29204                                  	;je	short ll4
 29205                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 29206                                  	; 12/12/2022
 29207 00002952 7406                    	je	short en4 ; cf=0
 29208 00002954 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 29209                                  	;jne	short if4
 29210                                  	; 12/12/2022
 29211 00002957 7401                    	je	short en4 ; cf=0
 29212                                  
 29213                                  ; 12/12/2022
 29214                                  ;ll4:
 29215                                  ;	; 12/12/2022
 29216                                  ;	; cf=0
 29217                                  ;	;clc
 29218                                  ;	jmp	short en4
 29219                                  
 29220                                  if4:
 29221                                  	; 24/10/2022
 29222 00002959 F9                      	stc
 29223                                  en4:
 29224 0000295A 1F                      	pop	ds
 29225 0000295B 07                      	pop	es
 29226 0000295C C3                      	retn
 29227                                  
 29228                                  ; 11/12/2022
 29229                                  %if 0
 29230                                  
 29231                                  ;----------------------------------------------------------------------------
 29232                                  ;
 29233                                  ; procedure : badop_p
 29234                                  ;
 29235                                  ;             same thing as badop,but will make sure to set ds register back
 29236                                  ;             to sysinitseg and return back to the caller.
 29237                                  ;
 29238                                  ;----------------------------------------------------------------------------
 29239                                  
 29240                                  badop_p:
 29241                                  	push	cs
 29242                                  	pop	ds		;set ds to configsys seg.
 29243                                  	mov	dx,badopm
 29244                                  	call	print
 29245                                          ;call	error_line
 29246                                  	;retn
 29247                                  	; 11/12/2022
 29248                                  	jmp	error_line
 29249                                  
 29250                                  %endif
 29251                                  
 29252                                  ;----------------------------------------------------------------------------
 29253                                  ;
 29254                                  ; label : badop
 29255                                  ;
 29256                                  ;----------------------------------------------------------------------------
 29257                                  
 29258                                  badop:	
 29259 0000295D BA[A04A]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 29260 00002960 E8151C                  	call	print
 29261 00002963 E84200                  	call	error_line	;show "error in config.sys ..." .
 29262 00002966 E995F7                  	jmp	coff
 29263                                  
 29264                                  ;----------------------------------------------------------------------------
 29265                                  ;
 29266                                  ; procedure : badparm_p
 29267                                  ;
 29268                                  ;             show "bad command or parameters - xxxxxx"
 29269                                  ;             in badparm_seg,badparm_off -> xxxxx
 29270                                  ;
 29271                                  ;----------------------------------------------------------------------------
 29272                                  
 29273                                  	; 24/10/2022
 29274                                  badparm_p:
 29275                                  	; 11/12/2022
 29276                                  	; ds = cs
 29277                                  	; 11/12/2022
 29278                                  	;push	ds ; *
 29279 00002969 52                      	push	dx
 29280 0000296A 56                      	push	si
 29281                                  
 29282                                  	; 11/12/2022
 29283                                  	; ds = cs
 29284                                  	;push	cs
 29285                                  	;pop	ds
 29286                                  
 29287 0000296B BA[C74A]                	mov	dx,badparm
 29288 0000296E E8071C                  	call	print			; "bad command or parameters - "
 29289 00002971 C536[E414]              	lds	si,[badparm_ptr]
 29290                                  
 29291                                  ;	print "xxxx" until cr.
 29292                                  
 29293                                  do1:
 29294 00002975 8A14                    	mov	dl,[si]			; get next character
 29295 00002977 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 29296 0000297A 7407                    	je	short en1		; exit loop if so
 29297                                  
 29298 0000297C B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 29299 0000297E CD21                    	int	21h			; display character
 29300 00002980 46                      	inc	si			; next character
 29301 00002981 EBF2                    	jmp	short do1
 29302                                  en1:
 29303 00002983 0E                      	push	cs
 29304 00002984 1F                      	pop	ds
 29305                                  
 29306 00002985 BA[C44A]                	mov	dx,crlfm
 29307 00002988 E8ED1B                  	call	print
 29308 0000298B E81A00                  	call	error_line
 29309                                  
 29310 0000298E 5E                      	pop	si
 29311 0000298F 5A                      	pop	dx
 29312                                  	; 11/12/2022
 29313                                  	;pop	ds ; *
 29314                                  badparmp_ret:
 29315 00002990 C3                      	retn
 29316                                  
 29317                                  ;----------------------------------------------------------------------------
 29318                                  ;
 29319                                  ; procedure : getchr
 29320                                  ;
 29321                                  ;----------------------------------------------------------------------------
 29322                                  
 29323                                  	; 24/10/2022
 29324                                  getchr:
 29325                                  	; 12/12/2022
 29326                                  	;push	cx
 29327                                  	;mov	cx,[count]
 29328                                  	;jcxz	nochar
 29329                                  	; 12/12/2022
 29330 00002991 833E[5403]01            	cmp	word [count],1 
 29331 00002996 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 29332                                  	
 29333 00002998 8B36[5803]              	mov	si,[chrptr]
 29334 0000299C 268A04                  	mov	al,[es:si]
 29335 0000299F FF0E[5403]              	dec	word [count]
 29336 000029A3 FF06[5803]              	inc	word [chrptr]
 29337                                  	; 12/12/202
 29338                                  	; cf=0
 29339                                  	;clc
 29340                                  ;get_ret:
 29341                                  	;pop	cx
 29342                                  	;retn
 29343                                  nochar: 
 29344                                  	; 12/12/2022
 29345                                  	; cf=1
 29346                                  	;stc
 29347                                  	;jmp	short get_ret
 29348                                  	
 29349 000029A7 C3                      	retn
 29350                                  
 29351                                  ; 11/12/2022
 29352                                  %if 0
 29353                                  
 29354                                  ;----------------------------------------------------------------------------
 29355                                  ;
 29356                                  ; procedure : incorrect_order
 29357                                  ;
 29358                                  ;             show "incorrect order in config.sys ..." message.
 29359                                  ;
 29360                                  ;----------------------------------------------------------------------------
 29361                                  
 29362                                  incorrect_order:
 29363                                  	mov	dx,badorder
 29364                                  	call	print
 29365                                  	call	showlinenum
 29366                                  	retn
 29367                                  
 29368                                  %endif
 29369                                  
 29370                                  ;----------------------------------------------------------------------------
 29371                                  ;
 29372                                  ; procedure : error_line
 29373                                  ;
 29374                                  ;             show "error in config.sys ..." message.
 29375                                  ;
 29376                                  ;----------------------------------------------------------------------------
 29377                                  
 29378                                  	; 11/12/2022
 29379                                  	; 24/10/2022
 29380                                  error_line:
 29381                                  	; 11/12/2022
 29382                                  	; ds = cs
 29383                                  	;push	cs
 29384                                  	;pop	ds
 29385                                  
 29386 000029A8 BA[FC4B]                	mov	dx,errorcmd
 29387 000029AB E8CA1B                  	call	print
 29388                                  	;call	showlinenum
 29389                                  	;retn
 29390                                  	; 11/12/2022
 29391                                  	;jmp	short showlinenum
 29392                                  
 29393                                  ;----------------------------------------------------------------------------
 29394                                  ;
 29395                                  ; procedure : showlinenum
 29396                                  ;
 29397                                  ; convert the binary linecount to decimal ascii string in showcount
 29398                                  ; and display showcount at the current curser position.
 29399                                  ; in.) linecount
 29400                                  ;
 29401                                  ; out) the number is printed.
 29402                                  ;
 29403                                  ;----------------------------------------------------------------------------
 29404                                  
 29405                                  	; 11/12/2022
 29406                                  	; ds = cs
 29407                                  	; 24/10/2022
 29408                                  showlinenum:
 29409 000029AE 06                      	push	es
 29410                                  	; 11/12/2022
 29411                                  	;push	ds
 29412 000029AF 57                      	push	di
 29413                                  
 29414 000029B0 0E                      	push	cs
 29415 000029B1 07                      	pop	es		; es=cs
 29416                                  
 29417                                  	; 11/12/2022
 29418                                  	;push	cs
 29419                                  	;pop	ds
 29420                                  
 29421 000029B2 BF[B302]                	mov	di,showcount+4	; di -> the least significant decimal field.
 29422 000029B5 B90A00                  	mov	cx,10		; decimal divide factor
 29423                                  	;mov	ax,[cs:linecount]
 29424                                  	; 11/12/2022
 29425 000029B8 A1[AD02]                	mov	ax,[linecount]
 29426                                  sln_loop:
 29427                                  	; 11/12/2022
 29428 000029BB 39C8                    	cmp	ax,cx ; < 10 ?
 29429                                  	;cmp	ax,10		; < 10?
 29430 000029BD 720C                    	jb	short sln_last  ; yes
 29431                                  
 29432 000029BF 31D2                    	xor	dx,dx
 29433 000029C1 F7F1                    	div	cx	; cx = 10
 29434 000029C3 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 29435                                  				; convert to ascii numeric char ("0" to "9")
 29436 000029C6 8815                    	mov	[di],dl
 29437 000029C8 4F                      	dec	di
 29438 000029C9 EBF0                    	jmp	short sln_loop
 29439                                  
 29440                                  sln_last:
 29441 000029CB 0C30                    	or	al,30h	; "0"   ; convert to ascii numeric char ("0" to "9")
 29442 000029CD 8805                    	mov	[di],al
 29443 000029CF 89FA                    	mov	dx,di
 29444 000029D1 E8A41B                  	call	print		; show it.
 29445 000029D4 5F                      	pop	di
 29446                                  	; 11/12/2022
 29447                                  	;pop	ds
 29448 000029D5 07                      	pop	es
 29449 000029D6 C3                      	retn
 29450                                  
 29451                                  ; 07/04/2019 - Retro DOS v4.0
 29452                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 29453                                  
 29454                                  ;----------------------------------------------------------------------------
 29455                                  ;
 29456                                  ; procedure : ProcDOS
 29457                                  ;
 29458                                  ;	Process the result of DOS= parsing
 29459                                  ;
 29460                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 29461                                  ;				= 2 for DOS=LOW
 29462                                  ;				= 3 for DOS=UMB
 29463                                  ;				= 4 for DOS=NOUMB
 29464                                  ;----------------------------------------------------------------------------
 29465                                  
 29466                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 29467                                  	; (SYTSINIT:2AB5h)
 29468                                  ProcDOS:
 29469                                  	; 01/01/2023
 29470                                  	; ds = cs
 29471 000029D7 30E4                    	xor	ah,ah
 29472                                  	;;mov	al,[cs:result_val_itag]
 29473                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 29474                                  	; 01/01/2023
 29475 000029D9 A0[BC1D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 29476 000029DC 48                      	dec	ax
 29477 000029DD 7415                    	jz	short pd_hi
 29478 000029DF 48                      	dec	ax
 29479 000029E0 740E                    	jz	short pd_lo
 29480 000029E2 48                      	dec	ax
 29481 000029E3 7405                    	jz	short pd_umb
 29482                                  	;;mov	byte [cs:DevUMB],0
 29483                                  	; 18/12/2022
 29484                                  	;mov	byte [cs:DevUMB],ah ; 0
 29485                                  	; 01/01/2023
 29486 000029E5 8826[B81F]              	mov	byte [DevUMB],ah ; 0
 29487 000029E9 C3                      	retn
 29488                                  pd_umb:
 29489                                  	; 01/01/2023
 29490 000029EA C606[B81F]FF            	mov	byte [DevUMB],0FFh
 29491                                  	;mov	byte [cs:DevUMB],0FFh
 29492 000029EF C3                      	retn
 29493                                  pd_lo:
 29494                                  	; 01/01/2023
 29495 000029F0 A2[6A02]                	mov	[runhigh],al ; 0
 29496                                  	; 18/12/2022
 29497                                  	;mov	[cs:runhigh],al ; 0
 29498                                  	;;mov	byte [cs:runhigh],0
 29499 000029F3 C3                      	retn
 29500                                  pd_hi:
 29501                                  	; 01/01/2023
 29502 000029F4 C606[6A02]FF            	mov	byte [runhigh],0FFh
 29503                                  	;mov	byte [cs:runhigh],0FFh
 29504                                  limx:	; 11/12/2022
 29505 000029F9 C3                      	retn
 29506                                  
 29507                                  ;----------------------------------------------------------------------------
 29508                                  ;
 29509                                  ; procedure : LieInt12Mem
 29510                                  ;
 29511                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 29512                                  ;		alloclim set to the limit of low memory.
 29513                                  ;
 29514                                  ;	Output : none
 29515                                  ;
 29516                                  ;	Changes the ROM BIOS variable which stores the total low memory
 29517                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 29518                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 29519                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 29520                                  ;	converted into Ks and stored in 40:13h
 29521                                  ;
 29522                                  ;----------------------------------------------------------------------------
 29523                                  
 29524                                  LieInt12Mem:
 29525                                  	; 11/12/2022
 29526                                  	; ds = cs
 29527 000029FA A1[A302]                	mov	ax,[ALLOCLIM]
 29528                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12h as alloclim
 29529                                  					; assuming that it is 3Com
 29530 000029FD E84400                  	call	IsIt3Com		; Is it 3Com driver?
 29531 00002A00 740A                    	jz	short lim_set		; yes, lie to him differently
 29532                                  	; 13/05/2019
 29533                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 29534                                  	;je	short limx		; no, don't lie
 29535                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12h as end of UMB
 29536                                  	; 11/12/2022
 29537                                  	; ds = cs
 29538 00002A02 803E[C71F]00            	cmp	byte [DeviceHi],0
 29539 00002A07 74F0                    	je	short limx
 29540 00002A09 A1[AD1F]                	mov	ax,[DevLoadEnd]
 29541                                  lim_set:
 29542                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29543                                  	; 11/12/2022
 29544                                  	;call	SetInt12Mem
 29545                                  ;limx:
 29546                                  	;retn
 29547                                  	
 29548                                  	;jmp	short SetInt12Mem 
 29549                                  
 29550                                  ;----------------------------------------------------------------------------
 29551                                  ;
 29552                                  ; procedure : SetInt12Mem
 29553                                  ;
 29554                                  ;	Input : AX = Memory size to be set (in paras)
 29555                                  ;	Output : none
 29556                                  ;
 29557                                  ;	Sets the variable 40:13 to the memory size passed in AX
 29558                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 29559                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 29560                                  ;	restoring the value of 40:13
 29561                                  ;
 29562                                  ;----------------------------------------------------------------------------
 29563                                  
 29564                                  	; 01/11/2022
 29565                                  SetInt12Mem:
 29566 00002A0C 1E                      	push	ds
 29567 00002A0D BB4000                  	mov	bx,40h
 29568 00002A10 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 29569 00002A12 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 29570 00002A16 2E891E[CB1F]            	mov	[cs:OldInt12Mem],bx	; save it
 29571 00002A1B B106                    	mov	cl,6
 29572 00002A1D D3E8                    	shr	ax,cl			; convert paras into Ks
 29573 00002A1F A31300                  	mov	[13h],ax		; Lie
 29574 00002A22 2EC606[CA1F]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 29575 00002A28 1F                      	pop	ds
 29576                                  ;limx:
 29577 00002A29 C3                      	retn
 29578                                  
 29579                                  ;----------------------------------------------------------------------------
 29580                                  ;
 29581                                  ; procedure : TrueInt12Mem
 29582                                  ;
 29583                                  ;	Input : Int12Lied = 0 if we are not lying currently
 29584                                  ;			  = 0ffh if we are lying
 29585                                  ;		OldInt12Mem = Saved value of 40:13h
 29586                                  ;
 29587                                  ;	Output : none
 29588                                  ;
 29589                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 29590                                  ;	and resets the flag which indicates that we were lying
 29591                                  ;
 29592                                  ;----------------------------------------------------------------------------
 29593                                  
 29594                                  TrueInt12Mem:
 29595                                  	; 11/12/2022
 29596                                  	; ds = cs
 29597 00002A2A 803E[CA1F]00            	cmp	byte [Int12Lied],0
 29598                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 29599                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 29600                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 29601 00002A2F 7412                    	je	short timx		; no, we weren't
 29602                                  	; 18/12/2022
 29603 00002A31 B84000                  	mov	ax,40h
 29604 00002A34 8826[CA1F]              	mov	[Int12Lied],ah ; 0
 29605                                  	;mov	byte [Int12Lied],0
 29606                                  	;mov	byte [cs:Int12Lied],0
 29607 00002A38 1E                      	push	ds
 29608                                  	;mov	ax,40h
 29609 00002A39 8ED8                    	mov	ds,ax
 29610 00002A3B 2EA1[CB1F]              	mov	ax,[cs:OldInt12Mem]
 29611 00002A3F A31300                  	mov	[13h],ax		; restore INT 12h memory
 29612 00002A42 1F                      	pop	ds
 29613                                  timx:
 29614 00002A43 C3                      	retn
 29615                                  
 29616                                  ;----------------------------------------------------------------------------
 29617                                  ;
 29618                                  ; procedure : IsIt3Com?
 29619                                  ;
 29620                                  ;	Input : DevEntry = Seg:0 of device driver
 29621                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 29622                                  ;		 else Zero flag is reset
 29623                                  ;
 29624                                  ;----------------------------------------------------------------------------
 29625                                  
 29626                                  IsIt3Com:
 29627                                  	; 11/12/2022
 29628                                  	; ds = cs
 29629 00002A44 1E                      	push	ds
 29630 00002A45 06                      	push	es
 29631 00002A46 56                      	push	si
 29632                                  	; 11/12/2022
 29633 00002A47 C536[AF1F]              	lds	si,[DevEntry]
 29634                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 29635 00002A4B 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 29636 00002A4E 0E                      	push	cs
 29637 00002A4F 07                      	pop	es
 29638 00002A50 BF[CD1F]                	mov	di,ThreeComName
 29639 00002A53 B90800                  	mov	cx,8			; name length
 29640 00002A56 F3A6                    	rep	cmpsb
 29641 00002A58 5E                      	pop	si
 29642 00002A59 07                      	pop	es
 29643 00002A5A 1F                      	pop	ds
 29644 00002A5B C3                      	retn
 29645                                  
 29646                                  ;M020 : BEGIN
 29647                                  ;----------------------------------------------------------------------------
 29648                                  
 29649                                  UpdatePDB:
 29650 00002A5C 1E                      	push	ds
 29651 00002A5D B462                    	mov	ah,62h
 29652 00002A5F CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 29653 00002A61 8EDB                    	mov	ds,bx
 29654 00002A63 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 29655                                  	;mov	[2],bx
 29656 00002A68 891E0200                	mov	[PDB.BLOCK_LEN],bx
 29657 00002A6C 1F                      	pop	ds
 29658 00002A6D C3                      	retn
 29659                                  
 29660                                  ; M020 : END
 29661                                  
 29662                                  ;----------------------------------------------------------------------------
 29663                                  
 29664                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29665                                  ;%if 0
 29666                                  
 29667                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29668                                  ; (SYSINIT:2EEEh)
 29669                                  
 29670                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 29671                                  ;include highexit.inc	; umb's, etc
 29672                                  
 29673                                  ; ----------------------------------------------------------------------
 29674                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 29675                                  ; ----------------------------------------------------------------------
 29676                                  ; 07/04/2019 - Retro DOS v4.0
 29677                                  
 29678                                  ;******************************************************************************
 29679                                  ;
 29680                                  ; This file contains routines needed to parse and implement user-given
 29681                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 29682                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 29683                                  ; the variables in highvar.inc, for use by the rest of the routines.
 29684                                  ;
 29685                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 29686                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 29687                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 29688                                  ;    DH/LH module opts
 29689                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 29690                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 29691                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 29692                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 29693                                  ; available during the load.
 29694                                  ;
 29695                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 29696                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 29697                                  ; upper-memory block which was not specified by the user... in addition, if
 29698                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 29699                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 29700                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 29701                                  ; free any UMBs so allocated.
 29702                                  ;
 29703                                  ; When a device driver loads, there is the additional problem of allocating its
 29704                                  ; initial load site; this should be restricted to the first UMB specified on
 29705                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 29706                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 29707                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 29708                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 29709                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 29710                                  ;
 29711                                  ;******************************************************************************
 29712                                  
 29713                                  SWTCH	equ	'/'		; Switch character
 29714                                  
 29715                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 29716                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 29717                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 29718                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 29719                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 29720                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 29721                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 29722                                  
 29723                                  CR	equ	0Dh		; Carriage Return
 29724                                  LF	equ	0Ah		; Line Feed
 29725                                  TAB	equ	09h		; Tab character (^I)
 29726                                  
 29727                                  ; -----------------------------------------------------------------------------
 29728                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 29729                                  ; -----------------------------------------------------------------------------
 29730                                  ; ENTRY:       None
 29731                                  ; EXIT:        Variables listed in highvar.inc are initialized
 29732                                  ; ERROR EXIT:  None
 29733                                  ; USES:        Flags, variables in highvar.inc
 29734                                  ; -----------------------------------------------------------------------------
 29735                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 29736                                  ; are largely ignored, but it is initialized nonetheless.
 29737                                  ; -----------------------------------------------------------------------------
 29738                                  
 29739                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29740                                  ; (SYSINIT:2EEEh)
 29741                                  
 29742                                  InitVar:
 29743                                  	; 01/01/2023
 29744                                  	; ds = cs
 29745                                  
 29746                                  	;pushreg <ax, cx, di, es>
 29747                                  	; 03/01/2023
 29748                                  	;push	ax
 29749                                  	;push	cx
 29750                                  	;push	di
 29751 00002A6E 06                      	push	es
 29752                                  
 29753                                  	;dataseg es			;Point ES into appropriate data segment
 29754 00002A6F 0E                      	push	cs
 29755 00002A70 07                      	pop	es
 29756                                  
 29757 00002A71 31C0                    	xor	ax,ax
 29758                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 29759                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 29760                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 29761                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 29762                                  	;				;Later is the # of the 1st spec'd UMB
 29763                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 29764                                  
 29765                                  	; 01/01/2023
 29766                                  	; ds = cs
 29767 00002A73 A2[721F]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 29768 00002A76 A2[711F]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 29769 00002A79 A3[731F]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 29770 00002A7C C606[751F]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 29771                                  					;Later is the # of the 1st spec'd UMB
 29772 00002A81 A2[A81F]                	mov	[fm_argc], al		;Start with zero args having been read
 29773                                  
 29774 00002A84 FC                      	cld
 29775                                  
 29776 00002A85 B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 29777 00002A88 BF[761F]                	mov	di,UmbUsed		;on the UmbUsed array,
 29778 00002A8B F3AA                    	rep	stosb			;	Store 0
 29779                                  
 29780                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 29781                                  	; 01/01/2033
 29782 00002A8D B110                    	mov	cl,MAXUMB ; 16
 29783 00002A8F BF[861F]                	mov	di,UmbSize		;on the UmbSize array,
 29784 00002A92 F3AB                    	rep	stosw			;	Store 0
 29785                                  
 29786                                  	;normseg es			; Return ES
 29787                                  
 29788                                  	;popreg	<es, di, cx, ax>
 29789 00002A94 07                      	pop	es
 29790                                  	; 03/01/2023
 29791                                  	;pop	di
 29792                                  	;pop	cx
 29793                                  	;pop	ax	 	
 29794                                  
 29795 00002A95 C3                      	retn
 29796                                  
 29797                                  ; -----------------------------------------------------------------------------
 29798                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 29799                                  ; -----------------------------------------------------------------------------
 29800                                  ; ENTRY   : None
 29801                                  ; EXIT    : None
 29802                                  ; ERROR   : None
 29803                                  ; USES    : Flags, fm_umb, fm_strat
 29804                                  ; -----------------------------------------------------------------------------
 29805                                  
 29806                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29807                                  	; (SYSINIT:2F22h)
 29808                                  FixMem:
 29809                                  	; 01/01/2023
 29810                                  	;push	ax
 29811                                  	;push	bx
 29812                                  	;push	cx
 29813                                  	;push	dx
 29814 00002A96 06                      	push	es
 29815                                  
 29816 00002A97 E84900                  	call	fm_link		; Link in UMBs
 29817                                  
 29818 00002A9A E80C02                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 29819 00002A9D 723F                    	jc	short fmX	; (if couldn't get it, leave now).
 29820                                  
 29821 00002A9F 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 29822                                  
 29823                                  ; - Walk MCB Chain ------------------------------------------------------------
 29824                                  
 29825 00002AA1 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 29826 00002AA3 89D1                    	mov 	cx,dx		; in CX... and the last owner
 29827 00002AA5 42                      	inc	dx		; in dx as we go through the loop:
 29828                                  
 29829                                  ; ------------------------------------------
 29830                                  ; FM10--DX  = last MCB's owner's PSP address
 29831                                  ;       CX  = last MCB's address (segment)
 29832                                  ; ------------------------------------------
 29833                                  
 29834 00002AA6 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 29835 00002AAA 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 29836 00002AAF 09D3                    	or	bx,dx			; dx was owner of previous MCB
 29837 00002AB1 7516                    	jnz	short fm30		; If not both zero, don't cat.
 29838                                  
 29839                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 29840                                  
 29841 00002AB3 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 29842 00002AB8 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 29843 00002ABA 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 29844                                  
 29845 00002ABE 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 29846                                  	;add	bx,1			; And add one for the header
 29847                                  	; 11/07/2023
 29848 00002AC3 43                      	inc	bx
 29849 00002AC4 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 29850                                  
 29851                                  	; ---------------------------------------------------------------------
 29852                                  
 29853 00002AC9 8CC1                    fm30:	mov	cx,es			; Save MCB address
 29854 00002ACB 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 29855                                  
 29856 00002AD0 8CC3                    	mov	bx,es			; Move to the next MCB
 29857                                  	;add	bx,[es:3]
 29858 00002AD2 26031E0300              	add	bx,[es:ARENA.SIZE]
 29859 00002AD7 43                      	inc	bx
 29860 00002AD8 8EC3                    	mov	es,bx
 29861                                  
 29862                                  	;cmp	al,'Z'
 29863 00002ADA 3C5A                    	cmp	al,arena_signature_end
 29864 00002ADC 75C8                    	jne	short fm10		; If signature != 'Z', there are more.
 29865                                  fmX:	
 29866 00002ADE E81300                  	call	fm_unlink		; Unlink UMBs
 29867                                  
 29868 00002AE1 07                      	pop	es
 29869                                  	; 01/01/2023
 29870                                  	;pop	dx
 29871                                  	;pop	cx
 29872                                  	;pop	bx
 29873                                  	;pop	ax
 29874                                  
 29875 00002AE2 C3                      	retn
 29876                                  
 29877                                  ; -----------------------------------------------------------------------------
 29878                                  ;*** fm_link - links UMBs not already linked in
 29879                                  ; -----------------------------------------------------------------------------
 29880                                  ; ENTRY:    None
 29881                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 29882                                  ; ERROR:    None
 29883                                  ; USES:     AX, BX, fm_umb
 29884                                  ; -----------------------------------------------------------------------------
 29885                                  
 29886                                  	; 01/01/2023 - Retro DOS v4.2
 29887                                  fm_link:
 29888 00002AE3 B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 29889 00002AE6 CD21                    	int	21h			; Current link-state is now in al
 29890                                  
 29891                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 29892                                  	;
 29893                                  	;push	es
 29894                                  	;push	cs
 29895                                  	;pop	es
 29896                                  	;mov	[es:fm_umb],al
 29897                                  	;pop	es
 29898                                  	
 29899                                  	; 01/01/2023
 29900                                  	; ds = cs
 29901                                  	;mov	[cs:fm_umb],al
 29902 00002AE8 A2[A61F]                	mov	[fm_umb],al
 29903                                  
 29904 00002AEB B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29905 00002AEE BB0100                  	mov	bx,1
 29906 00002AF1 CD21                    	int	21h
 29907 00002AF3 C3                      	retn
 29908                                  
 29909                                  ; -----------------------------------------------------------------------------
 29910                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 29911                                  ; -----------------------------------------------------------------------------
 29912                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 29913                                  ; EXIT:     None
 29914                                  ; ERROR:    None
 29915                                  ; USES:     AX, BX
 29916                                  ; -----------------------------------------------------------------------------
 29917                                  
 29918                                  	; 01/01/2023 - Retro DOS v4.2
 29919                                  fm_unlink:
 29920 00002AF4 31DB                    	xor	bx,bx
 29921                                  	
 29922                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 29923                                  	;
 29924                                  	;push	ds
 29925                                  	;push	cs
 29926                                  	;pop	ds
 29927                                  	;mov	bl,[fm_umb]	
 29928                                  	;pop	ds
 29929                                  	
 29930                                  	; 01/01/2023
 29931                                  	; ds = cs
 29932                                  	;mov	bl,[cs:fm_umb]
 29933 00002AF6 8A1E[A61F]              	mov	bl,[fm_umb]
 29934                                  
 29935 00002AFA B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29936 00002AFD CD21                    	int	21h			; so just use that, and call int 21h
 29937 00002AFF C3                      	retn
 29938                                  
 29939                                  ; 08/04/2019 - Retro DOS v4.0
 29940                                  
 29941                                  ; -----------------------------------------------------------------------------
 29942                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 29943                                  ; laid out in highvar.inc
 29944                                  ; -----------------------------------------------------------------------------
 29945                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 29946                                  ; EXIT:     ES:SI points to first character in child program name
 29947                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 29948                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 29949                                  ; -----------------------------------------------------------------------------
 29950                                  ; Error codes (in AX if carry set on return):
 29951                                  ;
 29952                                  PV_InvArg	equ	1	; Invalid argument passed
 29953                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 29954                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 29955                                  ;
 29956                                  ; This routine exects ES:SI to point to a string much like the following:
 29957                                  ;    "/S/L:1,200;2 module options"
 29958                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 29959                                  ; required, though that's what this routine is supposed to parse.
 29960                                  ;
 29961                                  optS		equ	'S'	; /S
 29962                                  optL		equ	'L'	; /L:...
 29963                                  ;
 29964                                  ; -----------------------------------------------------------------------------
 29965                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 29966                                  ; a command-line for spawning a child process. For a typical LH command, say,
 29967                                  ;     lh /l:1,1000;2 print/d:lpt2
 29968                                  ; the arguments would look like (one per line):
 29969                                  ;     lh
 29970                                  ;     /l
 29971                                  ;     1
 29972                                  ;     1000
 29973                                  ;     2
 29974                                  ;     print
 29975                                  ;     /d
 29976                                  ;     :lpt2
 29977                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 29978                                  ; arg was the filename. So, inside this routine, we keep a running counter
 29979                                  ; of the number of arguments LH will need to skip in order to get to the
 29980                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 29981                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 29982                                  ; for:
 29983                                  ;    Each /L
 29984                                  ;    Each /S (there should be only one)
 29985                                  ;    Each UMB number (they follow ":" or ";")
 29986                                  ;    Each UMB size   (they follow ",")
 29987                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 29988                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 29989                                  ; -----------------------------------------------------------------------------
 29990                                  
 29991                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29992                                  	; (SYSINIT:2F9Fh)
 29993                                  
 29994                                  ParseVar:
 29995                                  	;pushreg <di, ds, es>
 29996                                  	; 01/01/2023
 29997                                  	;push	di ; * ; (not required) ; 01/01/2023
 29998 00002B00 1E                      	push	ds
 29999 00002B01 06                      	push	es
 30000                                  
 30001 00002B02 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 30002 00002B03 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 30003 00002B04 FC                      	cld
 30004                                  
 30005                                  ; ------------------------------------------------
 30006                                  ; PV10--ES:SI = any whitespace on the command-line
 30007                                  ; ------------------------------------------------
 30008                                  
 30009 00002B05 AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 30010 00002B06 E8A200                  	call	isWhite
 30011 00002B09 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 30012                                  	;cmp	al,'/'
 30013 00002B0B 3C2F                    	cmp	al,SWTCH
 30014 00002B0D 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 30015                                  
 30016 00002B0F 4E                      	dec	si		; Backup--it's now "odule options", and we need
 30017 00002B10 F8                      	clc			; that "m" we just read (or whatever it is).
 30018 00002B11 EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 30019                                  pv20:	
 30020 00002B13 AC                      	lodsb			; Just read 'S' or 'L', hopefully
 30021                                  	;toUpper al		; So we make it upper-case, and...
 30022 00002B14 24DF                    	and	al,0DFh
 30023                                  	;cmp	al,'S'
 30024 00002B16 3C53                    	cmp	al,optS		; just read 'S'?
 30025 00002B18 750D                    	jne	short pv30
 30026                                  
 30027                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 30028 00002B1A 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 30029                                  
 30030                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 30031                                  	;
 30032                                  	;push	es
 30033                                  	;push	cs
 30034                                  	;pop	es
 30035                                  	;mov	[es:fUmbTiny],1	
 30036                                  	;pop	es
 30037                                  
 30038 00002B1F 2EC606[721F]01          	mov	byte [cs:fUmbTiny],1
 30039                                  
 30040 00002B25 EBDE                    	jmp	short pv10	; possibly even "/L...".
 30041                                  
 30042                                  pv30:	;cmp	al,'L'
 30043 00002B27 3C4C                    	cmp	al,optL		; If it's not 'L' either, then it's a bad
 30044 00002B29 750D                    	jne	short pvE1	; switch!
 30045                                  
 30046                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 30047 00002B2B 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 30048                                  
 30049 00002B30 E80E00                  	call	parseL
 30050 00002B33 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 30051                                  
 30052 00002B35 4E                      	dec	si		; Else, back up and exit.
 30053 00002B36 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 30054                                  
 30055                                  pvE1:	;mov	ax,3
 30056 00002B38 B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 30057 00002B3B 4E                      pvErr:	dec	si
 30058 00002B3C 4E                      	dec	si
 30059 00002B3D F9                      	stc
 30060                                  pvX:	;popreg	<es, ds, di>
 30061 00002B3E 07                      	pop	es
 30062 00002B3F 1F                      	pop	ds
 30063                                  	; 01/01/2023
 30064                                  	;pop	di ; * ; (not required) ; 01/01/2023
 30065 00002B40 C3                      	retn
 30066                                  
 30067                                  ; -----------------------------------------------------------------------------
 30068                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 30069                                  ; -----------------------------------------------------------------------------
 30070                                  ; ENTRY:    ES:SI points to colon
 30071                                  ; EXIT:     ES:SI points to first character not parsed
 30072                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 30073                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 30074                                  ; -----------------------------------------------------------------------------
 30075                                  ; If the string here is terminated with anything other than whitespace or a
 30076                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 30077                                  ; set, indicating that they've screwed up the syntax. The 3-character rewind
 30078                                  ; makes sure the app /L: is reported as being the culprit.
 30079                                  ; -----------------------------------------------------------------------------
 30080                                  
 30081                                  parseL:
 30082 00002B41 AC                      	lodsb
 30083 00002B42 3C3A                    	cmp	al,':'		; Make sure they did /L:
 30084 00002B44 754E                    	jne	short plE1	; If they didn't, return with carry set.
 30085                                  
 30086                                  ; ------------------------------------------
 30087                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 30088                                  ; ------------------------------------------
 30089                                  
 30090 00002B46 E8E700                  pl10:	call	GetXNum		; After this, it's ",size" or ";umb" or " mod"
 30091 00002B49 724F                    	jc	short plE2	; And error if it's a bad number.
 30092 00002B4B E8A901                  	call	convUMB		; Convert any address to a UMB number
 30093                                  
 30094 00002B4E 88C1                    	mov	cl,al		; Remember the UMB number
 30095 00002B50 E87600                  	call	stowUMB		; Mark this UMB # as used;
 30096 00002B53 7245                    	jc	short plE2	; If it was already marked, it'll error
 30097                                  
 30098                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 30099 00002B55 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 30100                                  
 30101 00002B5A AC                      	lodsb
 30102 00002B5B 3C3B                    	cmp	al,';'		; Did "umb;" ?
 30103 00002B5D 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 30104                                  
 30105 00002B5F E84900                  	call	isWhite		; Did "umb " ?
 30106 00002B62 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 30107                                  
 30108 00002B64 E83900                  	call	isEOL		; Did "umb" ?
 30109 00002B67 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 30110                                  
 30111                                  	;cmp	al,'/'
 30112 00002B69 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 30113 00002B6B 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 30114                                  
 30115 00002B6D 3C2C                    	cmp	al,','		; Did "umb," ?
 30116 00002B6F 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 30117                                  
 30118                                  ; --- Read a size -------------------------------------------------------------
 30119                                  
 30120 00002B71 E8BC00                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 30121 00002B74 721E                    	jc	short plE1	; And error if it's a bad size.
 30122                                  
 30123 00002B76 E82201                  	call	toPara		; Convert from bytes to paragraphs
 30124                                  
 30125 00002B79 E87200                  	call	stowSiz		; CL still has the UMB number for this routine
 30126                                  
 30127                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 30128 00002B7C 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 30129                                  
 30130 00002B81 AC                      	lodsb
 30131 00002B82 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 30132 00002B84 74C0                    	je	short pl10	;
 30133                                  
 30134 00002B86 E82200                  	call	isWhite		; Did it end with whitespace?
 30135 00002B89 7414                    	jz	short plX	; If so, we're done here--go back.
 30136                                  
 30137 00002B8B E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 30138 00002B8E 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 30139                                  
 30140                                  	;cmp	al,'/'
 30141 00002B90 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 30142 00002B92 740A                    	je	short plSwX	; If so, again, we're done here.
 30143                                  plE1:	
 30144                                  	;mov	ax,1
 30145 00002B94 B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 30146 00002B97 4E                      	dec	si
 30147 00002B98 F9                      	stc
 30148 00002B99 C3                      	retn
 30149                                  
 30150                                  plE2:	;mov	ax,2
 30151 00002B9A B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 30152                                  	; 12/12/2022
 30153                                  	; cf=1
 30154                                  	;stc
 30155 00002B9D C3                      	retn
 30156                                  plSwX:	
 30157 00002B9E 4E                      	dec	si		; If we hit a '/' character, back up one char
 30158                                  				; so the whitespace checker will see it too.
 30159                                  plX:	; 12/12/2022
 30160                                  	; cf=0
 30161                                  	;clc			; Then just return with carry clear, so
 30162 00002B9F C3                      	retn			; ParseVar will go about its business.
 30163                                  
 30164                                  ; -----------------------------------------------------------------------------
 30165                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 30166                                  ; -----------------------------------------------------------------------------
 30167                                  ; ENTRY:    None
 30168                                  ; EXIT:     None
 30169                                  ; ERROR:    None
 30170                                  ; USES:     fm_argc, flags
 30171                                  ; -----------------------------------------------------------------------------
 30172                                  
 30173                                  ;incArgc:
 30174                                  	;push	ax
 30175                                  
 30176                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 30177                                  
 30178                                  	;mov	al,[cs:fm_argc]
 30179                                  
 30180                                  	;inc	al		; Increment it,
 30181                                  
 30182                                  	;;putdata fm_argc, al	; And store it right back.
 30183                                  
 30184                                  	;mov	[cs:fm_argc],al
 30185                                  
 30186                                  	;pop	ax
 30187                                  	;retn
 30188                                  
 30189                                  ; -----------------------------------------------------------------------------
 30190                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 30191                                  ; -----------------------------------------------------------------------------
 30192                                  ; ENTRY:    AL contains character to test
 30193                                  ; EXIT:     ZF set if AL contains CR or LF, or 0
 30194                                  ; ERROR:    None
 30195                                  ; USES:     ZF
 30196                                  ; -----------------------------------------------------------------------------
 30197                                  
 30198                                  isEOL:
 30199 00002BA0 3C00                    	cmp	al,0		; Null-terminator
 30200 00002BA2 7406                    	je	short ieX
 30201 00002BA4 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 30202 00002BA6 7402                    	je	short ieX
 30203 00002BA8 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 30204                                  ieX:	
 30205 00002BAA C3                      	retn
 30206                                  
 30207                                  ; -----------------------------------------------------------------------------
 30208                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 30209                                  ; -----------------------------------------------------------------------------
 30210                                  ; ENTRY:    AL contains character to test
 30211                                  ; EXIT:     ZF set if AL contains space, tab, or equals
 30212                                  ; ERROR:    None
 30213                                  ; USES:     ZF
 30214                                  ; -----------------------------------------------------------------------------
 30215                                  
 30216                                  isWhite:
 30217 00002BAB 3C20                    	cmp	al,' '		; Space
 30218 00002BAD 7406                    	je	short iwX
 30219 00002BAF 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 30220 00002BB1 7402                    	je	short iwX
 30221 00002BB3 3C09                    	cmp	al,tab ; 9	; Tab
 30222                                  iwX:	
 30223 00002BB5 C3                      	retn
 30224                                  
 30225                                  ; -----------------------------------------------------------------------------
 30226                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 30227                                  ; -----------------------------------------------------------------------------
 30228                                  ; ENTRY:    AL contains UMB number
 30229                                  ; EXIT:     None
 30230                                  ; ERROR:    None
 30231                                  ; USES:     Flags, variables in highvar.inc
 30232                                  ; -----------------------------------------------------------------------------
 30233                                  
 30234                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30235                                  
 30236                                  unMarkUMB:
 30237                                  	; 02/01/2023
 30238                                  	;push	ax
 30239                                  	;push	bx
 30240                                  	;push	di
 30241                                  	;push	es
 30242                                  	;
 30243                                  	;push	cs
 30244                                  	;pop	es
 30245                                  
 30246 00002BB6 30E4                    	xor	ah,ah
 30247 00002BB8 89C3                    	mov	bx,ax
 30248                                  
 30249                                  	; 19/04/2019
 30250                                  	
 30251                                  	;;mov	byte [es:bx+UmbUsed],0
 30252                                  	;mov	[es:bx+UmbUsed],ah ; 0
 30253                                  	; 02/01/2023
 30254                                  	; ds= cs
 30255                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 30256 00002BBA 88A7[761F]              	mov	[bx+UmbUsed],ah ; 0
 30257                                  
 30258 00002BBE 3806[751F]              	cmp	[UmbLoad],al
 30259                                  	;cmp	[cs:UmbLoad],al
 30260                                  	;;cmp	[es:UmbLoad],al
 30261 00002BC2 7504                    	jne	short umu10
 30262                                  
 30263                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 30264                                  	;mov	[es:UmbLoad],ah ; 0
 30265                                  	; 02/01/2023
 30266                                  	; ds = cs
 30267                                  	;mov	[cs:UmbLoad],ah ; 0
 30268 00002BC4 8826[751F]              	mov	[UmbLoad],ah ; 0
 30269                                  umu10:	
 30270                                  	;pop	es
 30271                                  	;pop	di
 30272                                  	;pop	bx
 30273                                  	;pop	ax
 30274 00002BC8 C3                      	retn
 30275                                  
 30276                                  ; -----------------------------------------------------------------------------
 30277                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 30278                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 30279                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 30280                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 30281                                  ; -----------------------------------------------------------------------------
 30282                                  ; ENTRY:    AL contains UMB number, as specified by the user
 30283                                  ; EXIT:     None
 30284                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 30285                                  ; USES:     AX, Flags, variables in highvar.inc
 30286                                  ; -----------------------------------------------------------------------------
 30287                                  
 30288                                  	; 01/01/2023 - Retro DOS v4.2
 30289                                  stowUMB:
 30290 00002BC9 3C10                    	cmp	al,MAXUMB ; 16
 30291 00002BCB 7202                    	jb	short su10
 30292 00002BCD F9                      	stc
 30293 00002BCE C3                      	retn			; Ooops-- UMB # >= MAXUMB
 30294                                  su10:	
 30295                                  	; 01/01/2023
 30296                                  	;push	bx
 30297                                  	;push	di
 30298                                  	;push	si
 30299                                  	;push	ds
 30300                                  	;push	es
 30301                                  	;push	cs
 30302                                  	;pop	es
 30303                                  	;push	cs
 30304                                  	;pop	ds
 30305                                  
 30306                                  	; 01/01/2023
 30307                                  	; ds <> cs
 30308                                  	;cmp	byte [cs:UmbLoad],0FFh
 30309 00002BCF 2E803E[751F]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 30310                                  				; If this, we haven't been here before
 30311 00002BD5 7504                    	jne	short su20
 30312 00002BD7 2EA2[751F]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 30313                                  
 30314                                  	;;cmp	byte [UmbLoad],0FFh
 30315                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 30316                                  	;jne	short su20
 30317                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 30318                                  su20:	
 30319 00002BDB 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 30320 00002BDD 740E                    	jz	short su30	; that we should do here.
 30321                                  
 30322                                  	;mov	bl,al
 30323                                  	;xor	bh,bh
 30324                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 30325                                  	; 01/01/2023
 30326 00002BDF 30E4                    	xor	ah,ah
 30327 00002BE1 89C3                    	mov	bx,ax
 30328 00002BE3 B001                    	mov	al,1
 30329                                  
 30330                                  	;xchg	[es:bx+UmbUsed],al
 30331                                  	; 01/01/2023
 30332 00002BE5 2E8687[761F]            	xchg	[cs:bx+UmbUsed],al
 30333                                  
 30334                                  	;or	al,al		; If it was already 1, then al==1... and that
 30335                                  	;jz	short su30	; means an error.
 30336                                  	;
 30337                                  	;stc			; OOOPS! This one's been used before. :(
 30338                                  	
 30339                                  	; 01/01/2023
 30340 00002BEA 3C01                    	cmp	al,1
 30341 00002BEC F5                      	cmc 	; if al > 0 -> cf = 1
 30342                                  su30:	
 30343                                  	; 01/01/2023
 30344                                  	;pop	es
 30345                                  	;pop	ds
 30346                                  	;pop	si
 30347                                  	;pop	di
 30348                                  	;pop	bx
 30349 00002BED C3                      	retn
 30350                                  
 30351                                  ; -----------------------------------------------------------------------------
 30352                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 30353                                  ; -----------------------------------------------------------------------------
 30354                                  ; ENTRY:    CL contains UMB number, AX contains size
 30355                                  ; EXIT:     None
 30356                                  ; ERROR:    None
 30357                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 30358                                  ; -----------------------------------------------------------------------------
 30359                                  
 30360                                  ; 13/05/2019
 30361                                  
 30362                                  	; 01/01/2023 - Retro DOS v4.2
 30363                                  stowSiz:
 30364                                  	; 01/01/2023
 30365                                  	;push	bx
 30366                                  	;;push	di ; ?
 30367                                  	;push	es
 30368                                  
 30369                                  	;push	cs
 30370                                  	;pop	es	
 30371                                  
 30372 00002BEE 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 30373 00002BF0 B700                    	mov	bh,0			;     bx==UMB number, AX==size
 30374 00002BF2 D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 30375                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 30376                                  	; 01/01/2023
 30377 00002BF4 2E8987[861F]            	mov	[cs:bx+UmbSize],ax	; Store the size
 30378                                  
 30379                                  	; 01/01/2023
 30380                                  	;pop	es
 30381                                  	;;pop	di ; ?
 30382                                  	;pop	bx
 30383                                  
 30384 00002BF9 C3                      	retn
 30385                                  
 30386                                  ; -----------------------------------------------------------------------------
 30387                                  ;*** toDigit - converts a character-digit to its binary counterpart
 30388                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 30389                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 30390                                  ; A-F are considered valid if gnradix is 16.
 30391                                  ; -----------------------------------------------------------------------------
 30392                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 30393                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 30394                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 30395                                  ; USES:     CL, Flags
 30396                                  ; -----------------------------------------------------------------------------
 30397                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30398                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30399                                  ; will be 10 or 16.
 30400                                  ; -----------------------------------------------------------------------------
 30401                                  
 30402                                  gnradix:
 30403 00002BFA 0000                    	dw	0		; Must be a word--16x16 multiplication
 30404                                  
 30405                                  toDigit:
 30406 00002BFC 2E833E[FA2B]10          	cmp	word [cs:gnradix],16
 30407 00002C02 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 30408                                  
 30409                                  toDigit_hex:
 30410 00002C04 80F961                  	cmp	cl,'a'	; 61h
 30411 00002C07 7209                    	jb	short td10
 30412 00002C09 80F966                  	cmp	cl,'f'	; 66h
 30413 00002C0C 7720                    	ja	short tdE	; Nothing valid above 'f' at all...
 30414 00002C0E 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 30415                                  	;clc			; <- CLC is implicit from last SUB
 30416 00002C11 C3                      	retn
 30417                                  td10:	
 30418 00002C12 80F941                  	cmp	cl,'A'  ; 41h
 30419 00002C15 7209                    	jb	short td20	; Below 'A'? Not a letter...
 30420 00002C17 80F946                  	cmp	cl,'F'	; 46h
 30421 00002C1A 7712                    	ja	short tdE	; Above 'F'? Not a digit.
 30422 00002C1C 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 30423                                  	;clc			; <- CLC is implicit from last SUB
 30424 00002C1F C3                      	retn
 30425                                  toDigit_dec:
 30426                                  td20:	
 30427 00002C20 80F930                  	cmp	cl,'0'		; If less than zero,
 30428                                  	;jb	short tdE	; Done.
 30429 00002C23 720A                    	jb	short tdEr ; 08/04/2019
 30430 00002C25 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 30431 00002C28 7704                    	ja	short tdE	; Done.
 30432 00002C2A 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 30433                                  	;clc			; <- CLC is implicit from last SUB
 30434 00002C2D C3                      	retn
 30435                                  tdE:	
 30436 00002C2E F9                      	stc
 30437                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 30438 00002C2F C3                      	retn
 30439                                  
 30440                                  ; -----------------------------------------------------------------------------
 30441                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 30442                                  ; -----------------------------------------------------------------------------
 30443                                  ; ENTRY:    ES:SI points to an ascii string to scan
 30444                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 30445                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 30446                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 30447                                  ; -----------------------------------------------------------------------------
 30448                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30449                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30450                                  ; will be 10 or 16.
 30451                                  ; -----------------------------------------------------------------------------
 30452                                  
 30453                                  ; 08/04/2019 - Retro DOS v4.0
 30454                                  
 30455                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30456                                  ; (SYSINIT:3109h)
 30457                                  
 30458                                  GetXNum:
 30459                                  	;pushreg <bx, cx, ds>
 30460                                  	; 01/01/2023
 30461                                  	;push	bx
 30462 00002C30 51                      	push	cx ; *
 30463                                  	;push	ds
 30464                                  
 30465 00002C31 FC                      	cld
 30466 00002C32 31C0                    	xor	ax,ax
 30467 00002C34 31DB                    	xor	bx,bx
 30468 00002C36 31C9                    	xor	cx,cx
 30469 00002C38 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 30470                                  
 30471 00002C3A 2EC706[FA2B]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 30472                                  
 30473 00002C41 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 30474                                  	;call	toDigit
 30475 00002C44 E8D9FF                  	call	toDigit_dec
 30476                                  	;jc	short gxnE		; If it's not a digit, leave now.
 30477                                  	; 01/01/2023
 30478 00002C47 7233                    	jc	short gxnX
 30479                                  
 30480 00002C49 08C9                    	or	cl,cl
 30481 00002C4B 7517                    	jnz	short gxn20		; Doesn't have '0x'
 30482 00002C4D 268A4C01                	mov	cl,[es:si+1]
 30483 00002C51 80F978                  	cmp	cl,'x'			; Either 'x'...
 30484 00002C54 7405                    	je	short gxn10
 30485 00002C56 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 30486 00002C59 7509                    	jne	short gxn20
 30487                                  
 30488                                  gxn10:	
 30489 00002C5B 2EC706[FA2B]1000        	mov	word [cs:gnradix], 16
 30490 00002C62 46                      	inc	si			; Since we read "0x", march over it.
 30491 00002C63 46                      	inc	si
 30492                                  
 30493                                  ; ------------------------------------------------------
 30494                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 30495                                  ;        DX:AX = current total
 30496                                  ;        BX    = 0
 30497                                  ;        CH    = 0
 30498                                  ; ------------------------------------------------------
 30499                                  
 30500                                  gxn20:	
 30501 00002C64 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 30502 00002C67 46                      	inc	si
 30503                                  
 30504 00002C68 E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 30505 00002C6B 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 30506                                  
 30507 00002C6D E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 30508 00002C70 720A                    	jc	short gxnX	; (if it's too big, error out)
 30509                                  
 30510 00002C72 01C8                    	add	ax,cx		; Add the digit
 30511 00002C74 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 if last add wrapped
 30512                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 30513                                  	;jmp	short gxn20
 30514 00002C76 73EC                    	jnc	short gxn20
 30515                                  gxnE:	
 30516                                  	;stc			; In this case, we need to set the carry
 30517 00002C78 EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 30518                                  gxnQ:	
 30519 00002C7A 4E                      	dec	si		; Don't read in the offensive character.
 30520 00002C7B F8                      	clc			; And clear carry, so they know it's okay.
 30521                                  gxnX:	
 30522                                  	; 01/01/2023
 30523                                  	;pop	ds
 30524 00002C7C 59                      	pop	cx ; *
 30525                                  	;pop	bx
 30526 00002C7D C3                      	retn
 30527                                  
 30528                                  ; -----------------------------------------------------------------------------
 30529                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 30530                                  ; -----------------------------------------------------------------------------
 30531                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 30532                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 30533                                  ; ERROR:   Carry set if number was too large
 30534                                  ; USES:    Flags, AX, DX
 30535                                  ; -----------------------------------------------------------------------------
 30536                                  
 30537                                  mul32:
 30538 00002C7E 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 30539 00002C7F 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 30540 00002C81 2EF726[FA2B]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 30541 00002C86 7211                    	jc	short m32E	; Too big?
 30542                                  
 30543 00002C88 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 30544 00002C8A 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 30545                                  
 30546 00002C8B 87D3                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 30547 00002C8D 2EF726[FA2B]            	mul	word [cs:gnradix] ; DX=carry, AX=new:lo, TOS=orig, BX=new:hi
 30548 00002C92 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30549 00002C94 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30550 00002C96 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 30551 00002C98 C3                      	retn
 30552                                  m32E:	
 30553 00002C99 58                      	pop	ax
 30554 00002C9A C3                      	retn
 30555                                  
 30556                                  ; -----------------------------------------------------------------------------
 30557                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 30558                                  ; -----------------------------------------------------------------------------
 30559                                  ; ENTRY:   DX:AX = the number to be divided
 30560                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 30561                                  ; ERROR:   None
 30562                                  ; USES:    Flags, AX, DX
 30563                                  ; -----------------------------------------------------------------------------
 30564                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 30565                                  ;       can't ensure a 386 host machine. Sorry.
 30566                                  ; -----------------------------------------------------------------------------
 30567                                  
 30568                                  	; 01/01/2023 - Retro DOS v4.2
 30569                                  toPara:
 30570 00002C9B 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 30571                                  
 30572 00002C9C B104                    	mov	cl,4		;
 30573 00002C9E D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 30574 00002CA0 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 30575 00002CA1 B10C                    	mov	cl,12
 30576 00002CA3 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 30577 00002CA5 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 30578                                  
 30579 00002CA7 59                      	pop	cx
 30580 00002CA8 C3                      	retn
 30581                                  
 30582                                  ; -----------------------------------------------------------------------------
 30583                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 30584                                  ; -----------------------------------------------------------------------------
 30585                                  ; ENTRY:  Nothing
 30586                                  ; EXIT:   AX contains 0x9FFF for most systems
 30587                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30588                                  ; USES:   Flags, AX
 30589                                  ; -----------------------------------------------------------------------------
 30590                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 30591                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 30592                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 30593                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 30594                                  ; -----------------------------------------------------------------------------
 30595                                  
 30596                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30597                                  UmbHead:
 30598                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 30599                                  
 30600                                  	;push	si ; ?
 30601                                  	;push	ds ; ? 
 30602                                  	;push	es
 30603                                  	;push	bx ; *	
 30604                                  
 30605                                  	; 09/04/2019
 30606                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30607                                  
 30608 00002CA9 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30609 00002CAB CD21                    	int	21h
 30610                                  
 30611 00002CAD 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 30612                                  	
 30613                                  	; 01/01/2023
 30614 00002CB1 83F8FF                  	cmp	ax,0FFFFh
 30615 00002CB4 F5                      	cmc
 30616                                  	; if AX=0FFFFh -> CF=1
 30617 00002CB5 C3                      	retn
 30618                                  
 30619                                  ; 01/01/2023
 30620                                  ;%if 0
 30621                                  ;	cmp	ax,0FFFFh
 30622                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 30623                                  ;
 30624                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 30625                                  ;	;jmp	short uhX
 30626                                  ;	; 12/12/2022
 30627                                  ;	retn
 30628                                  ;uhE:	
 30629                                  ;	stc
 30630                                  ;uhX:	
 30631                                  ;	;pop	bx ; *
 30632                                  ;	;pop	es
 30633                                  ;	;pop	ds ; ?
 30634                                  ;	;pop	si ; ?
 30635                                  ;	retn
 30636                                  ;%endif
 30637                                  
 30638                                  ; -----------------------------------------------------------------------------
 30639                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 30640                                  ; -----------------------------------------------------------------------------
 30641                                  ; ENTRY:  ES:0 should point to a valid MCB
 30642                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 30643                                  ; USES:   Flags
 30644                                  ; -----------------------------------------------------------------------------
 30645                                  
 30646                                  isSysMCB:
 30647                                  	;push	ax
 30648                                  
 30649                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30650                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30651                                  	;je	short ism10
 30652                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 30653                                  	;;je	short ism10
 30654                                  	;;jmp	short ismX		; Anything else isn't.
 30655                                  	;jne	short ismX
 30656 00002CB6 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 30657 00002CBC 7507                    	jne	short ismX 
 30658                                  ism10:	
 30659                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 30660                                  	;cmp	ax,'SC' ; 4353h
 30661 00002CBE 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 30662                                  ismX:	
 30663                                  	;pop	ax
 30664 00002CC5 C3                      	retn
 30665                                  
 30666                                  ; 09/04/2019 - Retro DOS v4.0
 30667                                  
 30668                                  ; -----------------------------------------------------------------------------
 30669                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 30670                                  ; -----------------------------------------------------------------------------
 30671                                  ; ENTRY:  AX contains a segment address
 30672                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 30673                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 30674                                  ; USES:   Flags, AX
 30675                                  ; -----------------------------------------------------------------------------
 30676                                  ; An address in the following areas is treated as:
 30677                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 30678                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 30679                                  ;      ...
 30680                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 30681                                  ; -----------------------------------------------------------------------------
 30682                                  
 30683                                  	; 01/01/2023 - Retro DOS v4.2
 30684                                  AddrToUmb:
 30685                                  	; 01/01/2023
 30686                                  	;push	cx
 30687                                  	;push	dx
 30688 00002CC6 06                      	push	es
 30689                                  
 30690 00002CC7 89C2                    	mov	dx,ax		; DX = address to search for
 30691                                  
 30692 00002CC9 E8DDFF                  	call	UmbHead		; AX = first segment
 30693 00002CCC 7222                    	jc	short atuE	; If it couldn't get it, error out.
 30694                                  
 30695                                  	; 22/07/2023
 30696                                  	;mov	es,ax ; *	; ES = first UMB segment
 30697 00002CCE 31C9                    	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 30698                                  
 30699                                  	; 22/07/2023
 30700                                  atu10:
 30701 00002CD0 8EC0                    	mov	es,ax ; * ; ** ; 22/07/2023
 30702                                  ; ----------------------------------------
 30703                                  ; ATU10--ES - Current MCB address
 30704                                  ;        DX - Address given for conversion
 30705                                  ;        CX - Current UMB #
 30706                                  ; ----------------------------------------
 30707                                  
 30708                                  ;atu10:	
 30709                                  	;mov	ax,es ; * ; 18/07/2023
 30710 00002CD2 39D0                            cmp	ax,dx		; Present segment >= given segment?
 30711 00002CD4 731D                    	jae	short atuX	; Yep--done.
 30712                                  
 30713 00002CD6 E8DDFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 30714 00002CD9 7501                    	jnz	short atu20
 30715                                  
 30716 00002CDB 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 30717                                  atu20:	
 30718                                  	;mov	al,[es:ARENA.SIGNATURE]
 30719                                  	;cmp	al,arena_signature_end  ; 'Z'
 30720                                  	; 22/07/2023
 30721                                  	; ax = es
 30722                                  	;mov	ax,es ; **
 30723 00002CDC 2603060300              	add	ax,[es:ARENA.SIZE]
 30724 00002CE1 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 30725 00002CE7 7403                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 30726                                  
 30727                                  	;NextMCB es,ax
 30728                                  
 30729                                  	;mov	ax,es ; **
 30730                                  	;;add	ax,[es:3]
 30731                                  	;add	ax,[es:ARENA.SIZE]
 30732 00002CE9 40                      	inc	ax
 30733                                  	; 22/07/2023
 30734                                  	;mov	es,ax ; *
 30735 00002CEA EBE4                    	jmp	short atu10
 30736                                  
 30737                                  ; -----------------------------------------------------------------------------
 30738                                  ; if we get to atu30, they specified a number that was past the last MCB.
 30739                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 30740                                  ; -----------------------------------------------------------------------------
 30741                                  
 30742                                  atu30:	
 30743                                  	; 22/07/2023
 30744                                  	; ax = es + [es:ARENA.SIZE] 
 30745                                  	;mov	ax,es ; **
 30746                                  	;add	ax,[es:ARENA.SIZE] ; **
 30747 00002CEC 39D0                    	cmp	ax,dx		; Present >= given?
 30748 00002CEE 7303                    	jae	short atuX	; Yep! It _was_ inside.
 30749                                  atuE:	
 30750 00002CF0 31C9                    	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 30751 00002CF2 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 30752                                  atuX:	
 30753 00002CF3 89C8                    	mov	ax,cx		; Return the UMB number in AX
 30754                                  	
 30755 00002CF5 07                      	pop	es	
 30756                                  	; 01/01/2023
 30757                                  	;pop	dx
 30758                                  	;pop	cx
 30759 00002CF6 C3                      	retn
 30760                                  
 30761                                  ; -----------------------------------------------------------------------------
 30762                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 30763                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 30764                                  ; address rather than a UMB number... and use that address to look up a UMB.
 30765                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 30766                                  ; -----------------------------------------------------------------------------
 30767                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 30768                                  ; EXIT:   AX will contain a UMB number
 30769                                  ; ERROR:  None
 30770                                  ; USES:   Flags, AX
 30771                                  ; -----------------------------------------------------------------------------
 30772                                  
 30773                                  	; 01/01/2023 - Retro DOS v4.2
 30774                                  convUMB:
 30775 00002CF7 2E833E[FA2B]10          	cmp	word [cs:gnradix],16
 30776 00002CFD 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 30777 00002CFF E8C4FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 30778                                  	;cmp	ax,0FFFFh
 30779                                  	;jne	short cu10
 30780                                  	;inc	ax		; If too high, ignore it (make it conventional)
 30781                                  	; 01/01/2023
 30782 00002D02 40                      	inc	ax
 30783 00002D03 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 30784 00002D05 48                      	dec	ax
 30785                                  cu10:	
 30786 00002D06 C3                      	retn
 30787                                  
 30788                                  ; 01/01/2023 - Retro DOS v4.2
 30789                                  ;%if 0
 30790                                  ;
 30791                                  ;; -----------------------------------------------------------------------------
 30792                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 30793                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 30794                                  ;; of the usual HIGH_FIRST. See the code.
 30795                                  ;; -----------------------------------------------------------------------------
 30796                                  ;; ENTRY:  None
 30797                                  ;; EXIT:   None
 30798                                  ;; ERROR:  None
 30799                                  ;; USES:   Flags, fm_umb, fm_strat
 30800                                  ;; -----------------------------------------------------------------------------
 30801                                  ;
 30802                                  ;setUMBs:
 30803                                  ;	push	ax
 30804                                  ;	push	bx
 30805                                  ;	call	fm_link
 30806                                  ;	pop	bx
 30807                                  ;	pop	ax
 30808                                  ;	retn
 30809                                  ;
 30810                                  ;%endif
 30811                                  
 30812                                  ; 18/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30813                                  ; loadLow subroutine is not used anywhere of IO.SYS 6.22 (& 5.0)
 30814                                  %if 0
 30815                                  
 30816                                  ; -----------------------------------------------------------------------------
 30817                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 30818                                  ; -----------------------------------------------------------------------------
 30819                                  ; ENTRY:  None
 30820                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 30821                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 30822                                  ; ERROR:  None
 30823                                  ; USES:   Flags, fm_strat, fm_umb
 30824                                  ; -----------------------------------------------------------------------------
 30825                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 30826                                  ; load UMB, and it is 0. That 0 can be either from the user having _specified_
 30827                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 30828                                  ; such that the load UMB is too small, and shouldn't be used.
 30829                                  ; -----------------------------------------------------------------------------
 30830                                  
 30831                                  loadLow:
 30832                                  	;push	ds
 30833                                  	;push	cs		; Point DS into appropriate data segment
 30834                                  	;pop	ds	
 30835                                  
 30836                                  	;mov	al,[UmbLoad]
 30837                                  	mov	al,[cs:UmbLoad]
 30838                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 30839                                  	jne	short ll10
 30840                                  
 30841                                  	stc
 30842                                  ll15:
 30843                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 30844                                  	;stc
 30845                                  	;jmp	short llX
 30846                                  	retn
 30847                                  ll10:	
 30848                                  	or	al,al		; AL=the load UMB: Is it == 0?
 30849                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 30850                                  
 30851                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 30852                                  	retn
 30853                                  
 30854                                  	;mov	al,1
 30855                                  	;clc
 30856                                  ;llX:
 30857                                  	;pop	ds		; Return DS to where it was
 30858                                  	;retn
 30859                                  
 30860                                  %endif
 30861                                  
 30862                                  ; -----------------------------------------------------------------------------
 30863                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 30864                                  ; -----------------------------------------------------------------------------
 30865                                  ; ENTRY:  None
 30866                                  ; EXIT:   None
 30867                                  ; ERROR:  None
 30868                                  ; USES:   Flags, fm_strat, fm_umb
 30869                                  ; -----------------------------------------------------------------------------
 30870                                  
 30871                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30872                                  	; (SYSINIT:322Fh)
 30873                                  HideUMBs:
 30874                                  	; 01/01/2023
 30875                                  	;push	ax
 30876                                  	;push	cx
 30877                                  	;push	ds
 30878 00002D07 06                      	push	es
 30879                                  
 30880                                  	; 01/01/2023
 30881                                  	; ds = cs
 30882                                  
 30883 00002D08 E86902                  	call	UmbTest		; See if we REALLY linked in anything...
 30884 00002D0B 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 30885                                  
 30886 00002D0D E886FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 30887                                  	
 30888                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 30889                                  	; 01/01/2023
 30890 00002D10 E8D0FD                  	call	fm_link
 30891                                  
 30892                                  	;putdata fInHigh,1	; Remember that we're now running high
 30893                                  	;mov	byte [cs:fInHigh],1
 30894                                  	; 01/01/2023
 30895 00002D13 C606[711F]01            	mov	byte [fInHigh],1
 30896                                  
 30897                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 30898                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 30899                                  	; 01/01/2023
 30900 00002D18 A0[751F]                	mov	al,[UmbLoad]
 30901                                  
 30902 00002D1B 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 30903 00002D1D 7420                    	je	short husX	; then we shouldn't do this loop:
 30904                                  
 30905 00002D1F 31C9                    	xor	cx,cx
 30906                                  
 30907                                  ; -----------------------------------------------
 30908                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 30909                                  ; -----------------------------------------------
 30910                                  
 30911 00002D21 41                      hus10:	inc	cx		; For each UMB:
 30912                                  	; 01/01/2023
 30913 00002D22 80F910                  	cmp	cl,MAXUMB
 30914                                  	;cmp	cx,MAXUMB ; 16
 30915 00002D25 730E                    	jae	short hus20
 30916                                  
 30917 00002D27 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 30918 00002D29 06                      	push	es
 30919 00002D2A E89E00                  	call	findUMB		; valid range of UMBs)
 30920 00002D2D 07                      	pop	es		; push/pop: trash what findumb finds.  :-)
 30921 00002D2E 7205                    	jc	short hus20
 30922                                  	
 30923                                  	; 02/01/2023
 30924                                  	;push	cx ; *
 30925 00002D30 E84C01                  	call	_hideUMB_	; hide what we need to hide.
 30926                                  	;pop	cx ; *
 30927                                  
 30928 00002D33 EBEC                    	jmp	short hus10
 30929                                  hus20:	
 30930                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 30931                                  	; 01/01/2023
 30932                                  	; ds = cs
 30933                                  	;mov	al,[UmbLoad]
 30934                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 30935 00002D35 800E[751F]00            	or	byte [UmbLoad],0
 30936                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 30937 00002D3A 7503                    	jnz	short husX	; If not, we're done.
 30938                                  
 30939 00002D3C E86302                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 30940                                  husX:	
 30941 00002D3F 07                      	pop	es
 30942                                  	; 01/01/2023
 30943                                  	;pop	ds
 30944                                  	;pop	cx
 30945                                  	;pop	ax
 30946 00002D40 C3                      	retn
 30947                                  
 30948                                  ; -----------------------------------------------------------------------------
 30949                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 30950                                  ; -----------------------------------------------------------------------------
 30951                                  ; ENTRY:  None
 30952                                  ; EXIT:   AL == load UMB
 30953                                  ; ERROR:  None
 30954                                  ; USES:   Flags, AX
 30955                                  ; -----------------------------------------------------------------------------
 30956                                  
 30957                                  ;GetLoadUMB:
 30958                                  ;	;getdata al, UmbLoad
 30959                                  ;	push	ds
 30960                                  ;	push	cs
 30961                                  ;	pop	ds
 30962                                  ;	mov	al,[UmLoad]
 30963                                  ;	pop	ds
 30964                                  ;	retn
 30965                                  
 30966                                  ; -----------------------------------------------------------------------------
 30967                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 30968                                  ; -----------------------------------------------------------------------------
 30969                                  ; ENTRY:  None
 30970                                  ; EXIT:   AX == load UMB minimum size
 30971                                  ; ERROR:  None
 30972                                  ; USES:   Flags, AX
 30973                                  ; -----------------------------------------------------------------------------
 30974                                  
 30975                                  	; 01/01/2023 - Retro DOS v4.2
 30976                                  GetLoadSize:
 30977                                  	; 09/04/2019 - Retro DOS v4.0
 30978                                  	;mov	al,[cs:UmbLoad]
 30979                                  	; 01/01/2023
 30980                                  	; ds = cs
 30981 00002D41 A0[751F]                	mov	al,[UmbLoad] 
 30982                                  	;jmp	short GetSize
 30983                                  
 30984                                  	;push	bx
 30985                                  	;;push	si
 30986                                  	;push	ds
 30987                                  	;push	cs
 30988                                  	;pop	ds
 30989                                  
 30990                                  	;mov	al,[UmbLoad]
 30991                                  
 30992                                  	;xor	ah,ah			;    ax==UMB
 30993                                  	;mov	bx,UmbSize		;    bx==array
 30994                                  	;shl	al,1	                ;    ax==offset
 30995                                  	;;add	ax,bx			;    ax==element index
 30996                                  	;;mov	si,ax			; ds:si==element index
 30997                                  
 30998                                  	;;lodsw				;    hh
 30999                                  
 31000                                  	;add	bx,ax
 31001                                  	;mov	ax,[bx]
 31002                                  
 31003                                  	;pop	ds
 31004                                  	;;pop	si
 31005                                  	;pop	bx
 31006                                  	;retn
 31007                                  
 31008                                  ; -----------------------------------------------------------------------------
 31009                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 31010                                  ; -----------------------------------------------------------------------------
 31011                                  ; ENTRY:  AL == a UMB number
 31012                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 31013                                  ; ERROR:  None
 31014                                  ; USES:   Flags, AX
 31015                                  ; -----------------------------------------------------------------------------
 31016                                  
 31017                                  	; 01/01/2023 - Retro DOS v4.2
 31018                                  GetSize:
 31019                                  	; 09/04/2019 - Retro DOS v4.0
 31020                                  
 31021                                  	;push	bx ; 01/01/2023
 31022                                  	;push	si
 31023                                  	;push	ds
 31024                                  	;push	cs
 31025                                  	;pop	ds
 31026                                  
 31027 00002D44 30E4                    	xor	ah,ah			;    ax==UMB
 31028 00002D46 BB[861F]                	mov	bx,UmbSize		;    bx==array
 31029 00002D49 D0E0                    	shl	al,1	                ;    ax==offset
 31030                                  	;add	ax,bx			;    ax==element index
 31031                                  	;mov	si,ax			; ds:si==element index
 31032                                  
 31033                                  	;lodsw				;    ax==size
 31034                                  
 31035 00002D4B 01C3                    	add	bx,ax
 31036                                  	; 01/01/2023
 31037                                  	; ds = cs
 31038 00002D4D 8B07                    	mov	ax,[bx]
 31039                                  	;mov	ax,[cs:bx]
 31040                                  
 31041                                  	;pop	ds
 31042                                  	;pop	si
 31043                                  	;pop	bx ; 01/01/2023
 31044 00002D4F C3                      	retn
 31045                                  
 31046                                  ; -----------------------------------------------------------------------------
 31047                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 31048                                  ; -----------------------------------------------------------------------------
 31049                                  ; ENTRY:   AL == new load UMB
 31050                                  ; EXIT:    None
 31051                                  ; ERROR:   None
 31052                                  ; USES:    Flags, AX
 31053                                  ; -----------------------------------------------------------------------------
 31054                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 31055                                  ;          time you would ever need this, so that's okay.
 31056                                  ; -----------------------------------------------------------------------------
 31057                                  
 31058                                  ;StoLoadUMB:
 31059                                  ;	;putdata UmbLoad, al
 31060                                  ;	push	es
 31061                                  ;	push	cs
 31062                                  ;	pop	es
 31063                                  ;	mov	[es:UmbLoad],al
 31064                                  ;	pop	es
 31065                                  ;	retn
 31066                                  
 31067                                  ; -----------------------------------------------------------------------------
 31068                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 31069                                  ; -----------------------------------------------------------------------------
 31070                                  ; ENTRY:  AL == new load size
 31071                                  ; EXIT:   None
 31072                                  ; ERROR:  None
 31073                                  ; USES:   Flags, AX
 31074                                  ; -----------------------------------------------------------------------------
 31075                                  
 31076                                  	; 01/01/2023 - Retro DOS v4.2
 31077                                  StoLoadSize:
 31078                                  	; 01/01/2023
 31079                                  	;push	dx
 31080                                  
 31081                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 31082                                  	;
 31083                                  	;push	ds
 31084                                  	;push	cs
 31085                                  	;pop	ds
 31086                                  	;mov	dl,[UmbLoad]
 31087                                  	;pop	ds	
 31088                                  
 31089 00002D50 2E8A16[751F]            	mov	dl,[cs:UmbLoad]
 31090                                  
 31091 00002D55 80FAFF                  	cmp	dl,UNSPECIFIED ; 0FFh
 31092 00002D58 7403                    	je	short sls10
 31093                                  
 31094 00002D5A E891FE                  	call	stowSiz			; We've got a function to do just this
 31095                                  sls10:	
 31096                                  	; 01/01/2023
 31097                                  	;pop	dx
 31098 00002D5D C3                      	retn
 31099                                  
 31100                                  ; -----------------------------------------------------------------------------
 31101                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 31102                                  ; -----------------------------------------------------------------------------
 31103                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 31104                                  ; EXIT:     None; free elements in UMB marked as hidden
 31105                                  ; ERROR:    None
 31106                                  ; USES:     Flags
 31107                                  ; -----------------------------------------------------------------------------
 31108                                  
 31109                                  	; 01/01/2023 - Retro DOS v4.2
 31110                                  hideUMB:
 31111                                  	; 02/01/2023
 31112 00002D5E 52                      	push	dx ; (*)
 31113                                  	; 01/01/2023
 31114                                  	;push	ax
 31115 00002D5F 06                      	push	es
 31116                                  
 31117 00002D60 E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 31118 00002D63 7224                    	jc	short huX
 31119                                  
 31120                                  ; ------------------------------------------------
 31121                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 31122                                  ;            we're not in the same UMB, so exit.
 31123                                  ; ------------------------------------------------
 31124                                  
 31125 00002D65 E84EFF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31126 00002D68 741F                    	jz	short huX	; If it is, we've finished the UMB.
 31127                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 31128 00002D6A 26830E010000            	or	word [es:ARENA.OWNER],0
 31129 00002D70 7503                    	jnz	short hu20
 31130                                  
 31131 00002D72 E81700                  	call	hideMCB
 31132                                  hu20:	
 31133                                  	;mov	al,[es:ARENA.SIGNATURE]
 31134                                  	;cmp	al,arena_signature_end  ;'Z'
 31135                                  	; 19/07/2023
 31136 00002D75 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],'Z'
 31137 00002D7B 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 31138                                  
 31139                                  	;NextMCB es,ax		; Go on forward.
 31140 00002D7D 8CC0                    	mov     ax,es
 31141                                  	;add	ax,[es:3]
 31142 00002D7F 2603060300              	add     ax,[es:ARENA.SIZE]
 31143 00002D84 40                      	inc     ax
 31144 00002D85 8EC0                    	mov     es,ax
 31145                                  
 31146 00002D87 EBDC                    	jmp	short hu10
 31147                                  huX:	
 31148 00002D89 07                      	pop	es
 31149                                  	; 01/01/2023
 31150                                  	;pop	ax
 31151                                  	; 02/01/2023
 31152 00002D8A 5A                      	pop	dx ; (*)
 31153 00002D8B C3                      	retn
 31154                                  
 31155                                  ; 02/01/2023
 31156                                  %if 0
 31157                                  
 31158                                  ; -----------------------------------------------------------------------------
 31159                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 31160                                  ; -----------------------------------------------------------------------------
 31161                                  ; ENTRY:    None
 31162                                  ; EXIT:     ZF set if user DIDN'T specify /S
 31163                                  ; ERROR:    None
 31164                                  ; USES:     Flags
 31165                                  ; -----------------------------------------------------------------------------
 31166                                  
 31167                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31168                                  isTiny:
 31169                                  	; 02/01/2023
 31170                                  	;push	ax
 31171                                  
 31172                                  	;getdata al,fUmbTiny
 31173                                  	;
 31174                                  	;push	ds
 31175                                  	;push	cs
 31176                                  	;pop	ds
 31177                                  	;mov	al,[fUmbTiny]
 31178                                  	;pop	ds
 31179                                  
 31180                                  	mov	al,[cs:fUmbTiny]
 31181                                  	; 02/01/2023
 31182                                  	; ds = cs
 31183                                  	mov	al,[fUmbTiny]
 31184                                  
 31185                                  	or	al,al
 31186                                  	; 02/01/2023
 31187                                  	;pop	ax
 31188                                  	retn
 31189                                  
 31190                                  %endif
 31191                                  
 31192                                  ; -----------------------------------------------------------------------------
 31193                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 31194                                  ; -----------------------------------------------------------------------------
 31195                                  ; ENTRY:    ES:0 should point to an MCB
 31196                                  ; EXIT:     ZF set if MCB is free, else !ZF
 31197                                  ; ERROR:    None
 31198                                  ; USES:     Flags
 31199                                  ; -----------------------------------------------------------------------------
 31200                                  
 31201                                  ;isFreeMCB:
 31202                                  ;	or	word [es:ARENA.OWNER],0
 31203                                  ;	retn
 31204                                  
 31205                                  ; -----------------------------------------------------------------------------
 31206                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 31207                                  ; -----------------------------------------------------------------------------
 31208                                  ; ENTRY:    ES:0 should point to an MCB
 31209                                  ; EXIT:     None; MCB marked as HIDDEN
 31210                                  ; ERROR:    None
 31211                                  ; USES:     None
 31212                                  ; -----------------------------------------------------------------------------
 31213                                  
 31214                                  hideMCB:
 31215 00002D8C 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 31216 00002D93 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 31217 00002D9A 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 31218 00002DA1 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 31219 00002DA8 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 31220 00002DAF C3                      	retn
 31221                                  
 31222                                  ; -----------------------------------------------------------------------------
 31223                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 31224                                  ; -----------------------------------------------------------------------------
 31225                                  ; ENTRY:    ES:0 should point to an MCB
 31226                                  ; EXIT:     None; MCB marked as FREE
 31227                                  ; ERROR:    None
 31228                                  ; USES:     None
 31229                                  ; -----------------------------------------------------------------------------
 31230                                  
 31231                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31232                                  
 31233                                  unHideMCB:
 31234                                  	; 03/01/2023
 31235                                  	;push	ax
 31236 00002DB0 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 31237 00002DB7 B82020                  	mov	ax,'  ' ; 2020h
 31238 00002DBA 26A30800                	mov	[es:ARENA.NAME+0],ax
 31239 00002DBE 26A30A00                	mov	[es:ARENA.NAME+2],ax
 31240 00002DC2 26A30C00                	mov	[es:ARENA.NAME+4],ax
 31241 00002DC6 26A30E00                	mov	[es:ARENA.NAME+6],ax
 31242                                  	; 03/01/2023
 31243                                  	;pop	ax
 31244 00002DCA C3                      	retn
 31245                                  
 31246                                  ; -----------------------------------------------------------------------------
 31247                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 31248                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 31249                                  ; -----------------------------------------------------------------------------
 31250                                  ; ENTRY:    AL should be to a valid UMB number
 31251                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 31252                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 31253                                  ; USES:     Flags, ES
 31254                                  ; -----------------------------------------------------------------------------
 31255                                  
 31256                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31257                                  	; (SYSINIT:3344h)
 31258                                  findUMB:
 31259                                  	; 01/01/2023
 31260                                  	;push	ax
 31261                                  	; 02/01/2023
 31262 00002DCB 51                      	push	cx ; *
 31263                                  	;push	dx
 31264                                  
 31265 00002DCC 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 31266                                  
 31267 00002DCE 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 31268                                  
 31269 00002DD0 E8D6FE                  	call	UmbHead		; Returns first UMB segment in AX
 31270                                  	; 22/07/2023
 31271                                  	;mov	es,ax ; *
 31272 00002DD3 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31273                                  
 31274                                  	; 22/07/2023
 31275                                  fu10:
 31276 00002DD5 8EC0                    	mov	es,ax ; * ; **
 31277                                  ; ---------------------------------------------
 31278                                  ; FU10--CX - This UMB number; 0 == conventional
 31279                                  ;       DX - The UMB number they're looking for
 31280                                  ;       ES - The current MCB address
 31281                                  ; ---------------------------------------------
 31282                                  
 31283                                  ;fu10:	
 31284 00002DD7 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 31285 00002DD9 7417                    	je	short fuX	; searching for--so exit.
 31286                                  
 31287 00002DDB E8D8FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31288 00002DDE 7501                    	jnz	short fu20
 31289                                  
 31290 00002DE0 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31291                                  fu20:	
 31292                                  	;mov	al,[es:ARENA.SIGNATURE]
 31293                                  	;cmp	al,arena_signature_end ; 'Z'
 31294                                  	; 19/07/2023
 31295 00002DE1 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end 
 31296 00002DE7 7408                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 31297                                  
 31298                                  	;NextMCB es,ax		; Go on forward.
 31299                                  	; 22/07/2023
 31300                                  	; ax = es
 31301                                  	;mov	ax,es ; * ; 22/07/2023
 31302                                  	;add	ax,[es:3]
 31303 00002DE9 2603060300              	add	ax,[es:ARENA.SIZE]
 31304 00002DEE 40                      	inc	ax
 31305                                  	; 22/07/2023
 31306                                  	;mov	es,ax ; **
 31307 00002DEF EBE4                    	jmp	short fu10
 31308                                  fuE:	
 31309 00002DF1 F9                      	stc
 31310                                  fuX:
 31311                                  	; 01/01/2023
 31312                                  	;pop	dx
 31313                                  	; 02/01/2023
 31314 00002DF2 59                      	pop	cx ; *
 31315                                  	;pop	ax		; The address is already in ES.
 31316 00002DF3 C3                      	retn
 31317                                  
 31318                                  ; -----------------------------------------------------------------------------
 31319                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 31320                                  ; -----------------------------------------------------------------------------
 31321                                  ; ENTRY:    AL should be to a valid UMB number
 31322                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 31323                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 31324                                  ; USES:     Flags, ES
 31325                                  ; -----------------------------------------------------------------------------
 31326                                  
 31327                                  	; 01/01/2023 - Retro DOS v4.2
 31328                                  BigFree:
 31329                                  	; 01/01/2023
 31330                                  	;push	bx
 31331 00002DF4 51                      	push	cx
 31332                                  
 31333 00002DF5 E8D3FF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 31334 00002DF8 723A                    	jc	short bfX
 31335                                  
 31336 00002DFA 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 31337 00002DFC 31C9                    	xor	cx,cx			; Size of largest free MCB
 31338                                  
 31339                                  ; ---------------------------------------------
 31340                                  ; BF10--ES - Current MCB address
 31341                                  ;       BX - Address of largest free MCB so far
 31342                                  ;       CX - Size of largest free MCB so far
 31343                                  ; ---------------------------------------------
 31344                                  
 31345                                  bf10:	
 31346 00002DFE E8B5FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 31347 00002E01 7428                    	jz	short bf30
 31348                                  
 31349                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 31350 00002E03 26830E010000            	or	word [es:ARENA.OWNER],0
 31351 00002E09 750C                    	jnz	short bf20
 31352                                  
 31353 00002E0B 26A10300                	mov	ax,[es:ARENA.SIZE]
 31354                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 31355 00002E0F 39C1                    	cmp	cx,ax
 31356                                  	;jg	short bf20		; Unless we're bigger,
 31357                                  	; 19/07/2023
 31358 00002E11 7D04                    	jge	short bf20
 31359                                  
 31360 00002E13 8CC3                    	mov	bx,es			; Store this new element's address,
 31361                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 31362 00002E15 89C1                    	mov	cx,ax
 31363                                  bf20:	
 31364                                  	;mov	al,[es:ARENA.SIGNATURE]
 31365                                  	;cmp	al,arena_signature_end	; 'Z'
 31366                                  	; 19/07/2023
 31367                                  	;cmp	byte [es:0],'Z'
 31368 00002E17 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 31369 00002E1D 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 31370                                  
 31371                                  	;NextMCB es,ax			; Go on forward.
 31372 00002E1F 8CC0                    	mov     ax,es
 31373                                  	;add	ax,[es:3]
 31374 00002E21 2603060300              	add     ax,[es:ARENA.SIZE]
 31375 00002E26 40                      	inc     ax
 31376 00002E27 8EC0                    	mov     es,ax
 31377                                  
 31378 00002E29 EBD3                    	jmp	short bf10
 31379                                  
 31380 00002E2B 8EC3                    bf30:	mov	es,bx			; Return the address
 31381 00002E2D 89C8                    	mov	ax,cx			; Return the size
 31382 00002E2F 09DB                    	or	bx,bx
 31383 00002E31 7501                    	jnz	short bfX
 31384                                  bfE:	
 31385 00002E33 F9                      	stc				; (if size==0, there's nothing free)
 31386                                  bfX:
 31387 00002E34 59                      	pop	cx
 31388                                  	; 01/01/2023
 31389                                  	;pop	bx
 31390 00002E35 C3                      	retn
 31391                                  
 31392                                  ; -----------------------------------------------------------------------------
 31393                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 31394                                  ; -----------------------------------------------------------------------------
 31395                                  ; ENTRY:    AL should be to a valid UMB number
 31396                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 31397                                  ; ERROR:    None
 31398                                  ; USES:     Flags
 31399                                  ; -----------------------------------------------------------------------------
 31400                                  
 31401                                  	; 02/01/2023 - Retro DOS v4.2
 31402                                  
 31403                                  isSpecified:
 31404                                  	; 02/01/2023
 31405                                  	;push	ax
 31406                                  
 31407 00002E36 30FF                    	xor	bh,bh
 31408 00002E38 88C3                    	mov	bl,al
 31409                                  
 31410                                  	;getdata al,DS:UmbUsed[bx]
 31411                                  	;
 31412                                  	;push	ds
 31413                                  	;push	cs
 31414                                  	;pop	ds
 31415                                  	;mov	al,[bx+UmbUsed]
 31416                                  	;pop	ds
 31417                                  	
 31418                                  	;mov	al,[cs:bx+UmbUsed]
 31419                                  	; 02/01/2023
 31420                                  	; ds = cs
 31421 00002E3A 8A87[761F]              	mov	al,[bx+UmbUsed]
 31422                                  
 31423 00002E3E 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 31424                                  
 31425                                  	; 02/01/2023
 31426 00002E40 58                      	pop	ax
 31427 00002E41 C3                      	retn
 31428                                  
 31429                                  ; -----------------------------------------------------------------------------
 31430                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 31431                                  ; -----------------------------------------------------------------------------
 31432                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 31433                                  ; EXIT:     None; MCB broken if carry clear
 31434                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 31435                                  ; USES:     Flags
 31436                                  ; -----------------------------------------------------------------------------
 31437                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 31438                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 31439                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 31440                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 31441                                  ; minimum for performing a split.
 31442                                  ; -----------------------------------------------------------------------------
 31443                                  
 31444                                  MIN_SPLIT_SIZE	equ 20h
 31445                                  
 31446                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31447                                  
 31448                                  shrinkMCB:
 31449                                  	;pushreg <bx,cx,es>
 31450                                  	; 02/01/2023
 31451                                  	;push	bx
 31452 00002E42 51                      	push	cx
 31453 00002E43 06                      	push	es
 31454                                  
 31455 00002E44 89C3                    	mov	bx,ax			; Move things around... and
 31456                                  	; 02/01/2023
 31457                                  	;mov	ax,es			; save this one for later.
 31458                                  
 31459 00002E46 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 31460                                  	; 02/01/2023
 31461 00002E4B 89C8                    	mov	ax,cx 
 31462                                  
 31463 00002E4D 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 31464                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 31465                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 31466                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 31467                                  	; 18/12/2022
 31468                                  	;cmp	cx,bx
 31469                                  	; 02/01/2023
 31470 00002E50 39D8                    	cmp	ax,bx
 31471 00002E52 7228                    	jb	short smE ; (*)
 31472                                  
 31473 00002E54 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 31474                                  	
 31475                                  	;mov	cx,[es:ARENA.SIZE]
 31476                                  	; 02/01/2023
 31477 00002E59 8CC0                    	mov	ax,es
 31478                                  
 31479 00002E5B 26891E0300              	mov	[es:ARENA.SIZE],bx
 31480 00002E60 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 31481                                  
 31482 00002E66 01D8                    	add	ax,bx
 31483 00002E68 40                      	inc	ax
 31484 00002E69 8EC0                    	mov	es,ax			; Move to new arena area
 31485                                  
 31486 00002E6B 89C8                    	mov	ax,cx
 31487 00002E6D 29D8                    	sub	ax,bx
 31488                                  	; 12/12/2022
 31489                                  	; ax > 0
 31490 00002E6F 48                      	dec	ax			; And prepare the new size
 31491                                  
 31492                                  	; 18/12/2022
 31493 00002E70 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 31494                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 31495 00002E75 26A30300                	mov	[es:ARENA.SIZE],ax
 31496                                  	;mov	ax,'  ' ; 2020h
 31497                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 31498                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 31499                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 31500                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 31501                                  
 31502                                  	; 18/12/2022
 31503 00002E79 E8A401                  	call	freeMCB	; (**)
 31504                                  
 31505                                  	; 12/12/2022
 31506                                  	; cf=0
 31507                                  	;clc
 31508                                  	; 18/12/2022
 31509                                  	;jmp	short smX
 31510                                  smE:	
 31511                                  	; 18/12/2022
 31512                                  	; cf=1 (*)
 31513                                  	;stc
 31514                                  smX:	
 31515                                  	;popreg	<es,cx,bx>
 31516 00002E7C 07                      	pop	es
 31517 00002E7D 59                      	pop	cx
 31518                                  	; 02/01/2023
 31519                                  	;pop	bx
 31520 00002E7E C3                      	retn
 31521                                  
 31522                                  ; -----------------------------------------------------------------------------
 31523                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 31524                                  ; -----------------------------------------------------------------------------
 31525                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 31526                                  ; EXIT:     None; UMB is hidden as necessary
 31527                                  ; ERROR:    None
 31528                                  ; USES:     Flags, AX, CX
 31529                                  ; -----------------------------------------------------------------------------
 31530                                  ; PRIMARY LOGIC:
 31531                                  ;
 31532                                  ; If the UMB is specified in the DH/LH statement, then:
 31533                                  ;    If the largest free segment is too small (check specified size), then:
 31534                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 31535                                  ;    Else, if largest free segment is LARGER than specified size, then:
 31536                                  ;       If /S was given on the command-line, then:
 31537                                  ;          Break that element into two pieces
 31538                                  ;          Set a flag that we're shrinking
 31539                                  ;       Endif
 31540                                  ;    Endif
 31541                                  ; Endif
 31542                                  ; If the UMB is NOT specified (or was removed by the above):
 31543                                  ;    Hide all free elements in the UMB
 31544                                  ;    If the flag that we're shrinking was set, then:
 31545                                  ;       UN-hide the lower portion of the shrunken UMB
 31546                                  ;    ENDIF
 31547                                  ; ENDIF
 31548                                  ; -----------------------------------------------------------------------------
 31549                                  
 31550                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31551                                  	; (SYSINIT:3426h)
 31552                                  _hideUMB_:
 31553                                  	; 02/01/2023
 31554                                  	; ds = cs
 31555                                  
 31556                                  	; 01/01/2023
 31557                                  	;push	bx
 31558                                  	;push	dx
 31559 00002E7F 06                      	push	es
 31560                                  
 31561 00002E80 88C8                    	mov	al,cl
 31562 00002E82 E8B1FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 31563 00002E85 742D                    	jz	short hu_20
 31564                                  
 31565 00002E87 88C8                    	mov	al,cl		; Retrieve the size of the largest
 31566 00002E89 E868FF                  	call	BigFree		; free element in AX; put its address in ES
 31567 00002E8C 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 31568                                  
 31569 00002E8E 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 31570 00002E8F 88C8                    	mov	al,cl		; Retrieve the user's specified
 31571 00002E91 E8B0FE                  	call	GetSize		; minimum size for this umb (into AX)
 31572 00002E94 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 31573                                  
 31574 00002E95 09C0                    	or	ax,ax		; If they didn't specify one,
 31575 00002E97 741B                    	jz	short hu_20	; Skip over all this.
 31576                                  
 31577 00002E99 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 31578 00002E9B 7607                    	jbe	short hu_10
 31579                                  
 31580 00002E9D 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 31581 00002E9F E814FD                  	call	unMarkUMB
 31582 00002EA2 EB10                    	jmp	short hu_20
 31583                                  hu_10:	
 31584                                  	;call	isTiny		; Returns ZF clear if user specified /S
 31585                                  	;jz	short hu_20
 31586                                  	; 02/01/2023
 31587                                  ;isTiny:
 31588                                  	;mov	al,[fUmbTiny] ; ds = cs
 31589                                  	;or	al,al
 31590 00002EA4 800E[721F]00            	or	byte [fUmbTiny],0
 31591 00002EA9 7409                    	jz	short hu_20
 31592                                  
 31593 00002EAB E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 31594 00002EAE 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 31595                                  
 31596 00002EB0 8CC2                    	mov	dx,es
 31597 00002EB2 EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 31598                                  
 31599 00002EB4 89C8                    hu_20:	mov	ax,cx
 31600 00002EB6 E87DFF                  	call	isSpecified	; If they specified this UMB, we're done...
 31601 00002EB9 7510                    	jnz	short hu_X	; so leave.
 31602                                  
 31603 00002EBB 31D2                    	xor	dx,dx
 31604                                  hu_30:	
 31605 00002EBD 88C8                    	mov	al,cl
 31606                                  
 31607 00002EBF E89CFE                  	call	hideUMB		; Hides everything in UMB #al
 31608                                  
 31609 00002EC2 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 31610 00002EC4 7405                    	jz	short hu_X	; So we should leave.
 31611                                  
 31612 00002EC6 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 31613 00002EC8 E8E5FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 31614                                  hu_X:	
 31615 00002ECB 07                      	pop	es
 31616                                  	; 01/01/2023
 31617                                  	;pop	dx
 31618                                  	;pop	bx
 31619 00002ECC C3                      	retn
 31620                                  
 31621                                  ; -----------------------------------------------------------------------------
 31622                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 31623                                  ; -----------------------------------------------------------------------------
 31624                                  ; Entry:  None
 31625                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 31626                                  ; Error:  None
 31627                                  ; Uses:   Flags
 31628                                  ; -----------------------------------------------------------------------------
 31629                                  
 31630                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31631                                  UnFreeze:
 31632                                  	; 03/01/2023
 31633                                  	;push	ax
 31634 00002ECD 06                      	push	es
 31635                                  
 31636 00002ECE E8D8FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 31637 00002ED1 721A                    	jc	short ufX
 31638                                  
 31639                                  	; 22/07/2023
 31640                                  uf10:
 31641 00002ED3 8EC0                    	mov	es,ax ; *
 31642                                  
 31643                                  ; ------------------------------
 31644                                  ; UF10--ES - Current MCB address
 31645                                  ; ------------------------------
 31646                                  
 31647                                  ;uf10:	
 31648 00002ED5 E81700                  	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 31649 00002ED8 7503                    	jnz	short uf20
 31650 00002EDA E8D3FE                  	call	unHideMCB
 31651                                  uf20:	
 31652                                  	;mov	al,[es:ARENA.SIGNATURE]
 31653                                  	;cmp	al,arena_signature_end ; 'Z'
 31654                                  	; 22/07/2023
 31655 00002EDD 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31656 00002EE3 7408                    	jz	short ufX	; 'Z' means this was the last MCB.. that's it.
 31657                                  
 31658                                  	;NextMCB es,ax		; Go on forward.
 31659                                  	; 22/07/2023
 31660                                  	; ax = es
 31661                                  	;mov	ax,es ; *
 31662                                  	;add	ax,[es:3]
 31663 00002EE5 2603060300              	add	ax,[es:ARENA.SIZE]
 31664 00002EEA 40                      	inc	ax
 31665                                  	; 22/07/2023
 31666                                  	;mov	es,ax
 31667 00002EEB EBE6                    	jmp	short uf10
 31668                                  ufX:	
 31669 00002EED 07                      	pop	es
 31670                                  	; 03/01/2023
 31671                                  	;pop	ax
 31672 00002EEE C3                      	retn
 31673                                  
 31674                                  ; -----------------------------------------------------------------------------
 31675                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 31676                                  ; -----------------------------------------------------------------------------
 31677                                  ; ENTRY:    ES:0 should point to an MCB
 31678                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 31679                                  ; ERROR:    None
 31680                                  ; USES:     Flags
 31681                                  ; -----------------------------------------------------------------------------
 31682                                  
 31683                                  isFrozMCB:
 31684                                  	;push	ax
 31685                                  
 31686                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 31687                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 31688 00002EEF 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 31689 00002EF5 7522                    	jne	short ifmX
 31690                                  
 31691                                  	;mov	ax,[es:ARENA.NAME+0]
 31692                                  	;cmp	ax,'FR' ; 5246h
 31693 00002EF7 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 31694 00002EFE 7519                    	jne	short ifmX
 31695                                  	;mov	ax,[es:ARENA.NAME+2]
 31696                                  	;cmp	ax,'OZ' ; 5A4Fh
 31697 00002F00 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 31698 00002F07 7510                    	jne	short ifmX
 31699                                  	;mov	ax,[es:ARENA.NAME+4]
 31700                                  	;cmp	ax,'EN' ; 4E45h
 31701 00002F09 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 31702 00002F10 7507                    	jne	short ifmX
 31703                                  	;mov	ax,[es:ARENA.NAME+6]
 31704                                  	;cmp	ax,'  ' ; 2020h
 31705 00002F12 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 31706                                  ifmX:	
 31707                                  	;pop	ax
 31708 00002F19 C3                      	retn
 31709                                  
 31710                                  ; -----------------------------------------------------------------------------
 31711                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 31712                                  ; -----------------------------------------------------------------------------
 31713                                  ; ENTRY:    ES:0 should point to an MCB
 31714                                  ; EXIT:     None; MCB frozen
 31715                                  ; ERROR:    None
 31716                                  ; USES:     None
 31717                                  ; -----------------------------------------------------------------------------
 31718                                  
 31719                                  frezMCB:
 31720 00002F1A 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 31721 00002F21 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 31722 00002F28 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 31723 00002F2F 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 31724 00002F36 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 31725 00002F3D C3                      	retn
 31726                                  
 31727                                  ; -----------------------------------------------------------------------------
 31728                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 31729                                  ; -----------------------------------------------------------------------------
 31730                                  ; Entry:  None
 31731                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 31732                                  ; Error:  None
 31733                                  ; Uses:   Flags
 31734                                  ; -----------------------------------------------------------------------------
 31735                                  
 31736                                  	; 01/01/2023 - Retro DOS v4.2  
 31737                                  FreezeUM:
 31738                                  	; 01/01/2023
 31739                                  	;push	ax
 31740                                  	;push	cx
 31741                                  	;push	dx
 31742 00002F3E 06                      	push	es
 31743                                  
 31744                                  	;;call	GetLoadUMB
 31745                                  	; 01/01/2023
 31746                                  	; ds = cs
 31747                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 31748 00002F3F A0[751F]                	mov	al,[UmbLoad] 	
 31749                                  
 31750 00002F42 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 31751 00002F44 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 31752                                  
 31753 00002F46 E860FD                  	call	UmbHead		; Returns first UMB segment in AX
 31754                                  	; 22/07/2023
 31755                                  	;mov	es,ax ; *
 31756 00002F49 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31757                                  
 31758                                  	; 22/07/2023
 31759                                  fum10:
 31760 00002F4B 8EC0                    	mov	es,ax ; *
 31761                                  
 31762                                  ; -----------------------------------------
 31763                                  ; FUM10--ES - Current MCB address
 31764                                  ;        CX - Current UMB number
 31765                                  ;        DX - UMB number to skip (load UMB)
 31766                                  ; -----------------------------------------
 31767                                  
 31768                                  ;fum10:	
 31769 00002F4D E866FD                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31770 00002F50 7501                    	jnz	short fum20
 31771                                  
 31772 00002F52 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31773                                  fum20:	
 31774 00002F53 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 31775 00002F55 740B                    	je	short fum30	; freeze anything... so skip that section.
 31776                                  
 31777                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 31778 00002F57 26830E010000            	or	word [es:ARENA.OWNER],0
 31779 00002F5D 7503                    	jnz	short fum30	; either.
 31780                                  
 31781 00002F5F E8B8FF                  	call	frezMCB
 31782                                  fum30:	
 31783                                  	;mov	al,[es:ARENA.SIGNATURE]
 31784                                  	;cmp	al,arena_signature_end ; 'Z'
 31785                                  	; 22/07/2023
 31786 00002F62 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31787 00002F68 7408                    	je	short fumX	; 'Z' means this was the last MCB.. that's it.
 31788                                  
 31789                                  	;NextMCB es, ax		; Go on forward.
 31790                                  	; 22/07/2023
 31791                                  	; ax = es
 31792                                  	;mov	ax,es
 31793                                  	;add	ax,[es:3]
 31794 00002F6A 2603060300              	add	ax,[es:ARENA.SIZE]
 31795 00002F6F 40                      	inc	ax
 31796                                  	; 22/07/2023
 31797                                  	;mov	es,ax ; *
 31798 00002F70 EBD9                    	jmp	short fum10
 31799                                  
 31800 00002F72 07                      fumX:	pop	es
 31801                                  	; 01/01/2023
 31802                                  	;pop	dx
 31803                                  	;pop	cx
 31804                                  	;pop	ax
 31805 00002F73 C3                      	retn
 31806                                  
 31807                                  ; -----------------------------------------------------------------------------
 31808                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 31809                                  ; -----------------------------------------------------------------------------
 31810                                  ; ENTRY:    None
 31811                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 31812                                  ; ERROR:    None
 31813                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 31814                                  ; -----------------------------------------------------------------------------
 31815                                  
 31816                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31817                                  UmbTest:
 31818                                  	; 01/01/2023
 31819                                  	;push	ax
 31820 00002F74 53                      	push	bx ; *
 31821                                  	;push	ds
 31822 00002F75 06                      	push	es ; **
 31823                                  
 31824                                  	; 01/01/2023
 31825                                  	; ds = cs
 31826                                  
 31827 00002F76 E86AFB                  	call	fm_link			; Link in UMBs (if not already linked)
 31828 00002F79 E80800                  	call	WalkMem			; Check to see if they're really linked
 31829 00002F7C 9C                      	pushf				; And remember what we found out
 31830 00002F7D E874FB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 31831 00002F80 9D                      	popf				; And restore what we found out.
 31832                                  
 31833 00002F81 07                      	pop	es ; **
 31834                                  	; 01/01/2023
 31835                                  	;pop	ds
 31836 00002F82 5B                      	pop	bx ; *
 31837                                  	;pop	ax
 31838 00002F83 C3                      	retn
 31839                                  
 31840                                  ; -----------------------------------------------------------------------------
 31841                                  ;*** WalkMem - travels memory chain and returns carry clear if UMBs are linked
 31842                                  ; -----------------------------------------------------------------------------
 31843                                  ; ENTRY:    None
 31844                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 31845                                  ; ERROR:    None
 31846                                  ; USES:     Flags
 31847                                  ; -----------------------------------------------------------------------------
 31848                                  
 31849                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31850                                  	; (SYSINIT:3541h)
 31851                                  
 31852                                  WalkMem:
 31853                                  	;push	ax ; ?
 31854                                  	;push	bx ; ?
 31855                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 31856                                  	;push	es ; ? no need to save contents of these registers ?
 31857                                  		   	
 31858 00002F84 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31859 00002F86 CD21                    	int	21h
 31860                                  
 31861 00002F88 268B47FE                	mov	ax,[es:bx-2]
 31862                                  	; 22/07/2023
 31863                                  um10:
 31864 00002F8C 8EC0                    	mov	es,ax ; * ; **
 31865                                  
 31866                                  ; ------------------------------
 31867                                  ; UM10: ES = Current MCB pointer
 31868                                  ; ------------------------------
 31869                                  
 31870                                  ;um10:
 31871                                  	;mov	al,[es:ARENA.SIGNATURE]
 31872                                  	;cmp	al,arena_signature_end ; 'Z'
 31873                                  	; 22/07/2023
 31874 00002F8E 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31875 00002F94 7408                    	je	short um20		; If signature == 'Z', hay no more.
 31876                                  
 31877                                  	;NextMCB es,bx			; Move to the next MCB
 31878                                  
 31879                                  	;mov	bx,es
 31880                                  	;;add	bx,[es:3]
 31881                                  	;add	bx,[es:ARENA.SIZE]
 31882                                  	;inc	bx
 31883                                  	;mov	es,bx
 31884                                  	; 22/07/2023
 31885                                  	; ax = es
 31886                                  	;mov	ax,es ; *
 31887 00002F96 2603060300              	add	ax,[es:ARENA.SIZE]
 31888 00002F9B 40                      	inc	ax
 31889                                  	;mov	es,ax ; **
 31890                                  	
 31891 00002F9C EBEE                    	jmp	short um10		; And restart the loop.
 31892                                  um20:	
 31893                                  	; 22/07/2023
 31894                                  	; ax = es
 31895                                  	;mov	ax,es
 31896                                  
 31897 00002F9E 3DFF9F                  	cmp	ax,9FFFh		; This sets CF if ax < 9FFF.
 31898                                  
 31899                                  	;pop	es ; ?
 31900                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 31901                                  	;pop	bx ; ?
 31902                                  	;pop	ax ; ?
 31903                                  	
 31904 00002FA1 C3                      	retn
 31905                                  
 31906                                  ; -----------------------------------------------------------------------------
 31907                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 31908                                  ; -----------------------------------------------------------------------------
 31909                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31910                                  ; EXIT:     None
 31911                                  ; ERROR:    None
 31912                                  ; USES:     AX, BX
 31913                                  ; -----------------------------------------------------------------------------
 31914                                  
 31915                                  	; 01/01/2023 - Retro DOS v4.2
 31916                                  hl_unlink:
 31917 00002FA2 30FF                    	xor	bh,bh
 31918                                  
 31919                                  	;getdata bl,fm_umb		; Restore original link-state
 31920                                  	;
 31921                                  	;push	ds
 31922                                  	;push	cs
 31923                                  	;pop	ds
 31924                                  	;mov	bl,[fm_umb]
 31925                                  	;pop	ds
 31926                                  
 31927                                  	; 01/01/2023
 31928                                  	; ds = cs
 31929                                  	;mov	bl,[cs:fm_umb]
 31930 00002FA4 8A1E[A61F]              	mov	bl,[fm_umb]
 31931                                  
 31932 00002FA8 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31933 00002FAB CD21                    	int	21h
 31934 00002FAD C3                      	retn
 31935                                  
 31936                                  ; ----------------------------------------------------------------------
 31937                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 31938                                  ; ----------------------------------------------------------------------
 31939                                  ; 09/04/2019 - Retro DOS v4.0
 31940                                  
 31941                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 31942                                  ;   Date:     May 14, 1992
 31943                                  
 31944                                  ;   Modification log:
 31945                                  ;
 31946                                  ;     DATE    WHO      DESCRIPTION
 31947                                  ;   --------  -------  --------------------------------------------------------
 31948                                  ;   05/14/92  t-richj  Original
 31949                                  ;   06/21/92  t-richj  Final revisions before check-in
 31950                                  
 31951                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 31952                                  
 31953                                  ; -----------------------------------------------------------------------------
 31954                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 31955                                  ; -----------------------------------------------------------------------------
 31956                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 31957                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 31958                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 31959                                  ; ERROR:  None
 31960                                  ; USES:   fInHigh (from highvar.inc), carry flag
 31961                                  ; -----------------------------------------------------------------------------
 31962                                  
 31963                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31964                                  	; (SYSINIT:357Bh)
 31965                                  
 31966                                  UnHideUMBs:
 31967 00002FAE 50                      	push	ax		; Save ax for what we're about to do
 31968                                  
 31969                                  ; -----------------------------------------------------------------------------
 31970                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 31971                                  ;    length of time. Those six constitute a check of whether or not we should
 31972                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 31973                                  ;    will destroy the current link-state and memory-allocation strategy after
 31974                                  ;    every command execution.
 31975                                  ; -----------------------------------------------------------------------------
 31976                                  
 31977                                  	;getdata al,fInHigh	; Get InHigh from data segment
 31978                                  	;
 31979                                  	;push	ds
 31980                                  	;push	cs
 31981                                  	;pop	ds
 31982                                  	;mov	al,[fInHigh]
 31983                                  	;pop	ds	
 31984                                  
 31985                                  	;mov	al,[cs:fInHigh]
 31986                                  	; 31/12/2022
 31987                                  	; ds = cs
 31988 00002FAF A0[711F]                	mov	al,[fInHigh]	
 31989                                  
 31990 00002FB2 08C0                    	or	al,al
 31991 00002FB4 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 31992                                  
 31993 00002FB6 58                      	pop	ax		; then there's nothing to do here... so
 31994 00002FB7 F9                      	stc			; restore everything and return. Just like
 31995 00002FB8 C3                      	retn			; that.
 31996                                  uhu10:	
 31997 00002FB9 E88C00                  	call	linkumb		; Make sure UMBs are linked in.
 31998 00002FBC E81200                  	call	FreeUMBs
 31999                                  
 32000                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 32001                                  	;
 32002                                  	;push	es
 32003                                  	;push	cs
 32004                                  	;pop	es
 32005                                  	;mov	byte [es:fInHigh],0
 32006                                  	;pop	ds
 32007                                  
 32008                                  	; 31/12/2022
 32009                                  	; ds = cs	
 32010                                  	;mov	byte [cs:fInHigh],0
 32011 00002FBF C606[711F]00            	mov	byte [fInHigh],0
 32012                                  
 32013                                  	;call	he_unlink	; Unlink UMBs
 32014                                  	; 31/12/2022
 32015                                  ;;he_unlink:			; unlinks UMBs if fm_umb is set to 0
 32016 00002FC4 30FF                    	xor	bh,bh
 32017                                  
 32018                                  	;getdata bl,fm_umb	; Restore original link-state
 32019                                  	;mov	bl,[cs:fm_umb]	
 32020 00002FC6 8A1E[A61F]              	mov	bl,[fm_umb]
 32021                                  
 32022 00002FCA B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 32023 00002FCD CD21                    	int	21h
 32024                                  	;;retn
 32025                                  
 32026 00002FCF 58                      	pop	ax
 32027                                  	; 12/12/2022
 32028                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 32029 00002FD0 C3                      	retn
 32030                                  
 32031                                  ; 31/12/2022
 32032                                  ;%if 0
 32033                                  ;
 32034                                  ;; -----------------------------------------------------------------------------
 32035                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 32036                                  ;; -----------------------------------------------------------------------------
 32037                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 32038                                  ;; EXIT:     None
 32039                                  ;; ERROR:    None
 32040                                  ;; USES:     AX, BX
 32041                                  ;; -----------------------------------------------------------------------------
 32042                                  ;
 32043                                  ;he_unlink:
 32044                                  ;	xor	bh, bh
 32045                                  ;
 32046                                  ;	;getdata bl, fm_umb	; Restore original link-state
 32047                                  ;	mov	bl,[cs:fm_umb]	
 32048                                  ;
 32049                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 32050                                  ;	int	21h
 32051                                  ;	retn
 32052                                  ;
 32053                                  ;%endif
 32054                                  
 32055                                  ; -----------------------------------------------------------------------------
 32056                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 32057                                  ; -----------------------------------------------------------------------------
 32058                                  ; ENTRY:    None
 32059                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 32060                                  ; ERROR:    None (ignore CF)
 32061                                  ; USES:     Flags
 32062                                  ; -----------------------------------------------------------------------------
 32063                                  
 32064                                  FreeUMBs:
 32065 00002FD1 50                      	push	ax
 32066 00002FD2 06                      	push	es
 32067                                  
 32068 00002FD3 E86500                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 32069 00002FD6 721A                    	jc	short fusX
 32070                                  fus10:
 32071 00002FD8 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 32072                                  ;fus10:	
 32073 00002FDA E81800                  	call	isHideMCB	; Returns with ZF set if owner is 0
 32074 00002FDD 7503                    	jnz	short fus20
 32075 00002FDF E83E00                  	call	freeMCB
 32076                                  fus20:	   
 32077                                  	;mov	al,[es:ARENA.SIGNATURE]
 32078                                  	;cmp	al,arena_signature_end ; 'Z'
 32079                                  	; 22/07/2023
 32080 00002FE2 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32081 00002FE8 7408                    	jz	short fusX	; That means this was the last MCB--that's it.
 32082                                  	
 32083                                  	; 22/07/2023
 32084                                  	; ax = es
 32085                                  	;mov	ax,es
 32086 00002FEA 2603060300              	add	ax,[es:ARENA.SIZE]
 32087 00002FEF 40                      	inc	ax
 32088                                  	; 22/07/2023
 32089                                  	;mov	es,ax
 32090 00002FF0 EBE6                    	jmp	short fus10	; Go on forward.
 32091                                  fusX:	
 32092 00002FF2 07                      	pop	es
 32093 00002FF3 58                      	pop	ax
 32094 00002FF4 C3                      	retn
 32095                                  
 32096                                  ; -----------------------------------------------------------------------------
 32097                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 32098                                  ; -----------------------------------------------------------------------------
 32099                                  ; ENTRY:    ES:0 should point to an MCB
 32100                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 32101                                  ; ERROR:    None
 32102                                  ; USES:     Flags
 32103                                  ; -----------------------------------------------------------------------------
 32104                                  
 32105                                  isHideMCB:
 32106                                  	;push	ax
 32107                                  
 32108 00002FF5 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 32109 00002FFB 7522                    	jne	short ihm_x			     ; then check for HIDDEN
 32110                                  
 32111                                  	;mov	ax,[es:ARENA.NAME]
 32112                                  	;cmp	ax,'HI' ; 4948h
 32113 00002FFD 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 32114 00003004 7519                    	jne	short ihm_x
 32115                                  	;mov	ax,[es:ARENA.NAME+2]
 32116                                  	;cmp	ax,'DD' ; 4444h
 32117 00003006 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 32118 0000300D 7510                    	jne	short ihm_x
 32119                                  	;mov	ax,[es:ARENA.NAME+4]
 32120                                  	;cmp	ax,'EN' ; 4E45h
 32121 0000300F 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 32122 00003016 7507                    	jne	short ihm_x
 32123                                  	;mov	ax,[es:ARENA.NAME+6]
 32124                                  	;cmp	ax,'  ' ; 2020h
 32125 00003018 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 32126                                  ihm_x:	
 32127                                  	;pop	ax
 32128 0000301F C3                      	retn
 32129                                  
 32130                                  ; -----------------------------------------------------------------------------
 32131                                  ;*** freeMCB - marks as free the MCB at ES:0
 32132                                  ; -----------------------------------------------------------------------------
 32133                                  ; ENTRY:    ES:0 should point to an MCB
 32134                                  ; EXIT:     None; MCB free'd
 32135                                  ; ERROR:    None
 32136                                  ; USES:     AX
 32137                                  ; -----------------------------------------------------------------------------
 32138                                  
 32139                                  freeMCB:
 32140 00003020 26C70601000000          	mov	word [es:ARENA.OWNER],0
 32141 00003027 B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 32142 0000302A 26A30800                	mov	[es:ARENA.NAME+0],ax
 32143 0000302E 26A30A00                	mov	[es:ARENA.NAME+2],ax
 32144 00003032 26A30C00                	mov	[es:ARENA.NAME+4],ax
 32145 00003036 26A30E00                	mov	[es:ARENA.NAME+6],ax
 32146 0000303A C3                      	retn
 32147                                  
 32148                                  ; -----------------------------------------------------------------------------
 32149                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 32150                                  ; -----------------------------------------------------------------------------
 32151                                  ; ENTRY:  Nothing
 32152                                  ; EXIT:   AX contains 0x9FFF for most systems
 32153                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 32154                                  ; USES:   Flags, AX
 32155                                  ; -----------------------------------------------------------------------------
 32156                                  
 32157                                  HeadUmb:
 32158                                  	; 13/05/2019
 32159                                  
 32160                                  	;push	si ; ?
 32161                                  	;push	ds ; ?
 32162                                  	;push	es
 32163                                  	;push	bx ; *
 32164                                  
 32165                                  	; 09/04/2019
 32166                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 32167                                  
 32168 0000303B B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 32169 0000303D CD21                    	int	21h
 32170                                  			; DOS - 2+ internal - GET LIST OF LISTS
 32171                                  			; Return: ES:BX -> DOS list of lists
 32172                                  	;mov	ax,[es:8Ch]
 32173 0000303F 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 32174 00003043 83F8FF                  	cmp	ax,0FFFFh
 32175                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 32176                                  
 32177                                  	;clc				; Else, it isn't.
 32178                                  	;jmp	short xhu_x
 32179                                  xhu_e:	
 32180                                  	;stc
 32181 00003046 F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 32182                                  xhu_x:	
 32183                                  	;pop	bx ; *
 32184                                  	;pop	es	
 32185                                  	;pop	ds ; ?
 32186                                  	;pop	si ; ?
 32187 00003047 C3                      	retn
 32188                                  
 32189                                  ; -----------------------------------------------------------------------------
 32190                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 32191                                  ; -----------------------------------------------------------------------------
 32192                                  ; ENTRY:    None
 32193                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 32194                                  ; ERROR:    None
 32195                                  ; USES:     AX, BX, fm_umb
 32196                                  ; -----------------------------------------------------------------------------
 32197                                  
 32198                                  linkumb:
 32199 00003048 B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 32200 0000304B CD21                    	int	21h			; Current link-state is now in al
 32201                                  
 32202 0000304D 08C0                    	or	al,al			; BUGBUG: proper check?
 32203 0000304F 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 32204                                  
 32205 00003051 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 32206 00003054 BB0100                  	mov	bx,1
 32207 00003057 CD21                    	int	21h
 32208                                  lumbX:
 32209 00003059 C3                      	retn
 32210                                  
 32211                                  ;%endif
 32212                                  
 32213                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32214                                  ; (SYSINIT:2B5Fh)
 32215                                  
 32216                                  ; ----------------------------------------------------------------------
 32217                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 32218                                  ; ----------------------------------------------------------------------
 32219                                  ; 09/04/2019 - Retro DOS v4.0
 32220                                  
 32221                                  ;----------------------------------------------------------------------------
 32222                                  ;
 32223                                  ; procedure : InitDevLoad
 32224                                  ;
 32225                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 32226                                  ;			 = 1 indicates load in UMB:
 32227                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 32228                                  ;		                    = 1 indicates a DOS 5-style load
 32229                                  ;		DevSize  = Size of the device driver file in paras
 32230                                  ;
 32231                                  ;	Output : none
 32232                                  ;
 32233                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 32234                                  ;	Also sets up a header for the Device driver entry for mem utility
 32235                                  ;
 32236                                  ;----------------------------------------------------------------------------
 32237                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 32238                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 32239                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 32240                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 32241                                  ;----------------------------------------------------------------------------
 32242                                  
 32243                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32244                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32245                                  	; (SYSINIT:364Ah)
 32246                                  InitDevLoad:
 32247                                  	; 01/01/2023
 32248                                  	;push	es ; *
 32249                                  
 32250                                  	; 11/12/2022
 32251                                  	; ds = cs
 32252 0000305A 803E[C71F]00            	cmp	byte [DeviceHi],0
 32253                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 32254                                  	;je	short InitForLo		; no, init for lo mem
 32255 0000305F 7439                    	je	short initforlo_x ; 09/04/2019
 32256                                  
 32257                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32258                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32259                                  ; %if 0
 32260                                  	; 01/01/2023
 32261 00003061 803E[B71F]01            	cmp	byte [ConvLoad],1
 32262                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 32263 00003066 7413                    	je	short InitForConv
 32264                                  
 32265                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 32266                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 32267                                  ; any areas left in upper-memory, except for elements in the load UMB...
 32268                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 32269                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 32270                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 32271                                  
 32272 00003068 E86904                  	call	ShrinkUMB		; Stop using the old device arena
 32273                                  
 32274 0000306B E899FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 32275 0000306E E8CDFE                  	call	FreezeUM		; Hide everything BUT the load area
 32276 00003071 E85700                  	call	GetUMBForDev		; And grab that load area as needed
 32277 00003074 9C                      	pushf
 32278 00003075 E855FE                  	call	UnFreeze		; Then unhide everything frozen
 32279 00003078 9D                      	popf
 32280                                  	;jc	short InitForLo		; (if carry, it's loading low)
 32281                                  	;jmp	short InitForHi
 32282                                  	; 06/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 32283 00003079 EB0B                    	jmp	short idl0
 32284                                  
 32285                                  ;%endif ; 01/11/2022
 32286                                  
 32287                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32288                                  	; (SYSINIT:2B67h)
 32289                                  InitForConv:
 32290                                  	; 11/12/2022
 32291                                  	; ds = cs
 32292 0000307B E83700                  	call	SpaceInUMB		; Do we have space left in the
 32293                                  					;  current UMB ?
 32294 0000307E 7308                    	jnc	short InitForHi		; yes, we have
 32295 00003080 E85104                  	call	ShrinkUMB		; shrink the current UMB in use
 32296 00003083 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 32297                                  idl0: ; 06/07/2023
 32298 00003086 720D                    	jc	short InitForLo		; we didn't succeed, so load
 32299                                  					;  in low memory
 32300                                  InitForHi:
 32301                                  	; 11/12/2022
 32302                                  	; ds = cs
 32303                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 32304                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 32305                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 32306 00003088 A1[BD1F]                	mov	ax,[DevUMBFree]
 32307 0000308B 8B16[B91F]              	mov	dx,[DevUMBAddr]
 32308 0000308F 0316[BB1F]              	add	dx,[DevUMBSize]
 32309 00003093 EB0C                    	jmp	short idl1
 32310                                  
 32311                                  InitForLo:
 32312                                  	; 11/12/2022
 32313                                  	; ds = cs
 32314                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 32315 00003095 C606[C71F]00            	mov	byte [DeviceHi],0
 32316                                  initforlo_x:
 32317                                  	; 11/12/2022
 32318                                  	; ds = cs
 32319                                  					;  into UMB indicate that
 32320                                  					;  we are loading low
 32321                                  	;mov	ax,[cs:memhi]		; AX = Start of Low memory
 32322                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 32323 0000309A A1[6203]                	mov	ax,[memhi]
 32324 0000309D 8B16[A302]              	mov	dx,[ALLOCLIM]
 32325                                  idl1:
 32326 000030A1 E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 32327                                  	; 11/12/2022
 32328                                  	; ds = cs
 32329                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 32330                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 32331                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 32332                                  	;mov	[cs:DevEntry+2],ax
 32333 000030A4 A3[AB1F]                	mov	[DevLoadAddr],ax
 32334 000030A7 8916[AD1F]              	mov	[DevLoadEnd],dx
 32335 000030AB C706[AF1F]0000          	mov	word [DevEntry],0
 32336 000030B1 A3[B11F]                	mov	[DevEntry+2],ax
 32337                                  	; 01/01/2023
 32338                                  	;pop	es ; *
 32339 000030B4 C3                      	retn
 32340                                  
 32341                                  ;----------------------------------------------------------------------------
 32342                                  ;
 32343                                  ; procedure : SpaceInUMB?
 32344                                  ;
 32345                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 32346                                  ;	Output : Carry set if no space in UMB
 32347                                  ;		 Carry clear if Space is available for the device in
 32348                                  ;		   current UMB
 32349                                  ;
 32350                                  ;----------------------------------------------------------------------------
 32351                                  
 32352                                  SpaceInUMB:
 32353                                  	; 11/12/2022
 32354                                  	; ds = cs
 32355                                  	;mov	ax,[cs:DevUMBSize]
 32356                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 32357                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 32358 000030B5 A1[BB1F]                	mov	ax,[DevUMBSize]
 32359 000030B8 0306[B91F]              	add	ax,[DevUMBAddr]		; End of UMB
 32360 000030BC 2B06[BD1F]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 32361                                  	; 11/12/2022
 32362                                  	;or	ax,ax			; Nospace ?
 32363                                  	;jnz	short spcinumb1
 32364                                  	;stc
 32365                                  	;retn
 32366                                  	; 11/12/2022
 32367 000030C0 83F801                  	cmp	ax,1
 32368 000030C3 7205                    	jb	short spcinumb2	; cf=1
 32369                                  spcinumb1:
 32370 000030C5 48                      	dec	ax			; space for sub-arena
 32371                                  	; 11/12/2022
 32372                                  	; ds = cs
 32373 000030C6 3B06[A91F]              	cmp	ax,[DevSize]
 32374                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 32375                                  spcinumb2:
 32376 000030CA C3                      	retn
 32377                                  
 32378                                  ;----------------------------------------------------------------------------
 32379                                  ;
 32380                                  ; procedure : PrepareMark
 32381                                  ;
 32382                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 32383                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 32384                                  ;
 32385                                  ;----------------------------------------------------------------------------
 32386                                  
 32387                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32388                                  ;
 32389                                  ;PrepareMark:
 32390                                  ;	push	ds
 32391                                  ;	mov	ds,ax
 32392                                  ;	mov	word [ARENA.OWNER],8
 32393                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 32394                                  ;	pop	ds
 32395                                  ;
 32396                                  ;	inc	ax
 32397                                  ;	mov	[cs:DevUMBAddr],ax
 32398                                  ;	mov	[cs:DevUMBFree],ax
 32399                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 32400                                  ;	retn
 32401                                  
 32402                                  ;----------------------------------------------------------------------------
 32403                                  ;
 32404                                  ; procedure : GetUMBForDev
 32405                                  ;
 32406                                  ;	Input : DevSize
 32407                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 32408                                  ;		 the device.
 32409                                  ;		 If success carry clear
 32410                                  ;
 32411                                  ;	Allocates the biggest UMB for loading devices and updates
 32412                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 32413                                  ;	UMB.
 32414                                  ;
 32415                                  ;	This routine relies on the fact that all of the low memory
 32416                                  ;	is allocated, and any DOS alloc calls should return memory
 32417                                  ;	from the UMB pool.
 32418                                  ;
 32419                                  ;----------------------------------------------------------------------------
 32420                                  
 32421                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32422                                  	; (SYSINIT:2BC6h)
 32423                                  
 32424                                  GetUMBForDev:
 32425                                  	; 11/12/2022
 32426                                  	; ds = cs
 32427 000030CB BBFFFF                  	mov	bx,0FFFFh
 32428 000030CE B80048                  	mov	ax,4800h
 32429 000030D1 CD21                    	int	21h
 32430                                  		; DOS - 2+ - ALLOCATE MEMORY
 32431                                  		; BX = number of 16-byte paragraphs desired
 32432                                  
 32433 000030D3 09DB                    	or	bx,bx
 32434 000030D5 742C                    	jz	short gufd_err
 32435                                  
 32436 000030D7 4B                      	dec	bx
 32437                                  	; 11/12/2022
 32438                                  	; ds = cs
 32439 000030D8 391E[A91F]              	cmp	[DevSize],bx
 32440                                  	;cmp	[cs:DevSize],bx
 32441 000030DC 7725                    	ja	short gufd_err
 32442 000030DE 43                      	inc	bx
 32443                                  
 32444 000030DF B80048                  	mov	ax,4800h
 32445 000030E2 CD21                    	int	21h
 32446 000030E4 721D                    	jc	short gufd_err
 32447                                  
 32448                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32449                                  	;dec	ax
 32450                                  	;call	PrepareMark
 32451                                  	;
 32452                                  PrepareMark:
 32453 000030E6 1E                      	push	ds
 32454 000030E7 48                      	dec	ax
 32455 000030E8 8ED8                    	mov	ds,ax
 32456 000030EA C70601000800            	mov	word [ARENA.OWNER],8
 32457 000030F0 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 32458 000030F6 40                      	inc	ax
 32459 000030F7 1F                      	pop	ds
 32460                                  	; 11/12/2022
 32461                                  	; ds = cs
 32462                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 32463                                  	;mov	[cs:DevUMBAddr],ax
 32464                                  	;mov	[cs:DevUMBFree],ax
 32465 000030F8 891E[BB1F]              	mov	[DevUMBSize],bx		; update the UMB Variables
 32466 000030FC A3[B91F]                	mov	[DevUMBAddr],ax
 32467 000030FF A3[BD1F]                	mov	[DevUMBFree],ax
 32468                                  	;
 32469                                  	; 11/12/2022
 32470                                  	; cf=0
 32471                                  	;clc				; mark no error
 32472 00003102 C3                      	retn
 32473                                  gufd_err:
 32474 00003103 31C0                    	xor	ax,ax ; 0
 32475                                  	; 11/12/2022
 32476                                  	; ds = cs
 32477                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 32478                                  	;mov	[cs:DevUMBAddr],ax
 32479                                  	;mov	[cs:DevUMBFree],ax
 32480 00003105 A3[BB1F]                	mov	[DevUMBSize],ax		; erase the previous values
 32481 00003108 A3[B91F]                	mov	[DevUMBAddr],ax
 32482 0000310B A3[BD1F]                	mov	[DevUMBFree],ax
 32483 0000310E F9                      	stc
 32484 0000310F C3                      	retn
 32485                                  
 32486                                  ;----------------------------------------------------------------------------
 32487                                  ;
 32488                                  ; procedure : DevSetMark
 32489                                  ;
 32490                                  ;	Input : AX - Free segment were device is going to be loaded
 32491                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 32492                                  ;
 32493                                  ;	Creates a sub-arena for the device driver
 32494                                  ;	puts 'D' marker in the sub-arena
 32495                                  ;	Put the owner of the sub-arena as (AX+1)
 32496                                  ;	Copies the file name into sub-arena name field
 32497                                  ;
 32498                                  ;	Size field of the sub-arena will be set only at succesful
 32499                                  ;	completion of Device load.
 32500                                  ;
 32501                                  ;----------------------------------------------------------------------------
 32502                                  
 32503                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32504                                  	; (SYSINIT:2C13h)
 32505                                  
 32506                                  DevSetMark:
 32507 00003110 06                      	push	es
 32508                                  	; 03/01/2023
 32509                                  	;push	di
 32510 00003111 1E                      	push	ds
 32511 00003112 56                      	push	si
 32512 00003113 8EC0                    	mov	es,ax
 32513 00003115 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 32514 0000311B 40                      	inc	ax
 32515 0000311C 26A30100                	mov	[es:devmark.seg],ax
 32516                                  
 32517                                  ;-------------- Copy file name
 32518                                  
 32519 00003120 50                      	push	ax			; save load address
 32520 00003121 2EC536[7A03]            	lds	si,[cs:bpb_addr]	; command line is still there
 32521                                  
 32522 00003126 89F7                    	mov	di,si
 32523 00003128 FC                      	cld
 32524                                  dsm_again:
 32525 00003129 AC                      	lodsb
 32526 0000312A 3C3A                    	cmp	al,':'
 32527 0000312C 7504                    	jne	short isit_slash
 32528 0000312E 89F7                    	mov	di,si
 32529 00003130 EBF7                    	jmp	short dsm_again
 32530                                  isit_slash:
 32531 00003132 3C5C                    	cmp	al,'\'
 32532 00003134 7504                    	jne	short isit_null
 32533 00003136 89F7                    	mov	di,si
 32534 00003138 EBEF                    	jmp	short dsm_again
 32535                                  isit_null:
 32536 0000313A 08C0                    	or	al,al
 32537 0000313C 75EB                    	jnz	short dsm_again
 32538 0000313E 89FE                    	mov	si,di
 32539                                  
 32540 00003140 BF0800                  	mov	di,devmark.filename ; 8
 32541 00003143 B90800                  	mov	cx,8			; maximum 8 characters
 32542                                  dsm_next_char:
 32543 00003146 AC                      	lodsb
 32544 00003147 08C0                    	or	al,al
 32545 00003149 7407                    	jz	short blankout
 32546 0000314B 3C2E                    	cmp	al,'.'
 32547 0000314D 7403                    	je	short blankout
 32548 0000314F AA                      	stosb
 32549 00003150 E2F4                    	loop	dsm_next_char
 32550                                  blankout:
 32551 00003152 E304                    	jcxz	dsm_exit
 32552 00003154 B020                    	mov	al,' '
 32553 00003156 F3AA                    	rep	stosb			; blank out the rest
 32554                                  dsm_exit:
 32555 00003158 58                      	pop	ax			; restore load address
 32556 00003159 5E                      	pop	si
 32557 0000315A 1F                      	pop	ds
 32558                                  	; 03/01/2023
 32559                                  	;pop	di
 32560 0000315B 07                      	pop	es
 32561 0000315C C3                      	retn
 32562                                  
 32563                                  ;----------------------------------------------------------------------------
 32564                                  ;
 32565                                  ; procedure : SizeDevice
 32566                                  ;
 32567                                  ;	Input : ES:SI - points to device file to be sized
 32568                                  ;
 32569                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 32570                                  ;
 32571                                  ;	Calculates the size of the device file in paras and stores it
 32572                                  ;	in DevSize
 32573                                  ;
 32574                                  ;----------------------------------------------------------------------------
 32575                                  
 32576                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32577                                  SizeDevice:
 32578                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32579                                  	; 11/12/2022 ; *
 32580 0000315D 1E                      	push	ds ; *
 32581 0000315E 06                      	push	es
 32582 0000315F 1F                      	pop	ds
 32583 00003160 89F2                    	mov	dx,si			; ds:dx -> file name
 32584 00003162 B8003D                  	mov	ax,3D00h		; open
 32585 00003165 CD21                    	int	21h
 32586 00003167 7237                    	jc	short sd_err		; open failed
 32587                                  
 32588 00003169 89C3                    	mov	bx,ax			; BX - file handle
 32589 0000316B B80242                  	mov	ax,4202h		; seek
 32590 0000316E 31C9                    	xor	cx,cx
 32591 00003170 89CA                    	mov	dx,cx			; to end of file
 32592 00003172 CD21                    	int	21h
 32593 00003174 7223                    	jc	short sd_close		; did seek fail (impossible)
 32594 00003176 83C00F                  	add	ax,15			; para convert
 32595 00003179 83D200                  	adc	dx,0
 32596 0000317C F7C2F0FF                	test	dx,0FFF0h		; size > 0ffffh paras ?
 32597                                  	;jz	short szdev1		; no
 32598                                  	; 22/07/2023
 32599 00003180 7409                    	jz	short sd_ctp
 32600 00003182 2EC706[A91F]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 32601                                  					; assuming that we fail later
 32602 00003189 EB0E                    	jmp	short sd_close
 32603                                  sd_ctp:	
 32604                                  	; 22/07/2023
 32605                                  ;szdev1:
 32606 0000318B B104                    	mov	cl,4			; convert it to paras
 32607 0000318D D3E8                    	shr	ax,cl
 32608 0000318F B10C                    	mov	cl,12
 32609 00003191 D3E2                    	shl	dx,cl
 32610 00003193 09D0                    	or	ax,dx ; * ; cf=0
 32611                                  	;
 32612                                  	; 22/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 32613                                  	; MSDOS 6.22 IO:SYS - SYSINIT:37A6h 
 32614                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32615                                  	;cmp	ax,[cs:DevSizeOption]
 32616                                  	;ja	short szdev2
 32617                                  	;mov	ax,[cs:DevSizeOption]
 32618                                  	; 12/12/2022
 32619                                  	;clc
 32620                                  ;szdev2:
 32621 00003195 2EA3[A91F]              	mov	[cs:DevSize],ax		; save file size (in paragraps)
 32622                                  	; 22/07/2023
 32623                                  	;clc ; cf=0 ; *	; CLC is not needed here
 32624                                  			; (OR instruction clears CF) - E.TAN 22/07/2023
 32625                                  
 32626                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32627                                  	; 12/12/2022
 32628                                  	; cf=0
 32629                                  	;clc
 32630                                  sd_close:
 32631 00003199 9C                      	pushf				; let close not spoil our
 32632                                  					;  carry flag
 32633 0000319A B8003E                  	mov	ax,3E00h		; close
 32634 0000319D CD21                    	int	21h			; we are not checking for err
 32635 0000319F 9D                      	popf
 32636                                  sd_err:
 32637                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32638                                  	; 11/12/2022 ; *
 32639 000031A0 1F                      	pop     ds ; *
 32640 000031A1 C3                      	retn
 32641                                  
 32642                                  ;----------------------------------------------------------------------------
 32643                                  ;
 32644                                  ; procedure : ExecDev
 32645                                  ;
 32646                                  ;	Input : ds:dx -> device to be executed
 32647                                  ;		DevLoadAddr - contains where device has to be loaded
 32648                                  ;
 32649                                  ;	Output : Carry if error
 32650                                  ;		 Carry clear if no error
 32651                                  ;
 32652                                  ;	Loads a device driver using the 4b03h function call
 32653                                  ;
 32654                                  ;----------------------------------------------------------------------------
 32655                                  
 32656                                  	; 01/11/2022
 32657                                  ExecDev:
 32658 000031A2 2E8B1E[AB1F]            	mov	bx,[cs:DevLoadAddr]
 32659 000031A7 2E891E[C31F]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 32660                                  					;  block for exec with
 32661                                  					;  load address
 32662 000031AC 2E891E[C51F]            	mov	[cs:DevExecReloc],bx
 32663 000031B1 8CCB                    	mov	bx,cs
 32664 000031B3 8EC3                    	mov	es,bx
 32665 000031B5 BB[C31F]                	mov	bx,DevExecAddr		; es:bx points to parameters
 32666                                  	;mov	al,3	; (load program only)
 32667                                  	;mov	ah,EXEC ; 4Bh
 32668                                  	; 04/07/2023
 32669 000031B8 B8034B                  	mov	ax,(EXEC<<8)|03h
 32670 000031BB CD21                    	int	21h			; load in the device driver
 32671                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 32672                                  		; DS:DX -> ASCIZ filename
 32673                                  		; ES:BX -> parameter block
 32674                                  		; AL = subfunction 
 32675 000031BD C3                      	retn
 32676                                  
 32677                                  ;----------------------------------------------------------------------------
 32678                                  ;
 32679                                  ; procedure : RetFromUM
 32680                                  ;
 32681                                  ;	Input : None
 32682                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 32683                                  ;		 ConvLoad clear if did.
 32684                                  ;
 32685                                  ;	Prepares memory for more devices after returning from loading one
 32686                                  ;	using the DOS 6 options (/L:... etc).
 32687                                  ;
 32688                                  ;----------------------------------------------------------------------------
 32689                                  
 32690                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32691                                  ;  (SYSINIT:37D1h)
 32692                                  
 32693                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32694                                  ;%if 0
 32695                                  RetFromUM:
 32696                                  	; 31/12/2022
 32697                                  	; ds = cs
 32698 000031BE 9C                      	pushf
 32699                                  	;mov	byte [cs:ConvLoad],1
 32700 000031BF C606[B71F]01            	mov	byte [ConvLoad],1
 32701 000031C4 E8E7FD                  	call	UnHideUMBs
 32702 000031C7 7205                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 32703                                  	; 31/12/2022
 32704                                  	; ds = cs
 32705                                  	;mov	byte [cs:ConvLoad],0
 32706 000031C9 C606[B71F]00            	mov	byte [ConvLoad],0
 32707                                  rfUM1:	
 32708 000031CE 9D                      	popf
 32709 000031CF C3                      	retn
 32710                                  
 32711                                  ;%endif ; 01/11/2022
 32712                                  
 32713                                  ;----------------------------------------------------------------------------
 32714                                  ;
 32715                                  ; procedure : RemoveNull
 32716                                  ;
 32717                                  ;	Input : ES:SI points to a null terminated string
 32718                                  ;
 32719                                  ;	Output : none
 32720                                  ;
 32721                                  ;	Replaces the null at the end of a string with blank
 32722                                  ;
 32723                                  ;----------------------------------------------------------------------------
 32724                                  
 32725                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32726                                  	; (SYSINIT:2CCEh)
 32727                                  RemoveNull:
 32728                                  	; 11/12/2022
 32729                                  	; ds = cs
 32730                                  rn_next:
 32731 000031D0 268A1C                  	mov	bl,[es:si]
 32732 000031D3 08DB                    	or	bl,bl			; null ?
 32733 000031D5 7403                    	jz	short rn_gotnull
 32734 000031D7 46                      	inc	si			; advance the pointer
 32735 000031D8 EBF6                    	jmp	short rn_next
 32736                                  rn_gotnull:
 32737                                  	; 11/12/2022
 32738 000031DA 8A1E[DC1F]              	mov	bl,[DevSavedDelim]
 32739                                  	;mov	bl,[cs:DevSavedDelim]
 32740 000031DE 26881C                  	mov	[es:si],bl		; replace null with blank
 32741                                  	; 02/11/2022
 32742                                  ; 11/12/2022
 32743                                  rba_ok:		; 10/04/2019
 32744 000031E1 C3                      	retn
 32745                                  
 32746                                  ;----------------------------------------------------------------------------
 32747                                  ;
 32748                                  ; procedure : RoundBreakAddr
 32749                                  ;
 32750                                  ;	Input : DevBrkAddr
 32751                                  ;	Output : DevBrkAddr
 32752                                  ;
 32753                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 32754                                  ;
 32755                                  ;----------------------------------------------------------------------------
 32756                                  
 32757                                  RoundBreakAddr:
 32758 000031E2 2EA1[B31F]              	mov	ax,[cs:DevBrkAddr]
 32759 000031E6 E87FDF                  	call	ParaRound
 32760 000031E9 2E0106[B51F]            	add	[cs:DevBrkAddr+2],ax
 32761 000031EE 2EC706[B31F]0000        	mov	word [cs:DevBrkAddr],0
 32762 000031F5 2EA1[AD1F]              	mov	ax,[cs:DevLoadEnd]
 32763 000031F9 2E3906[B51F]            	cmp	[cs:DevBrkAddr+2],ax
 32764 000031FE 76E1                    	jbe	short rba_ok
 32765 00003200 E94311                  	jmp	mem_err
 32766                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32767                                  	; 11/12/2022
 32768                                  ;rba_ok:
 32769                                  ;	retn
 32770                                  
 32771                                  ;----------------------------------------------------------------------------
 32772                                  ;
 32773                                  ; procedure : DevSetBreak
 32774                                  ;
 32775                                  ;	Input : DevBrkAddr
 32776                                  ;	Output : Carry set if Device returned Init failed
 32777                                  ;		 Else carry clear
 32778                                  ;
 32779                                  ;----------------------------------------------------------------------------
 32780                                  
 32781                                  DevSetBreak:
 32782 00003203 50                      	push	ax
 32783                                  
 32784 00003204 2EA1[B51F]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 32785 00003208 2E803E[DF14]00          	cmp	byte [cs:multdeviceflag],0
 32786 0000320E 750F                    	jne	short set_break_continue ;do not check it.
 32787 00003210 2E3B06[AB1F]            	cmp	ax,[cs:DevLoadAddr]
 32788 00003215 7508                    	jne	short set_break_continue ;if not same, then o.k.
 32789                                  
 32790                                  	;cmp	word [cs:DevBrkAddr],0
 32791                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 32792                                  	; 12/12/2022
 32793 00003217 2E833E[B31F]01          	cmp	word [cs:DevBrkAddr],1
 32794 0000321D 7204                    	jb	short break_failed
 32795                                  
 32796                                  set_break_continue:
 32797 0000321F E8C0FF                  	call	RoundBreakAddr
 32798                                  	; 12/12/2022
 32799 00003222 F8                      	clc
 32800                                  break_failed:
 32801 00003223 58                      	pop	ax
 32802                                  	;clc
 32803 00003224 C3                      	retn
 32804                                  
 32805                                  	; 12/12/2022
 32806                                  ;break_failed:
 32807                                  	;pop	ax
 32808                                  	;stc
 32809                                  	;retn
 32810                                  
 32811                                  ;----------------------------------------------------------------------------
 32812                                  ;
 32813                                  ; procedure : DevBreak
 32814                                  ;
 32815                                  ;	Input : DevLoadAddr & DevBrkAddr
 32816                                  ;	Output : none
 32817                                  ;
 32818                                  ;	Marks a succesful install of a device driver
 32819                                  ;	Sets device size field in sub-arena &
 32820                                  ;	Updates Free ptr in UMB or adjusts memhi
 32821                                  ;
 32822                                  ;----------------------------------------------------------------------------
 32823                                  
 32824                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32825                                  DevBreak:
 32826                                  	;push	ds ; 11/12/2022
 32827                                  
 32828                                  	; 11/12/2022
 32829 00003225 0E                      	push	cs
 32830 00003226 1F                      	pop	ds
 32831                                  	;mov	ax,[cs:DevLoadAddr]
 32832                                  	;mov	bx,[cs:DevBrkAddr+2]
 32833 00003227 A1[AB1F]                	mov	ax,[DevLoadAddr]
 32834 0000322A 8B1E[B51F]              	mov	bx,[DevBrkAddr+2]
 32835                                  	; 11/12/2022
 32836 0000322E 1E                      	push	ds
 32837                                  
 32838 0000322F 48                      	dec	ax			; seg of sub-arena
 32839 00003230 8ED8                    	mov	ds,ax
 32840 00003232 40                      	inc	ax			; Back to Device segment
 32841 00003233 29D8                    	sub	ax,bx
 32842 00003235 F7D8                    	neg	ax			; size of device in paras
 32843 00003237 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 32844                                  	
 32845                                  	; 11/12/2022
 32846 0000323A 1F                      	pop	ds
 32847                                  	; ds = cs
 32848                                   	
 32849 0000323B 803E[C71F]00            	cmp	byte [DeviceHi],0
 32850                                  	;cmp	byte [cs:DeviceHi],0
 32851 00003240 7405                    	je	short db_lo
 32852                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 32853                                  	;jmp	short db_exit
 32854                                  	; 11/12/2022
 32855 00003242 891E[BD1F]              	mov	[DevUMBFree],bx
 32856 00003246 C3                      	retn	
 32857                                  db_lo:
 32858                                  	; 11/12/2022
 32859                                  	; ds = cs
 32860                                  	;mov	[cs:memhi],bx
 32861                                  	;mov	word [cs:memlo],0
 32862 00003247 891E[6203]              	mov	[memhi],bx
 32863 0000324B C706[6003]0000          	mov	word [memlo],0 ; 18/12/2022
 32864                                  db_exit:
 32865                                  	;pop	ds ; 11/12/2022
 32866 00003251 C3                      	retn
 32867                                  
 32868                                  ; 10/04/2019 - Retro DOS v4.0
 32869                                  
 32870                                  ;----------------------------------------------------------------------------
 32871                                  ;
 32872                                  ; procedure : ParseSize
 32873                                  ;
 32874                                  ;	Parses the command line for SIZE= command
 32875                                  ;
 32876                                  ;	ES:SI = command line to parsed
 32877                                  ;
 32878                                  ;	returns ptr to command line after SIZE= option in ES:SI
 32879                                  ;	updates the DevSizeOption variable with value supplied
 32880                                  ;	in SIZE=option
 32881                                  ;	Returns carry if the SIZE option was invalid
 32882                                  ;
 32883                                  ;----------------------------------------------------------------------------
 32884                                  
 32885                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32886                                  	; (SYSINIT:2D5Ah)
 32887                                  ParseSize:
 32888                                  	;push	bx
 32889                                  	;mov	bx,si
 32890                                  
 32891                                  	; 11/12/2022
 32892                                  	; ds = cs
 32893                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 32894                                  	;mov	[cs:DevCmdLine],si
 32895                                  	;mov	[cs:DevCmdLine+2],es
 32896 00003252 C706[C81F]0000          	mov	word [DevSizeOption],0 ; init the value
 32897 00003258 8936[D81F]              	mov	[DevCmdLine],si
 32898 0000325C 8C06[DA1F]              	mov	[DevCmdLine+2],es	
 32899 00003260 E82900                  	call	SkipDelim
 32900 00003263 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 32901 00003268 7520                    	jne	short ps_no_size
 32902 0000326A 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 32903 00003270 7518                    	jne	short ps_no_size
 32904 00003272 268A4404                	mov	al,[es:si+4]
 32905 00003276 E83710                  	call	delim
 32906                                  	;jne	short ps_no_size
 32907                                  	; 22/07/2023
 32908 00003279 750E                    	jne	short ps_no_size_2 ; cf=0 here
 32909 0000327B 83C605                  	add	si,5
 32910 0000327E E81600                  	call	GetHexNum
 32911 00003281 7208                    	jc	short ps_err
 32912                                  	; 11/12/2022
 32913                                  	; ds = cs
 32914                                  	;mov	[cs:DevSizeOption],ax
 32915 00003283 A3[C81F]                	mov	[DevSizeOption],ax
 32916 00003286 E80300                  	call	SkipDelim
 32917                                  	; 22/07/2023
 32918                                  ps_no_size_2:
 32919                                  	; cf = 0
 32920 00003289 C3                      	retn
 32921                                  
 32922                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32923                                  	;mov	bx,si
 32924                                  ps_no_size:	
 32925                                  	;mov	si,bx
 32926                                  	;pop	bx
 32927 0000328A F8                      	clc	; cf=0
 32928                                  	;retn
 32929                                  	; 11/12/2022
 32930                                  ps_err:		; cf=1
 32931                                  sd_ret:		; cf=?
 32932 0000328B C3                      	retn
 32933                                  ;ps_err:
 32934                                  	; 02/11/2022
 32935                                  	;pop	bx
 32936                                  	;stc
 32937                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32938                                  	; 11/12/2022
 32939                                  	; cf=1
 32940                                  	;stc
 32941                                  	; 11/12/2022
 32942                                  ;sd_ret: 
 32943                                  	; 22/07/2023
 32944                                  	; 12/04/2019
 32945                                  	;retn
 32946                                  
 32947                                  ; 12/04/2019 - Retro DOS v4.0
 32948                                  
 32949                                  ;----------------------------------------------------------------------------
 32950                                  ;
 32951                                  ; procedure : SkipDelim
 32952                                  ;
 32953                                  ;	Skips delimiters in the string pointed to by ES:SI
 32954                                  ;	Returns ptr to first non-delimiter character in ES:SI
 32955                                  ;
 32956                                  ;----------------------------------------------------------------------------
 32957                                  	
 32958                                  	; 01/11/2022
 32959                                  SkipDelim:
 32960                                  sd_next_char:
 32961 0000328C 268A04                  	mov	al,[es:si]
 32962 0000328F E81E10                  	call	delim
 32963 00003292 75F7                    	jnz	short sd_ret
 32964 00003294 46                      	inc	si
 32965 00003295 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 32966                                  	; 11/12/2022
 32967                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32968                                  ;sd_ret:
 32969                                  	;retn
 32970                                  
 32971                                  ;----------------------------------------------------------------------------
 32972                                  ;
 32973                                  ; procedure : GetHexNum
 32974                                  ;
 32975                                  ;	Converts an ascii string terminated by a delimiter into binary.
 32976                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 32977                                  ;
 32978                                  ;	Returns in AX the number of paras equivalent to the
 32979                                  ;	hex number of bytes specified by the hexadecimal string.
 32980                                  ;
 32981                                  ;	Returns carry in case it encountered a non-hex character or
 32982                                  ;	if it encountered crlf
 32983                                  ;
 32984                                  ;----------------------------------------------------------------------------
 32985                                  
 32986                                  ; 13/05/2019
 32987                                  
 32988                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32989                                  	; (SYSINIT:38C5h)
 32990                                  
 32991                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32992                                  	; (SYSINIT:2DA5h)
 32993                                  GetHexNum:
 32994 00003297 31C0                    	xor	ax,ax
 32995 00003299 31D2                    	xor	dx,dx
 32996                                  ghn_next:
 32997 0000329B 268A1C                  	mov	bl,[es:si]
 32998 0000329E 80FB0D                  	cmp	bl,cr  ; 0Dh
 32999 000032A1 7436                    	je	short ghn_err
 33000 000032A3 80FB0A                  	cmp	bl,lf  ; 0Ah
 33001 000032A6 7431                    	je	short ghn_err
 33002 000032A8 50                      	push	ax
 33003 000032A9 88D8                    	mov	al,bl
 33004 000032AB E80210                  	call	delim
 33005 000032AE 58                      	pop	ax
 33006                                  	; 03/01/2023
 33007 000032AF B90400                  	mov	cx, 4
 33008 000032B2 7410                    	jz	short ghn_into_paras
 33009 000032B4 E82400                  	call	GetNibble
 33010                                  	;jc	short ghn_err
 33011                                  	; 11/12/2022
 33012 000032B7 7221                    	jc	short ghn_ret ; cf=1
 33013                                  	; 03/01/2023
 33014                                  	;mov	cx,4
 33015                                  ghn_shift1:
 33016 000032B9 D1E0                    	shl	ax,1
 33017 000032BB D1D2                    	rcl	dx,1
 33018 000032BD E2FA                    	loop	ghn_shift1
 33019 000032BF 08D8                    	or	al,bl
 33020 000032C1 46                      	inc	si
 33021 000032C2 EBD7                    	jmp	short ghn_next
 33022                                  ghn_into_paras:
 33023 000032C4 83C00F                  	add	ax,15
 33024 000032C7 83D200                  	adc	dx,0
 33025 000032CA F7C2F0FF                	test	dx,0FFF0h
 33026 000032CE 7509                    	jnz	short ghn_err
 33027                                  	; 03/01/2023
 33028                                  	;mov	cx,4
 33029                                  ghn_shift2:
 33030 000032D0 F8                      	clc
 33031 000032D1 D1DA                    	rcr	dx,1
 33032 000032D3 D1D8                    	rcr	ax,1
 33033 000032D5 E2F9                    	loop	ghn_shift2
 33034 000032D7 F8                      	clc
 33035 000032D8 C3                      	retn
 33036                                  	; 11/12/2022
 33037                                  ghn_err:
 33038                                  gnib_err:
 33039 000032D9 F9                      	stc
 33040                                  ghn_ret:
 33041                                  gnib_ret:
 33042 000032DA C3                      	retn
 33043                                  
 33044                                  ;----------------------------------------------------------------------------
 33045                                  ;
 33046                                  ; procedure : GetNibble
 33047                                  ;
 33048                                  ;	Convert one nibble (hex digit) in BL into binary
 33049                                  ;
 33050                                  ;	Returns binary value in BL
 33051                                  ;
 33052                                  ;	Returns carry if BL contains non-hex digit
 33053                                  ;
 33054                                  ;----------------------------------------------------------------------------
 33055                                  
 33056                                  GetNibble:
 33057 000032DB 80FB30                  	cmp	bl,'0'
 33058                                  	;jb	short gnib_err
 33059                                  	; 11/12/2022
 33060 000032DE 72FA                    	jb	short gnib_ret ; cf=1
 33061 000032E0 80FB39                  	cmp	bl,'9'
 33062 000032E3 7704                    	ja	short is_it_hex
 33063 000032E5 80EB30                  	sub	bl,'0'		; clc
 33064 000032E8 C3                      	retn
 33065                                  is_it_hex:
 33066 000032E9 80FB41                  	cmp	bl,'A'
 33067                                  	;jb	short gnib_err
 33068                                  	; 11/12/2022
 33069 000032EC 72EC                    	jb	short gnib_ret ; cf=1
 33070 000032EE 80FB46                  	cmp	bl,'F'
 33071 000032F1 77E6                    	ja	short gnib_err ; 11/12/2022
 33072 000032F3 80EB37                  	sub	bl,'A'- 10	; clc
 33073 000032F6 C3                      	retn
 33074                                  	; 11/12/2022
 33075                                  ;gnib_err:
 33076                                  ;	stc
 33077                                  ;gnib_ret:
 33078                                  ;	retn
 33079                                  
 33080                                  ;============================================================================
 33081                                  
 33082                                  ; 12/04/2019 - Retro DOS v4.0
 33083                                  
 33084                                  ; umb.inc (MSDOS 6.0, 1991)
 33085                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 33086                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 33087                                  
 33088                                  XMM_REQUEST_UMB	equ 10h
 33089                                  XMM_RELEASE_UMB	equ 11h
 33090                                  
 33091                                  ;----------------------------------------------------------------------------
 33092                                  ;
 33093                                  ; procedure : AllocUMB
 33094                                  ;
 33095                                  ;	Allocate all UMBs and link it to DOS arena chain
 33096                                  ;
 33097                                  ;----------------------------------------------------------------------------
 33098                                  
 33099                                  AllocUMB:
 33100                                  	; 31/12/2022
 33101                                  	; ds = cs
 33102 000032F7 E81000                  	call	InitAllocUMB		; link in the first UMB
 33103 000032FA 720D                    	jc	short au_exit		; quit on error
 33104                                  au_next:
 33105 000032FC E83900                  	call	umb_allocate		; allocate
 33106 000032FF 7205                    	jc	short au_coalesce
 33107 00003301 E85000                  	call	umb_insert		; & insert till no UMBs
 33108 00003304 EBF6                    	jmp	short au_next
 33109                                  au_coalesce:
 33110 00003306 E80901                  	call	umb_coalesce		; coalesce all UMBs
 33111                                  au_exit:
 33112                                  	; 31/12/2022
 33113                                  	; ds = cs
 33114 00003309 C3                      	retn
 33115                                  
 33116                                  ;----------------------------------------------------------------------------
 33117                                  ;
 33118                                  ; procedure : InitAllocUMB
 33119                                  ;
 33120                                  ;----------------------------------------------------------------------------
 33121                                  
 33122                                  InitAllocUMB:
 33123                                  	; 31/12/2022
 33124                                  	; ds = cs
 33125 0000330A E8A8D7                  	call	IsXMSLoaded
 33126 0000330D 7527                    	jnz	short iau_err		; quit on no XMS driver
 33127 0000330F B452                    	mov	ah,52h
 33128 00003311 CD21                    	int	21h			; get DOS DATA seg
 33129                                  	; 31/12/2022
 33130                                  	; ds = cs
 33131                                  	;mov	[cs:DevDOSData],es	; & save it for later
 33132 00003313 8C06[D61F]              	mov	[DevDOSData],es		; & save it for later
 33133 00003317 B81043                  	mov	ax,4310h
 33134 0000331A CD2F                    	int	2Fh
 33135                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 33136                                  	;mov	[cs:DevXMSAddr+2],es
 33137 0000331C 891E[BF1F]              	mov	[DevXMSAddr],bx		; get XMS driver address
 33138 00003320 8C06[C11F]              	mov	[DevXMSAddr+2],es	
 33139                                  	; 31/12/2022
 33140 00003324 803E[D51F]00            	cmp	byte [FirstUMBLinked],0 
 33141                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 33142                                  	;jne	short ia_1		; quit if we already did it
 33143                                  	; 12/12/2022
 33144 00003329 770A                    	ja	short ia_1 ; cf=0
 33145 0000332B E83201                  	call	LinkFirstUMB		; else link the first UMB
 33146                                  	;jc	short iau_err
 33147                                  	; 12/12/2022
 33148 0000332E 7207                    	jc	short iau_err2  ; cf=1
 33149                                  	; 31/12/2022
 33150                                  	; ds = cs
 33151 00003330 C606[D51F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 33152                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 33153                                  ia_1:
 33154                                  	; 12/12/2022
 33155                                  	; cf=0
 33156                                  	;clc
 33157 00003335 C3                      	retn
 33158                                  iau_err:
 33159 00003336 F9                      	stc
 33160                                  iau_err2:
 33161 00003337 C3                      	retn
 33162                                  
 33163                                  ;-------------------------------------------------------------------------
 33164                                  ;
 33165                                  ; Procedure Name	: umb_allocate
 33166                                  ;
 33167                                  ; Inputs		: DS = data
 33168                                  ;
 33169                                  ; Outputs		: if UMB available
 33170                                  ;				Allocates the largest available UMB and 
 33171                                  ;			  	BX = segment of allocated block
 33172                                  ;				DX = size of allocated block
 33173                                  ;				NC
 33174                                  ;			  else 
 33175                                  ;				CY
 33176                                  ;
 33177                                  ; Uses			: BX, DX
 33178                                  ;
 33179                                  ;-------------------------------------------------------------------------
 33180                                  
 33181                                  umb_allocate:
 33182                                  	; 31/12/2022
 33183                                  	; ds = cs
 33184 00003338 50                      	push	ax
 33185 00003339 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 33186 0000333B BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 33187                                  					;   possible
 33188                                  	; 31/12/2022
 33189 0000333E FF1E[BF1F]              	call	far [DevXMSAddr]
 33190                                  	;call	far [cs:DevXMSAddr]
 33191                                  					; dx now contains the size of
 33192                                  					; the largest UMB
 33193 00003342 09D2                    	or	dx,dx
 33194 00003344 740B                    	jz	short ua_err
 33195                                  	
 33196 00003346 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 33197                                  
 33198                                  	; 31/12/2022
 33199 00003348 FF1E[BF1F]              	call	far [DevXMSAddr]
 33200                                  	;call	far [cs:DevXMSAddr]
 33201                                  
 33202 0000334C 83F801                  	cmp	ax,1			; Q: was the reqst successful
 33203                                  	;jne	short ua_err		; N: error
 33204                                  	; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 33205 0000334F 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 33206                                  ua_err:
 33207 00003351 F9                      	stc	
 33208                                  
 33209                                  	;clc
 33210                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33211                                  	; 12/12/2022
 33212                                  	; cf=0
 33213                                  	;clc 
 33214                                  ua_done:
 33215 00003352 58                      	pop	ax
 33216 00003353 C3                      	retn
 33217                                  	; 27/07/2023
 33218                                  ;ua_err:
 33219                                  	;stc
 33220                                  	;jmp	short ua_done
 33221                                  
 33222                                  ;---------------------------------------------------------------------------
 33223                                  ;
 33224                                  ; Procedure Name	: umb_insert
 33225                                  ;
 33226                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 33227                                  ;			: BX = seg address of UMB to be linked in
 33228                                  ;			: DX = size of UMB to be linked in paras
 33229                                  ;			; DS = data
 33230                                  ;
 33231                                  ; Outputs		: links the UMB into the arena chain
 33232                                  ;
 33233                                  ; Uses			: AX, CX, ES, DX, BX
 33234                                  ;
 33235                                  ;---------------------------------------------------------------------------
 33236                                  
 33237                                  umb_insert:
 33238 00003354 1E                      	push	ds
 33239                                  
 33240                                  	; 31/12/2022
 33241                                  	; ds = cs
 33242                                  
 33243                                  	;mov	ds,[cs:DevDOSData]
 33244 00003355 8E1E[D61F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 33245                                  	;mov	ds,[8Ch]
 33246 00003359 8E1E8C00                	mov	ds,[UMB_ARENA]		; ds = UMB_HEAD
 33247 0000335D 8CD8                    	mov	ax,ds
 33248 0000335F 8EC0                    	mov	es,ax
 33249                                  ui_next:
 33250 00003361 39D8                    	cmp	ax,bx			; Q: is current block above
 33251                                  					;    new block
 33252 00003363 770F                    	ja	short ui_insert		; Y: insert it
 33253                                  					; Q: is current block the
 33254                                  					;    last
 33255 00003365 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33256 0000336B 745C                    	je	short ui_append		; Y: append new block to chain
 33257                                  					; N: get next block
 33258 0000336D 8ED8                    	mov	ds,ax			; M005
 33259                                  	;call	get_next		; ax = es = next block
 33260 0000336F E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 33261 00003372 EBED                    	jmp	short ui_next
 33262                                  
 33263                                  ui_insert:
 33264 00003374 8CD9                    	mov	cx,ds			; ds = previous arena
 33265 00003376 41                      	inc	cx			; top of previous block
 33266                                  
 33267 00003377 29D9                    	sub	cx,bx
 33268 00003379 F7D9                    	neg	cx			; cx = size of used block
 33269                                  	;mov	byte [0],'M'
 33270 0000337B C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33271                                  	;mov	word [1],8
 33272 00003380 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 33273                                  	;mov	[3],cx
 33274 00003386 890E0300                	mov	[ARENA.SIZE],cx	
 33275                                  	;mov	word [8],4353h ; 'SC'
 33276 0000338A C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 33277                                  
 33278                                  ; prepare the arena at start of new block
 33279                                  
 33280 00003390 8EC3                    	mov	es,bx
 33281 00003392 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33282 00003398 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 33283                                  					; mark as free
 33284 0000339F 83EA02                  	sub	dx,2			; make room for arena at
 33285                                  					; start & end of new block
 33286 000033A2 2689160300              	mov	[es:ARENA.SIZE],dx
 33287                                  
 33288                                  ; prepare arena at end of new block
 33289                                  	
 33290 000033A7 01D3                    	add	bx,dx
 33291 000033A9 43                      	inc	bx
 33292 000033AA 8EC3                    	mov	es,bx			; es=arena at top of new block
 33293 000033AC 43                      	inc	bx			; bx=top of new block
 33294                                  
 33295                                  					; ax contains arena just above
 33296                                  					; this block
 33297 000033AD 29D8                    	sub	ax,bx			; ax = size of used block
 33298                                  	
 33299 000033AF 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 33300 000033B5 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33301 000033BC 26A30300                	mov	[es:ARENA.SIZE],ax	
 33302 000033C0 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 33303                                  
 33304 000033C7 EB47                    	jmp	short ui_done
 33305                                  
 33306                                  ui_append:
 33307                                  					; es = arena of last block	
 33308 000033C9 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 33309 000033CE 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 33310                                  					; going to rsrv on top of this 
 33311                                  					; block for the next arena.
 33312                                  	; 13/05/2019
 33313 000033D4 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 33314                                  
 33315 000033DA 89C1                    	mov	cx,ax			; cx=top of prev block-1
 33316 000033DC 40                      	inc	ax
 33317 000033DD 29D8                    	sub	ax,bx			; ax=top of prev block - 
 33318                                  					;    seg. address of new block
 33319 000033DF F7D8                    	neg	ax
 33320                                  
 33321 000033E1 8EC1                    	mov	es,cx			; es = arena of unused block
 33322                                  
 33323 000033E3 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 33324 000033E9 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33325 000033F0 26A30300                	mov	[es:ARENA.SIZE],ax	
 33326 000033F4 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 33327                                  
 33328                                  ; prepare the arena at start of new block
 33329 000033FB 8EC3                    	mov	es,bx
 33330 000033FD 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 33331 00003403 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 33332                                  					; mark as free
 33333 0000340A 4A                      	dec	dx			; make room for arena
 33334 0000340B 2689160300              	mov	[es:ARENA.SIZE],dx	
 33335                                  ui_done:
 33336                                  uc_done: ; 31/12/2022 ; *!
 33337 00003410 1F                      	pop	ds
 33338                                  	; ds = cs ; 31/12/2022
 33339                                  ;uc_done:	; 18/12/2022
 33340 00003411 C3                      	retn
 33341                                  
 33342                                  ; 13/04/2019 - Retro DOS v4.0
 33343                                  
 33344                                  ;----------------------------------------------------------------------------
 33345                                  ;
 33346                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 33347                                  ;
 33348                                  ;	Coalesce adds the block following the argument to the argument block,
 33349                                  ;	if it's free.  Coalesce is usually used to join free blocks, but
 33350                                  ;	some callers (such as $setblock) use it to join a free block to it's
 33351                                  ;	preceeding allocated block.
 33352                                  ;
 33353                                  ;	EXIT	'C' clear if OK
 33354                                  ;		  (ds) unchanged, this block updated
 33355                                  ;		  (ax) = address of next block, IF not at end
 33356                                  ;		'C' set if arena trashed
 33357                                  ;	USES	cx, di, ds, es
 33358                                  ;
 33359                                  ;----------------------------------------------------------------------------
 33360                                  
 33361                                  umb_coalesce:
 33362                                  	; 31/12/2022
 33363                                  	; ds = cs
 33364 00003412 1E                      	push	ds ; *!
 33365                                  
 33366 00003413 31FF                    	xor	di, di
 33367                                  
 33368                                  	;mov	es,[cs:DevDOSData]
 33369                                  	; 31/12/2022
 33370 00003415 8E06[D61F]              	mov	es,[DevDOSData]
 33371 00003419 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 33372                                  uc_nextfree:
 33373 0000341E 8CC0                    	mov	ax,es
 33374 00003420 8ED8                    	mov	ds,ax
 33375                                  	;cmp	[es:1],di
 33376 00003422 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 33377 00003427 7407                    	je	short uc_again		; Y: try to coalesce with next block
 33378                                  					; N: get next arena
 33379 00003429 E82100                  	call	get_next		; es, ax = next arena
 33380 0000342C 72E2                    	jc	short uc_done	; *!
 33381 0000342E EBEE                    	jmp	short uc_nextfree
 33382                                  uc_again:
 33383 00003430 E81A00                  	call	get_next		; es, ax = next arena
 33384 00003433 72DB                    	jc	short uc_done	; *!
 33385                                  uc_check:
 33386 00003435 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 33387 0000343A 75E2                    	jne	short uc_nextfree	; N: get next free arena
 33388                                  					; Y: coalesce
 33389 0000343C 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 33390 00003441 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 33391                                  	;add	[3],cx
 33392 00003442 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 33393 00003446 268A0D                  	mov     cl,[es:di]              ; move up signature
 33394 00003449 880D                    	mov     [di],cl
 33395 0000344B EBE3                    	jmp     short uc_again		; try again
 33396                                  
 33397                                  	; 18/12/2022
 33398                                  ;uc_done:
 33399                                  	;retn
 33400                                  
 33401                                  ;----------------------------------------------------------------------------
 33402                                  ;
 33403                                  ;**	get_next - Find Next item in Arena
 33404                                  ;
 33405                                  ;	ENTRY	dS - pointer to block head
 33406                                  ;	EXIT	AX,ES - pointers to next head
 33407                                  ;		'C' set if arena damaged
 33408                                  ;
 33409                                  ;----------------------------------------------------------------------------
 33410                                  
 33411                                  	; 01/11/2022
 33412                                  get_next:
 33413 0000344D 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 33414 00003452 740A                    	je	short gn_err
 33415                                  _get_next_:
 33416 00003454 8CD8                    	mov     ax,ds                   ; ax=current block
 33417 00003456 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 33418 0000345A 40                      	inc     ax                      ; remember that header!
 33419 0000345B 8EC0                    	mov	es,ax
 33420                                  	;clc
 33421                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33422                                  	; 11/12/2022
 33423                                  	; cf=0
 33424                                  	;clc
 33425 0000345D C3                      	retn
 33426                                  gn_err:
 33427 0000345E F9                      	stc
 33428                                  	; 11/12/2022	
 33429                                  lfu_err:	 ; cf=1
 33430 0000345F C3                      	retn
 33431                                  
 33432                                  ;----------------------------------------------------------------------------
 33433                                  ;
 33434                                  ; procedure : LinkFirstUMB
 33435                                  ;
 33436                                  ;----------------------------------------------------------------------------
 33437                                  
 33438                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33439                                  	; (SYSINIT:2F81h)
 33440                                  LinkFirstUMB:
 33441                                  	; 31/12/2022
 33442                                  	; ds = cs
 33443 00003460 E8D5FE                  	call	umb_allocate
 33444 00003463 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 33445                                  
 33446                                  ; bx = segment of allocated UMB
 33447                                  ; dx = size of UMB
 33448                                  
 33449                                  	; 31/12/2022
 33450                                  	; ds = cs
 33451                                  
 33452 00003465 CD12                    	int	12h			; ax = size of memory
 33453 00003467 B106                    	mov	cl,6
 33454 00003469 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 33455                                  
 33456 0000346B 89C1                    	mov	cx,ax			; cx = size in paras
 33457 0000346D 29D8                    	sub	ax,bx			; ax = - size of unused block
 33458                                  
 33459 0000346F F7D8                    	neg	ax
 33460                                  
 33461 00003471 83E901                  	sub	cx,1			; cx = first umb_arena
 33462 00003474 8EC1                    	mov	es,cx			; es = first umb_arena
 33463                                  	
 33464 00003476 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33465 0000347C 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33466                                  					
 33467 00003483 26A30300                	mov	[es:ARENA.SIZE],ax	
 33468 00003487 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 33469                                  
 33470                                  ; put in the arena for the first UMB
 33471                                  
 33472 0000348E 8EC3                    	mov	es,bx			; es has first free umb seg
 33473 00003490 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33474 00003496 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 33475                                  					; mark as free 
 33476 0000349D 4A                      	dec	dx			; make room for arena
 33477 0000349E 2689160300              	mov	[es:ARENA.SIZE],dx	
 33478                                  
 33479                                  	;mov	es,[cs:DevDOSData]
 33480                                  	; 31/12/2022
 33481 000034A3 8E06[D61F]              	mov	es,[DevDOSData] ; ds = cs
 33482 000034A7 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 33483 000034AA 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 33484                                  					;  data segment with the arena
 33485                                  					;  just below Top of Mem
 33486                                  
 33487                                  ; we must now scan the arena chain and update the size of the last arena
 33488                                  
 33489 000034AD BF2400                  	mov	di,DOS_ARENA ; 24h
 33490 000034B0 268E05                  	mov	es,[es:di]		; es = start arena
 33491 000034B3 31FF                    	xor	di,di
 33492                                  ;scan_next
 33493                                  ; 09/12/2022
 33494                                  scannext:
 33495 000034B5 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 33496 000034B9 740C                    	je	short got_last
 33497                                  	
 33498 000034BB 8CC0                    	mov	ax,es
 33499 000034BD 2603060300              	add	ax,[es:ARENA.SIZE]
 33500 000034C2 40                      	inc	ax
 33501 000034C3 8EC0                    	mov	es,ax
 33502                                  	;jmp	short scan_next
 33503                                  	; 09/12/2022
 33504 000034C5 EBEE                    	jmp	short scannext
 33505                                  got_last:
 33506 000034C7 26832E030001            	sub	word [es:ARENA.SIZE],1
 33507 000034CD 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33508                                  	;clc
 33509                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33510                                  	; 11/12/2022
 33511                                  	; cf=0
 33512                                  	;clc
 33513 000034D3 C3                      	retn
 33514                                  
 33515                                  ; 11/12/2022
 33516                                  ;;lfu_err:
 33517                                  ;	;stc
 33518                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33519                                  ;	; 11/12/2022
 33520                                  ;	; cf=1
 33521                                  ;	;stc
 33522                                  ;	retn
 33523                                  
 33524                                  ;----------------------------------------------------------------------------
 33525                                  ;
 33526                                  ; procedure : ShrinkUMB
 33527                                  ;
 33528                                  ;	Shrinks the current UMB in use, so that the unused portions
 33529                                  ;	of the UMB is given back to the DOS free mem pool
 33530                                  ;
 33531                                  ;----------------------------------------------------------------------------
 33532                                  
 33533                                  ShrinkUMB:
 33534                                  	; 12/12/2022
 33535                                  	; ds = cs
 33536 000034D4 833E[B91F]00            	cmp	word [DevUMBAddr],0
 33537                                  	;cmp	word [cs:DevUMBAddr],0
 33538 000034D9 741F                    	je	short su_exit
 33539 000034DB 06                      	push	es
 33540                                  	; 01/01/2023
 33541                                  	;push	bx
 33542                                  	; 12/12/2022
 33543                                  	;mov	bx,[cs:DevUMBFree]
 33544                                  	;sub	bx,[cs:DevUMBAddr]
 33545                                  	;mov	es,[cs:DevUMBAddr]
 33546 000034DC 8B1E[BD1F]              	mov	bx,[DevUMBFree]
 33547 000034E0 2B1E[B91F]              	sub	bx,[DevUMBAddr]
 33548 000034E4 8E06[B91F]              	mov	es,[DevUMBAddr]
 33549                                  	
 33550 000034E8 B8004A                  	mov	ax,4A00h
 33551 000034EB CD21                    	int	21h
 33552                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 33553                                  		; ES = segment address of block to change
 33554                                  		; BX = new size in paragraphs
 33555 000034ED 8CC0                    	mov	ax,es
 33556 000034EF 48                      	dec	ax
 33557 000034F0 8EC0                    	mov	es,ax
 33558 000034F2 26C70601000800          	mov	word [es:ARENA.OWNER],8
 33559                                  	; 01/01/2023
 33560                                  	;pop	bx
 33561 000034F9 07                      	pop	es
 33562                                  su_exit:
 33563 000034FA C3                      	retn
 33564                                  
 33565                                  ;----------------------------------------------------------------------------
 33566                                  ;
 33567                                  ; procedure : UnlinkUMB
 33568                                  ;
 33569                                  ;	Unlinks the UMBs from the DOS arena chain
 33570                                  ;
 33571                                  ;----------------------------------------------------------------------------
 33572                                  
 33573                                  UnlinkUMB:
 33574                                  	; 12/12/2022
 33575                                  	; ds = cs
 33576 000034FB 1E                      	push	ds
 33577 000034FC 06                      	push	es
 33578                                  	; 12/12/2022
 33579 000034FD 803E[D51F]00            	cmp	byte [FirstUMBLinked],0
 33580                                  	;cmp	byte [cs:FirstUMBLinked],0
 33581 00003502 7420                    	je	short ulu_x		; nothing to unlink
 33582                                  	; 12/12/2022
 33583 00003504 8E06[D61F]              	mov	es,[DevDOSData]
 33584                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 33585 00003508 268E1E2400              	mov	ds,[es:DOS_ARENA]
 33586 0000350D 268B3E8C00              	mov	di,[es:UMB_ARENA]
 33587                                  ulu_next:
 33588 00003512 E838FF                  	call	get_next
 33589 00003515 720D                    	jc	short ulu_x
 33590 00003517 39C7                    	cmp	di,ax			; is the next one UMB ?
 33591 00003519 7404                    	je	short ulu_found
 33592 0000351B 8ED8                    	mov	ds,ax
 33593 0000351D EBF3                    	jmp	short ulu_next
 33594                                  ulu_found:
 33595                                  	;mov	byte [0],'Z'
 33596 0000351F C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33597                                  ulu_x:
 33598 00003524 07                      	pop	es
 33599 00003525 1F                      	pop	ds
 33600 00003526 C3                      	retn
 33601                                  
 33602                                  ; ----------------------------------------------------------------------
 33603                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 33604                                  ; ----------------------------------------------------------------------
 33605                                  ; 14/04/2019 - Retro DOS v4.0
 33606                                  
 33607                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 33608                                  ;
 33609                                  ; Summary:
 33610                                  ;
 33611                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 33612                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 33613                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 33614                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 33615                                  ;   and/or config.inc for the full list.
 33616                                  ;
 33617                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 33618                                  ;   configuration support. blockname is either MENU, which contains one
 33619                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 33620                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 33621                                  ;   INCLUDE allows the current block to name another block for inclusion
 33622                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 33623                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 33624                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 33625                                  ;
 33626                                  ; Example:
 33627                                  ;
 33628                                  ;   [menu]
 33629                                  ;   menuitem=misc,Miscellaneous
 33630                                  ;   menuitem=network,Network Configuration
 33631                                  ;   menudefault=network,15
 33632                                  ;
 33633                                  ;   [network]
 33634                                  ;   include misc
 33635                                  ;   device=foo
 33636                                  ;
 33637                                  ;   [misc]
 33638                                  ;   device=bar
 33639                                  ;   include alternate
 33640                                  ;
 33641                                  ;   [alternate]
 33642                                  ;   device=tar
 33643                                  ;
 33644                                  ;
 33645                                  ;   When the menu is displayed
 33646                                  ;
 33647                                  ;    1. Miscellaneous
 33648                                  ;    2. Network Configuration
 33649                                  ;
 33650                                  ;   #2 is highlighted as the default option, and will be automatically
 33651                                  ;   selected after 15 seconds. It will invoke the following lines in the
 33652                                  ;   following order:
 33653                                  ;
 33654                                  ;       DEVICE=BAR
 33655                                  ;       DEVICE=TAR
 33656                                  ;       DEVICE=FOO
 33657                                  ;
 33658                                  
 33659                                  ;MULTI_CONFIG equ 1
 33660                                  
 33661                                  ; the following depend on the positions of the various letters in switchlist
 33662                                  
 33663                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 33664                                  
 33665                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 33666                                  flagdrive	equ 00001000b ; 8 
 33667                                  flagcyln	equ 00010000b ; 16
 33668                                  flagseclim	equ 00100000b ; 32
 33669                                  flagheads	equ 01000000b ; 64
 33670                                  flagff		equ 10000000b ; 128
 33671                                  
 33672                                  ;----------------------------------------------------------------------------
 33673                                  ; 19/04/2019 - Retro DOS v4.0
 33674                                  
 33675                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 33676                                  
 33677                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33678                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 33679                                  
 33680 00003527 00                      insert_blank:	db 	0
 33681                                  
 33682                                  ;----------------------------------------------------------------------------
 33683                                  ;
 33684                                  ; procedure : setparms
 33685                                  ;
 33686                                  ; the following set of routines is used to parse the drivparm = command in
 33687                                  ; the config.sys file to change the default drive parameters.
 33688                                  ;
 33689                                  ;----------------------------------------------------------------------------
 33690                                  
 33691                                  setparms:
 33692 00003528 1E                      	push	ds
 33693 00003529 50                      	push	ax
 33694 0000352A 53                      	push	bx
 33695 0000352B 51                      	push	cx
 33696 0000352C 52                      	push	dx
 33697                                  
 33698 0000352D 0E                      	push	cs
 33699 0000352E 1F                      	pop	ds
 33700                                  
 33701 0000352F 31DB                    	xor	bx,bx
 33702 00003531 8A1E[024A]              	mov	bl,[drive]
 33703                                  	; 18/12/2022
 33704 00003535 43                      	inc	bx
 33705                                  	;inc	bl			; get it correct for ioctl call
 33706                                  					; (1=a,2=b...)
 33707 00003536 BA[DA48]                	mov	dx,deviceparameters
 33708                                  	;mov	ah,IOCTL ; 44h
 33709                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 33710                                  	; 04/07/2023
 33711 00003539 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 33712                                  	;mov	ch,RAWIO ; 8
 33713                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 33714                                  	; 04/07/2023
 33715 0000353C B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 33716 0000353F CD21                    	int	21h
 33717                                  
 33718                                  ; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 33719 00003541 8A26[034A]              	mov	ah,[switches]
 33720                                  	;mov	al,[deviceparameters+20]
 33721 00003545 A0[EE48]                	mov	al,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33722 00003548 8A0E[024A]              	mov	cl,[drive]
 33723                                  ;
 33724                                  ;; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33725                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 33726                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 33727                                  ;	; 21/10/2022
 33728                                  ;	;mov	ax,DOSBIODATASEG ; 0070h	
 33729                                  ;	;mov	ds,ax			; set Bios_Data segment
 33730                                  ;
 33731                                  ;	; 27/07/2023
 33732                                  ;	;;test	word [cs:switches],flagec35 ; 4
 33733                                  ;	;test	byte [cs:switches],flagec35
 33734                                  ;	;jz	short not_ec35
 33735                                  ;
 33736                                  ;	; 27/07/2023
 33737                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33738                                  ;	;;test	word [switches],flagec35 ; 4
 33739                                  ;	; 12/12/2022
 33740                                  ;	;test	byte [switches],flagec35 ; 4
 33741                                  ;	;jz	short eot_ok
 33742                                  ;	
 33743                                  	;mov	cl,[cs:drive]		; which drive was this for?
 33744                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33745                                  	;mov	cl,[drive]
 33746                                  	; 27/07/2023
 33747                                  	;mov	ax,DOSBIODATASEG ; 0070h	
 33748                                  	;mov	ds,ax
 33749                                  
 33750 0000354C BA7000                  	mov	dx,DOSBIODATASEG
 33751 0000354F 8EDA                    	mov	ds,dx
 33752                                  
 33753 00003551 F6C404                  	test	ah,flagec35	; test byte [cs:switches],flagec35
 33754 00003554 7408                    	jz	short not_ec35
 33755                                  
 33756                                  	;mov	al,1			; assume drive 0
 33757                                  	;shl	al,cl			; set proper bit depending on drive
 33758                                  	;;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 33759                                  	;or	[ec35_flag],al		; set the bit in the permanent flags
 33760                                  	; 27/07/2023
 33761 00003556 B401                    	mov	ah,1
 33762 00003558 D2E4                    	shl	ah,cl
 33763 0000355A 0826[2905]              	or	[ec35_flag],ah
 33764                                  
 33765                                  ; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 33766                                  ;	MSDOS 6.21 IO.SYS - SYINIT:3EB0h	
 33767                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33768                                  not_ec35:
 33769                                  ;	Now adjust the BIOS's EOT variable if our new drive has more
 33770                                  ;	sectors per track than any old ones.
 33771                                  
 33772                                  	; 27/07/2023
 33773                                  	;;mov	al,[cs:deviceparameters+20]
 33774                                  	;mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33775                                  	
 33776                                  	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 33777 0000355E 3A06[2C01]              	cmp	al,[eot]
 33778 00003562 7603                    	jbe	short eot_ok
 33779 00003564 A2[2C01]                	mov	[eot],al
 33780                                  eot_ok:
 33781 00003567 5A                      	pop	dx			; fix up all the registers
 33782 00003568 59                      	pop	cx
 33783 00003569 5B                      	pop	bx
 33784 0000356A 58                      	pop	ax
 33785 0000356B 1F                      	pop	ds ; 13/05/2019
 33786 0000356C C3                      	retn
 33787                                  
 33788                                  ;----------------------------------------------------------------------------
 33789                                  ;
 33790                                  ; procedure : diddleback
 33791                                  ;
 33792                                  ; replace default values for further drivparm commands
 33793                                  ;
 33794                                  ;----------------------------------------------------------------------------
 33795                                  
 33796                                  diddleback:
 33797 0000356D 1E                      	push	ds
 33798 0000356E 0E                      	push	cs
 33799 0000356F 1F                      	pop	ds
 33800                                  	;mov	word [deviceparameters+4],80
 33801 00003570 C706[DE48]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33802                                  	;mov	byte [deviceparameters+1],2
 33803 00003576 C606[DB48]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 33804                                  	;mov	word [deviceparameters+2],0
 33805 0000357B C706[DC48]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 33806 00003581 C706[034A]0000          	mov	word [switches],0	    ; zero all switches
 33807 00003587 1F                      	pop	ds
 33808 00003588 C3                      	retn
 33809                                  
 33810                                  
 33811                                  ; 03/01/2023
 33812                                  %if 0
 33813                                  
 33814                                  ; 15/04/2019 - Retro DOS v4.0
 33815                                  
 33816                                  ;----------------------------------------------------------------------------
 33817                                  ;
 33818                                  ; procedure : parseline
 33819                                  ;
 33820                                  ; entry point is parseline. al contains the first character in command line.
 33821                                  ;
 33822                                  ;----------------------------------------------------------------------------
 33823                                  
 33824                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33825                                  	; (SYSINIT:3EDFh)
 33826                                  
 33827                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33828                                  	; (SYSINIT:30ACh)
 33829                                  parseline:
 33830                                  	; 03/01/2023
 33831                                  	; ds = cs ; *
 33832                                  
 33833                                  	;push	ds ; *
 33834                                  
 33835                                  	;push	cs ; *
 33836                                  	;pop	ds ; *
 33837                                  
 33838                                  nextswtch:
 33839                                  	cmp	al,cr			; carriage return?
 33840                                  	je	short done_line
 33841                                  	cmp	al,lf			; linefeed?
 33842                                  	je	short put_back		; put it back and done
 33843                                  
 33844                                  ; anything less or equal to a space is ignored.
 33845                                  
 33846                                  	cmp	al,' '                  ; space?
 33847                                  	jbe	short getnext		; skip over space
 33848                                  	cmp	al,'/'
 33849                                  	je	short getparm
 33850                                  	stc				; mark error invalid-character-in-input
 33851                                  	;jmp	short exitpl
 33852                                  	; 03/01/2023
 33853                                  swterr:
 33854                                  	retn
 33855                                  
 33856                                  getparm:
 33857                                  	call	check_switch
 33858                                  	mov	[switches],bx		; save switches read so far
 33859                                  	jc	short swterr
 33860                                  getnext:
 33861                                  	call	getchr
 33862                                  	;jc	short done_line
 33863                                  	;jmp	short nextswtch
 33864                                  	; 03/01/2023
 33865                                  	jnc	short nextswtch
 33866                                  ;swterr:
 33867                                  	;jmp	short exitpl		; exit if error
 33868                                  
 33869                                  done_line:
 33870                                  	; 12/12/2022
 33871                                  	test	byte [switches],flagdrive ; 8
 33872                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33873                                  	jnz	short okay
 33874                                  	stc				; mark error no-drive-specified
 33875                                  	;jmp	short exitpl
 33876                                  	; 03/01/2023
 33877                                  	retn
 33878                                  
 33879                                  okay:
 33880                                  	mov	ax,[switches]
 33881                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33882                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33883                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33884                                  	;clc			    ; everything is fine
 33885                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33886                                  	; 12/12/2022
 33887                                  	; cf=0
 33888                                  	;clc
 33889                                  	;call	setdeviceparameters
 33890                                  	; 03/01/2023
 33891                                  	jmp	setdeviceparameters
 33892                                  ;exitpl:
 33893                                  	; 03/01/2023
 33894                                  	; ds = cs
 33895                                  	;pop	ds ; *
 33896                                  	retn
 33897                                  put_back:
 33898                                  	inc	word [count]		; one more char to scan
 33899                                  	dec	word [chrptr]		; back up over linefeed
 33900                                  	jmp	short done_line
 33901                                  
 33902                                  %endif
 33903                                  
 33904                                  ;----------------------------------------------------------------------------
 33905                                  ;
 33906                                  ; procedure : check_switch
 33907                                  ;
 33908                                  ; processes a switch in the input. it ensures that the switch is valid, and
 33909                                  ; gets the number, if any required, following the switch. the switch and the
 33910                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 33911                                  ; error.
 33912                                  ;
 33913                                  ;----------------------------------------------------------------------------
 33914                                  
 33915                                  check_switch:
 33916 00003589 E805F4                  	call	getchr
 33917                                  	;jc	short err_check
 33918 0000358C 724E                    	jc	short err_chk
 33919 0000358E 24DF                            and     al,0DFh                 ; convert it to upper case
 33920 00003590 3C41                    	cmp	al,'A'
 33921                                  	;jb	short err_check
 33922 00003592 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 33923 00003594 3C5A                    	cmp	al,'Z'
 33924 00003596 7743                    	ja	short err_check
 33925                                  
 33926 00003598 06                      	push	es
 33927                                  
 33928 00003599 0E                      	push	cs
 33929 0000359A 07                      	pop	es
 33930                                  
 33931 0000359B 8A0E[964A]              	mov	cl,[switchlist]		; get number of valid switches
 33932 0000359F B500                    	mov	ch,0
 33933 000035A1 BF[974A]                	mov	di,1+switchlist		; point to string of valid switches
 33934 000035A4 F2AE                    	repne	scasb
 33935                                  
 33936 000035A6 07                      	pop	es
 33937 000035A7 7532                    	jnz	short err_check
 33938                                  
 33939 000035A9 B80100                  	mov	ax,1
 33940 000035AC D3E0                    	shl	ax,cl			; set bit to indicate switch
 33941 000035AE 8B1E[034A]              	mov	bx,[switches]		; get switches so far
 33942 000035B2 09C3                    	or	bx,ax			; save this with other switches
 33943 000035B4 89C1                    	mov	cx,ax
 33944                                  	; 12/12/2022
 33945 000035B6 A8F8                    	test	al,switchnum ; 0F8h
 33946                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 33947 000035B8 741E                    	jz	short done_swtch
 33948                                  
 33949 000035BA E8D4F3                  	call	getchr
 33950 000035BD 721A                    	jc	short err_swtch
 33951                                  
 33952 000035BF 3C3A                    	cmp	al,':'
 33953 000035C1 7516                    	jne	short err_swtch
 33954                                  
 33955 000035C3 E8CBF3                  	call	getchr
 33956 000035C6 53                      	push	bx			; preserve switches
 33957                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33958                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 33959                                  	; 12/12/2022
 33960                                  	; ds = cs
 33961 000035C7 C606[AC02]20            	mov	byte [sepchr],' '
 33962 000035CC E8AD0D                  	call	getnum
 33963                                  	;mov	byte [cs:sepchr],0
 33964                                  	; 12/12/2022
 33965 000035CF C606[AC02]00            	mov	byte [sepchr],0
 33966 000035D4 5B                      	pop	bx			; restore switches
 33967                                  
 33968                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 33969                                  ; not check for carry set here. if there is an error, it will be detected
 33970                                  ; further on (hopefully).
 33971                                  
 33972 000035D5 E80500                  	call	process_num
 33973                                  
 33974                                  done_swtch:
 33975                                  	;clc
 33976                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33977                                  	; 12/12/2022
 33978                                  	; cf=0
 33979                                  	;clc
 33980 000035D8 C3                      	retn
 33981                                  
 33982                                  err_swtch:
 33983 000035D9 31CB                    	xor	bx,cx			; remove this switch from the records
 33984                                  err_check:
 33985 000035DB F9                      	stc
 33986                                  err_chk:
 33987 000035DC C3                      	retn
 33988                                  
 33989                                  ;----------------------------------------------------------------------------
 33990                                  ;
 33991                                  ; procedure : process_num
 33992                                  ;
 33993                                  ; this routine takes the switch just input, and the number following (if any),
 33994                                  ; and sets the value in the appropriate variable. if the number input is zero
 33995                                  ; then it does nothing - it assumes the default value that is present in the
 33996                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 33997                                  ;
 33998                                  ;----------------------------------------------------------------------------
 33999                                  
 34000                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34001                                  	; (SYSINIT:3156h)
 34002                                  process_num:
 34003 000035DD 850E[034A]              	test	[switches],cx		; if this switch has been done before,
 34004 000035E1 752B                    	jnz	short done_ret		; ignore this one.
 34005                                  	; 12/12/2022
 34006 000035E3 F6C108                  	test	cl,flagdrive ; 8
 34007                                  	;test	cx,flagdrive ; 8
 34008 000035E6 7404                    	jz	short try_f
 34009 000035E8 A2[024A]                	mov	byte [drive],al
 34010                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34011                                  	;jmp	short done_ret
 34012                                  	; 12/12/2022
 34013                                  	; cf=0
 34014 000035EB C3                      	retn	; 13/05/2019
 34015                                  try_f:
 34016                                  	; 12/12/2022
 34017 000035EC F6C180                  	test	cl,flagff ; 80h
 34018                                  	;test	cx,flagff ; 80h
 34019 000035EF 7404                    	jz	short try_t
 34020                                  
 34021                                  ; ensure that we do not get bogus form factors that are not supported
 34022                                  
 34023                                  	;mov	[deviceparameters+1],al
 34024 000035F1 A2[DB48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 34025                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34026                                  	;jmp	short done_ret
 34027                                  	; 12/12/2022
 34028                                  	; cf=0
 34029 000035F4 C3                      	retn	; 13/05/2019
 34030                                  try_t:
 34031 000035F5 09C0                    	or	ax,ax
 34032 000035F7 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 34033                                  	; 12/12/2022
 34034 000035F9 F6C110                  	test	cl,flagcyln ; 10h
 34035                                  	;test	cx,flagcyln ; 10h
 34036 000035FC 7404                    	jz	short try_s
 34037                                  
 34038                                  	;mov	[deviceparameters+4],ax
 34039 000035FE A3[DE48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 34040                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34041                                  	;jmp	short done_ret
 34042                                  	; 12/12/2022
 34043                                  	; cf=0
 34044 00003601 C3                      	retn	; 13/05/2019
 34045                                  try_s:
 34046                                  	; 12/12/2022
 34047 00003602 F6C120                  	test	cl,flagseclim ; 20h
 34048                                  	;test	cx,flagseclim ; 20h
 34049 00003605 7404                    	jz	short try_h
 34050 00003607 A3[004A]                	mov	[slim],ax
 34051                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34052                                  	;jmp	short done_ret
 34053                                  	; 12/12/2022
 34054                                  	; cf=0
 34055 0000360A C3                      	retn	; 13/05/2019
 34056                                  
 34057                                  ; must be for number of heads
 34058                                  
 34059                                  try_h:
 34060 0000360B A3[FE49]                	mov	[hlim],ax
 34061                                  done_ret:
 34062                                  	;clc
 34063                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34064                                  	; 12/12/2022
 34065                                  	; cf=0 (test instruction resets cf)
 34066                                  	;clc
 34067 0000360E C3                      	retn
 34068                                  
 34069                                  
 34070                                  ; 03/01/2023 - Retro DOS v4.2
 34071                                  %if 1
 34072                                  
 34073                                  ; 15/04/2019 - Retro DOS v4.0
 34074                                  
 34075                                  ;----------------------------------------------------------------------------
 34076                                  ;
 34077                                  ; procedure : parseline
 34078                                  ;
 34079                                  ; entry point is parseline. al contains the first character in command line.
 34080                                  ;
 34081                                  ;----------------------------------------------------------------------------
 34082                                  
 34083                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34084                                  	; (SYSINIT:3EDFh)
 34085                                  
 34086                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34087                                  	; (SYSINIT:30ACh)
 34088                                  parseline:
 34089                                  	; 03/01/2023
 34090                                  	; ds = cs ; *
 34091                                  
 34092                                  	;push	ds ; *
 34093                                  
 34094                                  	;push	cs ; *
 34095                                  	;pop	ds ; *
 34096                                  
 34097                                  nextswtch:
 34098 0000360F 3C0D                    	cmp	al,cr			; carriage return?
 34099 00003611 741C                    	je	short done_line
 34100 00003613 3C0A                    	cmp	al,lf			; linefeed?
 34101 00003615 7421                    	je	short put_back		; put it back and done
 34102                                  
 34103                                  ; anything less or equal to a space is ignored.
 34104                                  
 34105 00003617 3C20                    	cmp	al,' '                  ; space?
 34106 00003619 760F                    	jbe	short getnext		; skip over space
 34107 0000361B 3C2F                    	cmp	al,'/'
 34108 0000361D 7402                    	je	short getparm
 34109 0000361F F9                      	stc				; mark error invalid-character-in-input
 34110                                  	;jmp	short exitpl
 34111                                  	; 03/01/2023
 34112                                  swterr:
 34113 00003620 C3                      	retn
 34114                                  
 34115                                  getparm:
 34116 00003621 E865FF                  	call	check_switch
 34117 00003624 891E[034A]              	mov	[switches],bx		; save switches read so far
 34118 00003628 72F6                    	jc	short swterr
 34119                                  getnext:
 34120 0000362A E864F3                  	call	getchr
 34121                                  	;jc	short done_line
 34122                                  	;jmp	short nextswtch
 34123                                  	; 03/01/2023
 34124 0000362D 73E0                    	jnc	short nextswtch
 34125                                  ;swterr:
 34126                                  	;jmp	short exitpl		; exit if error
 34127                                  
 34128                                  done_line:
 34129                                  	; 12/12/2022
 34130 0000362F F606[034A]08            	test	byte [switches],flagdrive ; 8
 34131                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 34132 00003634 750C                    	jnz	short okay
 34133 00003636 F9                      	stc				; mark error no-drive-specified
 34134                                  	;jmp	short exitpl
 34135                                  	; 03/01/2023
 34136 00003637 C3                      	retn
 34137                                  
 34138                                  ;exitpl:
 34139                                  	; 03/01/2023
 34140                                  	; ds = cs
 34141                                  	;;pop	ds ; *
 34142                                  	;retn
 34143                                  
 34144                                  put_back:
 34145 00003638 FF06[5403]              	inc	word [count]		; one more char to scan
 34146 0000363C FF0E[5803]              	dec	word [chrptr]		; back up over linefeed
 34147 00003640 EBED                    	jmp	short done_line
 34148                                  
 34149                                  okay:
 34150 00003642 A1[034A]                	mov	ax,[switches]
 34151 00003645 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 34152 00003648 A3[DC48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 34153 0000364B C706[0049]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 34154                                  	;clc			    ; everything is fine
 34155                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34156                                  	; 12/12/2022
 34157                                  	; cf=0
 34158                                  	;clc
 34159                                  	;call	setdeviceparameters
 34160                                  	; 03/01/2023
 34161                                  	;jmp	short setdeviceparameters
 34162                                  
 34163                                  %endif
 34164                                  
 34165                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 34166                                  
 34167                                  ;----------------------------------------------------------------------------
 34168                                  ;
 34169                                  ; procedure : setdeviceparameters
 34170                                  ;
 34171                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 34172                                  ; system based on the form factor. it is assumed that the bpbs for the
 34173                                  ; various form factors are present in the bpbtable. for hard files,
 34174                                  ; the recommended bpb is the same as the bpb on the drive.
 34175                                  ; no attempt is made to preserve registers since we are going to jump to
 34176                                  ; sysinit straight after this routine.
 34177                                  ;
 34178                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 34179                                  ;	  we always return no carry
 34180                                  ;
 34181                                  ;	note:  there is a routine by the same name in msdioctl.asm
 34182                                  ;
 34183                                  ;----------------------------------------------------------------------------
 34184                                  
 34185                                  ; 15/04/2019 - Retro DOS v4.0
 34186                                  
 34187                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34188                                  
 34189                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34190                                  	; (SYSINIT:3FC4h)
 34191                                  
 34192                                  setdeviceparameters:
 34193                                  	; 03/01/2023
 34194                                  	; ds = cs
 34195                                  
 34196 00003651 06                      	push	es
 34197                                  
 34198 00003652 0E                      	push	cs
 34199 00003653 07                      	pop	es
 34200                                  
 34201 00003654 31DB                    	xor	bx,bx
 34202 00003656 8A1E[DB48]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 34203 0000365A 80FB00                  	cmp	bl,DEV_5INCH ; 0
 34204 0000365D 7506                    	jne	short got_80
 34205                                  
 34206 0000365F C706[DE48]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 34207                                  							; 48 tpi=40 cyl
 34208                                  got_80:
 34209 00003665 D1E3                    	shl	bx,1			; get index into bpb table
 34210 00003667 8BB7[824A]              	mov	si,[bpbtable+bx]	; get address of bpb
 34211                                  
 34212                                  	;mov	di,deviceparameters+7	
 34213                                  	; 02/11/2022
 34214 0000366B BF[E148]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 34215 0000366E B91F00                  	mov	cx,A_BPB.size ; 31
 34216 00003671 FC                      	cld
 34217                                  	;repe	movsb
 34218                                  	; 02/11/2022
 34219 00003672 F3A4                    	rep	movsb
 34220                                  
 34221 00003674 07                      	pop	es
 34222                                  
 34223                                  	; 12/12/2022
 34224 00003675 F606[034A]20            	test	byte [switches],flagseclim ; 20h
 34225                                  	;tklhhhtgest	word [switches],flagseclim ; 20h
 34226 0000367A 7406                    	jz	short see_heads
 34227                                  
 34228 0000367C A1[004A]                	mov	ax,[slim]
 34229                                  	;mov	[deviceparameters+20],ax
 34230 0000367F A3[EE48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 34231                                  
 34232                                  see_heads:
 34233                                  	; 12/12/2022
 34234 00003682 F606[034A]40            	test	byte [switches],flagheads ; 40h
 34235                                  	;test	word [switches],flagheads ; 40h
 34236 00003687 7406                    	jz	short heads_not_altered
 34237                                  
 34238 00003689 A1[FE49]                	mov	ax,[hlim]
 34239                                  	;mov	[deviceparameters+22],ax	
 34240 0000368C A3[F048]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 34241                                  
 34242                                  heads_not_altered:
 34243                                  
 34244                                  ; set up correct media descriptor byte and sectors/cluster
 34245                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 34246                                  
 34247                                  	;mov	byte [deviceparameters+9],2
 34248                                  	; 02/11/2022
 34249                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 34250                                  	; 03/01/2023
 34251 0000368F B80200                  	mov	ax,2	
 34252 00003692 A2[E348]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 34253                                  
 34254 00003695 B3F0                    	mov	bl,0F0h			; get default mediabyte
 34255                                  
 34256                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 34257                                  
 34258                                  	;mov	bh,[deviceparameters+17]
 34259                                  	; 02/11/2022
 34260 00003697 8A3E[EB48]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 34261                                  	
 34262                                  	; 03/01/2023
 34263                                  	; ax = 2
 34264 0000369B 3906[F048]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 34265                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 34266 0000369F 773C                    	ja	short got_correct_mediaid ; just use default if heads>2
 34267                                  
 34268 000036A1 7524                    	jne	short only_one_head	; one head, do one head stuff
 34269                                  
 34270                                  ;	two head drives will use the mediadescriptor from the bpb
 34271                                  
 34272 000036A3 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 34273                                  
 34274                                  ;	two sided drives have two special cases to look for. One is
 34275                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 34276                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 34277                                  ;	   one sector/cluster.
 34278                                  
 34279                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 34280                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 34281                                  ;	   type of 2 headed drive is all set.
 34282                                  
 34283 000036A5 833E[EE48]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 34284 000036AA 7509                    	jne	short not_144m
 34285 000036AC 833E[DE48]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 34286 000036B1 7502                    	jne	short not_144m
 34287                                  
 34288                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 34289                                  
 34290 000036B3 EB24                    	jmp	short got_one_secperclus_drive
 34291                                  
 34292                                  ;	check for 320K
 34293                                  
 34294                                  not_144m:
 34295 000036B5 833E[DE48]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 34296 000036BA 7521                    	jne	short got_correct_mediaid
 34297 000036BC 833E[EE48]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 34298 000036C1 751A                    	jne	short got_correct_mediaid
 34299                                  
 34300 000036C3 B3FC                    	mov	bl,0FCh
 34301 000036C5 EB16                    	jmp	short got_correct_mediaid
 34302                                  
 34303                                  only_one_head:
 34304                                  
 34305                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 34306                                  
 34307 000036C7 803E[DB48]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 34308 000036CC 740B                    	je	short got_one_secperclus_drive
 34309                                  
 34310                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 34311                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 34312                                  ;	  besides 8 will be considered 0fch
 34313                                  
 34314 000036CE B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 34315 000036D0 833E[EE48]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 34316                                  	; 12/12/2022
 34317 000036D5 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 34318                                  
 34319 000036D7 B3FE                    	mov	bl,0FEh			; 160K mediaid
 34320                                  
 34321                                  ;	we've either got a one sided drive, or a 1.44M drive
 34322                                  ;	  either case we'll use 1 sector per cluster instead of 2
 34323                                  
 34324                                  got_one_secperclus_drive:
 34325                                  	; 03/01/2023
 34326                                  	; ax = 2
 34327 000036D9 48                      	dec	ax  ; ax = 1
 34328 000036DA A2[E348]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 34329                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 34330                                  
 34331                                  got_correct_mediaid:
 34332 000036DD 881E[EB48]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 34333                                  
 34334                                  ;	 Calculate the correct number of Total Sectors on medium
 34335                                  
 34336 000036E1 A1[DE48]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 34337 000036E4 F726[F048]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 34338 000036E8 F726[EE48]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 34339 000036EC A3[E948]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 34340 000036EF F8                      	clc				; we currently return no errors
 34341                                  
 34342 000036F0 C3                      	retn
 34343                                  
 34344                                  ;	M047 -- end rewritten routine
 34345                                  
 34346                                  ;----------------------------------------------------------------------------
 34347                                  ;
 34348                                  ; procedure : organize
 34349                                  ;
 34350                                  ;----------------------------------------------------------------------------
 34351                                  
 34352                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34353                                  	; (SYSINIT:3234h)
 34354                                  
 34355                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34356                                  	; (SYSINIT:4067h)
 34357                                  
 34358                                  organize:
 34359                                  	; 03/01/2023
 34360                                  	; ds = cs
 34361 000036F1 8B0E[5403]              	mov	cx,[count]
 34362                                  	;mov	cx,[cs:count]
 34363 000036F5 E323                    	jcxz	nochar1
 34364                                  
 34365                                  ;ifndef	MULTI_CONFIG
 34366                                  ;
 34367                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 34368                                  ;;   because we the case of values in SET commands preserved
 34369                                  ;
 34370                                  ;	call	mapcase
 34371                                  ;endif
 34372                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34373                                  	; 03/01/2023 - Retro DOS v4.2
 34374                                  	;call	mapcase
 34375                                  
 34376 000036F7 31F6                    	xor	si,si
 34377 000036F9 89F7                    	mov	di,si
 34378 000036FB 31C0                    	xor	ax,ax
 34379                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 34380                                  	;;mov	byte [cs:com_level],0
 34381                                  	; 12/12/2022
 34382                                  	;mov	[cs:com_level],al ; 0
 34383                                  	; 03/01/2023
 34384                                  	; ds = cs
 34385 000036FD A2[4E03]                	mov	[com_level],al ; 0
 34386                                  org1:
 34387 00003700 E8FA01                  	call	skip_comment
 34388 00003703 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 34389 00003705 E8DB01                  	call	get2			; not a comment string. then get a char.
 34390 00003708 3C0A                    	cmp	al,lf ; 0Ah
 34391 0000370A 7406                    	je	short end_commd_line	; starts with a blank line.
 34392 0000370C 3C20                    	cmp	al,' ' ; 20h
 34393 0000370E 76F0                    	jbe	short org1		; skip leading control characters
 34394 00003710 EB0A                    	jmp	short findit
 34395                                  
 34396                                  end_commd_line:
 34397 00003712 AA                      	stosb				; store line feed char in buffer for the linecount.
 34398                                  	;mov	byte [cs:com_level],0	; reset the command level.
 34399                                  	; 03/01/2023
 34400                                  	; ds = cs
 34401 00003713 C606[4E03]00            	mov	byte [com_level],0
 34402 00003718 EBE6                    	jmp	short org1
 34403                                  
 34404                                  nochar1:
 34405 0000371A F9                      	stc
 34406 0000371B C3                      	retn
 34407                                  
 34408                                  findit:
 34409 0000371C 51                      	push	cx
 34410 0000371D 56                      	push	si
 34411 0000371E 57                      	push	di
 34412 0000371F 89F5                    	mov	bp,si
 34413 00003721 4D                      	dec	bp
 34414 00003722 BE[F747]                        mov     si,comtab		; prepare to search command table
 34415 00003725 B500                    	mov	ch,0
 34416                                  findcom:
 34417 00003727 89EF                    	mov	di,bp
 34418 00003729 8A0C                    	mov	cl,[si]
 34419 0000372B 46                      	inc	si
 34420 0000372C E345                    	jcxz	nocom
 34421                                  
 34422                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34423                                  
 34424                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34425                                  
 34426                                  ;ifdef	MULTI_CONFIG
 34427                                  
 34428                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 34429                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 34430                                  ;   anything in particular)
 34431                                  
 34432 0000372E 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 34433 00003732 7430                    	je	short semicolon
 34434                                  loopcom:
 34435                                  	;mov	al,[es:di]
 34436                                  	;inc	di
 34437                                  	;and	al,~20h ; 0DFh		; force upper case
 34438                                  	;inc	si                      ; compare to byte @es:di
 34439                                  	;cmp	al,[si-1]
 34440                                  	; 28/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 34441 00003734 268A25                  	mov	ah,[es:di]
 34442 00003737 47                      	inc	di
 34443 00003738 80E4DF                  	and	ah,~20h ; 0DFh		
 34444 0000373B AC                      	lodsb			; mov al,[si]
 34445                                  				; inc si
 34446                                  	;cmp	al,ah
 34447                                  	;loope	loopcom
 34448                                  	; 28/07/2023
 34449 0000373C 30C4                    	xor	ah,al		; result: ah = 0 (*) if ah = al
 34450 0000373E E1F4                    	loopz	loopcom
 34451                                  ;else
 34452                                  ;	repe	cmpsb
 34453                                  ;endif
 34454                                  	; 02/11/2022
 34455                                  	; 03/01/2023 - Retro DOS v4.2
 34456                                  	;repe	cmpsb
 34457                                  
 34458                                  	; 28/07/2023
 34459                                  	;lahf
 34460 00003740 01CE                            add     si,cx                   ; bump to next position without affecting flags
 34461                                  	;sahf
 34462 00003742 AC                              lodsb                           ; get indicator letter
 34463                                  	;jnz	short findcom
 34464                                          ; 28/07/2023
 34465 00003743 08E4                    	or	ah,ah			; (*)
 34466 00003745 75E0                    	jnz	short findcom		
 34467                                  	
 34468 00003747 26803D0D                	cmp     byte [es:di],cr		; the next char might be cr,lf
 34469 0000374B 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 34470 0000374D 26803D0A                	cmp	byte [es:di],lf
 34471 00003751 741B                    	je	short gotcom0
 34472                                  
 34473                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34474                                  
 34475                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34476                                  
 34477                                  ;ifdef	MULTI_CONFIG
 34478                                  
 34479                                  ;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 34480                                  
 34481 00003753 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 34482 00003755 7417                    	je	short gotcom0
 34483                                  ;endif
 34484 00003757 50                      	push	ax
 34485 00003758 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 34486                                  
 34487                                  ;ifdef	MULTI_CONFIG
 34488                                  
 34489                                  ;   If keyword is *immediately* followed by a question mark (?), then
 34490                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 34491                                  ;   stored in the CONFIG.SYS memory image.
 34492                                  
 34493 0000375B 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 34494 0000375D 7509                    	jne	short no_query		; no
 34495 0000375F 58                      	pop	ax                      ; yes, so retrieve the original code
 34496                                  	;or	al,80h ; 03/01/2023
 34497 00003760 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 34498 00003762 EB0A                    	jmp	short gotcom0           ;
 34499                                  semicolon:
 34500 00003764 B030                    	mov	al,CONFIG_REM ; '0'
 34501 00003766 EB06                    	jmp	short gotcom0
 34502                                  no_query:
 34503                                  ;endif  ;MULTI_CONFIG
 34504                                  
 34505                                  	; 02/11/2022
 34506                                  	; 03/01/2023 - Retro DOS v4.2
 34507                                  	;push	ax
 34508                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 34509                                  
 34510 00003768 E8450B                  	call	delim
 34511                                  no_delim:
 34512 0000376B 58                      	pop	ax
 34513 0000376C 75B9                    	jnz	short findcom
 34514                                  gotcom0:
 34515 0000376E 5F                      	pop	di
 34516 0000376F 5E                      	pop	si
 34517 00003770 59                      	pop	cx
 34518 00003771 EB0F                    	jmp	short gotcom
 34519                                  nocom:
 34520 00003773 5F                      	pop	di
 34521 00003774 5E                      	pop	si
 34522 00003775 59                      	pop	cx
 34523 00003776 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 34524 00003778 AA                      	stosb				; save indicator char.
 34525                                  _skipline:
 34526 00003779 E86701                  	call	get2
 34527 0000377C 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 34528 0000377E 75F9                            jne     short _skipline
 34529 00003780 EB90                    	jmp	short end_commd_line	; handle next command line
 34530                                  gotcom:
 34531 00003782 AA                              stosb                           ; save indicator char in buffer
 34532                                  
 34533                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34534                                  
 34535                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34536                                  
 34537                                  ;ifdef	MULTI_CONFIG
 34538                                  
 34539                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 34540                                  ;   it screws up the direct comparisons below.
 34541                                  
 34542 00003783 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 34543                                  ;endif
 34544                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 34545                                  	; 03/01/2023
 34546                                  	; ds = cs
 34547 00003785 A2[5203]                	mov	[cmd_indicator],al	; save it for the future use.
 34548                                  
 34549                                  ;ifdef	MULTI_CONFIG
 34550                                  
 34551                                  ;   There is no whitespace/delimiter between the "begin block" character
 34552                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 34553                                  ;   skipping code
 34554                                  
 34555 00003788 3C5B                    	cmp	al,CONFIG_BEGIN
 34556 0000378A 7455                    	je	short org31
 34557 0000378C 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 34558 0000378E 740F                    	je	short no_mapcase
 34559 00003790 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 34560 00003792 740B                    	je	short no_mapcase
 34561 00003794 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 34562 00003796 7407                    	je	short no_mapcase
 34563 00003798 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 34564 0000379A 7403                    	je	short no_mapcase
 34565 0000379C E83A0B                  	call	mapcase			; map case of rest of line to UPPER
 34566                                  no_mapcase:
 34567                                  ;endif
 34568                                  	;; 02/11/2022
 34569                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 34570                                  	;; 03/01/2023
 34571                                  	;; ds = cs
 34572                                  	;mov	[cmd_indicator],al
 34573                                  org2:	
 34574 0000379F E84101                  	call    get2                    ; skip the command name until delimiter
 34575 000037A2 3C0A                            cmp     al,lf 	    ; 0Ah
 34576 000037A4 740F                    	je	short org21
 34577 000037A6 3C0D                    	cmp	al,cr 	    ; 0Dh	
 34578 000037A8 740B                    	je	short org21
 34579                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34580                                  	; 03/01/2023 - Retro DOS v4.2
 34581 000037AA 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 34582 000037AC 7407                    	je	short org21		; T-RICHJ: to be parsed properly.
 34583                                  
 34584 000037AE E8FF0A                  	call	delim
 34585 000037B1 75EC                            jnz	short org2
 34586 000037B3 EB02                    	jmp	short org3
 34587                                  org21:					;if cr or lf then
 34588 000037B5 4E                      	dec	si			; undo si, cx register
 34589 000037B6 41                      	inc	cx			;  and continue
 34590                                  org3:	
 34591                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 34592                                  	;je	short get_cmt_token
 34593                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34594                                  	; 03/01/2023 - Retro DOS v4.2	
 34595                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34596                                  	;je	short org_file
 34597                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 34598                                  	;je	short org_file
 34599                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34600                                  	;je	short org_file
 34601                                  	; 02/11/2022
 34602                                  	; 03/01/2023 - Retro DOS v4.2
 34603                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34604                                  	;;je	short org_file
 34605                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 34606                                  	;je	short org_file
 34607                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 34608                                  	;je	short org_switch
 34609                                  
 34610                                  	; 03/01/2023
 34611                                  	; ds = cs
 34612                                  
 34613 000037B7 803E[5203]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 34614 000037BC 745D                    	je	short get_cmt_token
 34615                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34616                                  	; 03/01/2023 - Retro DOS v4.2	
 34617 000037BE 803E[5203]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34618 000037C3 7430                    	je	short org_file
 34619 000037C5 803E[5203]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 34620 000037CA 7429                    	je	short org_file
 34621 000037CC 803E[5203]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34622 000037D1 7422                    	je	short org_file
 34623                                  	; 02/11/2022
 34624                                  	; 03/01/2023 - Retro DOS v4.2
 34625                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34626                                  	;je	short org_file
 34627 000037D3 803E[5203]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 34628 000037D8 741B                    	je	short org_file
 34629 000037DA 803E[5203]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 34630 000037DF 7403                    	je	short org_switch
 34631                                  	
 34632                                  org31:
 34633 000037E1 E99500                  	jmp	org4
 34634                                  
 34635                                  org_switch:
 34636 000037E4 E81601                  	call	skip_comment
 34637 000037E7 7472                    	jz	short end_commd_line_brdg
 34638                                  
 34639 000037E9 E8F700                  	call	get2
 34640 000037EC E8C90A                  	call	org_delim
 34641 000037EF 74F3                    	jz	short org_switch
 34642                                  
 34643 000037F1 AA                      	stosb
 34644 000037F2 E99300                  	jmp	org5
 34645                                  
 34646                                  org_file:			; get the filename and put 0 at end
 34647 000037F5 E80501                  	call	skip_comment
 34648 000037F8 7464                    	jz	short org_put_zero
 34649                                  
 34650 000037FA E8E600                  	call	get2		; not a comment
 34651 000037FD E8B00A                  	call	delim
 34652 00003800 74F3                    	jz	short org_file	; skip the possible delimiters
 34653                                  
 34654 00003802 AA                      	stosb			; copy the first non delim char found in buffer
 34655                                  
 34656                                  org_copy_file:
 34657 00003803 E8F700                  	call	skip_comment	; comment char in the filename?
 34658 00003806 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 34659                                  
 34660 00003808 E8D800                  	call	get2
 34661 0000380B 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 34662 0000380D 7457                    	je	short end_file_slash ; this will be the special case.
 34663                                  
 34664 0000380F AA                      	stosb			; save the char. in buffer
 34665 00003810 E89D0A                  	call	delim
 34666 00003813 7459                    	jz	short end_copy_file
 34667                                  
 34668 00003815 3C20                    	cmp	al, ' '
 34669 00003817 77EA                    	ja	short org_copy_file ; keep copying
 34670 00003819 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 34671                                  
 34672                                  get_cmt_token:			; get the token. just max. 2 char.
 34673 0000381B E8C500                  	call	get2
 34674 0000381E 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 34675 00003820 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 34676 00003822 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 34677 00003824 74F5                    	je	short get_cmt_token ;  character.)
 34678 00003826 3C3D                    	cmp	al,'='		; = is special in this case.
 34679 00003828 74F1                    	je	short get_cmt_token
 34680 0000382A 3C0D                    	cmp	al,cr
 34681 0000382C 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 34682 0000382E 3C0A                    	cmp	al,lf
 34683 00003830 7422                    	je	short get_cmt_end
 34684                                  
 34685                                  	; 03/01/2023
 34686                                  	; ds = cs
 34687                                  	;mov	[cs:cmmt1],al	; store it
 34688                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 34689 00003832 A2[5003]                	mov	[cmmt1],al	; store it
 34690 00003835 C606[4F03]01            	mov	byte [cmmt],1	; 1 char. so far.
 34691 0000383A E8A600                  	call	get2
 34692 0000383D 3C20                    	cmp	al,' ' ; 20h
 34693 0000383F 7413                    	je	short get_cmt_end
 34694 00003841 3C09                    	cmp	al,tab ; 9
 34695 00003843 740F                    	je	short get_cmt_end
 34696 00003845 3C0D                    	cmp	al,cr  ; 0Dh
 34697 00003847 740B                    	je	short get_cmt_end
 34698 00003849 3C0A                    	cmp	al,lf  ; 0Ah
 34699 0000384B 740E                    	je	short end_commd_line_brdg
 34700                                  
 34701                                  	;mov	[cs:cmmt2],al
 34702                                  	;inc	byte [cs:cmmt]
 34703                                  	; 03/01/2023
 34704 0000384D A2[5103]                	mov	[cmmt2],al
 34705 00003850 FE06[4F03]              	inc	byte [cmmt]
 34706                                  
 34707                                  get_cmt_end:
 34708 00003854 E88C00                  	call	get2
 34709 00003857 3C0A                    	cmp	al,lf
 34710 00003859 75F9                    	jne	short get_cmt_end	; skip it.
 34711                                  end_commd_line_brdg: 
 34712 0000385B E9B4FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 34713                                  
 34714                                  org_put_zero:				; make the filename in front of
 34715 0000385E 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 34716 00003862 47                      	inc	di
 34717 00003863 E9ACFE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 34718                                  
 34719                                  end_file_slash: 			; al = "/" option char.
 34720 00003866 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 34721 0000386A 47                      	inc	di			; and
 34722 0000386B AA                      	stosb				; store "/" after that.
 34723 0000386C EB1A                    	jmp	short org5		; continue with the rest of the line
 34724                                  
 34725                                  end_copy_file:
 34726 0000386E 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 34727 00003873 3C0A                    	cmp	al,lf
 34728 00003875 74E4                    	je	short end_commd_line_brdg
 34729 00003877 EB0F                    	jmp	short org5
 34730                                  
 34731                                  org4:					; org4 skips all delimiters after the command name except for '/'
 34732 00003879 E88100                  	call	skip_comment
 34733 0000387C 74DD                    	jz	short end_commd_line_brdg
 34734                                  
 34735 0000387E E86200                  	call	get2
 34736 00003881 E8340A                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 34737 00003884 74F3                    	jz	short org4
 34738 00003886 EB08                    	jmp	short org51
 34739                                  
 34740                                  org5:					; rest of the line
 34741 00003888 E87200                  	call	skip_comment		; comment?
 34742 0000388B 74CE                    	jz	short end_commd_line_brdg
 34743 0000388D E85300                  	call	get2			; not a comment.
 34744                                  
 34745                                  org51:
 34746 00003890 AA                      	stosb				; copy the character
 34747 00003891 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 34748 00003893 743A                    	je	short at_quote
 34749 00003895 3C20                    	cmp	al,' '  ; 20h
 34750 00003897 77EF                    	ja	short org5
 34751                                  					; M051 - Start
 34752                                  	; 03/01/2023
 34753                                  	; ds = cs
 34754 00003899 803E[5203]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 34755                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 34756 0000389E 7514                    	jne	short not_dh		; N: 
 34757 000038A0 3C0A                    	cmp	al,lf			; Q: is this line feed
 34758 000038A2 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 34759 000038A4 3C0D                    	cmp	al,cr			; Q: is this a cr
 34760 000038A6 75E0                    	jne	short org5		; N: 
 34761 000038A8 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 34762 000038AD AA                      	stosb				; put cr after blank
 34763 000038AE FE06[2735]              	inc	byte [insert_blank]
 34764                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 34765                                  					; inserted
 34766 000038B2 EBD4                    	jmp	short org5
 34767                                  not_dh:					; M051 - End
 34768                                  
 34769 000038B4 3C0A                    	cmp	al,lf			; line feed?
 34770 000038B6 740F                    	je	short org1_brdg		; handles the next command line.
 34771 000038B8 EBCE                    	jmp	short org5		; handles next char in this line.
 34772                                  
 34773                                  org_dhlf:				; M051 - Start
 34774                                  	; 03/01/2023
 34775                                  	; ds = cs
 34776 000038BA 803E[2735]01            	cmp	byte [insert_blank],1
 34777                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 34778 000038BF 7406                    	je	short org1_brdg		; Y:
 34779 000038C1 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 34780 000038C6 AA                      	stosb				; put lf after blank
 34781                                  					; M051 - End
 34782                                  org1_brdg:
 34783 000038C7 C606[2735]00            	mov	byte [insert_blank],0 
 34784                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 34785                                  					; M051: devicehigh
 34786 000038CC E931FE                  	jmp	org1
 34787                                  
 34788                                  at_quote:
 34789 000038CF 803E[4E03]00            	cmp	byte [com_level],0
 34790                                  	;cmp	byte [cs:com_level],0
 34791 000038D4 7407                    	je	short up_level
 34792                                  	;mov	byte [cs:com_level],0	; reset it.
 34793 000038D6 C606[4E03]00            	mov	byte [com_level],0
 34794 000038DB EBAB                    	jmp	short org5
 34795                                  
 34796                                  up_level:
 34797                                  	;inc	byte [cs:com_level]	; set it.
 34798 000038DD FE06[4E03]              	inc	byte [com_level]
 34799 000038E1 EBA5                    	jmp	short org5
 34800                                  
 34801                                  ;----------------------------------------------------------------------------
 34802                                  ;
 34803                                  ; procedure : get2
 34804                                  ;
 34805                                  ;----------------------------------------------------------------------------
 34806                                  
 34807                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34808                                  	; (SYSINIT:33FAh)
 34809                                  
 34810                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34811                                  	; (SYSINIT:4270h)
 34812                                  get2:
 34813 000038E3 E304                    	jcxz	noget
 34814                                  	;
 34815                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34816                                  	;;lods	byte ptr es:[si]
 34817                                  	; 12/12/2022
 34818 000038E5 26                      	es	
 34819 000038E6 AC                      	lodsb
 34820                                  	;mov	al, [es:si]
 34821                                  	;inc	si
 34822                                  	;
 34823 000038E7 49                      	dec	cx
 34824 000038E8 C3                      	retn
 34825                                  noget:
 34826 000038E9 59                      	pop	cx
 34827                                  	; 03/01/2023
 34828                                  	; ds = cs
 34829                                  	;mov	[cs:count],di ; 13/05/2019
 34830                                  	;mov	[cs:org_count],di
 34831 000038EA 893E[5403]              	mov	[count],di
 34832 000038EE 893E[5603]              	mov	[org_count],di
 34833 000038F2 31F6                    	xor	si,si
 34834                                  	;mov	[cs:chrptr],si
 34835 000038F4 8936[5803]              	mov	[chrptr],si
 34836                                  
 34837                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34838                                  
 34839                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34840                                  
 34841                                  ;ifndef MULTI_CONFIG
 34842                                  ;	retn
 34843                                  ;else
 34844                                  
 34845                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 34846                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 34847                                  ;   and the new boot menu stuff...
 34848                                  
 34849 000038F8 89F9                    	mov     cx,di
 34850 000038FA E9E300                  	jmp     menu_check
 34851                                  
 34852                                  ;endif
 34853                                  	; 02/11/2022
 34854                                  	; 03/01/2023 - Retro DOS v4.2
 34855                                  	;retn
 34856                                  
 34857                                  ;----------------------------------------------------------------------------
 34858                                  ;
 34859                                  ; procedure : skip_comment
 34860                                  ;
 34861                                  ;skip the commented string until lf, if current es:si-> a comment string.
 34862                                  ;in) es:si-> string
 34863                                  ;	 cx -> length.
 34864                                  ;out) zero flag not set if not found a comment string.
 34865                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 34866                                  ;	  the line feed character at this moment when return.
 34867                                  ;	  ax register destroyed.
 34868                                  ;	  if found, si, cx register adjusted accordingly.
 34869                                  ;
 34870                                  ;----------------------------------------------------------------------------
 34871                                  
 34872                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34873                                  	; (SYSINIT:428Dh)
 34874                                  
 34875                                  skip_comment:
 34876 000038FD E3EA                    	jcxz	noget		; get out of the organize routine.
 34877                                  
 34878                                  	; 03/01/2023
 34879                                  	; ds = cs	
 34880                                  
 34881 000038FF 803E[4E03]00            	cmp	byte [com_level],0
 34882                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 34883 00003904 752C                    	jne	short no_commt	 ; (not inside quotations)
 34884                                  
 34885 00003906 803E[4F03]01            	cmp	byte [cmmt],1
 34886                                  	;cmp	byte [cs:cmmt],1
 34887 0000390B 7225                    	jb	short no_commt
 34888                                  
 34889 0000390D 268A04                  	mov	al,[es:si]
 34890                                  	
 34891 00003910 3806[5003]              	cmp	[cmmt1],al
 34892                                  	;cmp	[cs:cmmt1],al
 34893 00003914 751C                    	jne	short no_commt
 34894                                  
 34895 00003916 803E[4F03]02            	cmp	byte [cmmt],2
 34896                                  	;cmp	byte [cs:cmmt],2
 34897 0000391B 750A                    	jne	short skip_cmmt
 34898                                  
 34899 0000391D 268A4401                	mov	al,[es:si+1]
 34900                                  	
 34901 00003921 3806[5103]              	cmp	[cmmt2],al
 34902                                  	;cmp	[cs:cmmt2],al
 34903 00003925 750B                    	jne	short no_commt
 34904                                  skip_cmmt:
 34905 00003927 E3C0                    	jcxz	noget		; get out of organize routine.
 34906 00003929 268A04                  	mov	al,[es:si]
 34907 0000392C 46                      	inc	si
 34908 0000392D 49                      	dec	cx
 34909 0000392E 3C0A                    	cmp	al,lf		; line feed?
 34910 00003930 75F5                    	jne	short skip_cmmt
 34911                                  no_commt:
 34912 00003932 C3                      	retn
 34913                                  
 34914                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34915                                  ; (SYSINIT:42C8h)
 34916                                  
 34917                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34918                                  ;%if 0
 34919                                  
 34920                                  ;ifdef	MULTI_CONFIG
 34921                                  
 34922                                  ;----------------------------------------------------------------------------
 34923                                  ;
 34924                                  ;   kbd_read: wait for keystroke
 34925                                  ;
 34926                                  ;   INPUT
 34927                                  ;       DS == CS == sysinitseg
 34928                                  ;
 34929                                  ;   OUTPUT
 34930                                  ;       Carry SET to clean boot, CLEAR otherwise
 34931                                  ;
 34932                                  ;   OTHER REGS USED
 34933                                  ;       All
 34934                                  ;
 34935                                  ;   HISTORY
 34936                                  ;       Created 16-Nov-1992 by JeffPar
 34937                                  ;
 34938                                  ;----------------------------------------------------------------------------
 34939                                  
 34940                                  kbd_read:
 34941 00003933 F606[A647]02                    test    byte [bDisableUI],2
 34942 00003938 7520                            jnz     short kbd_nodelay
 34943                                  
 34944 0000393A 1E                              push    ds              ; the bios timer tick count is incremented
 34945 0000393B 29C0                            sub     ax,ax           ; 18.2 times per second;
 34946 0000393D 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 34947                                  	;mov	dx,[046Ch]	; get initial value
 34948                                  kbd_loop:
 34949 0000393F B401                            mov     ah,1            ;
 34950 00003941 CD16                            int     16h             ; peek the keyboard
 34951 00003943 7514                            jnz	short kbd_loopdone ; something's there, get out
 34952 00003945 B402                            mov     ah,2            ; peek the shift states
 34953 00003947 CD16                            int     16h             ;
 34954 00003949 A803                            test    al,03h          ; either right or left shift key bits set?
 34955 0000394B 750C                            jnz	short kbd_loopdone ; yes
 34956 0000394D A16C04                          mov     ax,[046Ch]	;
 34957                                  	;sub	ax,dx           ; get difference
 34958                                  	; 15/04/2019 - Retro DOS v4.0
 34959 00003950 2E2B06[8403]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 34960                                  
 34961 00003955 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 34962 00003957 72E6                            jb	short kbd_loop	; not yet
 34963                                  kbd_loopdone:
 34964 00003959 1F                              pop     ds              ; delay complete!
 34965                                  kbd_nodelay:
 34966 0000395A 29DB                            sub     bx,bx           ; assume clean boot
 34967 0000395C B402                            mov     ah,2            ; peek the shift states
 34968 0000395E CD16                            int     16h             ;
 34969 00003960 A803                            test    al,03h          ; either right or left shift key bits set?
 34970 00003962 7407                            jz      short kbd_notshift ; no
 34971 00003964 43                              inc     bx              ; yes
 34972 00003965 43                              inc     bx
 34973                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 34974 00003966 800E[AA47]04            	or	byte [bQueryOpt],4
 34975                                  kbd_notshift:                   ;
 34976 0000396B B401                            mov     ah,1            ; peek the keyboard
 34977 0000396D CD16                            int     16h             ;
 34978 0000396F 743E                            jz	short kbd_test	; no key present
 34979 00003971 08C0                            or      al,al           ; is it a function key?
 34980 00003973 753A                            jnz	short kbd_test	; no
 34981                                  
 34982                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 34983 00003975 80FC62                          cmp     ah,62h          ; CTRL F5
 34984 00003978 7405                            je	short kbd_cfg_bypass
 34985                                  	
 34986 0000397A 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 34987 0000397D 750D                            jne	short kbd_notf5	; no
 34988                                  kbd_cfg_bypass:
 34989 0000397F BA[3D4C]                        mov     dx,_$CleanMsg
 34990 00003982 E8F30B                          call    print
 34991                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 34992 00003985 800E[AA47]04            	or	byte [bQueryOpt],4 
 34993 0000398A EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 34994                                  kbd_notf5:
 34995                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 34996 0000398C 80FC65                          cmp     ah,65h          ; CTRL F8
 34997 0000398F 7405                            je	short kbd_cfg_confirm
 34998                                  
 34999 00003991 80FC42                          cmp     ah,42h          ; F8 function key?
 35000 00003994 7523                            jne	short kbd_exit	; no
 35001                                  kbd_cfg_confirm:
 35002 00003996 BA[7B4C]                        mov     dx,_$InterMsg
 35003 00003999 E8DC0B                          call    print           ;
 35004 0000399C B301                            mov     bl,1            ; yes, interactive-boot option enabled
 35005 0000399E 881E[AA47]                      mov     [bQueryOpt],bl  ; change default setting
 35006                                  kbd_eat:                        ;
 35007 000039A2 B400                            mov     ah,0            ;
 35008 000039A4 CD16                            int     16h             ; eat the key we assumed was a signal
 35009 000039A6 C606[B047]FF                    mov	byte [secElapsed],-1
 35010 000039AB 09DB                            or      bx,bx           ;
 35011 000039AD 7405                            jz	short kbd_clean	;
 35012                                  kbd_test:                       ;
 35013 000039AF 80FB02                          cmp     bl,2            ;
 35014 000039B2 7205                            jb	short kbd_exit	;
 35015                                  kbd_clean:                      ;
 35016 000039B4 E88608                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 35017 000039B7 F9                              stc                     ; set carry to indicate abort
 35018 000039B8 C3                              retn			;
 35019                                  kbd_exit:                       ;
 35020 000039B9 F8                              clc                     ; clear carry to indicate success
 35021 000039BA C3                              retn			;
 35022                                  
 35023                                  ;----------------------------------------------------------------------------
 35024                                  ;
 35025                                  ;   set_numlock: set numlock LED
 35026                                  ;
 35027                                  ;   INPUT
 35028                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 35029                                  ;
 35030                                  ;   OUTPUT
 35031                                  ;       None
 35032                                  ;
 35033                                  ;   OTHER REGS USED
 35034                                  ;       None
 35035                                  ;
 35036                                  ;   HISTORY
 35037                                  ;       Created 16-Nov-1992 by JeffPar
 35038                                  ;
 35039                                  ;----------------------------------------------------------------------------
 35040                                  
 35041                                  	; 04/01/2023 - Retro DOS v4.2
 35042                                  
 35043                                  set_numlock:
 35044                                          ; 04/01/2023
 35045                                  	;push	ax
 35046 000039BB 1E                              push    ds
 35047 000039BC 29C0                            sub     ax,ax
 35048 000039BE 8ED8                            mov     ds,ax
 35049 000039C0 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 35050 000039C3 2E3B06[184C]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 35051 000039C8 7507                            jne	short not_off	; no
 35052 000039CA 80261704DF                      and     byte [0417h],~20h ; 0DFh
 35053 000039CF EB0D                            jmp     short set_done
 35054                                  not_off:
 35055 000039D1 2E3B06[164C]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 35056 000039D6 F9                              stc
 35057 000039D7 7505                            jne	short set_done	; no
 35058 000039D9 800E170420                      or      byte [0417h],20h
 35059                                  set_done:
 35060 000039DE 1F                              pop     ds
 35061                                  	; 04/01/2023
 35062                                  	;pop	ax
 35063 000039DF C3                              retn
 35064                                  
 35065                                  ; 16/04/2019 - Retro DOS v4.0
 35066                                  
 35067                                  ;----------------------------------------------------------------------------
 35068                                  ;
 35069                                  ;   menu_check: check for presence of menu (and other) configuration blocks
 35070                                  ;
 35071                                  ;   INPUT
 35072                                  ;       CX == "organized" config.sys memory image length
 35073                                  ;    ES:SI -> "organized" config.sys memory image
 35074                                  ;       DS == CS == sysinitseg
 35075                                  ;
 35076                                  ;   OUTPUT
 35077                                  ;       Same as above; the idea is that menu_check simply transforms
 35078                                  ;       a block-structured config.sys image into a conventional image,
 35079                                  ;       based on the user's block selection and any other boot-time options
 35080                                  ;       the user may have employed...
 35081                                  ;
 35082                                  ;   OTHER REGS USED
 35083                                  ;       All
 35084                                  ;
 35085                                  ;   NOTES
 35086                                  ;       [count] and [org_count] are set to the new config.sys image length
 35087                                  ;
 35088                                  ;   HISTORY
 35089                                  ;       Created 16-Mar-1992 by JeffPar
 35090                                  ;
 35091                                  ;----------------------------------------------------------------------------
 35092                                  
 35093                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 35094                                  	; (SYSINIT:4378h)
 35095                                  
 35096                                  menu_check:
 35097                                  
 35098                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 35099                                  ;   disable clean/interactive boot options
 35100                                  
 35101 000039E0 51                              push    cx              ;
 35102 000039E1 56                              push    si              ;
 35103 000039E2 29DB                            sub     bx,bx           ; remains ZERO until first block
 35104                                  swchk_loop:                     ;
 35105 000039E4 E84C07                          call    get_char        ; get first char of current line
 35106 000039E7 724C                            jc	short swchk_end	; hit eof
 35107 000039E9 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 35108 000039EB 7503                            jne	short swchk_next1 ;
 35109 000039ED 43                              inc     bx              ; remember that we've seen a block
 35110 000039EE EB40                            jmp     short swchk_nextline
 35111                                  swchk_next1:                    ;
 35112 000039F0 3C4E                            cmp     al,CONFIG_NUMLOCK
 35113 000039F2 750E                            jne	short swchk_next2 ;
 35114 000039F4 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 35115 000039F6 7538                            jnz	short swchk_nextline ; before the first block
 35116 000039F8 E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 35117 000039FB 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 35118 00003A00 EB2E                            jmp     short swchk_nextline
 35119                                  swchk_next2:                    ;
 35120 00003A02 3C31                            cmp     al,CONFIG_SWITCHES
 35121 00003A04 752A                            jne	short swchk_nextline ; this line ain't it
 35122                                  swchk_scan:                     ;
 35123 00003A06 E82A07                          call    get_char        ; look for /N or /F
 35124                                  swchk_scan1:                    ;
 35125 00003A09 3C0A                            cmp     al,LF           ; end of line?
 35126 00003A0B 7423                            je	short swchk_nextline ; yes
 35127 00003A0D 3C2F                            cmp     al,'/'          ; switch-char?
 35128 00003A0F 75F5                            jne	short swchk_scan ; no
 35129 00003A11 E81F07                          call    get_char        ;
 35130 00003A14 24DF                            and     al,~20h ; 0DFh	; convert to upper case
 35131 00003A16 3A06[051F]                      cmp     al,[swit_n+1]
 35132 00003A1A 7507                            jne	short swchk_scan2 ; no
 35133 00003A1C 800E[A647]01                    or      byte [bDisableUI],1
 35134 00003A21 EBE3                            jmp	short swchk_scan ; continue looking for switches of interest
 35135                                  swchk_scan2:                    ;
 35136 00003A23 3A06[111F]                      cmp     al,[swit_f+1]
 35137 00003A27 75E0                            jne	short swchk_scan1 ; no
 35138 00003A29 800E[A647]02                    or      byte [bDisableUI],2
 35139 00003A2E EBD6                            jmp     short swchk_scan ; continue looking for switches of interest
 35140                                  swchk_nextline:                 ;
 35141 00003A30 E8DA06                          call    skip_opt_line   ;
 35142 00003A33 EBAF                            jmp     short swchk_loop ;
 35143                                  swchk_end:                      ;
 35144 00003A35 5E                              pop     si              ;
 35145 00003A36 59                              pop     cx              ;
 35146                                  
 35147                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 35148                                  ;   the DisableUI flag is still clear
 35149                                  
 35150 00003A37 F606[A647]01                    test    byte [bDisableUI],1
 35151 00003A3C 7508                            jnz	short menu_search
 35152                                  ;
 35153                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 35154                                  ;   there is anything at all in the keyboard buffer
 35155                                  ;
 35156 00003A3E E8F2FE                          call    kbd_read
 35157 00003A41 7303                            jnc	short menu_search
 35158 00003A43 E9F601                          jmp	menu_abort
 35159                                  
 35160                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 35161                                  
 35162                                  menu_search:
 35163 00003A46 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 35164 00003A48 BF[EB47]                        mov     di,szMenu	;
 35165 00003A4B E81804                          call    find_block      ; find the MENU block
 35166 00003A4E 733D                            jnc	short menu_found ;
 35167 00003A50 C606[E347]00                    mov     byte [szBoot],0
 35168 00003A55 E91402                          jmp	no_selection ; not found
 35169                                  
 35170                                  ;   Process the requested menu color(s)
 35171                                  
 35172                                  menu_color:
 35173 00003A58 51                              push    cx              ;
 35174 00003A59 52                              push    dx              ;
 35175 00003A5A BA0700                          mov     dx,0007h        ; default color setting
 35176 00003A5D E8B206                          call    get_number	; get first number
 35177 00003A60 80E30F                          and     bl,0Fh		; first # is foreground color (for low nibble)
 35178 00003A63 88DD                            mov     ch,bl           ; save it in CH
 35179                                  	; 01/08/2023 - Retro DOS v4.2 IO.SYS (optimization) by Erdogan Tan 
 35180                                  	; (high nibble of dl is 0)
 35181                                  	;and	dl,0F0h         ; (low nibble of dl would be zero)
 35182                                          ;or	dl,bl		; (low nibble of dl is 7) ! 14/08/2023
 35183 00003A65 88DA                    	mov	dl,bl	; 14/08/2023	 	
 35184 00003A67 E84608                          call    delim           ; did we hit a delimiter
 35185 00003A6A 7511                            jne	short check_color ; no, all done
 35186 00003A6C E8A306                          call    get_number	; get next number
 35187 00003A6F 80E30F                          and     bl,0Fh		; second # is background color (for high nibble)
 35188 00003A72 88DE                            mov     dh,bl           ; save it in DH
 35189 00003A74 80E20F                          and     dl,0Fh		;
 35190 00003A77 B104                            mov     cl,4            ;
 35191 00003A79 D2E3                            shl     bl,cl           ;
 35192 00003A7B 08DA                            or      dl,bl           ;
 35193                                  check_color:                    ;
 35194 00003A7D 38F5                            cmp     ch,dh           ; are foreground/background the same?
 35195 00003A7F 7503                            jne	short set_color	; no
 35196 00003A81 80F208                          xor     dl,08h          ; yes, so modify the fgnd intensity
 35197                                  set_color:
 35198 00003A84 8816[A147]                      mov     [bMenuColor],dl ;
 35199 00003A88 5A                              pop     dx              ;
 35200 00003A89 59                              pop     cx              ;
 35201 00003A8A E9AB00                          jmp	menu_nextitem
 35202                                  
 35203                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 35204                                  ;   above is there simply to alleviate short jump problems)
 35205                                  
 35206                                  menu_found:
 35207 00003A8D C606[AB47]01                    mov     byte [bDefBlock],1
 35208 00003A92 C706[AD47]0000                  mov     word [offDefBlock],0
 35209 00003A98 C606[AF47]FF                    mov     byte [secTimeOut],-1
 35210 00003A9D 8026[AA47]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 35211                                  
 35212 00003AA2 E86806                          call    skip_opt_line   ; skip to next line
 35213 00003AA5 29D2                            sub     dx,dx           ; initialize total block count (0 => none yet)
 35214                                  
 35215                                  ;   Process the menu block now
 35216                                  
 35217                                  menu_process:
 35218 00003AA7 E88906                          call    get_char        ; get first char of current line
 35219 00003AAA 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 35220 00003AAC 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35221 00003AAE 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 35222 00003AB0 7428                            je	short to_menu_getdefault
 35223 00003AB2 3C4F                            cmp     al,CONFIG_SUBMENU
 35224 00003AB4 744D                            je	short menu_item	; go process sub-menu
 35225 00003AB6 3C45                            cmp     al,CONFIG_MENUITEM
 35226 00003AB8 7449                            je	short menu_item	; go process menu item
 35227 00003ABA 3C41                            cmp     al,CONFIG_MENUDEFAULT
 35228 00003ABC 741E                            je	short menu_default ; go process menu default
 35229 00003ABE 3C52                            cmp     al,CONFIG_MENUCOLOR
 35230 00003AC0 7496                            je	short menu_color ; go process menu color
 35231 00003AC2 3C4E                            cmp     al,CONFIG_NUMLOCK
 35232 00003AC4 740F                            je	short menu_numlock ;
 35233 00003AC6 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 35234 00003AC8 746E                            je	short menu_nextitem ;
 35235 00003ACA E8D307                          call    any_delim       ; allow blank lines and such
 35236 00003ACD 7469                            je	short menu_nextitem ;
 35237 00003ACF F9                              stc                     ;
 35238 00003AD0 E83607                          call    print_error     ; non-MENU command!
 35239 00003AD3 EB63                            jmp     short menu_nextitem
 35240                                  menu_numlock:
 35241 00003AD5 E8E3FE                          call    set_numlock
 35242 00003AD8 EB5E                            jmp     short menu_nextitem
 35243                                  to_menu_getdefault:
 35244 00003ADA EB62                            jmp     short menu_getdefault
 35245                                  
 35246                                  ;   Save the offset of the default block name, we'll need it later
 35247                                  
 35248                                  menu_default:
 35249 00003ADC 8936[AD47]                      mov     [offDefBlock],si; save address of default block name
 35250 00003AE0 803E[B047]00                    cmp     byte [secElapsed],0
 35251 00003AE5 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 35252 00003AE7 E8F905                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 35253 00003AEA 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 35254 00003AEC E80A06                          call    skip_delim      ; something is typed
 35255 00003AEF 7247                            jc	short menu_nextitem ;
 35256 00003AF1 89DE                            mov     si,bx           ;
 35257 00003AF3 E81C06                          call    get_number      ; get number (of seconds for timeout)
 35258 00003AF6 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 35259                                  	;jb	short timeout_ok ; (besides, 99 is the largest # my simple
 35260 00003AF9 7602                            jna	short timeout_ok ; 01/08/2023
 35261 00003AFB B35A                    	mov     bl,90           ;  display function can handle)
 35262                                  timeout_ok:                     ;
 35263 00003AFD 881E[AF47]                      mov     [secTimeOut],bl ;
 35264                                  timeout_skip:
 35265 00003B01 EB35                            jmp     short menu_nextitem
 35266                                  
 35267                                  ;   Verify that this is a valid menu item by searching for the named block
 35268                                  
 35269                                  menu_item:
 35270                                  	;cmp	dl,9	; 04/01/2023
 35271 00003B03 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 35272 00003B06 7330                            jae	short menu_nextitem ;
 35273 00003B08 89F7                            mov     di,si           ; DS:DI -> block name to search for
 35274 00003B0A E84003                          call    srch_block      ;
 35275 00003B0D 7406                            je	short menu_itemfound ;
 35276 00003B0F F9                              stc                     ;
 35277 00003B10 E8F606                          call    print_error     ; print error and pause
 35278 00003B13 EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 35279                                  
 35280                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 35281                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 35282                                  ;   and CX are unmodified
 35283                                  
 35284                                  menu_itemfound:
 35285 00003B15 42                              inc     dx              ; otherwise, increment total block count
 35286 00003B16 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 35287 00003B18 8887[B147]                      mov	[abBlockType+bx],al
 35288 00003B1C 01DB                            add     bx,bx           ; of recorded block names and descriptions
 35289                                  
 35290                                  ;   There should be a description immediately following the block name on
 35291                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 35292                                  ;   description...
 35293                                  
 35294 00003B1E 89B7[BB47]                      mov     [aoffBlockName+bx],si
 35295 00003B22 89B7[CF47]                      mov     [aoffBlockDesc+bx],si
 35296 00003B26 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 35297 00003B28 E8B805                          call    skip_token      ;
 35298 00003B2B 720B                            jc	short menu_nextitem ; hit eol/eof
 35299 00003B2D E8C905                          call    skip_delim      ;
 35300 00003B30 7206                            jc	short menu_nextitem ; hit eol/eof
 35301 00003B32 87DF                            xchg    bx,di           ;
 35302 00003B34 89BF[CF47]                      mov     [aoffBlockDesc+bx],di
 35303                                  
 35304                                  menu_nextitem:
 35305 00003B38 E8D205                          call    skip_opt_line   ;
 35306 00003B3B E969FF                          jmp     menu_process    ; go back for more lines
 35307                                  
 35308                                  ;   Display menu items now, after determining which one is default
 35309                                  
 35310                                  menu_getdefault:
 35311 00003B3E 08D2                            or      dl,dl           ; where there any valid blocks at all?
 35312 00003B40 7505                            jnz	short menu_valid ; yes
 35313 00003B42 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 35314 00003B44 E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 35315                                  menu_valid:
 35316 00003B47 29DB                            sub     bx,bx           ;
 35317 00003B49 8816[AC47]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 35318 00003B4D 8B3E[AD47]                      mov     di,[offDefBlock];
 35319 00003B51 09FF                            or      di,di           ; does a default block exist?
 35320 00003B53 741C                            jz	short menu_nodefault ; no
 35321 00003B55 43                              inc     bx              ; yes, walk name table, looking for default
 35322                                  menu_chkdefault:
 35323 00003B56 53                              push    bx              ;
 35324 00003B57 01DB                            add     bx,bx           ;
 35325 00003B59 8BB7[BB47]                      mov     si,[aoffBlockName+bx]
 35326 00003B5D B98000                          mov     cx,128          ; arbitrary maximum length of a name
 35327 00003B60 1E                              push    ds              ;
 35328 00003B61 06                              push    es              ;
 35329 00003B62 1F                              pop     ds              ;
 35330 00003B63 E82703                          call    comp_names      ; is this block the same as the default?
 35331 00003B66 1F                              pop     ds              ;
 35332 00003B67 5B                              pop     bx              ;
 35333 00003B68 7409                            je	short menu_setdefault ; yes
 35334 00003B6A 43                              inc     bx              ;
 35335 00003B6B 3A1E[AC47]                      cmp     bl,[bMaxBlock]  ; all done searching?
 35336 00003B6F 76E5                            jbe	short menu_chkdefault ; not yet
 35337                                  menu_nodefault:
 35338 00003B71 B301                            mov     bl,1            ; if no default, force default to #1
 35339                                  menu_setdefault:
 35340 00003B73 881E[AB47]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 35341                                  
 35342                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 35343                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 35344                                  ;   supposed to skip menu display and run with the specified default block;
 35345                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 35346                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 35347                                  ;   with no timeout)
 35348                                  
 35349 00003B77 803E[AF47]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 35350 00003B7C 750A                            jne	short menu_display ; no
 35351 00003B7E F606[AA47]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 35352 00003B83 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 35353 00003B85 E9C700                          jmp     not_topmenu	;
 35354                                  
 35355                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 35356                                  
 35357                                  menu_display:
 35358 00003B88 B40F                            mov     ah,0Fh          ; get current video mode
 35359 00003B8A CD10                            int     10h             ;
 35360 00003B8C B400                            mov     ah,00h          ; just re-select that mode
 35361 00003B8E CD10                            int     10h             ;
 35362 00003B90 06                              push    es              ;
 35363 00003B91 B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 35364 00003B94 8EC0                            mov     es,ax           ; and save the current (default) video page
 35365 00003B96 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 35366 00003B9A A3[A847]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 35367 00003B9D 26A06200                        mov     al,[es:0062h]   ;
 35368 00003BA1 A2[A747]                        mov     [bCRTPage],al   ;
 35369 00003BA4 A1[A247]                        mov     ax,[bMenuPage]	; select new page for menu
 35370 00003BA7 CD10                            int     10h             ;
 35371 00003BA9 B80006                          mov     ax,0600h        ; clear entire screen
 35372 00003BAC 8A3E[A147]                      mov     bh,[bMenuColor] ; using this color
 35373 00003BB0 29C9                            sub     cx,cx           ; upper left row/col
 35374                                          ;mov	dl,[es:CRT_Cols] 
 35375 00003BB2 268A164A00                      mov	dl,[es:4Ah]
 35376 00003BB7 FECA                    	dec     dl              ;
 35377                                          ;mov	dh,[es:CRT_Rows];
 35378 00003BB9 268A368400                      mov	dh,[es:84h]
 35379 00003BBE 08F6                    	or      dh,dh           ; # of rows valid?
 35380 00003BC0 7504                            jnz	short menu_clear ; hopefully
 35381 00003BC2 8A36[A547]                      mov     dh,[bLastRow]   ; no, use a default
 35382                                  menu_clear:
 35383 00003BC6 CD10                            int     10h             ; clear the screen using the req. attribute
 35384 00003BC8 07                              pop     es              ;
 35385 00003BC9 8836[A547]                      mov     [bLastRow],dh   ; save DH
 35386 00003BCD BA[B84C]                        mov     dx,_$MenuHeader
 35387 00003BD0 E8A509                          call    print           ; cursor now on row 3 (numbered from 0)
 35388                                  
 35389 00003BD3 F606[A647]01                    test    byte [bDisableUI],1
 35390 00003BD8 751F                            jnz     short menu_nostatus
 35391 00003BDA 8A3E[A247]                      mov     bh,[bMenuPage]  ;
 35392 00003BDE 8A36[A547]                      mov     dh,[bLastRow]   ; restore DH
 35393 00003BE2 B200                            mov     dl,0            ; print the status line on row DH, col 0,
 35394 00003BE4 B402                            mov     ah,02h          ; now that we can trash the cursor position
 35395 00003BE6 CD10                            int     10h             ;
 35396 00003BE8 BA[044D]                        mov     dx,_$StatusLine
 35397 00003BEB E88A09                          call    print           ;
 35398 00003BEE B403                            mov     ah,3            ; get cursor position
 35399 00003BF0 CD10                            int     10h             ;
 35400 00003BF2 80EA02                          sub     dl,2            ;
 35401 00003BF5 8816[A447]                      mov     [bLastCol],dl   ; save column where status char will go
 35402                                  
 35403                                  menu_nostatus:
 35404 00003BF9 BB0100                          mov     bx,1            ; now prepare to display all the menu items
 35405                                  menu_disploop:
 35406 00003BFC E8BD02                          call    print_item	; print item #BL
 35407 00003BFF 43                              inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 35408 00003C00 3A1E[AC47]                      cmp     bl,[bMaxBlock]  ; all done?
 35409 00003C04 76F6                            jbe	short menu_disploop ; not yet
 35410                                  
 35411                                  ;   Set cursor position to just below the menu items
 35412                                  
 35413 00003C06 B200                            mov     dl,0            ; select column
 35414 00003C08 88DE                            mov     dh,bl           ;
 35415 00003C0A 80C604                          add     dh,4            ; select row below menu
 35416 00003C0D 8A3E[A247]                      mov     bh,[bMenuPage]  ;
 35417 00003C11 B402                            mov     ah,02h          ; set cursor position beneath the block list
 35418 00003C13 CD10                            int     10h             ;
 35419                                  
 35420 00003C15 BA[F14C]                        mov     dx,_$MenuPrmpt
 35421 00003C18 E85D09                          call    print           ;
 35422 00003C1B E83603                          call    select_item     ; make a selection, return # in BX
 35423 00003C1E BA[C44A]                        mov     dx,crlfm	
 35424 00003C21 E85409                          call    print           ;
 35425 00003C24 FF36[A647]                      push    word [bDisableUI]
 35426 00003C28 800E[A647]01                    or      byte [bDisableUI],1
 35427 00003C2D E87404                          call    show_status     ; clear the status line now
 35428 00003C30 8F06[A647]                      pop     word [bDisableUI]
 35429                                  
 35430                                  ;   Now begins the "re-organization" process...
 35431                                  
 35432                                  menu_autoselect:
 35433 00003C34 83FBFF                          cmp     bx,-1           ; clean boot requested?
 35434 00003C37 7508                            jne	short normal_boot ; no
 35435 00003C39 E80106                          call    disable_autoexec; basically, add a /D to the command.com line
 35436                                  menu_abort:
 35437 00003C3C 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 35438 00003C3E E9EE00                          jmp	menu_exit	;
 35439                                  
 35440                                  normal_boot:
 35441 00003C41 83FBFE                          cmp     bx,-2           ; back to top-level menu?
 35442 00003C44 7509                            jne	short not_topmenu ; no
 35443 00003C46 8B0E[5403]                      mov     cx,[count]      ; yes, start all over
 35444 00003C4A 29F6                            sub     si,si           ;
 35445 00003C4C E9F7FD                          jmp     menu_search
 35446                                  
 35447                                  not_topmenu:
 35448 00003C4F 80BF[B147]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 35449 00003C54 7510                            jne	short not_submenu
 35450 00003C56 01DB                            add     bx,bx           ;
 35451 00003C58 8BBF[BB47]                      mov     di,[aoffBlockName+bx]
 35452 00003C5C E8EE01                          call    srch_block      ; THIS CANNOT FAIL!
 35453 00003C5F 89FE                            mov     si,di           ;
 35454 00003C61 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 35455 00003C63 E927FE                          jmp     menu_found
 35456                                  
 35457                                  not_submenu:
 35458 00003C66 01DB                            add     bx,bx           ; get BX -> name of selected block
 35459 00003C68 8B9F[BB47]                      mov     bx,[aoffBlockName+bx]
 35460                                  
 35461                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 35462                                  ;   the offset relative to ES of the block name to be processed (along with
 35463                                  ;   all the "common" lines of course)
 35464                                  
 35465                                  no_selection:
 35466 00003C6C 891E[AD47]                      mov     [offDefBlock],bx; save selection
 35467 00003C70 8B0E[5403]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 35468 00003C74 29F6                            sub     si,si           ;
 35469 00003C76 1E                              push    ds              ;
 35470 00003C77 8E1E[DB14]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 35471 00003C7B 29FF                            sub     di,di           ;
 35472                                  
 35473                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 35474                                  ;
 35475                                  ;   Work our way through the config.sys image again, this time copying
 35476                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 35477                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 35478                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 35479                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 35480                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 35481                                  ;
 35482                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 35483                                  ;   stack we're running on, then we should check it inside copy_block
 35484                                  
 35485                                  copyblock_loop:
 35486 00003C7D 53                              push    bx              ; save selected block name
 35487 00003C7E E83C01                          call    copy_block      ; process (named or common) block
 35488 00003C81 5B                              pop     bx              ;
 35489 00003C82 723C                            jc	short move_config ; hit eof
 35490                                  
 35491                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 35492                                  
 35493                                  copyblock_begin:
 35494 00003C84 50                              push    ax              ;
 35495 00003C85 51                              push    cx              ;
 35496 00003C86 56                              push    si              ;
 35497 00003C87 57                              push    di              ; always do "common" blocks
 35498 00003C88 BF[F047]                        mov     di,szCommon
 35499 00003C8B 1E                              push    ds              ;
 35500 00003C8C 0E                              push    cs              ;
 35501 00003C8D 1F                              pop     ds              ;
 35502 00003C8E E8FC01                          call    comp_names      ;
 35503 00003C91 1F                              pop     ds              ;
 35504 00003C92 5F                              pop     di              ;
 35505 00003C93 5E                              pop     si              ;
 35506 00003C94 59                              pop     cx              ;
 35507 00003C95 58                              pop     ax              ;
 35508 00003C96 740F                            je	short copyblock_check
 35509 00003C98 09DB                            or      bx,bx           ; is there a block name to check?
 35510 00003C9A 7414                            jz	short copyblock_skip ; no
 35511 00003C9C 57                              push    di              ;
 35512 00003C9D 89DF                            mov     di,bx           ; check block against given block name
 35513 00003C9F 1E                              push    ds              ;
 35514 00003CA0 06                              push    es              ;
 35515 00003CA1 1F                              pop     ds              ;
 35516 00003CA2 E8E801                          call    comp_names      ; is this the block we really want to do?
 35517 00003CA5 1F                              pop     ds              ;
 35518 00003CA6 5F                              pop     di              ;
 35519                                  copyblock_check:
 35520 00003CA7 7217                            jc	short move_config ; hit eof
 35521 00003CA9 7505                            jne	short copyblock_skip  ;
 35522 00003CAB E85F04                          call    skip_opt_line   ;
 35523 00003CAE EBCD                            jmp	short copyblock_loop 
 35524                                  
 35525                                  copyblock_skip:                 ;
 35526 00003CB0 E85A04                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 35527 00003CB3 E87D04                          call    get_char        ;
 35528 00003CB6 7208                            jc	short move_config ; hit eof
 35529 00003CB8 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35530 00003CBA 3C5B                            cmp     al,CONFIG_BEGIN ;
 35531 00003CBC 74C6                            je	short copyblock_begin
 35532 00003CBE EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 35533                                  ;
 35534                                  ;   To create as little risk to the rest of SysInit as little as possible,
 35535                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 35536                                  ;   copy the new config.sys image to "confbot"
 35537                                  ;
 35538                                  move_config:
 35539 00003CC0 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 35540 00003CC2 51                              push    cx              ;
 35541                                  ;
 35542                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 35543                                  ;   since the configuration name only currently exists in the "confbot" area
 35544                                  ;
 35545                                   	;mov	cx,7
 35546 00003CC3 B90700                  	mov     cx,szMenu-szBoot-1
 35547 00003CC6 BE[E347]                        mov     si,szBoot	; first copy the CONFIG= part
 35548 00003CC9 47                              inc     di              ; skip a byte, in case absolutely nothing
 35549                                                                  ; was copied to the workspace, because we always
 35550                                                                  ; zero the first byte of the workspace (below)
 35551                                  copy_boot: 
 35552                                  	;lods    byte ptr cs:[si];
 35553 00003CCA 2E                              cs
 35554 00003CCB AC                      	lodsb
 35555 00003CCC 8805                    	mov     [di],al         ;
 35556 00003CCE 47                              inc     di              ;
 35557 00003CCF E2F9                            loop    copy_boot       ;
 35558                                  
 35559 00003CD1 06                              push    es              ; then copy the configuration name
 35560                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 35561                                  	; 04/01/2023
 35562 00003CD2 B179                    	mov	cl,128-7
 35563 00003CD4 2E8B36[AD47]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 35564 00003CD9 09F6                            or      si,si           ; valid?
 35565 00003CDB 7505                            jnz	short l1	; yes
 35566 00003CDD 0E                              push    cs              ;
 35567 00003CDE 07                              pop     es              ;
 35568 00003CDF BE[F047]                        mov     si,szCommon
 35569 00003CE2 268A04                  l1:     mov     al,[es:si]      ;
 35570 00003CE5 E8B805                          call    any_delim       ;
 35571 00003CE8 7406                            je	short l2	;
 35572 00003CEA 8805                            mov     [di],al         ;
 35573 00003CEC 46                              inc     si              ;
 35574 00003CED 47                              inc     di              ;
 35575 00003CEE E2F2                            loop    l1              ;
 35576 00003CF0 C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 35577 00003CF3 07                              pop     es              ;
 35578                                  
 35579                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 35580                                  
 35581 00003CF4 29FF                            sub     di,di           ;
 35582 00003CF6 2E893E[D914]                    mov     [cs:config_envlen],di
 35583 00003CFB 29F6                            sub     si,si           ;
 35584 00003CFD 59                              pop     cx              ; recover the size of "config_wrkseg"
 35585                                  
 35586 00003CFE 51                              push    cx              ;
 35587 00003CFF F3A4                            rep     movsb           ; moved!
 35588 00003D01 59                              pop     cx              ;
 35589 00003D02 8CD8                            mov     ax,ds           ;
 35590 00003D04 1F                              pop     ds              ;
 35591                                  
 35592                                  ;   Now that the config_wrkseg is available once again, we shall
 35593                                  ;   use it to create an environment. The first thing to go in will be
 35594                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 35595                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 35596                                  ;   is empty.
 35597                                  
 35598 00003D05 06                              push    es              ;
 35599 00003D06 8EC0                            mov     es,ax           ;
 35600 00003D08 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 35601 00003D09 26C606000000                    mov     byte [es:0],0	; empty the environment block
 35602 00003D0F E82800                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 35603 00003D12 07                              pop     es
 35604                                  
 35605                                  ;   Before returning, restore the default video page setting but do NOT
 35606                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 35607                                  ;   displayed on a different page, then it's because we don't want to see
 35608                                  ;   all the device driver/TSR goop (which goes to the default page)
 35609                                  
 35610                                  menu_done:
 35611 00003D13 803E[A247]00                    cmp     byte [bMenuPage],0
 35612 00003D18 7415                            je	short menu_exit	;
 35613 00003D1A 06                              push    es              ;
 35614 00003D1B B84000                          mov     ax,40h          ;
 35615 00003D1E 8EC0                            mov     es,ax           ;
 35616 00003D20 A1[A847]                        mov     ax,[wCRTStart]  ;
 35617 00003D23 26A34E00                        mov     [es:004Eh],ax   ;
 35618 00003D27 A0[A747]                        mov     al,[bCRTPage]   ;
 35619 00003D2A 26A26200                        mov     [es:0062h],al   ;
 35620 00003D2E 07                              pop     es              ;
 35621                                  menu_exit:
 35622 00003D2F 890E[5403]                      mov     [count],cx      ; set new counts
 35623 00003D33 890E[5603]                      mov     [org_count],cx  ;
 35624 00003D37 29F6                            sub     si,si           ; always return ES:SI pointing to config.sys
 35625 00003D39 C3                              retn
 35626                                  
 35627                                  ;----------------------------------------------------------------------------
 35628                                  ;
 35629                                  ;   copy_envvar: copy the envvar at ES:SI to "config_wrkseg"
 35630                                  ;
 35631                                  ;   INPUT
 35632                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 35633                                  ;
 35634                                  ;   OUTPUT
 35635                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 35636                                  ;       carry set if error (eg, missing =); clear otherwise
 35637                                  ;
 35638                                  ;   OTHER REGS USED
 35639                                  ;       None
 35640                                  ;
 35641                                  ;   NOTES
 35642                                  ;       None
 35643                                  ;
 35644                                  ;   HISTORY
 35645                                  ;       Created 29-Mar-1992 by JeffPar
 35646                                  ;
 35647                                  ;----------------------------------------------------------------------------
 35648                                  
 35649                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 35650                                  	; (SYSINIT:46D4h)
 35651                                  
 35652                                  copy_envvar:
 35653 00003D3A 51                              push    cx              ;
 35654 00003D3B 56                              push    si              ;
 35655 00003D3C 1E                              push    ds              ;
 35656 00003D3D 06                              push    es              ;
 35657 00003D3E 06                              push    es              ;
 35658 00003D3F 8E06[DB14]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 35659 00003D43 1F                              pop     ds                 ; DS:SI to point to envvar
 35660                                  
 35661                                  ;   Have to calculate the length of the variable name (and if we hit
 35662                                  ;   the end of the line before we hit '=', then it's curtains for this
 35663                                  ;   config.sys line)
 35664                                  ;
 35665                                  ;   The check for NULL is important because copy_envvar is also used to copy
 35666                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 35667                                  ;   menu block existed (in order to prevent the creation of an environment)
 35668                                  
 35669 00003D44 29C9                            sub     cx,cx           ;
 35670                                  copy_varlen:                    ;
 35671 00003D46 AC                              lodsb                   ;
 35672 00003D47 08C0                            or      al,al           ; NULL?
 35673 00003D49 F9                              stc                     ;
 35674 00003D4A 746C                            jz	short copy_envexit ; yes, abort
 35675 00003D4C 3C0D                            cmp     al,cr          ;
 35676 00003D4E F9                              stc                     ;
 35677 00003D4F 7467                            je	short copy_envexit
 35678 00003D51 3C0A                            cmp     al,lf          ;
 35679 00003D53 F9                              stc                     ;
 35680 00003D54 7462                            je	short copy_envexit
 35681 00003D56 41                              inc     cx              ;
 35682 00003D57 3C3D                            cmp     al,'='          ;
 35683 00003D59 75EB                            jne	short copy_varlen
 35684 00003D5B B000                            mov     al,0            ;
 35685 00003D5D 8A24                            mov     ah,[si]         ; save char after '='
 35686 00003D5F 29CE                            sub     si,cx           ; back up to given varname
 35687 00003D61 49                              dec     cx              ; CX == # of bytes in varname
 35688 00003D62 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 35689                                  copy_varsrch:
 35690 00003D64 263805                          cmp     byte [es:di],al
 35691 00003D67 7425                            je	short copy_envprep ; search failed, just copy var
 35692 00003D69 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 35693 00003D6B 51                              push    cx              ;
 35694 00003D6C 56                              push    si              ;
 35695 00003D6D F3A6                            repe    cmpsb           ;
 35696 00003D6F 5E                              pop     si              ;
 35697 00003D70 59                              pop     cx              ;
 35698 00003D71 7531                            jne	short copy_varnext ; no match, skip to next varname
 35699 00003D73 26803D3D                        cmp     byte [es:di],'='
 35700 00003D77 752B                            jne     short copy_varnext ; no match, there's more characters
 35701                                  
 35702                                  ;   Previous occurrence of variable has been found; determine the
 35703                                  ;   entire length and then destroy it
 35704                                  
 35705 00003D79 B9FFFF                          mov     cx,-1           ;
 35706 00003D7C F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 35707 00003D7E 56                              push    si              ;
 35708 00003D7F 89FE                            mov     si,di           ;
 35709 00003D81 89DF                            mov     di,bx           ;
 35710 00003D83 2E8B0E[D914]                    mov     cx,[cs:config_envlen]
 35711 00003D88 29F1                            sub     cx,si           ; destroy variable now
 35712                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 35713                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 35714                                  
 35715 00003D8A F3                      	rep	; 0F3h
 35716 00003D8B 26                      	es	; 26h
 35717 00003D8C A4                      	movsb	; 0A4h
 35718                                  
 35719 00003D8D 5E                      	pop     si
 35720                                  copy_envprep:
 35721 00003D8E 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 35722 00003D91 741D                            je	short copy_envdel ; then just exit with variable deleted
 35723 00003D93 80FC0A                          cmp     ah,lf           ;
 35724 00003D96 7418                            je	short copy_envdel
 35725                                          ;jmp	short copy_envloop
 35726                                  	; 04/01/2023
 35727                                  copy_envloop:                  ;
 35728 00003D98 AC                      	lodsb                   ;
 35729 00003D99 3C0D                    	cmp	al,cr           ;
 35730 00003D9B 7410                    	je	short copy_envdone
 35731 00003D9D 3C0A                    	cmp	al,lf           ;
 35732 00003D9F 740C                    	je	short copy_envdone
 35733 00003DA1 AA                      	stosb                   ;
 35734 00003DA2 EBF4                    	jmp	short copy_envloop
 35735                                  
 35736                                  copy_varnext:                   ;
 35737 00003DA4 51                              push    cx              ;
 35738 00003DA5 B9FFFF                          mov     cx,-1           ;
 35739 00003DA8 F2AE                            repne   scasb           ;
 35740 00003DAA 59                              pop     cx              ;
 35741 00003DAB EBB7                            jmp	short copy_varsrch
 35742                                  
 35743                                  	; 04/01/2023
 35744                                  ;copy_envloop:                  ;
 35745                                  ;	lodsb                   ;
 35746                                  ;	cmp	al,cr           ;
 35747                                  ;	je	short copy_envdone
 35748                                  ;	cmp	al,lf           ;
 35749                                  ;	je	short copy_envdone
 35750                                  ;	stosb                   ;
 35751                                  ;	jmp	short copy_envloop
 35752                                  
 35753                                  copy_envdone:                   ;
 35754 00003DAD 28C0                            sub     al,al           ; do SUB to clear carry as well
 35755 00003DAF AA                              stosb                   ; always null-terminate these puppies
 35756                                  copy_envdel:                    ;
 35757 00003DB0 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 35758 00003DB3 2E893E[D914]                    mov     [cs:config_envlen],di
 35759                                  
 35760                                  copy_envexit:                   ;
 35761 00003DB8 07                              pop     es              ;
 35762 00003DB9 1F                              pop     ds              ;
 35763 00003DBA 5E                              pop     si              ;
 35764 00003DBB 59                              pop     cx              ;
 35765                                  
 35766                                  copy_done:	; 18/12/2022
 35767 00003DBC C3                              retn
 35768                                  
 35769                                  ;----------------------------------------------------------------------------
 35770                                  ;
 35771                                  ;   copy_block: copy the current block to the new config.sys workspace
 35772                                  ;
 35773                                  ;   INPUT
 35774                                  ;       CX == remaining bytes in "organized" config.sys memory image
 35775                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 35776                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 35777                                  ;             config.sys image) where the current block is to be copied
 35778                                  ;
 35779                                  ;   OUTPUT
 35780                                  ;       Same as above
 35781                                  ;       AL also equals the last character read from the organized image
 35782                                  ;
 35783                                  ;   OTHER REGS USED
 35784                                  ;       All
 35785                                  ;
 35786                                  ;   NOTES
 35787                                  ;       None
 35788                                  ;
 35789                                  ;   HISTORY
 35790                                  ;       Created 16-Mar-1992 by JeffPar
 35791                                  ;
 35792                                  ;----------------------------------------------------------------------------
 35793                                  
 35794                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 35795                                  	; (SYSINIT:4759h)
 35796                                  
 35797                                  copy_block:
 35798 00003DBD E87303                          call    get_char        ; check for include
 35799 00003DC0 72FA                            jc	short copy_done	;
 35800 00003DC2 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35801 00003DC4 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 35802 00003DC6 74F4                            je	short copy_done ;
 35803                                  
 35804 00003DC8 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 35805 00003DCA 88E0                            mov     al,ah           ; AL == the original line code
 35806 00003DCC 753A                            jne	short copy_line	; not an "include" line
 35807                                  
 35808                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 35809                                  ;   never try to include the block again (no infinite include loops please),
 35810                                  ;   then search for the named block and call copy_block again.
 35811                                  
 35812 00003DCE 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 35813 00003DD3 57                              push    di              ;
 35814                                  
 35815 00003DD4 BF[EB47]                        mov     di,szMenu
 35816 00003DD7 E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 35817 00003DDA 7425                            je	short copy_skip	;
 35818                                  
 35819 00003DDC BF[F047]                        mov     di,szCommon
 35820 00003DDF E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 35821 00003DE2 741D                            je	short copy_skip	;
 35822                                  
 35823 00003DE4 89F7                            mov     di,si           ; try to find the block
 35824 00003DE6 E86400                          call    srch_block      ;
 35825 00003DE9 89FA                            mov     dx,di           ;
 35826 00003DEB 5F                              pop     di              ;
 35827 00003DEC 7514                            jne	short copy_error ; no such block
 35828 00003DEE 51                              push    cx              ;
 35829 00003DEF 89D9                            mov     cx,bx           ;
 35830 00003DF1 56                              push    si              ;
 35831 00003DF2 4A                              dec     dx              ;
 35832 00003DF3 89D6                            mov     si,dx           ;
 35833 00003DF5 E81003                          call    skip_line       ; skip the rest of the "block name" line
 35834 00003DF8 E8C2FF                          call    copy_block      ; and copy in the rest of that block
 35835 00003DFB 5E                              pop     si              ;
 35836 00003DFC 59                              pop     cx              ;
 35837 00003DFD 28C0                            sub     al,al           ; force skip_opt_line to skip...
 35838 00003DFF EB2B                            jmp     short copy_nextline
 35839                                  
 35840                                  copy_skip:
 35841 00003E01 5F                              pop     di
 35842                                  copy_error:
 35843 00003E02 F8                              clc                     ;
 35844 00003E03 E80304                          call    print_error     ; note that carry is clear, no pause
 35845 00003E06 EB24                            jmp     short copy_nextline
 35846                                  
 35847                                  ;   Copy the line at ES:SI to the current location at DS:DI
 35848                                  
 35849                                  copy_line:
 35850 00003E08 8805                            mov     [di],al         ;
 35851 00003E0A 47                              inc     di              ;
 35852 00003E0B 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 35853 00003E0D 721D                            jb	short copy_nextline ; no
 35854 00003E0F 2E803E[DE14]00                  cmp     byte [cs:config_multi],0
 35855 00003E15 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 35856 00003E17 E81700                          call    get_linenum	; BX == line # of line @ES:SI
 35857 00003E1A 891D                            mov     [di],bx         ; stash it immediately following the line code
 35858 00003E1C 47                              inc     di              ;
 35859 00003E1D 47                              inc     di              ;
 35860 00003E1E EB08                            jmp     short copy_next ;
 35861                                  copy_loop:                      ;
 35862 00003E20 E81003                          call    get_char        ;
 35863 00003E23 7297                            jc	short copy_done ; end of file
 35864 00003E25 8805                            mov     [di],al         ;
 35865 00003E27 47                              inc     di              ;
 35866                                  copy_next:
 35867 00003E28 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 35868 00003E2A 75F4                            jne	short copy_loop	; nope
 35869                                  
 35870                                  copy_nextline:
 35871 00003E2C E8DE02                          call    skip_opt_line   ;
 35872 00003E2F EB8C                            jmp     short copy_block
 35873                                  
 35874                                  	; 18/12/2022
 35875                                  ;copy_done:
 35876                                          ;retn
 35877                                  
 35878                                  ;----------------------------------------------------------------------------
 35879                                  ;
 35880                                  ;   get_linenum: return line # (in BX) of current line (@ES:SI)
 35881                                  ;
 35882                                  ;   INPUT
 35883                                  ;    ES:SI -> some line in the config.sys memory image
 35884                                  ;
 35885                                  ;   OUTPUT
 35886                                  ;       BX == line # (relative to 1)
 35887                                  ;
 35888                                  ;   OTHER REGS USED
 35889                                  ;       DX
 35890                                  ;
 35891                                  ;   NOTES
 35892                                  ;       None
 35893                                  ;
 35894                                  ;   HISTORY
 35895                                  ;       Created 16-Mar-1992 by JeffPar
 35896                                  ;
 35897                                  ;----------------------------------------------------------------------------
 35898                                  
 35899                                  get_linenum:
 35900 00003E31 50                              push    ax              ;
 35901 00003E32 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 35902 00003E34 51                              push    cx              ;
 35903 00003E35 89F2                            mov     dx,si           ; DX == the offset we're looking for
 35904 00003E37 56                              push    si              ;
 35905 00003E38 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 35906 00003E3D 29F6                            sub     si,si           ; prepare to scan entire file
 35907                                  get_linenum_loop:               ;
 35908 00003E3F E8C602                          call    skip_line       ;
 35909 00003E42 7205                            jc	short get_linenum_done
 35910 00003E44 43                              inc     bx              ;
 35911 00003E45 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 35912 00003E47 72F6                            jb	short get_linenum_loop ; no
 35913                                  get_linenum_done:               ;
 35914 00003E49 5E                              pop     si              ;
 35915 00003E4A 59                              pop     cx              ;
 35916 00003E4B 58                              pop     ax              ;
 35917 00003E4C C3                              retn
 35918                                  
 35919                                  ;----------------------------------------------------------------------------
 35920                                  ;
 35921                                  ;   srch_block: searches entire config.sys for block name @ES:DI
 35922                                  ;
 35923                                  ;   INPUT
 35924                                  ;       ES -> config.sys image
 35925                                  ;    ES:DI -> block name to find
 35926                                  ;
 35927                                  ;   OUTPUT
 35928                                  ;       ZF flag set, if found
 35929                                  ;    ES:DI -> just past the name in the block heading, if found
 35930                                  ;       BX == # bytes remaining from that point, if found
 35931                                  ;
 35932                                  ;   OTHER REGS USED
 35933                                  ;       None
 35934                                  ;
 35935                                  ;   NOTES
 35936                                  ;       This differs from "find_block" in that it searches the ENTIRE
 35937                                  ;       config.sys image, not merely the remaining portion, and that it
 35938                                  ;       takes a pointer to block name that is *elsewhere* in the image
 35939                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 35940                                  ;
 35941                                  ;   HISTORY
 35942                                  ;       Created 16-Mar-1992 by JeffPar
 35943                                  ;
 35944                                  ;----------------------------------------------------------------------------
 35945                                  
 35946                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 35947 00003E4D 50                              push    ax              ;
 35948 00003E4E 51                              push    cx              ;
 35949 00003E4F 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 35950 00003E54 56                              push    si              ;
 35951 00003E55 29F6                            sub     si,si           ;
 35952 00003E57 1E                              push    ds              ;
 35953 00003E58 06                              push    es              ;
 35954 00003E59 1F                              pop     ds              ;
 35955 00003E5A E80900                          call    find_block      ;
 35956 00003E5D 89F7                            mov     di,si           ;
 35957 00003E5F 89CB                            mov     bx,cx           ;
 35958 00003E61 1F                              pop     ds              ;
 35959 00003E62 5E                              pop     si              ;
 35960 00003E63 59                              pop     cx              ;
 35961 00003E64 58                              pop     ax              ;
 35962                                  find_exit: ; 16/04/2019
 35963 00003E65 C3                              retn			;
 35964                                  
 35965                                  ;----------------------------------------------------------------------------
 35966                                  ;
 35967                                  ;   find_block: searches rest of config.sys for block name @DS:DI
 35968                                  ;
 35969                                  ;   INPUT
 35970                                  ;    DS:DI -> block name to find
 35971                                  ;    ES:SI -> remainder of config.sys image
 35972                                  ;       CX == remaining size of config.sys image
 35973                                  ;
 35974                                  ;   OUTPUT
 35975                                  ;       ZF flag set, if found (also, CF set if EOF)
 35976                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 35977                                  ;       CX == # bytes remaining from that point
 35978                                  ;
 35979                                  ;   OTHER REGS USED
 35980                                  ;       AX
 35981                                  ;
 35982                                  ;   NOTES
 35983                                  ;       This differs from "srch_block" in that it searches only the
 35984                                  ;       remaining portion of the config.sys image and leaves SI and CX
 35985                                  ;       pointing to where the search left off, and that it takes a pointer
 35986                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 35987                                  ;
 35988                                  ;   HISTORY
 35989                                  ;       Created 16-Mar-1992 by JeffPar
 35990                                  ;
 35991                                  ;----------------------------------------------------------------------------
 35992                                  
 35993                                  find_block:
 35994 00003E66 E8CA02                          call    get_char        ; get line code
 35995 00003E69 72FA                            jc	short find_exit	; end of file
 35996 00003E6B 247F                            and     al,~CONFIG_OPTION_QUERY
 35997 00003E6D 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 35998 00003E6F 740C                            je	short check_line ; no
 35999 00003E71 3C4A                            cmp     al,CONFIG_INCLUDE
 36000 00003E73 7513                            jne	short next_line	;
 36001 00003E75 2E800E[DE14]01                  or	byte [cs:config_multi],1
 36002 00003E7B EB0B                            jmp     short next_line ;
 36003                                  check_line:
 36004 00003E7D 2E800E[DE14]01                  or      byte [cs:config_multi],1
 36005 00003E83 E80700                          call    comp_names      ; compare block names
 36006 00003E86 76DD                            jbe	short find_exit	; end of file, or names matched
 36007                                  next_line:
 36008 00003E88 E88202                          call    skip_opt_line   ; no, so skip to next line
 36009 00003E8B EBD9                            jmp	short find_block  ;
 36010                                  ;find_exit:
 36011                                  ;	retn
 36012                                  
 36013                                  ;----------------------------------------------------------------------------
 36014                                  ;
 36015                                  ;   comp_names: compares keyword @DS:DI to position in config.sys @ES:SI
 36016                                  ;
 36017                                  ;   INPUT
 36018                                  ;    DS:DI -> keyword to compare
 36019                                  ;    ES:SI -> position in config.sys
 36020                                  ;       CX == remaining bytes in config.sys
 36021                                  ;
 36022                                  ;   OUTPUT
 36023                                  ;       ZF flag set, if match (also, CF set if EOF)
 36024                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 36025                                  ;       CX == # bytes remaining from that point
 36026                                  ;
 36027                                  ;   OTHER REGS USED
 36028                                  ;       AX
 36029                                  ;
 36030                                  ;   NOTES
 36031                                  ;       None
 36032                                  ;
 36033                                  ;   HISTORY
 36034                                  ;       Created 16-Mar-1992 by JeffPar
 36035                                  ;
 36036                                  ;----------------------------------------------------------------------------
 36037                                  
 36038                                  comp_names:
 36039 00003E8D 57                              push    di              ;
 36040                                  comp_loop:                      ;
 36041 00003E8E E8A202                          call    get_char        ;
 36042 00003E91 7210                            jc	short comp_exit	;
 36043 00003E93 E80A04                          call    any_delim       ; is next character a delimiter?
 36044 00003E96 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 36045 00003E98 740B                            je	short comp_almost ; yes, it *could* be a match
 36046 00003E9A 47                              inc     di              ;
 36047 00003E9B 25DFDF                          and     ax,~2020h ; 0DFDFh 
 36048                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 36049 00003E9E 38E0                            cmp     al,ah           ; match?
 36050 00003EA0 74EC                            je	short comp_loop ; yes, keep looking at the characters
 36051 00003EA2 F8                              clc                     ; prevent erroneous eof indication: clear carry
 36052                                  comp_exit:                      ;
 36053 00003EA3 5F                              pop     di              ;
 36054 00003EA4 C3                              retn			;
 36055                                  comp_almost:                    ;
 36056 00003EA5 86C4                            xchg    al,ah           ; we don't know for sure if it's a match
 36057 00003EA7 E8F603                          call    any_delim       ; until we verify that the second string has
 36058 00003EAA 86C4                            xchg    al,ah           ; been exhausted also...
 36059 00003EAC EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 36060                                  
 36061                                  ;----------------------------------------------------------------------------
 36062                                  
 36063                                  comp_names_safe:
 36064 00003EAE 50                              push    ax
 36065 00003EAF 51                              push    cx
 36066 00003EB0 56                              push	si
 36067 00003EB1 1E                              push    ds
 36068 00003EB2 0E                              push    cs
 36069 00003EB3 1F                              pop     ds
 36070 00003EB4 E8D6FF                          call    comp_names
 36071 00003EB7 1F                              pop     ds
 36072 00003EB8 5E                      	pop	si
 36073 00003EB9 59                              pop     cx
 36074 00003EBA 58                              pop     ax
 36075 00003EBB C3                              retn
 36076                                  
 36077                                  ;----------------------------------------------------------------------------
 36078                                  ;
 36079                                  ;   print_item: display menu item #BL
 36080                                  ;
 36081                                  ;   INPUT
 36082                                  ;       BL == menu item # to display
 36083                                  ;
 36084                                  ;   OUTPUT
 36085                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 36086                                  ;
 36087                                  ;   OTHER REGS USED
 36088                                  ;       None
 36089                                  ;
 36090                                  ;   NOTES
 36091                                  ;       This function saves/restores the current cursor position, so you
 36092                                  ;       needn't worry about it.
 36093                                  ;
 36094                                  ;   HISTORY
 36095                                  ;       Created 16-Mar-1992 by JeffPar
 36096                                  ;
 36097                                  ;----------------------------------------------------------------------------
 36098                                  
 36099                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36100                                  	; (SYSINIT:485Ah)
 36101                                  
 36102                                  print_item:		; prints menu item #BL (1 to N)
 36103 00003EBC 50                              push    ax              ;
 36104 00003EBD 53                              push    bx              ;
 36105 00003EBE 51                              push    cx              ;
 36106 00003EBF 52                              push    dx              ;
 36107 00003EC0 56                              push    si              ;
 36108 00003EC1 B403                            mov     ah,03h          ; get cursor position
 36109 00003EC3 8A3E[A247]                      mov     bh,[bMenuPage]  ; always page zero
 36110 00003EC7 CD10                            int     10h             ; DH/DL = row/column
 36111 00003EC9 52                              push    dx              ; save it
 36112 00003ECA B402                            mov     ah,02h          ; set cursor position
 36113 00003ECC 88DE                            mov     dh,bl           ;
 36114 00003ECE 80C603                          add     dh,3            ;
 36115 00003ED1 B205                            mov     dl,5            ;
 36116 00003ED3 CD10                            int     10h             ; set cursor position for correct row/col
 36117 00003ED5 88D8                            mov     al,bl           ;
 36118 00003ED7 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 36119 00003ED9 8A26[A147]                      mov     ah,[bMenuColor] ; normal attribute
 36120 00003EDD 3A1E[AB47]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 36121 00003EE1 7510                            jne	short print_other ; no
 36122 00003EE3 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 36123 00003EE6 88E5                            mov     ch,ah           ;
 36124 00003EE8 B104                            mov     cl,4            ;
 36125 00003EEA D2C5                            rol     ch,cl           ;
 36126 00003EEC 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 36127 00003EEE 7503                            jne	short print_other ; no
 36128 00003EF0 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 36129                                  print_other:                    ;
 36130 00003EF3 B700                            mov     bh,0            ;
 36131 00003EF5 01DB                            add     bx,bx           ;
 36132 00003EF7 8BBF[CF47]                      mov     di,[aoffBlockDesc+bx]
 36133 00003EFB 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 36134 00003EFD 8A3E[A247]                      mov     bh,[bMenuPage]  ; get correct video page #
 36135 00003F01 B409                            mov     ah,09h          ; write char/attr
 36136 00003F03 B90100                          mov     cx,1            ;
 36137 00003F06 CD10                            int     10h             ;
 36138 00003F08 FEC2                            inc     dl              ; increment column
 36139 00003F0A B402                            mov     ah,02h          ;
 36140 00003F0C CD10                            int     10h             ;
 36141                                          ;mov	ax,0900h+'.'    ;
 36142 00003F0E B82E09                          mov	ax,092Eh
 36143 00003F11 CD10                    	int     10h             ; display '.'
 36144 00003F13 FEC2                            inc     dl              ; increment column
 36145 00003F15 B402                            mov     ah,02h          ;
 36146 00003F17 CD10                            int     10h             ;
 36147                                          ;mov	ax,0900h+' '    ;
 36148 00003F19 B82009                          mov	ax,0920h
 36149 00003F1C CD10                    	int     10h             ; display ' '
 36150 00003F1E FEC2                            inc     dl              ; increment column
 36151 00003F20 B402                            mov     ah,02h          ;
 36152 00003F22 CD10                            int     10h             ;
 36153 00003F24 06                              push    es              ;
 36154                                  print_loop:                     ;
 36155 00003F25 268A05                          mov     al,[es:di]	; get a character of the description
 36156 00003F28 47                              inc     di              ;
 36157 00003F29 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 36158 00003F2B 7502                            jne	short print_nontab ;
 36159 00003F2D B020                            mov     al,' '          ;
 36160                                  print_nontab:                   ;
 36161 00003F2F 3C20                            cmp     al,' '          ;
 36162 00003F31 7215                            jb	short print_done ; stop at the 1st character < space
 36163 00003F33 3C24                            cmp     al,'$'          ;
 36164 00003F35 7411                            je	short print_done ; also stop on $
 36165 00003F37 B409                            mov     ah,09h          ; display function #
 36166 00003F39 CD10                            int     10h             ;
 36167 00003F3B FEC2                            inc     dl              ; increment column
 36168 00003F3D 80FA4E                          cmp     dl,78           ; far enough?
 36169 00003F40 7306                            jae	short print_done ; yes
 36170 00003F42 B402                            mov     ah,02h          ;
 36171 00003F44 CD10                            int     10h             ;
 36172 00003F46 EBDD                            jmp	short  print_loop
 36173                                  print_done:                     ;
 36174 00003F48 07                              pop     es              ;
 36175 00003F49 5A                              pop     dx              ;
 36176 00003F4A B402                            mov     ah,02h          ;
 36177 00003F4C CD10                            int     10h             ; restore previous row/col
 36178 00003F4E 5E                              pop     si              ;
 36179 00003F4F 5A                              pop     dx              ;
 36180 00003F50 59                              pop     cx              ;
 36181 00003F51 5B                              pop     bx              ;
 36182 00003F52 58                              pop     ax              ;
 36183 00003F53 C3                              retn			;
 36184                                  
 36185                                  ;----------------------------------------------------------------------------
 36186                                  ;
 36187                                  ;   select_item: wait for user to select menu item, with time-out
 36188                                  ;
 36189                                  ;   INPUT
 36190                                  ;       None
 36191                                  ;
 36192                                  ;   OUTPUT
 36193                                  ;       BX == menu item # (1-N), or -1 for clean boot
 36194                                  ;       Selected menu item highlighted
 36195                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 36196                                  ;
 36197                                  ;   OTHER REGS USED
 36198                                  ;       None
 36199                                  ;
 36200                                  ;   NOTES
 36201                                  ;       None
 36202                                  ;
 36203                                  ;   HISTORY
 36204                                  ;       Created 16-Mar-1992 by JeffPar
 36205                                  ;
 36206                                  ;----------------------------------------------------------------------------
 36207                                  
 36208                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 36209 00003F54 8A1E[AB47]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 36210 00003F58 88D8                            mov     al,bl           ;
 36211 00003F5A E83701                          call    disp_num        ;
 36212 00003F5D E84401                          call    show_status     ; display current interactive status
 36213 00003F60 803E[AF47]FF                    cmp     byte [secTimeOut],-1
 36214 00003F65 7452                            je	short input_key	; no time-out, just go to input
 36215 00003F67 B42C                            mov     ah,GET_TIME ; 2Ch
 36216 00003F69 CD21                            int     21h             ;
 36217 00003F6B 88F7                            mov     bh,dh           ; BH = initial # of seconds
 36218                                  check_time:
 36219 00003F6D A0[AF47]                        mov     al,[secTimeOut] ;
 36220 00003F70 2A06[B047]                      sub     al,[secElapsed] ;
 36221 00003F74 730D                            jae	short show_time	;
 36222 00003F76 800E[AA47]02                    or      byte [bQueryOpt],2 ; disable all further prompting
 36223 00003F7B C606[B047]00                    mov     byte [secElapsed],0
 36224 00003F80 E9F600                          jmp	select_done	; time's up!
 36225                                  show_time:
 36226 00003F83 53                              push    bx              ;
 36227 00003F84 88C3                            mov     bl,al           ; save # in BL
 36228 00003F86 8A3E[A247]                      mov     bh,[bMenuPage]  ;
 36229 00003F8A B403                            mov     ah,03h          ; get cursor position
 36230 00003F8C CD10                            int     10h             ;
 36231 00003F8E 52                              push    dx              ;
 36232 00003F8F 80C208                  	add	dl,8		; move cursor to the right
 36233 00003F92 B402                            mov     ah,02h          ; set cursor position
 36234 00003F94 CD10                            int     10h             ;
 36235 00003F96 BA[644D]                        mov     dx,_$TimeOut
 36236 00003F99 E8DC05                          call    print           ; print the "Time remaining: " prompt
 36237 00003F9C 88D8                            mov     al,bl           ; recover # from BL
 36238 00003F9E 98                              cbw                     ; this works because AL is always <= 90
 36239 00003F9F B10A                            mov     cl,10           ;
 36240 00003FA1 F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 36241 00003FA3 88E1                            mov     cl,ah           ;
 36242 00003FA5 0430                            add     al,'0'          ;
 36243 00003FA7 B40E                            mov     ah,0Eh          ;
 36244 00003FA9 CD10                            int     10h             ; write TTY tens digit
 36245 00003FAB 88C8                            mov     al,cl           ;
 36246 00003FAD 0430                            add     al,'0'          ;
 36247 00003FAF B40E                            mov     ah,0Eh          ;
 36248 00003FB1 CD10                            int     10h             ; write TTY ones digit
 36249 00003FB3 5A                              pop     dx
 36250 00003FB4 B402                            mov     ah,02h          ; set cursor position back to where it was
 36251 00003FB6 CD10                            int     10h             ;
 36252 00003FB8 5B                              pop     bx              ;
 36253                                  input_key:
 36254 00003FB9 B406                            mov     ah,RAW_CON_IO ; 6
 36255 00003FBB B2FF                            mov     dl,0FFh         ; input request
 36256 00003FBD CD21                            int     21h             ;
 36257 00003FBF 751F                            jnz	short got_key	;
 36258 00003FC1 803E[AF47]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 36259 00003FC6 74F1                            je	short input_key	; no, just go back to input
 36260 00003FC8 B42C                            mov     ah,GET_TIME     ;
 36261 00003FCA CD21                            int     21h             ; DH = seconds
 36262 00003FCC 88F4                            mov     ah,dh           ;
 36263 00003FCE 28FE                            sub     dh,bh           ; should generally be zero or one
 36264 00003FD0 88E7                            mov     bh,ah           ;
 36265 00003FD2 7302                            jnc	short got_time	;
 36266 00003FD4 B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 36267                                  got_time:
 36268 00003FD6 08F6                            or      dh,dh           ; any change?
 36269 00003FD8 74DF                            jz	short input_key	; no
 36270 00003FDA 0036[B047]                      add     [secElapsed],dh ;
 36271 00003FDE EB8D                            jmp	short check_time ;
 36272                                  got_key:
 36273 00003FE0 50                              push    ax              ;
 36274 00003FE1 B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 36275 00003FE4 8706[AF47]                      xchg    [secTimeOut],ax
 36276 00003FE8 3CFF                            cmp     al,-1           ; was time-out already disabled?
 36277 00003FEA 740E                            je	short timeout_disabled ; yes
 36278 00003FEC 53                              push    bx              ; let's disable # seconds display
 36279 00003FED B8200A                          mov     ax,0A20h        ; write multiple spaces
 36280 00003FF0 8B1E[A147]                      mov     bx,[bMenuColor]
 36281 00003FF4 B95000                          mov     cx,80           ; 80 of them, to be safe
 36282 00003FF7 CD10                            int     10h             ; to completely obliterate # seconds display
 36283 00003FF9 5B                              pop     bx   		;
 36284                                  
 36285                                  timeout_disabled:
 36286 00003FFA 58                              pop     ax              ;
 36287 00003FFB 08C0                            or      al,al           ; extended key pressed?
 36288 00003FFD 755A                            jnz	short normal_key ; no
 36289 00003FFF CD21                            int     21h             ; get the next part of the key then
 36290 00004001 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 36291                                  
 36292 00004003 3C48                            cmp     al,48h          ; up arrow?
 36293 00004005 7510                            jne	short not_up	; no
 36294 00004007 80FB01                          cmp     bl,1            ; are we as up as up can get?
 36295 0000400A 76AD                            jbe	short input_key	; yes, ignore it
 36296 0000400C FE0E[AB47]                      dec     byte [bDefBlock] ;
 36297 00004010 E8A9FE                          call    print_item      ; re-print the current item
 36298 00004013 FECB                            dec     bl              ; and then print the new current item
 36299 00004015 EB12                            jmp     short print1
 36300                                  not_up:
 36301 00004017 3C50                            cmp     al,50h          ; down arrow?
 36302 00004019 7518                            jne	short not_down	; no
 36303 0000401B 3A1E[AC47]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 36304 0000401F 7310                            jae	short to_input_key ; yes, ignore it
 36305 00004021 FE06[AB47]                      inc     byte [bDefBlock] ;
 36306 00004025 E894FE                          call    print_item      ; re-print the current item
 36307 00004028 43                              inc     bx              ; and then print the new current item
 36308                                  print1: 
 36309 00004029 88D8                    	mov     al,bl           ;
 36310                                  print2: 
 36311 0000402B E88EFE                  	call    print_item      ;
 36312 0000402E E86300                          call    disp_num        ;
 36313                                  to_input_key:
 36314 00004031 EB86                            jmp     input_key       ;
 36315                                  not_down:
 36316 00004033 F606[A647]01                    test    byte [bDisableUI],1
 36317 00004038 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 36318 0000403A 3C42                            cmp     al,42h          ; F8 function key?
 36319 0000403C 750B                            jne	short not_f8	; no
 36320 0000403E 8036[AA47]01                    xor     byte [bQueryOpt],1
 36321 00004043 E85E00                          call    show_status     ;
 36322 00004046 E970FF                          jmp     input_key	;
 36323                                  not_f8:
 36324 00004049 3C3F                            cmp     al,3Fh          ; F5 function key?
 36325 0000404B 75E4                            jne	short to_input_key ; no
 36326                                  	; 02/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36327                                  	; MSDOS 6.21 IO.SYS - SYSINIT:49EBh
 36328                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4C32h)
 36329 0000404D 800E[AA47]04            	or	byte [bQueryOpt],4 ; no more queries
 36330 00004052 BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 36331 00004055 B020                            mov     al,' '          ; don't want to display anything really;
 36332 00004057 EB26                            jmp     short disp_input ; just want to display the cr/lf sequence...
 36333                                  
 36334                                  normal_key:
 36335 00004059 3C0D                            cmp     al,0Dh          ; Enter?
 36336 0000405B 741C                            je	short select_done ; yes
 36337 0000405D 3C08                            cmp     al,08h          ; backspace?
 36338 0000405F 7504                            jne	short not_backspace ; no
 36339 00004061 BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 36340 00004064 C3                              retn			;
 36341                                  not_backspace:
 36342 00004065 2C30                            sub     al,'0'          ; is greater than '0'?
 36343 00004067 76C8                            jbe	short to_input_key ; no
 36344 00004069 3A06[AC47]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 36345 0000406D 77C2                            ja	short to_input_key ; no
 36346 0000406F A2[AB47]                        mov	[bDefBlock],al  ;
 36347 00004072 E847FE                          call    print_item      ; redisplay the current selection
 36348 00004075 88C3                            mov     bl,al           ; set new selection
 36349 00004077 EBB2                            jmp	short print2
 36350                                  
 36351                                  select_done:
 36352 00004079 B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 36353 0000407B 88D8                            mov     al,bl           ;
 36354 0000407D 0430                            add     al,'0'          ; convert it into a digit, then display it
 36355                                  
 36356                                  	; fall into disp_input
 36357                                  
 36358                                  ; 16/04/2019 - Retro DOS v4.0
 36359                                  
 36360                                  ;----------------------------------------------------------------------------
 36361                                  ;
 36362                                  ;   disp_input: display a single character + cr/lf
 36363                                  ;
 36364                                  ;   INPUT
 36365                                  ;       AL == character to display
 36366                                  ;
 36367                                  ;   OUTPUT
 36368                                  ;       None
 36369                                  ;
 36370                                  ;   OTHER REGS USED
 36371                                  ;       None
 36372                                  ;
 36373                                  ;   NOTES
 36374                                  ;       This function is used not only for the menu input selection but
 36375                                  ;       also for the interactive line prompting (the y/n/a thing).
 36376                                  ;
 36377                                  ;   HISTORY
 36378                                  ;       Created 16-Mar-1992 by JeffPar
 36379                                  ;
 36380                                  ;----------------------------------------------------------------------------
 36381                                  
 36382                                  disp_input:
 36383 0000407F 50                              push    ax
 36384 00004080 3C20                            cmp     al,' '
 36385 00004082 7302                            jae	short disp_ok
 36386 00004084 B020                            mov     al,' '
 36387                                  disp_ok:
 36388 00004086 88C2                            mov     dl,al
 36389 00004088 B402                            mov     ah,STD_CON_OUTPUT ; 2
 36390 0000408A CD21                            int     21h
 36391 0000408C BA[C44A]                        mov     dx,crlfm
 36392 0000408F E8E604                          call    print
 36393 00004092 58                              pop     ax
 36394 00004093 C3                              retn
 36395                                  
 36396                                  ;----------------------------------------------------------------------------
 36397                                  
 36398                                  disp_num:
 36399 00004094 53                              push    bx
 36400 00004095 0430                            add     al,'0'
 36401 00004097 B40A                            mov     ah,0Ah
 36402 00004099 8B1E[A147]                      mov     bx,[bMenuColor]
 36403 0000409D B90100                          mov     cx,1
 36404 000040A0 CD10                            int     10h
 36405 000040A2 5B                              pop     bx
 36406 000040A3 C3                              retn
 36407                                  
 36408                                  ;----------------------------------------------------------------------------
 36409                                  ;
 36410                                  ;   show_status: display current interactive mode setting (on/off/none)
 36411                                  ;
 36412                                  ;   INPUT
 36413                                  ;       None
 36414                                  ;
 36415                                  ;   OUTPUT
 36416                                  ;       None
 36417                                  ;
 36418                                  ;   OTHER REGS USED
 36419                                  ;       None
 36420                                  ;
 36421                                  ;   NOTES
 36422                                  ;       None
 36423                                  ;
 36424                                  ;   HISTORY
 36425                                  ;       Created 16-Mar-1992 by JeffPar
 36426                                  ;
 36427                                  ;----------------------------------------------------------------------------
 36428                                  
 36429                                  show_status:
 36430 000040A4 53                              push    bx              ; BL = video page #
 36431 000040A5 8B1E[A147]                      mov     bx,[bMenuColor]
 36432 000040A9 B403                            mov     ah,03h          ; get cursor position
 36433 000040AB CD10                            int     10h             ;
 36434 000040AD 52                              push    dx              ; save it
 36435 000040AE B402                            mov     ah,02h          ; set cursor position
 36436 000040B0 8B16[A447]                      mov     dx,[bLastCol]   ; set correct row/col
 36437 000040B4 F606[A647]01                    test    byte [bDisableUI],1
 36438 000040B9 740E                            jz	short show_onoff ; just show on/off
 36439 000040BB B200                            mov     dl,0            ;
 36440 000040BD CD10                            int     10h             ;
 36441 000040BF B8200A                          mov     ax,0A20h        ; write multiple spaces
 36442 000040C2 B95000                          mov     cx,80           ; 80 of them, to be exact
 36443 000040C5 CD10                            int     10h             ; to obliterate the status line
 36444 000040C7 EB13                            jmp     short show_done ;
 36445                                  show_onoff: 
 36446 000040C9 CD10                            int     10h
 36447                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 36448                                  		; AL = character, BH = display page - alpha mode
 36449                                  		; BL = color of character (graphics mode, PCjr only)
 36450                                  		; CX = number of times to write character
 36451                                  
 36452 000040CB A0[604D]                        mov     al,[_$NO]	; assume OFF
 36453 000040CE 803E[AA47]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 36454 000040D3 7503                            jne	short show_noton ; no
 36455 000040D5 A0[5C4D]                        mov     al,[_$YES]	; yes
 36456                                  show_noton:                     ;
 36457 000040D8 B40E                            mov     ah,0Eh          ; write TTY
 36458 000040DA CD10                            int     10h             ;
 36459                                  show_done:                      ;
 36460 000040DC 5A                              pop     dx              ;
 36461 000040DD B402                            mov     ah,02h          ;
 36462 000040DF CD10                            int     10h             ; restore original cursor position
 36463 000040E1 5B                              pop     bx              ;
 36464 000040E2 C3                              retn			;
 36465                                  
 36466                                  ; 16/04/2019 - Retro DOS v4.0
 36467                                  
 36468                                  ;----------------------------------------------------------------------------
 36469                                  ;
 36470                                  ;   skip_token: advances ES:SI/CX past the current token
 36471                                  ;
 36472                                  ;   INPUT
 36473                                  ;    ES:SI -> position in config.sys
 36474                                  ;       CX == remaining bytes in config.sys
 36475                                  ;
 36476                                  ;   OUTPUT
 36477                                  ;       CF set if EOL/EOF hit
 36478                                  ;       AL == 1st char of delimiter
 36479                                  ;    ES:SI -> just past the delimiter
 36480                                  ;       CX == # bytes remaining from that point
 36481                                  ;
 36482                                  ;   OTHER REGS USED
 36483                                  ;       AX
 36484                                  ;
 36485                                  ;   NOTES
 36486                                  ;       None
 36487                                  ;
 36488                                  ;   HISTORY
 36489                                  ;       Created 16-Mar-1992 by JeffPar
 36490                                  ;
 36491                                  ;----------------------------------------------------------------------------
 36492                                  
 36493                                  skip_token:
 36494 000040E3 E84D00                          call    get_char
 36495 000040E6 7210                            jc	short skip_token_done
 36496 000040E8 E8B501                          call    any_delim
 36497 000040EB 75F6                            jne	short skip_token
 36498                                  skip_check_eol:
 36499 000040ED 3C0D                            cmp     al,cr ; 0Dh
 36500 000040EF 7406                            je	short skip_token_eol
 36501 000040F1 3C0A                            cmp     al,lf ; 0Ah
 36502 000040F3 7402                            je	short skip_token_eol
 36503 000040F5 F8                              clc
 36504                                          ;jmp	short skip_token_done
 36505 000040F6 C3                      	retn
 36506                                  skip_token_eol:
 36507 000040F7 F9                              stc
 36508                                  skip_token_done:
 36509 000040F8 C3                              retn
 36510                                  
 36511                                  ;----------------------------------------------------------------------------
 36512                                  ;
 36513                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 36514                                  ;
 36515                                  ;   INPUT
 36516                                  ;    ES:SI -> position in config.sys
 36517                                  ;       CX == remaining bytes in config.sys
 36518                                  ;
 36519                                  ;   OUTPUT
 36520                                  ;       CF set if EOF hit
 36521                                  ;       AL == 1st char of token
 36522                                  ;    ES:SI -> just past the token
 36523                                  ;       CX == # bytes remaining from that point
 36524                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 36525                                  ;
 36526                                  ;   OTHER REGS USED
 36527                                  ;       AX
 36528                                  ;
 36529                                  ;   NOTES
 36530                                  ;       None
 36531                                  ;
 36532                                  ;   HISTORY
 36533                                  ;       Created 16-Mar-1992 by JeffPar
 36534                                  ;
 36535                                  ;----------------------------------------------------------------------------
 36536                                  
 36537                                  skip_delim:	; returns carry set if eol/eof
 36538 000040F9 E83700                          call    get_char        ;
 36539 000040FC 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 36540 000040FF 72F7                            jc	short skip_token_done ;
 36541 00004101 E8AC01                          call    delim           ;
 36542 00004104 74F3                            je	short skip_delim ;
 36543 00004106 EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 36544                                  
 36545                                  ;----------------------------------------------------------------------------
 36546                                  ;
 36547                                  ;   skip_opt_line: same as skip_line provided AL != LF
 36548                                  ;
 36549                                  ;   INPUT
 36550                                  ;       AL == last character read
 36551                                  ;    ES:SI -> position in config.sys
 36552                                  ;       CX == remaining bytes in config.sys
 36553                                  ;
 36554                                  ;   OUTPUT
 36555                                  ;       CF set if EOF hit
 36556                                  ;       AL == 1st char of new line
 36557                                  ;    ES:SI -> just past 1st char of new line
 36558                                  ;       CX == # bytes remaining from that point
 36559                                  ;
 36560                                  ;   OTHER REGS USED
 36561                                  ;       AX
 36562                                  ;
 36563                                  ;   NOTES
 36564                                  ;       In other words, the purpose here is to skip to the next line,
 36565                                  ;       unless ES:SI is already sitting at the front of the next line (which
 36566                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 36567                                  ;
 36568                                  ;   HISTORY
 36569                                  ;       Created 16-Mar-1992 by JeffPar
 36570                                  ;
 36571                                  ;----------------------------------------------------------------------------
 36572                                  
 36573                                  ; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36574                                  ;skip_opt_line:
 36575                                  ;	cmp     al,lf ; 0Ah
 36576                                  ;	je	short skip_line_done
 36577                                       
 36578                                  	; fall into skip_line
 36579                                  
 36580                                  ;----------------------------------------------------------------------------
 36581                                  ;
 36582                                  ;   skip_line: skip to the next line
 36583                                  ;
 36584                                  ;   INPUT
 36585                                  ;    ES:SI -> position in config.sys
 36586                                  ;       CX == remaining bytes in config.sys
 36587                                  ;
 36588                                  ;   OUTPUT
 36589                                  ;       CF set if EOF hit
 36590                                  ;    ES:SI -> just past 1st char of new line
 36591                                  ;       CX == # bytes remaining from that point
 36592                                  ;
 36593                                  ;   OTHER REGS USED
 36594                                  ;       AX
 36595                                  ;
 36596                                  ;   NOTES
 36597                                  ;       None
 36598                                  ;
 36599                                  ;   HISTORY
 36600                                  ;       Created 16-Mar-1992 by JeffPar
 36601                                  ;
 36602                                  ;----------------------------------------------------------------------------
 36603                                  
 36604                                  skip_line:
 36605 00004108 E82800                          call    get_char
 36606 0000410B 7204                            jc	short skip_line_done
 36607                                  skip_opt_line:	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36608 0000410D 3C0A                            cmp     al,lf ; 0Ah
 36609 0000410F 75F7                            jne	short skip_line
 36610                                  skip_line_done:
 36611                                  num_done:	; 18/12/2022
 36612 00004111 C3                              retn
 36613                                  
 36614                                  ;----------------------------------------------------------------------------
 36615                                  ;
 36616                                  ;   get_number: return binary equivalent of numeric string
 36617                                  ;
 36618                                  ;   INPUT
 36619                                  ;    ES:SI -> position in config.sys
 36620                                  ;       CX == remaining bytes in config.sys
 36621                                  ;
 36622                                  ;   OUTPUT
 36623                                  ;       AL == non-digit encountered
 36624                                  ;       BX == binary #
 36625                                  ;    ES:SI -> just past 1st non-digit
 36626                                  ;       CX == # bytes remaining from that point
 36627                                  ;
 36628                                  ;   OTHER REGS USED
 36629                                  ;       AX
 36630                                  ;
 36631                                  ;   NOTES
 36632                                  ;       None
 36633                                  ;
 36634                                  ;   HISTORY
 36635                                  ;       Created 16-Mar-1992 by JeffPar
 36636                                  ;
 36637                                  ;----------------------------------------------------------------------------
 36638                                  
 36639                                  ; 13/05/2019
 36640                                  
 36641                                  get_number:
 36642 00004112 29DB                            sub     bx,bx           ; BX = result
 36643                                  num_loop:
 36644 00004114 E81C00                          call    get_char        ;
 36645 00004117 72F8                            jc	short num_done	;
 36646 00004119 3C30                            cmp     al,'0'          ; convert to value
 36647 0000411B 72F4                            jb	short num_done	; no more number
 36648 0000411D 3C39                            cmp     al,'9'          ;
 36649 0000411F 77F0                            ja	short num_done	;
 36650 00004121 50                              push    ax              ;
 36651 00004122 B80A00                          mov     ax,10           ;
 36652 00004125 52                              push    dx              ;
 36653 00004126 F7E3                            mul     bx              ;
 36654 00004128 5A                              pop     dx              ;
 36655 00004129 89C3                            mov     bx,ax           ;
 36656 0000412B 58                              pop     ax              ;
 36657 0000412C 2C30                            sub     al,'0'          ;
 36658 0000412E 98                              cbw                     ;
 36659 0000412F 01C3                            add     bx,ax           ;
 36660 00004131 EBE1                            jmp	short num_loop	;
 36661                                  
 36662                                  	; 18/12/2022
 36663                                  ;num_done:
 36664                                          ;retn
 36665                                  
 36666                                  ;----------------------------------------------------------------------------
 36667                                  ;
 36668                                  ;   get_char: return next character, advance ES:SI, and decrement CX
 36669                                  ;
 36670                                  ;   INPUT
 36671                                  ;    ES:SI -> position in config.sys
 36672                                  ;       CX == remaining bytes in config.sys
 36673                                  ;
 36674                                  ;   OUTPUT
 36675                                  ;       AL == next character
 36676                                  ;    ES:SI -> just past next character
 36677                                  ;       CX == # bytes remaining from that point
 36678                                  ;
 36679                                  ;   OTHER REGS USED
 36680                                  ;       AX
 36681                                  ;
 36682                                  ;   NOTES
 36683                                  ;       None
 36684                                  ;
 36685                                  ;   HISTORY
 36686                                  ;       Created 16-Mar-1992 by JeffPar
 36687                                  ;
 36688                                  ;----------------------------------------------------------------------------
 36689                                  
 36690                                  get_char:
 36691 00004133 83E901                          sub     cx,1            ; use SUB to set carry,zero
 36692 00004136 7205                            jb	short get_fail	; out of data
 36693                                          ;lods	byte ptr es:[si] ;
 36694 00004138 26                      	es	
 36695 00004139 AC                      	lodsb
 36696 0000413A 88C4                            mov     ah,al           ;
 36697 0000413C C3                              retn			;
 36698                                  get_fail:                       ; restore CX to zero
 36699 0000413D B90000                          mov     cx,0            ; leave carry set, zero not set
 36700                                  nearby_ret:
 36701 00004140 C3                              retn
 36702                                  
 36703                                  ;----------------------------------------------------------------------------
 36704                                  ;
 36705                                  ;   query_user: ask user whether to execute current config.sys command
 36706                                  ;
 36707                                  ;   INPUT
 36708                                  ;       AL == current command code
 36709                                  ;    ES:SI -> current command line in config.sys
 36710                                  ;    config_cmd == current command code, but with QUERY bit intact
 36711                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 36712                                  ;
 36713                                  ;   OUTPUT
 36714                                  ;       CF set if command should be ignored (it is also REM'ed out)
 36715                                  ;
 36716                                  ;   OTHER REGS USED
 36717                                  ;       BX, CX, DX, DI
 36718                                  ;
 36719                                  ;   NOTES
 36720                                  ;       None
 36721                                  ;
 36722                                  ;   HISTORY
 36723                                  ;       Created 16-Mar-1992 by JeffPar
 36724                                  ;
 36725                                  ;----------------------------------------------------------------------------
 36726                                  
 36727                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 36728                                  	; (SYSINIT:4AE5h)
 36729                                  
 36730                                  	; 12/12/2022
 36731                                  query_user:
 36732 00004141 F606[AA47]04                    test    byte [bQueryOpt],4	; answer no to everything?
 36733                                  	; 01/01/2023
 36734 00004146 7403                    	jz	short qu_1		;
 36735 00004148 E9BA00                  	jmp	skip_all
 36736                                  	; 12/12/2022
 36737                                  	;;jmp	short skip_all		;
 36738                                  	;jnz	short skip_all
 36739                                  qu_1:
 36740 0000414B F606[AA47]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 36741 00004150 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 36742 00004152 50                              push    ax                      ;
 36743 00004153 A0[DD14]                        mov     al,[config_cmd]         ;
 36744 00004156 F606[AA47]01                    test    byte [bQueryOpt],1	; query every command?
 36745 0000415B 7506                            jnz	short query_all		; yes
 36746 0000415D A880                            test    al,CONFIG_OPTION_QUERY  ;
 36747                                  	; 01/01/2023
 36748 0000415F 7502                    	jnz	short query_all		;
 36749                                  	; 12/12/2022
 36750                                  	;;jmp	short do_cmd		;
 36751                                  	;jz	short do_cmd ; cf=0
 36752                                  
 36753                                  	; 01/01/2023
 36754 00004161 58                      	pop	ax
 36755 00004162 C3                      	retn
 36756                                  
 36757                                  query_all:
 36758                                  
 36759                                  ;   Search for the command code (AL) in "comtab", and then print
 36760                                  ;   out the corresponding keyword, followed by the rest of the actual
 36761                                  ;   line pointed to by ES:SI
 36762                                  
 36763 00004163 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 36764 00004164 BA[B64D]                        mov     dx,_$AutoPrmpt    	;
 36765 00004167 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 36766 00004169 7451                            jz	short generic_prompt	; config_cmd must have been 0
 36767                                  
 36768 0000416B 88C6                            mov     dh,al                   ; save config_cmd in DH
 36769 0000416D 29DB                            sub     bx,bx                   ;
 36770 0000416F BF[F747]                        mov     di,comtab		;
 36771                                  find_match:                             ;
 36772 00004172 8A1D                            mov     bl,[di]                 ; get size of current keyword
 36773 00004174 08DB                            or      bl,bl                   ;
 36774 00004176 7425                            jz	short line_print	; end of table
 36775 00004178 47                              inc     di                      ;
 36776 00004179 3A01                            cmp     al,[di+bx]              ; match?
 36777 0000417B 7405                            je	short cmd_match		; yes
 36778 0000417D 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 36779                                  	; 13/05/2019	
 36780 00004180 EBF0                            jmp	short find_match	; loop
 36781                                  cmd_match:                              ;
 36782 00004182 8A4DFF                          mov     cl,[di-1]               ;
 36783 00004185 B500                            mov	ch,0                    ;
 36784 00004187 B402                            mov     ah,STD_CON_OUTPUT ; 2
 36785                                  cmd_print:                              ;
 36786 00004189 8A05                            mov     al,[di]                 ;
 36787 0000418B 47                              inc     di                      ;
 36788 0000418C 88C2                            mov     dl,al                   ;
 36789 0000418E CD21                            int     21h                     ;
 36790 00004190 E2F7                            loop    cmd_print               ;
 36791 00004192 B23D                            mov     dl,'='                  ;
 36792 00004194 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 36793 00004197 7502                            jne	short cmd_notset	;
 36794 00004199 B220                            mov     dl,' '                  ;
 36795                                  cmd_notset:
 36796 0000419B CD21                            int     21h                     ; '=' looks funny on SET commands
 36797                                  line_print:                             ;
 36798                                  	;lods	byte ptr es:[si]        ;
 36799 0000419D 26                              es
 36800 0000419E AC                      	lodsb
 36801 0000419F 08C0                    	or      al,al                   ;
 36802 000041A1 7502                            jnz	short non_null		;
 36803 000041A3 B020                            mov     al,' '                  ;
 36804                                  non_null:                               ;
 36805 000041A5 3C20                            cmp     al,' '                  ; control code?
 36806 000041A7 7210                            jb	short prompt_user	; yes, assume end of line
 36807 000041A9 7506                            jne	short non_space		;
 36808 000041AB 26803C20                        cmp     byte [es:si],' '	;
 36809 000041AF 7208                            jb	short prompt_user	;
 36810                                  non_space:                              ;
 36811 000041B1 88C2                            mov     dl,al                   ;
 36812 000041B3 B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 36813 000041B5 CD21                            int     21h                     ;
 36814 000041B7 EBE4                            jmp	short line_print	;
 36815                                  prompt_user:                            ;
 36816 000041B9 BA[544D]                        mov     dx,_$InterPrmpt		;
 36817                                  
 36818                                  generic_prompt:
 36819 000041BC E8B903                          call    print                   ;
 36820                                  input_loop:                             ;
 36821 000041BF B400                            mov     ah,0                    ; read a key
 36822 000041C1 CD16                            int     16h                     ;
 36823 000041C3 08C0                            or      al,al                   ; is it a function key?
 36824 000041C5 750F                            jnz	short not_func		; no
 36825 000041C7 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 36826 000041CA 75F3                            jne	short input_loop	; no
 36827 000041CC A0[604D]                        mov     al,[_$NO] 		;
 36828 000041CF 800E[AA47]04                    or      byte [bQueryOpt],4	; no more queries
 36829 000041D4 EB21                            jmp     short legal_char        ;
 36830                                  not_func:
 36831 000041D6 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 36832 000041D8 3A06[604D]                      cmp     al,[_$NO]		; verify character is legal
 36833 000041DC 7419                            je	short legal_char	;
 36834 000041DE 3A06[5C4D]                      cmp     al,[_$YES]		;
 36835 000041E2 7413                            je	short legal_char	;
 36836 000041E4 803E[DD14]00                    cmp     byte [config_cmd],0	;
 36837 000041E9 74D4                            je	short input_loop	; don't allow Esc on this query
 36838 000041EB 3C1B                            cmp     al,1Bh                  ; Esc?
 36839 000041ED 75D0                            jne	short input_loop	;
 36840 000041EF 800E[AA47]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 36841 000041F4 A0[5C4D]                        mov     al,[_$YES]
 36842                                  legal_char:                             ;
 36843 000041F7 E885FE                          call    disp_input              ;
 36844 000041FA 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 36845                                  
 36846 000041FB 3A06[604D]                      cmp     al,[_$NO]		; process line?
 36847 000041FF 7403                            je	short skip_cmd		; no
 36848                                  	; 12/12/2022
 36849 00004201 F8                      	clc
 36850                                  do_cmd:
 36851 00004202 58                      	pop     ax			;
 36852                                  	; 12/12/2022
 36853                                  	; cf=0
 36854                                  	;clc				; just do the command
 36855 00004203 C3                      	retn
 36856                                  
 36857                                  skip_cmd:
 36858 00004204 58                      	pop     ax			;
 36859                                  skip_all:
 36860 00004205 B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 36861 00004207 F9                      	stc
 36862 00004208 C3                      	retn
 36863                                  
 36864                                  ;----------------------------------------------------------------------------
 36865                                  ;
 36866                                  ;   print_error: displays multi-config error conditions
 36867                                  ;
 36868                                  ;   INPUT
 36869                                  ;    Carry set to pause, clear to not
 36870                                  ;    ES:SI -> current command line in config.sys
 36871                                  ;
 36872                                  ;   OUTPUT
 36873                                  ;       None
 36874                                  ;
 36875                                  ;   OTHER REGS USED
 36876                                  ;       None
 36877                                  ;
 36878                                  ;   NOTES
 36879                                  ;       None
 36880                                  ;
 36881                                  ;   HISTORY
 36882                                  ;       Created 16-Mar-1992 by JeffPar
 36883                                  ;
 36884                                  ;----------------------------------------------------------------------------
 36885                                  
 36886                                  print_error:
 36887 00004209 50                              push    ax
 36888 0000420A 53                              push    bx
 36889 0000420B 51                              push    cx
 36890 0000420C 52                              push    dx
 36891 0000420D 1E                              push    ds
 36892 0000420E 0E                              push    cs
 36893 0000420F 1F                              pop     ds
 36894 00004210 9C                              pushf
 36895 00004211 E81DFC                          call    get_linenum
 36896 00004214 891E[AD02]                      mov     [linecount],bx
 36897 00004218 E88DE7                          call    error_line
 36898 0000421B 9D                              popf
 36899 0000421C 7319                            jnc	short pe_ret
 36900 0000421E BA[1B4C]                        mov     dx,_$PauseMsg
 36901 00004221 E85403                          call    print
 36902 00004224 B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 36903 00004227 CD21                            int     21h			; wait for a key
 36904 00004229 08C0                            or      al,al			; extended key?
 36905 0000422B 7504                            jnz	short pe_1		; no
 36906 0000422D B407                            mov     ah,07h			; yes
 36907 0000422F CD21                            int     21h			; eat it too
 36908                                  pe_1:     
 36909 00004231 BA[C44A]                	mov     dx,crlfm
 36910 00004234 E84103                          call    print
 36911                                  pe_ret: 
 36912 00004237 1F                      	pop     ds
 36913 00004238 5A                              pop     dx
 36914 00004239 59                              pop     cx
 36915 0000423A 5B                              pop     bx
 36916 0000423B 58                              pop     ax
 36917 0000423C C3                      	retn
 36918                                  
 36919                                  ;----------------------------------------------------------------------------
 36920                                  
 36921                                  ;   This function is very simple: it merely prepends a "/D" to the
 36922                                  ;   command-line for the shell; this (undocumented) switch disables
 36923                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 36924                                  ;   displayed when there's no AUTOEXEC.BAT.
 36925                                  
 36926                                  disable_autoexec:
 36927                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 36928                                  	; 17/04/2019 - Retro DOS v4.0
 36929                                  
 36930 0000423D F606[AA47]04            	test	byte [bQueryOpt],4
 36931 00004242 7443                    	jz	short disable_exit
 36932 00004244 F606[A047]01            	test	byte [dae_flag],1
 36933 00004249 753C                    	jnz	short disable_exit
 36934 0000424B 800E[A047]01            	or	byte [dae_flag],1
 36935                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 36936 00004250 810E[AA47]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 36937 00004256 BA4420                  	mov     dx,'D ' ; 2044h
 36938                                  dae_1:
 36939                                  	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36940 00004259 A0[DF46]                        mov	al,[def_swchr]
 36941                                  	;mov	al,[command_line-1]     ; get default switchchar
 36942 0000425C 08C0                            or      al,al                   ; anything there?
 36943 0000425E 7427                            jz	short disable_exit	; no, disable_autoexec already called
 36944 00004260 8A1E[E046]                      mov     bl,[command_line]       ;
 36945 00004264 B700                            mov     bh,0                    ; BX == command-line length
 36946 00004266 89D9                            mov     cx,bx                   ;
 36947 00004268 80C303                          add     bl,3                    ;
 36948 0000426B 80FB7E                          cmp     bl,126                  ;
 36949 0000426E 7717                            ja	short disable_exit	;
 36950 00004270 881E[E046]                      mov     [command_line],bl       ; update length
 36951 00004274 81C3[E146]                      add     bx,command_line+1	; make sure we move the NULL too
 36952 00004278 41                              inc     cx                      ; (just for consistency sake)
 36953                                  disable_loop:                           ;
 36954 00004279 8A67FD                          mov     ah,[bx-3]               ;
 36955 0000427C 8827                            mov     [bx],ah                 ;
 36956 0000427E 4B                              dec     bx                      ;
 36957 0000427F E2F8                            loop    disable_loop            ;
 36958 00004281 8847FE                          mov     [bx-2],al               ;
 36959                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 36960 00004284 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 36961                                          ;mov	byte [command_line-1],0 ;
 36962                                  disable_exit:                           ;
 36963 00004287 C3                              retn
 36964                                  
 36965                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 36966 00004288 803E[AA47]01            	cmp     byte [bQueryOpt],1
 36967 0000428D 75F8                    	jnz     short disable_exit
 36968 0000428F F606[A047]02            	test	byte [dae_flag],2
 36969 00004294 75F1                    	jnz     short disable_exit
 36970 00004296 800E[A047]02            	or      byte [dae_flag],2
 36971 0000429B BA2059                  	mov     dx,' Y'		; 2059h
 36972 0000429E EBB9                    	jmp     short dae_1
 36973                                  
 36974                                  ;endif  ;MULTI_CONFIG
 36975                                  
 36976                                  ;%endif	; 02/11/2022
 36977                                  
 36978                                  
 36979                                  ; 19/04/2019 - Retro DOS v4.0
 36980                                  
 36981                                  ;----------------------------------------------------------------------------
 36982                                  ;
 36983                                  ; procedure : delim
 36984                                  ;
 36985                                  ;----------------------------------------------------------------------------
 36986                                  
 36987                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36988                                  ; (SYSINIT:4C45h)
 36989                                  
 36990                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36991                                  ;%if 0
 36992                                  ;;ifdef	MULTI_CONFIG
 36993                                  ;
 36994                                  any_delim:
 36995 000042A0 3C0D                    	cmp	al,cr
 36996 000042A2 7427                    	je	short delim_ret
 36997 000042A4 3C0A                    	cmp	al,lf
 36998 000042A6 7423                    	je	short delim_ret
 36999 000042A8 3C5B                    	cmp	al,'['
 37000 000042AA 741F                    	je	short delim_ret
 37001 000042AC 3C5D                    	cmp	al,']'
 37002 000042AE 741B                    	je	short delim_ret
 37003                                  ;
 37004                                  ;;endif ;MULTI_CONFIG
 37005                                  ;%endif ; 02/11/2022
 37006                                  
 37007                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 37008                                  	; (SYSINIT:3450h)	
 37009                                  delim:
 37010 000042B0 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 37011 000042B2 7417                    	je	short delim_ret
 37012                                  
 37013 000042B4 3C00                    	cmp	al,0		; special case for sysinit!!!
 37014 000042B6 7413                    	je	short delim_ret
 37015                                  
 37016                                  org_delim:			; used by organize routine except for getting
 37017 000042B8 3C20                    	cmp	al,' '          ; the filename.
 37018 000042BA 740F                    	je	short delim_ret
 37019 000042BC 3C09                            cmp     al,tab ; 9
 37020 000042BE 740B                    	je	short delim_ret
 37021 000042C0 3C3D                    	cmp	al,'='
 37022 000042C2 7407                    	je	short delim_ret
 37023 000042C4 3C2C                    	cmp	al,','
 37024 000042C6 7403                    	je	short delim_ret
 37025 000042C8 3C3B                    	cmp	al,';'
 37026                                  
 37027                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37028                                  
 37029                                  ; 04/01/2023 - Retro DOS v4.2
 37030                                  ;ifdef	MULTI_CONFIG
 37031                                  ;   Make sure there's no chance of a false EOF indication
 37032 000042CA F8                      	clc
 37033                                  ;endif
 37034                                  	; 02/11/2022
 37035                                  delim_ret:
 37036                                  	; 04/01/2023
 37037                                  	; cf = 0
 37038 000042CB C3                      	retn
 37039                                  
 37040                                  ;----------------------------------------------------------------------------
 37041                                  ;
 37042                                  ; procedure : newline
 37043                                  ;
 37044                                  ;  newline returns with first character of next line
 37045                                  ;
 37046                                  ;----------------------------------------------------------------------------
 37047                                  
 37048                                  newline:
 37049 000042CC E8C2E6                  	call	getchr			;skip non-control characters
 37050 000042CF 7207                    	jc	short nl_ret
 37051 000042D1 3C0A                    	cmp	al,lf			;look for line feed
 37052 000042D3 75F7                    	jne	short newline
 37053 000042D5 E8B9E6                  	call	getchr
 37054                                  nl_ret:
 37055 000042D8 C3                      	retn
 37056                                  
 37057                                  ;----------------------------------------------------------------------------
 37058                                  ; 
 37059                                  ; procedure : mapcase
 37060                                  ;
 37061                                  ;----------------------------------------------------------------------------
 37062                                  
 37063                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 37064                                  
 37065                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 37066                                  	; (SYSINIT:4C7Eh)
 37067                                  mapcase:
 37068 000042D9 51                      	push	cx
 37069 000042DA 56                      	push	si
 37070 000042DB 1E                      	push	ds
 37071                                  
 37072 000042DC 06                      	push	es
 37073 000042DD 1F                      	pop	ds
 37074                                  
 37075                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37076                                  
 37077                                  ; 04/01/2023 - Retro DOS 4.2
 37078                                  
 37079                                  ;ifdef	MULTI_CONFIG
 37080 000042DE 88C3                    	mov	bl,al			; same cmd code this line
 37081                                  ;else
 37082                                  ;	xor	si,si
 37083                                  ;endif
 37084                                  	; 02/11/2022
 37085                                  	; 04/01/2023 - Retro DOS 4.2
 37086                                  	;xor	si, si
 37087                                  
 37088                                  convloop:
 37089 000042E0 AC                      	lodsb
 37090 000042E1 3C61                    	cmp	al,'a'
 37091 000042E3 7209                    	jb	short noconv
 37092 000042E5 3C7A                    	cmp	al,'z'
 37093 000042E7 7705                    	ja	short noconv
 37094 000042E9 2C20                    	sub	al,20h
 37095 000042EB 8844FF                  	mov	[si-1],al
 37096                                  noconv:
 37097                                  
 37098                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37099                                  
 37100                                  ; 04/01/2023 - Retro DOS 4.2
 37101                                  ;ifdef	MULTI_CONFIG
 37102                                  
 37103                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 37104                                  ;   upper-case a line at a time, after we've been able to figure out whether
 37105                                  ;   the line is a SET command or not (since we don't want to upper-case
 37106                                  ;   anything after the "=" in a SET)
 37107                                  ;
 37108 000042EE 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 37109 000042F1 7504                    	jne	short check_eol		; no, just check for end-of-line
 37110 000042F3 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 37111 000042F5 740A                    	je	short convdone		; yes
 37112                                  check_eol:
 37113 000042F7 3C0D                    	cmp	al,cr
 37114 000042F9 7406                    	je	short convdone
 37115 000042FB 3C0A                    	cmp	al,lf
 37116 000042FD 7402                    	je	short convdone
 37117                                  ;endif
 37118                                  	; 02/11/2022
 37119 000042FF E2DF                    	loop	convloop
 37120                                  convdone:
 37121 00004301 1F                      	pop	ds
 37122 00004302 5E                      	pop	si
 37123 00004303 59                      	pop	cx
 37124 00004304 C3                      	retn
 37125                                  
 37126                                  ;----------------------------------------------------------------------------
 37127                                  ;
 37128                                  ; procedure : round
 37129                                  ;
 37130                                  ; round the values in memlo and memhi to paragraph boundary.
 37131                                  ; perform bounds check.
 37132                                  ;
 37133                                  ;----------------------------------------------------------------------------
 37134                                  
 37135                                  round:
 37136 00004305 50                      	push	ax
 37137 00004306 2EA1[6003]              	mov	ax,[cs:memlo]
 37138                                  
 37139 0000430A E85BCE                  	call	ParaRound		; para round up
 37140                                  
 37141 0000430D 2E0106[6203]            	add	[cs:memhi],ax
 37142 00004312 2EC706[6003]0000        	mov	word [cs:memlo],0
 37143 00004319 2EA1[6203]              	mov	ax,[cs:memhi]		; ax = new memhi
 37144 0000431D 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 37145 00004322 7322                    	jae	short mem_err
 37146 00004324 2EF606[E214]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 37147 0000432A 7418                    	jz	short skip_set_devmarksize
 37148 0000432C 06                      	push	es
 37149 0000432D 56                      	push	si
 37150 0000432E 2E8B36[E014]            	mov	si,[cs:devmark_addr]
 37151 00004333 8EC6                    	mov	es,si
 37152 00004335 29F0                    	sub	ax,si
 37153 00004337 48                      	dec	ax
 37154                                  	;mov	[es:3],ax
 37155 00004338 26A30300                	mov	[es:devmark.size],ax	; paragraph
 37156 0000433C 2E8026[E214]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 37157 00004342 5E                      	pop	si
 37158 00004343 07                      	pop	es
 37159                                  skip_set_devmarksize:
 37160 00004344 58                      	pop	ax
 37161                                  	; 11/12/2022
 37162                                  	; cf = 0
 37163                                  	; 02/11/2022
 37164                                  	;clc	; ? (not needed here)	; clear carry
 37165 00004345 C3                      	retn
 37166                                  
 37167                                  ;----------------------------------------------------------------------------
 37168                                  
 37169                                  mem_err:
 37170                                  	; 11/12/2022
 37171 00004346 0E                      	push	cs
 37172 00004347 1F                      	pop	ds
 37173                                  mem_err2:
 37174 00004348 BA[9D4B]                	mov	dx,badmem
 37175                                  	;push	cs
 37176                                  	;pop	ds
 37177 0000434B E82A02                  	call	print
 37178 0000434E E950CE                  	jmp	stall
 37179                                  
 37180                                  ;----------------------------------------------------------------------------
 37181                                  ;
 37182                                  ; procedure : calldev
 37183                                  ;
 37184                                  ;----------------------------------------------------------------------------
 37185                                  
 37186                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 37187                                  	; (SYSINIT:34E0h)
 37188                                  calldev:
 37189 00004351 2E8E1E[B11F]            	mov	ds,[cs:DevEntry+2]
 37190 00004356 2E031E[AF1F]            	add	bx,[cs:DevEntry]	; do a little relocation
 37191 0000435B 8B07                    	mov	ax,[bx]
 37192                                  
 37193 0000435D 2EFF36[AF1F]            	push	word [cs:DevEntry]
 37194 00004362 2EA3[AF1F]              	mov	word [cs:DevEntry],ax
 37195 00004366 BB[6803]                	mov	bx,packet
 37196 00004369 2EFF1E[AF1F]            	call	far [cs:DevEntry]
 37197 0000436E 2E8F06[AF1F]            	pop	word [cs:DevEntry]
 37198 00004373 C3                      	retn
 37199                                  
 37200                                  ;----------------------------------------------------------------------------
 37201                                  ;
 37202                                  ; procedure : todigit
 37203                                  ;
 37204                                  ;----------------------------------------------------------------------------
 37205                                  
 37206                                  todigit:
 37207 00004374 2C30                    	sub	al,'0'
 37208                                  	;jb	short notdig  ; 02/11/2022
 37209                                  	; 12/12/2022
 37210 00004376 7203                    	jb	short notdig2
 37211                                  	;cmp	al,9
 37212                                  	;ja	short notdig
 37213                                  	;clc
 37214                                  	;retn
 37215                                  	; 12/12/2022
 37216 00004378 3C0A                    	cmp	al,10
 37217 0000437A F5                      	cmc
 37218                                  notdig:
 37219                                  	;stc
 37220                                  notdig2:
 37221 0000437B C3                      	retn
 37222                                  
 37223                                  ;----------------------------------------------------------------------------
 37224                                  ;
 37225                                  ; procedure : getnum
 37226                                  ;
 37227                                  ; getnum parses a decimal number.
 37228                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 37229                                  ; error), if number is bad carry is set, zero is set, ax=0.
 37230                                  ;
 37231                                  ;----------------------------------------------------------------------------
 37232                                  
 37233                                  getnum:
 37234 0000437C 53                      	push	bx
 37235 0000437D 31DB                    	xor	bx,bx			; running count is zero
 37236                                  b2:
 37237 0000437F E8F2FF                  	call	todigit 		; do we have a digit ?
 37238 00004382 7247                    	jc	short badnum		; no, bomb
 37239                                  
 37240 00004384 93                      	xchg	ax,bx			; put total in ax
 37241 00004385 53                      	push	bx			; save digit (0 to 9)
 37242                                  	;mov	bx,10			; base of arithmetic
 37243                                  	; 12/12/2022
 37244 00004386 B30A                    	mov	bl,10
 37245 00004388 F7E3                    	mul	bx			; shift by one decimal digit
 37246 0000438A 5B                      	pop	bx			; get back digit (0 to 9)
 37247 0000438B 00D8                    	add	al,bl			; get total
 37248 0000438D 80D400                  	adc	ah,0			; make that 16 bits
 37249 00004390 7239                    	jc	short badnum		; too big a number
 37250                                  
 37251 00004392 93                      	xchg	ax,bx			; stash total
 37252                                  
 37253 00004393 E8FBE5                  	call	getchr			; get next digit
 37254 00004396 722D                    	jc	short b1		; no more characters
 37255 00004398 3C20                    	cmp	al,' ' 			; space?
 37256 0000439A 741F                    	je	short b15		; then end of digits
 37257 0000439C 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 37258 0000439E 741B                    	je	short b15		; then end of digits.
 37259 000043A0 3C09                    	cmp	al, tab ; 9		; tab
 37260 000043A2 7417                    	je	short b15
 37261 000043A4 2E3A06[AC02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 37262 000043A9 7410                    	je	short b15
 37263 000043AB 3C2F                    	cmp	al,'/'			; see if another switch follows
 37264                                  	; 12/12/2022
 37265                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37266                                  	;nop				; cas - remnant of old bad code
 37267                                  	;nop
 37268 000043AD 740C                    	je	short b15
 37269 000043AF 3C0A                    	cmp	al,lf			; line-feed?
 37270 000043B1 7408                    	je	short b15
 37271 000043B3 3C0D                    	cmp	al,cr			; carriage return?
 37272 000043B5 7404                    	je	short b15
 37273 000043B7 08C0                    	or	al,al			; end of line separator?
 37274 000043B9 75C4                    	jnz	short b2		; no, try as a valid char...
 37275                                  b15:
 37276 000043BB 2EFF06[5403]            	inc	word [cs:count]		; one more character to s...
 37277 000043C0 2EFF0E[5803]            	dec	word [cs:chrptr]	; back up over separator
 37278                                  b1:
 37279 000043C5 89D8                    	mov	ax,bx			; get proper count
 37280 000043C7 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 37281 000043C9 5B                      	pop	bx
 37282 000043CA C3                      	retn
 37283                                  badnum:
 37284                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37285                                  	;mov	byte [cs:sepchr],0
 37286 000043CB 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 37287                                  	; 12 /12/2022
 37288 000043CD 2EA2[AC02]              	mov	[cs:sepchr],al ; 0
 37289 000043D1 5B                      	pop	bx
 37290 000043D2 F9                      	stc				; and carry set
 37291 000043D3 C3                      	retn
 37292                                  
 37293                                  ;****************************************************************************
 37294                                  
 37295                                  setdoscountryinfo:
 37296                                  
 37297                                  ;----------------------------------------------------------------------------
 37298                                  ;input: es:di -> pointer to dos_country_cdpg_info
 37299                                  ;	ds:0  -> buffer.
 37300                                  ;	si = 0
 37301                                  ;	ax = country id
 37302                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 37303                                  ;	bx = file handle
 37304                                  ;	this routine can handle maximum 438 country_data entries.
 37305                                  ;
 37306                                  ;output: dos_country_cdpg_info set.
 37307                                  ;	 carry set if any file read failure or wrong information in the file.
 37308                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 37309                                  ;	 codepage_id in the file.
 37310                                  ;----------------------------------------------------------------------------
 37311                                  
 37312                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37313                                  	; (SYSINIT:4D83h)
 37314                                  
 37315 000043D4 57                      	push	di
 37316 000043D5 50                      	push	ax
 37317 000043D6 52                      	push	dx
 37318                                  
 37319 000043D7 31C9                    	xor	cx,cx
 37320 000043D9 31D2                    	xor	dx,dx
 37321 000043DB B80002                  	mov	ax,512			;read 512 bytes
 37322 000043DE E84F01                  	call	readincontrolbuffer	;read the file header
 37323 000043E1 724D                    	jc	short setdosdata_fail
 37324                                  
 37325 000043E3 06                      	push	es
 37326 000043E4 56                      	push	si
 37327                                  
 37328 000043E5 0E                      	push	cs
 37329 000043E6 07                      	pop	es
 37330                                  
 37331 000043E7 BF[4546]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 37332 000043EA B90800                  	mov	cx,8			;length of the signature
 37333 000043ED F3A6                    	repz	cmpsb
 37334                                  
 37335 000043EF 5E                      	pop	si
 37336 000043F0 07                      	pop	es
 37337 000043F1 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 37338                                  
 37339 000043F3 83C612                  	add	si,18			;si -> county info type
 37340 000043F6 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 37341 000043F9 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 37342                                  
 37343 000043FB 46                      	inc	si			;si -> file offset
 37344 000043FC 8B14                    	mov	dx,[si]			;get the info file offset.
 37345 000043FE 8B4C02                  	mov	cx,[si+2]
 37346 00004401 B80018                  	mov	ax,6144			;read 6144 bytes.
 37347 00004404 E82901                  	call	readincontrolbuffer	;read info
 37348 00004407 7227                    	jc	short setdosdata_fail
 37349                                  
 37350 00004409 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 37351 0000440B 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 37352 0000440F 771F                    	ja	short setdosdata_fail
 37353                                  
 37354 00004411 46                      	inc	si
 37355 00004412 46                      	inc	si			;si -> entry information packet
 37356 00004413 5A                      	pop	dx			;restore code page id
 37357 00004414 58                      	pop	ax			;restore country id
 37358 00004415 5F                      	pop	di
 37359                                  
 37360                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 37361 00004416 3B4402                  	cmp	ax,[si+2]		;compare country_id
 37362 00004419 750A                    	jne	short setdoscntry_next
 37363                                  
 37364 0000441B 83FA00                  	cmp	dx,0			;no user specified code page ?
 37365 0000441E 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 37366 00004420 3B5404                  	cmp	dx,[si+4]		;compare code page id
 37367 00004423 7413                    	je	short setdoscntry_got_it
 37368                                  
 37369                                  setdoscntry_next:
 37370 00004425 0334                    	add	si,[si]			;next entry
 37371 00004427 46                      	inc	si
 37372 00004428 46                      	inc	si			;take a word for size of entry itself
 37373 00004429 E2EB                    	loop	setdoscntry_find
 37374                                  
 37375 0000442B B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 37376                                  setdoscntry_fail:
 37377 0000442E F9                      	stc
 37378 0000442F C3                      	retn
 37379                                  
 37380                                  setdosdata_fail:
 37381 00004430 5E                      	pop	si
 37382 00004431 59                      	pop	cx
 37383 00004432 5F                      	pop	di
 37384 00004433 EBF9                    	jmp	short setdoscntry_fail
 37385                                  
 37386                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 37387 00004435 8B5404                  	mov	dx,[si+4]
 37388                                  
 37389                                  setdoscntry_got_it:			;found the matching entry
 37390 00004438 2E8916[4D46]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 37391 0000443D 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 37392 00004440 8B4C0C                  	mov	cx,[si+12]
 37393 00004443 B80002                  	mov	ax,512 			;read 512 bytes
 37394 00004446 E8E700                  	call	readincontrolbuffer
 37395 00004449 72E3                    	jc	short setdoscntry_fail
 37396                                  
 37397 0000444B 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 37398 0000444D 46                      	inc	si
 37399 0000444E 46                      	inc	si			;si -> first entry
 37400                                  
 37401                                  setdoscntry_data:
 37402 0000444F 57                      	push	di			;es:di -> dos_country_cdpg_info
 37403 00004450 51                      	push	cx			;save # of entry left
 37404 00004451 56                      	push	si			;si -> current entry in control buffer
 37405                                  
 37406 00004452 8A4402                  	mov	al,[si+2]		;get data entry id
 37407 00004455 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 37408 00004458 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 37409                                  
 37410 0000445A 8B5404                  	mov	dx,[si+4]		;get offset of data
 37411 0000445D 8B4C06                  	mov	cx,[si+6]
 37412 00004460 B80042                  	mov	ax,4200h
 37413 00004463 F9                      	stc
 37414 00004464 CD21                    	int	21h			;move pointer
 37415 00004466 72C8                    	jc	short setdosdata_fail
 37416                                  
 37417 00004468 BA0002                  	mov	dx,512			;start of data buffer
 37418 0000446B B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 37419 0000446E B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 37420 00004470 F9                      	stc
 37421 00004471 CD21                    	int	21h			;read the country.sys data
 37422 00004473 72BB                    	jc	short setdosdata_fail 	;read failure
 37423                                  
 37424 00004475 39C8                    	cmp	ax,cx
 37425 00004477 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 37426                                  
 37427 00004479 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 37428 0000447C 8B4C06                  	mov	cx,[si+6]
 37429 0000447F B80042                  	mov	ax,4200h
 37430 00004482 F9                      	stc
 37431 00004483 CD21                    	int	21h			;move pointer back again
 37432 00004485 72A9                    	jc	short setdosdata_fail
 37433                                  
 37434 00004487 56                      	push	si
 37435 00004488 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 37436 0000448B 8B0C                    	mov	cx,[si]
 37437 0000448D 5E                      	pop	si
 37438 0000448E BA0002                  	mov	dx,512			;start of data buffer
 37439 00004491 83C10A                  	add	cx,10			;signature + a word for the length itself
 37440 00004494 B43F                    	mov	ah,3Fh			;read the data from the file.
 37441 00004496 F9                      	stc
 37442 00004497 CD21                    	int	21h
 37443 00004499 7295                    	jc	short setdosdata_fail
 37444                                  
 37445 0000449B 39C8                    	cmp	ax,cx
 37446 0000449D 7591                    	jne	short setdosdata_fail
 37447                                  
 37448 0000449F 8A4402                  	mov	al,[si+2]		;save data id for future use.
 37449 000044A2 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 37450 000044A5 8B0C                    	mov	cx,[si]			;get the length of the file
 37451 000044A7 41                      	inc	cx			;take care of a word for lenght of tab
 37452 000044A8 41                      	inc	cx			;itself.
 37453 000044A9 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 37454 000044AD 7781                    	ja	short setdosdata_fail
 37455                                  
 37456                                  	;if	bugfix
 37457 000044AF E83500                  	call	setdbcs_before_copy
 37458                                  	;endif
 37459                                  
 37460 000044B2 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 37461 000044B4 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 37462                                  
 37463 000044B6 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 37464                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 37465 000044BA 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 37466                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 37467                                  	
 37468 000044BE 57                      	push	di			;save di
 37469                                  
 37470 000044BF 50                      	push	ax
 37471 000044C0 2EA1[4D46]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 37472 000044C4 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 37473 000044C7 58                      	pop	ax
 37474                                  
 37475                                  setdoscntry_mov:
 37476 000044C8 F3A4                    	rep	movsb			;copy the table into dos
 37477 000044CA 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 37478 000044CC 7509                    	jne	short setdoscntry_data_next
 37479                                  
 37480 000044CE 5F                      	pop	di			;restore di
 37481 000044CF 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 37482                                  	;pop	word [es:di+26]		;restore
 37483 000044D3 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 37484                                  	;pop	word [es:di+24]
 37485                                  
 37486                                  setdoscntry_data_next:
 37487 000044D7 5E                      	pop	si			;restore control buffer pointer
 37488 000044D8 59                      	pop	cx			;restore # of entries left
 37489 000044D9 5F                      	pop	di			;restore pointer to dso_country_cdpg
 37490 000044DA 0334                    	add	si,[si]			;try to get the next entry
 37491 000044DC 46                      	inc	si
 37492 000044DD 46                      	inc	si			;take a word of entry length itself
 37493 000044DE 49                      	dec	cx
 37494 000044DF 83F900                  	cmp	cx,0
 37495 000044E2 741D                    	je	short setdoscntry_ok
 37496 000044E4 E968FF                  	jmp	setdoscntry_data
 37497                                  
 37498                                  	; 18/12/2022
 37499                                  ;setdoscntry_ok:
 37500                                  	;retn
 37501                                  
 37502                                  ;----------------------------------------------------------------------------
 37503                                  
 37504                                  	;if	bugfix
 37505                                  
 37506                                  setdbcs_before_copy:
 37507 000044E7 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 37508 000044E9 7516                    	jne	short sdbcsbc		; jump if not
 37509 000044EB 26833D00                	cmp	word [es:di],0		; zero byte data block?
 37510 000044EF 7410                    	je	short sdbcsbc		; jump if so
 37511                                  
 37512 000044F1 57                      	push	di
 37513 000044F2 50                      	push	ax
 37514 000044F3 51                      	push	cx
 37515 000044F4 268B0D                  	mov	cx,[es:di]		; load block length
 37516 000044F7 83C702                  	add	di,2			; points actual data
 37517 000044FA 30C0                    	xor	al,al			; fill bytes
 37518 000044FC F3AA                    	rep	stosb			; clear data block
 37519 000044FE 59                      	pop	cx
 37520 000044FF 58                      	pop	ax
 37521 00004500 5F                      	pop	di
 37522                                  sdbcsbc:
 37523                                  setdoscntry_ok:	; 18/12/2022	
 37524 00004501 C3                      	retn
 37525                                  
 37526                                  	;endif
 37527                                  
 37528                                  ;----------------------------------------------------------------------------
 37529                                  
 37530                                  getcountrydestination:
 37531                                  
 37532                                  ;----------------------------------------------------------------------------
 37533                                  ;get the destination address in the dos country info table.
 37534                                  ;
 37535                                  ;input: al - data id
 37536                                  ;	es:di -> dos_country_cdpg_info
 37537                                  ;on return:
 37538                                  ;	es:di -> destination address of the matching data id
 37539                                  ;	carry set if no matching data id found in dos.
 37540                                  ;----------------------------------------------------------------------------
 37541                                  
 37542                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37543                                  	; (SYSINIT:4EB2h)
 37544                                  
 37545 00004502 51                      	push	cx
 37546                                  	;add	di,74
 37547 00004503 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 37548                                  					;skip the reserved area, syscodepage etc.
 37549 00004506 268B0D                  	mov	cx,[es:di]		;get the number of entries
 37550 00004509 47                      	inc	di
 37551 0000450A 47                      	inc	di			;si -> the first start entry id
 37552                                  
 37553                                  getcntrydest:
 37554 0000450B 263805                  	cmp	byte [es:di],al
 37555 0000450E 7413                    	je	short getcntrydest_ok
 37556 00004510 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 37557 00004514 7405                    	je	short getcntrydest_1
 37558                                  
 37559 00004516 83C705                  	add	di,5			;next data id
 37560 00004519 EB03                    	jmp	short getcntrydest_loop
 37561                                  
 37562                                  getcntrydest_1:
 37563                                  	;add	di,41
 37564 0000451B 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 37565                                  getcntrydest_loop:
 37566 0000451E E2EB                    	loop	getcntrydest
 37567 00004520 F9                      	stc
 37568 00004521 EB0B                    	jmp	short getcntrydest_exit
 37569                                  
 37570                                  getcntrydest_ok:
 37571 00004523 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 37572 00004525 7503                    	jne	short getcntrydest_ok1
 37573                                  
 37574 00004527 47                      	inc	di			;now di -> cccountryinfolen
 37575 00004528 EB04                    	jmp	short getcntrydest_exit
 37576                                  
 37577                                  getcntrydest_ok1:
 37578 0000452A 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 37579                                  
 37580                                  getcntrydest_exit:
 37581 0000452E 59                      	pop	cx
 37582 0000452F C3                      	retn
 37583                                  
 37584                                  ;----------------------------------------------------------------------------
 37585                                  
 37586                                  readincontrolbuffer:
 37587                                  
 37588                                  ;----------------------------------------------------------------------------
 37589                                  ;move file pointer to cx:dx
 37590                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 37591                                  ;si will be set to 0 hence ds:si points to the control buffer.
 37592                                  ;
 37593                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 37594                                  ;	 be moved.
 37595                                  ;	 ax - # of bytes to read
 37596                                  ;	 bx - file handle
 37597                                  ;	 ds - buffer seg.
 37598                                  ;return: the control data information is read into ds:0 - ds:0200.
 37599                                  ;	 cx,dx value destroyed.
 37600                                  ;	 carry set if error in reading file.
 37601                                  ;----------------------------------------------------------------------------
 37602                                  
 37603 00004530 50                      	push	ax			;# of bytes to read
 37604 00004531 B80042                  	mov	ax,4200h
 37605 00004534 F9                      	stc
 37606 00004535 CD21                    	int	21h			;move pointer
 37607 00004537 59                      	pop	cx			;# of bytes to read
 37608 00004538 7209                    	jc	short ricb_exit
 37609                                  
 37610 0000453A 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 37611 0000453C 31F6                    	xor	si,si
 37612 0000453E B43F                    	mov	ah,3Fh			;read into the buffer
 37613 00004540 F9                      	stc
 37614 00004541 CD21                    	int	21h			;should be less than 1024 bytes.
 37615                                  ricb_exit:
 37616 00004543 C3                      	retn
 37617                                  
 37618                                  ;----------------------------------------------------------------------------
 37619                                  
 37620                                  ;! set_country_path procedure is not called from anywhere !
 37621                                  ; Erdogan Tan - 04/08/2023
 37622                                  %if 0
 37623                                  
 37624                                  set_country_path:
 37625                                  
 37626                                  ;----------------------------------------------------------------------------
 37627                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 37628                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 37629                                  ;     assumes current directory is the root directory.
 37630                                  ;out: ds:di -> full path (cntry_drv).
 37631                                  ;     set the cntry_drv string from the country=,,path command.
 37632                                  ;     ds, es, si value saved.
 37633                                  ;----------------------------------------------------------------------------
 37634                                  
 37635                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37636                                  	; (SYSINIT:4EF4h)
 37637                                  
 37638                                  	push	si
 37639                                  
 37640                                  	push	ds			;switch ds, es
 37641                                  	push	es
 37642                                  	pop	ds
 37643                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 37644                                  
 37645                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 37646                                  	jc	short scp_default_drv 	;no, use current default drive.
 37647                                  
 37648                                  	mov	al,[si]
 37649                                  	inc	si
 37650                                  	inc	si			;si -> next char after ":"
 37651                                  	jmp	short scp_setdrv
 37652                                  
 37653                                  scp_default_drv:
 37654                                  	mov	ah,19h
 37655                                  	int	21h
 37656                                  	add	al,"A"			;convert it to a character.
 37657                                  
 37658                                  scp_setdrv:
 37659                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 37660                                  	mov	di,cntry_path
 37661                                  	mov	al,[si]
 37662                                  	cmp	al, "\"
 37663                                  	je	short scp_root_dir
 37664                                  
 37665                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 37666                                  	;je	short scp_root_dir
 37667                                  	;jmp	short scp_path
 37668                                  	; 04/01/2023
 37669                                  	jne	short scp_path
 37670                                  
 37671                                  scp_root_dir:
 37672                                  	dec	di			;di -> cntry_root
 37673                                  scp_path:
 37674                                  	call	move_asciiz		;copy it
 37675                                  
 37676                                  	mov	di,cntry_drv
 37677                                  scpath_exit:
 37678                                  
 37679                                  	push	ds			;switch ds, es
 37680                                  	push	es
 37681                                  	pop	ds
 37682                                  	pop	es			;ds, es value restored
 37683                                  
 37684                                  	pop	si
 37685                                  	retn
 37686                                  
 37687                                  ;----------------------------------------------------------------------------
 37688                                  
 37689                                  chk_drive_letter:
 37690                                  
 37691                                  ;check if ds:[si] is a drive letter followed by ":".
 37692                                  ;assume that every alpha character is already converted to upper case.
 37693                                  ;carry set if not.
 37694                                  
 37695                                  	; 04/01/2023 - Retrodos v4.2
 37696                                  
 37697                                  	push	ax
 37698                                  	cmp	byte [si],"A"
 37699                                  	;jb	short cdletter_no
 37700                                  	jb	short cdletter_exit
 37701                                  	cmp	byte [si],"Z"
 37702                                  	ja	short cdletter_no
 37703                                  	cmp	byte [si+1],":"
 37704                                  	;jne	short cdletter_no
 37705                                  	;jmp	short cdletter_exit
 37706                                  	; 04/01/2023
 37707                                  	je	short cdletter_exit
 37708                                  
 37709                                  cdletter_no:
 37710                                  	stc
 37711                                  cdletter_exit:
 37712                                  	pop	ax
 37713                                  	retn
 37714                                  
 37715                                  %endif
 37716                                  
 37717                                  ;----------------------------------------------------------------------------
 37718                                  
 37719                                  move_asciiz:
 37720                                  
 37721                                  ;in: ds:si -> source es:di -> target
 37722                                  ;out: copy the string until 0.
 37723                                  ;assumes there exists a 0.
 37724                                  
 37725                                  masciiz_loop:
 37726 00004544 A4                      	movsb
 37727 00004545 807CFF00                	cmp	byte [si-1],0	; was it 0?
 37728 00004549 75F9                    	jne	short masciiz_loop
 37729 0000454B C3                      	retn
 37730                                  
 37731                                  ;----------------------------------------------------------------------------
 37732                                  
 37733                                  ;	ds:dx points to string to output (asciz)
 37734                                  ;
 37735                                  ;	prints <badld_pre> <string> <badld_post>
 37736                                  
 37737                                  badfil:
 37738 0000454C 0E                      	push	cs
 37739 0000454D 07                      	pop	es
 37740                                  
 37741 0000454E 89D6                    	mov	si,dx
 37742                                  badload:
 37743 00004550 BA[074B]                	mov	dx,badld_pre	; want to print config error
 37744 00004553 BB[C44A]                	mov	bx,crlfm
 37745                                  prnerr:
 37746 00004556 0E                      	push	cs
 37747 00004557 1F                      	pop	ds ; *
 37748 00004558 E81D00                  	call	print
 37749                                  prn1:
 37750 0000455B 268A14                  	mov	dl,[es:si]
 37751 0000455E 08D2                    	or	dl,dl
 37752 00004560 7407                    	jz	short prn2
 37753 00004562 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 37754 00004564 CD21                    	int	21h
 37755 00004566 46                      	inc	si
 37756 00004567 EBF2                    	jmp	short prn1
 37757                                  prn2:
 37758 00004569 89DA                    	mov	dx,bx
 37759 0000456B E80A00                  	call	print
 37760                                  	; 11/12/2022
 37761                                  	; ds = cs ; *
 37762 0000456E 803E[5303]01            	cmp	byte [donotshownum],1
 37763                                  				; suppress line number when handling command.com
 37764                                  	;cmp	byte [cs:donotshownum],1 
 37765 00004573 7407                    	je	short prnexit
 37766                                  	
 37767                                  	; 18/12/2022
 37768                                  	;call	error_line
 37769 00004575 E930E4                  	jmp	error_line
 37770                                  ;prnexit:
 37771                                  	;retn
 37772                                  
 37773                                  ;----------------------------------------------------------------------------
 37774                                  
 37775                                  print:
 37776 00004578 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 37777 0000457A CD21                    	int	21h
 37778                                  prnexit:	; 18/12/2022
 37779 0000457C C3                      	retn
 37780                                  
 37781                                  ;----------------------------------------------------------------------------
 37782                                  
 37783                                  ;  open device pointed to by dx, al has access code
 37784                                  ;   if unable to open do a device open null device instead
 37785                                  
 37786                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 37787                                  	; (SYSINIT:3764h)
 37788                                  open_dev:
 37789 0000457D E80500                  	call	open_file
 37790 00004580 7309                    	jnc	short open_dev3
 37791                                  
 37792                                  open_dev1:
 37793 00004582 BA[E645]                	mov	dx,nuldev
 37794                                  	; 18/12/2022
 37795                                  	;call	open_file
 37796                                  ;of_retn:
 37797                                  	;retn
 37798                                  	; 18/12/2022
 37799                                  	;jmp	short open_file
 37800                                  open_file:
 37801 00004585 B43D                    	mov	ah,OPEN	; 3Dh
 37802 00004587 F9                      	stc
 37803 00004588 CD21                    	int	21h
 37804                                  of_retn:	; 18/12/2022
 37805 0000458A C3                      	retn
 37806                                  
 37807                                  open_dev3:
 37808 0000458B 89C3                    	mov	bx,ax			; handle from open to bx
 37809                                  	;;xor	ax,ax			; get device info
 37810                                  	;;mov	ah,IOCTL ; 44h
 37811                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 37812                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37813                                  	;xor	ax,ax
 37814                                  	;mov	ah,44h	; IOCTL
 37815                                  	; 11/12/2022
 37816 0000458D B80044                  	mov	ax,4400h ; IOCTL<<8 
 37817                                  
 37818 00004590 CD21                    	int	21h
 37819                                  
 37820 00004592 F6C280                  	test	dl,10000000b ; 80h
 37821 00004595 75F3                    	jnz	short of_retn
 37822                                  
 37823 00004597 B43E                    	mov	ah,CLOSE ; 3Eh
 37824 00004599 CD21                    	int	21h
 37825 0000459B EBE5                    	jmp	short open_dev1
 37826                                  
 37827                                  ;----------------------------------------------------------------------------
 37828                                  
 37829                                  ; 18/12/2022
 37830                                  %if 0
 37831                                  open_file:
 37832                                  	mov	ah,OPEN	; 3Dh
 37833                                  	stc
 37834                                  	int	21h
 37835                                  	retn
 37836                                  %endif
 37837                                  
 37838                                  ;----------------------------------------------------------------------------
 37839                                  
 37840                                  ; test int24. return back to dos with the fake user response of "fail"
 37841                                  
 37842                                  int24:
 37843 0000459D B003                    	mov	al,3			; fail the system call
 37844 0000459F CF                      	iret				; return back to dos.
 37845                                  
 37846                                  ; 19/04/2019 - Retro DOS v4.0
 37847                                  
 37848                                  ;----------------------------------------------------------------------------
 37849                                  ; DATA
 37850                                  ;----------------------------------------------------------------------------
 37851                                  
 37852                                  ;include copyrigh.inc			; copyright statement
 37853                                  
 37854                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 37855                                  
 37856                                  ;MsDosVersion6Copyr:
 37857                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 37858                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 37859                                  
 37860                                  ; 22/10/2022
 37861                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 37862                                  
 37863                                  ; 28/12/2022
 37864                                  %if 0
 37865                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37866                                  MsDosVersion5Copyr:
 37867                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 37868                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 37869                                  %endif
 37870                                  
 37871                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37872                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37873                                  ; 20/04/2019 - Retro DOS v4.0
 37874                                  ;BOOTMES:
 37875                                  ;	db      13
 37876                                  ;	db      10
 37877                                  ;	db      "MS-DOS version "
 37878                                  ;	db      MAJOR_VERSION + "0"
 37879                                  ;	db      "."
 37880                                  ;	db      (MINOR_VERSION / 10) + "0"
 37881                                  ;	db      (MINOR_VERSION % 10) + "0"
 37882                                  ;	db      13,10
 37883                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 37884                                  ;	; 22/10/2022
 37885                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 37886                                  ;	;
 37887                                  ;	db	0
 37888                                  
 37889                                  	; 01/01/2023 - Retro DOS v4.2
 37890                                  
 37891                                  	; 28/12/2022 - Retro DOS v4.1
 37892                                  ;MsDosVersion5Copyr:
 37893                                  ;  	db	13,10,"MS DOS Version 5.0"
 37894                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 37895                                  
 37896                                  	; 12/12/2022
 37897 000045A0 00                      	db	0
 37898                                  ; 12/12/2022
 37899                                  BOOTMES:
 37900 000045A1 0D0A                    	db	13,10
 37901                                  	;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 37902                                  	; 28/12/2022
 37903                                  	;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 37904                                  	; 01/01/2023
 37905 000045A3 526574726F20444F53-     	db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 37905 000045AC 2076342E3220284D6F-
 37905 000045B5 646966696564204D53-
 37905 000045BE 444F5320362E323229-
 37905 000045C7 20                 
 37906                                  	
 37907 000045C8 0D0A                    	db	13,10
 37908 000045CA 6279204572646F6761-     	db	"by Erdogan Tan [2023] "
 37908 000045D3 6E2054616E205B3230-
 37908 000045DC 32335D20           
 37909 000045E0 0D0A                    	db	13,10
 37910 000045E2 0D0A2400                	db	13,10,"$",0
 37911                                  
 37912 000045E6 4E554C00                nuldev:	db	"NUL",0
 37913 000045EA 434F4E00                condev:	db	"CON",0
 37914 000045EE 41555800                auxdev:	db	"AUX",0
 37915 000045F2 50524E00                prndev:	db	"PRN",0
 37916                                  
 37917                                  ;IFDEF	CONFIGPROC
 37918 000045F6 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 37918 000045FF 595300             
 37919                                  
 37920 00004602 413A                    cntry_drv:  db	"A:"
 37921 00004604 5C                      cntry_root: db	"\"
 37922 00004605 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 37922 0000460E 595300             
 37923                                  	    ;db	52 dup (0)
 37924 00004611 00<rep 34h>             	    times 52 db 0	
 37925                                  
 37926                                  country_file_signature:
 37927 00004645 FF434F554E545259        	db	0FFh,'COUNTRY'
 37928                                  
 37929                                  cntrycodepage_id: 
 37930 0000464D 0000                    	dw	0 	
 37931                                  
 37932                                  ;ENDIF ; CONFIGPROC
 37933                                  
 37934                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37935                                  ; (SYSINIT:5081h)
 37936                                  
 37937                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37938                                  ;ifdef	MULTI_CONFIG
 37939 0000464F 00                      newcmd:  db	0			; non-zero if non-std shell specified
 37940 00004650 40                      tmplate: db	64                      ; must precede commnd
 37941                                  ;endif
 37942                                  
 37943                                  ;ifdef ROMEXEC
 37944                                  ;	db      7                       ; size of commnd line (excl. null)
 37945                                  ;commnd: db	"COMMAND",0
 37946                                  ;	db	56 dup (0)
 37947                                  ;else
 37948                                  	; 02/11/2022
 37949 00004651 0C                      	db	12                      ; size of commnd line (excl. null)
 37950 00004652 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 37950 0000465B 434F4D00           
 37951                                  	;db	51 dup (0)
 37952 0000465F 00<rep 33h>             	times	51 db 0
 37953                                  ;endif
 37954                                  
 37955                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37956                                  ;ifdef	MULTI_CONFIG
 37957 00004692 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 37957 0000469B 434F4D00           
 37958 0000469F 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 37959 000046A3 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 37959 000046AC 4D4D414E442E434F4D-
 37959 000046B5 00                 
 37960 000046B6 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 37960 000046BF 202F5000           
 37961 000046C3 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 37961 000046CC 414E442E434F4D00   
 37962 000046D4 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 37962 000046DD 5000               
 37963                                  def_swchr:	
 37964 000046DF 00                      	 db	0			; default switchchar (referenced as command_line-1)
 37965                                  ;endif
 37966                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37967                                  command_line:
 37968 000046E0 022F50                  	db	2,"/P"			; default command.com args
 37969                                  	;db	125 dup (0)
 37970 000046E3 00<rep 7Dh>             	times	125 db 0
 37971                                  
 37972                                  pathstring:
 37973                                  	;db	64 dup (0)
 37974 00004760 00<rep 40h>             	times	64 db 0
 37975                                  
 37976                                  
 37977                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37978                                  ; (SYSINIT:51D3h)
 37979                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37980                                  ;%if 0
 37981                                  
 37982                                  dae_flag:
 37983 000047A0 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 37984                                  
 37985                                  ;ifdef	MULTI_CONFIG
 37986                                  
 37987                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 37988                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 37989                                  
 37990                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 37991                                  
 37992 000047A1 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 37993 000047A2 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 37994 000047A3 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 37995 000047A4 00                      bLastCol:	db      0               ; ending column on status line
 37996 000047A5 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 37997 000047A6 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 37998                                                                          ; 2=disable default 2-second delay
 37999 000047A7 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 38000 000047A8 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 38001 000047AA 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 38002 000047AB 01                      bDefBlock:	db      1               ; default block #
 38003 000047AC 00                      bMaxBlock:	db      0               ; maximum block #
 38004 000047AD 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 38005 000047AF FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 38006 000047B0 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 38007 000047B1 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 38008 000047BB 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 38009 000047CF 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 38010                                  
 38011 000047E3 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 38012 000047EB 4D454E5500              szMenu:		db      "MENU",0
 38013 000047F0 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 38014                                  
 38015                                  ;endif	;MULTI_CONFIG
 38016                                  
 38017                                  comtab:	 ; label byte
 38018                                  
 38019                                  ;            cmd len    command         cmd code
 38020                                  ;            -------    -------         --------
 38021                                  
 38022                                  ;ifdef MULTI_CONFIG
 38023 000047F7 015B5B                          db      1,      "[",            CONFIG_BEGIN
 38024                                  ;endif
 38025 000047FA 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 38026 00004801 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 38027 0000480A 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 38028 00004813 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 38029 0000481C 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 38030 00004824 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 38030 0000482D 474855             
 38031 00004830 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 38032 00004835 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 38032 0000483E 50                 
 38033 0000483F 044643425358                    db      4,      "FCBS",         CONFIG_FCBS
 38034 00004845 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 38035                                  ;ifdef MULTI_CONFIG
 38036 0000484C 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 38037                                  ;endif
 38038 00004855 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 38039 0000485E 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 38039 00004867 49474857           
 38040 0000486B 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 38040 00004874 454C               
 38041                                  ;ifdef MULTI_CONFIG
 38042 00004876 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 38043 0000487F 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 38043 00004888 5252               
 38044 0000488A 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 38044 00004893 554C5441           
 38045 00004897 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 38045 000048A0 45                 
 38046                                  ;endif
 38047 000048A1 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 38047 000048AA 434B4D             
 38048                                  ;ifdef MULTI_CONFIG
 38049 000048AD 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 38050                                  ;endif
 38051 000048B6 0352454D30                      db      3,      "REM",          CONFIG_REM
 38052                                  ;ifdef MULTI_CONFIG
 38053 000048BB 0353455456                      db      3,      "SET",          CONFIG_SET
 38054                                  ;endif
 38055 000048C0 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 38056                                  ;if    STACKSW
 38057 000048C7 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 38058                                  ;endif
 38059 000048CF 085357495443484553-             db      8,      "SWITCHES",     CONFIG_SWITCHES
 38059 000048D8 31                 
 38060 000048D9 00                      	db	0
 38061                                  
 38062                                  ;%endif ; 02/11/2022
 38063                                  
 38064                                  ; 01/01/2023 - Retro DOS v4.2
 38065                                  %if 0
 38066                                  
 38067                                  comtab:
 38068                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38069                                  	; (SYSINIT:38EDh)
 38070                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 38071                                  	db      5,      "BREAK",        CONFIG_BREAK
 38072                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 38073                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 38074                                  	db      5,      "FILES",        CONFIG_FILES
 38075                                  	db      4,      "FCBS",         CONFIG_FCBS
 38076                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 38077                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 38078                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 38079                                  	db      6,      "STACKS",       CONFIG_STACKS
 38080                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 38081                                  	db      5,      "SHELL",        CONFIG_SHELL
 38082                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 38083                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 38084                                  	db      3,      "REM",          CONFIG_REM
 38085                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 38086                                  	db      3,      "DOS",          CONFIG_DOS
 38087                                  	db	0
 38088                                  
 38089                                  %endif
 38090                                  
 38091                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38092                                  ; (SYSINIT:530Ch)
 38093                                  
 38094                                  deviceparameters:	
 38095                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 38096                                  devp.specialfunc:	; deviceparameters +
 38097 000048DA 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 38098                                  devp.devtype:
 38099 000048DB 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 38100                                  devp.devattr:
 38101 000048DC 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 38102                                  devp.cylinders:
 38103 000048DE 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 38104                                  
 38105                                  ; 04/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 38106                                  
 38107                                  	;times	286	db 0
 38108                                  devp.mediatype:		; A_DEVICEPARAMETERS.DP_MEDIATYPE
 38109 000048E0 00                      	db	0
 38110                                  devp.bpb:		; A_DEVICEPARAMETERS.DP_BPB
 38111                                  devp.bps:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR
 38112 000048E1 0000                    	dw	0
 38113                                  devp.secperclus:	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER	
 38114 000048E3 00                      	db	0	
 38115 000048E4 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_RESERVEDSECTORS
 38116 000048E6 00                      	db	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_NUMBEROFFATS
 38117 000048E7 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_ROOTENTRIES
 38118                                  devp.totalsecs:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS
 38119 000048E9 0000                    	dw	0
 38120                                  devp.mediaid:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR
 38121 000048EB 00                      	db	0
 38122 000048EC 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERFAT
 38123                                  devp.spt:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK
 38124 000048EE 0000                    	dw	0
 38125                                  devp.heads:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS
 38126 000048F0 0000                    	dw	0	
 38127                                  
 38128                                  	;times	68 db 0	; PCDOS 7.1  (FAT32 BPB)
 38129                                  	;times	14 db 0	; MSDOS 6.21
 38130 000048F2 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HIDDENSECTORS
 38131 000048F4 0000                    	dw	0
 38132 000048F6 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BIGTOTALSECTORS
 38133 000048F8 0000                    	dw	0
 38134 000048FA 00<rep 6h>              	times	6 db 0	
 38135                                  
 38136                                  devp.trktblents:
 38137 00004900 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES
 38138                                  devp.sectbl:		; A_DEVICEPARAMETERS.DP_SECTORTABLE
 38139 00004902 00<rep FCh>             	times	252 db 0 ; MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 38140                                  			; 63*4 bytes		
 38141                                  
 38142                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38143                                  ; (SYSINIT:5430h)
 38144                                  	
 38145 000049FE 0200                    hlim:	dw	2
 38146 00004A00 0900                    slim:	dw	9
 38147                                  
 38148 00004A02 00                      drive:	db	0
 38149                                  
 38150                                  switches:
 38151 00004A03 0000                    	dw	0
 38152                                  
 38153                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38154                                  ; (SYSINIT:5437h)
 38155                                  
 38156                                  ; the following are the recommended bpbs for the media that
 38157                                  ; we know of so far.
 38158                                  
 38159                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38160                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 38161                                  
 38162                                  ; 48 tpi diskettes
 38163                                  
 38164 00004A05 0002                    bpb48t	dw	512
 38165 00004A07 02                      	db	2
 38166 00004A08 0100                    	dw	1
 38167 00004A0A 02                      	db	2
 38168 00004A0B 7000                    	dw	112
 38169 00004A0D D002                    	dw	2*9*40 ; 720
 38170 00004A0F FD                      	db	0FDh
 38171 00004A10 0200                    	dw	2
 38172 00004A12 0900                    	dw	9
 38173 00004A14 0200                    	dw	2
 38174 00004A16 00000000                	dd	0
 38175 00004A1A 00000000                        dd      0
 38176                                  
 38177                                  ; 96tpi diskettes
 38178                                  
 38179 00004A1E 0002                    bpb96t:	dw	512
 38180 00004A20 01                      	db	1
 38181 00004A21 0100                    	dw	1
 38182 00004A23 02                      	db	2
 38183 00004A24 E000                    	dw	224
 38184 00004A26 6009                    	dw	2*15*80 ; 2400
 38185 00004A28 F9                      	db	0F9h
 38186 00004A29 0700                    	dw	7
 38187 00004A2B 0F00                    	dw	15
 38188 00004A2D 0200                    	dw	2
 38189 00004A2F 00000000                	dd	0
 38190 00004A33 00000000                        dd      0
 38191                                  
 38192                                  ; 3 1/2 inch diskette bpb
 38193                                  
 38194 00004A37 0002                    bpb35:	dw	512
 38195 00004A39 02                      	db	2
 38196 00004A3A 0100                    	dw	1
 38197 00004A3C 02                      	db	2
 38198 00004A3D 7000                    	dw	112
 38199 00004A3F A005                    	dw	2*9*80 ; 1440
 38200 00004A41 F9                      	db	0F9h
 38201 00004A42 0300                    	dw	3
 38202 00004A44 0900                    	dw	9
 38203 00004A46 0200                    	dw	2
 38204 00004A48 00000000                	dd	0
 38205 00004A4C 00000000                        dd      0
 38206                                        
 38207 00004A50 0002                    bpb35h:	dw	512
 38208 00004A52 01                      	db	1
 38209 00004A53 0100                    	dw	1
 38210 00004A55 02                      	db	2
 38211 00004A56 E000                    	dw	224
 38212 00004A58 400B                    	dw	2*18*80 ; 2880
 38213 00004A5A F0                      	db	0F0h
 38214 00004A5B 0900                    	dw	9
 38215 00004A5D 1200                    	dw	18
 38216 00004A5F 0200                    	dw	2
 38217 00004A61 00000000                	dd	0
 38218 00004A65 00000000                        dd      0
 38219                                  
 38220                                  ; m037 - BEGIN
 38221                                  
 38222 00004A69 0002                    bpb288:	dw	512
 38223 00004A6B 02                      	db	2
 38224 00004A6C 0100                    	dw	1
 38225 00004A6E 02                      	db	2
 38226 00004A6F F000                    	dw	240
 38227 00004A71 8016                    	dw	2*36*80 ; 5760
 38228 00004A73 F0                      	db	0F0h
 38229 00004A74 0900                    	dw	9
 38230 00004A76 2400                    	dw	36
 38231 00004A78 0200                    	dw	2
 38232 00004A7A 00000000                	dd	0
 38233 00004A7E 00000000                        dd      0
 38234                                  
 38235                                  ; m037 - END
 38236                                  
 38237                                  ; 12/05/2019
 38238                                  
 38239                                  align 2
 38240                                  
 38241                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38242                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 38243                                  
 38244 00004A82 [054A]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 38245 00004A84 [1E4A]                  	    dw	    bpb96t		; 96tpi drives
 38246 00004A86 [374A]                  	    dw	    bpb35		; 3.5" drives
 38247                                  ; the following are not supported, so default to 3.5" media layout
 38248 00004A88 [374A]                  	    dw	    bpb35		; not used - 8" drives
 38249 00004A8A [374A]                  	    dw	    bpb35		; not used - 8" drives
 38250 00004A8C [374A]                  	    dw	    bpb35		; not used - hard files
 38251 00004A8E [374A]                  	    dw	    bpb35		; not used - tape drives
 38252 00004A90 [504A]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 38253 00004A92 [374A]                  	    dw	    bpb35		; ERIMO				m037
 38254 00004A94 [694A]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 38255                                  
 38256                                  switchlist: 
 38257 00004A96 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 38258                                  
 38259                                  ;----------------------------------------------------------------------------
 38260                                  ; Messages
 38261                                  ;----------------------------------------------------------------------------
 38262                                  
 38263                                  ; 19/04/2019 - Retro DOS v4.0
 38264                                  
 38265                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 38266                                  
 38267 00004A9F 00                      	db 	0
 38268                                  
 38269                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38270                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 38271                                  
 38272                                  badopm:
 38273 00004AA0 0D0A                    	db	0Dh,0Ah 
 38274 00004AA2 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 38274 00004AAB 7A656420636F6D6D61-
 38274 00004AB4 6E6420696E20434F4E-
 38274 00004ABD 4649472E535953     
 38275                                  crlfm:
 38276 00004AC4 0D0A24                  	db	0Dh,0Ah,'$'
 38277                                  badparm:
 38278 00004AC7 0D0A                    	db	0Dh,0Ah
 38279 00004AC9 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 38279 00004AD2 6E64206F7220706172-
 38279 00004ADB 616D6574657273202D-
 38279 00004AE4 2024               
 38280                                  badsiz_pre:
 38281 00004AE6 0D0A                    	db	0Dh,0Ah
 38282 00004AE8 536563746F72207369-     	db	'Sector size too large in file $'
 38282 00004AF1 7A6520746F6F206C61-
 38282 00004AFA 72676520696E206669-
 38282 00004B03 6C652024           
 38283                                  badld_pre:
 38284 00004B07 0D0A                    	db	0Dh,0Ah
 38285 00004B09 426164206F72206D69-     	db	'Bad or missing $'
 38285 00004B12 7373696E672024     
 38286                                  badcom:
 38287 00004B19 436F6D6D616E642049-     	db	'Command Interpreter',0
 38287 00004B22 6E7465727072657465-
 38287 00004B2B 7200               
 38288                                  badcountry:
 38289 00004B2D 0D0A                    	db	0Dh,0Ah
 38290 00004B2F 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 38290 00004B38 6F756E74727920636F-
 38290 00004B41 6465206F7220636F64-
 38290 00004B4A 6520706167650D0A24 
 38291                                  badcountrycom:
 38292 00004B53 0D0A                    	db	0Dh,0Ah
 38293 00004B55 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 38293 00004B5E 434F554E5452592063-
 38293 00004B67 6F6D6D616E640D0A24 
 38294                                  insufmemory:
 38295 00004B70 0D0A                    	db	0Dh,0Ah
 38296 00004B72 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 38296 00004B7B 656E74206D656D6F72-
 38296 00004B84 7920666F7220434F55-
 38296 00004B8D 4E5452592E53595320-
 38296 00004B96 66696C650D0A24     
 38297                                  badmem:
 38298 00004B9D 0D0A                    	db	0Dh,0Ah
 38299 00004B9F 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 38299 00004BA8 74696F6E20746F6F20-
 38299 00004BB1 6C6172676520666F72-
 38299 00004BBA 206D656D6F72790D0A-
 38299 00004BC3 24                 
 38300                                  badblock:
 38301 00004BC4 0D0A                    	db	0Dh,0Ah
 38302 00004BC6 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 38302 00004BCF 626C6F636B20646576-
 38302 00004BD8 696365730D0A24     
 38303                                  badstack:
 38304 00004BDF 0D0A                    	db	0Dh,0Ah
 38305 00004BE1 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 38305 00004BEA 5441434B2070617261-
 38305 00004BF3 6D65746572730D0A24 
 38306                                  	; 18/12/2022
 38307                                  ;badorder:
 38308                                  	;db	0Dh,0Ah
 38309                                  	;db	'Incorrect order in CONFIG.SYS line $'
 38310                                  errorcmd:
 38311 00004BFC 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 38311 00004C05 434F4E4649472E5359-
 38311 00004C0E 53206C696E652024   
 38312                                  
 38313                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38314                                  ; (SYSINIT:566Eh)
 38315                                  
 38316                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38317                                  ;%if 0
 38318                                  
 38319 00004C16 4F4E                    OnOff:	db	'ON'
 38320 00004C18 4F4646                  OnOff2:	db	'OFF'
 38321                                  
 38322                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38323                                  	; (SYSINIT:5673h)
 38324                                  ;StartMsg:
 38325                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 38326                                  ;	db	0Ah,0
 38327                                  
 38328                                  _$PauseMsg:
 38329 00004C1B 507265737320616E79-     	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 38329 00004C24 206B657920746F2063-
 38329 00004C2D 6F6E74696E7565202E-
 38329 00004C36 202E202E0D0A24     
 38330                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:590Dh)
 38331                                  	;db	'Press any key to continue...',0Dh,0Ah,'$'
 38332                                  _$CleanMsg:
 38333 00004C3D 4D532D444F53206973-     	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 38333 00004C46 20627970617373696E-
 38333 00004C4F 6720796F757220434F-
 38333 00004C58 4E4649472E53595320-
 38333 00004C61 616E64204155544F45-
 38333 00004C6A 5845432E4241542066-
 38333 00004C73 696C65732E0D0A24   
 38334                                  _$InterMsg:
 38335 00004C7B 4D532D444F53207769-     	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 38335 00004C84 6C6C2070726F6D7074-
 38335 00004C8D 20796F7520746F2063-
 38335 00004C96 6F6E6669726D206561-
 38335 00004C9F 636820434F4E464947-
 38335 00004CA8 2E53595320636F6D6D-
 38335 00004CB1 616E642E0D0A24     
 38336                                  _$MenuHeader:
 38337 00004CB8 0D0A                    	db	0Dh,0Ah
 38338 00004CBA 20204D532D444F5320-     	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 38338 00004CC3 362E32205374617274-
 38338 00004CCC 7570204D656E750D0A 
 38339 00004CD5 2020                    	db	'  '
 38340 00004CD7 CD<rep 17h>             	times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 38341 00004CEE 0D0A24                  	db 	0Dh,0Ah,'$'
 38342                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:59A7h)
 38343                                  	;db	'  PC DOS 7.1 Startup Menu',0Dh,0Ah
 38344                                  	;db	'  '
 38345                                  	;times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 38346                                  	;db 	0Dh,0Ah,'$'
 38347                                  _$MenuPrmpt:
 38348 00004CF1 2020456E7465722061-     	db	'  Enter a choice: $'
 38348 00004CFA 2063686F6963653A20-
 38348 00004D03 24                 
 38349                                  _$StatusLine:
 38350 00004D04 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 38350 00004D0D 207374617274757020-
 38350 00004D16 66696C65732046383D-
 38350 00004D1F 436F6E6669726D2065-
 38350 00004D28 616368206C696E6520-
 38350 00004D31 6F6620434F4E464947-
 38350 00004D3A 2E53595320         
 38351 00004D3F 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 38351 00004D48 5845432E424154205B-
 38351 00004D51 205D24             
 38352                                  _$InterPrmpt:
 38353 00004D54 205B592C4E5D3F24        	db	' [Y,N]?$'
 38354                                  	; 04/08/2023
 38355                                  	;db	' [Y,N,ESC]?$' ; PCDOS 7.1 - IBMBIO.COM 
 38356 00004D5C 59455324                _$YES:	db	'YES$'
 38357 00004D60 4E4F2024                _$NO:	db	'NO $'
 38358                                  _$TimeOut:
 38359 00004D64 54696D652072656D61-     	db	'Time remaining: $'
 38359 00004D6D 696E696E673A2024   
 38360                                  badcomprmpt:
 38361 00004D75 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 38361 00004D7E 72656374206E616D65-
 38361 00004D87 206F6620436F6D6D61-
 38361 00004D90 6E6420496E74657270-
 38361 00004D99 726574657220286567-
 38361 00004DA2 2C20433A5C434F4D4D-
 38361 00004DAB 414E442E434F4D29   
 38362 00004DB3 0D0A24                  	db	0Dh,0Ah,'$'
 38363                                  _$AutoPrmpt:
 38364 00004DB6 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 38364 00004DBF 55544F455845432E42-
 38364 00004DC8 4154205B592C4E5D3F-
 38364 00004DD1 24                 
 38365                                  
 38366                                  ;%endif ; 02/11/2022
 38367                                  
 38368                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38369                                  ; (SYSINIT:5840h)
 38370                                  
 38371                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38372                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 38373                                  
 38374                                  TooManyDrivesMsg:
 38375 00004DD2 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 38375 00004DDB 4C6F676963616C2064-
 38375 00004DE4 726976657320706173-
 38375 00004DED 74205A3A2065786973-
 38375 00004DF6 7420616E642077696C-
 38375 00004DFF 6C2062652069676E6F-
 38375 00004E08 7265640D0A24       
 38376                                  
 38377                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 38378                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 38379                                  	;db	7 dup(0)
 38380                                  
 38381                                  	;times	7 db 0
 38382                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38383                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 38384                                  	; 09/12/2022
 38385                                  	;times 4 db 0
 38386                                  
 38387                                  ;----------------------------------------------------------------------------
 38388                                  		; 09/12/2022
 38389                                  		;db 0
 38390                                  
 38391                                  number3div	equ ($-SYSINIT$)
 38392                                  number3mod	equ (number3div % 16)
 38393                                  
 38394                                  %if number3mod>0 & number3mod<16
 38395 00004E0E 00<rep 2h>              		times (16-number3mod) db 0
 38396                                  %endif
 38397                                  
 38398                                  ;---------------------------------------------------------------------------- 
 38399                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 38400                                  ;---------------------------------------------------------------------------- 
 38401                                  
 38402                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 38403                                  
 38404                                  ;----------------------------------------------------------------------------
 38405                                  ; 20/04/2019 - Retro DOS v4.0
 38406                                  
 38407                                  ; 09/12/2022
 38408                                  ;
 38409                                  ;bss_start:
 38410                                  ;
 38411                                  ;ABSOLUTE bss_start
 38412                                  ;
 38413                                  ;alignb 16
 38414                                  
 38415                                  SI_end:  ; SI_end equ $
 38416                                  
 38417                                  ;----------------------------------------------------------------------------
 38418                                  
 38419                                  ;sysinitseg	ends
 38420                                  
 38421                                  ; ***************************************************************************
 38422                                  
 38423                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 38424                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 38425                                  
 38426                                  SYSINITSIZE	equ SI_end - SYSINIT$
 38427                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 38428                                  
 38429                                  ;----------------------------------------------------------------------------
 38430                                  ; End of Retro DOS v4.2 IO.SYS source by Erdogan Tan - 04/01/2023 -
 38431                                  ;----------------------------------------------------------------------------
 38432                                  
 38433                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 38434                                  ;----------------------------------------------------------------------------
 38435                                  ;----------------------------------------------------------------------------
 38436                                  
 38437                                  ; ----------------------------------------------------------------------------
 38438                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 38439                                  ; ----------------------------------------------------------------------------
 38440                                  ; 04/01/2023 - Retro DOS v4.2
 38441                                  ; 29/12/2022 - Retro DOS v4.1
 38442                                  ; 18/03/2019 - Retro DOS v4.0 
 38443                                  ; 11/06/2018 - Retro DOS v3.0 
 38444                                  
 38445                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 38446                                  		;; 28/06/2019 ('msdos6.s') 
 38447                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 38448                                  		
 38449                                  		; 29/12/2022
 38450                                  		;incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 38451                                  
 38452                                  		; 04/01/2023
 38453 00004E10 <bin 8EFAh>             		incbin	'MSDOS6.BIN' ; Retro DOS 4.2 - MSDOS 6.21+ KERNEL		
 38454                                  		
 38455                                  		;; 28/12/2022 (BugFix)
 38456                                  		;; 22/12/2022
 38457                                  		;; 21/12/2022 ('msdos5.s')
 38458                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 38459                                  	
 38460                                  msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 38461                                  
 38462                                  align 2
 38463                                  
 38464                                  ; 21/12/2022
 38465                                  ;END_OF_KERNEL:
 38466                                  END_OF_KERNEL equ $
 38467                                  
 38468                                  ;=============================================================================
 38469                                  ;	END
 38470                                  ;=============================================================================
 38471                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 38472                                  ; ------------------------------
 38473                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
